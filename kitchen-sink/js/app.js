/**
 * Framework7 Vue 2.0.0-beta.1
 * Build full featured iOS & Android apps using Framework7 & Vue
 * http://framework7.io/vue/
 *
 * Copyright 2014-2017 Vladimir Kharlampidi
 *
 * Released under the MIT License
 *
 * Released on: September 8, 2017
 */

(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(factory());
}(this, (function () { 'use strict';

/*!
 * Vue.js v2.4.2
 * (c) 2014-2017 Evan You
 * Released under the MIT License.
 */
/*  */

// these helpers produces better vm code in JS engines due to their
// explicitness and function inlining
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}

/**
 * Check if value is primitive
 */
function isPrimitive (value) {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    typeof value === 'boolean'
  )
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

var _toString = Object.prototype.toString;

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex (val) {
  var n = parseFloat(val);
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString (val) {
  return val == null
    ? ''
    : typeof val === 'object'
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert a input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if a attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,is');

/**
 * Remove an item from an array
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether the object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /([^-])([A-Z])/g;
var hyphenate = cached(function (str) {
  return str
    .replace(hyphenateRE, '$1-$2')
    .replace(hyphenateRE, '$1-$2')
    .toLowerCase()
});

/**
 * Simple bind, faster than native
 */
function bind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }
  // record original fn length
  boundFn._length = fn.length;
  return boundFn
}

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)
 */
function noop (a, b, c) {}

/**
 * Always return false.
 */
var no = function (a, b, c) { return false; };

/**
 * Return same value
 */
var identity = function (_) { return _; };

/**
 * Generate a static keys string from compiler modules.
 */


/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var SSR_ATTR = 'data-server-rendered';

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated'
];

/*  */

var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
});

/*  */

var emptyObject = Object.freeze({});

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = /[^\w.$]/;
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */

var warn = noop;
var tip = noop;
var formatComponentName = (null); // work around flow check

{
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = function (str) { return str
    .replace(classifyRE, function (c) { return c.toUpperCase(); })
    .replace(/[-_]/g, ''); };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && (!config.silent)) {
      console.error(("[Vue warn]: " + msg + trace));
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && (!config.silent)) {
      console.warn("[Vue tip]: " + msg + (
        vm ? generateComponentTrace(vm) : ''
      ));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>'
    }
    var name = typeof vm === 'string'
      ? vm
      : typeof vm === 'function' && vm.options
        ? vm.options.name
        : vm._isVue
          ? vm.$options.name || vm.$options._componentTag
          : vm.name;

    var file = vm._isVue && vm.$options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (
      (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
      (file && includeFile !== false ? (" at " + file) : '')
    )
  };

  var repeat = function (str, n) {
    var res = '';
    while (n) {
      if (n % 2 === 1) { res += str; }
      if (n > 1) { str += str; }
      n >>= 1;
    }
    return res
  };

  var generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        tree.push(vm);
        vm = vm.$parent;
      }
      return '\n\nfound in\n\n' + tree
        .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
            ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
            : formatComponentName(vm))); })
        .join('\n')
    } else {
      return ("\n\n(found in " + (formatComponentName(vm)) + ")")
    }
  };
}

/*  */

function handleError (err, vm, info) {
  if (config.errorHandler) {
    config.errorHandler.call(null, err, vm, info);
  } else {
    {
      warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
    }
    /* istanbul ignore else */
    if (inBrowser && typeof console !== 'undefined') {
      console.error(err);
    } else {
      throw err
    }
  }
}

/*  */
/* globals MutationObserver */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = UA && UA.indexOf('android') > 0;
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;

// Firefix has a "watch" function on Object.prototype...
var nativeWatch = ({}).watch;

var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    })); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

/**
 * Defer a task to execute it asynchronously.
 */
var nextTick = (function () {
  var callbacks = [];
  var pending = false;
  var timerFunc;

  function nextTickHandler () {
    pending = false;
    var copies = callbacks.slice(0);
    callbacks.length = 0;
    for (var i = 0; i < copies.length; i++) {
      copies[i]();
    }
  }

  // the nextTick behavior leverages the microtask queue, which can be accessed
  // via either native Promise.then or MutationObserver.
  // MutationObserver has wider support, however it is seriously bugged in
  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
  // completely stops working after triggering a few times... so, if native
  // Promise is available, we will use it:
  /* istanbul ignore if */
  if (typeof Promise !== 'undefined' && isNative(Promise)) {
    var p = Promise.resolve();
    var logError = function (err) { console.error(err); };
    timerFunc = function () {
      p.then(nextTickHandler).catch(logError);
      // in problematic UIWebViews, Promise.then doesn't completely break, but
      // it can get stuck in a weird state where callbacks are pushed into the
      // microtask queue but the queue isn't being flushed, until the browser
      // needs to do some other work, e.g. handle a timer. Therefore we can
      // "force" the microtask queue to be flushed by adding an empty timer.
      if (isIOS) { setTimeout(noop); }
    };
  } else if (typeof MutationObserver !== 'undefined' && (
    isNative(MutationObserver) ||
    // PhantomJS and iOS 7.x
    MutationObserver.toString() === '[object MutationObserverConstructor]'
  )) {
    // use MutationObserver where native Promise is not available,
    // e.g. PhantomJS IE11, iOS7, Android 4.4
    var counter = 1;
    var observer = new MutationObserver(nextTickHandler);
    var textNode = document.createTextNode(String(counter));
    observer.observe(textNode, {
      characterData: true
    });
    timerFunc = function () {
      counter = (counter + 1) % 2;
      textNode.data = String(counter);
    };
  } else {
    // fallback to setTimeout
    /* istanbul ignore next */
    timerFunc = function () {
      setTimeout(nextTickHandler, 0);
    };
  }

  return function queueNextTick (cb, ctx) {
    var _resolve;
    callbacks.push(function () {
      if (cb) {
        try {
          cb.call(ctx);
        } catch (e) {
          handleError(e, ctx, 'nextTick');
        }
      } else if (_resolve) {
        _resolve(ctx);
      }
    });
    if (!pending) {
      pending = true;
      timerFunc();
    }
    if (!cb && typeof Promise !== 'undefined') {
      return new Promise(function (resolve, reject) {
        _resolve = resolve;
      })
    }
  }
})();

var _Set;
/* istanbul ignore if */
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = (function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */


var uid$1 = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  this.id = uid$1++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// the current target watcher being evaluated.
// this is globally unique because there could be only one
// watcher being evaluated at any time.
Dep.target = null;
var targetStack = [];

function pushTarget (_target) {
  if (Dep.target) { targetStack.push(Dep.target); }
  Dep.target = _target;
}

function popTarget () {
  Dep.target = targetStack.pop();
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);[
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
]
.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var arguments$1 = arguments;

    var args = [], len = arguments.length;
    while ( len-- ) { args[ len ] = arguments$1[ len ]; }

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * By default, when a reactive property is set, the new value is
 * also converted to become reactive. However when passing down props,
 * we don't want to force conversion because the value may be a nested value
 * under a frozen data structure. Converting it would defeat the optimization.
 */
var observerState = {
  shouldConvert: true
};

/**
 * Observer class that are attached to each observed
 * object. Once attached, the observer converts target
 * object's property keys into getter/setters that
 * collect dependencies and dispatches updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    var augment = hasProto
      ? protoAugment
      : copyAugment;
    augment(value, arrayMethods, arrayKeys);
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through each property and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i], obj[keys[i]]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment an target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src, keys) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment an target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value)) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    observerState.shouldConvert &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive$$1 (
  obj,
  key,
  val,
  customSetter,
  shallow
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
        }
        if (Array.isArray(value)) {
          dependArray(value);
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if ("development" !== 'production' && customSetter) {
        customSetter();
      }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (hasOwn(target, key)) {
    target[key] = val;
    return val
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    "development" !== 'production' && warn(
      'Avoid adding reactive properties to a Vue instance or its root $data ' +
      'at runtime - declare it upfront in the data option.'
    );
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    "development" !== 'production' && warn(
      'Avoid deleting properties on a Vue instance or its root $data ' +
      '- just set it to null.'
    );
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
{
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn(
        "option \"" + key + "\" can only be used during instance " +
        'creation with the `new` keyword.'
      );
    }
    return defaultStrat(parent, child)
  };
}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;
  var keys = Object.keys(from);
  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
function mergeDataOrFn (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        typeof childVal === 'function' ? childVal.call(this) : childVal,
        typeof parentVal === 'function' ? parentVal.call(this) : parentVal
      )
    }
  } else if (parentVal || childVal) {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm)
        : undefined;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
}

strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      "development" !== 'production' && warn(
        'The "data" option should be a function ' +
        'that returns a per-instance value in component ' +
        'definitions.',
        vm
      );

      return parentVal
    }
    return mergeDataOrFn.call(this, parentVal, childVal)
  }

  return mergeDataOrFn(parentVal, childVal, vm)
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  return childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (parentVal, childVal) {
  var res = Object.create(parentVal || null);
  return childVal
    ? extend(res, childVal)
    : res
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (parentVal, childVal) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) { parentVal = undefined; }
  if (childVal === nativeWatch) { childVal = undefined; }
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key in childVal) {
    var parent = ret[key];
    var child = childVal[key];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key] = parent
      ? parent.concat(child)
      : Array.isArray(child) ? child : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.inject =
strats.computed = function (parentVal, childVal) {
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) { extend(ret, childVal); }
  return ret
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    var lower = key.toLowerCase();
    if (isBuiltInTag(lower) || config.isReservedTag(lower)) {
      warn(
        'Do not use built-in or reserved HTML elements as component ' +
        'id: ' + key
      );
    }
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  }
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject (options) {
  var inject = options.inject;
  if (Array.isArray(inject)) {
    var normalized = options.inject = {};
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = inject[i];
    }
  }
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def = dirs[key];
      if (typeof def === 'function') {
        dirs[key] = { bind: def, update: def };
      }
    }
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child);
  normalizeInject(child);
  normalizeDirectives(child);
  var extendsFrom = child.extends;
  if (extendsFrom) {
    parent = mergeOptions(parent, extendsFrom, vm);
  }
  if (child.mixins) {
    for (var i = 0, l = child.mixins.length; i < l; i++) {
      parent = mergeOptions(parent, child.mixins[i], vm);
    }
  }
  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if ("development" !== 'production' && warnMissing && !res) {
    warn(
      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
      options
    );
  }
  return res
}

/*  */

function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // handle boolean props
  if (isType(Boolean, prop.type)) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {
      value = true;
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldConvert = observerState.shouldConvert;
    observerState.shouldConvert = true;
    observe(value);
    observerState.shouldConvert = prevShouldConvert;
  }
  {
    assertProp(prop, key, value, vm, absent);
  }
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if ("development" !== 'production' && isObject(def)) {
    warn(
      'Invalid default value for prop "' + key + '": ' +
      'Props with type Object/Array must use a factory function ' +
      'to return the default value.',
      vm
    );
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }
  if (!valid) {
    warn(
      'Invalid prop: type check failed for prop "' + name + '".' +
      ' Expected ' + expectedTypes.map(capitalize).join(', ') +
      ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.',
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType (value, type) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    valid = typeof value === expectedType.toLowerCase();
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : ''
}

function isType (type, fn) {
  if (!Array.isArray(fn)) {
    return getType(fn) === getType(type)
  }
  for (var i = 0, len = fn.length; i < len; i++) {
    if (getType(fn[i]) === getType(type)) {
      return true
    }
  }
  /* istanbul ignore next */
  return false
}

/*  */

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

{
  var allowedGlobals = makeMap(
    'Infinity,undefined,NaN,isFinite,isNaN,' +
    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
    'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn(
      "Property or method \"" + key + "\" is not defined on the instance but " +
      "referenced during render. Make sure to declare reactive data " +
      "properties in the data option.",
      target
    );
  };

  var hasProxy =
    typeof Proxy !== 'undefined' &&
    Proxy.toString().match(/native code/);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set (target, key, value) {
        if (isBuiltInModifier(key)) {
          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
          return false
        } else {
          target[key] = value;
          return true
        }
      }
    });
  }

  var hasHandler = {
    has: function has (target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';
      if (!has && !isAllowed) {
        warnNonPresent(target, key);
      }
      return has || !isAllowed
    }
  };

  var getHandler = {
    get: function get (target, key) {
      if (typeof key === 'string' && !(key in target)) {
        warnNonPresent(target, key);
      }
      return target[key]
    }
  };

  initProxy = function initProxy (vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped
        ? getHandler
        : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}

var mark;
var measure;

{
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */
  if (
    perf &&
    perf.mark &&
    perf.measure &&
    perf.clearMarks &&
    perf.clearMeasures
  ) {
    mark = function (tag) { return perf.mark(tag); };
    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      perf.clearMeasures(name);
    };
  }
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions,
  asyncFactory
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.functionalContext = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: {} };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function (text) {
  if ( text === void 0 ) { text = ''; }

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode) {
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    vnode.children,
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions,
    vnode.asyncFactory
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.isCloned = true;
  return cloned
}

function cloneVNodes (vnodes) {
  var len = vnodes.length;
  var res = new Array(len);
  for (var i = 0; i < len; i++) {
    res[i] = cloneVNode(vnodes[i]);
  }
  return res
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        cloned[i].apply(null, arguments$1);
      }
    } else {
      // return handler return value for single handlers
      return fns.apply(null, arguments)
    }
  }
  invoker.fns = fns;
  return invoker
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  vm
) {
  var name, cur, old, event;
  for (name in on) {
    cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
      "development" !== 'production' && warn(
        "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
        vm
      );
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur);
      }
      add(event.name, cur, event.once, event.capture, event.passive);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

function mergeVNodeHook (def, hookKey, hook) {
  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook () {
    hook.apply(this, arguments);
    // important: remove merged hook to ensure it's called only once
    // and prevent memory leak
    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}

/*  */

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      {
        var keyInLowerCase = key.toLowerCase();
        if (
          key !== keyInLowerCase &&
          attrs && hasOwn(attrs, keyInLowerCase)
        ) {
          tip(
            "Prop \"" + keyInLowerCase + "\" is passed to component " +
            (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
            " \"" + key + "\". " +
            "Note that HTML attributes are case-insensitive and camelCased " +
            "props need to use their kebab-case equivalents when using in-DOM " +
            "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
          );
        }
      }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  return res
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    last = res[res.length - 1];
    //  nested
    if (Array.isArray(c)) {
      res.push.apply(res, normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i)));
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        (last).text += String(c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[res.length - 1] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function ensureCtor (comp, base) {
  if (comp.__esModule && comp.default) {
    comp = comp.default;
  }
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function createAsyncPlaceholder (
  factory,
  data,
  context,
  children,
  tag
) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node
}

function resolveAsyncComponent (
  factory,
  baseCtor,
  context
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (isDef(factory.contexts)) {
    // already pending
    factory.contexts.push(context);
  } else {
    var contexts = factory.contexts = [context];
    var sync = true;

    var forceRender = function () {
      for (var i = 0, l = contexts.length; i < l; i++) {
        contexts[i].$forceUpdate();
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender();
      }
    });

    var reject = once(function (reason) {
      "development" !== 'production' && warn(
        "Failed to resolve async component: " + (String(factory)) +
        (reason ? ("\nReason: " + reason) : '')
      );
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender();
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (typeof res.then === 'function') {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isDef(res.component) && typeof res.component.then === 'function') {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            setTimeout(function () {
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender();
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          setTimeout(function () {
            if (isUndef(factory.resolved)) {
              reject(
                "timeout (" + (res.timeout) + "ms)"
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && isDef(c.componentOptions)) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn, once$$1) {
  if (once$$1) {
    target.$once(event, fn);
  } else {
    target.$on(event, fn);
  }
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var this$1 = this;

    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        this$1.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var this$1 = this;

    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        this$1.$off(event[i$1], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (arguments.length === 1) {
      vm._events[event] = null;
      return vm
    }
    // specific handler
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip(
          "Event \"" + lowerCaseEvent + "\" is emitted in component " +
          (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
          "Note that HTML attributes are case-insensitive and you cannot use " +
          "v-on to listen to camelCase events when using in-DOM templates. " +
          "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
        );
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      for (var i = 0, l = cbs.length; i < l; i++) {
        try {
          cbs[i].apply(vm, args);
        } catch (e) {
          handleError(e, vm, ("event handler for \"" + event + "\""));
        }
      }
    }
    return vm
  };
}

/*  */

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  var slots = {};
  if (!children) {
    return slots
  }
  var defaultSlot = [];
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.functionalContext === context) &&
      child.data && child.data.slot != null
    ) {
      var name = child.data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children);
      } else {
        slot.push(child);
      }
    } else {
      defaultSlot.push(child);
    }
  }
  // ignore whitespace
  if (!defaultSlot.every(isWhitespace)) {
    slots.default = defaultSlot;
  }
  return slots
}

function isWhitespace (node) {
  return node.isComment || node.text === ' '
}

function resolveScopedSlots (
  fns, // see flow/vnode
  res
) {
  res = res || {};
  for (var i = 0; i < fns.length; i++) {
    if (Array.isArray(fns[i])) {
      resolveScopedSlots(fns[i], res);
    } else {
      res[fns[i].key] = fns[i].fn;
    }
  }
  return res
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    if (vm._isMounted) {
      callHook(vm, 'beforeUpdate');
    }
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var prevActiveInstance = activeInstance;
    activeInstance = vm;
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(
        vm.$el, vnode, hydrating, false /* removeOnly */,
        vm.$options._parentElm,
        vm.$options._refElm
      );
      // no need for the ref nodes after initial patch
      // this prevents keeping a detached DOM tree in memory (#5851)
      vm.$options._parentElm = vm.$options._refElm = null;
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    activeInstance = prevActiveInstance;
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
  };
}

function mountComponent (
  vm,
  el,
  hydrating
) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    {
      /* istanbul ignore if */
      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
        vm.$options.el || el) {
        warn(
          'You are using the runtime-only build of Vue where the template ' +
          'compiler is not available. Either pre-compile the templates into ' +
          'render functions, or use the compiler-included build.',
          vm
        );
      } else {
        warn(
          'Failed to mount component: template or render function not defined.',
          vm
        );
      }
    }
  }
  callHook(vm, 'beforeMount');

  var updateComponent;
  /* istanbul ignore if */
  if ("development" !== 'production' && config.performance && mark) {
    updateComponent = function () {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;

      mark(startTag);
      var vnode = vm._render();
      mark(endTag);
      measure((name + " render"), startTag, endTag);

      mark(startTag);
      vm._update(vnode, hydrating);
      mark(endTag);
      measure((name + " patch"), startTag, endTag);
    };
  } else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  }

  vm._watcher = new Watcher(vm, updateComponent, noop);
  hydrating = false;

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }
  return vm
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  {
    isUpdatingChildComponent = true;
  }

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren
  var hasChildren = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    parentVnode.data.scopedSlots || // has new scoped slots
    vm.$scopedSlots !== emptyObject // has old scoped slots
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listensers hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = parentVnode.data && parentVnode.data.attrs;
  vm.$listeners = listeners;

  // update props
  if (propsData && vm.$options.props) {
    observerState.shouldConvert = false;
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      props[key] = validateProp(key, vm.$options.props, propsData, vm);
    }
    observerState.shouldConvert = true;
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }

  // update listeners
  if (listeners) {
    var oldListeners = vm.$options._parentListeners;
    vm.$options._parentListeners = listeners;
    updateComponentListeners(vm, listeners, oldListeners);
  }
  // resolve slots + force update if has children
  if (hasChildren) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  var handlers = vm.$options[hook];
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      try {
        handlers[i].call(vm);
      } catch (e) {
        handleError(e, vm, (hook + " hook"));
      }
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
}

/*  */


var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  {
    circular = {};
  }
  waiting = flushing = false;
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if ("development" !== 'production' && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn(
          'You may have an infinite update loop ' + (
            watcher.user
              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
              : "in a component render function."
          ),
          watcher.vm
        );
        break
      }
    }
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */

var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options
) {
  this.vm = vm;
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = expOrFn.toString();
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = function () {};
      "development" !== 'production' && warn(
        "Failed watching path: \"" + expOrFn + "\" " +
        'Watcher only accepts simple dot-delimited paths. ' +
        'For full control, use a function instead.',
        vm
      );
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    } else {
      throw e
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
    var this$1 = this;

  var i = this.deps.length;
  while (i--) {
    var dep = this$1.deps[i];
    if (!this$1.newDepIds.has(dep.id)) {
      dep.removeSub(this$1);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
    var this$1 = this;

  var i = this.deps.length;
  while (i--) {
    this$1.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
    var this$1 = this;

  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this$1.deps[i].removeSub(this$1);
    }
    this.active = false;
  }
};

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
var seenObjects = new _Set();
function traverse (val) {
  seenObjects.clear();
  _traverse(val, seenObjects);
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || !Object.isExtensible(val)) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function checkOptionType (vm, name) {
  var option = vm.$options[name];
  if (!isPlainObject(option)) {
    warn(
      ("component option \"" + name + "\" should be an object."),
      vm
    );
  }
}

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  observerState.shouldConvert = isRoot;
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    {
      if (isReservedAttribute(key) || config.isReservedAttr(key)) {
        warn(
          ("\"" + key + "\" is a reserved attribute and cannot be used as component prop."),
          vm
        );
      }
      defineReactive$$1(props, key, value, function () {
        if (vm.$parent && !isUpdatingChildComponent) {
          warn(
            "Avoid mutating a prop directly since the value will be " +
            "overwritten whenever the parent component re-renders. " +
            "Instead, use a data or computed property based on the prop's " +
            "value. Prop being mutated: \"" + key + "\"",
            vm
          );
        }
      });
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) { loop( key ); }
  observerState.shouldConvert = true;
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
    "development" !== 'production' && warn(
      'data functions should return an object:\n' +
      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
      vm
    );
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    {
      if (methods && hasOwn(methods, key)) {
        warn(
          ("method \"" + key + "\" has already been defined as a data property."),
          vm
        );
      }
    }
    if (props && hasOwn(props, key)) {
      "development" !== 'production' && warn(
        "The data property \"" + key + "\" is already declared as a prop. " +
        "Use prop default value instead.",
        vm
      );
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  try {
    return data.call(vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  "development" !== 'production' && checkOptionType(vm, 'computed');
  var watchers = vm._computedWatchers = Object.create(null);

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if ("development" !== 'production' && getter == null) {
      warn(
        ("Getter is missing for computed property \"" + key + "\"."),
        vm
      );
    }
    // create internal watcher for the computed property.
    watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else {
      if (key in vm.$data) {
        warn(("The computed property \"" + key + "\" is already defined in data."), vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
      }
    }
  }
}

function defineComputed (target, key, userDef) {
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = createComputedGetter(key);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? userDef.cache !== false
        ? createComputedGetter(key)
        : userDef.get
      : noop;
    sharedPropertyDefinition.set = userDef.set
      ? userDef.set
      : noop;
  }
  if ("development" !== 'production' &&
      sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn(
        ("Computed property \"" + key + "\" was assigned to but it has no setter."),
        this
      );
    };
  }
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function initMethods (vm, methods) {
  "development" !== 'production' && checkOptionType(vm, 'methods');
  var props = vm.$options.props;
  for (var key in methods) {
    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);
    {
      if (methods[key] == null) {
        warn(
          "method \"" + key + "\" has an undefined value in the component definition. " +
          "Did you reference the function correctly?",
          vm
        );
      }
      if (props && hasOwn(props, key)) {
        warn(
          ("method \"" + key + "\" has already been defined as a prop."),
          vm
        );
      }
    }
  }
}

function initWatch (vm, watch) {
  "development" !== 'production' && checkOptionType(vm, 'watch');
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (
  vm,
  keyOrFn,
  handler,
  options
) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(keyOrFn, handler, options)
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  {
    dataDef.set = function (newData) {
      warn(
        'Avoid replacing instance root $data. ' +
        'Use nested data properties instead.',
        this
      );
    };
    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      cb.call(vm, watcher.value);
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    observerState.shouldConvert = false;
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      {
        defineReactive$$1(vm, key, result[key], function () {
          warn(
            "Avoid mutating an injected value directly since the changes will be " +
            "overwritten whenever the provided component re-renders. " +
            "injection being mutated: \"" + key + "\"",
            vm
          );
        });
      }
    });
    observerState.shouldConvert = true;
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol
        ? Reflect.ownKeys(inject)
        : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var provideKey = inject[key];
      var source = vm;
      while (source) {
        if (source._provided && provideKey in source._provided) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
      if ("development" !== 'production' && !source) {
        warn(("Injection \"" + key + "\" not found"), vm);
      }
    }
    return result
  }
}

/*  */

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  context,
  children
) {
  var props = {};
  var propOptions = Ctor.options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || {});
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var _context = Object.create(context);
  var h = function (a, b, c, d) { return createElement(_context, a, b, c, d, true); };
  var vnode = Ctor.options.render.call(null, h, {
    data: data,
    props: props,
    children: children,
    parent: context,
    listeners: data.on || {},
    injections: resolveInject(Ctor.options.inject, context),
    slots: function () { return resolveSlots(children, context); }
  });
  if (vnode instanceof VNode) {
    vnode.functionalContext = context;
    vnode.functionalOptions = Ctor.options;
    if (data.slot) {
      (vnode.data || (vnode.data = {})).slot = data.slot;
    }
  }
  return vnode
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

// hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (
    vnode,
    hydrating,
    parentElm,
    refElm
  ) {
    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance,
        parentElm,
        refElm
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    } else if (vnode.data.keepAlive) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    {
      warn(("Invalid Component definition: " + (String(Ctor))), context);
    }
    return
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(
        asyncFactory,
        data,
        context,
        children,
        tag
      )
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // merge component management hooks onto the placeholder node
  mergeHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
    asyncFactory
  );
  return vnode
}

function createComponentInstanceForVnode (
  vnode, // we know it's MountedComponentVNode but flow doesn't
  parent, // activeInstance in lifecycle state
  parentElm,
  refElm
) {
  var vnodeComponentOptions = vnode.componentOptions;
  var options = {
    _isComponent: true,
    parent: parent,
    propsData: vnodeComponentOptions.propsData,
    _componentTag: vnodeComponentOptions.tag,
    _parentVnode: vnode,
    _parentListeners: vnodeComponentOptions.listeners,
    _renderChildren: vnodeComponentOptions.children,
    _parentElm: parentElm || null,
    _refElm: refElm || null
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnodeComponentOptions.Ctor(options)
}

function mergeHooks (data) {
  if (!data.hook) {
    data.hook = {};
  }
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var fromParent = data.hook[key];
    var ours = componentVNodeHooks[key];
    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;
  }
}

function mergeHook$1 (one, two) {
  return function (a, b, c, d) {
    one(a, b, c, d);
    two(a, b, c, d);
  }
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  if (isDef(on[event])) {
    on[event] = [data.model.callback].concat(on[event]);
  } else {
    on[event] = data.model.callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
    "development" !== 'production' && warn(
      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
      'Always create fresh vnode data objects in each render!',
      context
    );
    return createEmptyVNode()
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // warn against non-primitive key
  if ("development" !== 'production' &&
    isDef(data) && isDef(data.key) && !isPrimitive(data.key)
  ) {
    warn(
      'Avoid using non-primitive value as key, ' +
      'use string/number value instead.',
      context
    );
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (isDef(vnode)) {
    if (ns) { applyNS(vnode, ns); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    return
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && isUndef(child.ns)) {
        applyNS(child, ns);
      }
    }
  }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    keys = Object.keys(val);
    ret = new Array(keys.length);
    for (i = 0, l = keys.length; i < l; i++) {
      key = keys[i];
      ret[i] = render(val[key], key, i);
    }
  }
  if (isDef(ret)) {
    (ret)._isVList = true;
  }
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallback,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  if (scopedSlotFn) { // scoped slot
    props = props || {};
    if (bindObject) {
      props = extend(extend({}, bindObject), props);
    }
    return scopedSlotFn(props) || fallback
  } else {
    var slotNodes = this.$slots[name];
    // warn duplicate slot usage
    if (slotNodes && "development" !== 'production') {
      slotNodes._rendered && warn(
        "Duplicate presence of slot \"" + name + "\" found in the same render tree " +
        "- this will likely cause render errors.",
        this
      );
      slotNodes._rendered = true;
    }
    return slotNodes || fallback
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

/**
 * Runtime helper for checking keyCodes from config.
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInAlias
) {
  var keyCodes = config.keyCodes[key] || builtInAlias;
  if (Array.isArray(keyCodes)) {
    return keyCodes.indexOf(eventKeyCode) === -1
  } else {
    return keyCodes !== eventKeyCode
  }
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp,
  isSync
) {
  if (value) {
    if (!isObject(value)) {
      "development" !== 'production' && warn(
        'v-bind without argument expects an Object or Array value',
        this
      );
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function ( key ) {
        if (
          key === 'class' ||
          key === 'style' ||
          isReservedAttribute(key)
        ) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        if (!(key in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on[("update:" + key)] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) { loop( key ); }
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var tree = this._staticTrees[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree by doing a shallow clone.
  if (tree && !isInFor) {
    return Array.isArray(tree)
      ? cloneVNodes(tree)
      : cloneVNode(tree)
  }
  // otherwise, render a fresh tree.
  tree = this._staticTrees[index] =
    this.$options.staticRenderFns[index].call(this._renderProxy);
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners (data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      "development" !== 'production' && warn(
        'v-on without argument expects an Object value',
        this
      );
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(ours, existing) : ours;
      }
    }
  }
  return data
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null;
  var parentVnode = vm.$vnode = vm.$options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;
  /* istanbul ignore else */
  {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', vm.$options._parentListeners, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  }
}

function renderMixin (Vue) {
  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var staticRenderFns = ref.staticRenderFns;
    var _parentVnode = ref._parentVnode;

    if (vm._isMounted) {
      // clone slot nodes on re-renders
      for (var key in vm.$slots) {
        vm.$slots[key] = cloneVNodes(vm.$slots[key]);
      }
    }

    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject;

    if (staticRenderFns && !vm._staticTrees) {
      vm._staticTrees = [];
    }
    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render function");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      {
        vnode = vm.$options.renderError
          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)
          : vm._vnode;
      }
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if ("development" !== 'production' && Array.isArray(vnode)) {
        warn(
          'Multiple root nodes returned from render function. Render function ' +
          'should return a single root node.',
          vm
        );
      }
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };

  // internal render helpers.
  // these are exposed on the instance prototype to reduce generated render
  // code size.
  Vue.prototype._o = markOnce;
  Vue.prototype._n = toNumber;
  Vue.prototype._s = toString;
  Vue.prototype._l = renderList;
  Vue.prototype._t = renderSlot;
  Vue.prototype._q = looseEqual;
  Vue.prototype._i = looseIndexOf;
  Vue.prototype._m = renderStatic;
  Vue.prototype._f = resolveFilter;
  Vue.prototype._k = checkKeyCodes;
  Vue.prototype._b = bindObjectProps;
  Vue.prototype._v = createTextVNode;
  Vue.prototype._e = createEmptyVNode;
  Vue.prototype._u = resolveScopedSlots;
  Vue.prototype._g = bindObjectListeners;
}

/*  */

var uid = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid++;

    var startTag, endTag;
    /* istanbul ignore if */
    if ("development" !== 'production' && config.performance && mark) {
      startTag = "vue-perf-init:" + (vm._uid);
      endTag = "vue-perf-end:" + (vm._uid);
      mark(startTag);
    }

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    {
      initProxy(vm);
    }
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');

    /* istanbul ignore if */
    if ("development" !== 'production' && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure(((vm._name) + " init"), startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  opts.parent = options.parent;
  opts.propsData = options.propsData;
  opts._parentVnode = options._parentVnode;
  opts._parentListeners = options._parentListeners;
  opts._renderChildren = options._renderChildren;
  opts._componentTag = options._componentTag;
  opts._parentElm = options._parentElm;
  opts._refElm = options._refElm;
  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var extended = Ctor.extendOptions;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = dedupe(latest[key], extended[key], sealed[key]);
    }
  }
  return modified
}

function dedupe (latest, extended, sealed) {
  // compare latest and sealed to ensure lifecycle hooks won't be duplicated
  // between merges
  if (Array.isArray(latest)) {
    var res = [];
    sealed = Array.isArray(sealed) ? sealed : [sealed];
    extended = Array.isArray(extended) ? extended : [extended];
    for (var i = 0; i < latest.length; i++) {
      // push original options and not sealed options to exclude duplicated options
      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {
        res.push(latest[i]);
      }
    }
    return res
  } else {
    return latest
  }
}

function Vue$3$1 (options) {
  if ("development" !== 'production' &&
    !(this instanceof Vue$3$1)
  ) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }
  this._init(options);
}

initMixin(Vue$3$1);
stateMixin(Vue$3$1);
eventsMixin(Vue$3$1);
lifecycleMixin(Vue$3$1);
renderMixin(Vue$3$1);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
    if (installedPlugins.indexOf(plugin) > -1) {
      return this
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    {
      if (!/^[a-zA-Z][\w-]*$/.test(name)) {
        warn(
          'Invalid component name: "' + name + '". Component names ' +
          'can only contain alphanumeric characters and the hyphen, ' +
          'and must start with a letter.'
        );
      }
    }

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        {
          if (type === 'component' && config.isReservedTag(id)) {
            warn(
              'Do not use built-in or reserved HTML elements as component ' +
              'id: ' + id
            );
          }
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */

var patternTypes = [String, RegExp, Array];

function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (cache, current, filter) {
  for (var key in cache) {
    var cachedNode = cache[key];
    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);
      if (name && !filter(name)) {
        if (cachedNode !== current) {
          pruneCacheEntry(cachedNode);
        }
        cache[key] = null;
      }
    }
  }
}

function pruneCacheEntry (vnode) {
  if (vnode) {
    vnode.componentInstance.$destroy();
  }
}

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes
  },

  created: function created () {
    this.cache = Object.create(null);
  },

  destroyed: function destroyed () {
    var this$1 = this;

    for (var key in this$1.cache) {
      pruneCacheEntry(this$1.cache[key]);
    }
  },

  watch: {
    include: function include (val) {
      pruneCache(this.cache, this._vnode, function (name) { return matches(val, name); });
    },
    exclude: function exclude (val) {
      pruneCache(this.cache, this._vnode, function (name) { return !matches(val, name); });
    }
  },

  render: function render () {
    var vnode = getFirstComponentChild(this.$slots.default);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      if (name && (
        (this.include && !matches(this.include, name)) ||
        (this.exclude && matches(this.exclude, name))
      )) {
        return vnode
      }
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (this.cache[key]) {
        vnode.componentInstance = this.cache[key].componentInstance;
      } else {
        this.cache[key] = vnode;
      }
      vnode.data.keepAlive = true;
    }
    return vnode
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  {
    configDef.set = function () {
      warn(
        'Do not replace the Vue.config object, set individual fields instead.'
      );
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue$3$1);

Object.defineProperty(Vue$3$1.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue$3$1.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext
  }
});

Vue$3$1.version = '2.4.2';

/*  */

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select');
var mustUseProp = function (tag, type, attr) {
  return (
    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
    (attr === 'selected' && tag === 'option') ||
    (attr === 'checked' && tag === 'input') ||
    (attr === 'muted' && tag === 'video')
  )
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

var isBooleanAttr = makeMap(
  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
  'required,reversed,scoped,seamless,selected,sortable,translate,' +
  'truespeed,typemustmatch,visible'
);

var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : ''
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false
};

/*  */

function genClassForVnode (vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }
  return renderClass(data.staticClass, data.class)
}

function mergeClassData (child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class)
      ? [child.class, parent.class]
      : parent.class
  }
}

function renderClass (
  staticClass,
  dynamicClass
) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (Array.isArray(value)) {
    return stringifyArray(value)
  }
  if (isObject(value)) {
    return stringifyObject(value)
  }
  if (typeof value === 'string') {
    return value
  }
  /* istanbul ignore next */
  return ''
}

function stringifyArray (value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) { res += ' '; }
      res += stringified;
    }
  }
  return res
}

function stringifyObject (value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) { res += ' '; }
      res += key;
    }
  }
  return res
}

/*  */

var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};

var isHTMLTag = makeMap(
  'html,body,base,head,link,meta,style,title,' +
  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
  'embed,object,param,source,canvas,script,noscript,del,ins,' +
  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
  'output,progress,select,textarea,' +
  'details,dialog,menu,menuitem,summary,' +
  'content,element,shadow,template,blockquote,iframe,tfoot'
);

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap(
  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
  true
);



var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag)
};

function getTagNamespace (tag) {
  if (isSVG(tag)) {
    return 'svg'
  }
  // basic support for MathML
  // note it doesn't support other MathML elements being component roots
  if (tag === 'math') {
    return 'math'
  }
}

var unknownElementCache = Object.create(null);
function isUnknownElement (tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true
  }
  if (isReservedTag(tag)) {
    return false
  }
  tag = tag.toLowerCase();
  /* istanbul ignore if */
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag]
  }
  var el = document.createElement(tag);
  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return (unknownElementCache[tag] = (
      el.constructor === window.HTMLUnknownElement ||
      el.constructor === window.HTMLElement
    ))
  } else {
    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
  }
}

/*  */

/**
 * Query an element selector if it's not an element already.
 */
function query (el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
      "development" !== 'production' && warn(
        'Cannot find element: ' + el
      );
      return document.createElement('div')
    }
    return selected
  } else {
    return el
  }
}

/*  */

function createElement$1 (tagName, vnode) {
  var elm = document.createElement(tagName);
  if (tagName !== 'select') {
    return elm
  }
  // false or null will remove the attribute but undefined will not
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }
  return elm
}

function createElementNS (namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName)
}

function createTextNode (text) {
  return document.createTextNode(text)
}

function createComment (text) {
  return document.createComment(text)
}

function insertBefore (parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild (node, child) {
  node.removeChild(child);
}

function appendChild (node, child) {
  node.appendChild(child);
}

function parentNode (node) {
  return node.parentNode
}

function nextSibling (node) {
  return node.nextSibling
}

function tagName (node) {
  return node.tagName
}

function setTextContent (node, text) {
  node.textContent = text;
}

function setAttribute (node, key, val) {
  node.setAttribute(key, val);
}


var nodeOps = Object.freeze({
	createElement: createElement$1,
	createElementNS: createElementNS,
	createTextNode: createTextNode,
	createComment: createComment,
	insertBefore: insertBefore,
	removeChild: removeChild,
	appendChild: appendChild,
	parentNode: parentNode,
	nextSibling: nextSibling,
	tagName: tagName,
	setTextContent: setTextContent,
	setAttribute: setAttribute
});

/*  */

var ref = {
  create: function create (_, vnode) {
    registerRef(vnode);
  },
  update: function update (oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy (vnode) {
    registerRef(vnode, true);
  }
};

function registerRef (vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!key) { return }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *

/*
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);

var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode (a, b) {
  return (
    a.key === b.key && (
      (
        a.tag === b.tag &&
        a.isComment === b.isComment &&
        isDef(a.data) === isDef(b.data) &&
        sameInputType(a, b)
      ) || (
        isTrue(a.isAsyncPlaceholder) &&
        a.asyncFactory === b.asyncFactory &&
        isUndef(b.asyncFactory.error)
      )
    )
  )
}

// Some browsers do not support dynamically changing type for <input>
// so they need to be treated as different nodes
function sameInputType (a, b) {
  if (a.tag !== 'input') { return true }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB
}

function createKeyToOldIdx (children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) { map[key] = i; }
  }
  return map
}

function createPatchFunction (backend) {
  var i, j;
  var cbs = {};

  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt (elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
  }

  function createRmCb (childElm, listeners) {
    function remove$$1 () {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove$$1.listeners = listeners;
    return remove$$1
  }

  function removeNode (el) {
    var parent = nodeOps.parentNode(el);
    // element may have already been removed due to v-html / v-text
    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  var inPre = 0;
  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {
    vnode.isRootInsert = !nested; // for transition enter check
    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      {
        if (data && data.pre) {
          inPre++;
        }
        if (
          !inPre &&
          !vnode.ns &&
          !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) &&
          config.isUnknownElement(tag)
        ) {
          warn(
            'Unknown custom element: <' + tag + '> - did you ' +
            'register the component correctly? For recursive components, ' +
            'make sure to provide the "name" option.',
            vnode.context
          );
        }
      }
      vnode.elm = vnode.ns
        ? nodeOps.createElementNS(vnode.ns, tag)
        : nodeOps.createElement(tag, vnode);
      setScope(vnode);

      /* istanbul ignore if */
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }

      if ("development" !== 'production' && data && data.pre) {
        inPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;
    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false /* hydrating */, parentElm, refElm);
      }
      // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true
      }
    }
  }

  function initComponent (vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode);
      // make sure to invoke the insert hook
      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i;
    // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break
      }
    }
    // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself
    insert(parentElm, vnode.elm, refElm);
  }

  function insert (parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (ref$$1.parentNode === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren (vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));
    }
  }

  function isPatchable (vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag)
  }

  function invokeCreateHooks (vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook; // Reuse variable
    if (isDef(i)) {
      if (isDef(i.create)) { i.create(emptyNode, vnode); }
      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
    }
  }

  // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.
  function setScope (vnode) {
    var i;
    var ancestor = vnode;
    while (ancestor) {
      if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
        nodeOps.setAttribute(vnode.elm, i, '');
      }
      ancestor = ancestor.parent;
    }
    // for slot content they should also get the scopeId from the host instance.
    if (isDef(i = activeInstance) &&
      i !== vnode.context &&
      isDef(i = i.$options._scopeId)
    ) {
      nodeOps.setAttribute(vnode.elm, i, '');
    }
  }

  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);
    }
  }

  function invokeDestroyHook (vnode) {
    var i, j;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
    }
    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else { // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook (vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      }
      // recursively invoke hooks on child component root node
      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }
      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }
      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, elmToMove, refElm;

    // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions
    var canMove = !removeOnly;

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : null;
        if (isUndef(idxInOld)) { // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
          newStartVnode = newCh[++newStartIdx];
        } else {
          elmToMove = oldCh[idxInOld];
          /* istanbul ignore if */
          if ("development" !== 'production' && !elmToMove) {
            warn(
              'It seems there are duplicate keys that is causing an update error. ' +
              'Make sure each v-for item has a unique key.'
            );
          }
          if (sameVnode(elmToMove, newStartVnode)) {
            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, elmToMove.elm, oldStartVnode.elm);
            newStartVnode = newCh[++newStartIdx];
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
            newStartVnode = newCh[++newStartIdx];
          }
        }
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {
    if (oldVnode === vnode) {
      return
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return
    }

    // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.
    if (isTrue(vnode.isStatic) &&
      isTrue(oldVnode.isStatic) &&
      vnode.key === oldVnode.key &&
      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
    ) {
      vnode.componentInstance = oldVnode.componentInstance;
      return
    }

    var i;
    var data = vnode.data;
    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
      } else if (isDef(ch)) {
        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
    }
  }

  function invokeInsertHook (vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var bailed = false;
  // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');

  // Note: this is a browser-only function so we can assume elms are DOM nodes.
  function hydrate (elm, vnode, insertedVnodeQueue) {
    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.elm = elm;
      vnode.isAsyncPlaceholder = true;
      return true
    }
    {
      if (!assertNodeMatch(elm, vnode)) {
        return false
      }
    }
    vnode.elm = elm;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          var childrenMatch = true;
          var childNode = elm.firstChild;
          for (var i$1 = 0; i$1 < children.length; i$1++) {
            if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {
              childrenMatch = false;
              break
            }
            childNode = childNode.nextSibling;
          }
          // if childNode is not null, it means the actual childNodes list is
          // longer than the virtual children list.
          if (!childrenMatch || childNode) {
            if ("development" !== 'production' &&
              typeof console !== 'undefined' &&
              !bailed
            ) {
              bailed = true;
              console.warn('Parent: ', elm);
              console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
            }
            return false
          }
        }
      }
      if (isDef(data)) {
        for (var key in data) {
          if (!isRenderedModule(key)) {
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break
          }
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true
  }

  function assertNodeMatch (node, vnode) {
    if (isDef(vnode.tag)) {
      return (
        vnode.tag.indexOf('vue-component') === 0 ||
        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
      )
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3)
    }
  }

  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
      return
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue, parentElm, refElm);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode
            } else {
              warn(
                'The client-side rendered virtual DOM tree is not matching ' +
                'server-rendered content. This is likely caused by incorrect ' +
                'HTML markup, for example nesting block-level elements inside ' +
                '<p>, or missing <tbody>. Bailing hydration and performing ' +
                'full client-side render.'
              );
            }
          }
          // either not server-rendered, or hydration failed.
          // create an empty node and replace it
          oldVnode = emptyNodeAt(oldVnode);
        }
        // replacing existing element
        var oldElm = oldVnode.elm;
        var parentElm$1 = nodeOps.parentNode(oldElm);
        createElm(
          vnode,
          insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm$1,
          nodeOps.nextSibling(oldElm)
        );

        if (isDef(vnode.parent)) {
          // component root element replaced.
          // update parent placeholder node element, recursively
          var ancestor = vnode.parent;
          while (ancestor) {
            ancestor.elm = vnode.elm;
            ancestor = ancestor.parent;
          }
          if (isPatchable(vnode)) {
            for (var i = 0; i < cbs.create.length; ++i) {
              cbs.create[i](emptyNode, vnode.parent);
            }
          }
        }

        if (isDef(parentElm$1)) {
          removeVnodes(parentElm$1, [oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm
  }
}

/*  */

var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives (vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives (oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update (oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

  var dirsWithInsert = [];
  var dirsWithPostpatch = [];

  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      callHook$1(dir, 'update', vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1 (
  dirs,
  vm
) {
  var res = Object.create(null);
  if (!dirs) {
    return res
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  }
  return res
}

function getRawDirName (dir) {
  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
}

function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
    }
  }
}

var baseModules = [
  ref,
  directives
];

/*  */

function updateAttrs (oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  }
  // #4391: in IE9, setting type can reset value for input[type=radio]
  /* istanbul ignore if */
  if (isIE9 && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr (el, key, value) {
  if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      el.setAttribute(key, key);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      el.setAttribute(key, value);
    }
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};

/*  */

function updateClass (oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (
    isUndef(data.staticClass) &&
    isUndef(data.class) && (
      isUndef(oldData) || (
        isUndef(oldData.staticClass) &&
        isUndef(oldData.class)
      )
    )
  ) {
    return
  }

  var cls = genClassForVnode(vnode);

  // handle transition classes
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }

  // set the class
  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};

/*  */

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

/*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents (on) {
  var event;
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    // Chrome fires microtasks in between click/change, leads to #4521
    event = isChrome ? 'click' : 'change';
    on[event] = [].concat(on[CHECKBOX_RADIO_TOKEN], on[event] || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function add$1 (
  event,
  handler,
  once$$1,
  capture,
  passive
) {
  if (once$$1) {
    var oldHandler = handler;
    var _target = target$1; // save current target element in closure
    handler = function (ev) {
      var res = arguments.length === 1
        ? oldHandler(ev)
        : oldHandler.apply(null, arguments);
      if (res !== null) {
        remove$2(event, handler, capture, _target);
      }
    };
  }
  target$1.addEventListener(
    event,
    handler,
    supportsPassive
      ? { capture: capture, passive: passive }
      : capture
  );
}

function remove$2 (
  event,
  handler,
  capture,
  _target
) {
  (_target || target$1).removeEventListener(event, handler, capture);
}

function updateDOMListeners (oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, vnode.context);
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};

/*  */

function updateDOMProps (oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (isUndef(props[key])) {
      elm[key] = '';
    }
  }
  for (key in props) {
    cur = props[key];
    // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)
    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) { vnode.children.length = 0; }
      if (cur === oldProps[key]) { continue }
    }

    if (key === 'value') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur;
      // avoid resetting cursor position when value is the same
      var strCur = isUndef(cur) ? '' : String(cur);
      if (shouldUpdateValue(elm, vnode, strCur)) {
        elm.value = strCur;
      }
    } else {
      elm[key] = cur;
    }
  }
}

// check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue (
  elm,
  vnode,
  checkVal
) {
  return (!elm.composing && (
    vnode.tag === 'option' ||
    isDirty(elm, checkVal) ||
    isInputChanged(elm, checkVal)
  ))
}

function isDirty (elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true;
  // #6157
  // work around IE bug when accessing document.activeElement in an iframe
  try { notInFocus = document.activeElement !== elm; } catch (e) {}
  return notInFocus && elm.value !== checkVal
}

function isInputChanged (elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime
  if (isDef(modifiers) && modifiers.number) {
    return toNumber(value) !== toNumber(newVal)
  }
  if (isDef(modifiers) && modifiers.trim) {
    return value.trim() !== newVal.trim()
  }
  return value !== newVal
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// merge static and dynamic style data on the same vnode
function normalizeStyleData (data) {
  var style = normalizeStyleBinding(data.style);
  // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it
  return data.staticStyle
    ? extend(data.staticStyle, style)
    : style
}

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle (vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {
        extend(res, styleData);
      }
    }
  }

  if ((styleData = normalizeStyleData(vnode.data))) {
    extend(res, styleData);
  }

  var parentNode = vnode;
  while ((parentNode = parentNode.parent)) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }
  return res
}

/*  */

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(name, val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];

var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);
  if (prop !== 'filter' && (prop in emptyStyle)) {
    return prop
  }
  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;
    if (name in emptyStyle) {
      return name
    }
  }
});

function updateStyle (oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) &&
    isUndef(oldData.staticStyle) && isUndef(oldData.style)
  ) {
    return
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
  var oldStyle = oldStaticStyle || oldStyleBinding;

  var style = normalizeStyleBinding(vnode.data.style) || {};

  // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likley wants
  // to mutate it.
  vnode.data.normalizedStyle = isDef(style.__ob__)
    ? extend({}, style)
    : style;

  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};

/*  */

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function addClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(/\s+/).forEach(function (c) { return el.classList.add(c); });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(/\s+/).forEach(function (c) { return el.classList.remove(c); });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}

/*  */

function resolveTransition (def$$1) {
  if (!def$$1) {
    return
  }
  /* istanbul ignore else */
  if (typeof def$$1 === 'object') {
    var res = {};
    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }
    extend(res, def$$1);
    return res
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1)
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: (name + "-enter"),
    enterToClass: (name + "-enter-to"),
    enterActiveClass: (name + "-enter-active"),
    leaveClass: (name + "-leave"),
    leaveToClass: (name + "-leave-to"),
    leaveActiveClass: (name + "-leave-active")
  }
});

var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';

// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined &&
    window.onwebkittransitionend !== undefined
  ) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }
  if (window.onanimationend === undefined &&
    window.onwebkitanimationend !== undefined
  ) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
}

// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser && window.requestAnimationFrame
  ? window.requestAnimationFrame.bind(window)
  : setTimeout;

function nextFrame (fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass (el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass (el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}

function whenTransitionEnds (
  el,
  expectedType,
  cb
) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;
  if (!type) { return cb() }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo (el, expectedType) {
  var styles = window.getComputedStyle(el);
  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');
  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = styles[animationProp + 'Delay'].split(', ');
  var animationDurations = styles[animationProp + 'Duration'].split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);

  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0
      ? transitionTimeout > animationTimeout
        ? TRANSITION
        : ANIMATION
      : null;
    propCount = type
      ? type === TRANSITION
        ? transitionDurations.length
        : animationDurations.length
      : 0;
  }
  var hasTransform =
    type === TRANSITION &&
    transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  }
}

function getTimeout (delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i])
  }))
}

function toMs (s) {
  return Number(s.slice(0, -1)) * 1000
}

/*  */

function enter (vnode, toggleDisplay) {
  var el = vnode.elm;

  // call leave callback now
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return
  }

  /* istanbul ignore if */
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;

  // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    transitionNode = transitionNode.parent;
    context = transitionNode.context;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return
  }

  var startClass = isAppear && appearClass
    ? appearClass
    : enterClass;
  var activeClass = isAppear && appearActiveClass
    ? appearActiveClass
    : enterActiveClass;
  var toClass = isAppear && appearToClass
    ? appearToClass
    : enterToClass;

  var beforeEnterHook = isAppear
    ? (beforeAppear || beforeEnter)
    : beforeEnter;
  var enterHook = isAppear
    ? (typeof appear === 'function' ? appear : enter)
    : enter;
  var afterEnterHook = isAppear
    ? (afterAppear || afterEnter)
    : afterEnter;
  var enterCancelledHook = isAppear
    ? (appearCancelled || enterCancelled)
    : enterCancelled;

  var explicitEnterDuration = toNumber(
    isObject(duration)
      ? duration.enter
      : duration
  );

  if ("development" !== 'production' && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);

  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode &&
        pendingNode.tag === vnode.tag &&
        pendingNode.elm._leaveCb
      ) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }

  // start enter transition
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      addTransitionClass(el, toClass);
      removeTransitionClass(el, startClass);
      if (!cb.cancelled && !userWantsControl) {
        if (isValidDuration(explicitEnterDuration)) {
          setTimeout(cb, explicitEnterDuration);
        } else {
          whenTransitionEnds(el, type, cb);
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave (vnode, rm) {
  var el = vnode.elm;

  // call enter callback now
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return rm()
  }

  /* istanbul ignore if */
  if (isDef(el._leaveCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);

  var explicitLeaveDuration = toNumber(
    isObject(duration)
      ? duration.leave
      : duration
  );

  if ("development" !== 'production' && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave () {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return
    }
    // record leaving element
    if (!vnode.data.show) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        addTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled && !userWantsControl) {
          if (isValidDuration(explicitLeaveDuration)) {
            setTimeout(cb, explicitLeaveDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      });
    }
    leave && leave(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}

// only used in dev mode
function checkDuration (val, name, vnode) {
  if (typeof val !== 'number') {
    warn(
      "<transition> explicit " + name + " duration is not a valid number - " +
      "got " + (JSON.stringify(val)) + ".",
      vnode.context
    );
  } else if (isNaN(val)) {
    warn(
      "<transition> explicit " + name + " duration is NaN - " +
      'the duration expression might be incorrect.',
      vnode.context
    );
  }
}

function isValidDuration (val) {
  return typeof val === 'number' && !isNaN(val)
}

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength (fn) {
  if (isUndef(fn)) {
    return false
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(
      Array.isArray(invokerFns)
        ? invokerFns[0]
        : invokerFns
    )
  } else {
    return (fn._length || fn.length) > 1
  }
}

function _enter (_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1 (vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};

var platformModules = [
  attrs,
  klass,
  events,
  domProps,
  style,
  transition
];

/*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = platformModules.concat(baseModules);

var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

var isTextInputType = makeMap('text,number,password,search,email,tel,url');

/* istanbul ignore if */
if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var model$1 = {
  inserted: function inserted (el, binding, vnode) {
    if (vnode.tag === 'select') {
      var cb = function () {
        setSelected(el, binding, vnode.context);
      };
      cb();
      /* istanbul ignore if */
      if (isIE || isEdge) {
        setTimeout(cb, 0);
      }
      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        el.addEventListener('change', onCompositionEnd);
        if (!isAndroid) {
          el.addEventListener('compositionstart', onCompositionStart);
          el.addEventListener('compositionend', onCompositionEnd);
        }
        /* istanbul ignore if */
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },
  componentUpdated: function componentUpdated (el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.
      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);
      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
        trigger(el, 'change');
      }
    }
  }
};

function setSelected (el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
    "development" !== 'production' && warn(
      "<select multiple v-model=\"" + (binding.expression) + "\"> " +
      "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
      vm
    );
    return
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function getValue (option) {
  return '_value' in option
    ? option._value
    : option.value
}

function onCompositionStart (e) {
  e.target.composing = true;
}

function onCompositionEnd (e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) { return }
  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger (el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}

/*  */

// recursively search for possible transition defined inside the component root
function locateNode (vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
    ? locateNode(vnode.componentInstance._vnode)
    : vnode
}

var show = {
  bind: function bind (el, ref, vnode) {
    var value = ref.value;

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay =
      el.style.display === 'none' ? '' : el.style.display;
    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },

  update: function update (el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;

    /* istanbul ignore if */
    if (value === oldValue) { return }
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    if (transition$$1) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },

  unbind: function unbind (
    el,
    binding,
    vnode,
    oldVnode,
    isDestroy
  ) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};

var platformDirectives = {
  model: model$1,
  show: show
};

/*  */

// Provides transition support for a single element/component.
// supports transition mode (out-in / in-out)

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild (vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children))
  } else {
    return vnode
  }
}

function extractTransitionData (comp) {
  var data = {};
  var options = comp.$options;
  // props
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  // events.
  // extract listeners and pass them directly to the transition methods
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data
}

function placeholder (h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    })
  }
}

function hasParentTransition (vnode) {
  while ((vnode = vnode.parent)) {
    if (vnode.data.transition) {
      return true
    }
  }
}

function isSameChild (child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag
}

function isAsyncPlaceholder (node) {
  return node.isComment && node.asyncFactory
}

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,

  render: function render (h) {
    var this$1 = this;

    var children = this.$options._renderChildren;
    if (!children) {
      return
    }

    // filter out text nodes (possible whitespaces)
    children = children.filter(function (c) { return c.tag || isAsyncPlaceholder(c); });
    /* istanbul ignore if */
    if (!children.length) {
      return
    }

    // warn multiple elements
    if ("development" !== 'production' && children.length > 1) {
      warn(
        '<transition> can only be used on a single element. Use ' +
        '<transition-group> for lists.',
        this.$parent
      );
    }

    var mode = this.mode;

    // warn invalid mode
    if ("development" !== 'production' &&
      mode && mode !== 'in-out' && mode !== 'out-in'
    ) {
      warn(
        'invalid <transition> mode: ' + mode,
        this.$parent
      );
    }

    var rawChild = children[0];

    // if this is a component root node and the component's
    // parent container node also has transition, skip.
    if (hasParentTransition(this.$vnode)) {
      return rawChild
    }

    // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive
    var child = getRealChild(rawChild);
    /* istanbul ignore if */
    if (!child) {
      return rawChild
    }

    if (this._leaving) {
      return placeholder(h, rawChild)
    }

    // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.
    var id = "__transition-" + (this._uid) + "-";
    child.key = child.key == null
      ? child.isComment
        ? id + 'comment'
        : id + child.tag
      : isPrimitive(child.key)
        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
        : child.key;

    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);

    // mark v-show
    // so that the transition module can hand over the control to the directive
    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {
      child.data.show = true;
    }

    if (
      oldChild &&
      oldChild.data &&
      !isSameChild(child, oldChild) &&
      !isAsyncPlaceholder(oldChild)
    ) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild && (oldChild.data.transition = extend({}, data));
      // handle transition mode
      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild)
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild
        }
        var delayedLeave;
        var performLeave = function () { delayedLeave(); };
        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
      }
    }

    return rawChild
  }
};

/*  */

// Provides transition support for list items.
// supports move transitions using the FLIP technique.

// Because the vdom's children update algorithm is "unstable" - i.e.
// it doesn't guarantee the relative positioning of removed elements,
// we force transition-group to update its children into two passes:
// in the first pass, we remove all nodes that need to be removed,
// triggering their leaving transition; in the second pass, we insert/move
// into the final desired state. This way in the second pass removed
// nodes will remain where they should be.

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);

delete props.mode;

var TransitionGroup = {
  props: props,

  render: function render (h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c
          ;(c.data || (c.data = {})).transition = transitionData;
        } else {
          var opts = c.componentOptions;
          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
          warn(("<transition-group> children must be keyed: <" + name + ">"));
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children)
  },

  beforeUpdate: function beforeUpdate () {
    // force removing pass
    this.__patch__(
      this._vnode,
      this.kept,
      false, // hydrating
      true // removeOnly (!important, avoids unnecessary moves)
    );
    this._vnode = this.kept;
  },

  updated: function updated () {
    var children = this.prevChildren;
    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return
    }

    // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);

    // force reflow to put everything in position
    var body = document.body;
    var f = body.offsetHeight; // eslint-disable-line

    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },

  methods: {
    hasMove: function hasMove (el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false
      }
      /* istanbul ignore if */
      if (this._hasMove) {
        return this._hasMove
      }
      // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
      }
      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return (this._hasMove = info.hasTransform)
    }
  }
};

function callPendingCbs (c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition (c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation (c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};

/*  */

// install platform specific utils
Vue$3$1.config.mustUseProp = mustUseProp;
Vue$3$1.config.isReservedTag = isReservedTag;
Vue$3$1.config.isReservedAttr = isReservedAttr;
Vue$3$1.config.getTagNamespace = getTagNamespace;
Vue$3$1.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
extend(Vue$3$1.options.directives, platformDirectives);
extend(Vue$3$1.options.components, platformComponents);

// install platform patch function
Vue$3$1.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
Vue$3$1.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating)
};

// devtools global hook
/* istanbul ignore next */
setTimeout(function () {
  if (config.devtools) {
    if (devtools) {
      devtools.emit('init', Vue$3$1);
    } else if ("development" !== 'production' && isChrome) {
      console[console.info ? 'info' : 'log'](
        'Download the Vue Devtools extension for a better development experience:\n' +
        'https://github.com/vuejs/vue-devtools'
      );
    }
  }
  if ("development" !== 'production' &&
    config.productionTip !== false &&
    inBrowser && typeof console !== 'undefined'
  ) {
    console[console.info ? 'info' : 'log'](
      "You are running Vue in development mode.\n" +
      "Make sure to turn on production mode when deploying for production.\n" +
      "See more tips at https://vuejs.org/guide/deployment.html"
    );
  }
}, 0);

/**
 * Template7 1.2.5
 * Mobile-first HTML template engine
 * 
 * http://www.idangero.us/template7/
 * 
 * Copyright 2017, Vladimir Kharlampidi
 * The iDangero.us
 * http://www.idangero.us/
 * 
 * Licensed under MIT
 * 
 * Released on: August 2, 2017
 */
var template7Context;
if (typeof window !== 'undefined') {
  template7Context = window;
} else if (typeof global !== 'undefined') {
  template7Context = global;
} else {
  template7Context = undefined;
}
function isArray(arr) {
  return Array.isArray ? Array.isArray(arr) : Object.prototype.toString.apply(arr) === '[object Array]';
}
function isFunction(func) {
  return typeof func === 'function';
}
function escape(string) {
  return (typeof template7Context !== 'undefined' && template7Context.escape ? template7Context.escape(string) : string)
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;');
}
var quoteSingleRexExp = new RegExp('\'', 'g');
var quoteDoubleRexExp = new RegExp('"', 'g');
function helperToSlices(string) {
  var helperParts = string.replace(/[{}#}]/g, '').split(' ');
  var slices = [];
  var shiftIndex;
  var i;
  var j;
  for (i = 0; i < helperParts.length; i += 1) {
    var part = helperParts[i];
    var blockQuoteRegExp = (void 0);
    var openingQuote = (void 0);
    if (i === 0) { slices.push(part); }
    else if (part.indexOf('"') === 0 || part.indexOf('\'') === 0) {
      blockQuoteRegExp = part.indexOf('"') === 0 ? quoteDoubleRexExp : quoteSingleRexExp;
      openingQuote = part.indexOf('"') === 0 ? '"' : '\'';
      // Plain String
      if (part.match(blockQuoteRegExp).length === 2) {
        // One word string
        slices.push(part);
      } else {
        // Find closed Index
        shiftIndex = 0;
        for (j = i + 1; j < helperParts.length; j += 1) {
          part += " " + (helperParts[j]);
          if (helperParts[j].indexOf(openingQuote) >= 0) {
            shiftIndex = j;
            slices.push(part);
            break;
          }
        }
        if (shiftIndex) { i = shiftIndex; }
      }
    } else if (part.indexOf('=') > 0) {
      // Hash
      var hashParts = part.split('=');
      var hashName = hashParts[0];
      var hashContent = hashParts[1];
      if (!blockQuoteRegExp) {
        blockQuoteRegExp = hashContent.indexOf('"') === 0 ? quoteDoubleRexExp : quoteSingleRexExp;
        openingQuote = hashContent.indexOf('"') === 0 ? '"' : '\'';
      }
      if (hashContent.match(blockQuoteRegExp).length !== 2) {
        shiftIndex = 0;
        for (j = i + 1; j < helperParts.length; j += 1) {
          hashContent += " " + (helperParts[j]);
          if (helperParts[j].indexOf(openingQuote) >= 0) {
            shiftIndex = j;
            break;
          }
        }
        if (shiftIndex) { i = shiftIndex; }
      }
      var hash = [hashName, hashContent.replace(blockQuoteRegExp, '')];
      slices.push(hash);
    } else {
      // Plain variable
      slices.push(part);
    }
  }
  return slices;
}
function stringToBlocks(string) {
  var blocks = [];
  var i;
  var j;
  if (!string) { return []; }
  var stringBlocks = string.split(/({{[^{^}]*}})/);
  for (i = 0; i < stringBlocks.length; i += 1) {
    var block = stringBlocks[i];
    if (block === '') { continue; }
    if (block.indexOf('{{') < 0) {
      blocks.push({
        type: 'plain',
        content: block,
      });
    } else {
      if (block.indexOf('{/') >= 0) {
        continue;
      }
      if (block.indexOf('{#') < 0 && block.indexOf(' ') < 0 && block.indexOf('else') < 0) {
        // Simple variable
        blocks.push({
          type: 'variable',
          contextName: block.replace(/[{}]/g, ''),
        });
        continue;
      }
      // Helpers
      var helperSlices = helperToSlices(block);
      var helperName = helperSlices[0];
      var isPartial = helperName === '>';
      var helperContext = [];
      var helperHash = {};
      for (j = 1; j < helperSlices.length; j += 1) {
        var slice = helperSlices[j];
        if (isArray(slice)) {
          // Hash
          helperHash[slice[0]] = slice[1] === 'false' ? false : slice[1];
        } else {
          helperContext.push(slice);
        }
      }

      if (block.indexOf('{#') >= 0) {
        // Condition/Helper
        var helperContent = '';
        var elseContent = '';
        var toSkip = 0;
        var shiftIndex = (void 0);
        var foundClosed = false;
        var foundElse = false;
        var depth = 0;
        for (j = i + 1; j < stringBlocks.length; j += 1) {
          if (stringBlocks[j].indexOf('{{#') >= 0) {
            depth += 1;
          }
          if (stringBlocks[j].indexOf('{{/') >= 0) {
            depth -= 1;
          }
          if (stringBlocks[j].indexOf(("{{#" + helperName)) >= 0) {
            helperContent += stringBlocks[j];
            if (foundElse) { elseContent += stringBlocks[j]; }
            toSkip += 1;
          } else if (stringBlocks[j].indexOf(("{{/" + helperName)) >= 0) {
            if (toSkip > 0) {
              toSkip -= 1;
              helperContent += stringBlocks[j];
              if (foundElse) { elseContent += stringBlocks[j]; }
            } else {
              shiftIndex = j;
              foundClosed = true;
              break;
            }
          } else if (stringBlocks[j].indexOf('else') >= 0 && depth === 0) {
            foundElse = true;
          } else {
            if (!foundElse) { helperContent += stringBlocks[j]; }
            if (foundElse) { elseContent += stringBlocks[j]; }
          }
        }
        if (foundClosed) {
          if (shiftIndex) { i = shiftIndex; }
          blocks.push({
            type: 'helper',
            helperName: helperName,
            contextName: helperContext,
            content: helperContent,
            inverseContent: elseContent,
            hash: helperHash,
          });
        }
      } else if (block.indexOf(' ') > 0) {
        if (isPartial) {
          helperName = '_partial';
          if (helperContext[0]) { helperContext[0] = "\"" + (helperContext[0].replace(/"|'/g, '')) + "\""; }
        }
        blocks.push({
          type: 'helper',
          helperName: helperName,
          contextName: helperContext,
          hash: helperHash,
        });
      }
    }
  }
  return blocks;
}
function parseJsVariable(expression, replace, object) {
  return expression.split(/([+ -*/^])/g).map(function (part) {
    if (part.indexOf(replace) < 0) { return part; }
    if (!object) { return JSON.stringify(''); }
    var variable = object;
    if (part.indexOf((replace + ".")) >= 0) {
      part.split((replace + "."))[1].split('.').forEach(function (partName) {
        if (variable[partName]) { variable = variable[partName]; }
        else { variable = 'undefined'; }
      });
    }
    return JSON.stringify(variable);
  }).join('');
}
function parseJsParents(expression, parents) {
  return expression.split(/([+ -*^])/g).map(function (part) {
    if (part.indexOf('../') < 0) { return part; }
    if (!parents || parents.length === 0) { return JSON.stringify(''); }
    var levelsUp = part.split('../').length - 1;
    var parentData = levelsUp > parents.length ? parents[parents.length - 1] : parents[levelsUp - 1];

    var variable = parentData;
    var parentPart = part.replace(/..\//g, '');
    parentPart.split('.').forEach(function (partName) {
      if (variable[partName]) { variable = variable[partName]; }
      else { variable = 'undefined'; }
    });
    return JSON.stringify(variable);
  }).join('');
}
var Template7 = function Template7(template) {
  var t = this;
  t.template = template;

  function getCompileVar(name, ctx, data) {
    if ( data === void 0 ) data = 'data_1';

    var variable = ctx;
    var parts;
    var levelsUp = 0;
    var newDepth;
    if (name.indexOf('../') === 0) {
      levelsUp = name.split('../').length - 1;
      newDepth = variable.split('_')[1] - levelsUp;
      variable = "ctx_" + (newDepth >= 1 ? newDepth : 1);
      parts = name.split('../')[levelsUp].split('.');
    } else if (name.indexOf('@global') === 0) {
      variable = 'Template7.global';
      parts = name.split('@global.')[1].split('.');
    } else if (name.indexOf('@root') === 0) {
      variable = 'root';
      parts = name.split('@root.')[1].split('.');
    } else {
      parts = name.split('.');
    }
    for (var i = 0; i < parts.length; i += 1) {
      var part = parts[i];
      if (part.indexOf('@') === 0) {
        var dataLevel = data.split('_')[1];
        if (levelsUp > 0) {
          dataLevel = newDepth;
        }
        if (i > 0) {
          variable += "[(data_" + dataLevel + " && data_" + dataLevel + "." + (part.replace('@', '')) + ")]";
        } else {
          variable = "(data_" + dataLevel + " && data_" + dataLevel + "." + (part.replace('@', '')) + ")";
        }
      } else if (isFinite(part)) {
        variable += "[" + part + "]";
      } else if (part === 'this' || part.indexOf('this.') >= 0 || part.indexOf('this[') >= 0 || part.indexOf('this(') >= 0) {
        variable = part.replace('this', ctx);
      } else {
        variable += "." + part;
      }
    }
    return variable;
  }
  function getCompiledArguments(contextArray, ctx, data) {
    var arr = [];
    for (var i = 0; i < contextArray.length; i += 1) {
      if (/^['"]/.test(contextArray[i])) { arr.push(contextArray[i]); }
      else if (/^(true|false|\d+)$/.test(contextArray[i])) { arr.push(contextArray[i]); }
      else {
        arr.push(getCompileVar(contextArray[i], ctx, data));
      }
    }

    return arr.join(', ');
  }
  function compile(template, depth) {
    if ( template === void 0 ) template = t.template;
    if ( depth === void 0 ) depth = 1;

    if (typeof template !== 'string') {
      throw new Error('Template7: Template must be a string');
    }
    var blocks = stringToBlocks(template);
    var ctx = "ctx_" + depth;
    var data = "data_" + depth;
    if (blocks.length === 0) {
      return function empty() { return ''; };
    }

    function getCompileFn(block, newDepth) {
      if (block.content) { return compile(block.content, newDepth); }
      return function empty() { return ''; };
    }
    function getCompileInverse(block, newDepth) {
      if (block.inverseContent) { return compile(block.inverseContent, newDepth); }
      return function empty() { return ''; };
    }

    var resultString = '';
    if (depth === 1) {
      resultString += "(function (" + ctx + ", " + data + ", root) {\n";
    } else {
      resultString += "(function (" + ctx + ", " + data + ") {\n";
    }
    if (depth === 1) {
      resultString += 'function isArray(arr){return Object.prototype.toString.apply(arr) === \'[object Array]\';}\n';
      resultString += 'function isFunction(func){return (typeof func === \'function\');}\n';
      resultString += 'function c(val, ctx) {if (typeof val !== "undefined" && val !== null) {if (isFunction(val)) {return val.call(ctx);} else return val;} else return "";}\n';
      resultString += 'root = root || ctx_1 || {};\n';
    }
    resultString += 'var r = \'\';\n';
    var i;
    for (i = 0; i < blocks.length; i += 1) {
      var block = blocks[i];
      // Plain block
      if (block.type === 'plain') {
        resultString += "r +='" + ((block.content).replace(/\r/g, '\\r').replace(/\n/g, '\\n').replace(/'/g, '\\' + '\'')) + "';";
        continue;
      }
      var variable = (void 0);
      var compiledArguments = (void 0);
      // Variable block
      if (block.type === 'variable') {
        variable = getCompileVar(block.contextName, ctx, data);
        resultString += "r += c(" + variable + ", " + ctx + ");";
      }
      // Helpers block
      if (block.type === 'helper') {
        var parents = (void 0);
        if (ctx !== 'ctx_1') {
          var level = ctx.split('_')[1];
          var parentsString = "ctx_" + (level - 1);
          for (var j = level - 2; j >= 1; j -= 1) {
            parentsString += ", ctx_" + j;
          }
          parents = "[" + parentsString + "]";
        } else {
          parents = "[" + ctx + "]";
        }
        if (block.helperName in t.helpers) {
          compiledArguments = getCompiledArguments(block.contextName, ctx, data);
          resultString += "r += (Template7.helpers." + (block.helperName) + ").call(" + ctx + ", " + (compiledArguments && ((compiledArguments + ", "))) + "{hash:" + (JSON.stringify(block.hash)) + ", data: " + data + " || {}, fn: " + (getCompileFn(block, depth + 1)) + ", inverse: " + (getCompileInverse(block, depth + 1)) + ", root: root, parents: " + parents + "});";
        } else if (block.contextName.length > 0) {
          throw new Error(("Template7: Missing helper: \"" + (block.helperName) + "\""));
        } else {
          variable = getCompileVar(block.helperName, ctx, data);
          resultString += "if (" + variable + ") {";
          resultString += "if (isArray(" + variable + ")) {";
          resultString += "r += (Template7.helpers.each).call(" + ctx + ", " + variable + ", {hash:" + (JSON.stringify(block.hash)) + ", data: " + data + " || {}, fn: " + (getCompileFn(block, depth + 1)) + ", inverse: " + (getCompileInverse(block, depth + 1)) + ", root: root, parents: " + parents + "});";
          resultString += '}else {';
          resultString += "r += (Template7.helpers.with).call(" + ctx + ", " + variable + ", {hash:" + (JSON.stringify(block.hash)) + ", data: " + data + " || {}, fn: " + (getCompileFn(block, depth + 1)) + ", inverse: " + (getCompileInverse(block, depth + 1)) + ", root: root, parents: " + parents + "});";
          resultString += '}}';
        }
      }
    }
    resultString += '\nreturn r;})';
    return eval.call(template7Context, resultString);
  }
  t.compile = function _compile(template) {
    if (!t.compiled) {
      t.compiled = compile(template);
    }
    return t.compiled;
  };
};

Template7.prototype = {
  options: {},
  partials: {},
  helpers: {
    _partial: function _partial(partialName, options) {
      var p = Template7.prototype.partials[partialName];
      if (!p || (p && !p.template)) { return ''; }
      if (!p.compiled) {
        p.compiled = new Template7(p.template).compile();
      }
      var ctx = this;
      for (var hashName in options.hash) {
        ctx[hashName] = options.hash[hashName];
      }
      return p.compiled(ctx, options.data, options.root);
    },
    escape: function escape$1(context, options) {
      if (typeof context !== 'string') {
        throw new Error('Template7: Passed context to "escape" helper should be a string');
      }
      return escape(context);
    },
    if: function if$1(context, options) {
      var ctx = context;
      if (isFunction(ctx)) { ctx = ctx.call(this); }
      if (ctx) {
        return options.fn(this, options.data);
      }

      return options.inverse(this, options.data);
    },
    unless: function unless(context, options) {
      var ctx = context;
      if (isFunction(ctx)) { ctx = ctx.call(this); }
      if (!ctx) {
        return options.fn(this, options.data);
      }

      return options.inverse(this, options.data);
    },
    each: function each(context, options) {
      var ctx = context;
      var ret = '';
      var i = 0;
      if (isFunction(ctx)) { ctx = ctx.call(this); }
      if (isArray(ctx)) {
        if (options.hash.reverse) {
          ctx = ctx.reverse();
        }
        for (i = 0; i < ctx.length; i += 1) {
          ret += options.fn(ctx[i], { first: i === 0, last: i === ctx.length - 1, index: i });
        }
        if (options.hash.reverse) {
          ctx = ctx.reverse();
        }
      } else {
        for (var key in ctx) {
          i += 1;
          ret += options.fn(ctx[key], { key: key });
        }
      }
      if (i > 0) { return ret; }
      return options.inverse(this);
    },
    with: function with$1(context, options) {
      var ctx = context;
      if (isFunction(ctx)) { ctx = context.call(this); }
      return options.fn(ctx);
    },
    join: function join(context, options) {
      var ctx = context;
      if (isFunction(ctx)) { ctx = ctx.call(this); }
      return ctx.join(options.hash.delimiter || options.hash.delimeter);
    },
    js: function js(expression, options) {
      var data = options.data;
      var func;
      var execute = expression;
      ('index first last key').split(' ').forEach(function (prop) {
        if (typeof data[prop] !== 'undefined') {
          var re1 = new RegExp(("this.@" + prop), 'g');
          var re2 = new RegExp(("@" + prop), 'g');
          execute = execute
            .replace(re1, JSON.stringify(data[prop]))
            .replace(re2, JSON.stringify(data[prop]));
        }
      });
      if (options.root && execute.indexOf('@root') >= 0) {
        execute = parseJsVariable(execute, '@root', options.root);
      }
      if (execute.indexOf('@global') >= 0) {
        execute = parseJsVariable(execute, '@global', template7Context.Template7.global);
      }
      if (execute.indexOf('../') >= 0) {
        execute = parseJsParents(execute, options.parents);
      }
      if (execute.indexOf('return') >= 0) {
        func = "(function(){" + execute + "})";
      } else {
        func = "(function(){return (" + execute + ")})";
      }
      return eval.call(this, func).call(this);
    },
    js_if: function js_if(expression, options) {
      var data = options.data;
      var func;
      var execute = expression;
      ('index first last key').split(' ').forEach(function (prop) {
        if (typeof data[prop] !== 'undefined') {
          var re1 = new RegExp(("this.@" + prop), 'g');
          var re2 = new RegExp(("@" + prop), 'g');
          execute = execute
            .replace(re1, JSON.stringify(data[prop]))
            .replace(re2, JSON.stringify(data[prop]));
        }
      });
      if (options.root && execute.indexOf('@root') >= 0) {
        execute = parseJsVariable(execute, '@root', options.root);
      }
      if (execute.indexOf('@global') >= 0) {
        execute = parseJsVariable(execute, '@global', Template7.global);
      }
      if (execute.indexOf('../') >= 0) {
        execute = parseJsParents(execute, options.parents);
      }
      if (execute.indexOf('return') >= 0) {
        func = "(function(){" + execute + "})";
      } else {
        func = "(function(){return (" + execute + ")})";
      }
      var condition = eval.call(this, func).call(this);
      if (condition) {
        return options.fn(this, options.data);
      }

      return options.inverse(this, options.data);
    },
  },
};
Template7.prototype.helpers.js_compare = Template7.prototype.helpers.js_if;
function t7(template, data) {
  if (arguments.length === 2) {
    var instance = new Template7(template);
    var rendered = instance.compile()(data);
    instance = null;
    return (rendered);
  }
  return new Template7(template);
}
t7.registerHelper = function registerHelper(name, fn) {
  Template7.prototype.helpers[name] = fn;
};
t7.unregisterHelper = function unregisterHelper(name) {
  Template7.prototype.helpers[name] = undefined;
  delete Template7.prototype.helpers[name];
};
t7.registerPartial = function registerPartial(name, template) {
  Template7.prototype.partials[name] = { template: template };
};
t7.unregisterPartial = function unregisterPartial(name) {
  if (Template7.prototype.partials[name]) {
    Template7.prototype.partials[name] = undefined;
    delete Template7.prototype.partials[name];
  }
};
t7.compile = function compile(template, options) {
  var instance = new Template7(template, options);
  return instance.compile();
};

t7.options = Template7.prototype.options;
t7.helpers = Template7.prototype.helpers;
t7.partials = Template7.prototype.partials;

/**
 * Dom7 1.7.2
 * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API
 * http://framework7.io/docs/dom.html
 *
 * Copyright 2017, Vladimir Kharlampidi
 * The iDangero.us
 * http://www.idangero.us/
 *
 * Licensed under MIT
 *
 * Released on: September 7, 2017
 */
var Dom7 = function Dom7(arr) {
  var self = this;
  // Create array-like object
  for (var i = 0; i < arr.length; i += 1) {
    self[i] = arr[i];
  }
  self.length = arr.length;
  // Return collection with methods
  return this;
};

function $$1(selector, context) {
  var arr = [];
  var i = 0;
  if (selector && !context) {
    if (selector instanceof Dom7) {
      return selector;
    }
  }
  if (selector) {
      // String
    if (typeof selector === 'string') {
      var els;
      var tempParent;
      var html = selector.trim();
      if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {
        var toCreate = 'div';
        if (html.indexOf('<li') === 0) { toCreate = 'ul'; }
        if (html.indexOf('<tr') === 0) { toCreate = 'tbody'; }
        if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) { toCreate = 'tr'; }
        if (html.indexOf('<tbody') === 0) { toCreate = 'table'; }
        if (html.indexOf('<option') === 0) { toCreate = 'select'; }
        tempParent = document.createElement(toCreate);
        tempParent.innerHTML = html;
        for (i = 0; i < tempParent.childNodes.length; i += 1) {
          arr.push(tempParent.childNodes[i]);
        }
      } else {
        if (!context && selector[0] === '#' && !selector.match(/[ .<>:~]/)) {
          // Pure ID selector
          els = [document.getElementById(selector.trim().split('#')[1])];
        } else {
          // Other selectors
          els = (context || document).querySelectorAll(selector.trim());
        }
        for (i = 0; i < els.length; i += 1) {
          if (els[i]) { arr.push(els[i]); }
        }
      }
    } else if (selector.nodeType || selector === window || selector === document) {
      // Node/element
      arr.push(selector);
    } else if (selector.length > 0 && selector[0].nodeType) {
      // Array of elements or instance of Dom
      for (i = 0; i < selector.length; i += 1) {
        arr.push(selector[i]);
      }
    }
  }
  return new Dom7(arr);
}

$$1.fn = Dom7.prototype;
$$1.Class = Dom7;

$$1.use = function use() {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  args.forEach(function (methods) {
    var isUtils = '__utils' in methods;
    Object.keys(methods).forEach(function (methodName) {
      if (methodName === '__utils') { return; }
      if (isUtils) {
        $$1[methodName] = methods[methodName];
      } else {
        $$1.fn[methodName] = methods[methodName];
      }
    });
  });
};

function parseUrlQuery(url) {
  var query = {};
  var urlToParse = url || window.location.href;
  var i;
  var params;
  var param;
  var length;
  if (typeof urlToParse === 'string' && urlToParse.length) {
    urlToParse = urlToParse.indexOf('?') > -1 ? urlToParse.replace(/\S*\?/, '') : '';
    params = urlToParse.split('&').filter(function (paramsPart) { return paramsPart !== ''; });
    length = params.length;

    for (i = 0; i < length; i += 1) {
      param = params[i].replace(/#\S+/g, '').split('=');
      query[decodeURIComponent(param[0])] = typeof param[1] === 'undefined' ? undefined : decodeURIComponent(param[1]) || '';
    }
  }
  return query;
}
function isArray$1(arr) {
  return Array.isArray(arr);
}
function each(obj, callback) {
  // Check it's iterable
  // TODO: Should probably raise a value error here
  if (typeof obj !== 'object') { return; }
  // Don't bother continuing without a callback
  if (!callback) { return; }
  if (Array.isArray(obj) || obj instanceof Dom7) {
    // Array
    for (var i = 0; i < obj.length; i += 1) {
      // If callback returns false
      if (callback(i, obj[i]) === false) {
        // Break out of the loop
        return;
      }
    }
  } else {
    // Object
    for (var prop in obj) {
      // Check the propertie belongs to the object
      // not it's prototype
      if (obj.hasOwnProperty(prop)) {
        // If the callback returns false
        if (callback(prop, obj[prop]) === false) {
          // Break out of the loop;
          return;
        }
      }
    }
  }
}
function unique(arr) {
  var uniqueArray = [];
  for (var i = 0; i < arr.length; i += 1) {
    if (uniqueArray.indexOf(arr[i]) === -1) { uniqueArray.push(arr[i]); }
  }
  return uniqueArray;
}
function serializeObject(obj, parents) {
  if ( parents === void 0 ) parents = [];

  if (typeof obj === 'string') { return obj; }
  var resultArray = [];
  var separator = '&';
  var newParents;
  function varName(name) {
    if (parents.length > 0) {
      var parentParts = '';
      for (var j = 0; j < parents.length; j += 1) {
        if (j === 0) { parentParts += parents[j]; }
        else { parentParts += "[" + (encodeURIComponent(parents[j])) + "]"; }
      }
      return (parentParts + "[" + (encodeURIComponent(name)) + "]");
    }
    return encodeURIComponent(name);
  }
  function varValue(value) {
    return encodeURIComponent(value);
  }
  Object.keys(obj).forEach(function (prop) {
    var toPush;
    if (Array.isArray(obj[prop])) {
      toPush = [];
      for (var i = 0; i < obj[prop].length; i += 1) {
        if (!Array.isArray(obj[prop][i]) && typeof obj[prop][i] === 'object') {
          newParents = parents.slice();
          newParents.push(prop);
          newParents.push(String(i));
          toPush.push(serializeObject(obj[prop][i], newParents));
        } else {
          toPush.push(((varName(prop)) + "[]=" + (varValue(obj[prop][i]))));
        }
      }
      if (toPush.length > 0) { resultArray.push(toPush.join(separator)); }
    } else if (obj[prop] === null || obj[prop] === '') {
      resultArray.push(((varName(prop)) + "="));
    } else if (typeof obj[prop] === 'object') {
      // Object, convert to named array
      newParents = parents.slice();
      newParents.push(prop);
      toPush = serializeObject(obj[prop], newParents);
      if (toPush !== '') { resultArray.push(toPush); }
    } else if (typeof obj[prop] !== 'undefined' && obj[prop] !== '') {
      // Should be string or plain value
      resultArray.push(((varName(prop)) + "=" + (varValue(obj[prop]))));
    } else if (obj[prop] === '') { resultArray.push(varName(prop)); }
  });
  return resultArray.join(separator);
}
function toCamelCase(string) {
  return string.toLowerCase().replace(/-(.)/g, function (match, group1) { return group1.toUpperCase(); });
}
function dataset(el) {
  return $$1(el).dataset();
}
function requestAnimationFrame(callback) {
  if (window.requestAnimationFrame) { return window.requestAnimationFrame(callback); }
  else if (window.webkitRequestAnimationFrame) { return window.webkitRequestAnimationFrame(callback); }
  return window.setTimeout(callback, 1000 / 60);
}
function cancelAnimationFrame(id) {
  if (window.cancelAnimationFrame) { return window.cancelAnimationFrame(id); }
  else if (window.webkitCancelAnimationFrame) { return window.webkitCancelAnimationFrame(id); }
  return window.clearTimeout(id);
}
function isObject$1(o) {
  return typeof o === 'object' && o !== null && o.constructor && o.constructor === Object;
}
function extend$1() {
  var args = [], len$1 = arguments.length;
  while ( len$1-- ) args[ len$1 ] = arguments[ len$1 ];

  var to = Object(args[0]);
  for (var i = 1; i < args.length; i += 1) {
    var nextSource = args[i];
    if (nextSource !== undefined && nextSource !== null) {
      var keysArray = Object.keys(Object(nextSource));
      for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
        var nextKey = keysArray[nextIndex];
        var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
        if (desc !== undefined && desc.enumerable) {
          if (isObject$1(to[nextKey]) && isObject$1(nextSource[nextKey])) {
            extend$1(to[nextKey], nextSource[nextKey]);
          } else if (!isObject$1(to[nextKey]) && isObject$1(nextSource[nextKey])) {
            to[nextKey] = {};
            extend$1(to[nextKey], nextSource[nextKey]);
          } else {
            to[nextKey] = nextSource[nextKey];
          }
        }
      }
    }
  }
  return to;
}
var Utils$1 = {
  __utils: true,
  parseUrlQuery: parseUrlQuery,
  parseQuery: parseUrlQuery,
  isArray: isArray$1,
  each: each,
  unique: unique,
  serializeObject: serializeObject,
  param: serializeObject,
  toCamelCase: toCamelCase,
  dataset: dataset,
  requestAnimationFrame: requestAnimationFrame,
  cancelAnimationFrame: cancelAnimationFrame,
  extend: extend$1,
};

var Methods = {
  // Classes and attributes
  addClass: function addClass(className) {
    var this$1 = this;

    if (typeof className === 'undefined') {
      return this;
    }
    var classes = className.split(' ');
    for (var i = 0; i < classes.length; i += 1) {
      for (var j = 0; j < this.length; j += 1) {
        if (typeof this$1[j].classList !== 'undefined') { this$1[j].classList.add(classes[i]); }
      }
    }
    return this;
  },
  removeClass: function removeClass(className) {
    var this$1 = this;

    var classes = className.split(' ');
    for (var i = 0; i < classes.length; i += 1) {
      for (var j = 0; j < this.length; j += 1) {
        if (typeof this$1[j].classList !== 'undefined') { this$1[j].classList.remove(classes[i]); }
      }
    }
    return this;
  },
  hasClass: function hasClass(className) {
    if (!this[0]) { return false; }
    return this[0].classList.contains(className);
  },
  toggleClass: function toggleClass(className) {
    var this$1 = this;

    var classes = className.split(' ');
    for (var i = 0; i < classes.length; i += 1) {
      for (var j = 0; j < this.length; j += 1) {
        if (typeof this$1[j].classList !== 'undefined') { this$1[j].classList.toggle(classes[i]); }
      }
    }
    return this;
  },
  attr: function attr(attrs, value) {
    var arguments$1 = arguments;
    var this$1 = this;

    if (arguments.length === 1 && typeof attrs === 'string') {
      // Get attr
      if (this[0]) { return this[0].getAttribute(attrs); }
      return undefined;
    }

    // Set attrs
    for (var i = 0; i < this.length; i += 1) {
      if (arguments$1.length === 2) {
        // String
        this$1[i].setAttribute(attrs, value);
      } else {
        // Object
        for (var attrName in attrs) {
          this$1[i][attrName] = attrs[attrName];
          this$1[i].setAttribute(attrName, attrs[attrName]);
        }
      }
    }
    return this;
  },
  removeAttr: function removeAttr(attr) {
    var this$1 = this;

    for (var i = 0; i < this.length; i += 1) {
      this$1[i].removeAttribute(attr);
    }
    return this;
  },
  prop: function prop(props, value) {
    var arguments$1 = arguments;
    var this$1 = this;

    if (arguments.length === 1 && typeof props === 'string') {
      // Get prop
      if (this[0]) { return this[0][props]; }
    } else {
      // Set props
      for (var i = 0; i < this.length; i += 1) {
        if (arguments$1.length === 2) {
          // String
          this$1[i][props] = value;
        } else {
          // Object
          for (var propName in props) {
            this$1[i][propName] = props[propName];
          }
        }
      }
      return this;
    }
  },
  data: function data(key, value) {
    var this$1 = this;

    var el;
    if (typeof value === 'undefined') {
      el = this[0];
      // Get value
      if (el) {
        if (el.dom7ElementDataStorage && (key in el.dom7ElementDataStorage)) {
          return el.dom7ElementDataStorage[key];
        }

        var dataKey = el.getAttribute(("data-" + key));
        if (dataKey) {
          return dataKey;
        }
        return undefined;
      }
      return undefined;
    }

    // Set value
    for (var i = 0; i < this.length; i += 1) {
      el = this$1[i];
      if (!el.dom7ElementDataStorage) { el.dom7ElementDataStorage = {}; }
      el.dom7ElementDataStorage[key] = value;
    }
    return this;
  },
  removeData: function removeData(key) {
    var this$1 = this;

    for (var i = 0; i < this.length; i += 1) {
      var el = this$1[i];
      if (el.dom7ElementDataStorage && el.dom7ElementDataStorage[key]) {
        el.dom7ElementDataStorage[key] = null;
        delete el.dom7ElementDataStorage[key];
      }
    }
  },
  dataset: function dataset() {
    var el = this[0];
    if (!el) { return undefined; }
    var dataset$$1 = {};
    if (el.dataset) {
      for (var dataKey in el.dataset) {
        dataset$$1[dataKey] = el.dataset[dataKey];
      }
    } else {
      for (var i = 0; i < el.attributes.length; i += 1) {
        var attr = el.attributes[i];
        if (attr.name.indexOf('data-') >= 0) {
          dataset$$1[toCamelCase(attr.name.split('data-')[1])] = attr.value;
        }
      }
    }
    for (var key in dataset$$1) {
      if (dataset$$1[key] === 'false') { dataset$$1[key] = false; }
      else if (dataset$$1[key] === 'true') { dataset$$1[key] = true; }
      else if (parseFloat(dataset$$1[key]) === dataset$$1[key] * 1) { dataset$$1[key] *= 1; }
    }
    return dataset$$1;
  },
  val: function val(value) {
    var this$1 = this;

    if (typeof value === 'undefined') {
      if (this[0]) {
        if (this[0].multiple && this[0].nodeName.toLowerCase() === 'select') {
          var values = [];
          for (var i = 0; i < this[0].selectedOptions.length; i += 1) {
            values.push(this$1[0].selectedOptions[i].value);
          }
          return values;
        }
        return this[0].value;
      }
      return undefined;
    }

    for (var i$1 = 0; i$1 < this.length; i$1 += 1) {
      this$1[i$1].value = value;
    }
    return this;
  },
  // Transforms
  transform: function transform(transform$1) {
    var this$1 = this;

    for (var i = 0; i < this.length; i += 1) {
      var elStyle = this$1[i].style;
      elStyle.webkitTransform = transform$1;
      elStyle.transform = transform$1;
    }
    return this;
  },
  transition: function transition(duration) {
    var this$1 = this;

    if (typeof duration !== 'string') {
      duration = duration + "ms";
    }
    for (var i = 0; i < this.length; i += 1) {
      var elStyle = this$1[i].style;
      elStyle.webkitTransitionDuration = duration;
      elStyle.transitionDuration = duration;
    }
    return this;
  },
  // Events
  on: function on() {
    var this$1 = this;
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var eventType = args[0];
    var targetSelector;
    var listener;
    var capture = false;
    if (typeof args[1] === 'function') {
      targetSelector = false;
      listener = args[1];
      capture = args[2];
    } else {
      targetSelector = args[1];
      listener = args[2];
      capture = args[3];
    }
    function handleLiveEvent(e) {
      var target = e.target;
      if (!target) { return; }
      var eventData = e.target.dom7EventData || [];
      eventData.unshift(e);
      if ($$1(target).is(targetSelector)) { listener.apply(target, eventData); }
      else {
        var parents = $$1(target).parents();
        for (var k = 0; k < parents.length; k += 1) {
          if ($$1(parents[k]).is(targetSelector)) { listener.apply(parents[k], eventData); }
        }
      }
    }
    function handleEvent(e) {
      var eventData = e && e.target ? e.target.dom7EventData || [] : [];
      eventData.unshift(e);
      listener.apply(this, eventData);
    }
    var events = eventType.split(' ');
    var j;
    for (var i = 0; i < this.length; i += 1) {
      var el = this$1[i];
      if (!targetSelector) {
        for (j = 0; j < events.length; j += 1) {
          if (!el.dom7Listeners) { el.dom7Listeners = []; }
          el.dom7Listeners.push({
            type: eventType,
            listener: listener,
            proxyListener: handleEvent,
          });
          el.addEventListener(events[j], handleEvent, capture);
        }
      } else {
        // Live events
        for (j = 0; j < events.length; j += 1) {
          if (!el.dom7LiveListeners) { el.dom7LiveListeners = []; }
          el.dom7LiveListeners.push({
            type: eventType,
            listener: listener,
            proxyListener: handleLiveEvent,
          });
          el.addEventListener(events[j], handleLiveEvent, capture);
        }
      }
    }
    return this;
  },
  off: function off() {
    var this$1 = this;
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var eventType = args[0];
    var targetSelector;
    var listener;
    var capture = false;
    if (typeof args[1] === 'function') {
      targetSelector = false;
      listener = args[1];
      capture = args[2];
    } else {
      targetSelector = args[1];
      listener = args[2];
      capture = args[3];
    }
    var events = eventType.split(' ');
    for (var i = 0; i < events.length; i += 1) {
      for (var j = 0; j < this.length; j += 1) {
        var el = this$1[j];
        if (!targetSelector) {
          if (el.dom7Listeners) {
            for (var k = 0; k < el.dom7Listeners.length; k += 1) {
              if (listener) {
                if (el.dom7Listeners[k].listener === listener) {
                  el.removeEventListener(events[i], el.dom7Listeners[k].proxyListener, capture);
                }
              } else if (el.dom7Listeners[k].type === events[i]) {
                el.removeEventListener(events[i], el.dom7Listeners[k].proxyListener, capture);
              }
            }
          }
        } else if (el.dom7LiveListeners) {
          for (var k$1 = 0; k$1 < el.dom7LiveListeners.length; k$1 += 1) {
            if (listener) {
              if (el.dom7LiveListeners[k$1].listener === listener) {
                el.removeEventListener(events[i], el.dom7LiveListeners[k$1].proxyListener, capture);
              }
            } else if (el.dom7LiveListeners[k$1].type === events[i]) {
              el.removeEventListener(events[i], el.dom7LiveListeners[k$1].proxyListener, capture);
            }
          }
        }
      }
    }
    return this;
  },
  once: function once(eventName, targetSelector, listener, capture) {
    var dom = this;
    if (typeof targetSelector === 'function') {
      listener = arguments[1];
      capture = arguments[2];
      targetSelector = false;
    }
    function proxy(e) {
      var eventData = e.target.dom7EventData || [];
      listener.apply(this, eventData);
      dom.off(eventName, targetSelector, proxy, capture);
    }
    return dom.on(eventName, targetSelector, proxy, capture);
  },
  trigger: function trigger() {
    var this$1 = this;
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var events = args[0].split(' ');
    var eventData = args[1];
    for (var i = 0; i < events.length; i += 1) {
      for (var j = 0; j < this.length; j += 1) {
        var evt = (void 0);
        try {
          evt = new window.CustomEvent(events[i], { detail: eventData, bubbles: true, cancelable: true });
        } catch (e) {
          evt = document.createEvent('Event');
          evt.initEvent(events[i], true, true);
          evt.detail = eventData;
        }
        this$1[j].dom7EventData = args.filter(function (data, dataIndex) { return dataIndex > 0; });
        this$1[j].dispatchEvent(evt);
        this$1[j].dom7EventData = [];
        delete this$1[j].dom7EventData;
      }
    }
    return this;
  },
  transitionEnd: function transitionEnd(callback) {
    var events = ['webkitTransitionEnd', 'transitionend'];
    var dom = this;
    var i;
    function fireCallBack(e) {
      /* jshint validthis:true */
      if (e.target !== this) { return; }
      callback.call(this, e);
      for (i = 0; i < events.length; i += 1) {
        dom.off(events[i], fireCallBack);
      }
    }
    if (callback) {
      for (i = 0; i < events.length; i += 1) {
        dom.on(events[i], fireCallBack);
      }
    }
    return this;
  },
  animationEnd: function animationEnd(callback) {
    var events = ['webkitAnimationEnd', 'animationend'];
    var dom = this;
    var i;
    function fireCallBack(e) {
      if (e.target !== this) { return; }
      callback.call(this, e);
      for (i = 0; i < events.length; i += 1) {
        dom.off(events[i], fireCallBack);
      }
    }
    if (callback) {
      for (i = 0; i < events.length; i += 1) {
        dom.on(events[i], fireCallBack);
      }
    }
    return this;
  },
  // Sizing/Styles
  width: function width() {
    if (this[0] === window) {
      return window.innerWidth;
    }

    if (this.length > 0) {
      return parseFloat(this.css('width'));
    }

    return null;
  },
  outerWidth: function outerWidth(includeMargins) {
    if (this.length > 0) {
      if (includeMargins) {
        var styles = this.styles();
        return this[0].offsetWidth + parseFloat(styles.getPropertyValue('margin-right')) + parseFloat(styles.getPropertyValue('margin-left'));
      }
      return this[0].offsetWidth;
    }
    return null;
  },
  height: function height() {
    if (this[0] === window) {
      return window.innerHeight;
    }

    if (this.length > 0) {
      return parseFloat(this.css('height'));
    }

    return null;
  },
  outerHeight: function outerHeight(includeMargins) {
    if (this.length > 0) {
      if (includeMargins) {
        var styles = this.styles();
        return this[0].offsetHeight + parseFloat(styles.getPropertyValue('margin-top')) + parseFloat(styles.getPropertyValue('margin-bottom'));
      }
      return this[0].offsetHeight;
    }
    return null;
  },
  offset: function offset() {
    if (this.length > 0) {
      var el = this[0];
      var box = el.getBoundingClientRect();
      var body = document.body;
      var clientTop = el.clientTop || body.clientTop || 0;
      var clientLeft = el.clientLeft || body.clientLeft || 0;
      var scrollTop = el === window ? window.scrollY : el.scrollTop;
      var scrollLeft = el === window ? window.scrollX : el.scrollLeft;
      return {
        top: (box.top + scrollTop) - clientTop,
        left: (box.left + scrollLeft) - clientLeft,
      };
    }

    return null;
  },
  hide: function hide() {
    var this$1 = this;

    for (var i = 0; i < this.length; i += 1) {
      this$1[i].style.display = 'none';
    }
    return this;
  },
  show: function show() {
    var this$1 = this;

    for (var i = 0; i < this.length; i += 1) {
      var el = this$1[i];
      if (el.style.display === 'none') {
        el.style.display = '';
      }
      if (window.getComputedStyle(el, null).getPropertyValue('display') === 'none') {
        // Still not visible
        el.style.display = 'block';
      }
    }
    return this;
  },
  styles: function styles() {
    if (this[0]) { return window.getComputedStyle(this[0], null); }
    return {};
  },
  css: function css(props, value) {
    var this$1 = this;

    var i;
    if (arguments.length === 1) {
      if (typeof props === 'string') {
        if (this[0]) { return window.getComputedStyle(this[0], null).getPropertyValue(props); }
      } else {
        for (i = 0; i < this.length; i += 1) {
          for (var prop in props) {
            this$1[i].style[prop] = props[prop];
          }
        }
        return this;
      }
    }
    if (arguments.length === 2 && typeof props === 'string') {
      for (i = 0; i < this.length; i += 1) {
        this$1[i].style[props] = value;
      }
      return this;
    }
    return this;
  },

  // Dom manipulation
  toArray: function toArray() {
    var this$1 = this;

    var arr = [];
    for (var i = 0; i < this.length; i += 1) {
      arr.push(this$1[i]);
    }
    return arr;
  },
  // Iterate over the collection passing elements to `callback`
  each: function each(callback) {
    var this$1 = this;

    // Don't bother continuing without a callback
    if (!callback) { return this; }
    // Iterate over the current collection
    for (var i = 0; i < this.length; i += 1) {
      // If the callback returns false
      if (callback.call(this$1[i], i, this$1[i]) === false) {
        // End the loop early
        return this$1;
      }
    }
    // Return `this` to allow chained DOM operations
    return this;
  },
  forEach: function forEach(callback) {
    var this$1 = this;

    // Don't bother continuing without a callback
    if (!callback) { return this; }
    // Iterate over the current collection
    for (var i = 0; i < this.length; i += 1) {
      // If the callback returns false
      if (callback.call(this$1[i], this$1[i], i) === false) {
        // End the loop early
        return this$1;
      }
    }
    // Return `this` to allow chained DOM operations
    return this;
  },
  filter: function filter(callback) {
    var matchedItems = [];
    var dom = this;
    for (var i = 0; i < dom.length; i += 1) {
      if (callback.call(dom[i], i, dom[i])) { matchedItems.push(dom[i]); }
    }
    return new Dom7(matchedItems);
  },
  map: function map(callback) {
    var modifiedItems = [];
    var dom = this;
    for (var i = 0; i < dom.length; i += 1) {
      modifiedItems.push(callback.call(dom[i], i, dom[i]));
    }
    return new Dom7(modifiedItems);
  },
  html: function html(html$1) {
    var this$1 = this;

    if (typeof html$1 === 'undefined') {
      return this[0] ? this[0].innerHTML : undefined;
    }

    for (var i = 0; i < this.length; i += 1) {
      this$1[i].innerHTML = html$1;
    }
    return this;
  },
  text: function text(text$1) {
    var this$1 = this;

    if (typeof text$1 === 'undefined') {
      if (this[0]) {
        return this[0].textContent.trim();
      }
      return null;
    }

    for (var i = 0; i < this.length; i += 1) {
      this$1[i].textContent = text$1;
    }
    return this;
  },
  is: function is(selector) {
    var el = this[0];
    var compareWith;
    var i;
    if (!el || typeof selector === 'undefined') { return false; }
    if (typeof selector === 'string') {
      if (el.matches) { return el.matches(selector); }
      else if (el.webkitMatchesSelector) { return el.webkitMatchesSelector(selector); }
      else if (el.msMatchesSelector) { return el.msMatchesSelector(selector); }

      compareWith = $$1(selector);
      for (i = 0; i < compareWith.length; i += 1) {
        if (compareWith[i] === el) { return true; }
      }
      return false;
    } else if (selector === document) { return el === document; }
    else if (selector === window) { return el === window; }

    if (selector.nodeType || selector instanceof Dom7) {
      compareWith = selector.nodeType ? [selector] : selector;
      for (i = 0; i < compareWith.length; i += 1) {
        if (compareWith[i] === el) { return true; }
      }
      return false;
    }
    return false;
  },
  indexOf: function indexOf(el) {
    var this$1 = this;

    for (var i = 0; i < this.length; i += 1) {
      if (this$1[i] === el) { return i; }
    }
  },
  index: function index() {
    var child = this[0];
    var i;
    if (child) {
      i = 0;
      while ((child = child.previousSibling) !== null) {
        if (child.nodeType === 1) { i += 1; }
      }
      return i;
    }
  },
  eq: function eq(index) {
    if (typeof index === 'undefined') { return this; }
    var length = this.length;
    var returnIndex;
    if (index > length - 1) {
      return new Dom7([]);
    }
    if (index < 0) {
      returnIndex = length + index;
      if (returnIndex < 0) { return new Dom7([]); }
      return new Dom7([this[returnIndex]]);
    }
    return new Dom7([this[index]]);
  },
  append: function append() {
    var this$1 = this;
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var newChild;

    for (var k = 0; k < args.length; k += 1) {
      newChild = args[k];
      for (var i = 0; i < this.length; i += 1) {
        if (typeof newChild === 'string') {
          var tempDiv = document.createElement('div');
          tempDiv.innerHTML = newChild;
          while (tempDiv.firstChild) {
            this$1[i].appendChild(tempDiv.firstChild);
          }
        } else if (newChild instanceof Dom7) {
          for (var j = 0; j < newChild.length; j += 1) {
            this$1[i].appendChild(newChild[j]);
          }
        } else {
          this$1[i].appendChild(newChild);
        }
      }
    }

    return this;
  },
  appendTo: function appendTo(parent) {
    $$1(parent).append(this);
    return this;
  },
  prepend: function prepend(newChild) {
    var this$1 = this;

    var i;
    var j;
    for (i = 0; i < this.length; i += 1) {
      if (typeof newChild === 'string') {
        var tempDiv = document.createElement('div');
        tempDiv.innerHTML = newChild;
        for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {
          this$1[i].insertBefore(tempDiv.childNodes[j], this$1[i].childNodes[0]);
        }
      } else if (newChild instanceof Dom7) {
        for (j = 0; j < newChild.length; j += 1) {
          this$1[i].insertBefore(newChild[j], this$1[i].childNodes[0]);
        }
      } else {
        this$1[i].insertBefore(newChild, this$1[i].childNodes[0]);
      }
    }
    return this;
  },
  prependTo: function prependTo(parent) {
    $$1(parent).prepend(this);
    return this;
  },
  insertBefore: function insertBefore(selector) {
    var this$1 = this;

    var before = $$1(selector);
    for (var i = 0; i < this.length; i += 1) {
      if (before.length === 1) {
        before[0].parentNode.insertBefore(this$1[i], before[0]);
      } else if (before.length > 1) {
        for (var j = 0; j < before.length; j += 1) {
          before[j].parentNode.insertBefore(this$1[i].cloneNode(true), before[j]);
        }
      }
    }
  },
  insertAfter: function insertAfter(selector) {
    var this$1 = this;

    var after = $$1(selector);
    for (var i = 0; i < this.length; i += 1) {
      if (after.length === 1) {
        after[0].parentNode.insertBefore(this$1[i], after[0].nextSibling);
      } else if (after.length > 1) {
        for (var j = 0; j < after.length; j += 1) {
          after[j].parentNode.insertBefore(this$1[i].cloneNode(true), after[j].nextSibling);
        }
      }
    }
  },
  next: function next(selector) {
    if (this.length > 0) {
      if (selector) {
        if (this[0].nextElementSibling && $$1(this[0].nextElementSibling).is(selector)) { return new Dom7([this[0].nextElementSibling]); }
        return new Dom7([]);
      }

      if (this[0].nextElementSibling) { return new Dom7([this[0].nextElementSibling]); }
      return new Dom7([]);
    }
    return new Dom7([]);
  },
  nextAll: function nextAll(selector) {
    var nextEls = [];
    var el = this[0];
    if (!el) { return new Dom7([]); }
    while (el.nextElementSibling) {
      var next = el.nextElementSibling;
      if (selector) {
        if ($$1(next).is(selector)) { nextEls.push(next); }
      } else { nextEls.push(next); }
      el = next;
    }
    return new Dom7(nextEls);
  },
  prev: function prev(selector) {
    if (this.length > 0) {
      var el = this[0];
      if (selector) {
        if (el.previousElementSibling && $$1(el.previousElementSibling).is(selector)) { return new Dom7([el.previousElementSibling]); }
        return new Dom7([]);
      }

      if (el.previousElementSibling) { return new Dom7([el.previousElementSibling]); }
      return new Dom7([]);
    }
    return new Dom7([]);
  },
  prevAll: function prevAll(selector) {
    var prevEls = [];
    var el = this[0];
    if (!el) { return new Dom7([]); }
    while (el.previousElementSibling) {
      var prev = el.previousElementSibling;
      if (selector) {
        if ($$1(prev).is(selector)) { prevEls.push(prev); }
      } else { prevEls.push(prev); }
      el = prev;
    }
    return new Dom7(prevEls);
  },
  siblings: function siblings(selector) {
    return this.nextAll(selector).add(this.prevAll(selector));
  },
  parent: function parent(selector) {
    var this$1 = this;

    var parents = [];
    for (var i = 0; i < this.length; i += 1) {
      if (this$1[i].parentNode !== null) {
        if (selector) {
          if ($$1(this$1[i].parentNode).is(selector)) { parents.push(this$1[i].parentNode); }
        } else {
          parents.push(this$1[i].parentNode);
        }
      }
    }
    return $$1(unique(parents));
  },
  parents: function parents(selector) {
    var this$1 = this;

    var parents = [];
    for (var i = 0; i < this.length; i += 1) {
      var parent = this$1[i].parentNode;
      while (parent) {
        if (selector) {
          if ($$1(parent).is(selector)) { parents.push(parent); }
        } else {
          parents.push(parent);
        }
        parent = parent.parentNode;
      }
    }
    return $$1(unique(parents));
  },
  closest: function closest(selector) {
    var closest = this;
    if (typeof selector === 'undefined') {
      return new Dom7([]);
    }
    if (!closest.is(selector)) {
      closest = closest.parents(selector).eq(0);
    }
    return closest;
  },
  find: function find(selector) {
    var this$1 = this;

    var foundElements = [];
    for (var i = 0; i < this.length; i += 1) {
      var found = this$1[i].querySelectorAll(selector);
      for (var j = 0; j < found.length; j += 1) {
        foundElements.push(found[j]);
      }
    }
    return new Dom7(foundElements);
  },
  children: function children(selector) {
    var this$1 = this;

    var children = [];
    for (var i = 0; i < this.length; i += 1) {
      var childNodes = this$1[i].childNodes;

      for (var j = 0; j < childNodes.length; j += 1) {
        if (!selector) {
          if (childNodes[j].nodeType === 1) { children.push(childNodes[j]); }
        } else if (childNodes[j].nodeType === 1 && $$1(childNodes[j]).is(selector)) { children.push(childNodes[j]); }
      }
    }
    return new Dom7(unique(children));
  },
  remove: function remove() {
    var this$1 = this;

    for (var i = 0; i < this.length; i += 1) {
      if (this$1[i].parentNode) { this$1[i].parentNode.removeChild(this$1[i]); }
    }
    return this;
  },
  detach: function detach() {
    return this.remove();
  },
  add: function add() {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var dom = this;
    var i;
    var j;
    for (i = 0; i < args.length; i += 1) {
      var toAdd = $$1(args[i]);
      for (j = 0; j < toAdd.length; j += 1) {
        dom[dom.length] = toAdd[j];
        dom.length += 1;
      }
    }
    return dom;
  },
  empty: function empty() {
    var this$1 = this;

    for (var i = 0; i < this.length; i += 1) {
      var el = this$1[i];
      if (el.nodeType === 1) {
        for (var j = 0; j < el.childNodes.length; j += 1) {
          if (el.childNodes[j].parentNode) {
            el.childNodes[j].parentNode.removeChild(el.childNodes[j]);
          }
        }
        el.textContent = '';
      }
    }
    return this;
  },
};

// Shortcuts
var shortcuts = ('click blur focus focusin focusout keyup keydown keypress submit change mousedown mousemove mouseup mouseenter mouseleave mouseout mouseover touchstart touchend touchmove resize scroll').split(' ');
var notTrigger = ('resize scroll').split(' ');
function createMethod(name) {
  Methods[name] = function eventShortcut(targetSelector, listener, capture) {
    var this$1 = this;

    if (typeof targetSelector === 'undefined') {
      for (var i = 0; i < this.length; i += 1) {
        if (notTrigger.indexOf(name) < 0) {
          if (name in this$1[i]) { this$1[i][name](); }
          else {
            $$1(this$1[i]).trigger(name);
          }
        }
      }
      return this;
    }
    return this.on(name, targetSelector, listener, capture);
  };
}
for (var i$1 = 0; i$1 < shortcuts.length; i$1 += 1) {
  createMethod(shortcuts[i$1]);
}

var Scroll = {
  scrollTo: function scrollTo() {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var left = args[0];
    var top = args[1];
    var duration = args[2];
    var easing = args[3];
    var callback = args[4];
    if (args.length === 4 && typeof easing === 'function') {
      callback = easing;
      var assign;
      (assign = args, left = assign[0], top = assign[1], duration = assign[2], callback = assign[3], easing = assign[4]);
    }
    if (typeof easing === 'undefined') { easing = 'swing'; }

    return this.each(function animate() {
      var el = this;
      var currentTop;
      var currentLeft;
      var maxTop;
      var maxLeft;
      var newTop;
      var newLeft;
      var scrollTop;
      var scrollLeft;
      var animateTop = top > 0 || top === 0;
      var animateLeft = left > 0 || left === 0;
      if (typeof easing === 'undefined') {
        easing = 'swing';
      }
      if (animateTop) {
        currentTop = el.scrollTop;
        if (!duration) {
          el.scrollTop = top;
        }
      }
      if (animateLeft) {
        currentLeft = el.scrollLeft;
        if (!duration) {
          el.scrollLeft = left;
        }
      }
      if (!duration) { return; }
      if (animateTop) {
        maxTop = el.scrollHeight - el.offsetHeight;
        newTop = Math.max(Math.min(top, maxTop), 0);
      }
      if (animateLeft) {
        maxLeft = el.scrollWidth - el.offsetWidth;
        newLeft = Math.max(Math.min(left, maxLeft), 0);
      }
      var startTime = null;
      if (animateTop && newTop === currentTop) { animateTop = false; }
      if (animateLeft && newLeft === currentLeft) { animateLeft = false; }
      function render(time) {
        if ( time === void 0 ) time = new Date().getTime();

        if (startTime === null) {
          startTime = time;
        }
        var progress = Math.max(Math.min((time - startTime) / duration, 1), 0);
        var easeProgress = easing === 'linear' ? progress : (0.5 - (Math.cos(progress * Math.PI) / 2));
        var done;
        if (animateTop) { scrollTop = currentTop + (easeProgress * (newTop - currentTop)); }
        if (animateLeft) { scrollLeft = currentLeft + (easeProgress * (newLeft - currentLeft)); }
        if (animateTop && newTop > currentTop && scrollTop >= newTop) {
          el.scrollTop = newTop;
          done = true;
        }
        if (animateTop && newTop < currentTop && scrollTop <= newTop) {
          el.scrollTop = newTop;
          done = true;
        }
        if (animateLeft && newLeft > currentLeft && scrollLeft >= newLeft) {
          el.scrollLeft = newLeft;
          done = true;
        }
        if (animateLeft && newLeft < currentLeft && scrollLeft <= newLeft) {
          el.scrollLeft = newLeft;
          done = true;
        }

        if (done) {
          if (callback) { callback(); }
          return;
        }
        if (animateTop) { el.scrollTop = scrollTop; }
        if (animateLeft) { el.scrollLeft = scrollLeft; }
        requestAnimationFrame(render);
      }
      requestAnimationFrame(render);
    });
  },
  // scrollTop(top, duration, easing, callback) {
  scrollTop: function scrollTop() {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var top = args[0];
    var duration = args[1];
    var easing = args[2];
    var callback = args[3];
    if (args.length === 3 && typeof easing === 'function') {
      var assign;
      (assign = args, top = assign[0], duration = assign[1], callback = assign[2], easing = assign[3]);
    }
    var dom = this;
    if (typeof top === 'undefined') {
      if (dom.length > 0) { return dom[0].scrollTop; }
      return null;
    }
    return dom.scrollTo(undefined, top, duration, easing, callback);
  },
  scrollLeft: function scrollLeft() {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var left = args[0];
    var duration = args[1];
    var easing = args[2];
    var callback = args[3];
    if (args.length === 3 && typeof easing === 'function') {
      var assign;
      (assign = args, left = assign[0], duration = assign[1], callback = assign[2], easing = assign[3]);
    }
    var dom = this;
    if (typeof left === 'undefined') {
      if (dom.length > 0) { return dom[0].scrollLeft; }
      return null;
    }
    return dom.scrollTo(left, undefined, duration, easing, callback);
  },
};

function animate(initialProps, initialParams) {
  var els = this;
  var a = {
    props: $$1.extend({}, initialProps),
    params: $$1.extend({
      duration: 300,
      easing: 'swing', // or 'linear'
      /* Callbacks
      begin(elements)
      complete(elements)
      progress(elements, complete, remaining, start, tweenValue)
      */
    }, initialParams),

    elements: els,
    animating: false,
    que: [],

    easingProgress: function easingProgress(easing, progress) {
      if (easing === 'swing') {
        return 0.5 - (Math.cos(progress * Math.PI) / 2);
      }
      if (typeof easing === 'function') {
        return easing(progress);
      }
      return progress;
    },
    stop: function stop() {
      if (a.frameId) {
        cancelAnimationFrame(a.frameId);
      }
      a.animating = false;
      a.elements.each(function (index, el) {
        var element = el;
        delete element.dom7AnimateInstance;
      });
      a.que = [];
    },
    done: function done(complete) {
      a.animating = false;
      a.elements.each(function (index, el) {
        var element = el;
        delete element.dom7AnimateInstance;
      });
      if (complete) { complete(els); }
      if (a.que.length > 0) {
        var que = a.que.shift();
        a.animate(que[0], que[1]);
      }
    },
    animate: function animate(props, params) {
      if (a.animating) {
        a.que.push([props, params]);
        return a;
      }
      var elements = [];

      // Define & Cache Initials & Units
      a.elements.each(function (index, el) {
        var initialFullValue;
        var initialValue;
        var unit;
        var finalValue;
        var finalFullValue;

        if (!el.dom7AnimateInstance) { a.elements[index].dom7AnimateInstance = a; }

        elements[index] = {
          container: el,
        };
        Object.keys(props).forEach(function (prop) {
          initialFullValue = window.getComputedStyle(el, null).getPropertyValue(prop).replace(',', '.');
          initialValue = parseFloat(initialFullValue);
          unit = initialFullValue.replace(initialValue, '');
          finalValue = parseFloat(props[prop]);
          finalFullValue = props[prop] + unit;
          elements[index][prop] = {
            initialFullValue: initialFullValue,
            initialValue: initialValue,
            unit: unit,
            finalValue: finalValue,
            finalFullValue: finalFullValue,
            currentValue: initialValue,
          };
        });
      });

      var startTime = null;
      var time;
      var elementsDone = 0;
      var propsDone = 0;
      var done;
      var began = false;

      a.animating = true;

      function render() {
        time = new Date().getTime();
        var progress;
        var easeProgress;
        // let el;
        if (!began) {
          began = true;
          if (params.begin) { params.begin(els); }
        }
        if (startTime === null) {
          startTime = time;
        }
        if (params.progress) {
          params.progress(els, Math.max(Math.min((time - startTime) / params.duration, 1), 0), ((startTime + params.duration) - time < 0 ? 0 : (startTime + params.duration) - time), startTime);
        }

        elements.forEach(function (element) {
          var el = element;
          if (done || el.done) { return; }
          Object.keys(props).forEach(function (prop) {
            if (done || el.done) { return; }
            progress = Math.max(Math.min((time - startTime) / params.duration, 1), 0);
            easeProgress = a.easingProgress(params.easing, progress);
            var ref = el[prop];
            var initialValue = ref.initialValue;
            var finalValue = ref.finalValue;
            var unit = ref.unit;
            el[prop].currentValue = initialValue + (easeProgress * (finalValue - initialValue));
            var currentValue = el[prop].currentValue;

            if (
              (finalValue > initialValue && currentValue >= finalValue) ||
              (finalValue < initialValue && currentValue <= finalValue)) {
              el.container.style[prop] = finalValue + unit;
              propsDone += 1;
              if (propsDone === Object.keys(props).length) {
                el.done = true;
                elementsDone += 1;
              }
              if (elementsDone === elements.length) {
                done = true;
              }
            }
            if (done) {
              a.done(params.complete);
              return;
            }
            el.container.style[prop] = currentValue + unit;
          });
        });
        if (done) { return; }
        // Then call
        a.frameId = requestAnimationFrame(render);
      }
      a.frameId = requestAnimationFrame(render);
      return a;
    },
  };

  if (a.elements.length === 0) {
    return els;
  }

  var animateInstance;
  for (var i = 0; i < a.elements.length; i += 1) {
    if (a.elements[i].dom7AnimateInstance) {
      animateInstance = a.elements[i].dom7AnimateInstance;
    } else { a.elements[i].dom7AnimateInstance = a; }
  }
  if (!animateInstance) {
    animateInstance = a;
  }

  if (initialProps === 'stop') {
    animateInstance.stop();
  } else {
    animateInstance.animate(a.props, a.params);
  }

  return els;
}

function stop() {
  var els = this;
  for (var i = 0; i < els.length; i += 1) {
    if (els[i].dom7AnimateInstance) {
      els[i].dom7AnimateInstance.stop();
    }
  }
}

var Animate = {
  animate: animate,
  stop: stop,
};

// Global Ajax Setup
var globalAjaxOptions = {};
function ajaxSetup(options) {
  if (options.type && !options.method) { options.method = options.type; }
  each(options, function (optionName, optionValue) {
    globalAjaxOptions[optionName] = optionValue;
  });
}

// JSONP Requests
var jsonpRequests = 0;

// Ajax
function ajax(options) {
  var defaults = {
    method: 'GET',
    data: false,
    async: true,
    cache: true,
    user: '',
    password: '',
    headers: {},
    xhrFields: {},
    statusCode: {},
    processData: true,
    dataType: 'text',
    contentType: 'application/x-www-form-urlencoded',
    timeout: 0,
  };
  var callbacks = ['beforeSend', 'error', 'complete', 'success', 'statusCode'];

  // For jQuery guys
  if (options.type) { options.method = options.type; }

  // Global options
  var globals = globalAjaxOptions;

  // Merge global and defaults
  each(globals, function (globalOptionName, globalOptionValue) {
    if (callbacks.indexOf(globalOptionName) < 0) { defaults[globalOptionName] = globalOptionValue; }
  });

  // Function to run XHR callbacks and events
  function fireAjaxCallback(eventName, eventData, callbackName) {
    var a = arguments;
    if (eventName) { $$1(document).trigger(eventName, eventData); }
    if (callbackName) {
      // Global callback
      if (callbackName in globals) { globals[callbackName](a[3], a[4], a[5], a[6]); }
      // Options callback
      if (options[callbackName]) { options[callbackName](a[3], a[4], a[5], a[6]); }
    }
  }

  // Merge options and defaults
  each(defaults, function (prop, defaultValue) {
    if (!(prop in options)) { options[prop] = defaultValue; }
  });

  // Default URL
  if (!options.url) {
    options.url = window.location.toString();
  }
  // Parameters Prefix
  var paramsPrefix = options.url.indexOf('?') >= 0 ? '&' : '?';

  // UC method
  var method = options.method.toUpperCase();

  // Data to modify GET URL
  if ((method === 'GET' || method === 'HEAD' || method === 'OPTIONS' || method === 'DELETE') && options.data) {
    var stringData;
    if (typeof options.data === 'string') {
      // Should be key=value string
      if (options.data.indexOf('?') >= 0) { stringData = options.data.split('?')[1]; }
      else { stringData = options.data; }
    } else {
      // Should be key=value object
      stringData = serializeObject(options.data);
    }
    if (stringData.length) {
      options.url += paramsPrefix + stringData;
      if (paramsPrefix === '?') { paramsPrefix = '&'; }
    }
  }
  // JSONP
  if (options.dataType === 'json' && options.url.indexOf('callback=') >= 0) {
    var callbackName = "f7jsonp_" + (Date.now() + ((jsonpRequests += 1)));
    var abortTimeout;
    var callbackSplit = options.url.split('callback=');
    var requestUrl = (callbackSplit[0]) + "callback=" + callbackName;
    if (callbackSplit[1].indexOf('&') >= 0) {
      var addVars = callbackSplit[1].split('&').filter(function (el) { return el.indexOf('=') > 0; }).join('&');
      if (addVars.length > 0) { requestUrl += "&" + addVars; }
    }

    // Create script
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.onerror = function onerror() {
      clearTimeout(abortTimeout);
      fireAjaxCallback(undefined, undefined, 'error', null, 'scripterror');
      fireAjaxCallback('ajaxComplete ajax:complete', { scripterror: true }, 'complete', null, 'scripterror');
    };
    script.src = requestUrl;

    // Handler
    window[callbackName] = function jsonpCallback(data) {
      clearTimeout(abortTimeout);
      fireAjaxCallback(undefined, undefined, 'success', data);
      script.parentNode.removeChild(script);
      script = null;
      delete window[callbackName];
    };
    document.querySelector('head').appendChild(script);

    if (options.timeout > 0) {
      abortTimeout = setTimeout(function () {
        script.parentNode.removeChild(script);
        script = null;
        fireAjaxCallback(undefined, undefined, 'error', null, 'timeout');
      }, options.timeout);
    }

    return;
  }

  // Cache for GET/HEAD requests
  if (method === 'GET' || method === 'HEAD' || method === 'OPTIONS' || method === 'DELETE') {
    if (options.cache === false) {
      options.url += paramsPrefix + "_nocache" + (Date.now());
    }
  }

  // Create XHR
  var xhr = new XMLHttpRequest();

  // Save Request URL
  xhr.requestUrl = options.url;
  xhr.requestParameters = options;

  // Open XHR
  xhr.open(method, options.url, options.async, options.user, options.password);

  // Create POST Data
  var postData = null;

  if ((method === 'POST' || method === 'PUT' || method === 'PATCH') && options.data) {
    if (options.processData) {
      var postDataInstances = [ArrayBuffer, Blob, Document, FormData];
      // Post Data
      if (postDataInstances.indexOf(options.data.constructor) >= 0) {
        postData = options.data;
      } else {
        // POST Headers
        var boundary = "---------------------------" + (Date.now().toString(16));

        if (options.contentType === 'multipart/form-data') {
          xhr.setRequestHeader('Content-Type', ("multipart/form-data; boundary=" + boundary));
        } else {
          xhr.setRequestHeader('Content-Type', options.contentType);
        }
        postData = '';
        var data = serializeObject(options.data);
        if (options.contentType === 'multipart/form-data') {
          data = data.split('&');
          var newData = [];
          for (var i = 0; i < data.length; i += 1) {
            newData.push(("Content-Disposition: form-data; name=\"" + (data[i].split('=')[0]) + "\"\r\n\r\n" + (data[i].split('=')[1]) + "\r\n"));
          }
          postData = "--" + boundary + "\r\n" + (newData.join(("--" + boundary + "\r\n"))) + "--" + boundary + "--\r\n";
        } else {
          postData = data;
        }
      }
    } else {
      postData = options.data;
    }
  }

  // Additional headers
  if (options.headers) {
    each(options.headers, function (headerName, headerCallback) {
      xhr.setRequestHeader(headerName, headerCallback);
    });
  }

  // Check for crossDomain
  if (typeof options.crossDomain === 'undefined') {
    options.crossDomain = /^([\w-]+:)?\/\/([^\/]+)/.test(options.url) && RegExp.$2 !== window.location.host;
  }

  if (!options.crossDomain) {
    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
  }

  if (options.xhrFields) {
    each(options.xhrFields, function (fieldName, fieldValue) {
      xhr[fieldName] = fieldValue;
    });
  }

  var xhrTimeout;
  // Handle XHR
  xhr.onload = function onload() {
    if (xhrTimeout) { clearTimeout(xhrTimeout); }
    if ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 0) {
      var responseData;
      if (options.dataType === 'json') {
        try {
          responseData = JSON.parse(xhr.responseText);
          fireAjaxCallback('ajaxSuccess ajax:success', { xhr: xhr }, 'success', responseData, xhr.status, xhr);
        } catch (err) {
          fireAjaxCallback('ajaxError ajax:error', { xhr: xhr, parseerror: true }, 'error', xhr, 'parseerror');
        }
      } else {
        responseData = xhr.responseType === 'text' || xhr.responseType === '' ? xhr.responseText : xhr.response;
        fireAjaxCallback('ajaxSuccess ajax:success', { xhr: xhr }, 'success', responseData, xhr.status, xhr);
      }
    } else {
      fireAjaxCallback('ajaxError ajax:error', { xhr: xhr }, 'error', xhr, xhr.status);
    }
    if (options.statusCode) {
      if (globals.statusCode && globals.statusCode[xhr.status]) { globals.statusCode[xhr.status](xhr); }
      if (options.statusCode[xhr.status]) { options.statusCode[xhr.status](xhr); }
    }
    fireAjaxCallback('ajaxComplete ajax:complete', { xhr: xhr }, 'complete', xhr, xhr.status);
  };

  xhr.onerror = function onerror() {
    if (xhrTimeout) { clearTimeout(xhrTimeout); }
    fireAjaxCallback('ajaxError ajax:error', { xhr: xhr }, 'error', xhr, xhr.status);
    fireAjaxCallback('ajaxComplete ajax:complete', { xhr: xhr, error: true }, 'complete', xhr, 'error');
  };

  // Ajax start callback
  fireAjaxCallback('ajaxStart ajax:start', { xhr: xhr }, 'start', xhr);
  fireAjaxCallback(undefined, undefined, 'beforeSend', xhr);

  // Timeout
  if (options.timeout > 0) {
    xhr.onabort = function onabort() {
      if (xhrTimeout) { clearTimeout(xhrTimeout); }
    };
    xhrTimeout = setTimeout(function () {
      xhr.abort();
      fireAjaxCallback('ajaxError ajax:error', { xhr: xhr, timeout: true }, 'error', xhr, 'timeout');
      fireAjaxCallback('ajaxComplete ajax:complete', { xhr: xhr, timeout: true }, 'complete', xhr, 'timeout');
    }, options.timeout);
  }

  // Send XHR
  xhr.send(postData);

  // Return XHR object
  return xhr;
}

function ajaxShortcut(method) {
  var args = [], len = arguments.length - 1;
  while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

  var url;
  var data;
  var success;
  var error;
  var dataType;
  if (typeof args[1] === 'function') {
    var assign;
    (assign = args, url = assign[0], success = assign[1], error = assign[2], dataType = assign[3]);
  } else {
    var assign$1;
    (assign$1 = args, url = assign$1[0], data = assign$1[1], success = assign$1[2], error = assign$1[3], dataType = assign$1[4]);
  }
  [success, error].forEach(function (callback) {
    if (typeof callback === 'string') {
      dataType = callback;
      if (callback === success) { success = undefined; }
      else { error = undefined; }
    }
  });
  dataType = dataType || (method === 'getJSON' ? 'json' : undefined);
  return ajax({
    url: url,
    method: method === 'post' ? 'POST' : 'GET',
    data: data,
    success: success,
    error: error,
    dataType: dataType,
  });
}

function get() {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  args.unshift('get');
  return ajaxShortcut.apply(this, args);
}
function post() {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  args.unshift('post');
  return ajaxShortcut.apply(this, args);
}
function getJSON() {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  args.unshift('getJSON');
  return ajaxShortcut.apply(this, args);
}

var Ajax = {
  __utils: true,
  ajaxSetup: ajaxSetup,
  ajax: ajax,
  get: get,
  post: post,
  getJSON: getJSON,
};

// Utils & Helpers
$$1.use(Utils$1, Methods, Scroll, Animate, Ajax);

/**
 * Framework7 2.0.0-beta.3
 * Full featured mobile HTML framework for building iOS & Android apps
 * http://framework7.io/
 *
 * Copyright 2014-2017 Vladimir Kharlampidi
 *
 * Released under the MIT License
 *
 * Released on: September 7, 2017
 */

/**
 * https://github.com/gre/bezier-easing
 * BezierEasing - use bezier curve for transition easing function
 * by Gaëtan Renaudeau 2014 - 2015 – MIT License
 */

// These values are established by empiricism with tests (tradeoff: performance VS precision)
var NEWTON_ITERATIONS = 4;
var NEWTON_MIN_SLOPE = 0.001;
var SUBDIVISION_PRECISION = 0.0000001;
var SUBDIVISION_MAX_ITERATIONS = 10;

var kSplineTableSize = 11;
var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);

var float32ArraySupported = typeof Float32Array === 'function';

function A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }
function B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }
function C (aA1)      { return 3.0 * aA1; }

// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
function calcBezier (aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT; }

// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
function getSlope (aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1); }

function binarySubdivide (aX, aA, aB, mX1, mX2) {
  var currentX, currentT, i = 0;
  do {
    currentT = aA + (aB - aA) / 2.0;
    currentX = calcBezier(currentT, mX1, mX2) - aX;
    if (currentX > 0.0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
  return currentT;
}

function newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {
 for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
   var currentSlope = getSlope(aGuessT, mX1, mX2);
   if (currentSlope === 0.0) {
     return aGuessT;
   }
   var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
   aGuessT -= currentX / currentSlope;
 }
 return aGuessT;
}

function bezier (mX1, mY1, mX2, mY2) {
  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
    throw new Error('bezier x values must be in [0, 1] range');
  }

  // Precompute samples table
  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
  if (mX1 !== mY1 || mX2 !== mY2) {
    for (var i = 0; i < kSplineTableSize; ++i) {
      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
    }
  }

  function getTForX (aX) {
    var intervalStart = 0.0;
    var currentSample = 1;
    var lastSample = kSplineTableSize - 1;

    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }
    --currentSample;

    // Interpolate to provide an initial guess for t
    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    var guessForT = intervalStart + dist * kSampleStepSize;

    var initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= NEWTON_MIN_SLOPE) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    } else if (initialSlope === 0.0) {
      return guessForT;
    } else {
      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
    }
  }

  return function BezierEasing (x) {
    if (mX1 === mY1 && mX2 === mY2) {
      return x; // linear
    }
    // Because JavaScript number are imprecise, we should guarantee the extremes are right.
    if (x === 0) {
      return 0;
    }
    if (x === 1) {
      return 1;
    }
    return calcBezier(getTForX(x), mY1, mY2);
  };
}

// Remove Diacritics
var defaultDiacriticsRemovalap = [
  { base: 'A', letters: '\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F' },
  { base: 'AA', letters: '\uA732' },
  { base: 'AE', letters: '\u00C6\u01FC\u01E2' },
  { base: 'AO', letters: '\uA734' },
  { base: 'AU', letters: '\uA736' },
  { base: 'AV', letters: '\uA738\uA73A' },
  { base: 'AY', letters: '\uA73C' },
  { base: 'B', letters: '\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181' },
  { base: 'C', letters: '\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E' },
  { base: 'D', letters: '\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779' },
  { base: 'DZ', letters: '\u01F1\u01C4' },
  { base: 'Dz', letters: '\u01F2\u01C5' },
  { base: 'E', letters: '\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E' },
  { base: 'F', letters: '\u0046\u24BB\uFF26\u1E1E\u0191\uA77B' },
  { base: 'G', letters: '\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E' },
  { base: 'H', letters: '\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D' },
  { base: 'I', letters: '\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197' },
  { base: 'J', letters: '\u004A\u24BF\uFF2A\u0134\u0248' },
  { base: 'K', letters: '\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2' },
  { base: 'L', letters: '\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780' },
  { base: 'LJ', letters: '\u01C7' },
  { base: 'Lj', letters: '\u01C8' },
  { base: 'M', letters: '\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C' },
  { base: 'N', letters: '\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4' },
  { base: 'NJ', letters: '\u01CA' },
  { base: 'Nj', letters: '\u01CB' },
  { base: 'O', letters: '\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C' },
  { base: 'OI', letters: '\u01A2' },
  { base: 'OO', letters: '\uA74E' },
  { base: 'OU', letters: '\u0222' },
  { base: 'OE', letters: '\u008C\u0152' },
  { base: 'oe', letters: '\u009C\u0153' },
  { base: 'P', letters: '\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754' },
  { base: 'Q', letters: '\u0051\u24C6\uFF31\uA756\uA758\u024A' },
  { base: 'R', letters: '\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782' },
  { base: 'S', letters: '\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784' },
  { base: 'T', letters: '\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786' },
  { base: 'TZ', letters: '\uA728' },
  { base: 'U', letters: '\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244' },
  { base: 'V', letters: '\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245' },
  { base: 'VY', letters: '\uA760' },
  { base: 'W', letters: '\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72' },
  { base: 'X', letters: '\u0058\u24CD\uFF38\u1E8A\u1E8C' },
  { base: 'Y', letters: '\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE' },
  { base: 'Z', letters: '\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762' },
  { base: 'a', letters: '\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250' },
  { base: 'aa', letters: '\uA733' },
  { base: 'ae', letters: '\u00E6\u01FD\u01E3' },
  { base: 'ao', letters: '\uA735' },
  { base: 'au', letters: '\uA737' },
  { base: 'av', letters: '\uA739\uA73B' },
  { base: 'ay', letters: '\uA73D' },
  { base: 'b', letters: '\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253' },
  { base: 'c', letters: '\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184' },
  { base: 'd', letters: '\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A' },
  { base: 'dz', letters: '\u01F3\u01C6' },
  { base: 'e', letters: '\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD' },
  { base: 'f', letters: '\u0066\u24D5\uFF46\u1E1F\u0192\uA77C' },
  { base: 'g', letters: '\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F' },
  { base: 'h', letters: '\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265' },
  { base: 'hv', letters: '\u0195' },
  { base: 'i', letters: '\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131' },
  { base: 'j', letters: '\u006A\u24D9\uFF4A\u0135\u01F0\u0249' },
  { base: 'k', letters: '\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3' },
  { base: 'l', letters: '\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747' },
  { base: 'lj', letters: '\u01C9' },
  { base: 'm', letters: '\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F' },
  { base: 'n', letters: '\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5' },
  { base: 'nj', letters: '\u01CC' },
  { base: 'o', letters: '\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275' },
  { base: 'oi', letters: '\u01A3' },
  { base: 'ou', letters: '\u0223' },
  { base: 'oo', letters: '\uA74F' },
  { base: 'p', letters: '\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755' },
  { base: 'q', letters: '\u0071\u24E0\uFF51\u024B\uA757\uA759' },
  { base: 'r', letters: '\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783' },
  { base: 's', letters: '\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B' },
  { base: 't', letters: '\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787' },
  { base: 'tz', letters: '\uA729' },
  { base: 'u', letters: '\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289' },
  { base: 'v', letters: '\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C' },
  { base: 'vy', letters: '\uA761' },
  { base: 'w', letters: '\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73' },
  { base: 'x', letters: '\u0078\u24E7\uFF58\u1E8B\u1E8D' },
  { base: 'y', letters: '\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF' },
  { base: 'z', letters: '\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763' } ];

var diacriticsMap = {};
for (var i = 0; i < defaultDiacriticsRemovalap.length; i += 1) {
  var letters = defaultDiacriticsRemovalap[i].letters;
  for (var j = 0; j < letters.length; j += 1) {
    diacriticsMap[letters[j]] = defaultDiacriticsRemovalap[i].base;
  }
}

var Utils = {
  deleteProps: function deleteProps(obj) {
    var object = obj;
    Object.keys(object).forEach(function (key) {
      try {
        object[key] = null;
      } catch (e) {
        // no getter for object
      }
      try {
        delete object[key];
      } catch (e) {
        // something got wrong
      }
    });
  },
  bezier: function bezier$1() {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    return bezier.apply(void 0, args);
  },
  nextTick: function nextTick(callback, delay) {
    if ( delay === void 0 ) delay = 0;

    return setTimeout(callback, delay);
  },
  nextFrame: function nextFrame(callback) {
    return Utils.requestAnimationFrame(callback);
  },
  now: function now() {
    return Date.now();
  },
  promise: function promise(handler) {
    var resolved = false;
    var rejected = false;
    var resolveArgs;
    var rejectArgs;
    var promiseHandlers = {
      then: undefined,
      catch: undefined,
    };
    var promise = {
      then: function then(thenHandler) {
        if (resolved) {
          thenHandler.apply(void 0, resolveArgs);
        } else {
          promiseHandlers.then = thenHandler;
        }
        return promise;
      },
      catch: function catch$1(catchHandler) {
        if (rejected) {
          catchHandler.apply(void 0, rejectArgs);
        } else {
          promiseHandlers.catch = catchHandler;
        }
        return promise;
      },
    };

    function resolve() {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      resolved = true;
      if (promiseHandlers.then) { promiseHandlers.then.apply(promiseHandlers, args); }
      else { resolveArgs = args; }
    }
    function reject() {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      rejected = true;
      if (promiseHandlers.catch) { promiseHandlers.catch.apply(promiseHandlers, args); }
      else { rejectArgs = args; }
    }
    handler(resolve, reject);

    return promise;
  },
  requestAnimationFrame: function requestAnimationFrame(callback) {
    if (window.requestAnimationFrame) { return window.requestAnimationFrame(callback); }
    else if (window.webkitRequestAnimationFrame) { return window.webkitRequestAnimationFrame(callback); }
    return window.setTimeout(callback, 1000 / 60);
  },
  cancelAnimationFrame: function cancelAnimationFrame(id) {
    if (window.cancelAnimationFrame) { return window.cancelAnimationFrame(id); }
    else if (window.webkitCancelAnimationFrame) { return window.webkitCancelAnimationFrame(id); }
    return window.clearTimeout(id);
  },
  removeDiacritics: function removeDiacritics(str) {
    return str.replace(/[^\u0000-\u007E]/g, function (a) { return diacriticsMap[a] || a; });
  },
  parseUrlQuery: function parseUrlQuery(url) {
    var query = {};
    var urlToParse = url || window.location.href;
    var i;
    var params;
    var param;
    var length;
    if (typeof urlToParse === 'string' && urlToParse.length) {
      urlToParse = urlToParse.indexOf('?') > -1 ? urlToParse.replace(/\S*\?/, '') : '';
      params = urlToParse.split('&').filter(function (paramsPart) { return paramsPart !== ''; });
      length = params.length;

      for (i = 0; i < length; i += 1) {
        param = params[i].replace(/#\S+/g, '').split('=');
        query[decodeURIComponent(param[0])] = typeof param[1] === 'undefined' ? undefined : decodeURIComponent(param[1]) || '';
      }
    }
    return query;
  },
  getTranslate: function getTranslate(el, axis) {
    if ( axis === void 0 ) axis = 'x';

    var matrix;
    var curTransform;
    var transformMatrix;

    var curStyle = window.getComputedStyle(el, null);

    if (window.WebKitCSSMatrix) {
      curTransform = curStyle.transform || curStyle.webkitTransform;
      if (curTransform.split(',').length > 6) {
        curTransform = curTransform.split(', ').map(function (a) { return a.replace(',', '.'); }).join(', ');
      }
      // Some old versions of Webkit choke when 'none' is passed; pass
      // empty string instead in this case
      transformMatrix = new window.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);
    } else {
      transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');
      matrix = transformMatrix.toString().split(',');
    }

    if (axis === 'x') {
      // Latest Chrome and webkits Fix
      if (window.WebKitCSSMatrix) { curTransform = transformMatrix.m41; }
      // Crazy IE10 Matrix
      else if (matrix.length === 16) { curTransform = parseFloat(matrix[12]); }
      // Normal Browsers
      else { curTransform = parseFloat(matrix[4]); }
    }
    if (axis === 'y') {
      // Latest Chrome and webkits Fix
      if (window.WebKitCSSMatrix) { curTransform = transformMatrix.m42; }
      // Crazy IE10 Matrix
      else if (matrix.length === 16) { curTransform = parseFloat(matrix[13]); }
      // Normal Browsers
      else { curTransform = parseFloat(matrix[5]); }
    }
    return curTransform || 0;
  },
  isObject: function isObject(o) {
    return typeof o === 'object' && o !== null && o.constructor && o.constructor === Object;
  },
  extend: function extend() {
    var args = [], len$1 = arguments.length;
    while ( len$1-- ) args[ len$1 ] = arguments[ len$1 ];

    var deep = true;
    var to;
    var from;
    if (typeof args[0] === 'boolean') {
      deep = args[0];
      to = args[1];
      args.splice(0, 2);
      from = args;
    } else {
      to = args[0];
      args.splice(0, 1);
      from = args;
    }
    for (var i = 0; i < from.length; i += 1) {
      var nextSource = args[i];
      if (nextSource !== undefined && nextSource !== null) {
        var keysArray = Object.keys(Object(nextSource));
        for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
          var nextKey = keysArray[nextIndex];
          var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
          if (desc !== undefined && desc.enumerable) {
            if (!deep) {
              to[nextKey] = nextSource[nextKey];
            } else if (Utils.isObject(to[nextKey]) && Utils.isObject(nextSource[nextKey])) {
              Utils.extend(to[nextKey], nextSource[nextKey]);
            } else if (!Utils.isObject(to[nextKey]) && Utils.isObject(nextSource[nextKey])) {
              to[nextKey] = {};
              Utils.extend(to[nextKey], nextSource[nextKey]);
            } else {
              to[nextKey] = nextSource[nextKey];
            }
          }
        }
      }
    }
    return to;
  },
};

function Device() {
  var ua = window.navigator.userAgent;

  var device = {
    ios: false,
    android: false,
    androidChrome: false,
    desktop: false,
    windows: false,
    iphone: false,
    ipod: false,
    ipad: false,
    cordova: window.cordova || window.phonegap,
    phonegap: window.cordova || window.phonegap,
  };

  var windows = ua.match(/(Windows Phone);?[\s\/]+([\d.]+)?/);
  var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/);
  var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
  var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
  var iphone = !ipad && ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/);


  // Windows
  if (windows) {
    device.os = 'windows';
    device.osVersion = windows[2];
    device.windows = true;
  }
  // Android
  if (android && !windows) {
    device.os = 'android';
    device.osVersion = android[2];
    device.android = true;
    device.androidChrome = ua.toLowerCase().indexOf('chrome') >= 0;
  }
  if (ipad || iphone || ipod) {
    device.os = 'ios';
    device.ios = true;
  }
  // iOS
  if (iphone && !ipod) {
    device.osVersion = iphone[2].replace(/_/g, '.');
    device.iphone = true;
  }
  if (ipad) {
    device.osVersion = ipad[2].replace(/_/g, '.');
    device.ipad = true;
  }
  if (ipod) {
    device.osVersion = ipod[3] ? ipod[3].replace(/_/g, '.') : null;
    device.iphone = true;
  }
  // iOS 8+ changed UA
  if (device.ios && device.osVersion && ua.indexOf('Version/') >= 0) {
    if (device.osVersion.split('.')[0] === '10') {
      device.osVersion = ua.toLowerCase().split('version/')[1].split(' ')[0];
    }
  }

  // Desktop
  device.desktop = !(device.os || device.android || device.webView);

  // Webview
  device.webView = (iphone || ipad || ipod) && ua.match(/.*AppleWebKit(?!.*Safari)/i);

  // Minimal UI
  if (device.os && device.os === 'ios') {
    var osVersionArr = device.osVersion.split('.');
    var metaViewport = document.querySelector('meta[name="viewport"]');
    device.minimalUi =
      !device.webView &&
      (ipod || iphone) &&
      (osVersionArr[0] * 1 === 7 ? osVersionArr[1] * 1 >= 1 : osVersionArr[0] * 1 > 7) &&
      metaViewport && metaViewport.getAttribute('content').indexOf('minimal-ui') >= 0;
  }

  // Check for status bar and fullscreen app mode
  device.needsStatusbar = function needsStatusbar() {
    if (device.webView && (window.innerWidth * window.innerHeight === window.screen.width * window.screen.height)) {
      return true;
    }
    return false;
  };
  device.statusbar = device.needsStatusbar();

  // Pixel Ratio
  device.pixelRatio = window.devicePixelRatio || 1;

  // Export object
  return device;
}

var Device$1 = Device();

var Framework7Class = function Framework7Class(params, parents) {
  if ( params === void 0 ) params = {};
  if ( parents === void 0 ) parents = [];

  var self = this;
  self.params = params;

  // Events
  self.eventsParents = parents;
  self.eventsListeners = {};

  if (self.params && self.params.on) {
    Object.keys(self.params.on).forEach(function (eventName) {
      self.on(eventName, self.params.on[eventName]);
    });
  }
};
Framework7Class.prototype.on = function on (events, handler) {
  var self = this;
  if (typeof handler !== 'function') { return self; }
  events.split(' ').forEach(function (event) {
    if (!self.eventsListeners[event]) { self.eventsListeners[event] = []; }
    self.eventsListeners[event].push(handler);
  });
  return self;
};
Framework7Class.prototype.once = function once (events, handler) {
  var self = this;
  if (typeof handler !== 'function') { return self; }
  function onceHandler() {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

    handler.apply(self, args);
    self.off(events, onceHandler);
  }
  return self.on(events, onceHandler);
};
Framework7Class.prototype.off = function off (events, handler) {
  var self = this;
  events.split(' ').forEach(function (event) {
    if (typeof handler === 'undefined') {
      self.eventsListeners[event] = [];
    } else {
      self.eventsListeners[event].forEach(function (eventHandler, index) {
        if (eventHandler === handler) {
          self.eventsListeners[event].splice(index, 1);
        }
      });
    }
  });
  return self;
};
Framework7Class.prototype.emit = function emit () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

  var self = this;
  var events;
  var data;
  var context;
  var eventsParents;
  if (typeof args[0] === 'string' || Array.isArray(args[0])) {
    events = args[0];
    data = args.slice(1, args.length);
    context = self;
    eventsParents = self.eventsParents;
  } else {
    events = args[0].events;
    data = args[0].data;
    context = args[0].context || self;
    eventsParents = args[0].local ? [] : args[0].parents || self.eventsParents;
  }
  var eventsArray = Array.isArray(events) ? events : events.split(' ');
  var localEvents = eventsArray.map(function (eventName) { return eventName.replace('local::', ''); });
  var parentEvents = eventsArray.filter(function (eventName) { return eventName.indexOf('local::') < 0; });
  localEvents.forEach(function (event) {
    if (self.eventsListeners[event]) {
      self.eventsListeners[event].forEach(function (eventHandler) {
        eventHandler.apply(context, data);
      });
    }
  });
  if (eventsParents && eventsParents.length > 0) {
    eventsParents.forEach(function (eventsParent) {
      eventsParent.emit.apply(eventsParent, [ parentEvents ].concat( data ));
    });
  }
  return self;
};
Framework7Class.prototype.useInstanceModulesParams = function useInstanceModulesParams (instanceParams) {
  var instance = this;
  if (!instance.modules) { return; }
  Object.keys(instance.modules).forEach(function (moduleName) {
    var module = instance.modules[moduleName];
    // Extend params
    if (module.params) {
      Utils.extend(instanceParams, module.params);
    }
  });
};
Framework7Class.prototype.useInstanceModules = function useInstanceModules (modulesParams) {
    if ( modulesParams === void 0 ) modulesParams = {};

  var instance = this;
  if (!instance.modules) { return; }
  Object.keys(instance.modules).forEach(function (moduleName) {
    var module = instance.modules[moduleName];
    var moduleParams = modulesParams[moduleName] || {};
    // Extend instance methods and props
    if (module.instance) {
      Object.keys(module.instance).forEach(function (modulePropName) {
        var moduleProp = module.instance[modulePropName];
        if (typeof moduleProp === 'function') {
          instance[modulePropName] = moduleProp.bind(instance);
        } else {
          instance[modulePropName] = moduleProp;
        }
      });
    }
    // Add event listeners
    if (module.on && instance.on) {
      Object.keys(module.on).forEach(function (moduleEventName) {
        instance.on(moduleEventName, module.on[moduleEventName]);
      });
    }

    // Module create callback
    if (module.create) {
      module.create.bind(instance)(moduleParams);
    }
  });
};
Framework7Class.installModule = function installModule (module) {
    var params = [], len = arguments.length - 1;
    while ( len-- > 0 ) params[ len ] = arguments[ len + 1 ];

  var Class = this;
  if (!Class.prototype.modules) { Class.prototype.modules = {}; }
  var name = module.name || (((Object.keys(Class.prototype.modules).length) + "_" + (Utils.now())));
  Class.prototype.modules[name] = module;
  // Prototype
  if (module.proto) {
    Object.keys(module.proto).forEach(function (key) {
      Class.prototype[key] = module.proto[key];
    });
  }
  // Class
  if (module.static) {
    Object.keys(module.static).forEach(function (key) {
      Class[key] = module.static[key];
    });
  }
  // Callback
  if (module.install) {
    module.install.apply(Class, params);
  }
  return Class;
};
Framework7Class.use = function use (module) {
    var params = [], len = arguments.length - 1;
    while ( len-- > 0 ) params[ len ] = arguments[ len + 1 ];

  var Class = this;
  if (Array.isArray(module)) {
    module.forEach(function (m) { return Class.installModule(m); });
  }
  return Class.installModule.apply(Class, [ module ].concat( params ));
};

var Framework7 = (function (Framework7Class) {
  function Framework7(params) {
    Framework7Class.call(this, params);

    // App Instance
    var app = this;

    // Default
    var defaults = {
      root: 'body',
      theme: 'auto',
      init: true,
      routes: [],
    };

    // Extend defaults with modules params
    app.useInstanceModulesParams(defaults);

    // Extend defaults with passed params
    app.params = Utils.extend(defaults, params);

    // Routes
    app.routes = app.params.routes;

    // Root
    app.root = $$1(app.params.root);
    app.root[0].f7 = app;

    // Link to local storage
    app.ls = window.localStorage;

    // RTL
    app.rtl = app.root.css('direction') === 'rtl';

    // Theme
    if (app.params.theme === 'auto') {
      app.theme = Device$1.ios ? 'ios' : 'md';
    } else {
      app.theme = app.params.theme;
    }

    // Install Modules
    app.useInstanceModules();

    // Init
    if (app.params.init) {
      app.init();
    }

    // Return app instance
    return app;
  }

  if ( Framework7Class ) Framework7.__proto__ = Framework7Class;
  Framework7.prototype = Object.create( Framework7Class && Framework7Class.prototype );
  Framework7.prototype.constructor = Framework7;
  Framework7.prototype.init = function init () {
    var app = this;
    if (app.initialized) { return; }

    app.root.addClass('framework7-initializing');

    // RTL attr
    if (app.rtl) {
      $$1('html').attr('dir', 'rtl');
    }

    // Root class
    app.root.addClass('framework7-root');

    // Theme class
    $$1('html').removeClass('ios md').addClass(app.theme);

    // Data
    app.data = {};
    if (app.params.data && typeof app.params.data === 'function') {
      Utils.extend(app.data, app.params.data.bind(app)());
    } else if (app.params.data) {
      Utils.extend(app.data, app.params.data);
    }
    // Methods
    app.methods = {};
    if (app.params.methods) {
      Utils.extend(app.methods, app.params.methods);
    }
    // Init class
    Utils.nextFrame(function () {
      app.root.removeClass('framework7-initializing');
    });
    // Emit, init other modules
    app.initialized = true;
    app.emit('init');
  };
  Framework7.Class = function Class () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    return new (Function.prototype.bind.apply( Framework7Class, [ null ].concat( args) ));
  };

  return Framework7;
}(Framework7Class));

Framework7.Class = Framework7Class;

var Utils$2 = {
  name: 'utils',
  proto: {
    utils: Utils,
  },
  static: {
    Utils: Utils,
  },
};

var keyPrefix = 'f7storage-';
var Storage = {
  get: function get(key) {
    return Utils.promise(function (resolve, reject) {
      try {
        var value = JSON.parse(window.localStorage.getItem(("" + keyPrefix + key)));
        resolve(value);
      } catch (e) {
        reject(e);
      }
    });
  },
  set: function set(key, value) {
    return Utils.promise(function (resolve, reject) {
      try {
        window.localStorage.setItem(("" + keyPrefix + key), JSON.stringify(value));
        resolve();
      } catch (e) {
        reject(e);
      }
    });
  },
  remove: function remove(key) {
    return Utils.promise(function (resolve, reject) {
      try {
        window.localStorage.removeItem(("" + keyPrefix + key));
        resolve();
      } catch (e) {
        reject(e);
      }
    });
  },
  clear: function clear() {

  },
  length: function length() {

  },
  keys: function keys() {
    return Utils.promise(function (resolve, reject) {
      try {
        var keys = Object.keys(window.localStorage)
          .filter(function (keyName) { return keyName.indexOf(keyPrefix) === 0; })
          .map(function (keyName) { return keyName.replace(keyPrefix, ''); });
        resolve(keys);
      } catch (e) {
        reject(e);
      }
    });
  },
  forEach: function forEach(callback) {
    return Utils.promise(function (resolve, reject) {
      try {
        Object.keys(window.localStorage)
          .filter(function (keyName) { return keyName.indexOf(keyPrefix) === 0; })
          .forEach(function (keyName, index) {
            var key = keyName.replace(keyPrefix, '');
            Storage.get(key).then(function (value) {
              callback(key, value, index);
            });
          });
        resolve();
      } catch (e) {
        reject(e);
      }
    });
  },
};

var Storage$1 = {
  name: 'storage',
  static: {
    Storage: Storage,
  },
};

var Resize = {
  name: 'resize',
  instance: {
    getSize: function getSize() {
      var app = this;
      var offset = app.root.offset();
      var ref = [app.root[0].offsetWidth, app.root[0].offsetHeight, offset.left, offset.top];
      var width = ref[0];
      var height = ref[1];
      var left = ref[2];
      var top = ref[3];
      app.width = width;
      app.height = height;
      app.left = left;
      app.top = top;
      return { width: width, height: height, left: left, top: top };
    },
  },
  on: {
    init: function init() {
      var app = this;

      // Get Size
      app.getSize();

      // Emit resize
      window.addEventListener('resize', function () {
        app.emit('resize');
      }, false);

      // Emit orientationchange
      window.addEventListener('orientationchange', function () {
        app.emit('orientationchange');
      });
    },
    orientationchange: function orientationchange() {
      var app = this;
      if (app.device && app.device.minimalUi) {
        if (window.orientation === 90 || window.orientation === -90) {
          document.body.scrollTop = 0;
        }
      }
      // Fix iPad weird body scroll
      if (app.device.ipad) {
        document.body.scrollLeft = 0;
        setTimeout(function () {
          document.body.scrollLeft = 0;
        }, 0);
      }
    },
    resize: function resize() {
      var app = this;
      app.getSize();
    },
  },
};

var Device$2 = {
  name: 'device',
  proto: {
    device: Device$1,
  },
  static: {
    Device: Device$1,
  },
  on: {
    init: function init() {
      var classNames = [];
      var html = document.querySelector('html');
      // Pixel Ratio
      classNames.push(("device-pixel-ratio-" + (Math.floor(Device$1.pixelRatio))));
      if (Device$1.pixelRatio >= 2) {
        classNames.push('device-retina');
      }
      // OS classes
      if (Device$1.os) {
        classNames.push(("device-" + (Device$1.os)), ("device-" + (Device$1.os) + "-" + (Device$1.osVersion.split('.')[0])), ("device-" + (Device$1.os) + "-" + (Device$1.osVersion.replace(/\./g, '-'))));
        if (Device$1.os === 'ios') {
          var major = parseInt(Device$1.osVersion.split('.')[0], 10);
          for (var i = major - 1; i >= 6; i -= 1) {
            classNames.push(("device-ios-gt-" + i));
          }
        }
      } else if (Device$1.desktop) {
        classNames.push('device-desktop');
      }
      // Status bar classes
      if (Device$1.statusBar) {
        classNames.push('with-statusbar-overlay');
      } else {
        html.classList.remove('with-statusbar-overlay');
      }

      // Add html classes
      classNames.forEach(function (className) {
        html.classList.add(className);
      });
    },
  },
};

function supportsPassiveListener() {
  var supportsPassive = false;
  try {
    var opts = Object.defineProperty({}, 'passive', {
      get: function get() {
        supportsPassive = true;
      },
    });
    window.addEventListener('testPassiveListener', null, opts);
  } catch (e) {
    supportsPassive = false;
  }
  return supportsPassive;
}
function supportTouch() {
  return !!(('ontouchstart' in window) || (window.DocumentTouch && document instanceof window.DocumentTouch));
}

var positionSticky = false;
function supportPositionSticky() {
  var div = document.createElement('div');
  ('sticky -webkit-sticky -moz-sticky').split(' ').forEach(function (prop) {
    if (positionSticky) { return; }
    div.style.position = prop;
    if (div.style.position === prop) { positionSticky = prop; }
  });
}
supportPositionSticky();
function positionStickyFalsy() {
  var falsy = false;
  if (!positionSticky) { return falsy; }
  var div = document.createElement('div');
  div.innerHTML = "\n    <div id=\"position-sticky-test\" style=\"overflow:scroll; height: 100px; width:100px; position: absolute; left:0px; top:0px; padding-top:50px; visibility: hidden;\">\n      <div id=\"position-sticky-test-element\" style=\"margin:0; padding:0; height:10px; width:100%; position:" + positionSticky + "; top:0\"></div>\n      <div style=\"height: 1000px\"></div>\n    </div>";
  document.body.appendChild(div);
  document.getElementById('position-sticky-test').scrollTop = 50;
  if (document.getElementById('position-sticky-test-element').offsetTop === 50) {
    falsy = true;
  }
  div.parentNode.removeChild(div);
  return falsy;
}
var Support$1 = {
  touch: supportTouch(),
  // Passive Listeners
  passiveListener: supportsPassiveListener(),
  positionSticky: positionSticky,
  positionStickyFalsy: positionStickyFalsy(),
};

var Support = {
  name: 'support',
  proto: {
    support: Support$1,
  },
  static: {
    Support: Support$1,
  },
  on: {
    init: function init() {
      var html = document.querySelector('html');
      var classNames = [];
      if (Support$1.positionSticky) {
        classNames.push('support-position-sticky');
        if (Support$1.positionStickyFalsy) {
          classNames.push('support-position-sticky-falsy');
        }
      }
      // Add html classes
      classNames.forEach(function (className) {
        html.classList.add(className);
      });
    },
  },
};

function initTouch() {
  var app = this;
  var params = app.params.touch;
  var useRipple = app.theme === 'md' && params.materialRipple;

  if (Device$1.ios && Device$1.webView) {
    // Strange hack required for iOS 8 webview to work on inputs
    window.addEventListener('touchstart', function () {});
  }

  var touchStartX;
  var touchStartY;
  var touchStartTime;
  var targetElement;
  var trackClick;
  var activeSelection;
  var scrollParent;
  var lastClickTime;
  var isMoved;
  var tapHoldFired;
  var tapHoldTimeout;

  var activableElement;
  var activeTimeout;

  var needsFastClick;
  var needsFastClickTimeOut;

  var rippleWave;
  var rippleTarget;
  var rippleTimeout;

  function findActivableElement(el) {
    var target = $$1(el);
    var parents = target.parents(params.activeStateElements);
    var activable;
    if (target.is(params.activeStateElements)) {
      activable = target;
    }
    if (parents.length > 0) {
      activable = activable ? activable.add(parents) : parents;
    }
    return activable || target;
  }

  function isInsideScrollableView(el) {
    var pageContent = el.parents('.page-content, .panel');

    if (pageContent.length === 0) {
      return false;
    }

    // This event handler covers the "tap to stop scrolling".
    if (pageContent.prop('scrollHandlerSet') !== 'yes') {
      pageContent.on('scroll', function () {
        clearTimeout(activeTimeout);
        clearTimeout(rippleTimeout);
      });
      pageContent.prop('scrollHandlerSet', 'yes');
    }

    return true;
  }
  function addActive() {
    if (!activableElement) { return; }
    activableElement.addClass('active-state');
  }
  function removeActive() {
    if (!activableElement) { return; }
    activableElement.removeClass('active-state');
    activableElement = null;
  }
  function isFormElement(el) {
    var nodes = ('input select textarea label').split(' ');
    if (el.nodeName && nodes.indexOf(el.nodeName.toLowerCase()) >= 0) { return true; }
    return false;
  }
  function androidNeedsBlur(el) {
    var noBlur = ('button input textarea select').split(' ');
    if (document.activeElement && el !== document.activeElement && document.activeElement !== document.body) {
      if (noBlur.indexOf(el.nodeName.toLowerCase()) >= 0) {
        return false;
      }
      return true;
    }
    return false;
  }
  function targetNeedsFastClick(el) {
    /*
    if (
      Device.ios
      &&
      (
        Device.osVersion.split('.')[0] > 9
        ||
        (Device.osVersion.split('.')[0] * 1 === 9 && Device.osVersion.split('.')[1] >= 1)
      )
    ) {
      return false;
    }
    */
    var $el = $$1(el);
    if (el.nodeName.toLowerCase() === 'input' && (el.type === 'file' || el.type === 'range')) { return false; }
    if (el.nodeName.toLowerCase() === 'select' && Device$1.android) { return false; }
    if ($el.hasClass('no-fastclick') || $el.parents('.no-fastclick').length > 0) { return false; }
    if (params.fastClicksExclude && $el.is(params.fastClicksExclude)) { return false; }
    return true;
  }
  function targetNeedsFocus(el) {
    if (document.activeElement === el) {
      return false;
    }
    var tag = el.nodeName.toLowerCase();
    var skipInputs = ('button checkbox file image radio submit').split(' ');
    if (el.disabled || el.readOnly) { return false; }
    if (tag === 'textarea') { return true; }
    if (tag === 'select') {
      if (Device$1.android) { return false; }
      return true;
    }
    if (tag === 'input' && skipInputs.indexOf(el.type) < 0) { return true; }
    return false;
  }
  function targetNeedsPrevent(el) {
    var $el = $$1(el);
    var prevent = true;
    if ($el.is('label') || $el.parents('label').length > 0) {
      if (Device$1.android) {
        prevent = false;
      } else if (Device$1.ios && $el.is('input')) {
        prevent = true;
      } else { prevent = false; }
    }
    return prevent;
  }

  // Ripple handlers
  function findRippleElement(el) {
    var rippleElements = params.materialRippleElements;
    var $el = $$1(el);
    if ($el.is(rippleElements)) {
      if ($el.hasClass('no-ripple')) {
        return false;
      }
      return $el;
    } else if ($el.parents(rippleElements).length > 0) {
      var rippleParent = $el.parents(rippleElements).eq(0);
      if (rippleParent.hasClass('no-ripple')) {
        return false;
      }
      return rippleParent;
    }
    return false;
  }
  function createRipple($el, x, y) {
    if (!$el) { return; }
    rippleWave = app.touchRipple.create($el, x, y);
  }

  function removeRipple() {
    if (!rippleWave) { return; }
    rippleWave.remove();
    rippleWave = undefined;
    rippleTarget = undefined;
  }
  function rippleTouchStart(el) {
    rippleTarget = findRippleElement(el);
    if (!rippleTarget || rippleTarget.length === 0) {
      rippleTarget = undefined;
      return;
    }
    if (!isInsideScrollableView(rippleTarget)) {
      createRipple(rippleTarget, touchStartX, touchStartY);
    } else {
      rippleTimeout = setTimeout(function () {
        createRipple(rippleTarget, touchStartX, touchStartY);
      }, 80);
    }
  }
  function rippleTouchMove() {
    clearTimeout(rippleTimeout);
    removeRipple();
  }
  function rippleTouchEnd() {
    if (rippleWave) {
      removeRipple();
    } else if (rippleTarget && !isMoved) {
      clearTimeout(rippleTimeout);
      createRipple(rippleTarget, touchStartX, touchStartY);
      setTimeout(removeRipple, 0);
    } else {
      removeRipple();
    }
  }

  // Mouse Handlers
  function handleMouseDown(e) {
    findActivableElement(e.target).addClass('active-state');
    if ('which' in e && e.which === 3) {
      setTimeout(function () {
        $$1('.active-state').removeClass('active-state');
      }, 0);
    }
    if (useRipple) {
      touchStartX = e.pageX;
      touchStartY = e.pageY;
      rippleTouchStart(e.target, e.pageX, e.pageY);
    }
  }
  function handleMouseMove() {
    $$1('.active-state').removeClass('active-state');
    if (useRipple) {
      rippleTouchMove();
    }
  }
  function handleMouseUp() {
    $$1('.active-state').removeClass('active-state');
    if (useRipple) {
      rippleTouchEnd();
    }
  }

  // Send Click
  function sendClick(e) {
    var touch = e.changedTouches[0];
    var evt = document.createEvent('MouseEvents');
    var eventType = 'click';
    if (Device$1.android && targetElement.nodeName.toLowerCase() === 'select') {
      eventType = 'mousedown';
    }
    evt.initMouseEvent(eventType, true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
    evt.forwardedTouchEvent = true;

    if (app.device.ios && navigator.standalone) {
      //Fix the issue happens in iOS home screen apps where the wrong element is selected during a momentum scroll.
      //Upon tapping, we give the scrolling time to stop, then we grab the element based where the user tapped.
      setTimeout(function () {
          targetElement = document.elementFromPoint(e.changedTouches[0].clientX, e.changedTouches[0].clientY);
          targetElement.dispatchEvent(evt);
      }, 10);
    } else {
        targetElement.dispatchEvent(evt);
    }
  }

  // Touch Handlers
  function handleTouchStart(e) {
    var this$1 = this;

    isMoved = false;
    tapHoldFired = false;
    if (e.targetTouches.length > 1) {
      if (activableElement) { removeActive(); }
      return true;
    }
    if (e.touches.length > 1 && activableElement) {
      removeActive();
    }
    if (params.tapHold) {
      if (tapHoldTimeout) { clearTimeout(tapHoldTimeout); }
      tapHoldTimeout = setTimeout(function () {
        if (e && e.touches && e.touches.length > 1) { return; }
        tapHoldFired = true;
        e.preventDefault();
        $$1(e.target).trigger('taphold');
      }, params.tapHoldDelay);
    }
    if (needsFastClickTimeOut) { clearTimeout(needsFastClickTimeOut); }
    needsFastClick = targetNeedsFastClick(e.target);

    if (!needsFastClick) {
      trackClick = false;
      return true;
    }
    if (Device$1.ios || (Device$1.android && 'getSelection' in window)) {
      var selection = window.getSelection();
      if (
        selection.rangeCount &&
        selection.focusNode !== document.body &&
        (!selection.isCollapsed || document.activeElement === selection.focusNode)
      ) {
        activeSelection = true;
        return true;
      }

      activeSelection = false;
    }
    if (Device$1.android) {
      if (androidNeedsBlur(e.target)) {
        document.activeElement.blur();
      }
    }

    trackClick = true;
    targetElement = e.target;
    touchStartTime = (new Date()).getTime();
    touchStartX = e.targetTouches[0].pageX;
    touchStartY = e.targetTouches[0].pageY;

      // Detect scroll parent
    if (Device$1.ios) {
      scrollParent = undefined;
      $$1(targetElement).parents().each(function () {
        var parent = this$1;
        if (parent.scrollHeight > parent.offsetHeight && !scrollParent) {
          scrollParent = parent;
          scrollParent.f7ScrollTop = scrollParent.scrollTop;
        }
      });
    }
    if ((e.timeStamp - lastClickTime) < params.fastClicksDelayBetweenClicks) {
      e.preventDefault();
    }

    if (params.activeState) {
      activableElement = findActivableElement(targetElement);
      // If it's inside a scrollable view, we don't trigger active-state yet,
      // because it can be a scroll instead. Based on the link:
      // http://labnote.beedesk.com/click-scroll-and-pseudo-active-on-mobile-webk
      if (!isInsideScrollableView(activableElement)) {
        addActive();
      } else {
        activeTimeout = setTimeout(addActive, 80);
      }
    }
    if (useRipple) {
      rippleTouchStart(targetElement, touchStartX, touchStartY);
    }
    return true;
  }
  function handleTouchMove(e) {
    if (!trackClick) { return; }
    var distance = params.fastClicksDistanceThreshold;
    if (distance) {
      var pageX = e.targetTouches[0].pageX;
      var pageY = e.targetTouches[0].pageY;
      if (Math.abs(pageX - touchStartX) > distance || Math.abs(pageY - touchStartY) > distance) {
        isMoved = true;
      }
    } else {
      isMoved = true;
    }
    if (isMoved) {
      trackClick = false;
      targetElement = null;
      isMoved = true;
      if (params.tapHold) {
        clearTimeout(tapHoldTimeout);
      }
      if (params.activeState) {
        clearTimeout(activeTimeout);
        removeActive();
      }
      if (useRipple) {
        rippleTouchMove();
      }
    }
  }
  function handleTouchEnd(e) {
    clearTimeout(activeTimeout);
    clearTimeout(tapHoldTimeout);

    if (!trackClick) {
      if (!activeSelection && needsFastClick) {
        if (!(Device$1.android && !e.cancelable) && e.cancelable) {
          e.preventDefault();
        }
      }
      return true;
    }

    if (document.activeElement === e.target) {
      if (params.activeState) { removeActive(); }
      if (useRipple) {
        rippleTouchEnd();
      }
      return true;
    }

    if (!activeSelection) {
      e.preventDefault();
    }

    if ((e.timeStamp - lastClickTime) < params.fastClicksDelayBetweenClicks) {
      setTimeout(removeActive, 0);
      return true;
    }

    lastClickTime = e.timeStamp;

    trackClick = false;

    if (Device$1.ios && scrollParent) {
      if (scrollParent.scrollTop !== scrollParent.f7ScrollTop) {
        return false;
      }
    }

    // Add active-state here because, in a very fast tap, the timeout didn't
    // have the chance to execute. Removing active-state in a timeout gives
    // the chance to the animation execute.
    if (params.activeState) {
      addActive();
      setTimeout(removeActive, 0);
    }
    // Remove Ripple
    if (useRipple) {
      rippleTouchEnd();
    }

      // Trigger focus when required
    if (targetNeedsFocus(targetElement)) {
      if (Device$1.ios && Device$1.webView) {
        if ((e.timeStamp - touchStartTime) > 159) {
          targetElement = null;
          return false;
        }
        targetElement.focus();
        return false;
      }

      targetElement.focus();
    }

      // Blur active elements
    if (document.activeElement && targetElement !== document.activeElement && document.activeElement !== document.body && targetElement.nodeName.toLowerCase() !== 'label') {
      document.activeElement.blur();
    }

      // Send click
    e.preventDefault();
    sendClick(e);
    return false;
  }
  function handleTouchCancel() {
    trackClick = false;
    targetElement = null;

      // Remove Active State
    clearTimeout(activeTimeout);
    clearTimeout(tapHoldTimeout);
    if (params.activeState) {
      removeActive();
    }

      // Remove Ripple
    if (useRipple) {
      rippleTouchEnd();
    }
  }

  function handleClick(e) {
    var allowClick = false;

    if (trackClick) {
      targetElement = null;
      trackClick = false;
      return true;
    }
    if ((e.target.type === 'submit' && e.detail === 0) || e.target.type === 'file') {
      return true;
    }
    if (!targetElement) {
      if (!isFormElement(e.target)) {
        allowClick = true;
      }
    }
    if (!needsFastClick) {
      allowClick = true;
    }
    if (document.activeElement === targetElement) {
      allowClick = true;
    }
    if (e.forwardedTouchEvent) {
      allowClick = true;
    }
    if (!e.cancelable) {
      allowClick = true;
    }
    if (params.tapHold && params.tapHoldPreventClicks && tapHoldFired) {
      allowClick = false;
    }
    if (!allowClick) {
      e.stopImmediatePropagation();
      e.stopPropagation();
      if (targetElement) {
        if (targetNeedsPrevent(targetElement) || isMoved) {
          e.preventDefault();
        }
      } else {
        e.preventDefault();
      }
      targetElement = null;
    }
    needsFastClickTimeOut = setTimeout(function () {
      needsFastClick = false;
    }, (Device$1.ios || Device$1.androidChrome ? 100 : 400));

    if (params.tapHold) {
      tapHoldTimeout = setTimeout(function () {
        tapHoldFired = false;
      }, (Device$1.ios || Device$1.androidChrome ? 100 : 400));
    }

    return allowClick;
  }

  function emitAppTouchEvent(name, context, e) {
    app.emit({
      events: name,
      data: [e],
      context: context,
    });
  }
  function appClick(e) {
    emitAppTouchEvent('click', this, e);
  }
  function appTouchStartActive(e) {
    emitAppTouchEvent('touchstart', this, e);
  }
  function appTouchMoveActive(e) {
    emitAppTouchEvent('touchmove', this, e);
  }
  function appTouchEndActive(e) {
    emitAppTouchEvent('touchend', this, e);
  }
  function appTouchStartPassive(e) {
    emitAppTouchEvent('touchstart:passive', this, e);
  }
  function appTouchMovePassive(e) {
    emitAppTouchEvent('touchmove:passive', this, e);
  }
  function appTouchEndPassive(e) {
    emitAppTouchEvent('touchend:passive', this, e);
  }

  var passiveListener = Support$1.passiveListener ? { passive: true } : false;
  var activeListener = Support$1.passiveListener ? { passive: false } : false;

  document.addEventListener('click', appClick, true);

  if (Support$1.passiveListener) {
    document.addEventListener(app.touchEvents.start, appTouchStartActive, activeListener);
    document.addEventListener(app.touchEvents.move, appTouchMoveActive, activeListener);
    document.addEventListener(app.touchEvents.end, appTouchEndActive, activeListener);

    document.addEventListener(app.touchEvents.start, appTouchStartPassive, passiveListener);
    document.addEventListener(app.touchEvents.move, appTouchMovePassive, passiveListener);
    document.addEventListener(app.touchEvents.end, appTouchEndPassive, passiveListener);
  } else {
    document.addEventListener(app.touchEvents.start, function handler(e) {
      appTouchStartActive.call(this, e);
      appTouchStartPassive.call(this, e);
    }, false);
    document.addEventListener(app.touchEvents.move, function handler(e) {
      appTouchMoveActive.call(this, e);
      appTouchMovePassive.call(this, e);
    }, false);
    document.addEventListener(app.touchEvents.end, function handler(e) {
      appTouchEndActive.call(this, e);
      appTouchEndPassive.call(this, e);
    }, false);
  }

  if (Support$1.touch) {
    app.on('click', handleClick);
    app.on('touchstart', handleTouchStart);
    app.on('touchmove', handleTouchMove);
    app.on('touchend', handleTouchEnd);
    document.addEventListener('touchcancel', handleTouchCancel, { passive: true });
  } else if (params.activeState) {
    app.on('touchstart', handleMouseDown);
    app.on('touchmove', handleMouseMove);
    app.on('touchend', handleMouseUp);
  }

  if (useRipple) {
    document.addEventListener('contextmenu', function () {
      if (activableElement) { removeActive(); }
      rippleTouchEnd();
    });
  }
}

var Touch = {
  name: 'touch',
  params: {
    touch: {
      // Fast clicks
      fastClicks: true,
      fastClicksDistanceThreshold: 10,
      fastClicksDelayBetweenClicks: 50,
      fastClicksExclude: '', // CSS selector
      // Tap Hold
      tapHold: false,
      tapHoldDelay: 750,
      tapHoldPreventClicks: true,
      // Active State
      activeState: true,
      activeStateElements: 'a, button, label, span, .actions-button',
      materialRipple: true,
      materialRippleElements: '.ripple, .link, .item-link, .links-list a, .button, button, .input-clear-button, .dialog-button, .tab-link, .item-radio, .item-checkbox, .actions-button, .searchbar-disable-button, .fab a, .checkbox, .radio, .data-table .sortable-cell',
    },
  },
  instance: {
    touchEvents: {
      start: Support$1.touch ? 'touchstart' : 'mousedown',
      move: Support$1.touch ? 'touchmove' : 'mousemove',
      end: Support$1.touch ? 'touchend' : 'mouseup',
    },
  },
  on: {
    init: initTouch,
  },
};

var tempDom = document.createElement('div');

var Framework7Component = function Framework7Component(c, extend) {
  if ( extend === void 0 ) extend = {};

  var context = Utils.extend({}, extend);
  var component = Utils.extend(this, c, { context: context });

  // Apply context
  ('beforeCreate created beforeMount mounted beforeDestroy destroyed').split(' ').forEach(function (cycleKey) {
    if (component[cycleKey]) { component[cycleKey] = component[cycleKey].bind(context); }
  });

  if (component.data) {
    component.data = component.data.bind(context);
    // Data
    Utils.extend(context, component.data());
  }
  if (component.render) { component.render = component.render.bind(context); }
  if (component.methods) {
    Object.keys(component.methods).forEach(function (methodName) {
      context[methodName] = component.methods[methodName].bind(context);
    });
  }
  if (component.on) {
    Object.keys(component.on).forEach(function (eventName) {
      component.on[eventName] = component.on[eventName].bind(context);
    });
  }

  if (component.beforeCreate) { component.beforeCreate(); }

  // Watchers
  if (component.watch) {
    Object.keys(component.watch).forEach(function (watchKey) {
      var dataKeyValue = component.context[watchKey];
      Object.defineProperty(component.context, watchKey, {
        enumerable: true,
        configurable: true,
        set: function set(newValue) {
          dataKeyValue = newValue;
          component.watch[watchKey].call(context, dataKeyValue);
        },
        get: function get() {
          return dataKeyValue;
        },
      });
    });
  }

  // Render template
  var html = '';
  if (component.render) {
    html = component.render();
  } else if (component.template) {
    if (typeof component.template === 'string') {
      html = t7.compile(component.template)(context);
    } else {
      // Supposed to be function
      html = component.template(context);
    }
  }

  // Make Dom
  if (html && typeof html === 'string') {
    html = html.trim();
    tempDom.innerHTML = html;
  } else if (html) {
    tempDom.innerHTML = '';
    tempDom.appendChild(html);
  }

  // Extend context with $el
  var el = tempDom.children[0];
  context.$el = $$1(el);
  component.el = el;

  // Find Events
  var events = [];
  $$1(tempDom).find('*').each(function (index, element) {
    for (var i = 0; i < element.attributes.length; i += 1) {
      var attr = element.attributes[i];
      if (attr.name.indexOf('@') === 0) {
        var event = attr.name.replace('@', '');
        var name = event;
        var stop = false;
        var prevent = false;
        var once = false;
        if (event.indexOf('.') >= 0) {
          event.split('.').forEach(function (eventNamePart, eventNameIndex) {
            if (eventNameIndex === 0) { name = eventNamePart; }
            else {
              if (eventNamePart === 'stop') { stop = true; }
              if (eventNamePart === 'prevent') { prevent = true; }
              if (eventNamePart === 'once') { once = true; }
            }
          });
        }

        var value = attr.value;
        element.removeAttribute(attr.name);
        events.push({
          el: element,
          name: name,
          once: once,
          handler: function () {
            var args = [], len = arguments.length;
            while ( len-- ) args[ len ] = arguments[ len ];

            var e = args[0];
            if (stop) { e.stopPropagation(); }
            if (prevent) { e.preventDefault(); }
            var methodName;
            var method;
            var customArgs = [];
            if (value.indexOf('(') < 0) {
              customArgs = args;
              methodName = value;
            } else {
              methodName = value.split('(')[0];
              value.split('(')[1].split(')')[0].split(',').forEach(function (argument) {
                var arg = argument.trim();

                if (!isNaN(arg)) { arg = parseFloat(arg); }
                else if (arg === 'true') { arg = true; }
                else if (arg === 'false') { arg = false; }
                else if (arg === 'null') { arg = null; }
                else if (arg === 'undefined') { arg = undefined; }
                else if (arg[0] === '"') { arg = arg.replace(/"/g, ''); }
                else if (arg[0] === '\'') { arg = arg.replace(/'/g, ''); }
                else if (arg.indexOf('.') > 0) {
                  var deepArg;
                  arg.split('.').forEach(function (path) {
                    if (!deepArg) { deepArg = context; }
                    deepArg = deepArg[path];
                  });
                  arg = deepArg;
                } else {
                  arg = context[arg];
                }
                customArgs.push(arg);
              });
            }
            if (methodName.indexOf('.') >= 0) {
              methodName.split('.').forEach(function (path, pathIndex) {
                if (!method) { method = context; }
                if (method[path]) { method = method[path]; }
                else {
                  throw new Error(("Component doesn't have method \"" + (methodName.split('.').slice(0, pathIndex + 1).join('.')) + "\""));
                }
              });
            } else {
              if (!context[methodName]) {
                throw new Error(("Component doesn't have method \"" + methodName + "\""));
              }
              method = context[methodName];
            }
            method.apply(void 0, customArgs);
          },
        });
      }
    }
  });

  // Set styles scope ID
  var styleEl;
  if (component.style) {
    styleEl = document.createElement('style');
    styleEl.innerHTML = component.style;
  }
  if (component.styleScopeId) {
    el.setAttribute('data-scope', component.styleScopeId);
  }

  // Attach events
  function attachEvents() {
    events.forEach(function (event) {
      $$1(event.el)[event.once ? 'once' : 'on'](event.name, event.handler);
    });
  }

  function detachEvents() {
    events.forEach(function (event) {
      $$1(event.el).off(event.name, event.handler);
    });
  }

  attachEvents();

  // Created callback
  if (component.created) { component.created(); }

  // Mount
  component.mount = function mount(mountMethod) {
    if (component.beforeMount) { component.beforeMount(); }
    if (styleEl) { $$1('head').append(styleEl); }
    if (mountMethod) { mountMethod(el); }
    if (component.mounted) { component.mounted(); }
  };

  // Destroy
  component.destroy = function destroy() {
    if (component.beforeDestroy) { component.beforeDestroy(); }
    if (styleEl) { $$1(styleEl).remove(); }
    detachEvents();
    if (component.destroyed) { component.destroyed(); }
  };

  // Store component instance
  for (var i = 0; i < tempDom.children.length; i += 1) {
    tempDom.children[i].f7Component = component;
  }

  return component;
};


var Component = {
  parse: function parse(componentString) {
    var callbackName = "f7_component_callback_" + (new Date().getTime());

    // Template
    var template;
    if (componentString.indexOf('<template>') >= 0) {
      template = componentString.split('<template>')[1].split('</template>')[0].trim();
    }

    // Styles
    var style;
    var styleScopeId = Utils.now();
    if (componentString.indexOf('<style>') >= 0) {
      style = componentString.split('<style>')[1].split('</style>')[0];
    } else if (componentString.indexOf('<style scoped>') >= 0) {
      style = componentString.split('<style scoped>')[1].split('</style>')[0];
      style = style.split('\n').map(function (line) {
        if (line.indexOf('{') >= 0) {
          if (line.indexOf('{{this}}') >= 0) {
            return line.replace('{{this}}', ("[data-scope=\"" + styleScopeId + "\"]"));
          }
          return ("[data-scope=\"" + styleScopeId + "\"] " + (line.trim()));
        }
        return line;
      }).join('\n');
    }

    var scriptContent;
    if (componentString.indexOf('<script>') >= 0) {
      scriptContent = componentString.split('<script>')[1].split('</script>')[0].trim();
    } else {
      scriptContent = 'return {}';
    }
    scriptContent = "window." + callbackName + " = function () {" + scriptContent + "}";

    // Insert Script El
    var scriptEl = document.createElement('script');
    scriptEl.innerHTML = scriptContent;
    $$1('head').append(scriptEl);

    var component = window[callbackName]();

    // Remove Script El
    $$1(scriptEl).remove();

    if (!component.template && !component.render) {
      component.template = template;
    }
    if (style) {
      component.style = style;
      component.styleScopeId = styleScopeId;
    }
    return component;
  },
  create: function create(c, extendContext) {
    if ( extendContext === void 0 ) extendContext = {};

    return new Framework7Component(c, extendContext);
  },
};

var History = {
  queue: [],
  clearQueue: function clearQueue() {
    if (History.queue.length === 0) { return; }
    var currentQueue = History.queue.shift();
    currentQueue();
  },
  routerQueue: [],
  clearRouterQueue: function clearRouterQueue() {
    if (History.routerQueue.length === 0) { return; }
    var currentQueue = History.routerQueue.pop();
    var router = currentQueue.router;

    var animate = router.params.animate;
    if (router.params.pushStateAnimate === false) { animate = false; }

    if (currentQueue.action === 'back') {
      router.back({ animate: animate, pushState: false });
    }
    if (currentQueue.action === 'load') {
      router.navigate(currentQueue.stateUrl, { animate: animate, pushState: false });
    }
  },
  handle: function handle(e) {
    if (History.blockPopstate) { return; }
    var app = this;
    var mainView = app.views.main;
    var state = e.state;
    History.previousState = History.state;
    History.state = state;

    History.allowChange = true;
    History.clearQueue();

    state = History.state;

    if (!state && mainView) {
      state = {
        viewIndex: mainView.index,
        url: mainView.router.history[0],
      };
    }
    if (state.viewIndex < 0) { return; }
    var view = app.views[state.viewIndex];
    var router = view.router;
    var stateUrl = (state && state.url) || undefined;

    var animate = router.params.animate;
    if (router.params.pushStateAnimate === false) { animate = false; }

    if (stateUrl !== router.url) {
      if (router.history.indexOf(stateUrl) >= 0) {
        // Go Back
        if (router.allowPageChange) {
          router.back({ animate: animate, pushState: false });
        } else {
          History.routerQueue.push({
            action: 'back',
            router: router,
          });
        }
      } else if (router.allowPageChange) {
        // Load page
        router.navigate(stateUrl, { animate: animate, pushState: false });
      } else {
        History.routerQueue.unshift({
          action: 'load',
          stateUrl: stateUrl,
          router: router,
        });
      }
    }
  },
  push: function push(state, url) {
    if (!History.allowChange) {
      History.queue.push(function () {
        History.push(state, url);
      });
      return;
    }
    History.previousState = History.state;
    History.state = state;
    window.history.pushState(state, '', url);
  },
  replace: function replace(state, url) {
    if (!History.allowChange) {
      History.queue.push(function () {
        History.replace(state, url);
      });
      return;
    }
    History.previousState = History.state;
    History.state = state;
    window.history.replaceState(state, '', url);
  },
  go: function go(index) {
    History.allowChange = false;
    window.history.go(index);
  },
  back: function back() {
    History.allowChange = false;
    window.history.back();
  },
  allowChange: true,
  previousState: {},
  state: window.history.state,
  blockPopstate: true,
  init: function init(app) {
    $$1(window).on('load', function () {
      setTimeout(function () {
        History.blockPopstate = false;
      }, 0);
    });

    if (document.readyState && document.readyState === 'complete') {
      History.blockPopstate = false;
    }

    $$1(window).on('popstate', History.handle.bind(app));
  },
};

function SwipeBack(r) {
  var router = r;
  var $el = router.$el;
  var $navbarEl = router.$navbarEl;
  var app = router.app;
  var isTouched = false;
  var isMoved = false;
  var touchesStart = {};
  var isScrolling;
  var currentPage = [];
  var previousPage = [];
  var viewContainerWidth;
  var touchesDiff;
  var allowViewTouchMove = true;
  var touchStartTime;
  var currentNavbar = [];
  var previousNavbar = [];
  var currentNavElements;
  var previousNavElements;
  var activeNavBackIcon;
  var activeNavBackIconText;
  var previousNavBackIcon;
  var previousNavBackIconText;
  var dynamicNavbar;
  var separateNavbar;
  var pageShadow;
  var pageOpacity;
  var navbarWidth;

  function handleTouchStart(e) {
    if (!allowViewTouchMove || !router.params.iosSwipeBack || isTouched || app.swipeout.el || !router.allowPageChange) { return; }
    isMoved = false;
    isTouched = true;
    isScrolling = undefined;
    touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
    touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
    touchStartTime = (new Date()).getTime();
    dynamicNavbar = router.dynamicNavbar;
    separateNavbar = router.separateNavbar;
  }
  function handleTouchMove(e) {
    if (!isTouched) { return; }
    var pageX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
    var pageY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;
    if (typeof isScrolling === 'undefined') {
      isScrolling = !!(isScrolling || Math.abs(pageY - touchesStart.y) > Math.abs(pageX - touchesStart.x));
    }
    if (isScrolling || e.f7PreventSwipeBack || app.preventSwipeBack) {
      isTouched = false;
      return;
    }
    if (!isMoved) {
      // Calc values during first move fired
      var cancel = false;
      var target = $$1(e.target);

      var swipeout = target.closest('.swipeout');
      if (swipeout.length > 0) {
        if (!app.rtl && swipeout.find('.swipeout-actions-left').length > 0) { cancel = true; }
        if (app.rtl && swipeout.find('.swipeout-actions-right').length > 0) { cancel = true; }
      }

      currentPage = target.closest('.page');
      if (currentPage.hasClass('no-swipeback')) { cancel = true; }
      previousPage = $el.find('.page-previous:not(.stacked)');

      var notFromBorder = touchesStart.x - $el.offset().left > router.params.iosSwipeBackActiveArea;
      viewContainerWidth = $el.width();
      if (app.rtl) {
        notFromBorder = touchesStart.x < ($el.offset().left - $el[0].scrollLeft) + (viewContainerWidth - router.params.iosSwipeBackActiveArea);
      } else {
        notFromBorder = touchesStart.x - $el.offset().left > router.params.iosSwipeBackActiveArea;
      }
      if (notFromBorder) { cancel = true; }
      if (previousPage.length === 0 || currentPage.length === 0) { cancel = true; }
      if (cancel) {
        isTouched = false;
        return;
      }

      if (router.params.iosSwipeBackAnimateShadow) {
        pageShadow = currentPage.find('.page-shadow-effect');
        if (pageShadow.length === 0) {
          pageShadow = $$1('<div class="page-shadow-effect"></div>');
          currentPage.append(pageShadow);
        }
      }
      if (router.params.iosSwipeBackAnimateOpacity) {
        pageOpacity = previousPage.find('.page-opacity-effect');
        if (pageOpacity.length === 0) {
          pageOpacity = $$1('<div class="page-opacity-effect"></div>');
          previousPage.append(pageOpacity);
        }
      }

      if (dynamicNavbar) {
        if (separateNavbar) {
          currentNavbar = $navbarEl.find('.navbar-current:not(.stacked)');
          previousNavbar = $navbarEl.find('.navbar-previous:not(.stacked)');
        } else {
          currentNavbar = currentPage.children('.navbar').children('.navbar-inner');
          previousNavbar = previousPage.children('.navbar').children('.navbar-inner');
        }
        navbarWidth = $navbarEl[0].offsetWidth;
        currentNavElements = currentNavbar.children('.left, .title, .right, .subnavbar, .fading');
        previousNavElements = previousNavbar.children('.left, .title, .right, .subnavbar, .fading');
        if (router.params.iosAnimateNavbarBackIcon) {
          if (currentNavbar.hasClass('sliding')) {
            activeNavBackIcon = currentNavbar.children('.left').find('.back .icon');
            activeNavBackIconText = currentNavbar.children('.left').find('.back span').eq(0);
          } else {
            activeNavBackIcon = currentNavbar.children('.left.sliding').find('.back .icon');
            activeNavBackIconText = currentNavbar.children('.left.sliding').find('.back span').eq(0);
          }
          if (previousNavbar.hasClass('sliding')) {
            previousNavBackIcon = previousNavbar.children('.left').find('.back .icon');
            previousNavBackIconText = previousNavbar.children('left').find('.back span').eq(0);
          } else {
            previousNavBackIcon = previousNavbar.children('.left.sliding').find('.back .icon');
            previousNavBackIconText = previousNavbar.children('.left.sliding').find('.back span').eq(0);
          }
        }
      }

      // Close/Hide Any Picker
      if ($$1('.picker.modal-in').length > 0) {
        app.closeModal($$1('.picker.modal-in'));
      }
    }
    e.f7PreventPanelSwipe = true;
    isMoved = true;
    e.preventDefault();

    // RTL inverter
    var inverter = app.rtl ? -1 : 1;

    // Touches diff
    touchesDiff = (pageX - touchesStart.x - router.params.iosSwipeBackThreshold) * inverter;
    if (touchesDiff < 0) { touchesDiff = 0; }
    var percentage = touchesDiff / viewContainerWidth;

    // Swipe Back Callback
    var callbackData = {
      percentage: percentage,
      currentPageEl: currentPage[0],
      previousPageEl: previousPage[0],
      currentNavbarEl: currentNavbar[0],
      previousNavbarEl: previousNavbar[0],
    };
    $el.trigger('swipeback:move', callbackData);
    router.emit('swipeBackMove', callbackData);

    // Transform pages
    var currentPageTranslate = touchesDiff * inverter;
    var previousPageTranslate = ((touchesDiff / 5) - (viewContainerWidth / 5)) * inverter;
    if (Device$1.pixelRatio === 1) {
      currentPageTranslate = Math.round(currentPageTranslate);
      previousPageTranslate = Math.round(previousPageTranslate);
    }

    currentPage.transform(("translate3d(" + currentPageTranslate + "px,0,0)"));
    if (router.params.iosSwipeBackAnimateShadow) { pageShadow[0].style.opacity = 1 - (1 * percentage); }

    previousPage.transform(("translate3d(" + previousPageTranslate + "px,0,0)"));
    if (router.params.iosSwipeBackAnimateOpacity) { pageOpacity[0].style.opacity = 1 - (1 * percentage); }

    // Dynamic Navbars Animation
    if (dynamicNavbar) {
      currentNavElements.each(function (index, navEl) {
        var $navEl = $$1(navEl);
        if (!$navEl.is('.subnavbar')) { $navEl[0].style.opacity = (1 - (percentage * 1.3)); }
        if ($navEl[0].className.indexOf('sliding') >= 0 || currentNavbar.hasClass('sliding')) {
          var activeNavTranslate = percentage * $navEl[0].f7NavbarRightOffset;
          if (Device$1.pixelRatio === 1) { activeNavTranslate = Math.round(activeNavTranslate); }
          $navEl.transform(("translate3d(" + activeNavTranslate + "px,0,0)"));
          if (router.params.iosAnimateNavbarBackIcon) {
            if ($navEl[0].className.indexOf('left') >= 0 && activeNavBackIcon.length > 0) {
              var iconTranslate = -activeNavTranslate;
              if (!separateNavbar) {
                iconTranslate -= navbarWidth * percentage;
              }
              activeNavBackIcon.transform(("translate3d(" + iconTranslate + "px,0,0)"));
            }
          }
        }
      });
      previousNavElements.each(function (index, navEl) {
        var $navEl = $$1(navEl);
        if (!$navEl.is('.subnavbar')) { $navEl[0].style.opacity = (percentage * 1.3) - 0.3; }
        if ($navEl[0].className.indexOf('sliding') >= 0 || previousNavbar.hasClass('sliding')) {
          var previousNavTranslate = $navEl[0].f7NavbarLeftOffset * (1 - percentage);
          if ($navEl[0].className.indexOf('title') >= 0 && activeNavBackIcon && activeNavBackIcon.length && activeNavBackIconText.length) {
            previousNavTranslate = ($navEl[0].f7NavbarLeftOffset + activeNavBackIconText[0].offsetLeft) * (1 - percentage);
          } else {
            previousNavTranslate = $navEl[0].f7NavbarLeftOffset * (1 - percentage);
          }
          if (Device$1.pixelRatio === 1) { previousNavTranslate = Math.round(previousNavTranslate); }
          $navEl.transform(("translate3d(" + previousNavTranslate + "px,0,0)"));
          if (router.params.iosAnimateNavbarBackIcon) {
            if ($navEl[0].className.indexOf('left') >= 0 && previousNavBackIcon.length > 0) {
              var iconTranslate = -previousNavTranslate;
              if (!separateNavbar) {
                iconTranslate += (navbarWidth / 5) * (1 - percentage);
              }
              previousNavBackIcon.transform(("translate3d(" + iconTranslate + "px,0,0)"));
            }
          }
        }
      });
    }
  }
  function handleTouchEnd() {
    if (!isTouched || !isMoved) {
      isTouched = false;
      isMoved = false;
      return;
    }
    isTouched = false;
    isMoved = false;
    if (touchesDiff === 0) {
      $$1([currentPage[0], previousPage[0]]).transform('');
      if (dynamicNavbar) {
        currentNavElements.transform('').css({ opacity: '' });
        previousNavElements.transform('').css({ opacity: '' });
        if (activeNavBackIcon && activeNavBackIcon.length > 0) { activeNavBackIcon.transform(''); }
        if (previousNavBackIcon && activeNavBackIcon.length > 0) { previousNavBackIcon.transform(''); }
      }
      return;
    }
    var timeDiff = (new Date()).getTime() - touchStartTime;
    var pageChanged = false;
    // Swipe back to previous page
    if (
        (timeDiff < 300 && touchesDiff > 10) ||
        (timeDiff >= 300 && touchesDiff > viewContainerWidth / 2)
      ) {
      currentPage.removeClass('page-current').addClass('page-next');
      previousPage.removeClass('page-previous').addClass('page-current');
      if (pageShadow) { pageShadow[0].style.opacity = ''; }
      if (pageOpacity) { pageOpacity[0].style.opacity = ''; }
      if (dynamicNavbar) {
        currentNavbar.removeClass('navbar-current').addClass('navbar-next');
        previousNavbar.removeClass('navbar-previous').addClass('navbar-current');
      }
      pageChanged = true;
    }
    // Reset custom styles
    // Add transitioning class for transition-duration
    $$1([currentPage[0], previousPage[0]]).addClass('page-transitioning').transform('');
    if (dynamicNavbar) {
      currentNavElements.css({ opacity: '' })
        .each(function (navElIndex, navEl) {
          var translate = pageChanged ? navEl.f7NavbarRightOffset : 0;
          var sliding = $$1(navEl);
          var iconTranslate = pageChanged ? -translate : 0;
          if (!separateNavbar && pageChanged) { iconTranslate -= navbarWidth; }
          sliding.transform(("translate3d(" + translate + "px,0,0)"));
          if (router.params.iosAnimateNavbarBackIcon) {
            if (sliding.hasClass('left') && activeNavBackIcon.length > 0) {
              activeNavBackIcon.addClass('navbar-transitioning').transform(("translate3d(" + iconTranslate + "px,0,0)"));
            }
          }
        }).addClass('navbar-transitioning');

      previousNavElements.transform('').css({ opacity: '' }).each(function (navElIndex, navEl) {
        var translate = pageChanged ? 0 : navEl.f7NavbarLeftOffset;
        var sliding = $$1(navEl);
        var iconTranslate = pageChanged ? 0 : -translate;
        if (!separateNavbar && !pageChanged) { iconTranslate += navbarWidth / 5; }
        sliding.transform(("translate3d(" + translate + "px,0,0)"));
        if (router.params.iosAnimateNavbarBackIcon) {
          if (sliding.hasClass('left') && previousNavBackIcon.length > 0) {
            previousNavBackIcon.addClass('navbar-transitioning').transform(("translate3d(" + iconTranslate + "px,0,0)"));
          }
        }
      }).addClass('navbar-transitioning');
    }
    allowViewTouchMove = false;
    router.allowPageChange = false;

    // Swipe Back Callback
    var callbackData = {
      currentPage: currentPage[0],
      previousPage: previousPage[0],
      currentNavbar: currentNavbar[0],
      previousNavbar: previousNavbar[0],
    };

    if (pageChanged) {
      // Update Route
      router.currentRoute = previousPage[0].f7Page.route;
      router.currentPage = previousPage[0];

      // Page before animation callback
      router.pageCallback('beforeOut', currentPage, currentNavbar, 'current', 'next', { route: currentPage[0].f7Page.route });
      router.pageCallback('beforeIn', previousPage, previousNavbar, 'previous', 'current', { route: previousPage[0].f7Page.route });

      $el.trigger('swipeback:beforechange', callbackData);
      router.emit('swipeBackBeforeChange', callbackData);
    } else {
      $el.trigger('swipeback:beforereset', callbackData);
      router.emit('swipeBackBeforeReset', callbackData);
    }

    currentPage.transitionEnd(function () {
      $$1([currentPage[0], previousPage[0]]).removeClass('page-transitioning');
      if (dynamicNavbar) {
        currentNavElements.removeClass('navbar-transitioning').css({ opacity: '' }).transform('');
        previousNavElements.removeClass('navbar-transitioning').css({ opacity: '' }).transform('');
        if (activeNavBackIcon && activeNavBackIcon.length > 0) { activeNavBackIcon.removeClass('navbar-transitioning'); }
        if (previousNavBackIcon && previousNavBackIcon.length > 0) { previousNavBackIcon.removeClass('navbar-transitioning'); }
      }
      allowViewTouchMove = true;
      router.allowPageChange = true;
      if (pageChanged) {
        // Update History
        if (router.history.length === 1) {
          router.history.unshift(router.url);
        }
        router.history.pop();
        router.saveHistory();

        // Update push state
        if (router.params.pushState) {
          History.back();
        }

        // Page after animation callback
        router.pageCallback('afterOut', currentPage, currentNavbar, 'current', 'next', { route: currentPage[0].f7Page.route });
        router.pageCallback('afterIn', previousPage, previousNavbar, 'previous', 'current', { route: previousPage[0].f7Page.route });

        // Remove Old Page
        if (router.params.stackPages && router.initialPages.indexOf(currentPage[0]) >= 0) {
          currentPage.addClass('stacked');
          if (separateNavbar) {
            currentNavbar.addClass('stacked');
          }
        } else {
          router.pageCallback('beforeRemove', currentPage, currentNavbar, 'next');
          router.removeEl(currentPage);
          if (separateNavbar) {
            router.removeEl(currentNavbar);
          }
        }

        $el.trigger('swipeback:afterchange', callbackData);
        router.emit('swipeBackAfterChange', callbackData);

        router.emit('routeChanged', router.currentRoute, router.previousRoute, router);

        if (router.params.preloadPreviousPage) {
          router.back(router.history[router.history.length - 2], { preload: true });
        }
      } else {
        $el.trigger('swipeback:afterreset', callbackData);
        router.emit('swipeBackAfterReset', callbackData);
      }
      if (pageShadow && pageShadow.length > 0) { pageShadow.remove(); }
      if (pageOpacity && pageOpacity.length > 0) { pageOpacity.remove(); }
    });
  }

  function attachEvents() {
    var passiveListener = (app.touchEvents.start === 'touchstart' && Support$1.passiveListener) ? { passive: true, capture: false } : false;
    var activeListener = Support$1.passiveListener ? { passive: false, capture: false } : false;
    $el.on(app.touchEvents.start, handleTouchStart, passiveListener);
    $el.on(app.touchEvents.move, handleTouchMove, activeListener);
    $el.on(app.touchEvents.end, handleTouchEnd, passiveListener);
  }
  function detachEvents() {
    var passiveListener = (app.touchEvents.start === 'touchstart' && Support$1.passiveListener) ? { passive: true, capture: false } : false;
    var activeListener = Support$1.passiveListener ? { passive: false, capture: false } : false;
    $el.off(app.touchEvents.start, handleTouchStart, passiveListener);
    $el.off(app.touchEvents.move, handleTouchMove, activeListener);
    $el.off(app.touchEvents.end, handleTouchEnd, passiveListener);
  }

  attachEvents();

  router.on('routerDestroy', detachEvents);
}

function forward(el, forwardOptions) {
  if ( forwardOptions === void 0 ) forwardOptions = {};

  var router = this;
  var app = router.app;
  var view = router.view;

  var options = Utils.extend({
    animate: router.params.animate,
    pushState: true,
    history: true,
    reloadCurrent: router.params.reloadPages,
    reloadPrevious: false,
    reloadAll: false,
    pageEvents: {},
    on: {},
  }, forwardOptions);

  var dynamicNavbar = router.dynamicNavbar;
  var separateNavbar = router.separateNavbar;

  var $viewEl = router.$el;
  var $newPage = $$1(el);
  var reload = options.reloadPrevious || options.reloadCurrent || options.reloadAll;
  var $oldPage;

  var $navbarEl;
  var $newNavbarInner;
  var $oldNavbarInner;

  if ($newPage.length) {
    // Remove theme elements
    router.removeThemeElements($newPage);
  }

  if (dynamicNavbar) {
    $newNavbarInner = $newPage.children('.navbar').children('.navbar-inner');
    if (separateNavbar) {
      $navbarEl = router.$navbarEl;
      if ($newNavbarInner.length > 0) {
        $newPage.children('.navbar').remove();
      }
      if ($newNavbarInner.length === 0 && $newPage[0].f7Page) {
        // Try from pageData
        $newNavbarInner = $newPage[0].f7Page.$navbarEl;
      }
    }
  }

  router.allowPageChange = false;
  if ($newPage.length === 0) {
    router.allowPageChange = true;
    return router;
  }

  // Pages In View
  var $pagesInView = $viewEl
    .children('.page:not(.stacked)')
    .filter(function (index, pageInView) { return pageInView !== $newPage[0]; });

  // Navbars In View
  var $navbarsInView;
  if (separateNavbar) {
    $navbarsInView = $navbarEl
      .children('.navbar-inner:not(.stacked)')
      .filter(function (index, navbarInView) { return navbarInView !== $newNavbarInner[0]; });
  }

  // Exit when reload previous and only 1 page in view so nothing ro reload
  if (options.reloadPrevious && $pagesInView.length < 2) {
    router.allowPageChange = true;
    return router;
  }

  // New Page
  var newPagePosition = 'next';
  if (options.reloadCurrent || options.reloadAll) {
    newPagePosition = 'current';
  } else if (options.reloadPrevious) {
    newPagePosition = 'previous';
  }
  $newPage
    .addClass(("page-" + newPagePosition))
    .removeClass('stacked');

  if (dynamicNavbar && $newNavbarInner.length) {
    $newNavbarInner
      .addClass(("navbar-" + newPagePosition))
      .removeClass('stacked');
  }

  // Find Old Page
  if (options.reloadCurrent) {
    $oldPage = $pagesInView.eq($pagesInView.length - 1);
    if (separateNavbar) {
      // $oldNavbarInner = $navbarsInView.eq($pagesInView.length - 1);
      $oldNavbarInner = app.navbar.getElByPage($oldPage);
    }
  } else if (options.reloadPrevious) {
    $oldPage = $pagesInView.eq($pagesInView.length - 2);
    if (separateNavbar) {
      // $oldNavbarInner = $navbarsInView.eq($pagesInView.length - 2);
      $oldNavbarInner = app.navbar.getElByPage($oldPage);
    }
  } else if (options.reloadAll) {
    $oldPage = $pagesInView.filter(function (index, pageEl) { return pageEl !== $newPage[0]; });
    if (separateNavbar) {
      $oldNavbarInner = $navbarsInView.filter(function (index, navbarEl) { return navbarEl !== $newNavbarInner[0]; });
    }
  } else {
    if ($pagesInView.length > 1) {
      var i = 0;
      for (i = 0; i < $pagesInView.length - 1; i += 1) {
        var oldNavbarInnerEl = app.navbar.getElByPage($pagesInView.eq(i));
        if (router.params.stackPages) {
          $pagesInView.eq(i).addClass('stacked');
          if (separateNavbar) {
            // $navbarsInView.eq(i).addClass('stacked');
            $$1(oldNavbarInnerEl).addClass('stacked');
          }
        } else {
          // Page remove event
          router.pageCallback('beforeRemove', $pagesInView[i], $navbarsInView && $navbarsInView[i], 'previous', undefined, options);
          router.removeEl($pagesInView[i]);
          if (separateNavbar && oldNavbarInnerEl) {
            // router.removeEl($navbarsInView[i]);
            router.removeEl(oldNavbarInnerEl);
          }
        }
      }
    }
    $oldPage = $viewEl
      .children('.page:not(.stacked)')
      .filter(function (index, page) { return page !== $newPage[0]; });
    if (separateNavbar) {
      $oldNavbarInner = $navbarEl
        .children('.navbar-inner:not(.stacked)')
        .filter(function (index, navbarInner) { return navbarInner !== $newNavbarInner[0]; });
    }
  }
  if (dynamicNavbar && !separateNavbar) {
    $oldNavbarInner = $oldPage.children('.navbar').children('.navbar-inner');
  }

  // Push State
  if (router.params.pushState && options.pushState && !options.reloadPrevious) {
    var pushStateRoot = router.params.pushStateRoot || '';
    History[options.reloadCurrent || options.reloadAll ? 'replace' : 'push'](
      {
        url: options.route.url,
        viewIndex: view.index,
      },
      pushStateRoot + router.params.pushStateSeparator + options.route.url);
  }

  // Current Route
  router.currentRoute = options.route;

  // Update router history
  var url = options.route.url;
  if (options.history) {
    if (options.reloadCurrent && router.history.length > 0) {
      router.history[router.history.length - (options.reloadPrevious ? 2 : 1)] = url;
    } else if (options.reloadAll) {
      router.history = [url];
    } else {
      router.history.push(url);
    }
  }
  router.saveHistory();

  // Insert new page and navbar
  var newPageInDom = $newPage.parents(document).length > 0;
  var f7Component = $newPage[0].f7Component;
  // console.log(msg)
  if (options.reloadPrevious) {
    if (f7Component && !newPageInDom) {
      f7Component.mount(function (componentEl) {
        $$1(componentEl).insertBefore($oldPage);
      });
    } else {
      $newPage.insertBefore($oldPage);
    }
    if (separateNavbar && $newNavbarInner.length) {
      if ($oldNavbarInner.length) {
        $newNavbarInner.insertBefore($oldNavbarInner);
      } else {
        $navbarEl.append($newNavbarInner);
      }
    }
  } else if ($oldPage.next('.page')[0] !== $newPage[0]) {
    if (f7Component && !newPageInDom) {
      f7Component.mount(function (componentEl) {
        $viewEl.append(componentEl);
      });
    } else {
      $viewEl.append($newPage[0]);
    }
    if (separateNavbar && $newNavbarInner.length) {
      $navbarEl.append($newNavbarInner[0]);
    }
  }
  if (!newPageInDom) {
    router.pageCallback('mounted', $newPage, $newNavbarInner, newPagePosition, reload ? newPagePosition : 'current', options, $oldPage);
  }

  // Remove old page
  if (options.reloadCurrent && $oldPage.length > 0) {
    if (router.params.stackPages && router.initialPages.indexOf($oldPage[0]) >= 0) {
      $oldPage.addClass('stacked');
      if (separateNavbar) {
        $oldNavbarInner.addClass('stacked');
      }
    } else {
      // Page remove event
      router.pageCallback('beforeRemove', $oldPage, $newNavbarInner, 'previous', undefined, options);
      router.removeEl($oldPage);
      if (separateNavbar && $oldNavbarInner.length) {
        router.removeEl($oldNavbarInner);
      }
    }
  } else if (options.reloadAll) {
    $oldPage.each(function (index, pageEl) {
      var $oldPageEl = $$1(pageEl);
      var $oldNavbarInnerEl = $$1(app.navbar.getElByPage($oldPageEl));
      if (router.params.stackPages && router.initialPages.indexOf($oldPageEl[0]) >= 0) {
        $oldPageEl.addClass('stacked');
        if (separateNavbar) {
          // $oldNavbarInner.eq(index).addClass('stacked');
          $oldNavbarInnerEl.addClass('stacked');
        }
      } else {
        // Page remove event
        router.pageCallback('beforeRemove', $oldPageEl, $oldNavbarInner && $oldNavbarInner.eq(index), 'previous', undefined, options);
        router.removeEl($oldPageEl);
        if (separateNavbar && $oldNavbarInnerEl.length) {
          // router.removeEl($oldNavbarInner.eq(index));
          router.removeEl($oldNavbarInnerEl);
        }
      }
    });
  }

  // Load Tab
  if (options.route.route.tab) {
    router.tabLoad(options.route.route.tab, Utils.extend({}, options, {
      history: false,
      pushState: false,
    }));
  }

  // Page init and before init events
  router.pageCallback('init', $newPage, $newNavbarInner, newPagePosition, reload ? newPagePosition : 'current', options, $oldPage);

  if (options.reloadCurrent || options.reloadAll) {
    router.allowPageChange = true;
    return router;
  }

  // Before animation event
  router.pageCallback('beforeIn', $newPage, $newNavbarInner, 'next', 'current', options);
  router.pageCallback('beforeOut', $oldPage, $oldNavbarInner, 'current', 'previous', options);

  // Animation
  function afterAnimation() {
    var pageClasses = 'page-previous page-current page-next';
    var navbarClasses = 'navbar-previous navbar-current navbar-next';
    $newPage.removeClass(pageClasses).addClass('page-current');
    $oldPage.removeClass(pageClasses).addClass('page-previous');
    if (dynamicNavbar) {
      $newNavbarInner.removeClass(navbarClasses).addClass('navbar-current');
      $oldNavbarInner.removeClass(navbarClasses).addClass('navbar-previous');
    }
    // After animation event
    router.allowPageChange = true;
    router.pageCallback('afterIn', $newPage, $newNavbarInner, 'next', 'current', options);
    router.pageCallback('afterOut', $oldPage, $oldNavbarInner, 'current', 'previous', options);

    var keepOldPage = app.theme === 'ios' ? (router.params.preloadPreviousPage || router.params.iosSwipeBack) : router.params.preloadPreviousPage;
    if (!keepOldPage) {
      if ($newPage.hasClass('smart-select-page') || $newPage.hasClass('photo-browser-page') || $newPage.hasClass('autocomplete-page')) {
        keepOldPage = true;
      }
    }
    if (!keepOldPage) {
      if (router.params.stackPages) {
        $oldPage.addClass('stacked');
        if (separateNavbar) {
          $oldNavbarInner.addClass('stacked');
        }
      } else if (!($newPage.attr('data-name') && $newPage.attr('data-name') === 'smart-select-page')) {
        // Remove event
        router.pageCallback('beforeRemove', $oldPage, $oldNavbarInner, 'previous', undefined, options);
        router.removeEl($oldPage);
        if (separateNavbar && $oldNavbarInner.length) {
          router.removeEl($oldNavbarInner);
        }
      }
    }
    router.emit('routeChanged', router.currentRoute, router.previousRoute, router);

    if (router.params.pushState) {
      History.clearRouterQueue();
    }
  }
  function setPositionClasses() {
    var pageClasses = 'page-previous page-current page-next';
    var navbarClasses = 'navbar-previous navbar-current navbar-next';
    $oldPage.removeClass(pageClasses).addClass('page-current');
    $newPage.removeClass(pageClasses).addClass('page-next');
    if (dynamicNavbar) {
      $oldNavbarInner.removeClass(navbarClasses).addClass('navbar-current');
      $newNavbarInner.removeClass(navbarClasses).addClass('navbar-next');
    }
  }
  if (options.animate) {
    if (router.app.theme === 'md' && router.params.materialPageLoadDelay) {
      setTimeout(function () {
        setPositionClasses();
        router.animate($oldPage, $newPage, $oldNavbarInner, $newNavbarInner, 'forward', function () {
          afterAnimation();
        });
      }, router.params.materialPageLoadDelay);
    } else {
      setPositionClasses();
      router.animate($oldPage, $newPage, $oldNavbarInner, $newNavbarInner, 'forward', function () {
        afterAnimation();
      });
    }
  } else {
    afterAnimation();
  }
  return router;
}
function load(loadParams, loadOptions, ignorePageChange) {
  if ( loadParams === void 0 ) loadParams = {};
  if ( loadOptions === void 0 ) loadOptions = {};

  var router = this;

  if (!router.allowPageChange && !ignorePageChange) { return router; }
  var params = loadParams;
  var options = loadOptions;
  var url = params.url;
  var content = params.content;
  var el = params.el;
  var name = params.name;
  var template = params.template;
  var templateUrl = params.templateUrl;
  var component = params.component;
  var componentUrl = params.componentUrl;
  var ignoreCache = options.ignoreCache;

  if (options.route &&
    options.route.route &&
    options.route.route.parentPath &&
    router.currentRoute.route.parentPath &&
    options.route.route.parentPath === router.currentRoute.route.parentPath) {
    // Do something nested
    if (options.route.url === router.url) { return false; }
    if (options.route.route.tab) {
      return router.tabLoad(options.route.route.tab, options);
    }
    return false;
  }

  if (
    options.route &&
    options.route.url &&
    router.url === options.route.url &&
    !(options.reloadCurrent || options.reloadPrevious) &&
    !router.params.allowDuplicateUrls
    ) {
    return false;
  }

  if (!options.route && url) {
    options.route = router.findMatchingRoute(url, true);
    Utils.extend(options.route, { route: { url: url, path: url } });
  }

  // Component Callbacks
  function resolve(pageEl, newOptions) {
    return router.forward(pageEl, Utils.extend(options, newOptions));
  }
  function reject() {
    router.allowPageChange = true;
    return router;
  }

  // Proceed
  if (content) {
    router.forward(router.getPageEl(content), options);
  } else if (template || templateUrl) {
    // Parse template and send page element
    try {
      router.pageTemplateLoader(template, templateUrl, options, resolve, reject);
    } catch (err) {
      router.allowPageChange = true;
      throw err;
    }
  } else if (el) {
    // Load page from specified HTMLElement or by page name in pages container
    router.forward(router.getPageEl(el), options);
  } else if (name) {
    // Load page by page name in pages container
    router.forward(router.$el.children((".page[data-name=\"" + name + "\"]")).eq(0), options);
  } else if (component || componentUrl) {
    // Load from component (F7/Vue/React/...)
    try {
      router.pageComponentLoader(router.el, component, componentUrl, options, resolve, reject);
    } catch (err) {
      router.allowPageChange = true;
      throw err;
    }
  } else if (url) {
    // Load using XHR
    if (router.xhr) {
      router.xhr.abort();
      router.xhr = false;
    }
    router.xhrRequest(url, ignoreCache)
      .then(function (pageContent) {
        router.forward(router.getPageEl(pageContent), options);
      })
      .catch(function () {
        router.allowPageChange = true;
      });
  }
  return router;
}
function navigate(url, navigateOptions) {
  if ( navigateOptions === void 0 ) navigateOptions = {};

  var router = this;
  var app = router.app;
  if (!router.view) {
    app.views.main.router.navigate(url, navigateOptions);
    return router;
  }
  if (url === '#' || url === '') {
    return router;
  }

  var navigateUrl = url.replace('./', '');
  if (navigateUrl[0] !== '/' && navigateUrl.indexOf('#') !== 0) {
    var currentPath = router.currentRoute.route.parentPath || router.currentRoute.path;
    navigateUrl = ((currentPath || '/') + navigateUrl).replace('//', '/');
  }
  var route;
  if (navigateOptions.createRoute) {
    route = Utils.extend(router.findMatchingRoute(navigateUrl, true), {
      route: Utils.extend({}, navigateOptions.createRoute),
    });
  } else {
    route = router.findMatchingRoute(navigateUrl);
  }

  if (!route) {
    return router;
  }
  var options = {};
  if (route.route.options) {
    Utils.extend(options, route.route.options, navigateOptions, { route: route });
  } else {
    Utils.extend(options, navigateOptions, { route: route });
  }
  ('popup popover sheet loginScreen actions').split(' ').forEach(function (modalLoadProp) {
    if (route.route[modalLoadProp]) {
      router.modalLoad(modalLoadProp, route, options);
    }
  });
  ('url content name el component componentUrl template templateUrl').split(' ').forEach(function (pageLoadProp) {
    if (route.route[pageLoadProp]) {
      router.load(( obj = {}, obj[pageLoadProp] = route.route[pageLoadProp], obj ), options);
      var obj;
    }
  });
  // Async
  function asyncResolve(resolveParams, resolveOptions) {
    router.allowPageChange = false;
    var resolvedAsModal = false;
    ('popup popover sheet loginScreen actions').split(' ').forEach(function (modalLoadProp) {
      if (resolveParams[modalLoadProp]) {
        resolvedAsModal = true;
        var modalRoute = Utils.extend({}, route, { route: resolveParams });
        router.allowPageChange = true;
        router.modalLoad(modalLoadProp, modalRoute, Utils.extend(options, resolveOptions));
      }
    });
    if (resolvedAsModal) { return; }
    router.load(resolveParams, Utils.extend(options, resolveOptions), true);
  }
  function asyncReject() {
    router.allowPageChange = true;
  }
  if (route.route.async) {
    router.allowPageChange = false;

    route.route.async.call(router, asyncResolve, asyncReject);
  }
  // Retur Router
  return router;
}

function tabLoad(tabRoute, loadOptions) {
  if ( loadOptions === void 0 ) loadOptions = {};

  var router = this;
  var options = Utils.extend({
    animate: router.params.animate,
    pushState: true,
    history: true,
    on: {},
  }, loadOptions);

  var ignoreCache = options.ignoreCache;
  if (options.route) {
    // Set Route
    if (options.route !== router.currentRoute) {
      router.currentRoute = options.route;
    }

    // Update Browser History
    if (router.params.pushState && options.pushState && !options.reloadPrevious) {
      History.replace(
        {
          url: options.route.url,
          viewIndex: router.view.index,
        },
        (router.params.pushStateRoot || '') + router.params.pushStateSeparator + options.route.url);
    }

    // Update Router History
    if (options.history) {
      router.history[router.history.length - 1] = options.route.url;
      router.saveHistory();
    }
  }

  // Show Tab
  var ref = router.app.tab.show(("#" + (tabRoute.id)), options.animate, options.route);
  var $newTabEl = ref.$newTabEl;
  var $oldTabEl = ref.$oldTabEl;

  // Load Tab Content
  var url = tabRoute.url;
  var content = tabRoute.content;
  var el = tabRoute.el;
  var template = tabRoute.template;
  var templateUrl = tabRoute.templateUrl;
  var component = tabRoute.component;
  var componentUrl = tabRoute.componentUrl;

  function onTabLoaded() {
    // Remove theme elements
    router.removeThemeElements($newTabEl);

    $newTabEl.trigger('tab:init tab:mounted', tabRoute);
    router.emit('tabInit tabMounted', $newTabEl[0], tabRoute);
    if ($oldTabEl) {
      router.tabRemove($oldTabEl, $newTabEl, tabRoute);
    }
  }

  // Component/Template Callbacks
  function resolve(contentEl) {
    if (contentEl) {
      if (typeof contentEl === 'string') {
        $newTabEl.html(contentEl);
      } else {
        $newTabEl.html('');
        if (contentEl.f7Component) {
          contentEl.f7Component.mount(function (componentEl) {
            $newTabEl.append(componentEl);
          });
        } else {
          $newTabEl.append(contentEl);
        }
      }
      onTabLoaded();
    }
  }
  function reject() {
    router.allowPageChange = true;
    return router;
  }

  if (content) {
    $newTabEl.html(content);
    onTabLoaded();
  } else if (template || templateUrl) {
    try {
      router.tabTemplateLoader(template, templateUrl, options, resolve, reject);
    } catch (err) {
      router.allowPageChange = true;
      throw err;
    }
  } else if (el) {
    $newTabEl.html('');
    $newTabEl.append(el);
    onTabLoaded();
  } else if (component || componentUrl) {
    // Load from component (F7/Vue/React/...)
    try {
      router.tabComponentLoader($newTabEl[0], component, componentUrl, options, resolve, reject);
    } catch (err) {
      router.allowPageChange = true;
      throw err;
    }
  } else if (url) {
    // Load using XHR
    if (router.xhr) {
      router.xhr.abort();
      router.xhr = false;
    }
    router.xhrRequest(url, ignoreCache)
      .then(function (tabContent) {
        $newTabEl.html(tabContent);
        onTabLoaded();
      })
      .catch(function () {
        router.allowPageChange = true;
      });
  }
}
function tabRemove($oldTabEl, $newTabEl, tabRoute) {
  var router = this;
  $oldTabEl.trigger('tab:beforeremove', tabRoute);
  router.emit('tabBeforeRemove', $oldTabEl[0], $newTabEl[0], tabRoute);
  $oldTabEl.children().each(function (index, tabChild) {
    if (tabChild.f7Component) {
      tabChild.f7Component.destroy();
    }
  });
  $oldTabEl.html('');
}

function modalLoad(modalType, route, loadOptions) {
  if ( loadOptions === void 0 ) loadOptions = {};

  var router = this;
  var app = router.app;
  var options = Utils.extend({
    animate: router.params.animate,
    pushState: true,
    history: true,
    on: {},
  }, loadOptions);

  var modalParams = route.route[modalType];
  var modalRoute = route.route;

  var ignoreCache = options.ignoreCache;

  // Load Modal Props
  var url = modalParams.url;
  var template = modalParams.template;
  var templateUrl = modalParams.templateUrl;
  var component = modalParams.component;
  var componentUrl = modalParams.componentUrl;

  function onModalLoaded() {
    // Create Modal
    var modal = app[modalType].create(modalParams);
    modalRoute.modalInstance = modal;

    function closeOnSwipeBack() {
      modal.close();
    }
    modal.on('modalOpen', function () {
      router.once('swipeBackMove', closeOnSwipeBack);
    });
    modal.on('modalClose', function () {
      router.off('swipeBackMove', closeOnSwipeBack);
      if (!modal.closeByRouter) {
        router.back();
      }
    });

    modal.on('modalClosed', function () {
      modal.$el.trigger(((modalType.toLowerCase()) + ":beforeremove"), route, modal);
      modal.emit((modalType + "BeforeRemove"), modal.el, route, modal);
      if (modal.el.f7Component) {
        modal.el.f7Component.destroy();
      }
      Utils.nextTick(function () {
        modal.destroy();
        delete modalRoute.modalInstance;
      });
    });

    if (options.route) {
      // Update Browser History
      if (router.params.pushState && options.pushState) {
        History.push(
          {
            url: options.route.url,
            viewIndex: router.view.index,
            modal: modalType,
          },
          (router.params.pushStateRoot || '') + router.params.pushStateSeparator + options.route.url);
      }

      // Set Route
      if (options.route !== router.currentRoute) {
        router.currentRoute = Utils.extend(options.route, { modal: modal });
      }

      // Update Router History
      if (options.history) {
        router.history.push(options.route.url);
        router.saveHistory();
      }
    }

    // Remove theme elements
    router.removeThemeElements(modal.el);

    // Emit events
    modal.$el.trigger(((modalType.toLowerCase()) + ":init " + (modalType.toLowerCase()) + ":mounted"), route, modal);
    router.emit((modalType + "Init " + modalType + "Mounted"), modal.el, route, modal);
    // Open
    modal.open();
  }

  // Component/Template Callbacks
  function resolve(contentEl) {
    if (contentEl) {
      if (typeof contentEl === 'string') {
        modalParams.content = contentEl;
      } else if (contentEl.f7Component) {
        contentEl.f7Component.mount(function (componentEl) {
          modalParams.el = componentEl;
          app.root.append(componentEl);
        });
      } else {
        modalParams.el = contentEl;
      }
      onModalLoaded();
    }
  }
  function reject() {
    router.allowPageChange = true;
    return router;
  }

  if (template || templateUrl) {
    try {
      router.modalTemplateLoader(template, templateUrl, options, resolve, reject);
    } catch (err) {
      router.allowPageChange = true;
      throw err;
    }
  } else if (component || componentUrl) {
    // Load from component (F7/Vue/React/...)
    try {
      router.modalComponentLoader(app.root[0], component, componentUrl, options, resolve, reject);
    } catch (err) {
      router.allowPageChange = true;
      throw err;
    }
  } else if (url) {
    // Load using XHR
    if (router.xhr) {
      router.xhr.abort();
      router.xhr = false;
    }
    router.xhrRequest(url, ignoreCache)
      .then(function (modalContent) {
        modalParams.content = modalContent;
        onModalLoaded();
      })
      .catch(function () {
        router.allowPageChange = true;
      });
  } else {
    onModalLoaded();
  }
}
function modalRemove(modal) {
  Utils.extend(modal, { closeByRouter: true });
  modal.close();
}

function backward(el, backwardOptions) {
  var router = this;
  var app = router.app;
  var view = router.view;

  var options = Utils.extend({
    animate: router.params.animate,
    pushState: true,
  }, backwardOptions);

  var dynamicNavbar = router.dynamicNavbar;
  var separateNavbar = router.separateNavbar;

  var $newPage = $$1(el);
  var $oldPage = router.$el.children('.page-current');

  if ($newPage.length) {
    // Remove theme elements
    router.removeThemeElements($newPage);
  }

  var $navbarEl;
  var $newNavbarInner;
  var $oldNavbarInner;

  if (dynamicNavbar) {
    $newNavbarInner = $newPage.children('.navbar').children('.navbar-inner');
    if (separateNavbar) {
      $navbarEl = router.$navbarEl;
      if ($newNavbarInner.length > 0) {
        $newPage.children('.navbar').remove();
      }
      if ($newNavbarInner.length === 0 && $newPage[0].f7Page) {
        // Try from pageData
        $newNavbarInner = $newPage[0].f7Page.$navbarEl;
      }
      $oldNavbarInner = $navbarEl.find('.navbar-current');
    } else {
      $oldNavbarInner = $oldPage.children('.navbar').children('.navbar-inner');
    }
  }

  router.allowPageChange = false;
  if ($newPage.length === 0 || $oldPage.length === 0) {
    router.allowPageChange = true;
    return router;
  }

  // Remove theme elements
  router.removeThemeElements($newPage);

  // New Page
  $newPage
    .addClass('page-previous')
    .removeClass('stacked');

  if (dynamicNavbar && $newNavbarInner.length > 0) {
    $newNavbarInner
      .addClass('navbar-previous')
      .removeClass('stacked');
  }


  // Remove previous page in case of "forced"
  var backIndex;
  if (options.force) {
    if ($oldPage.prev('.page-previous:not(.stacked)').length > 0 || $oldPage.prev('.page-previous').length === 0) {
      if (router.history.indexOf(options.route.url) >= 0) {
        backIndex = router.history.length - router.history.indexOf(options.route.url) - 1;
        router.history = router.history.slice(0, router.history.indexOf(options.route.url) + 2);
        view.history = router.history;
      } else {
        if (router.history[[router.history.length - 2]]) {
          router.history[router.history.length - 2] = options.route.url;
        } else {
          router.history.unshift(router.url);
        }
      }

      if (backIndex && router.params.stackPages) {
        $oldPage.prevAll('.page-previous').each(function (index, pageToRemove) {
          var $pageToRemove = $$1(pageToRemove);
          var $navbarToRemove;
          if (separateNavbar) {
            // $navbarToRemove = $oldNavbarInner.prevAll('.navbar-previous').eq(index);
            $navbarToRemove = $$1(app.navbar.getElByPage($pageToRemove));
          }
          if ($pageToRemove[0] !== $newPage[0] && $pageToRemove.index() > $newPage.index()) {
            if (router.initialPages.indexOf($pageToRemove[0]) >= 0) {
              $pageToRemove.addClass('stacked');
              if (separateNavbar) {
                $navbarToRemove.addClass('stacked');
              }
            } else {
              router.pageCallback('beforeRemove', $pageToRemove, $navbarToRemove, 'previous', undefined, options);
              router.removeEl($pageToRemove);
              if (separateNavbar && $navbarToRemove.length > 0) {
                router.removeEl($navbarToRemove);
              }
            }
          }
        });
      } else {
        var $pageToRemove = $oldPage.prev('.page-previous:not(.stacked)');
        var $navbarToRemove;
        if (separateNavbar) {
          // $navbarToRemove = $oldNavbarInner.prev('.navbar-inner:not(.stacked)');
          $navbarToRemove = $$1(app.navbar.getElByPage($pageToRemove));
        }
        if (router.params.stackPages && router.initialPages.indexOf($pageToRemove[0]) >= 0) {
          $pageToRemove.addClass('stacked');
          $navbarToRemove.addClass('stacked');
        } else if ($pageToRemove.length > 0) {
          router.pageCallback('beforeRemove', $pageToRemove, $navbarToRemove, 'previous', undefined, options);
          router.removeEl($pageToRemove);
          if (separateNavbar && $navbarToRemove.length) {
            router.removeEl($navbarToRemove);
          }
        }
      }
    }
  }

  // Insert new page
  var newPageInDom = $newPage.parents(document).length > 0;
  var f7Component = $newPage[0].f7Component;

  function insertPage() {
    if ($newPage.next($oldPage).length === 0) {
      if (!newPageInDom && f7Component) {
        f7Component.mount(function (componentEl) {
          $$1(componentEl).insertBefore($oldPage);
        });
      } else {
        $newPage.insertBefore($oldPage);
      }
    }
    if (separateNavbar && $newNavbarInner.length) {
      $newNavbarInner.insertBefore($oldNavbarInner);
      if ($oldNavbarInner.length > 0) {
        $newNavbarInner.insertBefore($oldNavbarInner);
      } else {
        $navbarEl.append($newNavbarInner);
      }
    }
    if (!newPageInDom) {
      router.pageCallback('mounted', $newPage, $newNavbarInner, 'previous', 'current', options, $oldPage);
    }
  }

  if (options.preload) {
    // Insert Page
    insertPage();
    // Page init and before init events
    router.pageCallback('init', $newPage, $newNavbarInner, 'previous', 'current', options, $oldPage);
    if ($newPage.prevAll('.page-previous:not(.stacked)').length > 0) {
      $newPage.prevAll('.page-previous:not(.stacked)').each(function (index, pageToRemove) {
        var $pageToRemove = $$1(pageToRemove);
        var $navbarToRemove;
        if (separateNavbar) {
          // $navbarToRemove = $newNavbarInner.prevAll('.navbar-previous:not(.stacked)').eq(index);
          $navbarToRemove = $$1(app.navbar.getElByPage($pageToRemove));
        }
        if (router.params.stackPages && router.initialPages.indexOf(pageToRemove) >= 0) {
          $pageToRemove.addClass('stacked');
          if (separateNavbar) {
            $navbarToRemove.addClass('stacked');
          }
        } else {
          router.pageCallback('beforeRemove', $pageToRemove, $navbarToRemove, 'previous', undefined);
          router.removeEl($pageToRemove);
          if (separateNavbar && $navbarToRemove.length) {
            router.removeEl($navbarToRemove);
          }
        }
      });
    }
    router.allowPageChange = true;
    return router;
  }

  // History State
  if (router.params.pushState && options.pushState) {
    if (backIndex) { History.go(-backIndex); }
    else { History.back(); }
  }

  // Update History
  if (router.history.length === 1) {
    router.history.unshift(router.url);
  }
  router.history.pop();
  router.saveHistory();

  // Current Route
  router.currentRoute = options.route;

  // Insert Page
  insertPage();

  // Load Tab
  if (options.route.route.tab) {
    router.tabLoad(options.route.route.tab, Utils.extend({}, options, {
      history: false,
      pushState: false,
    }));
  }

  // Page init and before init events
  router.pageCallback('init', $newPage, $newNavbarInner, 'previous', 'current', options, $oldPage);

  // Before animation callback
  router.pageCallback('beforeIn', $newPage, $newNavbarInner, 'previous', 'current', options);
  router.pageCallback('beforeOut', $oldPage, $oldNavbarInner, 'current', 'next', options);

  // Animation
  function afterAnimation() {
    // Set classes
    var pageClasses = 'page-previous page-current page-next';
    var navbarClasses = 'navbar-previous navbar-current navbar-next';
    $newPage.removeClass(pageClasses).addClass('page-current');
    $oldPage.removeClass(pageClasses).addClass('page-next');
    if (dynamicNavbar) {
      $newNavbarInner.removeClass(navbarClasses).addClass('navbar-current');
      $oldNavbarInner.removeClass(navbarClasses).addClass('navbar-next');
    }

    // After animation event
    router.pageCallback('afterIn', $newPage, $newNavbarInner, 'previous', 'current', options);
    router.pageCallback('afterOut', $oldPage, $oldNavbarInner, 'current', 'next', options);

    // Remove Old Page
    if (router.params.stackPages && router.initialPages.indexOf($oldPage[0]) >= 0) {
      $oldPage.addClass('stacked');
      if (separateNavbar) {
        $oldNavbarInner.addClass('stacked');
      }
    } else {
      router.pageCallback('beforeRemove', $oldPage, $oldNavbarInner, 'next', undefined, options);
      router.removeEl($oldPage);
      if (separateNavbar && $oldNavbarInner.length) {
        router.removeEl($oldNavbarInner);
      }
    }

    router.allowPageChange = true;
    router.emit('routeChanged', router.currentRoute, router.previousRoute, router);

    // Preload previous page
    var preloadPreviousPage = app.theme === 'ios' ? (router.params.preloadPreviousPage || router.params.iosSwipeBack) : router.params.preloadPreviousPage;
    if (preloadPreviousPage) {
      router.back(router.history[router.history.length - 2], { preload: true });
    }
    if (router.params.pushState) {
      History.clearRouterQueue();
    }
  }

  function setPositionClasses() {
    var pageClasses = 'page-previous page-current page-next';
    var navbarClasses = 'navbar-previous navbar-current navbar-next';
    $oldPage.removeClass(pageClasses).addClass('page-current');
    $newPage.removeClass(pageClasses).addClass('page-previous');
    if (dynamicNavbar) {
      $oldNavbarInner.removeClass(navbarClasses).addClass('navbar-current');
      $newNavbarInner.removeClass(navbarClasses).addClass('navbar-previous');
    }
  }

  if (options.animate) {
    setPositionClasses();
    router.animate($oldPage, $newPage, $oldNavbarInner, $newNavbarInner, 'backward', function () {
      afterAnimation();
    });
  } else {
    afterAnimation();
  }

  return router;
}
function loadBack(backParams, backOptions, ignorePageChange) {
  var router = this;

  if (!router.allowPageChange && !ignorePageChange) { return router; }
  var params = backParams;
  var options = backOptions;
  var url = params.url;
  var content = params.content;
  var el = params.el;
  var name = params.name;
  var template = params.template;
  var templateUrl = params.templateUrl;
  var component = params.component;
  var componentUrl = params.componentUrl;
  var ignoreCache = options.ignoreCache;

  if (
    options.route.url &&
    router.url === options.route.url &&
    !(options.reloadCurrent || options.reloadPrevious) &&
    !router.params.allowDuplicateUrls
    ) {
    return false;
  }

  if (!options.route && url) {
    options.route = router.findMatchingRoute(url, true);
  }

  // Component Callbacks
  function resolve(pageEl, newOptions) {
    return router.backward(pageEl, Utils.extend(options, newOptions));
  }
  function reject() {
    router.allowPageChange = true;
    return router;
  }

  // Proceed
  if (content) {
    router.backward(router.getPageEl(content), options);
  } else if (template || templateUrl) {
    // Parse template and send page element
    try {
      router.pageTemplateLoader(template, templateUrl, options, resolve, reject);
    } catch (err) {
      router.allowPageChange = true;
      throw err;
    }
  } else if (el) {
    // Load page from specified HTMLElement or by page name in pages container
    router.backward(router.getPageEl(el), options);
  } else if (name) {
    // Load page by page name in pages container
    router.backward(router.$el.children((".page[data-name=\"" + name + "\"]")).eq(0), options);
  } else if (component || componentUrl) {
    // Load from component (F7/Vue/React/...)
    try {
      router.pageComponentLoader(router.el, component, componentUrl, options, resolve, reject);
    } catch (err) {
      router.allowPageChange = true;
      throw err;
    }
  } else if (url) {
    // Load using XHR
    if (router.xhr) {
      router.xhr.abort();
      router.xhr = false;
    }
    router.xhrRequest(url, ignoreCache)
      .then(function (pageContent) {
        router.backward(router.getPageEl(pageContent), options);
      })
      .catch(function () {
        router.allowPageChange = true;
      });
  }
  return router;
}
function back() {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  var navigateUrl;
  var navigateOptions;
  if (typeof args[0] === 'object') {
    navigateOptions = args[0] || {};
  } else {
    navigateUrl = args[0];
    navigateOptions = args[1] || {};
  }

  var router = this;
  var app = router.app;
  if (!router.view) {
    app.views.main.router.back(navigateUrl, navigateOptions);
    return router;
  }

  var currentRouteIsModal = router.currentRoute.modal;
  var modalType;
  if (!currentRouteIsModal) {
    ('popup popover sheet loginScreen actions').split(' ').forEach(function (modalLoadProp) {
      if (router.currentRoute.route[modalLoadProp]) {
        currentRouteIsModal = true;
        modalType = modalLoadProp;
      }
    });
  }
  if (currentRouteIsModal) {
    var modalToClose = router.currentRoute.modal ||
                         router.currentRoute.route.modalInstance ||
                         app[modalType].get();
    var previousUrl = router.history[router.history.length - 2];
    var previousRoute = router.findMatchingRoute(previousUrl);
    if (!previousRoute && previousUrl) {
      previousRoute = {
        url: previousUrl,
        path: previousUrl.split('?')[0],
        query: Utils.parseUrlQuery(previousUrl),
        route: {
          path: previousUrl.split('?')[0],
          url: previousUrl,
        },
      };
    }
    if (!previousRoute || !modalToClose) {
      return router;
    }
    if (router.params.pushState && navigateOptions.pushState !== false) {
      History.back();
    }
    router.currentRoute = previousRoute;
    router.history.pop();
    router.saveHistory();
    router.modalRemove(modalToClose);
    return router;
  }
  var $previousPage = router.$el.children('.page-current').prevAll('.page-previous').eq(0);
  if (!navigateOptions.force && $previousPage.length > 0) {
    if (router.params.pushState && $previousPage[0].f7Page && router.history[router.history.length - 2] !== $previousPage[0].f7Page.route.url) {
      router.back(router.history[router.history.length - 2], Utils.extend(navigateOptions, { force: true }));
      return router;
    }
    router.loadBack({ el: $previousPage }, Utils.extend(navigateOptions, {
      route: $previousPage[0].f7Page.route,
    }));
    return router;
  }

  // Navigate URL
  if (navigateUrl === '#') {
    navigateUrl = undefined;
  }
  if (navigateUrl && navigateUrl[0] !== '/' && navigateUrl.indexOf('#') !== 0) {
    navigateUrl = ((router.path || '/') + navigateUrl).replace('//', '/');
  }
  if (!navigateUrl && router.history.length > 1) {
    navigateUrl = router.history[router.history.length - 2];
  }

  // Find route to load
  var route = router.findMatchingRoute(navigateUrl);
  if (!route) {
    if (navigateUrl) {
      route = {
        url: navigateUrl,
        path: navigateUrl.split('?')[0],
        query: Utils.parseUrlQuery(navigateUrl),
        route: {
          path: navigateUrl.split('?')[0],
          url: navigateUrl,
        },
      };
    }
  }
  if (!route) {
    return router;
  }
  var options = {};
  if (route.route.options) {
    Utils.extend(options, route.route.options, navigateOptions, { route: route });
  } else {
    Utils.extend(options, navigateOptions, { route: route });
  }

  if (options.force && router.params.stackPages) {
    router.$el.children('.page-previous.stacked').each(function (index, pageEl) {
      if (pageEl.f7Page && pageEl.f7Page.route && pageEl.f7Page.route.url === route.url) {
        router.loadBack({ el: pageEl }, options);
      }
    });
  }

  ('url content name el component componentUrl template templateUrl').split(' ').forEach(function (pageLoadProp) {
    if (route.route[pageLoadProp]) {
      router.loadBack(( obj = {}, obj[pageLoadProp] = route.route[pageLoadProp], obj ), options);
      var obj;
    }
  });
  // Async
  function asyncResolve(resolveParams, resolveOptions) {
    router.allowPageChange = false;
    router.loadBack(resolveParams, Utils.extend(options, resolveOptions), true);
  }
  function asyncReject() {
    router.allowPageChange = true;
  }
  if (route.route.async) {
    router.allowPageChange = false;

    route.route.async.call(router, asyncResolve, asyncReject);
  }
  // Return Router
  return router;
}

var Router$1 = (function (Framework7Class) {
  function Router$1(app, view) {
    Framework7Class.call(this, {}, [typeof view === 'undefined' ? app : view]);
    var router = this;

    // Is App Router
    router.isAppRouter = typeof view === 'undefined';

    if (router.isAppRouter) {
      // App Router
      Utils.extend(false, router, {
        app: app,
        params: app.params.view,
        routes: app.routes || [],
        cache: app.cache,
      });
    } else {
      // View Router
      Utils.extend(false, router, {
        app: app,
        view: view,
        params: view.params,
        routes: view.routes,
        $el: view.$el,
        $navbarEl: view.$navbarEl,
        navbarEl: view.navbarEl,
        history: view.history,
        scrollHistory: view.scrollHistory,
        cache: app.cache,
        dynamicNavbar: app.theme === 'ios' && view.params.iosDynamicNavbar,
        separateNavbar: app.theme === 'ios' && view.params.iosDynamicNavbar && view.params.iosSeparateDynamicNavbar,
        initialPages: [],
        initialNavbars: [],
      });
    }

    // Install Modules
    router.useInstanceModules();

    // Temporary Dom
    router.tempDom = document.createElement('div');

    // AllowPageChage
    router.allowPageChange = true;

    // Current Route
    var currentRoute = {};
    var previousRoute = {};
    Object.defineProperty(router, 'currentRoute', {
      enumerable: true,
      configurable: true,
      set: function set(newRoute) {
        if ( newRoute === void 0 ) newRoute = {};

        previousRoute = Utils.extend({}, currentRoute);
        currentRoute = newRoute;
        if (!currentRoute) { return; }
        router.url = currentRoute.url;
        router.emit('routeChange', newRoute, previousRoute, router);
      },
      get: function get() {
        return currentRoute;
      },
    });
    Object.defineProperty(router, 'previousRoute', {
      enumerable: true,
      configurable: true,
      get: function get() {
        return previousRoute;
      },
      set: function set(newRoute) {
        previousRoute = newRoute;
      },
    });
    Utils.extend(router, {
      // Load
      forward: forward,
      load: load,
      navigate: navigate,
      // Tab
      tabLoad: tabLoad,
      tabRemove: tabRemove,
      // Modal
      modalLoad: modalLoad,
      modalRemove: modalRemove,
      // Back
      backward: backward,
      loadBack: loadBack,
      back: back,
    });

    return router;
  }

  if ( Framework7Class ) Router$1.__proto__ = Framework7Class;
  Router$1.prototype = Object.create( Framework7Class && Framework7Class.prototype );
  Router$1.prototype.constructor = Router$1;
  Router$1.prototype.animateWithCSS = function animateWithCSS (oldPage, newPage, oldNavbarInner, newNavbarInner, direction, callback) {
    var router = this;
    // Router Animation class
    var routerTransitionClass = "router-transition-" + direction + " router-transition-css-" + direction;

    // AnimationEnd Callback
    (direction === 'forward' ? newPage : oldPage).animationEnd(function () {
      if (router.dynamicNavbar) {
        if (newNavbarInner.hasClass('sliding')) {
          newNavbarInner.find('.title, .left, .right, .left .icon, .subnavbar').transform('');
        } else {
          newNavbarInner.find('.sliding').transform('');
        }
        if (oldNavbarInner.hasClass('sliding')) {
          oldNavbarInner.find('.title, .left, .right, .left .icon, .subnavbar').transform('');
        } else {
          oldNavbarInner.find('.sliding').transform('');
        }
      }
      router.$el.removeClass(routerTransitionClass);
      if (callback) { callback(); }
    });

    function prepareNavbars() {
      var slidingEls;
      if (newNavbarInner.hasClass('sliding')) {
        slidingEls = newNavbarInner.children('.left, .right, .title, .subnavbar');
      } else {
        slidingEls = newNavbarInner.find('.sliding');
      }
      if (!slidingEls) { return; }
      var navbarWidth;
      if (!router.separateNavbar) {
        navbarWidth = newNavbarInner[0].offsetWidth;
      }

      var oldNavbarTitleEl;
      if (oldNavbarInner.children('.title.sliding').length > 0) {
        oldNavbarTitleEl = oldNavbarInner.children('.title.sliding');
      } else {
        oldNavbarTitleEl = oldNavbarInner.hasClass('sliding') && oldNavbarInner.children('.title');
      }

      slidingEls.each(function (index, slidingEl) {
        var $slidingEl = $$1(slidingEl);
        var slidingOffset = direction === 'forward' ? slidingEl.f7NavbarRightOffset : slidingEl.f7NavbarLeftOffset;
        if (router.params.iosAnimateNavbarBackIcon && $slidingEl.hasClass('left') && $slidingEl.find('.back .icon').length > 0) {
          var iconSlidingOffset = -slidingOffset;
          var iconTextEl = $slidingEl.find('.back span').eq(0);
          if (!router.separateNavbar) {
            if (direction === 'forward') {
              iconSlidingOffset -= navbarWidth;
            } else {
              iconSlidingOffset += navbarWidth / 5;
            }
          }
          $slidingEl.find('.back .icon').transform(("translate3d(" + iconSlidingOffset + "px,0,0)"));
          if (oldNavbarTitleEl && iconTextEl.length > 0) {
            oldNavbarTitleEl[0].f7NavbarLeftOffset += iconTextEl[0].offsetLeft;
          }
        }
        $slidingEl.transform(("translate3d(" + slidingOffset + "px,0,0)"));
      });
    }
    function animateNavbars() {
      var animateIcon = router.params.iosAnimateNavbarBackIcon;

      var navbarIconOffset = 0;
      var oldNavbarWidth;
      if (!router.separateNavbar && animateIcon) {
        oldNavbarWidth = oldNavbarInner[0].offsetWidth;
        if (direction === 'forward') {
          navbarIconOffset = oldNavbarWidth / 5;
        } else {
          navbarIconOffset = -oldNavbarWidth;
        }
      }

      // Old Navbar Sliding
      var oldNavbarSlidingEls;
      if (oldNavbarInner.hasClass('sliding')) {
        oldNavbarSlidingEls = oldNavbarInner.children('.left, .right, .title, .subnavbar');
      } else {
        oldNavbarSlidingEls = oldNavbarInner.find('.sliding');
      }

      if (oldNavbarSlidingEls) {
        oldNavbarSlidingEls.each(function (index, slidingEl) {
          var $slidingEl = $$1(slidingEl);
          var offset = direction === 'forward' ? slidingEl.f7NavbarLeftOffset : slidingEl.f7NavbarRightOffset;
          $slidingEl.transform(("translate3d(" + offset + "px,0,0)"));
          if (animateIcon) {
            if ($slidingEl.hasClass('left') && $slidingEl.find('.back .icon').length > 0) {
              $slidingEl.find('.back .icon').transform(("translate3d(" + (-offset + navbarIconOffset) + "px,0,0)"));
            }
          }
        });
      }
    }
    if (router.dynamicNavbar) {
      // Prepare Navbars
      prepareNavbars();
      Utils.nextTick(function () {
        // Add class, start animation
        animateNavbars();
        router.$el.addClass(routerTransitionClass);
      });
    } else {
      // Add class, start animation
      router.$el.addClass(routerTransitionClass);
    }
  };
  Router$1.prototype.animateWithJS = function animateWithJS (oldPage, newPage, oldNavbarInner, newNavbarInner, direction, callback) {
    var router = this;
    var dynamicNavbar = router.dynamicNavbar;
    var separateNavbar = router.separateNavbar;
    var animateIcon = router.params.iosAnimateNavbarBackIcon;
    var ios = router.app.theme === 'ios';
    var duration = ios ? 400 : 250;
    var routerTransitionClass = "router-transition-" + direction + " router-transition-js-" + direction;

    var startTime = null;
    var done = false;

    var newNavEls;
    var oldNavEls;
    var navbarWidth = 0;

    function animatableNavEl(el, navbarInner) {
      var $el = $$1(el);
      var isSliding = $el.hasClass('sliding') || navbarInner.hasClass('sliding');
      var isSubnavbar = $el.hasClass('subnavbar');
      var needsOpacityTransition = isSliding ? !isSubnavbar : true;
      var hasIcon = isSliding && animateIcon && $el.hasClass('left') && $el.find('.back .icon').length > 0;
      var $iconEl;
      if (hasIcon) { $iconEl = $el.find('.back .icon'); }
      return {
        $el: $el,
        $iconEl: $iconEl,
        hasIcon: hasIcon,
        leftOffset: $el[0].f7NavbarLeftOffset,
        rightOffset: $el[0].f7NavbarRightOffset,
        isSliding: isSliding,
        isSubnavbar: isSubnavbar,
        needsOpacityTransition: needsOpacityTransition,
      };
    }
    if (dynamicNavbar) {
      newNavEls = [];
      oldNavEls = [];
      newNavbarInner.children('.left, .right, .title, .subnavbar').each(function (index, navEl) {
        newNavEls.push(animatableNavEl(navEl, newNavbarInner));
      });
      oldNavbarInner.children('.left, .right, .title, .subnavbar').each(function (index, navEl) {
        oldNavEls.push(animatableNavEl(navEl, oldNavbarInner));
      });
      if (!separateNavbar) {
        navbarWidth = newNavbarInner[0].offsetWidth;
      }
      [oldNavEls, newNavEls].forEach(function (navEls) {
        navEls.forEach(function (navEl) {
          var n = navEl;
          var isSliding = navEl.isSliding;
          var $el = navEl.$el;
          var otherEls = navEls === oldNavEls ? newNavEls : oldNavEls;
          if (!(isSliding && $el.hasClass('title') && otherEls)) { return; }
          otherEls.forEach(function (otherNavEl) {
            if (otherNavEl.$el.hasClass('left') && otherNavEl.hasIcon) {
              var iconTextEl = otherNavEl.$el.find('.back span')[0];
              n.leftOffset += iconTextEl ? iconTextEl.offsetLeft : 0;
            }
          });
        });
      });
    }

    var $shadowEl;
    var $opacityEl;

    if (ios) {
      $shadowEl = $$1('<div class="page-shadow-effect"></div>');
      $opacityEl = $$1('<div class="page-opacity-effect"></div>');

      if (direction === 'forward') {
        newPage.append($shadowEl);
        oldPage.append($opacityEl);
      } else {
        newPage.append($opacityEl);
        oldPage.append($shadowEl);
      }
    }
    var easing = Utils.bezier(0.25, 0.1, 0.25, 1);

    function onDone() {
      newPage.transform('').css('opacity', '');
      oldPage.transform('').css('opacity', '');
      if (ios) {
        $shadowEl.remove();
        $opacityEl.remove();
        if (dynamicNavbar) {
          newNavEls.forEach(function (navEl) {
            navEl.$el.transform('');
            navEl.$el.css('opacity', '');
          });
          oldNavEls.forEach(function (navEl) {
            navEl.$el.transform('');
            navEl.$el.css('opacity', '');
          });
          newNavEls = [];
          oldNavEls = [];
        }
      }

      router.$el.removeClass(routerTransitionClass);

      if (callback) { callback(); }
    }

    function render() {
      var time = Utils.now();
      if (!startTime) { startTime = time; }
      var progress = Math.max(Math.min((time - startTime) / duration, 1), 0);
      var easeProgress = easing(progress);

      if (progress >= 1) {
        done = true;
      }
      if (ios) {
        if (direction === 'forward') {
          newPage.transform(("translate3d(" + ((1 - easeProgress) * 100) + "%,0,0)"));
          oldPage.transform(("translate3d(" + (-easeProgress * 20) + "%,0,0)"));
          $shadowEl[0].style.opacity = easeProgress;
          $opacityEl[0].style.opacity = easeProgress;
        } else {
          newPage.transform(("translate3d(" + (-(1 - easeProgress) * 20) + "%,0,0)"));
          oldPage.transform(("translate3d(" + (easeProgress * 100) + "%,0,0)"));
          $shadowEl[0].style.opacity = 1 - easeProgress;
          $opacityEl[0].style.opacity = 1 - easeProgress;
        }
        if (dynamicNavbar) {
          newNavEls.forEach(function (navEl) {
            var $el = navEl.$el;
            var offset = direction === 'forward' ? navEl.rightOffset : navEl.leftOffset;
            if (navEl.needsOpacityTransition) {
              $el[0].style.opacity = easeProgress;
            }
            if (navEl.isSliding) {
              $el.transform(("translate3d(" + (offset * (1 - easeProgress)) + "px,0,0)"));
            }
            if (navEl.hasIcon) {
              if (direction === 'forward') {
                navEl.$iconEl.transform(("translate3d(" + ((-offset - navbarWidth) * (1 - easeProgress)) + "px,0,0)"));
              } else {
                navEl.$iconEl.transform(("translate3d(" + ((-offset + (navbarWidth / 5)) * (1 - easeProgress)) + "px,0,0)"));
              }
            }
          });
          oldNavEls.forEach(function (navEl) {
            var $el = navEl.$el;
            var offset = direction === 'forward' ? navEl.leftOffset : navEl.rightOffset;
            if (navEl.needsOpacityTransition) {
              $el[0].style.opacity = (1 - easeProgress);
            }
            if (navEl.isSliding) {
              $el.transform(("translate3d(" + (offset * (easeProgress)) + "px,0,0)"));
            }
            if (navEl.hasIcon) {
              if (direction === 'forward') {
                navEl.$iconEl.transform(("translate3d(" + ((-offset + (navbarWidth / 5)) * (easeProgress)) + "px,0,0)"));
              } else {
                navEl.$iconEl.transform(("translate3d(" + ((-offset - navbarWidth) * (easeProgress)) + "px,0,0)"));
              }
            }
          });
        }
      } else {
        if (direction === 'forward') {
          newPage.transform(("translate3d(0, " + ((1 - easeProgress) * 56) + "px,0)"));
          newPage.css('opacity', easeProgress);
        } else {
          oldPage.transform(("translate3d(0, " + (easeProgress * 56) + "px,0)"));
          oldPage.css('opacity', 1 - easeProgress);
        }
      }

      if (done) {
        onDone();
        return;
      }
      Utils.nextFrame(render);
    }

    router.$el.addClass(routerTransitionClass);

    Utils.nextFrame(render);
  };
  Router$1.prototype.animate = function animate () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    // Args: oldPage, newPage, oldNavbarInner, newNavbarInner, direction, callback
    var router = this;
    if (router.params.animateCustom) {
      router.params.animateCustom.apply(router, args);
    } else if (router.params.animateWithJS) {
      router.animateWithJS.apply(router, args);
    } else {
      router.animateWithCSS.apply(router, args);
    }
  };
  Router$1.prototype.removeEl = function removeEl (el) {
    if (!el) { return; }
    var router = this;
    var $el = $$1(el);
    if ($el.length === 0) { return; }
    if ($el[0].f7Component && $el[0].f7Component.destroy) {
      $el[0].f7Component.destroy();
    }
    if (!router.params.removeElements) {
      return;
    }
    if (router.params.removeElementsWithTimeout) {
      setTimeout(function () {
        $el.remove();
      }, router.params.removeElementsTimeout);
    } else {
      $el.remove();
    }
  };
  Router$1.prototype.getPageEl = function getPageEl (content) {
    var router = this;
    if (typeof content === 'string') {
      router.tempDom.innerHTML = content;
    } else {
      if ($$1(content).hasClass('page')) {
        return content;
      }
      router.tempDom.innerHTML = '';
      $$1(router.tempDom).append(content);
    }

    return router.findElement('.page', router.tempDom);
  };
  Router$1.prototype.findElement = function findElement (stringSelector, container, notStacked) {
    var router = this;
    var view = router.view;
    var app = router.app;

    // Modals Selector
    var modalsSelector = '.popup, .dialog, .popover, .actions-modal, .sheet-modal, .login-screen, .page';

    var $container = $$1(container);
    var selector = stringSelector;
    if (notStacked) { selector += ':not(.stacked)'; }

    var found = $container
      .find(selector)
      .filter(function (index, el) { return $$1(el).parents(modalsSelector).length === 0; });

    if (found.length > 1) {
      if (typeof view.selector === 'string') {
        // Search in related view
        found = $container.find(((view.selector) + " " + selector));
      }
      if (found.length > 1) {
        // Search in main view
        found = $container.find(("." + (app.params.viewMainClass) + " " + selector));
      }
    }
    if (found.length === 1) { return found; }

    // Try to find not stacked
    if (!notStacked) { found = router.findElement(selector, $container, true); }
    if (found && found.length === 1) { return found; }
    if (found && found.length > 1) { return $$1(found[0]); }
    return undefined;
  };
  Router$1.prototype.flattenRoutes = function flattenRoutes (routes) {
    var this$1 = this;
    if ( routes === void 0 ) routes = this.routes;

    var flattenedRoutes = [];
    routes.forEach(function (route) {
      if ('routes' in route) {
        var mergedPathsRoutes = route.routes.map(function (childRoute) {
          var cRoute = Utils.extend({}, childRoute);
          cRoute.path = (((route.path) + "/" + (cRoute.path))).replace('///', '/').replace('//', '/');
          return cRoute;
        });
        flattenedRoutes = flattenedRoutes.concat(route, this$1.flattenRoutes(mergedPathsRoutes));
      } else if ('tabs' in route && route.tabs) {
        var mergedPathsRoutes$1 = route.tabs.map(function (tabRoute) {
          var tRoute = Utils.extend({}, route, {
            path: (((route.path) + "/" + (tabRoute.path))).replace('///', '/').replace('//', '/'),
            parentPath: route.path,
            tab: tabRoute,
          });
          delete tRoute.tabs;
          return tRoute;
        });
        flattenedRoutes = flattenedRoutes.concat(this$1.flattenRoutes(mergedPathsRoutes$1));
      } else {
        flattenedRoutes.push(route);
      }
    });
    return flattenedRoutes;
  };
  Router$1.prototype.findMatchingRoute = function findMatchingRoute (url, parseOnly) {
    if (!url) { return undefined; }
    var router = this;
    var routes = router.routes;
    var flattenedRoutes = router.flattenRoutes(routes);
    var query = Utils.parseUrlQuery(url);
    var hash = url.split('#')[1];
    var params = {};
    var path = url.split('#')[0].split('?')[0];
    var urlParts = path.split('/').filter(function (part) { return part !== ''; });
    if (parseOnly) {
      return {
        query: query,
        hash: hash,
        params: params,
        url: url,
        path: path,
      };
    }

    var matchingRoute;
    function parseRoute(str) {
      if ( str === void 0 ) str = '';

      var parts = [];
      str.split('/').forEach(function (part) {
        if (part !== '') {
          if (part.indexOf(':') === 0) {
            parts.push({
              name: part.replace(':', ''),
            });
          } else { parts.push(part); }
        }
      });
      return parts;
    }
    flattenedRoutes.forEach(function (route) {
      if (matchingRoute) { return; }
      var parsedRoute = parseRoute(route.path);
      if (parsedRoute.length !== urlParts.length) { return; }
      var matchedParts = 0;
      parsedRoute.forEach(function (routePart, index) {
        if (typeof routePart === 'string' && urlParts[index] === routePart) {
          matchedParts += 1;
        }
        if (typeof routePart === 'object') {
          params[routePart.name] = urlParts[index];
          matchedParts += 1;
        }
      });
      if (matchedParts === urlParts.length) {
        matchingRoute = {
          query: query,
          hash: hash,
          params: params,
          url: url,
          path: path,
          route: route,
        };
      }
    });
    return matchingRoute;
  };
  Router$1.prototype.removeFromXhrCache = function removeFromXhrCache (url) {
    var router = this;
    var xhrCache = router.cache.xhr;
    var index = false;
    for (var i = 0; i < xhrCache.length; i += 1) {
      if (xhrCache[i].url === url) { index = i; }
    }
    if (index !== false) { xhrCache.splice(index, 1); }
  };
  Router$1.prototype.xhrRequest = function xhrRequest (requestUrl, ignoreCache) {
    var router = this;
    var params = router.params;
    var url = requestUrl;
    // should we ignore get params or not
    if (params.xhrCacheIgnoreGetParameters && url.indexOf('?') >= 0) {
      url = url.split('?')[0];
    }

    return Utils.promise(function (resolve, reject) {
      if (params.xhrCache && !ignoreCache && url.indexOf('nocache') < 0 && params.xhrCacheIgnore.indexOf(url) < 0) {
        for (var i = 0; i < router.cache.xhr.length; i += 1) {
          var cachedUrl = router.cache.xhr[i];
          if (cachedUrl.url === url) {
            // Check expiration
            if (Utils.now() - cachedUrl.time < params.xhrCacheDuration) {
              // Load from cache
              resolve(cachedUrl.content);
              return;
            }
          }
        }
      }
      router.xhr = $$1.ajax({
        url: url,
        method: 'GET',
        beforeSend: function beforeSend() {
          router.emit('routerAjaxStart', router.xhr);
        },
        complete: function complete(xhr, status) {
          router.emit('routerAjaxComplete', xhr);
          if ((status !== 'error' && status !== 'timeout' && (xhr.status >= 200 && xhr.status < 300)) || xhr.status === 0) {
            if (params.xhrCache && xhr.responseText !== '') {
              router.removeFromXhrCache(url);
              router.cache.xhr.push({
                url: url,
                time: Utils.now(),
                content: xhr.responseText,
              });
            }
            router.emit('routerAjaxSuccess', xhr);
            resolve(xhr.responseText);
          } else {
            router.emit('routerAjaxError', xhr);
            reject(xhr);
          }
        },
        error: function error(xhr) {
          router.emit('routerAjaxError', xhr);
          reject(xhr);
        },
      });
    });
  };
  // Remove theme elements
  Router$1.prototype.removeThemeElements = function removeThemeElements (el) {
    var router = this;
    var theme = router.app.theme;
    $$1(el).find(("." + (theme === 'md' ? 'ios' : 'md') + "-only, .if-" + (theme === 'md' ? 'ios' : 'md'))).remove();
  };
  Router$1.prototype.templateLoader = function templateLoader (template, templateUrl, options, resolve, reject) {
    var router = this;
    function compile(t) {
      var compiledHtml;
      var context;
      try {
        context = options.context || {};
        if (typeof context === 'function') { context = context.call(router); }
        else if (typeof context === 'string') {
          try {
            context = JSON.parse(context);
          } catch (err) {
            reject();
            throw (err);
          }
        }
        if (typeof t === 'function') {
          compiledHtml = t(context);
        } else {
          compiledHtml = t7.compile(t)(Utils.extend({}, context || {}, {
            $app: router.app,
            $root: Utils.extend({}, router.app.data, router.app.methods),
            $route: options.route,
            $router: router,
            $theme: {
              ios: router.app.theme === 'ios',
              md: router.app.theme === 'md',
            },
          }));
        }
      } catch (err) {
        reject();
        throw (err);
      }
      resolve(compiledHtml, { context: context });
    }
    if (templateUrl) {
      // Load via XHR
      if (router.xhr) {
        router.xhr.abort();
        router.xhr = false;
      }
      router
        .xhrRequest(templateUrl)
        .then(function (templateContent) {
          compile(templateContent);
        })
        .catch(function () {
          reject();
        });
    } else {
      compile(template);
    }
  };
  Router$1.prototype.modalTemplateLoader = function modalTemplateLoader (template, templateUrl, options, resolve, reject) {
    var router = this;
    return router.templateLoader(template, templateUrl, options, function (html) {
      resolve(html);
    }, reject);
  };
  Router$1.prototype.tabTemplateLoader = function tabTemplateLoader (template, templateUrl, options, resolve, reject) {
    var router = this;
    return router.templateLoader(template, templateUrl, options, function (html) {
      resolve(html);
    }, reject);
  };
  Router$1.prototype.pageTemplateLoader = function pageTemplateLoader (template, templateUrl, options, resolve, reject) {
    var router = this;
    return router.templateLoader(template, templateUrl, options, function (html, newOptions) {
      if ( newOptions === void 0 ) newOptions = {};

      resolve(router.getPageEl(html), newOptions);
    }, reject);
  };
  Router$1.prototype.componentLoader = function componentLoader (component, componentUrl, options, resolve, reject) {
    var router = this;
    var url = typeof component === 'string' ? component : componentUrl;
    function compile(c) {
      var createdComponent = Component.create(c, {
        $: $$1,
        $$: $$1,
        $app: router.app,
        $root: Utils.extend({}, router.app.data, router.app.methods),
        $route: options.route,
        $router: router,
        $dom7: $$1,
        $theme: {
          ios: router.app.theme === 'ios',
          md: router.app.theme === 'md',
        },
      });
      resolve(createdComponent.el, { pageEvents: createdComponent.on });
    }
    if (url) {
      // Load via XHR
      if (router.xhr) {
        router.xhr.abort();
        router.xhr = false;
      }
      router
        .xhrRequest(url)
        .then(function (loadedComponent) {
          compile(Component.parse(loadedComponent));
        })
        .catch(function () {
          reject();
        });
    } else {
      compile(component);
    }
  };
  Router$1.prototype.modalComponentLoader = function modalComponentLoader (rootEl, component, componentUrl, options, resolve, reject) {
    var router = this;
    router.componentLoader(component, componentUrl, options, function (el) {
      resolve(el);
    }, reject);
  };
  Router$1.prototype.tabComponentLoader = function tabComponentLoader (tabEl, component, componentUrl, options, resolve, reject) {
    var router = this;
    router.componentLoader(component, componentUrl, options, function (el) {
      resolve(el);
    }, reject);
  };
  Router$1.prototype.pageComponentLoader = function pageComponentLoader (routerEl, component, componentUrl, options, resolve, reject) {
    var router = this;
    router.componentLoader(component, componentUrl, options, function (el, newOptions) {
      if ( newOptions === void 0 ) newOptions = {};

      resolve(el, newOptions);
    }, reject);
  };
  Router$1.prototype.getPageData = function getPageData (pageEl, navbarEl, from, to, route, pageFromEl) {
    if ( route === void 0 ) route = {};

    var router = this;
    var $pageEl = $$1(pageEl);
    var $navbarEl = $$1(navbarEl);
    var currentPage = $pageEl[0].f7Page || {};
    var direction;
    var pageFrom;
    if ((from === 'next' && to === 'current') || (from === 'current' && to === 'previous')) { direction = 'forward'; }
    if ((from === 'current' && to === 'next') || (from === 'previous' && to === 'current')) { direction = 'backward'; }
    if (currentPage && !currentPage.fromPage) {
      var $pageFromEl = $$1(pageFromEl);
      if ($pageFromEl.length) {
        pageFrom = $pageFromEl[0].f7Page;
      }
    }
    var page = {
      app: router.app,
      view: router.view,
      $el: $pageEl,
      el: $pageEl[0],
      $pageEl: $pageEl,
      pageEl: $pageEl[0],
      $navbarEl: $navbarEl,
      navbarEl: $navbarEl[0],
      name: $pageEl.attr('data-name'),
      position: from,
      from: from,
      to: to,
      direction: direction,
      route: currentPage.route ? currentPage.route : route,
      pageFrom: currentPage.pageFrom || pageFrom,
    };

    if ($navbarEl && $navbarEl[0]) {
      $navbarEl[0].f7Page = page;
    }
    $pageEl[0].f7Page = page;
    return page;
  };
  // Callbacks
  Router$1.prototype.pageCallback = function pageCallback (callback, pageEl, navbarEl, from, to, options, pageFromEl) {
    if ( options === void 0 ) options = {};

    if (!pageEl) { return; }
    var router = this;
    var $pageEl = $$1(pageEl);
    if (!$pageEl.length) { return; }
    var route = options.route;
    var on = options.on; if ( on === void 0 ) on = {};
    var restoreScrollTopOnBack = router.params.restoreScrollTopOnBack;

    var camelName = "page" + (callback[0].toUpperCase() + callback.slice(1, callback.length));
    var colonName = "page:" + (callback.toLowerCase());

    var page = {};
    if (callback === 'beforeRemove' && $pageEl[0].f7Page) {
      page = Utils.extend($pageEl[0].f7Page, { from: from, to: to, position: from });
    } else {
      page = router.getPageData(pageEl, navbarEl, from, to, route, pageFromEl);
    }

    function attachEvents() {
      if ($pageEl[0].f7PageEventsAttached) { return; }
      $pageEl[0].f7PageEventsAttached = true;
      if (options.pageEvents && Object.keys(options.pageEvents).length > 0) {
        $pageEl[0].f7PageEvents = options.pageEvents;
        Object.keys(options.pageEvents).forEach(function (eventName) {
          $pageEl.on(("page:" + (eventName.split('page')[1].toLowerCase())), options.pageEvents[eventName]);
        });
      }
    }
    if (callback === 'mounted') {
      attachEvents();
    }
    if (callback === 'init') {
      if (restoreScrollTopOnBack && (from === 'previous' || !from) && to === 'current' && router.scrollHistory[page.route.url]) {
        $pageEl.find('.page-content').scrollTop(router.scrollHistory[page.route.url]);
      }
      attachEvents();
      if ($pageEl[0].f7PageInitialized) {
        if (on.pageReinit) { on.pageReinit(page); }
        $pageEl.trigger('page:reinit', page);
        router.emit('pageReinit', page);
        return;
      }
      $pageEl[0].f7PageInitialized = true;
    }
    if (restoreScrollTopOnBack && callback === 'beforeOut' && from === 'current' && to === 'previous') {
      // Save scroll position
      router.scrollHistory[page.route.url] = $pageEl.find('.page-content').scrollTop();
    }
    if (restoreScrollTopOnBack && callback === 'beforeOut' && from === 'current' && to === 'next') {
      // Delete scroll position
      delete router.scrollHistory[page.route.url];
    }

    if (on[camelName]) { on[camelName](page); }
    $pageEl.trigger(colonName, page);
    router.emit(camelName, page);

    if (callback === 'beforeRemove') {
      if ($pageEl[0].f7PageEventsAttached && $pageEl[0].f7PageEvents) {
        Object.keys($pageEl[0].f7PageEvents).forEach(function (eventName) {
          $pageEl.off(("page:" + (eventName.split('page')[1].toLowerCase())), $pageEl[0].f7PageEvents[eventName]);
        });
      }
    }

    if (callback === 'beforeRemove') {
      $pageEl[0].f7Page = null;
      page = null;
    }
  };
  Router$1.prototype.saveHistory = function saveHistory () {
    var router = this;
    router.view.history = router.history;
    if (router.params.pushState) {
      window.localStorage[("f7router-view" + (router.view.index) + "-history")] = JSON.stringify(router.history);
    }
  };
  Router$1.prototype.restoreHistory = function restoreHistory () {
    var router = this;
    if (router.params.pushState && window.localStorage[("f7router-view" + (router.view.index) + "-history")]) {
      router.history = JSON.parse(window.localStorage[("f7router-view" + (router.view.index) + "-history")]);
      router.view.history = router.history;
    }
  };
  Router$1.prototype.clearHistory = function clearHistory () {
    var router = this;
    router.history = [];
    router.saveHistory();
  };
  Router$1.prototype.init = function init () {
    var router = this;
    var app = router.app;

    // Init Swipeback
    if (router.view && router.params.iosSwipeBack && app.theme === 'ios') {
      SwipeBack(router);
    }

    // Dynamic not separated navbbar
    if (router.dynamicNavbar && !router.separateNavbar) {
      router.$el.addClass('router-dynamic-navbar-inside');
    }

    var initUrl = router.params.url;
    var documentUrl = document.location.href.split(document.location.origin)[1];
    var historyRestored;
    if (!router.params.pushState) {
      if (!initUrl) {
        initUrl = documentUrl;
      }
    } else {
      if (router.params.pushStateRoot && documentUrl.indexOf(router.params.pushStateRoot) >= 0) {
        documentUrl = documentUrl.split(router.params.pushStateRoot)[1];
        if (documentUrl === '') { documentUrl = '/'; }
      }
      if (documentUrl.indexOf(router.params.pushStateSeparator) >= 0) {
        initUrl = documentUrl.split(router.params.pushStateSeparator)[1];
      } else {
        initUrl = documentUrl;
      }
      router.restoreHistory();
      if (router.history.indexOf(initUrl) >= 0) {
        router.history = router.history.slice(0, router.history.indexOf(initUrl) + 1);
      } else if (router.params.url === initUrl) {
        router.history = [initUrl];
      } else {
        router.history = [documentUrl.split(router.params.pushStateSeparator)[0] || '/', initUrl];
      }
      if (router.history.length > 1) {
        historyRestored = true;
      } else {
        router.history = [];
      }
      router.saveHistory();
    }
    var currentRoute;
    if (router.history.length > 1) {
      // Will load page
      currentRoute = router.findMatchingRoute(router.history[0]);
      if (!currentRoute) {
        currentRoute = Utils.extend(router.findMatchingRoute(router.history[0], true), {
          route: {
            url: router.history[0],
            path: router.history[0].split('?')[0],
          },
        });
      }
    } else {
      // Don't load page
      currentRoute = router.findMatchingRoute(initUrl);
      if (!currentRoute) {
        currentRoute = Utils.extend(router.findMatchingRoute(initUrl, true), {
          route: {
            url: initUrl,
            path: initUrl.split('?')[0],
          },
        });
      }
    }

    if (router.params.stackPages) {
      router.$el.children('.page').each(function (index, pageEl) {
        var $pageEl = $$1(pageEl);
        router.initialPages.push($pageEl[0]);
        if (router.separateNavbar && $pageEl.children('.navbar').length > 0) {
          router.initialNavbars.push($pageEl.children('.navbar').find('.navbar-inner')[0]);
        }
      });
    }

    if (router.$el.children('.page:not(.stacked)').length === 0 && initUrl) {
      // No pages presented in DOM, reload new page
      router.navigate(initUrl, {
        reloadCurrent: true,
        pushState: false,
      });
    } else {
      // Init current DOM page
      router.currentRoute = currentRoute;
      router.$el.children('.page:not(.stacked)').each(function (index, pageEl) {
        var $pageEl = $$1(pageEl);
        var $navbarInnerEl;
        $pageEl.addClass('page-current');
        if (router.separateNavbar) {
          $navbarInnerEl = $pageEl.children('.navbar').children('.navbar-inner');
          if ($navbarInnerEl.length > 0) {
            router.$navbarEl.append($navbarInnerEl);
            $pageEl.children('.navbar').remove();
          } else {
            router.$navbarEl.addClass('navbar-hidden');
          }
        }
        router.pageCallback('init', $pageEl, $navbarInnerEl, 'current', undefined, { route: router.currentRoute });
      });
      if (historyRestored) {
        router.navigate(initUrl, {
          pushState: false,
          history: false,
          animate: router.params.pushStateAnimateOnLoad,
          on: {
            pageAfterIn: function pageAfterIn() {
              if (router.history.length > 2) {
                router.back({ preload: true });
              }
            },
          },
        });
      } else {
        router.history.push(initUrl);
        router.saveHistory();
      }
    }
    router.emit('routerInit', router);
  };
  Router$1.prototype.destroy = function destroy () {
    var router = this;

    router.emit('routerDestroy', router);

    // Delete props & methods
    Object.keys(router).forEach(function (routerProp) {
      router[routerProp] = null;
      delete router[routerProp];
    });

    router = null;
  };

  return Router$1;
}(Framework7Class));

var Router = {
  name: 'router',
  static: {
    Router: Router$1,
  },
  instance: {
    cache: {
      xhr: [],
      templates: [],
      components: [],
    },
  },
  create: function create() {
    var instance = this;
    if (instance.app) {
      // View Router
      instance.router = new Router$1(instance.app, instance);
    } else {
      // App Router
      instance.router = new Router$1(instance);
    }
  },
};

var History$2 = {
  name: 'history',
  on: {
    init: function init() {
      History.init(this);
    },
  },
};

var View = (function (Framework7Class) {
  function View(appInstance, el, viewParams) {
    if ( viewParams === void 0 ) viewParams = {};

    Framework7Class.call(this, viewParams, [appInstance]);

    var app = appInstance;
    var $el = $$1(el);
    var view = this;

    var defaults = {
      name: undefined,
      main: false,
      routes: [],
      routesAdd: [],
      linksView: undefined,
    };

    // Default View params
    view.params = Utils.extend(defaults, app.params.view, viewParams);

    // Routes
    if (view.params.routes.length > 0) {
      view.routes = view.params.routes;
    } else {
      view.routes = [].concat(app.routes, view.params.routesAdd);
    }

    // Selector
    var selector;
    if (typeof el === 'string') { selector = el; }
    else {
      // Supposed to be HTMLElement or Dom7
      selector = ($el.attr('id') ? ("#" + ($el.attr('id'))) : '') + ($el.attr('class') ? ("." + ($el.attr('class').replace(/ /g, '.').replace('.active', ''))) : '');
    }

    // DynamicNavbar
    var $navbarEl;
    if (app.theme === 'ios' && view.params.iosDynamicNavbar && view.params.iosSeparateDynamicNavbar) {
      $navbarEl = $el.children('.navbar').eq(0);
      if ($navbarEl.length === 0) {
        $navbarEl = $$1('<div class="navbar"></div>');
        $el.prepend($navbarEl);
      }
    }

    // View Props
    Utils.extend(false, view, {
      app: app,
      $el: $el,
      el: $el[0],
      name: view.params.name,
      main: view.params.main || $el.hasClass('view-main'),
      $navbarEl: $navbarEl,
      navbarEl: $navbarEl ? $navbarEl[0] : undefined,
      selector: selector,
      history: [],
      scrollHistory: {},
    });

    $el[0].f7View = view;

    // Install Modules
    view.useInstanceModules();

    // Add to app
    app.views.push(view);
    if (view.main) {
      app.views.main = view;
    } else if (view.name) {
      app.views[view.name] = view;
    }

    view.index = app.views.indexOf(view);

    // Init View
    if (app.initialized) {
      view.init();
    } else {
      app.on('init', view.init);
    }

    return view;
  }

  if ( Framework7Class ) View.__proto__ = Framework7Class;
  View.prototype = Object.create( Framework7Class && Framework7Class.prototype );
  View.prototype.constructor = View;
  View.prototype.destroy = function destroy () {
    var view = this;
    var app = view.app;

    view.$el.trigger('view:beforedestroy', view);
    view.emit('local::beforeDestroy viewBeforeDestroy', view);

    if (view.main) {
      app.views.main = null;
      delete app.views.main;
    } else if (view.name) {
      app.views[view.name] = null;
      delete app.views[view.name];
    }
    view.$el[0].f7View = null;
    delete view.$el[0].f7View;

    app.views.splice(app.views.indexOf(view), 1);

    // Destroy Router
    view.router.destroy();

    view.emit('local::destroy viewDestroy', view);

    // Delete props & methods
    Object.keys(view).forEach(function (viewProp) {
      view[viewProp] = null;
      delete view[viewProp];
    });

    view = null;
  };
  View.prototype.init = function init () {
    var view = this;
    view.router.init();
  };

  return View;
}(Framework7Class));

// Use Router
View.use(Router);

function initClicks(app) {
  function handleClicks(e) {
    var clicked = $$1(e.target);
    var clickedLink = clicked.closest('a');
    var isLink = clickedLink.length > 0;
    var url = isLink && clickedLink.attr('href');
    var isTabLink = isLink && clickedLink.hasClass('tab-link') && (clickedLink.attr('data-tab') || (url && url.indexOf('#') === 0));

    // Check if link is external
    if (isLink) {
      if (clickedLink.is(app.params.clicks.externalLinks) || (url && url.indexOf('javascript:') >= 0)) {
        if (url && clickedLink.attr('target') === '_system') {
          e.preventDefault();
          window.open(url, '_system');
        }
        return;
      }
    }

    // Modules Clicks
    Object.keys(app.modules).forEach(function (moduleName) {
      var moduleClicks = app.modules[moduleName].clicks;
      if (!moduleClicks) { return; }
      Object.keys(moduleClicks).forEach(function (clickSelector) {
        var matchingClickedElement = clicked.closest(clickSelector).eq(0);
        if (matchingClickedElement.length > 0) {
          moduleClicks[clickSelector].call(app, matchingClickedElement, matchingClickedElement.dataset());
        }
      });
    });

    // Load Page
    var clickedLinkData = {};
    if (isLink) {
      e.preventDefault();
      clickedLinkData = clickedLink.dataset();
    }
    var validUrl = url && url.length > 0 && url !== '#' && !isTabLink;
    var template = clickedLinkData.template;
    if (validUrl || clickedLink.hasClass('back') || template) {
      var view;
      if (clickedLinkData.view) {
        view = $$1(clickedLinkData.view)[0].f7View;
      } else {
        view = clicked.parents('.view')[0] && clicked.parents('.view')[0].f7View;
        if (view && view.params.linksView) {
          if (typeof view.params.linksView === 'string') { view = $$1(view.params.linksView)[0].f7View; }
          else if (view.params.linksView instanceof View) { view = view.params.linksView; }
        }
      }
      if (!view) {
        if (app.views.main) { view = app.views.main; }
      }
      if (!view) { return; }
      if (clickedLink.hasClass('back')) { view.router.back(url, clickedLinkData); }
      else { view.router.navigate(url, clickedLinkData); }
    }
  }

  app.on('click', handleClicks);

  // Prevent scrolling on overlays
  function preventScrolling(e) {
    e.preventDefault();
  }
  if (Support$1.touch && !Device$1.android) {
    var activeListener = Support$1.passiveListener ? { passive: false, capture: false } : false;
    $$1(document).on((app.params.fastClicks ? 'touchstart' : 'touchmove'), '.panel-backdrop, .dialog-backdrop, .preloader-indicator-overlay, .popup-backdrop, .searchbar-backdrop', preventScrolling, activeListener);
  }
}
var Clicks = {
  name: 'clicks',
  params: {
    clicks: {
      // External Links
      externalLinks: '.external',
    },
  },
  on: {
    init: function init() {
      var app = this;
      initClicks(app);
    },
  },
};

var Statusbar = {
  hide: function hide() {
    $$1('html').removeClass('with-statusbar');
    if (Device$1.cordova && window.StatusBar) {
      window.StatusBar.hide();
    }
  },
  show: function show() {
    $$1('html').addClass('with-statusbar');
    if (Device$1.cordova && window.StatusBar) {
      window.StatusBar.show();
    }
  },
  onClick: function onClick() {
    var app = this;
    var pageContent;
    if ($$1('.popup.modal-in').length > 0) {
      // Check for opened popup
      pageContent = $$1('.popup.modal-in').find('.page:not(.page-previous):not(.page-next):not(.cached)').find('.page-content');
    } else if ($$1('.panel.panel-active').length > 0) {
      // Check for opened panel
      pageContent = $$1('.panel.panel-active').find('.page:not(.page-previous):not(.page-next):not(.cached)').find('.page-content');
    } else if ($$1('.views > .view.tab-active').length > 0) {
      // View in tab bar app layout
      pageContent = $$1('.views > .view.tab-active').find('.page:not(.page-previous):not(.page-next):not(.cached)').find('.page-content');
    } else if ($$1('.views').length > 0) {
      pageContent = $$1('.views').find('.page:not(.page-previous):not(.page-next):not(.cached)').find('.page-content');
    } else {
      pageContent = app.root.children('.view').find('.page:not(.page-previous):not(.page-next):not(.cached)').find('.page-content');
    }

    if (pageContent && pageContent.length > 0) {
      // Check for tab
      if (pageContent.hasClass('tab')) {
        pageContent = pageContent.parent('.tabs').children('.page-content.tab-active');
      }
      if (pageContent.length > 0) { pageContent.scrollTop(0, 300); }
    }
  },
  setIosTextColor: function setIosTextColor(color) {
    if (Device$1.cordova && window.StatusBar) {
      if (color === 'white') {
        window.StatusBar.styleLightContent();
      } else {
        window.StatusBar.styleDefault();
      }
    }
  },
  setBackgroundColor: function setBackgroundColor(color) {
    if (Device$1.cordova && window.StatusBar) {
      if (Device$1.needsStatusbar()) {
        // Change Overlay Color;
        $$1('.statusbar').css('background-color', color);
      } else {
        // Change Real Status bar color
        window.StatusBar.backgroundColorByHexString(color);
      }
    } else {
      $$1('.statusbar').css('background-color', color);
    }
  },
  isVisible: function isVisible() {
    if (Device$1.cordova && window.StatusBar) {
      return window.StatusBar.isVisible;
    }
    return undefined;
  },
  init: function init() {
    var app = this;
    var params = app.params.statusbar;

    if (params.overlay === 'auto') {
      if (Device$1.needsStatusbar()) {
        $$1('html').addClass('with-statusbar');
      }
      if (Device$1.cordova) {
        $$1(document).on('resume', function () {
          if (Device$1.needsStatusbar()) {
            $$1('html').addClass('with-statusbar');
          } else {
            $$1('html').removeClass('with-statusbar');
          }
        }, false);
      }
    } else if (params.overlay === true) {
      $$1('html').addClass('with-statusbar');
    } else if (params.overlay === false) {
      $$1('html').removeClass('with-statusbar');
    }

    if (Device$1.cordova && window.StatusBar) {
      if (params.scrollTopOnClick) {
        $$1(window).on('statusTap', Statusbar.onClick.bind(app));
      }
      if (params.iosOverlaysWebView) {
        window.StatusBar.overlaysWebView(true);
      } else {
        window.StatusBar.overlaysWebView(false);
      }

      if (params.iosTextColor === 'white') {
        window.StatusBar.styleLightContent();
      } else {
        window.StatusBar.styleDefault();
      }
    }

    if (params.setBackgroundColor) {
      Statusbar.setBackgroundColor(app.theme === 'ios' ? params.iosBackgroundColor : params.materialBackgroundColor);
    }
  },
};

var Statusbar$1 = {
  name: 'statusbar',
  params: {
    statusbar: {
      overlay: 'auto',
      scrollTopOnClick: true,
      iosOverlaysWebView: true,
      iosTextColor: 'black',
      setBackgroundColor: true,
      iosBackgroundColor: '#F7F7F8',
      materialBackgroundColor: '#0D47A1',
    },
  },
  create: function create() {
    var app = this;
    Utils.extend(app, {
      statusbar: {
        hide: Statusbar.hide,
        show: Statusbar.show,
        setIosTextColor: Statusbar.setIosTextColor,
        setBackgroundColor: Statusbar.setBackgroundColor,
        isVisible: Statusbar.isVisible,
        init: Statusbar.init.bind(app),
      },
    });
  },
  on: {
    init: function init() {
      var app = this;
      Statusbar.init.call(app);
    },
  },
  clicks: {
    '.statusbar': function onStatusbarClick() {
      var app = this;
      if (!app.params.statusbar.scrollTopOnClick) { return; }
      Statusbar.onClick.call(app);
    },
  },
};

function getCurrentView(app) {
  var popoverView = $$1('.popover.modal-in .view');
  var popupView = $$1('.popup.modal-in .view');
  var panelView = $$1('.panel.panel-active .view');
  var appViews = $$1('.views');
  if (appViews.length === 0) { appViews = app.root; }
  // Find active view as tab
  var appView = appViews.children('.view');
  // Propably in tabs or split view
  if (appView.length > 1) {
    if (appView.hasClass('tab')) {
      // Tabs
      appView = appViews.children('.view.tab-active');
    } else {
      // Split View, leave appView intact
    }
  }
  if (popoverView.length > 0 && popoverView[0].f7View) { return popoverView[0].f7View; }
  if (popupView.length > 0 && popupView[0].f7View) { return popupView[0].f7View; }
  if (panelView.length > 0 && panelView[0].f7View) { return panelView[0].f7View; }
  if (appView.length > 0) {
    if (appView.length === 1 && appView[0].f7View) { return appView[0].f7View; }
    if (appView.length > 1) {
      return app.views.main;
    }
  }
  return undefined;
}

var View$2 = {
  name: 'view',
  params: {
    view: {
      stackPages: false,
      xhrCache: true,
      xhrCacheIgnore: [],
      xhrCacheIgnoreGetParameters: false,
      xhrCacheDuration: 1000 * 60 * 10, // Ten minutes
      preloadPreviousPage: true,
      uniqueHistory: false,
      uniqueHistoryIgnoreGetParameters: false,
      allowDuplicateUrls: false,
      reloadPages: false,
      removeElements: true,
      removeElementsWithTimeout: false,
      removeElementsTimeout: 0,
      restoreScrollTopOnBack: true,
      // Swipe Back
      iosSwipeBack: true,
      iosSwipeBackAnimateShadow: true,
      iosSwipeBackAnimateOpacity: true,
      iosSwipeBackActiveArea: 30,
      iosSwipeBackThreshold: 0,
      // Push State
      pushState: false,
      pushStateRoot: undefined,
      pushStateAnimate: true,
      pushStateAnimateOnLoad: false,
      pushStateSeparator: '#!',
      pushStateOnLoad: true,
      // Animate Pages
      animate: true,
      animateWithJS: true,
      // iOS Dynamic Navbar
      iosDynamicNavbar: true,
      iosSeparateDynamicNavbar: true,
      // Animate iOS Navbar Back Icon
      iosAnimateNavbarBackIcon: true,
      // MD Theme delay
      materialPageLoadDelay: 0,
    },
  },
  static: {
    View: View,
  },
  create: function create() {
    var app = this;
    Utils.extend(app, {
      views: Utils.extend([], {
        create: function create(el, params) {
          return new View(app, el, params);
        },
        get: function get(viewEl) {
          var $viewEl = $$1(viewEl);
          if ($viewEl.length && $viewEl[0].f7View) { return $viewEl[0].f7View; }
          return undefined;
        },
      }),
    });
    Object.defineProperty(app.views, 'current', {
      enumerable: true,
      configurable: true,
      get: function get() {
        return getCurrentView(app);
      },
    });
  },
  on: {
    init: function init() {
      var app = this;
      $$1('.view-init').each(function (index, viewEl) {
        if (viewEl.f7View) { return; }
        var viewParams = $$1(viewEl).dataset();
        app.views.create(viewEl, viewParams);
      });
    },
    modalOpen: function modalOpen(modal) {
      var app = this;
      modal.$el.find('.view-init').each(function (index, viewEl) {
        if (viewEl.f7View) { return; }
        var viewParams = $$1(viewEl).dataset();
        app.views.create(viewEl, viewParams);
      });
    },
    modalBeforeDestroy: function modalBeforeDestroy(modal) {
      if (!modal || !modal.$el) { return; }
      modal.$el.find('.view-init').each(function (index, viewEl) {
        var view = viewEl.f7View;
        if (!view) { return; }
        view.destroy();
      });
    },
  },
};

var Navbar = {
  size: function size(el) {
    var app = this;
    if (app.theme !== 'ios') { return; }
    var $el = $$1(el);
    if ($el.hasClass('navbar')) {
      $el = $el.children('.navbar-inner').each(function (index, navbarEl) {
        app.navbar.size(navbarEl);
      });
      return;
    }
    if (
      $el.hasClass('stacked') ||
      $el.parents('.stacked').length > 0 ||
      $el.parents('.tab:not(.tab-active)').length > 0 ||
      $el.parents('.popup:not(.modal-in)').length > 0
    ) {
      return;
    }
    var $viewEl = $el.parents('.view').eq(0);
    var left = app.rtl ? $el.children('.right') : $el.children('.left');
    var right = app.rtl ? $el.children('.left') : $el.children('.right');
    var title = $el.children('.title');
    var subnavbar = $el.children('.subnavbar');
    var noLeft = left.length === 0;
    var noRight = right.length === 0;
    var leftWidth = noLeft ? 0 : left.outerWidth(true);
    var rightWidth = noRight ? 0 : right.outerWidth(true);
    var titleWidth = title.outerWidth(true);
    var navbarStyles = $el.styles();
    var navbarWidth = $el[0].offsetWidth;
    var navbarInnerWidth = navbarWidth - parseInt(navbarStyles.paddingLeft, 10) - parseInt(navbarStyles.paddingRight, 10);
    var isPrevious = $el.hasClass('navbar-previous');
    var sliding = $el.hasClass('sliding');

    var router;
    var dynamicNavbar;
    var separateNavbar;
    var separateNavbarRightOffset = 0;
    var separateNavbarLeftOffset = 0;

    if ($viewEl.length > 0 && $viewEl[0].f7View) {
      router = $viewEl[0].f7View.router;
      dynamicNavbar = router && router.dynamicNavbar;
      separateNavbar = router && router.separateNavbar;
      if (!separateNavbar) {
        separateNavbarRightOffset = navbarWidth;
        separateNavbarLeftOffset = navbarWidth / 5;
      }
    }

    var currLeft;
    var diff;
    if (noRight) {
      currLeft = navbarInnerWidth - titleWidth;
    }
    if (noLeft) {
      currLeft = 0;
    }
    if (!noLeft && !noRight) {
      currLeft = ((navbarInnerWidth - rightWidth - titleWidth) + leftWidth) / 2;
    }
    var requiredLeft = (navbarInnerWidth - titleWidth) / 2;
    if (navbarInnerWidth - leftWidth - rightWidth > titleWidth) {
      if (requiredLeft < leftWidth) {
        requiredLeft = leftWidth;
      }
      if (requiredLeft + titleWidth > navbarInnerWidth - rightWidth) {
        requiredLeft = navbarInnerWidth - rightWidth - titleWidth;
      }
      diff = requiredLeft - currLeft;
    } else {
      diff = 0;
    }

    // RTL inverter
    var inverter = app.rtl ? -1 : 1;

    if (dynamicNavbar) {
      if (title.hasClass('sliding') || (title.length > 0 && sliding)) {
        var titleLeftOffset = (-(currLeft + diff) * inverter) + separateNavbarLeftOffset;
        var titleRightOffset = ((navbarInnerWidth - currLeft - diff - titleWidth) * inverter) - separateNavbarRightOffset;

        if (isPrevious) {
          if (router && router.params.iosAnimateNavbarBackIcon) {
            var activeNavbarBackLink = $el.parent().find('.navbar-current').children('.left.sliding').find('.back .icon ~ span');
            if (activeNavbarBackLink.length > 0) {
              titleLeftOffset += activeNavbarBackLink[0].offsetLeft;
            }
          }
        }
        title[0].f7NavbarLeftOffset = titleLeftOffset;
        title[0].f7NavbarRightOffset = titleRightOffset;
      }
      if (!noLeft && (left.hasClass('sliding') || sliding)) {
        if (app.rtl) {
          left[0].f7NavbarLeftOffset = (-(navbarInnerWidth - left[0].offsetWidth) / 2) * inverter;
          left[0].f7NavbarRightOffset = leftWidth * inverter;
        } else {
          left[0].f7NavbarLeftOffset = -leftWidth + separateNavbarLeftOffset;
          left[0].f7NavbarRightOffset = ((navbarInnerWidth - left[0].offsetWidth) / 2) - separateNavbarRightOffset;
          if (router && router.params.iosAnimateNavbarBackIcon && left.find('.back .icon').length > 0) {
            left[0].f7NavbarRightOffset -= left.find('.back .icon')[0].offsetWidth;
          }
        }
      }
      if (!noRight && (right.hasClass('sliding') || sliding)) {
        if (app.rtl) {
          right[0].f7NavbarLeftOffset = -rightWidth * inverter;
          right[0].f7NavbarRightOffset = ((navbarInnerWidth - right[0].offsetWidth) / 2) * inverter;
        } else {
          right[0].f7NavbarLeftOffset = (-(navbarInnerWidth - right[0].offsetWidth) / 2) + separateNavbarLeftOffset;
          right[0].f7NavbarRightOffset = rightWidth - separateNavbarRightOffset;
        }
      }
      if (subnavbar.length && (subnavbar.hasClass('sliding') || sliding)) {
        subnavbar[0].f7NavbarLeftOffset = app.rtl ? subnavbar[0].offsetWidth : (-subnavbar[0].offsetWidth + separateNavbarLeftOffset);
        subnavbar[0].f7NavbarRightOffset = (-subnavbar[0].f7NavbarLeftOffset - separateNavbarRightOffset) + separateNavbarLeftOffset;
      }
    }

    // Title left
    if (app.params.navbar.iosCenterTitle) {
      var titleLeft = diff;
      if (app.rtl && noLeft && noRight && title.length > 0) { titleLeft = -titleLeft; }
      title.css({ left: (titleLeft + "px") });
    }
  },
  hide: function hide(el, animate) {
    if ( animate === void 0 ) animate = true;

    var $el = $$1(el);
    if ($el.hasClass('navbar-inner')) { $el = $el.parents('.navbar'); }
    if (!$el.length) { return; }
    if ($el.hasClass('navbar-hidden')) { return; }
    var className = "navbar-hidden" + (animate ? ' navbar-transitioning' : '');
    $el.transitionEnd(function () {
      $el.removeClass('navbar-transitioning');
    });
    $el.addClass(className);
  },
  show: function show(el, animate) {
    if ( el === void 0 ) el = '.navbar-hidden';
    if ( animate === void 0 ) animate = true;

    var $el = $$1(el);
    if ($el.hasClass('navbar-inner')) { $el = $el.parents('.navbar'); }
    if (!$el.length) { return; }
    if (!$el.hasClass('navbar-hidden')) { return; }
    if (animate) {
      $el.addClass('navbar-transitioning');
      $el.transitionEnd(function () {
        $el.removeClass('navbar-transitioning');
      });
    }
    $el.removeClass('navbar-hidden');
  },
  getElByPage: function getElByPage(page) {
    var $pageEl;
    var $navbarEl;
    var pageData;
    if (page.$navbarEl || page.$el) {
      pageData = page;
      $pageEl = page.$el;
    } else {
      $pageEl = $$1(page);
      if ($pageEl.length > 0) { pageData = $pageEl[0].f7Page; }
    }
    if (pageData && pageData.$navbarEl && pageData.$navbarEl.length > 0) {
      $navbarEl = pageData.$navbarEl;
    } else if ($pageEl) {
      $navbarEl = $pageEl.children('.navbar').children('.navbar-inner');
    }
    if (!$navbarEl || ($navbarEl && $navbarEl.length === 0)) { return undefined; }
    return $navbarEl[0];
  },
  getPageByEl: function getPageByEl(navbarInnerEl) {
    var $navbarInnerEl = $$1(navbarInnerEl);
    if ($navbarInnerEl.hasClass('navbar')) {
      $navbarInnerEl = $navbarInnerEl.find('.navbar-inner');
      if ($navbarInnerEl.length > 1) { return undefined; }
    }
    return $navbarInnerEl[0].f7Page;
  },
  initHideNavbarOnScroll: function initHideNavbarOnScroll(pageEl, navbarInnerEl) {
    var app = this;
    var $pageEl = $$1(pageEl);
    var $navbarEl = $$1(navbarInnerEl || app.navbar.getElByPage(pageEl)).closest('.navbar');

    var previousScrollTop;
    var currentScrollTop;

    var scrollHeight;
    var offsetHeight;
    var reachEnd;
    var action;
    var navbarHidden;
    function handleScroll() {
      var scrollContent = this;
      if ($pageEl.hasClass('page-previous')) { return; }
      currentScrollTop = scrollContent.scrollTop;
      scrollHeight = scrollContent.scrollHeight;
      offsetHeight = scrollContent.offsetHeight;
      reachEnd = currentScrollTop + offsetHeight >= scrollHeight;
      navbarHidden = $navbarEl.hasClass('navbar-hidden');

      if (reachEnd) {
        if (app.params.navbar.showOnPageScrollEnd) {
          action = 'show';
        }
      } else if (previousScrollTop > currentScrollTop) {
        if (app.params.navbar.showOnPageScrollTop || currentScrollTop <= 44) {
          action = 'show';
        } else {
          action = 'hide';
        }
      } else if (currentScrollTop > 44) {
        action = 'hide';
      } else {
        action = 'show';
      }

      if (action === 'show' && navbarHidden) {
        app.navbar.show($navbarEl);
        navbarHidden = false;
      } else if (action === 'hide' && !navbarHidden) {
        app.navbar.hide($navbarEl);
        navbarHidden = true;
      }

      previousScrollTop = currentScrollTop;
    }
    $pageEl.on('scroll', '.page-content', handleScroll, true);
    $pageEl[0].f7ScrollNavbarHandler = handleScroll;
  },
};
var Navbar$1 = {
  name: 'navbar',
  create: function create() {
    var app = this;
    Utils.extend(app, {
      navbar: {
        size: Navbar.size.bind(app),
        hide: Navbar.hide.bind(app),
        show: Navbar.show.bind(app),
        getElByPage: Navbar.getElByPage.bind(app),
        initHideNavbarOnScroll: Navbar.initHideNavbarOnScroll.bind(app),
      },
    });
  },
  params: {
    navbar: {
      scrollTopOnTitleClick: true,
      iosCenterTitle: true,
      hideOnPageScroll: false,
      showOnPageScrollEnd: true,
      showOnPageScrollTop: true,
    },
  },
  on: {
    resize: function resize() {
      var app = this;
      if (app.theme !== 'ios') { return; }
      $$1('.navbar').each(function (index, navbarEl) {
        app.navbar.size(navbarEl);
      });
    },
    pageBeforeRemove: function pageBeforeRemove(page) {
      if (page.$el[0].f7ScrollNavbarHandler) {
        page.$el.off('scroll', '.page-content', page.$el[0].f7ScrollNavbarHandler, true);
      }
    },
    pageBeforeIn: function pageBeforeIn(page) {
      var app = this;
      if (app.theme !== 'ios') { return; }
      var $navbarEl;
      var view = page.$el.parents('.view')[0].f7View;
      var navbarInnerEl = app.navbar.getElByPage(page);
      if (!navbarInnerEl) {
        $navbarEl = page.$el.parents('.view').children('.navbar');
      } else {
        $navbarEl = $$1(navbarInnerEl).parents('.navbar');
      }
      if (page.$el.hasClass('no-navbar') || (view.router.dynamicNavbar && !navbarInnerEl)) {
        app.navbar.hide($navbarEl);
      } else {
        app.navbar.show($navbarEl);
      }
    },
    pageReinit: function pageReinit(page) {
      var app = this;
      if (app.theme !== 'ios') { return; }
      var $navbarEl = $$1(app.navbar.getElByPage(page));
      if (!$navbarEl || $navbarEl.length === 0) { return; }
      app.navbar.size($navbarEl);
    },
    pageInit: function pageInit(page) {
      var app = this;
      var $navbarEl = $$1(app.navbar.getElByPage(page));
      if (!$navbarEl || $navbarEl.length === 0) { return; }
      if (app.theme === 'ios') {
        app.navbar.size($navbarEl);
      }
      if (app.params.navbar.hideOnPageScroll || page.$el.find('.hide-navbar-on-scroll').length || page.$el.hasClass('hide-navbar-on-scroll') || page.$el.find('.hide-bars-on-scroll').length) {
        if (page.$el.find('.keep-navbar-on-scroll').length || page.$el.find('.keep-bars-on-scroll').length) { return; }
        app.navbar.initHideNavbarOnScroll(page.el, $navbarEl[0]);
      }
    },
    modalOpen: function modalOpen(modal) {
      var app = this;
      if (app.theme !== 'ios') { return; }
      modal.$el.find('.navbar:not(.navbar-previous):not(.stacked)').each(function (index, navbarEl) {
        app.navbar.size(navbarEl);
      });
    },
    panelOpen: function panelOpen(panel) {
      var app = this;
      if (app.theme !== 'ios') { return; }
      panel.$el.find('.navbar:not(.navbar-previous):not(.stacked)').each(function (index, navbarEl) {
        app.navbar.size(navbarEl);
      });
    },
    panelSwipeOpen: function panelSwipeOpen(panel) {
      var app = this;
      if (app.theme !== 'ios') { return; }
      panel.$el.find('.navbar:not(.navbar-previous):not(.stacked)').each(function (index, navbarEl) {
        app.navbar.size(navbarEl);
      });
    },
    tabShow: function tabShow(tabEl) {
      var app = this;
      $$1(tabEl).find('.navbar:not(.navbar-previous):not(.stacked)').each(function (index, navbarEl) {
        app.navbar.size(navbarEl);
      });
    },
  },
  clicks: {
    '.navbar .title': function onTitleClick($clickedEl) {
      var app = this;
      if (!app.params.navbar.scrollTopOnTitleClick) { return; }
      if ($clickedEl.closest('a').length > 0) {
        return;
      }
      var pageContent;
      // Find active page
      var navbar = $clickedEl.parents('.navbar');

      // Static Layout
      pageContent = navbar.parents('.page-content');

      if (pageContent.length === 0) {
        // Fixed Layout
        if (navbar.parents('.page').length > 0) {
          pageContent = navbar.parents('.page').find('.page-content');
        }
        // Through Layout
        if (pageContent.length === 0) {
          if (navbar.nextAll('.page-current:not(.stacked)').length > 0) {
            pageContent = navbar.nextAll('.page-current:not(.stacked)').find('.page-content');
          }
        }
      }
      if (pageContent && pageContent.length > 0) {
        // Check for tab
        if (pageContent.hasClass('tab')) {
          pageContent = pageContent.parent('.tabs').children('.page-content.tab-active');
        }
        if (pageContent.length > 0) { pageContent.scrollTop(0, 300); }
      }
    },
  },
};

var Toolbar = {
  setHighlight: function setHighlight(tabbarEl) {
    var app = this;
    if (app.theme !== 'md') { return; }

    var $tabbarEl = $$1(tabbarEl);

    if ($tabbarEl.length === 0 || !($tabbarEl.hasClass('tabbar') || $tabbarEl.hasClass('tabbar-labels'))) { return; }

    if ($tabbarEl.find('.tab-link-highlight').length === 0) {
      $tabbarEl.children('.toolbar-inner').append('<span class="tab-link-highlight"></span>');
    }

    var $highlightEl = $tabbarEl.find('.tab-link-highlight');
    var $activeLink = $tabbarEl.find('.tab-link-active');
    var highlightWidth;
    var highlightTranslate;

    if ($tabbarEl.hasClass('tabbar-scrollable')) {
      highlightWidth = ($activeLink[0].offsetWidth) + "px";
      highlightTranslate = ($activeLink[0].offsetLeft) + "px";
    } else {
      var activeIndex = $activeLink.index();
      var tabLinksCount = $tabbarEl.find('.tab-link').length;
      highlightWidth = (100 / tabLinksCount) + "%";
      highlightTranslate = ((app.rtl ? -activeIndex : activeIndex) * 100) + "%";
    }

    $highlightEl
      .css('width', highlightWidth)
      .transform(("translate3d(" + highlightTranslate + ",0,0)"));
  },
  init: function init(tabbarEl) {
    var app = this;
    app.toolbar.setHighlight(tabbarEl);
  },
  hide: function hide(el, animate) {
    if ( animate === void 0 ) animate = true;

    var $el = $$1(el);
    if ($el.hasClass('toolbar-hidden')) { return; }
    var className = "toolbar-hidden" + (animate ? ' toolbar-transitioning' : '');
    $el.transitionEnd(function () {
      $el.removeClass('toolbar-transitioning');
    });
    $el.addClass(className);
  },
  show: function show(el, animate) {
    if ( animate === void 0 ) animate = true;

    var $el = $$1(el);
    if (!$el.hasClass('toolbar-hidden')) { return; }
    if (animate) {
      $el.addClass('toolbar-transitioning');
      $el.transitionEnd(function () {
        $el.removeClass('toolbar-transitioning');
      });
    }
    $el.removeClass('toolbar-hidden');
  },
  initHideToolbarOnScroll: function initHideToolbarOnScroll(pageEl) {
    var app = this;
    var $pageEl = $$1(pageEl);
    var $toolbarEl = $pageEl.parents('.view').children('.toolbar');
    if ($toolbarEl.length === 0) {
      $toolbarEl = $pageEl.find('.toolbar');
    }
    if ($toolbarEl.length === 0) {
      return;
    }

    var previousScrollTop;
    var currentScrollTop;

    var scrollHeight;
    var offsetHeight;
    var reachEnd;
    var action;
    var toolbarHidden;
    function handleScroll() {
      var scrollContent = this;
      if ($pageEl.hasClass('page-previous')) { return; }
      currentScrollTop = scrollContent.scrollTop;
      scrollHeight = scrollContent.scrollHeight;
      offsetHeight = scrollContent.offsetHeight;
      reachEnd = currentScrollTop + offsetHeight >= scrollHeight;
      toolbarHidden = $toolbarEl.hasClass('toolbar-hidden');

      if (reachEnd) {
        if (app.params.toolbar.showOnPageScrollEnd) {
          action = 'show';
        }
      } else if (previousScrollTop > currentScrollTop) {
        if (app.params.toolbar.showOnPageScrollTop || currentScrollTop <= 44) {
          action = 'show';
        } else {
          action = 'hide';
        }
      } else if (currentScrollTop > 44) {
        action = 'hide';
      } else {
        action = 'show';
      }

      if (action === 'show' && toolbarHidden) {
        app.toolbar.show($toolbarEl);
        toolbarHidden = false;
      } else if (action === 'hide' && !toolbarHidden) {
        app.toolbar.hide($toolbarEl);
        toolbarHidden = true;
      }

      previousScrollTop = currentScrollTop;
    }
    $pageEl.on('scroll', '.page-content', handleScroll, true);
    $pageEl[0].f7ScrollToolbarHandler = handleScroll;
  },
};
var Toolbar$1 = {
  name: 'toolbar',
  create: function create() {
    var app = this;
    Utils.extend(app, {
      toolbar: {
        hide: Toolbar.hide.bind(app),
        show: Toolbar.show.bind(app),
        setHighlight: Toolbar.setHighlight.bind(app),
        initHideToolbarOnScroll: Toolbar.initHideToolbarOnScroll.bind(app),
        init: Toolbar.init.bind(app),
      },
    });
  },
  params: {
    toolbar: {
      hideOnPageScroll: false,
      showOnPageScrollEnd: true,
      showOnPageScrollTop: true,
    },
  },
  on: {
    pageBeforeRemove: function pageBeforeRemove(page) {
      if (page.$el[0].f7ScrollToolbarHandler) {
        page.$el.off('scroll', '.page-content', page.$el[0].f7ScrollToolbarHandler, true);
      }
    },
    pageBeforeIn: function pageBeforeIn(page) {
      var app = this;
      if (app.theme !== 'ios') { return; }
      var $toolbarEl = page.$el.parents('.view').children('.toolbar');
      if ($toolbarEl.length === 0) {
        $toolbarEl = page.$el.find('.toolbar');
      }
      if ($toolbarEl.length === 0) {
        return;
      }
      if (page.$el.hasClass('no-toolbar')) {
        app.toolbar.hide($toolbarEl);
      } else {
        app.toolbar.show($toolbarEl);
      }
    },
    pageInit: function pageInit(page) {
      var app = this;
      page.$el.find('.tabbar, .tabbar-labels').each(function (index, tabbarEl) {
        app.toolbar.init(tabbarEl);
      });
      if (app.params.toolbar.hideOnPageScroll || page.$el.find('.hide-toolbar-on-scroll').length || page.$el.hasClass('hide-toolbar-on-scroll') || page.$el.find('.hide-bars-on-scroll').length) {
        if (page.$el.find('.keep-toolbar-on-scroll').length || page.$el.find('.keep-bars-on-scroll').length) { return; }
        app.toolbar.initHideToolbarOnScroll(page.el);
      }
    },
    init: function init() {
      var app = this;
      app.root.find('.tabbar, .tabbar-labels').each(function (index, tabbarEl) {
        app.toolbar.init(tabbarEl);
      });
    },
  },
};

var Subnavbar = {
  name: 'subnavbar',
  on: {
    pageInit: function pageInit(page) {
      if (page.$navbarEl && page.$navbarEl.length && page.$navbarEl.find('.subnavbar').length) {
        page.$el.addClass('page-with-subnavbar');
      }
      if (page.$el.find('.subnavbar').length) {
        page.$el.addClass('page-with-subnavbar');
      }
    },
  },
};

var TouchRipple$1 = function TouchRipple$1($el, x, y) {
  var ripple = this;
  if (!$el) { return undefined; }
  var box = $el[0].getBoundingClientRect();
  var center = {
    x: x - box.left,
    y: y - box.top,
  };
  var width = box.width;
  var height = box.height;
  var diameter = Math.max((Math.pow( ((Math.pow( height, 2 )) + (Math.pow( width, 2 ))), 0.5 )), 48);

  ripple.$rippleWaveEl = $$1(("<div class=\"ripple-wave\" style=\"width: " + diameter + "px; height: " + diameter + "px; margin-top:-" + (diameter / 2) + "px; margin-left:-" + (diameter / 2) + "px; left:" + (center.x) + "px; top:" + (center.y) + "px;\"></div>"));

  $el.prepend(ripple.$rippleWaveEl);

  var clientLeft = ripple.$rippleWaveEl[0].clientLeft;

  ripple.rippleTransform = "translate3d(" + (-center.x + (width / 2)) + "px, " + (-center.y + (height / 2)) + "px, 0) scale(1)";

  ripple.$rippleWaveEl.transform(ripple.rippleTransform);

  return ripple;
};
TouchRipple$1.prototype.onRemove = function onRemove () {
  var ripple = this;
  ripple.$rippleWaveEl.remove();
  Object.keys(ripple).forEach(function (key) {
    ripple[key] = null;
    delete ripple[key];
  });
  ripple = null;
};
TouchRipple$1.prototype.remove = function remove () {
  var ripple = this;
  if (ripple.removing) { return; }
  var $rippleWaveEl = this.$rippleWaveEl;
  var rippleTransform = this.rippleTransform;
  var removeTimeout = Utils.nextTick(function () {
    ripple.onRemove();
  }, 400);
  ripple.removing = true;
  $rippleWaveEl
    .addClass('ripple-wave-fill')
    .transform(rippleTransform.replace('scale(1)', 'scale(1.01)'))
    .transitionEnd(function () {
      clearTimeout(removeTimeout);
      Utils.nextFrame(function () {
        $rippleWaveEl
          .addClass('ripple-wave-out')
          .transform(rippleTransform.replace('scale(1)', 'scale(1.01)'));

        removeTimeout = Utils.nextTick(function () {
          ripple.onRemove();
        }, 700);

        $rippleWaveEl.transitionEnd(function () {
          clearTimeout(removeTimeout);
          ripple.onRemove();
        });
      });
    });
};

var TouchRipple = {
  name: 'touch-ripple',
  static: {
    TouchRipple: TouchRipple$1,
  },
  create: function create() {
    var app = this;
    app.touchRipple = {
      create: function create() {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( TouchRipple$1, [ null ].concat( args) ));
      },
    };
  },
};

var openedModals = [];
var dialogsQueue = [];
function clearDialogsQueue() {
  if (dialogsQueue.length === 0) { return; }
  var dialog = dialogsQueue.shift();
  dialog.open();
}
var Modal = (function (Framework7Class) {
  function Modal(app, params) {
    Framework7Class.call(this, params, [app]);

    var modal = this;

    var defaults = {};

    // Extend defaults with modules params
    modal.useInstanceModulesParams(defaults);

    modal.params = Utils.extend(defaults, params);

    // Install Modules
    modal.useInstanceModules();

    return this;
  }

  if ( Framework7Class ) Modal.__proto__ = Framework7Class;
  Modal.prototype = Object.create( Framework7Class && Framework7Class.prototype );
  Modal.prototype.constructor = Modal;
  Modal.prototype.onOpen = function onOpen () {
    var modal = this;
    openedModals.push(modal);
    $$1('html').addClass(("with-modal-" + (modal.type.toLowerCase())));
    modal.$el.trigger(("modal:open " + (modal.type.toLowerCase()) + ":open"), modal);
    modal.emit(("local::open modalOpen " + (modal.type) + "Open"), modal);
  };
  Modal.prototype.onOpened = function onOpened () {
    var modal = this;
    modal.$el.trigger(("modal:opened " + (modal.type.toLowerCase()) + ":opened"), modal);
    modal.emit(("local::opened modalOpened " + (modal.type) + "Opened"), modal);
  };
  Modal.prototype.onClose = function onClose () {
    var modal = this;
    openedModals.splice(openedModals.indexOf(modal), 1);
    $$1('html').removeClass(("with-modal-" + (modal.type.toLowerCase())));
    modal.$el.trigger(("modal:close " + (modal.type.toLowerCase()) + ":close"), modal);
    modal.emit(("local::close modalClose " + (modal.type) + "Close"), modal);
  };
  Modal.prototype.onClosed = function onClosed () {
    var modal = this;
    modal.$el.removeClass('modal-out');
    modal.$el.hide();
    modal.$el.trigger(("modal:closed " + (modal.type.toLowerCase()) + ":closed"), modal);
    modal.emit(("local::closed modalClosed " + (modal.type) + "Closed"), modal);
  };
  Modal.prototype.open = function open (animateModal) {
    var modal = this;
    var app = modal.app;
    var $el = modal.$el;
    var $backdropEl = modal.$backdropEl;
    var type = modal.type;
    var animate = true;
    if (typeof animateModal !== 'undefined') { animate = animateModal; }
    else if (typeof modal.params.animate !== 'undefined') {
      animate = modal.params.animate;
    }

    if (!$el || $el.hasClass('modal-in')) {
      return modal;
    }

    if (type === 'dialog' && app.params.modals.queueDialogs) {
      var pushToQueue;
      if ($$1('.dialog.modal-in').length > 0) {
        pushToQueue = true;
      } else if (openedModals.length > 0) {
        openedModals.forEach(function (openedModal) {
          if (openedModal.type === 'dialog') { pushToQueue = true; }
        });
      }
      if (pushToQueue) {
        dialogsQueue.push(modal);
        return modal;
      }
    }

    var $modalParentEl = $el.parent();
    var wasInDom = $el.parents(document).length > 0;
    if (app.params.modals.moveToRoot && !$modalParentEl.is(app.root)) {
      app.root.append($el);
      modal.once((type + "Closed"), function () {
        if (wasInDom) {
          $modalParentEl.append($el);
        } else {
          $el.remove();
        }
      });
    }
    // Show Modal
    $el.show();

    // Set Dialog offset
    if (type === 'dialog') {
      $el.css({
        marginTop: ((-Math.round($el.outerHeight() / 2)) + "px"),
      });
    }

    // Emit open
    /* eslint no-underscore-dangle: ["error", { "allow": ["_clientLeft"] }] */
    modal._clientLeft = $el[0].clientLeft;

    // Backdrop
    if ($backdropEl) {
      $backdropEl[animate ? 'removeClass' : 'addClass']('not-animated');
      $backdropEl.addClass('backdrop-in');
    }
    // Modal
    function transitionEnd() {
      if ($el.hasClass('modal-out')) {
        modal.onClosed();
      } else {
        modal.onOpened();
      }
    }
    if (animate) {
      $el
        .animationEnd(function () {
          transitionEnd();
        });
      $el
        .transitionEnd(function () {
          transitionEnd();
        });
      $el
        .removeClass('modal-out not-animated')
        .addClass('modal-in');
      modal.onOpen();
    } else {
      $el.removeClass('modal-out').addClass('modal-in not-animated');
      modal.onOpen();
      modal.onOpened();
    }

    return modal;
  };
  Modal.prototype.close = function close (animateModal) {
    var modal = this;
    var $el = modal.$el;
    var $backdropEl = modal.$backdropEl;

    var animate = true;
    if (typeof animateModal !== 'undefined') { animate = animateModal; }
    else if (typeof modal.params.animate !== 'undefined') {
      animate = modal.params.animate;
    }

    if (!$el || !$el.hasClass('modal-in')) {
      return modal;
    }

    // backdrop
    if ($backdropEl) {
      $backdropEl[animate ? 'removeClass' : 'addClass']('not-animated');
      $backdropEl.removeClass('backdrop-in');
    }

    // Modal
    $el[animate ? 'removeClass' : 'addClass']('not-animated');
    function transitionEnd() {
      if ($el.hasClass('modal-out')) {
        modal.onClosed();
      } else {
        modal.onOpened();
      }
    }
    if (animate) {
      $el
        .animationEnd(function () {
          transitionEnd();
        });
      $el
        .transitionEnd(function () {
          transitionEnd();
        });
      $el
        .removeClass('modal-in')
        .addClass('modal-out');
      // Emit close
      modal.onClose();
    } else {
      $el
        .addClass('not-animated')
        .removeClass('modal-in')
        .addClass('modal-out');
      // Emit close
      modal.onClose();
      modal.onClosed();
    }

    if (modal.type === 'dialog') {
      clearDialogsQueue();
    }

    return modal;
  };
  Modal.prototype.destroy = function destroy () {
    var modal = this;
    modal.emit(("local::beforeDestroy modalBeforeDestroy " + (modal.type) + "BeforeDestroy"), modal);
    if (modal.$el) {
      modal.$el.trigger(("modal:beforedestroy " + (modal.type.toLowerCase()) + ":beforedestroy"), modal);
      if (modal.$el.length && modal.$el[0].f7Modal) {
        delete modal.$el[0].f7Modal;
      }
    }
    Utils.deleteProps(modal);
    modal = null;
  };

  return Modal;
}(Framework7Class));

var Dialog = (function (Modal) {
  function Dialog(app, params) {
    var extendedParams = Utils.extend({
      title: app.params.modals.dialogTitle,
      text: undefined,
      content: '',
      buttons: [],
      verticalButtons: false,
      onClick: undefined,
      cssClass: undefined,
      on: {},
    }, params);

    // Extends with open/close Modal methods;
    Modal.call(this, app, extendedParams);

    var dialog = this;

    var title = extendedParams.title;
    var text = extendedParams.text;
    var content = extendedParams.content;
    var buttons = extendedParams.buttons;
    var verticalButtons = extendedParams.verticalButtons;
    var cssClass = extendedParams.cssClass;

    dialog.params = extendedParams;

    // Find Element
    var $el;
    if (!dialog.params.el) {
      var dialogClasses = ['dialog'];
      if (buttons.length === 0) { dialogClasses.push('dialog-no-buttons'); }
      if (buttons.length > 0) { dialogClasses.push(("dialog-buttons-" + (buttons.length))); }
      if (verticalButtons) { dialogClasses.push('dialog-buttons-vertical'); }
      if (cssClass) { dialogClasses.push(cssClass); }

      var buttonsHTML = '';
      if (buttons.length > 0) {
        buttonsHTML = "\n          <div class=\"dialog-buttons\">\n            " + (buttons.map(function (button) { return ("\n              <span class=\"dialog-button" + (button.bold ? ' dialog-button-bold' : '') + (button.color ? (" color-" + (button.color)) : '') + "\">" + (button.text) + "</span>\n            "); }).join('')) + "\n          </div>\n        ";
      }

      var dialogHtml = "\n        <div class=\"" + (dialogClasses.join(' ')) + "\">\n          <div class=\"dialog-inner\">\n            " + (title ? ("<div class=\"dialog-title\">" + title + "</div>") : '') + "\n            " + (text ? ("<div class=\"dialog-text\">" + text + "</div>") : '') + "\n            " + content + "\n          </div>\n          " + buttonsHTML + "\n        </div>\n      ";
      $el = $$1(dialogHtml);
    } else {
      $el = $$1(dialog.params.el);
    }

    if ($el && $el.length > 0 && $el[0].f7Modal) {
      return $el[0].f7Modal;
    }

    if ($el.length === 0) {
      return dialog.destroy();
    }

    var $backdropEl = app.root.children('.dialog-backdrop');
    if ($backdropEl.length === 0) {
      $backdropEl = $$1('<div class="dialog-backdrop"></div>');
      app.root.append($backdropEl);
    }

    // Assign events
    function buttonOnClick(e) {
      var buttonEl = this;
      var index = $$1(buttonEl).index();
      var button = buttons[index];
      if (button.onClick) { button.onClick(dialog, e); }
      if (dialog.params.onClick) { dialog.params.onClick(dialog, index); }
      if (button.close !== false) { dialog.close(); }
    }
    if (buttons && buttons.length > 0) {
      $el.find('.dialog-button').each(function (index, buttonEl) {
        $$1(buttonEl).on('click', buttonOnClick);
      });
      dialog.on('close', function () {
        $el.find('.dialog-button').each(function (index, buttonEl) {
          $$1(buttonEl).off('click', buttonOnClick);
        });
      });
    }
    Utils.extend(dialog, {
      app: app,
      $el: $el,
      el: $el[0],
      $backdropEl: $backdropEl,
      backdropEl: $backdropEl[0],
      type: 'dialog',
      setProgress: function setProgress(progress, duration) {
        app.progressbar.set($el.find('.progressbar'), progress, duration);
        return dialog;
      },
      setText: function setText(newText) {
        var $textEl = $el.find('.dialog-text');
        if ($textEl.length === 0) {
          $textEl = $$1('<div class="dialog-text"></div>');
          if (typeof title !== 'undefined') {
            $textEl.insertAfter($el.find('.dialog-title'));
          } else {
            $el.find('.dialog-inner').prepend($textEl);
          }
        }
        $textEl.html(newText);
        dialog.params.text = newText;
        return dialog;
      },
      setTitle: function setTitle(newTitle) {
        var $titleEl = $el.find('.dialog-title');
        if ($titleEl.length === 0) {
          $titleEl = $$1('<div class="dialog-title"></div>');
          $el.find('.dialog-inner').prepend($titleEl);
        }
        $titleEl.html(newTitle);
        dialog.params.title = newTitle;
        return dialog;
      },
    });

    $el[0].f7Modal = dialog;

    return dialog;
  }

  if ( Modal ) Dialog.__proto__ = Modal;
  Dialog.prototype = Object.create( Modal && Modal.prototype );
  Dialog.prototype.constructor = Dialog;

  return Dialog;
}(Modal));

var Swipeout = {
  init: function init() {
    var app = this;
    var touchesStart = {};
    var isTouched;
    var isMoved;
    var isScrolling;
    var touchStartTime;
    var touchesDiff;
    var $swipeoutEl;
    var $swipeoutContent;
    var $actionsRight;
    var $actionsLeft;
    var actionsLeftWidth;
    var actionsRightWidth;
    var translate;
    var opened;
    var openedActionsSide;
    var $leftButtons;
    var $rightButtons;
    var direction;
    var $overswipeLeftButton;
    var $overswipeRightButton;
    var overswipeLeft;
    var overswipeRight;

    function handleTouchStart(e) {
      if (!Swipeout.allow) { return; }
      isMoved = false;
      isTouched = true;
      isScrolling = undefined;
      touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
      touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
      touchStartTime = (new Date()).getTime();
    }
    function handleTouchMove(e) {
      if (!isTouched) { return; }
      var pageX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
      var pageY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;
      if (typeof isScrolling === 'undefined') {
        isScrolling = !!(isScrolling || Math.abs(pageY - touchesStart.y) > Math.abs(pageX - touchesStart.x));
      }
      if (isScrolling) {
        isTouched = false;
        return;
      }

      if (!isMoved) {
        if ($$1('.list.sortable-opened').length > 0) { return; }
        $swipeoutEl = $$1(this);
        $swipeoutContent = $swipeoutEl.find('.swipeout-content');
        $actionsRight = $swipeoutEl.find('.swipeout-actions-right');
        $actionsLeft = $swipeoutEl.find('.swipeout-actions-left');
        actionsLeftWidth = null;
        actionsRightWidth = null;
        $leftButtons = null;
        $rightButtons = null;
        $overswipeRightButton = null;
        $overswipeLeftButton = null;
        if ($actionsLeft.length > 0) {
          actionsLeftWidth = $actionsLeft.outerWidth();
          $leftButtons = $actionsLeft.children('a');
          $overswipeLeftButton = $actionsLeft.find('.swipeout-overswipe');
        }
        if ($actionsRight.length > 0) {
          actionsRightWidth = $actionsRight.outerWidth();
          $rightButtons = $actionsRight.children('a');
          $overswipeRightButton = $actionsRight.find('.swipeout-overswipe');
        }
        opened = $swipeoutEl.hasClass('swipeout-opened');
        if (opened) {
          openedActionsSide = $swipeoutEl.find('.swipeout-actions-left.swipeout-actions-opened').length > 0 ? 'left' : 'right';
        }
        $swipeoutEl.removeClass('swipeout-transitioning');
        if (!app.params.swipeoutNoFollow) {
          $swipeoutEl.find('.swipeout-actions-opened').removeClass('swipeout-actions-opened');
          $swipeoutEl.removeClass('swipeout-opened');
        }
      }
      isMoved = true;
      e.preventDefault();

      touchesDiff = pageX - touchesStart.x;
      translate = touchesDiff;

      if (opened) {
        if (openedActionsSide === 'right') { translate -= actionsRightWidth; }
        else { translate += actionsLeftWidth; }
      }

      if (
          (translate > 0 && $actionsLeft.length === 0)
          ||
          (translate < 0 && $actionsRight.length === 0)
      ) {
        if (!opened) {
          isTouched = false;
          isMoved = false;
          $swipeoutContent.transform('');
          if ($rightButtons && $rightButtons.length > 0) {
            $rightButtons.transform('');
          }
          if ($leftButtons && $leftButtons.length > 0) {
            $leftButtons.transform('');
          }
          return;
        }
        translate = 0;
      }

      if (translate < 0) { direction = 'to-left'; }
      else if (translate > 0) { direction = 'to-right'; }
      else if (!direction) { direction = 'to-left'; }

      var buttonOffset;
      var progress;

      e.f7PreventPanelSwipe = true;
      if (app.params.swipeoutNoFollow) {
        if (opened) {
          if (openedActionsSide === 'right' && touchesDiff > 0) {
            app.swipeout.close($swipeoutEl);
          }
          if (openedActionsSide === 'left' && touchesDiff < 0) {
            app.swipeout.close($swipeoutEl);
          }
        } else {
          if (touchesDiff < 0 && $actionsRight.length > 0) {
            app.swipeout.open($swipeoutEl, 'right');
          }
          if (touchesDiff > 0 && $actionsLeft.length > 0) {
            app.swipeout.open($swipeoutEl, 'left');
          }
        }
        isTouched = false;
        isMoved = false;
        return;
      }
      overswipeLeft = false;
      overswipeRight = false;
      if ($actionsRight.length > 0) {
        // Show right actions
        var buttonTranslate = translate;
        progress = buttonTranslate / actionsRightWidth;
        if (buttonTranslate < -actionsRightWidth) {
          buttonTranslate = -actionsRightWidth - (Math.pow( (-buttonTranslate - actionsRightWidth), 0.8 ));
          translate = buttonTranslate;
          if ($overswipeRightButton.length > 0) {
            overswipeRight = true;
          }
        }
        if (direction !== 'to-left') {
          progress = 0;
          buttonTranslate = 0;
        }
        $rightButtons.each(function (index, buttonEl) {
          var $buttonEl = $$1(buttonEl);
          if (typeof buttonEl.f7SwipeoutButtonOffset === 'undefined') {
            $buttonEl[0].f7SwipeoutButtonOffset = buttonEl.offsetLeft;
          }
          buttonOffset = buttonEl.f7SwipeoutButtonOffset;
          if ($overswipeRightButton.length > 0 && $buttonEl.hasClass('swipeout-overswipe') && direction === 'to-left') {
            $buttonEl.css({ left: ((overswipeRight ? -buttonOffset : 0) + "px") });
            if (overswipeRight) {
              $buttonEl.addClass('swipeout-overswipe-active');
            } else {
              $buttonEl.removeClass('swipeout-overswipe-active');
            }
          }
          $buttonEl.transform(("translate3d(" + (buttonTranslate - (buttonOffset * (1 + Math.max(progress, -1)))) + "px,0,0)"));
        });
      }
      if ($actionsLeft.length > 0) {
        // Show left actions
        var buttonTranslate$1 = translate;
        progress = buttonTranslate$1 / actionsLeftWidth;
        if (buttonTranslate$1 > actionsLeftWidth) {
          buttonTranslate$1 = actionsLeftWidth + (Math.pow( (buttonTranslate$1 - actionsLeftWidth), 0.8 ));
          translate = buttonTranslate$1;
          if ($overswipeLeftButton.length > 0) {
            overswipeLeft = true;
          }
        }
        if (direction !== 'to-right') {
          buttonTranslate$1 = 0;
          progress = 0;
        }
        $leftButtons.each(function (index, buttonEl) {
          var $buttonEl = $$1(buttonEl);
          if (typeof buttonEl.f7SwipeoutButtonOffset === 'undefined') {
            $buttonEl[0].f7SwipeoutButtonOffset = actionsLeftWidth - buttonEl.offsetLeft - buttonEl.offsetWidth;
          }
          buttonOffset = buttonEl.f7SwipeoutButtonOffset;
          if ($overswipeLeftButton.length > 0 && $buttonEl.hasClass('swipeout-overswipe') && direction === 'to-right') {
            $buttonEl.css({ left: ((overswipeLeft ? buttonOffset : 0) + "px") });
            if (overswipeLeft) {
              $buttonEl.addClass('swipeout-overswipe-active');
            } else {
              $buttonEl.removeClass('swipeout-overswipe-active');
            }
          }
          if ($leftButtons.length > 1) {
            $buttonEl.css('z-index', $leftButtons.length - index);
          }
          $buttonEl.transform(("translate3d(" + (buttonTranslate$1 + (buttonOffset * (1 - Math.min(progress, 1)))) + "px,0,0)"));
        });
      }
      $swipeoutEl.trigger('swipeout', progress);
      app.emit('swipeout', $swipeoutEl[0], progress);
      $swipeoutContent.transform(("translate3d(" + translate + "px,0,0)"));
    }
    function handleTouchEnd() {
      if (!isTouched || !isMoved) {
        isTouched = false;
        isMoved = false;
        return;
      }

      isTouched = false;
      isMoved = false;
      var timeDiff = (new Date()).getTime() - touchStartTime;
      var $actions = direction === 'to-left' ? $actionsRight : $actionsLeft;
      var actionsWidth = direction === 'to-left' ? actionsRightWidth : actionsLeftWidth;
      var action;
      var $buttons;
      var i;

      if (
        (
          timeDiff < 300
          &&
          (
            (touchesDiff < -10 && direction === 'to-left')
            ||
            (touchesDiff > 10 && direction === 'to-right')
          )
        )
        ||
        (
          timeDiff >= 300
          &&
          (Math.abs(translate) > actionsWidth / 2)
        )
      ) {
        action = 'open';
      } else {
        action = 'close';
      }
      if (timeDiff < 300) {
        if (Math.abs(translate) === 0) { action = 'close'; }
        if (Math.abs(translate) === actionsWidth) { action = 'open'; }
      }

      if (action === 'open') {
        Swipeout.el = $swipeoutEl[0];
        $swipeoutEl.trigger('swipeout:open');
        app.emit('swipeoutOpen', $swipeoutEl[0]);
        $swipeoutEl.addClass('swipeout-opened swipeout-transitioning');
        var newTranslate = direction === 'to-left' ? -actionsWidth : actionsWidth;
        $swipeoutContent.transform(("translate3d(" + newTranslate + "px,0,0)"));
        $actions.addClass('swipeout-actions-opened');
        $buttons = direction === 'to-left' ? $rightButtons : $leftButtons;
        if ($buttons) {
          for (i = 0; i < $buttons.length; i += 1) {
            $$1($buttons[i]).transform(("translate3d(" + newTranslate + "px,0,0)"));
          }
        }
        if (overswipeRight) {
          $actionsRight.find('.swipeout-overswipe')[0].click();
        }
        if (overswipeLeft) {
          $actionsLeft.find('.swipeout-overswipe')[0].click();
        }
      } else {
        $swipeoutEl.trigger('swipeout:close');
        app.emit('swipeoutClose', $swipeoutEl[0]);
        Swipeout.el = undefined;
        $swipeoutEl.addClass('swipeout-transitioning').removeClass('swipeout-opened');
        $swipeoutContent.transform('');
        $actions.removeClass('swipeout-actions-opened');
      }

      var buttonOffset;
      if ($leftButtons && $leftButtons.length > 0 && $leftButtons !== $buttons) {
        $leftButtons.each(function (index, buttonEl) {
          var $buttonEl = $$1(buttonEl);
          buttonOffset = buttonEl.f7SwipeoutButtonOffset;
          if (typeof buttonOffset === 'undefined') {
            $buttonEl[0].f7SwipeoutButtonOffset = actionsLeftWidth - buttonEl.offsetLeft - buttonEl.offsetWidth;
          }
          $buttonEl.transform(("translate3d(" + buttonOffset + "px,0,0)"));
        });
      }
      if ($rightButtons && $rightButtons.length > 0 && $rightButtons !== $buttons) {
        $rightButtons.each(function (index, buttonEl) {
          var $buttonEl = $$1(buttonEl);
          buttonOffset = buttonEl.f7SwipeoutButtonOffset;
          if (typeof buttonOffset === 'undefined') {
            $buttonEl[0].f7SwipeoutButtonOffset = buttonEl.offsetLeft;
          }
          $buttonEl.transform(("translate3d(" + (-buttonOffset) + "px,0,0)"));
        });
      }
      $swipeoutContent.transitionEnd(function () {
        if ((opened && action === 'open') || (!opened && action === 'close')) { return; }
        $swipeoutEl.trigger(action === 'open' ? 'swipeout:opened' : 'swipeout:closed');
        app.emit(action === 'open' ? 'swipeoutOpened' : 'swipeoutClosed', $swipeoutEl[0]);
        $swipeoutEl.removeClass('swipeout-transitioning');
        if (opened && action === 'close') {
          if ($actionsRight.length > 0) {
            $rightButtons.transform('');
          }
          if ($actionsLeft.length > 0) {
            $leftButtons.transform('');
          }
        }
      });
    }

    var activeListener = app.support.passiveListener ? { passive: false } : false;
    var passiveListener = app.support.passiveListener ? { passive: true } : false;

    app.on('touchstart', function (e) {
      if (Swipeout.el) {
        var $targetEl = $$1(e.target);
        if (!(
          $$1(Swipeout.el).is($targetEl[0]) ||
          $targetEl.parents('.swipeout').is(Swipeout.el) ||
          $targetEl.hasClass('modal-in') ||
          $targetEl[0].className.indexOf('-backdrop') > 0 ||
          $targetEl.hasClass('actions-modal') ||
          $targetEl.parents('.actions-modal.modal-in, .dialog.modal-in').length > 0
          )) {
          app.swipeout.close(Swipeout.el);
        }
      }
    });
    $$1(document).on(app.touchEvents.start, 'li.swipeout', handleTouchStart, passiveListener);
    $$1(document).on(app.touchEvents.move, 'li.swipeout', handleTouchMove, activeListener);
    $$1(document).on(app.touchEvents.end, 'li.swipeout', handleTouchEnd, passiveListener);
  },
  allow: true,
  el: undefined,
  open: function open() {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var app = this;
    var el = args[0];
    var side = args[1];
    var callback = args[2];
    if (typeof args[1] === 'function') {
      var assign;
      (assign = args, el = assign[0], callback = assign[1], side = assign[2]);
    }
    var $el = $$1(el).eq(0);

    if ($el.length === 0) { return; }
    if (!$el.hasClass('swipeout') || $el.hasClass('swipeout-opened')) { return; }
    if (!side) {
      if ($el.find('.swipeout-actions-right').length > 0) { side = 'right'; }
      else { side = 'left'; }
    }
    var $swipeoutActions = $el.find((".swipeout-actions-" + side));
    var $swipeoutContent = $el.find('.swipeout-content');
    if ($swipeoutActions.length === 0) { return; }
    $el.trigger('swipeout:open').addClass('swipeout-opened').removeClass('swipeout-transitioning');
    app.emit('swipeoutOpen', $el[0]);
    $swipeoutActions.addClass('swipeout-actions-opened');
    var $buttons = $swipeoutActions.children('a');
    var swipeoutActionsWidth = $swipeoutActions.outerWidth();
    var translate = side === 'right' ? -swipeoutActionsWidth : swipeoutActionsWidth;
    if ($buttons.length > 1) {
      $buttons.each(function (buttonIndex, buttonEl) {
        var $buttonEl = $$1(buttonEl);
        if (side === 'right') {
          $buttonEl.transform(("translate3d(" + (-buttonEl.offsetLeft) + "px,0,0)"));
        } else {
          $buttonEl.css('z-index', $buttons.length - buttonIndex).transform(("translate3d(" + (swipeoutActionsWidth - buttonEl.offsetWidth - buttonEl.offsetLeft) + "px,0,0)"));
        }
      });
    }
    $el.addClass('swipeout-transitioning');
    $swipeoutContent.transitionEnd(function () {
      $el.trigger('swipeout:opened');
      app.emit('swipeoutOpened', $el[0]);
      if (callback) { callback.call($el[0]); }
    });
    Utils.nextFrame(function () {
      $buttons.transform(("translate3d(" + translate + "px,0,0)"));
      $swipeoutContent.transform(("translate3d(" + translate + "px,0,0)"));
    });
    Swipeout.el = $el[0];
  },
  close: function close(el, callback) {
    var app = this;
    var $el = $$1(el).eq(0);
    if ($el.length === 0) { return; }
    if (!$el.hasClass('swipeout-opened')) { return; }
    var side = $el.find('.swipeout-actions-opened').hasClass('swipeout-actions-right') ? 'right' : 'left';
    var $swipeoutActions = $el.find('.swipeout-actions-opened').removeClass('swipeout-actions-opened');
    var $buttons = $swipeoutActions.children('a');
    var swipeoutActionsWidth = $swipeoutActions.outerWidth();
    Swipeout.allow = false;
    $el.trigger('swipeout:close');
    app.emit('swipeoutClose', $el[0]);
    $el.removeClass('swipeout-opened').addClass('swipeout-transitioning');

    var closeTimeout;
    function onSwipeoutClose() {
      Swipeout.allow = true;
      if ($el.hasClass('swipeout-opened')) { return; }
      $el.removeClass('swipeout-transitioning');
      $buttons.transform('');
      $el.trigger('swipeout:closed');
      app.emit('swipeoutClosed', $el[0]);
      if (callback) { callback.call($el[0]); }
      if (closeTimeout) { clearTimeout(closeTimeout); }
    }
    $el.find('.swipeout-content').transform('').transitionEnd(onSwipeoutClose);
    closeTimeout = setTimeout(onSwipeoutClose, 500);

    $buttons.each(function (index, buttonEl) {
      var $buttonEl = $$1(buttonEl);
      if (side === 'right') {
        $buttonEl.transform(("translate3d(" + (-buttonEl.offsetLeft) + "px,0,0)"));
      } else {
        $buttonEl.transform(("translate3d(" + (swipeoutActionsWidth - buttonEl.offsetWidth - buttonEl.offsetLeft) + "px,0,0)"));
      }
      $buttonEl.css({ left: '0px' }).removeClass('swipeout-overswipe-active');
    });
    if (Swipeout.el && Swipeout.el === $el[0]) { Swipeout.el = undefined; }
  },
  delete: function delete$1(el, callback) {
    var app = this;
    var $el = $$1(el).eq(0);
    if ($el.length === 0) { return; }
    Swipeout.el = undefined;
    $el.trigger('swipeout:delete');
    app.emit('swipeoutDelete', $el[0]);
    $el.css({ height: (($el.outerHeight()) + "px") });
    $el.transitionEnd(function () {
      $el.trigger('swipeout:deleted');
      app.emit('swipeoutDeleted', $el[0]);
      if (callback) { callback.call($el[0]); }
      if ($el.parents('.virtual-list').length > 0) {
        var virtualList = $el.parents('.virtual-list')[0].f7VirtualList;
        var virtualIndex = $el[0].f7VirtualListIndex;
        if (virtualList && typeof virtualIndex !== 'undefined') { virtualList.deleteItem(virtualIndex); }
      } else if (app.params.swipeout.removeElements) {
        if (app.params.swipeout.removeElementsWithTimeout) {
          setTimeout(function () {
            $el.remove();
          }, app.params.swipeout.removeElementsTimeout);
        } else {
          $el.remove();
        }
      } else {
        $el.removeClass('swipeout-deleting swipeout-transitioning');
      }
    });
    Utils.nextFrame(function () {
      $el
        .addClass('swipeout-deleting swipeout-transitioning')
        .css({ height: '0px' })
        .find('.swipeout-content')
        .transform('translate3d(-100%,0,0)');
    });
  },
};
function Support$3() {
  return {
    touch: (window.Modernizr && window.Modernizr.touch === true) || (function checkTouch() {
      return !!(('ontouchstart' in window) || (window.DocumentTouch && document instanceof window.DocumentTouch));
    }()),

    transforms3d: (window.Modernizr && window.Modernizr.csstransforms3d === true) || (function checkTransforms3d() {
      var div = document.createElement('div').style;
      return ('webkitPerspective' in div || 'MozPerspective' in div || 'OPerspective' in div || 'MsPerspective' in div || 'perspective' in div);
    }()),

    flexbox: (function checkFlexbox() {
      var div = document.createElement('div').style;
      var styles = ('alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient').split(' ');
      for (var i = 0; i < styles.length; i += 1) {
        if (styles[i] in div) { return true; }
      }
      return false;
    }()),

    observer: (function checkObserver() {
      return ('MutationObserver' in window || 'WebkitMutationObserver' in window);
    }()),

    passiveListener: (function checkPassiveListener() {
      var supportsPassive = false;
      try {
        var opts = Object.defineProperty({}, 'passive', {
          get: function get() {
            supportsPassive = true;
          },
        });
        window.addEventListener('testPassiveListener', null, opts);
      } catch (e) {
        // No support
      }
      return supportsPassive;
    }()),

    gestures: (function checkGestures() {
      return 'ongesturestart' in window;
    }()),
  };
}
var Support$4 = Support$3();

var SwiperClass = function SwiperClass(params) {
  if ( params === void 0 ) params = {};

  var self = this;
  self.params = params;

  // Events
  self.eventsListeners = {};

  if (self.params && self.params.on) {
    Object.keys(self.params.on).forEach(function (eventName) {
      self.on(eventName, self.params.on[eventName]);
    });
  }
};
SwiperClass.prototype.on = function on (events, handler) {
  var self = this;
  if (typeof handler !== 'function') { return self; }
  events.split(' ').forEach(function (event) {
    if (!self.eventsListeners[event]) { self.eventsListeners[event] = []; }
    self.eventsListeners[event].push(handler);
  });
  return self;
};
SwiperClass.prototype.once = function once (events, handler) {
  var self = this;
  if (typeof handler !== 'function') { return self; }
  function onceHandler() {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

    handler.apply(self, args);
    self.off(events, onceHandler);
  }
  return self.on(events, onceHandler);
};
SwiperClass.prototype.off = function off (events, handler) {
  var self = this;
  events.split(' ').forEach(function (event) {
    if (typeof handler === 'undefined') {
      self.eventsListeners[event] = [];
    } else {
      self.eventsListeners[event].forEach(function (eventHandler, index) {
        if (eventHandler === handler) {
          self.eventsListeners[event].splice(index, 1);
        }
      });
    }
  });
  return self;
};
SwiperClass.prototype.emit = function emit () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

  var self = this;
  var events;
  var data;
  var context;
  if (typeof args[0] === 'string' || Array.isArray(args[0])) {
    events = args[0];
    data = args.slice(1, args.length);
    context = self;
  } else {
    events = args[0].events;
    data = args[0].data;
    context = args[0].context || self;
  }
  var eventsArray = Array.isArray(events) ? events : events.split(' ');
  eventsArray.forEach(function (event) {
    if (self.eventsListeners[event]) {
      self.eventsListeners[event].forEach(function (eventHandler) {
        eventHandler.apply(context, data);
      });
    }
  });
  return self;
};
SwiperClass.prototype.useModulesParams = function useModulesParams (instanceParams) {
  var instance = this;
  if (!instance.modules) { return; }
  Object.keys(instance.modules).forEach(function (moduleName) {
    var module = instance.modules[moduleName];
    // Extend params
    if (module.params) {
      Utils.extend(instanceParams, module.params);
    }
  });
};
SwiperClass.prototype.useModules = function useModules (modulesParams) {
    if ( modulesParams === void 0 ) modulesParams = {};

  var instance = this;
  if (!instance.modules) { return; }
  Object.keys(instance.modules).forEach(function (moduleName) {
    var module = instance.modules[moduleName];
    var moduleParams = modulesParams[moduleName] || {};
    // Extend instance methods and props
    if (module.instance) {
      Object.keys(module.instance).forEach(function (modulePropName) {
        var moduleProp = module.instance[modulePropName];
        if (typeof moduleProp === 'function') {
          instance[modulePropName] = moduleProp.bind(instance);
        } else {
          instance[modulePropName] = moduleProp;
        }
      });
    }
    // Add event listeners
    if (module.on && instance.on) {
      Object.keys(module.on).forEach(function (moduleEventName) {
        instance.on(moduleEventName, module.on[moduleEventName]);
      });
    }

    // Module create callback
    if (module.create) {
      module.create.bind(instance)(moduleParams);
    }
  });
};
SwiperClass.installModule = function installModule (module) {
    var params = [], len = arguments.length - 1;
    while ( len-- > 0 ) params[ len ] = arguments[ len + 1 ];

  var Class = this;
  if (!Class.prototype.modules) { Class.prototype.modules = {}; }
  var name = module.name || (((Object.keys(Class.prototype.modules).length) + "_" + (Utils.now())));
  Class.prototype.modules[name] = module;
  // Prototype
  if (module.proto) {
    Object.keys(module.proto).forEach(function (key) {
      Class.prototype[key] = module.proto[key];
    });
  }
  // Class
  if (module.static) {
    Object.keys(module.static).forEach(function (key) {
      Class[key] = module.static[key];
    });
  }
  // Callback
  if (module.install) {
    module.install.apply(Class, params);
  }
  return Class;
};
SwiperClass.use = function use (module) {
    var params = [], len = arguments.length - 1;
    while ( len-- > 0 ) params[ len ] = arguments[ len + 1 ];

  var Class = this;
  if (Array.isArray(module)) {
    module.forEach(function (m) { return Class.installModule(m); });
  }
  return Class.installModule.apply(Class, [ module ].concat( params ));
};

var touchEventsData = {
  isTouched: undefined,
  isMoved: undefined,
  allowTouchCallbacks: undefined,
  touchStartTime: undefined,
  isScrolling: undefined,
  currentTranslate: undefined,
  startTranslate: undefined,
  allowThresholdMove: undefined,
  // Form elements to match
  formElements: 'input, select, textarea, button, video',
  // Last click time
  lastClickTime: Utils.now(),
  clickTimeout: undefined,
  // Velocities
  velocities: [],
  allowMomentumBounce: undefined,
  isTouchEvent: undefined,
  startMoving: undefined,
};

var updateSize = function () {
  var swiper = this;
  var width;
  var height;
  var $el = swiper.$el;
  if (typeof swiper.params.width !== 'undefined') {
    width = swiper.params.width;
  } else {
    width = $el[0].clientWidth;
  }
  if (typeof swiper.params.height !== 'undefined') {
    height = swiper.params.height;
  } else {
    height = $el[0].clientHeight;
  }
  if ((width === 0 && swiper.isHorizontal()) || (height === 0 && swiper.isVertical())) {
    return;
  }

  // Subtract paddings
  width = width - parseInt($el.css('padding-left'), 10) - parseInt($el.css('padding-right'), 10);
  height = height - parseInt($el.css('padding-top'), 10) - parseInt($el.css('padding-bottom'), 10);

  Utils.extend(swiper, {
    width: width,
    height: height,
    size: swiper.isHorizontal() ? width : height,
  });
};

var updateSlides = function () {
  var swiper = this;
  var params = swiper.params;

  var $wrapperEl = swiper.$wrapperEl;
  var swiperSize = swiper.size;
  var rtl = swiper.rtl;
  var wrongRTL = swiper.wrongRTL;
  var slides = $wrapperEl.children(("." + (swiper.params.slideClass)));
  var snapGrid = [];
  var slidesGrid = [];
  var slidesSizesGrid = [];

  var offsetBefore = params.slidesOffsetBefore;
  if (typeof offsetBefore === 'function') {
    offsetBefore = params.slidesOffsetBefore.call(swiper);
  }

  var offsetAfter = params.slidesOffsetAfter;
  if (typeof offsetAfter === 'function') {
    offsetAfter = params.slidesOffsetAfter.call(swiper);
  }

  var previousSlidesLength = swiper.slides.length;
  var previousSnapGridLength = swiper.snapGrid.length;
  var previousSlidesGridLength = swiper.snapGrid.length;

  var spaceBetween = params.spaceBetween;
  var slidePosition = -offsetBefore;
  var prevSlideSize = 0;
  var index = 0;
  if (typeof swiperSize === 'undefined') {
    return;
  }
  if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {
    spaceBetween = (parseFloat(spaceBetween.replace('%', '')) / 100) * swiperSize;
  }

  swiper.virtualSize = -spaceBetween;

  // reset margins
  if (rtl) { slides.css({ marginLeft: '', marginTop: '' }); }
  else { slides.css({ marginRight: '', marginBottom: '' }); }

  var slidesNumberEvenToRows;
  if (params.slidesPerColumn > 1) {
    if (Math.floor(slides.length / params.slidesPerColumn) === slides.length / swiper.params.slidesPerColumn) {
      slidesNumberEvenToRows = slides.length;
    } else {
      slidesNumberEvenToRows = Math.ceil(slides.length / params.slidesPerColumn) * params.slidesPerColumn;
    }
    if (params.slidesPerView !== 'auto' && params.slidesPerColumnFill === 'row') {
      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, params.slidesPerView * params.slidesPerColumn);
    }
  }

  // Calc slides
  var slideSize;
  var slidesPerColumn = params.slidesPerColumn;
  var slidesPerRow = slidesNumberEvenToRows / slidesPerColumn;
  var numFullColumns = slidesPerRow - ((params.slidesPerColumn * slidesPerRow) - slides.length);
  for (var i = 0; i < slides.length; i += 1) {
    slideSize = 0;
    var slide = slides.eq(i);
    if (params.slidesPerColumn > 1) {
      // Set slides order
      var newSlideOrderIndex = (void 0);
      var column = (void 0);
      var row = (void 0);
      if (params.slidesPerColumnFill === 'column') {
        column = Math.floor(i / slidesPerColumn);
        row = i - (column * slidesPerColumn);
        if (column > numFullColumns || (column === numFullColumns && row === slidesPerColumn - 1)) {
          row += 1;
          if (row >= slidesPerColumn) {
            row = 0;
            column += 1;
          }
        }
        newSlideOrderIndex = column + ((row * slidesNumberEvenToRows) / slidesPerColumn);
        slide
          .css({
            '-webkit-box-ordinal-group': newSlideOrderIndex,
            '-moz-box-ordinal-group': newSlideOrderIndex,
            '-ms-flex-order': newSlideOrderIndex,
            '-webkit-order': newSlideOrderIndex,
            order: newSlideOrderIndex,
          });
      } else {
        row = Math.floor(i / slidesPerRow);
        column = i - (row * slidesPerRow);
      }
      slide
        .css(
          ("margin-" + (swiper.isHorizontal() ? 'top' : 'left')),
          (row !== 0 && params.spaceBetween) && (((params.spaceBetween) + "px"))
        )
        .attr('data-swiper-column', column)
        .attr('data-swiper-row', row);
    }
    if (slide.css('display') === 'none') { continue; }
    if (params.slidesPerView === 'auto') {
      slideSize = swiper.isHorizontal() ? slide.outerWidth(true) : slide.outerHeight(true);
      if (params.roundLengths) { slideSize = Math.floor(slideSize); }
    } else {
      slideSize = (swiperSize - ((params.slidesPerView - 1) * spaceBetween)) / params.slidesPerView;
      if (params.roundLengths) { slideSize = Math.floor(slideSize); }

      if (swiper.isHorizontal()) {
        slides[i].style.width = slideSize + "px";
      } else {
        slides[i].style.height = slideSize + "px";
      }
    }
    slides[i].swiperSlideSize = slideSize;
    slidesSizesGrid.push(slideSize);


    if (params.centeredSlides) {
      slidePosition = slidePosition + (slideSize / 2) + (prevSlideSize / 2) + spaceBetween;
      if (prevSlideSize === 0 && i !== 0) { slidePosition = slidePosition - (swiperSize / 2) - spaceBetween; }
      if (i === 0) { slidePosition = slidePosition - (swiperSize / 2) - spaceBetween; }
      if (Math.abs(slidePosition) < 1 / 1000) { slidePosition = 0; }
      if ((index) % params.slidesPerGroup === 0) { snapGrid.push(slidePosition); }
      slidesGrid.push(slidePosition);
    } else {
      if ((index) % params.slidesPerGroup === 0) { snapGrid.push(slidePosition); }
      slidesGrid.push(slidePosition);
      slidePosition = slidePosition + slideSize + spaceBetween;
    }

    swiper.virtualSize += slideSize + spaceBetween;

    prevSlideSize = slideSize;

    index += 1;
  }
  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;
  var newSlidesGrid;

  if (
    rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {
    $wrapperEl.css({ width: ((swiper.virtualSize + params.spaceBetween) + "px") });
  }
  if (!swiper.support.flexbox || params.setWrapperSize) {
    if (swiper.isHorizontal()) { $wrapperEl.css({ width: ((swiper.virtualSize + params.spaceBetween) + "px") }); }
    else { $wrapperEl.css({ height: ((swiper.virtualSize + params.spaceBetween) + "px") }); }
  }

  if (params.slidesPerColumn > 1) {
    swiper.virtualSize = (slideSize + params.spaceBetween) * slidesNumberEvenToRows;
    swiper.virtualSize = Math.ceil(swiper.virtualSize / params.slidesPerColumn) - params.spaceBetween;
    if (swiper.isHorizontal()) { $wrapperEl.css({ width: ((swiper.virtualSize + params.spaceBetween) + "px") }); }
    else { $wrapperEl.css({ height: ((swiper.virtualSize + params.spaceBetween) + "px") }); }
    if (params.centeredSlides) {
      newSlidesGrid = [];
      for (var i$1 = 0; i$1 < snapGrid.length; i$1 += 1) {
        if (snapGrid[i$1] < swiper.virtualSize + snapGrid[0]) { newSlidesGrid.push(snapGrid[i$1]); }
      }
      snapGrid = newSlidesGrid;
    }
  }

  // Remove last grid elements depending on width
  if (!params.centeredSlides) {
    newSlidesGrid = [];
    for (var i$2 = 0; i$2 < snapGrid.length; i$2 += 1) {
      if (snapGrid[i$2] <= swiper.virtualSize - swiperSize) {
        newSlidesGrid.push(snapGrid[i$2]);
      }
    }
    snapGrid = newSlidesGrid;
    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {
      snapGrid.push(swiper.virtualSize - swiperSize);
    }
  }
  if (snapGrid.length === 0) { snapGrid = [0]; }

  if (params.spaceBetween !== 0) {
    if (swiper.isHorizontal()) {
      if (rtl) { slides.css({ marginLeft: (spaceBetween + "px") }); }
      else { slides.css({ marginRight: (spaceBetween + "px") }); }
    } else { slides.css({ marginBottom: (spaceBetween + "px") }); }
  }

  Utils.extend(swiper, {
    slides: slides,
    snapGrid: snapGrid,
    slidesGrid: slidesGrid,
    slidesSizesGrid: slidesSizesGrid,
  });

  if (slides.length !== previousSlidesLength) {
    swiper.emit('slidesLengthChange');
  }
  if (snapGrid.length !== previousSnapGridLength) {
    swiper.emit('snapGridLengthChange');
  }
  if (slidesGrid.length !== previousSlidesGridLength) {
    swiper.emit('slidesGridLengthChange');
  }

  if (params.watchSlidesProgress || params.watchSlidesVisibility) {
    swiper.updateSlidesOffset();
  }
};

var updateAutoHeight = function () {
  var swiper = this;
  var activeSlides = [];
  var newHeight = 0;
  var i;

  // Find slides currently in view
  if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {
    for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {
      var index = swiper.activeIndex + i;
      if (index > swiper.slides.length) { break; }
      activeSlides.push(swiper.slides.eq(index)[0]);
    }
  } else {
    activeSlides.push(swiper.slides.eq(swiper.activeIndex)[0]);
  }

  // Find new height from highest slide in view
  for (i = 0; i < activeSlides.length; i += 1) {
    if (typeof activeSlides[i] !== 'undefined') {
      var height = activeSlides[i].offsetHeight;
      newHeight = height > newHeight ? height : newHeight;
    }
  }

  // Update Height
  if (newHeight) { swiper.$wrapperEl.css('height', (newHeight + "px")); }
};

var updateSlidesOffset = function () {
  var swiper = this;
  var slides = swiper.slides;
  for (var i = 0; i < slides.length; i += 1) {
    slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;
  }
};

var updateSlidesProgress = function (translate) {
  if ( translate === void 0 ) translate = this.translate || 0;

  var swiper = this;
  var params = swiper.params;

  var slides = swiper.slides;
  var rtl = swiper.rtl;

  if (slides.length === 0) { return; }
  if (typeof slides[0].swiperSlideOffset === 'undefined') { swiper.updateSlidesOffset(); }

  var offsetCenter = -translate;
  if (rtl) { offsetCenter = translate; }

  // Visible Slides
  slides.removeClass(params.slideVisibleClass);

  for (var i = 0; i < slides.length; i += 1) {
    var slide = slides[i];
    var slideProgress =
      (
        (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0)) - slide.swiperSlideOffset
      ) / (slide.swiperSlideSize + params.spaceBetween);
    if (params.watchSlidesVisibility) {
      var slideBefore = -(offsetCenter - slide.swiperSlideOffset);
      var slideAfter = slideBefore + swiper.slidesSizesGrid[i];
      var isVisible =
                (slideBefore >= 0 && slideBefore < swiper.size) ||
                (slideAfter > 0 && slideAfter <= swiper.size) ||
                (slideBefore <= 0 && slideAfter >= swiper.size);
      if (isVisible) {
        slides.eq(i).addClass(params.slideVisibleClass);
      }
    }
    slide.progress = rtl ? -slideProgress : slideProgress;
  }
};

var updateProgress = function (translate) {
  if ( translate === void 0 ) translate = this.translate || 0;

  var swiper = this;
  var params = swiper.params;

  var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
  var progress = swiper.progress;
  var isBeginning = swiper.isBeginning;
  var isEnd = swiper.isEnd;
  var wasBeginning = isBeginning;
  var wasEnd = isEnd;
  if (translatesDiff === 0) {
    progress = 0;
    isBeginning = true;
    isEnd = true;
  } else {
    progress = (translate - swiper.minTranslate()) / (translatesDiff);
    isBeginning = progress <= 0;
    isEnd = progress >= 1;
  }
  Utils.extend(swiper, {
    progress: progress,
    isBeginning: isBeginning,
    isEnd: isEnd,
  });

  if (params.watchSlidesProgress || params.watchSlidesVisibility) { swiper.updateSlidesProgress(translate); }

  if (isBeginning && !wasBeginning) {
    swiper.emit('reachBeginning toEdge');
  }
  if (isEnd && !wasEnd) {
    swiper.emit('reachEnd toEdge');
  }
  if ((wasBeginning && !isBeginning) || (wasEnd && !isEnd)) {
    swiper.emit('fromEdge');
  }

  swiper.emit('progress', progress);
};

var updateRealIndex = function () {
  var swiper = this;
  var previousRealIndex = swiper.realIndex;
  swiper.realIndex = parseInt(swiper.slides.eq(swiper.activeIndex).attr('data-swiper-slide-index') || swiper.activeIndex, 10);
  if (previousRealIndex !== swiper.realIndex) {
    swiper.emit('realIndexChange');
  }
};

var updateSlidesClasses = function () {
  var swiper = this;

  var slides = swiper.slides;
  var params = swiper.params;
  var $wrapperEl = swiper.$wrapperEl;
  var activeIndex = swiper.activeIndex;
  var realIndex = swiper.realIndex;

  slides.removeClass(((params.slideActiveClass) + " " + (params.slideNextClass) + " " + (params.slidePrevClass) + " " + (params.slideDuplicateActiveClass) + " " + (params.slideDuplicateNextClass) + " " + (params.slideDuplicatePrevClass)));

  var activeSlide = slides.eq(activeIndex);

  // Active classes
  activeSlide.addClass(params.slideActiveClass);

  if (params.loop) {
    // Duplicate to all looped slides
    if (activeSlide.hasClass(params.slideDuplicateClass)) {
      $wrapperEl
        .children(("." + (params.slideClass) + ":not(." + (params.slideDuplicateClass) + ")[data-swiper-slide-index=\"" + realIndex + "\"]"))
        .addClass(params.slideDuplicateActiveClass);
    } else {
      $wrapperEl
        .children(("." + (params.slideClass) + "." + (params.slideDuplicateClass) + "[data-swiper-slide-index=\"" + realIndex + "\"]"))
        .addClass(params.slideDuplicateActiveClass);
    }
  }
  // Next Slide
  var nextSlide = activeSlide.next(("." + (params.slideClass))).addClass(params.slideNextClass);
  if (params.loop && nextSlide.length === 0) {
    nextSlide = slides.eq(0);
    nextSlide.addClass(params.slideNextClass);
  }
  // Prev Slide
  var prevSlide = activeSlide.prev(("." + (params.slideClass))).addClass(params.slidePrevClass);
  if (params.loop && prevSlide.length === 0) {
    prevSlide = slides.eq(-1);
    prevSlide.addClass(params.slidePrevClass);
  }
  if (params.loop) {
    // Duplicate to all looped slides
    if (nextSlide.hasClass(params.slideDuplicateClass)) {
      $wrapperEl
        .children(("." + (params.slideClass) + ":not(." + (params.slideDuplicateClass) + ")[data-swiper-slide-index=\"" + (nextSlide.attr('data-swiper-slide-index')) + "\"]"))
        .addClass(params.slideDuplicateNextClass);
    } else {
      $wrapperEl
        .children(("." + (params.slideClass) + "." + (params.slideDuplicateClass) + "[data-swiper-slide-index=\"" + (nextSlide.attr('data-swiper-slide-index')) + "\"]"))
        .addClass(params.slideDuplicateNextClass);
    }
    if (prevSlide.hasClass(params.slideDuplicateClass)) {
      $wrapperEl
        .children(("." + (params.slideClass) + ":not(." + (params.slideDuplicateClass) + ")[data-swiper-slide-index=\"" + (prevSlide.attr('data-swiper-slide-index')) + "\"]"))
        .addClass(params.slideDuplicatePrevClass);
    } else {
      $wrapperEl
        .children(("." + (params.slideClass) + "." + (params.slideDuplicateClass) + "[data-swiper-slide-index=\"" + (prevSlide.attr('data-swiper-slide-index')) + "\"]"))
        .addClass(params.slideDuplicatePrevClass);
    }
  }
};

var updateActiveIndex = function () {
  var swiper = this;
  var translate = swiper.rtl ? swiper.translate : -swiper.translate;
  var slidesGrid = swiper.slidesGrid;
  var snapGrid = swiper.snapGrid;
  var params = swiper.params;
  var activeIndex = swiper.activeIndex;
  var newActiveIndex;
  var snapIndex;
  for (var i = 0; i < slidesGrid.length; i += 1) {
    if (typeof slidesGrid[i + 1] !== 'undefined') {
      if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - ((slidesGrid[i + 1] - slidesGrid[i]) / 2)) {
        newActiveIndex = i;
      } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {
        newActiveIndex = i + 1;
      }
    } else if (translate >= slidesGrid[i]) {
      newActiveIndex = i;
    }
  }
  // Normalize slideIndex
  if (params.normalizeSlideIndex) {
    if (newActiveIndex < 0 || typeof newActiveIndex === 'undefined') { newActiveIndex = 0; }
  }
  snapIndex = Math.floor(newActiveIndex / params.slidesPerGroup);
  if (snapIndex >= snapGrid.length) { snapIndex = snapGrid.length - 1; }

  if (newActiveIndex === activeIndex) {
    return;
  }
  Utils.extend(swiper, {
    snapIndex: snapIndex,
    previousIndex: activeIndex,
    activeIndex: newActiveIndex,
  });
  swiper.emit('aciveIndexChange');
  swiper.emit('snapIndexChange');
};

var updateClickedSlide = function (e) {
  var swiper = this;
  var params = swiper.params;
  var slide = $$1(e.target).closest(("." + (params.slideClass)))[0];
  var slideFound = false;
  if (slide) {
    for (var i = 0; i < swiper.slides.length; i += 1) {
      if (swiper.slides[i] === slide) { slideFound = true; }
    }
  }

  if (slide && slideFound) {
    swiper.clickedSlide = slide;
    swiper.clickedIndex = $$1(slide).index();
  } else {
    swiper.clickedSlide = undefined;
    swiper.clickedIndex = undefined;
    return;
  }
  if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {
    swiper.slideToClickedSlide();
  }
};

var update = {
  updateSize: updateSize,
  updateSlides: updateSlides,
  updateAutoHeight: updateAutoHeight,
  updateSlidesOffset: updateSlidesOffset,
  updateSlidesProgress: updateSlidesProgress,
  updateProgress: updateProgress,
  updateRealIndex: updateRealIndex,
  updateSlidesClasses: updateSlidesClasses,
  updateActiveIndex: updateActiveIndex,
  updateClickedSlide: updateClickedSlide,
};

var getTranslate = function (axis) {
  if ( axis === void 0 ) axis = this.isHorizontal() ? 'x' : 'y';

  var swiper = this;

  var params = swiper.params;
  var rtl = swiper.rtl;
  var translate = swiper.translate;
  var $wrapperEl = swiper.$wrapperEl;

  if (params.virtualTranslate) {
    return rtl ? -translate : translate;
  }

  var currentTranslate = Utils.getTranslate($wrapperEl[0], axis);
  if (rtl) { currentTranslate = -currentTranslate; }

  return currentTranslate || 0;
};

var setTranslate = function (translate, byController) {
  var swiper = this;
  var rtl = swiper.rtl;
  var params = swiper.params;
  var $wrapperEl = swiper.$wrapperEl;
  var progress = swiper.progress;
  var x = 0;
  var y = 0;
  var z = 0;

  if (swiper.isHorizontal()) {
    x = rtl ? -translate : translate;
  } else {
    y = translate;
  }

  if (params.roundLengths) {
    x = Math.floor(x);
    y = Math.floor(y);
  }

  if (!params.virtualTranslate) {
    if (Support$4.transforms3d) { $wrapperEl.transform(("translate3d(" + x + "px, " + y + "px, " + z + "px)")); }
    else { $wrapperEl.transform(("translate(" + x + "px, " + y + "px)")); }
  }

  swiper.translate = swiper.isHorizontal() ? x : y;

  // Check if we need to update progress
  var newProgress;
  var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
  if (translatesDiff === 0) {
    newProgress = 0;
  } else {
    newProgress = (translate - swiper.minTranslate()) / (translatesDiff);
  }
  if (newProgress !== progress) {
    swiper.updateProgress(translate);
  }

  swiper.emit('setTranslate', swiper.translate, byController);
};

var minTranslate = function () {
  return (-this.snapGrid[0]);
};

var maxTranslate = function () {
  return (-this.snapGrid[this.snapGrid.length - 1]);
};

var translate = {
  getTranslate: getTranslate,
  setTranslate: setTranslate,
  minTranslate: minTranslate,
  maxTranslate: maxTranslate,
};

var setTransition = function (duration, byController) {
  var swiper = this;

  swiper.$wrapperEl.transition(duration);

  swiper.emit('setTransition', duration, byController);
};

var transitionStart = function (runCallbacks) {
  if ( runCallbacks === void 0 ) runCallbacks = true;

  var swiper = this;
  var activeIndex = swiper.activeIndex;
  var params = swiper.params;
  var previousIndex = swiper.previousIndex;
  if (params.autoHeight) {
    swiper.updateAutoHeight();
  }
  swiper.emit('transitionStart');

  if (!runCallbacks) { return; }
  if (activeIndex !== previousIndex) {
    swiper.emit('slideChangeStart');
    if (activeIndex > previousIndex) {
      swiper.emit('slideNextStart');
    } else {
      swiper.emit('slidePrevStart');
    }
  }
};

var transitionEnd = function (runCallbacks) {
  if ( runCallbacks === void 0 ) runCallbacks = true;

  var swiper = this;
  var activeIndex = swiper.activeIndex;
  var previousIndex = swiper.previousIndex;
  swiper.animating = false;
  swiper.setTransition(0);

  swiper.emit('transitionEnd');
  if (runCallbacks) {
    if (activeIndex !== previousIndex) {
      swiper.emit('slideChangeEnd');
      if (activeIndex > previousIndex) {
        swiper.emit('slideNextEnd');
      } else {
        swiper.emit('slidePrevEnd');
      }
    }
  }
};

var transition$1 = {
  setTransition: setTransition,
  transitionStart: transitionStart,
  transitionEnd: transitionEnd,
};

function Browser() {
  function isIE9() {
    // create temporary DIV
    var div = document.createElement('div');
    // add content to tmp DIV which is wrapped into the IE HTML conditional statement
    div.innerHTML = '<!--[if lte IE 9]><i></i><![endif]-->';
    // return true / false value based on what will browser render
    return div.getElementsByTagName('i').length === 1;
  }
  function isSafari() {
    var ua = window.navigator.userAgent.toLowerCase();
    return (ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0);
  }
  return {
    isSafari: isSafari(),
    isUiWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent),
    ie: window.navigator.pointerEnabled || window.navigator.msPointerEnabled,
    ieTouch: (window.navigator.msPointerEnabled && window.navigator.msMaxTouchPoints > 1) ||
             (window.navigator.pointerEnabled && window.navigator.maxTouchPoints > 1),
    lteIE9: isIE9(),
  };
}

var Browser$1 = Browser();

var slideTo = function (index, speed, runCallbacks, internal) {
  if ( index === void 0 ) index = 0;
  if ( speed === void 0 ) speed = this.params.speed;
  if ( runCallbacks === void 0 ) runCallbacks = true;

  var swiper = this;
  var slideIndex = index;
  if (slideIndex < 0) { slideIndex = 0; }

  var params = swiper.params;
  var snapGrid = swiper.snapGrid;
  var slidesGrid = swiper.slidesGrid;
  var previousIndex = swiper.previousIndex;
  var activeIndex = swiper.activeIndex;
  var previousSnapIndex = swiper.snapIndex;
  var rtl = swiper.rtl;
  var $wrapperEl = swiper.$wrapperEl;

  swiper.snapIndex = Math.floor(slideIndex / params.slidesPerGroup);
  if (swiper.snapIndex >= snapGrid.length) { swiper.snapIndex = snapGrid.length - 1; }

  if ((activeIndex || params.initialSlide || 0) === (previousIndex || 0) && runCallbacks) {
    swiper.emit('beforeSlideChangeStart');
  }

  var translate = -snapGrid[swiper.snapIndex];

  // Update progress
  swiper.updateProgress(translate);

  // Normalize slideIndex
  if (params.normalizeSlideIndex) {
    for (var i = 0; i < slidesGrid.length; i += 1) {
      if (-Math.floor(translate * 100) >= Math.floor(slidesGrid[i] * 100)) {
        slideIndex = i;
      }
    }
  }

  // Directions locks
  if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {
    return false;
  }
  if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {
    if ((swiper.activeIndex || 0) !== slideIndex) { return false; }
  }

  // Update Index
  swiper.previousIndex = activeIndex || 0;
  swiper.activeIndex = slideIndex;
  if (previousIndex !== slideIndex || activeIndex !== slideIndex) {
    swiper.emit('activeIndexChange');
  }
  if (previousSnapIndex !== swiper.snapIndex) {
    swiper.emit('snapIndexChange');
  }
  swiper.updateRealIndex();
  if ((rtl && -translate === swiper.translate) || (!rtl && translate === swiper.translate)) {
    // Update Height
    if (params.autoHeight) {
      swiper.updateAutoHeight();
    }
    swiper.updateSlidesClasses();
    if (params.effect !== 'slide') {
      swiper.setTranslate(translate);
    }
    return false;
  }
  swiper.updateSlidesClasses();

  swiper.emit('beforeTransitionStart', speed, internal);
  swiper.transitionStart(runCallbacks);

  if (speed === 0 || Browser$1.lteIE9) {
    swiper.setTransition(0);
    swiper.setTranslate(translate);
    swiper.transitionEnd(runCallbacks);
  } else {
    swiper.setTransition(speed);
    swiper.setTranslate(translate);
    if (!swiper.animating) {
      swiper.animating = true;
      $wrapperEl.transitionEnd(function () {
        if (!swiper) { return; }
        swiper.transitionEnd(runCallbacks);
      });
    }
  }

  return true;
};

/* eslint no-unused-vars: "off" */
var slideNext = function (speed, runCallbacks, internal) {
  if ( speed === void 0 ) speed = this.params.speed;
  if ( runCallbacks === void 0 ) runCallbacks = true;

  var swiper = this;
  var params = swiper.params;
  var animating = swiper.animating;
  if (params.loop) {
    if (animating) { return false; }
    swiper.loopFix();
    var clientLeft = swiper.$wrapperEl[0].clientLeft;
    return swiper.slideTo(swiper.activeIndex + params.slidesPerGroup, speed, runCallbacks, internal);
  }
  return swiper.slideTo(swiper.activeIndex + params.slidesPerGroup, speed, runCallbacks, internal);
};

/* eslint no-unused-vars: "off" */
var slidePrev = function (speed, runCallbacks, internal) {
  if ( speed === void 0 ) speed = this.params.speed;
  if ( runCallbacks === void 0 ) runCallbacks = true;

  var swiper = this;
  var params = swiper.params;
  var animating = swiper.animating;

  if (params.loop) {
    if (animating) { return false; }
    swiper.loopFix();
    var clientLeft = swiper.$wrapperEl[0].clientLeft;
    return swiper.slideTo(swiper.activeIndex - 1, speed, runCallbacks, internal);
  }
  return swiper.slideTo(swiper.activeIndex - 1, speed, runCallbacks, internal);
};

/* eslint no-unused-vars: "off" */
var slideReset = function (speed, runCallbacks, internal) {
  if ( speed === void 0 ) speed = this.params.speed;
  if ( runCallbacks === void 0 ) runCallbacks = true;

  var swiper = this;
  return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);
};

var slideToClickedSlide = function () {
  var swiper = this;
  var params = swiper.params;
  var $wrapperEl = swiper.$wrapperEl;

  var slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerView() : params.slidesPerView;
  var slideToIndex = swiper.clickedIndex;
  var realIndex;
  if (params.loop) {
    if (swiper.animating) { return; }
    realIndex = parseInt($$1(swiper.clickedSlide).attr('data-swiper-slide-index'), 10);
    if (params.centeredSlides) {
      if (
        (slideToIndex < swiper.loopedSlides - (slidesPerView / 2)) ||
        (slideToIndex > (swiper.slides.length - swiper.loopedSlides) + (slidesPerView / 2))
      ) {
        swiper.loopFix();
        slideToIndex = $wrapperEl
          .children(("." + (params.slideClass) + "[data-swiper-slide-index=\"" + realIndex + "\"]:not(." + (params.slideDuplicateClass) + ")"))
          .eq(0)
          .index();

        Utils.nextTick(function () {
          swiper.slideTo(slideToIndex);
        });
      } else {
        swiper.slideTo(slideToIndex);
      }
    } else if (slideToIndex > swiper.slides.length - slidesPerView) {
      swiper.loopFix();
      slideToIndex = $wrapperEl
        .children(("." + (params.slideClass) + "[data-swiper-slide-index=\"" + realIndex + "\"]:not(." + (params.slideDuplicateClass) + ")"))
        .eq(0)
        .index();

      Utils.nextTick(function () {
        swiper.slideTo(slideToIndex);
      });
    } else {
      swiper.slideTo(slideToIndex);
    }
  } else {
    swiper.slideTo(slideToIndex);
  }
};

var slide = {
  slideTo: slideTo,
  slideNext: slideNext,
  slidePrev: slidePrev,
  slideReset: slideReset,
  slideToClickedSlide: slideToClickedSlide,
};

var loopCreate = function () {
  var swiper = this;
  var params = swiper.params;
  var $wrapperEl = swiper.$wrapperEl;
  // Remove duplicated slides
  $wrapperEl.children(("." + (params.slideClass) + "." + (params.slideDuplicateClass))).remove();

  var slides = $wrapperEl.children(("." + (params.slideClass)));

  if (params.loopFillGroupWithBlank) {
    var blankSlidesNum = params.slidesPerGroup - (slides.length % params.slidesPerGroup);
    if (blankSlidesNum !== params.slidesPerGroup) {
      for (var i = 0; i < blankSlidesNum; i += 1) {
        var blankNode = $$1(document.createElement('div')).addClass(((params.slideClass) + " " + (params.slideBlankClass)));
        $wrapperEl.append(blankNode);
      }
      slides = $wrapperEl.children(("." + (params.slideClass)));
    }
  }

  if (params.slidesPerView === 'auto' && !params.loopedSlides) { params.loopedSlides = slides.length; }

  swiper.loopedSlides = parseInt(params.loopedSlides || params.slidesPerView, 10);
  swiper.loopedSlides += params.loopAdditionalSlides;
  if (swiper.loopedSlides > slides.length) {
    swiper.loopedSlides = slides.length;
  }

  var prependSlides = [];
  var appendSlides = [];
  slides.each(function (index, el) {
    var slide = $$1(el);
    if (index < swiper.loopedSlides) { appendSlides.push(el); }
    if (index < slides.length && index >= slides.length - swiper.loopedSlides) { prependSlides.push(el); }
    slide.attr('data-swiper-slide-index', index);
  });
  for (var i$1 = 0; i$1 < appendSlides.length; i$1 += 1) {
    $wrapperEl.append($$1(appendSlides[i$1].cloneNode(true)).addClass(params.slideDuplicateClass));
  }
  for (var i$2 = prependSlides.length - 1; i$2 >= 0; i$2 -= 1) {
    $wrapperEl.prepend($$1(prependSlides[i$2].cloneNode(true)).addClass(params.slideDuplicateClass));
  }
};

var loopFix = function () {
  var swiper = this;
  var params = swiper.params;
  var activeIndex = swiper.activeIndex;
  var slides = swiper.slides;
  var loopedSlides = swiper.loopedSlides;

  var newIndex;
  // Fix For Negative Oversliding
  if (activeIndex < loopedSlides) {
    newIndex = (slides.length - (loopedSlides * 3)) + activeIndex;
    newIndex += loopedSlides;
    swiper.slideTo(newIndex, 0, false, true);
  } else if ((params.slidesPerView === 'auto' && activeIndex >= loopedSlides * 2) || (activeIndex > slides.length - (params.slidesPerView * 2))) {
    // Fix For Positive Oversliding
    newIndex = -slides.length + activeIndex + loopedSlides;
    newIndex += loopedSlides;
    swiper.slideTo(newIndex, 0, false, true);
  }
};

var loopDestroy = function () {
  var swiper = this;
  var $wrapperEl = swiper.$wrapperEl;
  var params = swiper.params;
  var slides = swiper.slides;
  $wrapperEl.children(("." + (params.slideClass) + "." + (params.slideDuplicateClass))).remove();
  slides.removeAttr('data-swiper-slide-index');
};

var loop = {
  loopCreate: loopCreate,
  loopFix: loopFix,
  loopDestroy: loopDestroy,
};

var setGrabCursor = function (moving) {
  var swiper = this;
  if (Support$4.touch || !swiper.params.simulateTouch) { return; }
  var el = swiper.el;
  el.style.cursor = 'move';
  el.style.cursor = moving ? '-webkit-grabbing' : '-webkit-grab';
  el.style.cursor = moving ? '-moz-grabbin' : '-moz-grab';
  el.style.cursor = moving ? 'grabbing' : 'grab';
};

var unsetGrabCursor = function () {
  var swiper = this;
  if (Support$4.touch) { return; }
  swiper.el.style.cursor = '';
};

var grabCursor = {
  setGrabCursor: setGrabCursor,
  unsetGrabCursor: unsetGrabCursor,
};

var appendSlide = function (slides) {
  var swiper = this;
  var $wrapperEl = swiper.$wrapperEl;
  var params = swiper.params;
  if (params.loop) {
    swiper.loopDestroy();
  }
  if (typeof slides === 'object' && slides.length) {
    for (var i = 0; i < slides.length; i += 1) {
      if (slides[i]) { $wrapperEl.append(slides[i]); }
    }
  } else {
    $wrapperEl.append(slides);
  }
  if (params.loop) {
    swiper.loopCreate();
  }
  if (!(params.observer && Support$4.observer)) {
    swiper.update();
  }
};

var prependSlide = function (slides) {
  var swiper = this;
  var params = swiper.params;
  var $wrapperEl = swiper.$wrapperEl;
  var activeIndex = swiper.activeIndex;

  if (params.loop) {
    swiper.loopDestroy();
  }
  var newActiveIndex = activeIndex + 1;
  if (typeof slides === 'object' && slides.length) {
    for (var i = 0; i < slides.length; i += 1) {
      if (slides[i]) { $wrapperEl.prepend(slides[i]); }
    }
    newActiveIndex = activeIndex + slides.length;
  } else {
    $wrapperEl.prepend(slides);
  }
  if (params.loop) {
    swiper.loopCreate();
  }
  if (!(params.observer && Support$4.observer)) {
    swiper.update();
  }
  swiper.slideTo(newActiveIndex, 0, false);
};

var removeSlide = function (slidesIndexes) {
  var swiper = this;
  var params = swiper.params;
  var $wrapperEl = swiper.$wrapperEl;
  var activeIndex = swiper.activeIndex;

  if (params.loop) {
    swiper.loopDestroy();
    swiper.slides = $wrapperEl.children(("." + (params.slideClass)));
  }
  var newActiveIndex = activeIndex;
  var indexToRemove;

  if (typeof slidesIndexes === 'object' && slidesIndexes.length) {
    for (var i = 0; i < slidesIndexes.length; i += 1) {
      indexToRemove = slidesIndexes[i];
      if (swiper.slides[indexToRemove]) { swiper.slides.eq(indexToRemove).remove(); }
      if (indexToRemove < newActiveIndex) { newActiveIndex -= 1; }
    }
    newActiveIndex = Math.max(newActiveIndex, 0);
  } else {
    indexToRemove = slidesIndexes;
    if (swiper.slides[indexToRemove]) { swiper.slides.eq(indexToRemove).remove(); }
    if (indexToRemove < newActiveIndex) { newActiveIndex -= 1; }
    newActiveIndex = Math.max(newActiveIndex, 0);
  }

  if (params.loop) {
    swiper.loopCreate();
  }

  if (!(params.observer && Support$4.observer)) {
    swiper.update();
  }
  if (params.loop) {
    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
  } else {
    swiper.slideTo(newActiveIndex, 0, false);
  }
};

var removeAllSlides = function () {
  var swiper = this;

  var slidesIndexes = [];
  for (var i = 0; i < swiper.slides.length; i += 1) {
    slidesIndexes.push(i);
  }
  swiper.removeSlide(slidesIndexes);
};

var manipulation = {
  appendSlide: appendSlide,
  prependSlide: prependSlide,
  removeSlide: removeSlide,
  removeAllSlides: removeAllSlides,
};

var onTouchStart = function (event) {
  var swiper = this;
  var data = swiper.touchEventsData;
  var params = swiper.params;
  var touches = swiper.touches;
  var e = event;
  if (e.originalEvent) { e = e.originalEvent; }
  data.isTouchEvent = e.type === 'touchstart';
  if (!data.isTouchEvent && 'which' in e && e.which === 3) { return; }
  if (params.noSwiping && $$1(e).closest(("." + (params.noSwipingClass)))[0]) {
    swiper.allowClick = true;
    return;
  }
  if (params.swipeHandler) {
    if (!$$1(e).closest(params.swipeHandler)[0]) { return; }
  }

  touches.currentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
  touches.currentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
  var startX = touches.currentX;
  var startY = touches.currentY;

  // Do NOT start if iOS edge swipe is detected. Otherwise iOS app (UIWebView) cannot swipe-to-go-back anymore
  if (Device$1.ios && params.iOSEdgeSwipeDetection && startX <= params.iOSEdgeSwipeThreshold) {
    return;
  }
  Utils.extend(data, {
    isTouched: true,
    isMoved: false,
    allowTouchCallbacks: true,
    isScrolling: undefined,
    startMoving: undefined,
  });

  touches.startX = startX;
  touches.startY = startY;
  data.touchStartTime = Utils.now();
  swiper.allowClick = true;
  swiper.updateSize();
  swiper.swipeDirection = undefined;
  if (params.threshold > 0) { data.allowThresholdMove = false; }
  if (e.type !== 'touchstart') {
    var preventDefault = true;
    if ($$1(e.target).is(data.formElements)) { preventDefault = false; }
    if (document.activeElement && $$1(document.activeElement).is(data.formElements)) {
      document.activeElement.blur();
    }
    if (preventDefault) {
      e.preventDefault();
    }
  }
  swiper.emit('touchStart', e);
};

var onTouchMove = function (event) {
  var swiper = this;
  var data = swiper.touchEventsData;
  var params = swiper.params;
  var touches = swiper.touches;
  var rtl = swiper.rtl;
  var e = event;
  if (e.originalEvent) { e = e.originalEvent; }
  if (data.isTouchEvent && e.type === 'mousemove') { return; }
  var pageX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
  var pageY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;
  if (e.preventedByNestedSwiper) {
    touches.startX = pageX;
    touches.startY = pageY;
    return;
  }
  if (!swiper.allowTouchMove) {
    // isMoved = true;
    swiper.allowClick = false;
    if (data.isTouched) {
      Utils.extend(touches, {
        startX: pageX,
        startY: pageY,
        currentX: pageX,
        currentY: pageY,
      });
      data.touchStartTime = Utils.now();
    }
    return;
  }
  if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) {
    if (swiper.isVertical()) {
      // Vertical
      if (
        (touches.currentY < touches.startY && swiper.translate <= swiper.maxTranslate()) ||
        (touches.currentY > touches.startY && swiper.translate >= swiper.minTranslate())
      ) {
        return;
      }
    } else if (
      (touches.currentX < touches.startX && swiper.translate <= swiper.maxTranslate()) ||
      (touches.currentX > touches.startX && swiper.translate >= swiper.minTranslate())
    ) {
      return;
    }
  }
  if (data.isTouchEvent && document.activeElement) {
    if (e.target === document.activeElement && $$1(e.target).is(data.formElements)) {
      data.isMoved = true;
      swiper.allowClick = false;
      return;
    }
  }
  if (data.allowTouchCallbacks) {
    swiper.emit('touchMove', e);
  }
  if (e.targetTouches && e.targetTouches.length > 1) { return; }

  touches.currentX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
  touches.currentY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;

  if (typeof data.isScrolling === 'undefined') {
    var touchAngle;
    if ((swiper.isHorizontal() && touches.currentY === touches.startY) || (swiper.isVertical() && touches.currentX === touches.startX)) {
      data.isScrolling = false;
    } else {
      touchAngle = (Math.atan2(Math.abs(touches.currentY - touches.startY), Math.abs(touches.currentX - touches.startX)) * 180) / Math.PI;
      data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : (90 - touchAngle > params.touchAngle);
    }
  }
  if (data.isScrolling) {
    swiper.emit('touchMoveOpposite', e);
  }
  if (typeof startMoving === 'undefined') {
    if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {
      data.startMoving = true;
    }
  }
  if (!data.isTouched) { return; }
  if (data.isScrolling) {
    data.isTouched = false;
    return;
  }
  if (!data.startMoving) {
    return;
  }
  swiper.allowClick = false;
  e.preventDefault();
  if (params.touchMoveStopPropagation && !params.nested) {
    e.stopPropagation();
  }

  if (!data.isMoved) {
    if (params.loop) {
      swiper.loopFix();
    }
    data.startTranslate = swiper.getTranslate();
    swiper.setTransition(0);
    if (swiper.animating) {
      swiper.$wrapperEl.trigger('webkitTransitionEnd transitionend oTransitionEnd MSTransitionEnd msTransitionEnd');
    }
    data.allowMomentumBounce = false;
    // Grab Cursor
    if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
      swiper.setGrabCursor(true);
    }
    swiper.emit('sliderFirstMove', e);
  }
  swiper.emit('sliderMove', e);
  data.isMoved = true;

  var diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;
  touches.diff = diff;

  diff *= params.touchRatio;
  if (rtl) { diff = -diff; }

  swiper.swipeDirection = diff > 0 ? 'prev' : 'next';
  data.currentTranslate = diff + data.startTranslate;

  var disableParentSwiper = true;
  var resistanceRatio = params.resistanceRatio;
  if (params.touchReleaseOnEdges) {
    resistanceRatio = 0;
  }
  if ((diff > 0 && data.currentTranslate > swiper.minTranslate())) {
    disableParentSwiper = false;
    if (params.resistance) { data.currentTranslate = (swiper.minTranslate() - 1) + (Math.pow( (-swiper.minTranslate() + data.startTranslate + diff), resistanceRatio )); }
  } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {
    disableParentSwiper = false;
    if (params.resistance) { data.currentTranslate = (swiper.maxTranslate() + 1) - (Math.pow( (swiper.maxTranslate() - data.startTranslate - diff), resistanceRatio )); }
  }

  if (disableParentSwiper) {
    e.preventedByNestedSwiper = true;
  }

  // Directions locks
  if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {
    data.currentTranslate = data.startTranslate;
  }
  if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {
    data.currentTranslate = data.startTranslate;
  }


  // Threshold
  if (params.threshold > 0) {
    if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {
      if (!data.allowThresholdMove) {
        data.allowThresholdMove = true;
        touches.startX = touches.currentX;
        touches.startY = touches.currentY;
        data.currentTranslate = data.startTranslate;
        touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;
        return;
      }
    } else {
      data.currentTranslate = data.startTranslate;
      return;
    }
  }

  if (!params.followFinger) { return; }

  // Update active index in free mode
  if (params.freeMode || params.watchSlidesProgress || params.watchSlidesVisibility) {
    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();
    swiper.updateRealIndex();
  }
  if (params.freeMode) {
    // Velocity
    if (data.velocities.length === 0) {
      data.velocities.push({
        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],
        time: data.touchStartTime,
      });
    }
    data.velocities.push({
      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],
      time: Utils.now(),
    });
  }
  // Update progress
  swiper.updateProgress(data.currentTranslate);
  // Update translate
  swiper.setTranslate(data.currentTranslate);
};

var onTouchEnd = function (event) {
  var swiper = this;
  var data = swiper.touchEventsData;

  var params = swiper.params;
  var touches = swiper.touches;
  var rtl = swiper.rtl;
  var $wrapperEl = swiper.$wrapperEl;
  var slidesGrid = swiper.slidesGrid;
  var snapGrid = swiper.snapGrid;
  var e = event;
  if (e.originalEvent) { e = e.originalEvent; }
  if (data.allowTouchCallbacks) {
    swiper.emit('touchEnd', e);
  }
  data.allowTouchCallbacks = false;
  if (!data.isTouched) { return; }
  // Return Grab Cursor
  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
    swiper.setGrabCursor(false);
  }

  // Time diff
  var touchEndTime = Utils.now();
  var timeDiff = touchEndTime - data.touchStartTime;

  // Tap, doubleTap, Click
  if (swiper.allowClick) {
    swiper.updateClickedSlide(e);
    swiper.emit('tap', e);
    if (timeDiff < 300 && (touchEndTime - data.lastClickTime) > 300) {
      if (data.clickTimeout) { clearTimeout(data.clickTimeout); }
      data.clickTimeout = Utils.nextTick(function () {
        if (!swiper) { return; }
        swiper.emit('click', e);
      }, 300);
    }
    if (timeDiff < 300 && (touchEndTime - data.lastClickTime) < 300) {
      if (data.clickTimeout) { clearTimeout(data.clickTimeout); }
      swiper.emit('doubleTap', e);
    }
  }

  data.lastClickTime = Utils.now();
  Utils.nextTick(function () {
    if (swiper) { swiper.allowClick = true; }
  });

  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {
    data.isTouched = false;
    data.isMoved = false;
    return;
  }
  data.isTouched = false;
  data.isMoved = false;

  var currentPos;
  if (params.followFinger) {
    currentPos = rtl ? swiper.translate : -swiper.translate;
  } else {
    currentPos = -data.currentTranslate;
  }
  if (params.freeMode) {
    if (currentPos < -swiper.minTranslate()) {
      swiper.slideTo(swiper.activeIndex);
      return;
    } else if (currentPos > -swiper.maxTranslate()) {
      if (swiper.slides.length < snapGrid.length) {
        swiper.slideTo(snapGrid.length - 1);
      } else {
        swiper.slideTo(swiper.slides.length - 1);
      }
      return;
    }

    if (params.freeModeMomentum) {
      if (data.velocities.length > 1) {
        var lastMoveEvent = data.velocities.pop();
        var velocityEvent = data.velocities.pop();

        var distance = lastMoveEvent.position - velocityEvent.position;
        var time = lastMoveEvent.time - velocityEvent.time;
        swiper.velocity = distance / time;
        swiper.velocity /= 2;
        if (Math.abs(swiper.velocity) < params.freeModeMinimumVelocity) {
          swiper.velocity = 0;
        }
        // this implies that the user stopped moving a finger then released.
        // There would be no events with distance zero, so the last event is stale.
        if (time > 150 || (Utils.now() - lastMoveEvent.time) > 300) {
          swiper.velocity = 0;
        }
      } else {
        swiper.velocity = 0;
      }
      swiper.velocity *= params.freeModeMomentumVelocityRatio;

      data.velocities.length = 0;
      var momentumDuration = 1000 * params.freeModeMomentumRatio;
      var momentumDistance = swiper.velocity * momentumDuration;

      var newPosition = swiper.translate + momentumDistance;
      if (rtl) { newPosition = -newPosition; }
      var doBounce = false;
      var afterBouncePosition;
      var bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeModeMomentumBounceRatio;
      if (newPosition < swiper.maxTranslate()) {
        if (params.freeModeMomentumBounce) {
          if (newPosition + swiper.maxTranslate() < -bounceAmount) {
            newPosition = swiper.maxTranslate() - bounceAmount;
          }
          afterBouncePosition = swiper.maxTranslate();
          doBounce = true;
          data.allowMomentumBounce = true;
        } else {
          newPosition = swiper.maxTranslate();
        }
      } else if (newPosition > swiper.minTranslate()) {
        if (params.freeModeMomentumBounce) {
          if (newPosition - swiper.minTranslate() > bounceAmount) {
            newPosition = swiper.minTranslate() + bounceAmount;
          }
          afterBouncePosition = swiper.minTranslate();
          doBounce = true;
          data.allowMomentumBounce = true;
        } else {
          newPosition = swiper.minTranslate();
        }
      } else if (params.freeModeSticky) {
        var nextSlide;
        for (var j = 0; j < snapGrid.length; j += 1) {
          if (snapGrid[j] > -newPosition) {
            nextSlide = j;
            break;
          }
        }
        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {
          newPosition = snapGrid[nextSlide];
        } else {
          newPosition = snapGrid[nextSlide - 1];
        }
        if (!rtl) { newPosition = -newPosition; }
      }
      // Fix duration
      if (swiper.velocity !== 0) {
        if (rtl) {
          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);
        } else {
          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);
        }
      } else if (params.freeModeSticky) {
        swiper.slideReset();
        return;
      }

      if (params.freeModeMomentumBounce && doBounce) {
        swiper.updateProgress(afterBouncePosition);
        swiper.setTransition(momentumDuration);
        swiper.setTranslate(newPosition);
        swiper.transitionStart();
        swiper.animating = true;
        $wrapperEl.transitionEnd(function () {
          if (!swiper || !data.allowMomentumBounce) { return; }
          swiper.emit('momentumBounce');

          swiper.setTransition(params.speed);
          swiper.setTranslate(afterBouncePosition);
          $wrapperEl.transitionEnd(function () {
            if (!swiper) { return; }
            swiper.transitionEnd();
          });
        });
      } else if (swiper.velocity) {
        swiper.updateProgress(newPosition);
        swiper.setTransition(momentumDuration);
        swiper.setTranslate(newPosition);
        swiper.transitionStart();
        if (!swiper.animating) {
          swiper.animating = true;
          $wrapperEl.transitionEnd(function () {
            if (!swiper) { return; }
            swiper.transitionEnd();
          });
        }
      } else {
        swiper.updateProgress(newPosition);
      }

      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
      swiper.updateRealIndex();
    }
    if (!params.freeModeMomentum || timeDiff >= params.longSwipesMs) {
      swiper.updateProgress();
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
      swiper.updateRealIndex();
    }
    return;
  }

  // Find current slide
  var stopIndex = 0;
  var groupSize = swiper.slidesSizesGrid[0];
  for (var i = 0; i < slidesGrid.length; i += params.slidesPerGroup) {
    if (typeof slidesGrid[i + params.slidesPerGroup] !== 'undefined') {
      if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + params.slidesPerGroup]) {
        stopIndex = i;
        groupSize = slidesGrid[i + params.slidesPerGroup] - slidesGrid[i];
      }
    } else if (currentPos >= slidesGrid[i]) {
      stopIndex = i;
      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];
    }
  }

  // Find current slide size
  var ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;

  if (timeDiff > params.longSwipesMs) {
    // Long touches
    if (!params.longSwipes) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }
    if (swiper.swipeDirection === 'next') {
      if (ratio >= params.longSwipesRatio) { swiper.slideTo(stopIndex + params.slidesPerGroup); }
      else { swiper.slideTo(stopIndex); }
    }
    if (swiper.swipeDirection === 'prev') {
      if (ratio > (1 - params.longSwipesRatio)) { swiper.slideTo(stopIndex + params.slidesPerGroup); }
      else { swiper.slideTo(stopIndex); }
    }
  } else {
    // Short swipes
    if (!params.shortSwipes) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }
    if (swiper.swipeDirection === 'next') {
      swiper.slideTo(stopIndex + params.slidesPerGroup);
    }
    if (swiper.swipeDirection === 'prev') {
      swiper.slideTo(stopIndex);
    }
  }
};

var onResize = function () {
  var swiper = this;

  var params = swiper.params;
  var el = swiper.el;
  var allowSlideNext = swiper.allowSlideNext;
  var allowSlidePrev = swiper.allowSlidePrev;

  if (el && el.offsetWidth === 0) { return; }

  // Breakpoints
  if (params.breakpoints) {
    swiper.setBreakpoint();
  }

  // Disable locks on resize
  swiper.allowSlideNext = true;
  swiper.allowSlidePrev = true;

  swiper.updateSize();
  swiper.updateSlides();

  if (params.freeMode) {
    var newTranslate = Math.min(Math.max(swiper.translate, swiper.maxTranslate()), swiper.minTranslate());
    swiper.setTranslate(newTranslate);
    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();
    swiper.updateRealIndex();

    if (params.autoHeight) {
      swiper.updateAutoHeight();
    }
  } else {
    swiper.updateSlidesClasses();
    if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {
      swiper.slideTo(swiper.slides.length - 1, 0, false, true);
    } else {
      swiper.slideTo(swiper.activeIndex, 0, false, true);
    }
  }
  // Return locks after resize
  swiper.allowSlidePrev = allowSlidePrev;
  swiper.allowSlideNext = allowSlideNext;
};

var onClick = function (e) {
  var swiper = this;
  if (!swiper.allowClick) {
    if (swiper.params.preventClicks) { e.preventDefault(); }
    if (swiper.params.preventClicksPropagation && swiper.animating) {
      e.stopPropagation();
      e.stopImmediatePropagation();
    }
  }
};

function attachEvents() {
  var swiper = this;

  var params = swiper.params;
  var touchEvents = swiper.touchEvents;
  var el = swiper.el;
  var wrapperEl = swiper.wrapperEl;

  {
    swiper.onTouchStart = onTouchStart.bind(swiper);
    swiper.onTouchMove = onTouchMove.bind(swiper);
    swiper.onTouchEnd = onTouchEnd.bind(swiper);
  }

  swiper.onClick = onClick.bind(swiper);

  var target = params.touchEventsTarget === 'container' ? el : wrapperEl;
  var capture = !!params.nested;

  // Touch Events
  {
    if (Browser$1.ie) {
      target.addEventListener(touchEvents.start, swiper.onTouchStart, false);
      (Support$4.touch ? target : document).addEventListener(touchEvents.move, swiper.onTouchMove, capture);
      (Support$4.touch ? target : document).addEventListener(touchEvents.end, swiper.onTouchEnd, false);
    } else {
      if (Support$4.touch) {
        var passiveListener = touchEvents.start === 'onTouchStart' && Support$4.passiveListener && params.passiveListeners ? { passive: true, capture: false } : false;
        target.addEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
        target.addEventListener(touchEvents.move, swiper.onTouchMove, capture);
        target.addEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);
      }
      if ((params.simulateTouch && !Device$1.ios && !Device$1.android) || (params.simulateTouch && !Support$4.touch && Device$1.ios)) {
        target.addEventListener('mousedown', swiper.onTouchStart, false);
        document.addEventListener('mousemove', swiper.onTouchMove, capture);
        document.addEventListener('mouseup', swiper.onTouchEnd, false);
      }
    }
    // Prevent Links Clicks
    if (params.preventClicks || params.preventClicksPropagation) {
      target.addEventListener('click', swiper.onClick, true);
    }
  }

  // Resize handler
  swiper.on('resize observerUpdate', onResize);
}

function detachEvents() {
  var swiper = this;

  var params = swiper.params;
  var touchEvents = swiper.touchEvents;
  var el = swiper.el;
  var wrapperEl = swiper.wrapperEl;

  var target = params.touchEventsTarget === 'container' ? el : wrapperEl;
  var capture = !!params.nested;

  // Touch Events
  {
    if (Browser$1.ie) {
      target.removeEventListener(touchEvents.start, swiper.onTouchStart, false);
      (Support$4.touch ? target : document).removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
      (Support$4.touch ? target : document).removeEventListener(touchEvents.end, swiper.onTouchEnd, false);
    } else {
      if (Support$4.touch) {
        var passiveListener = touchEvents.start === 'onTouchStart' && Support$4.passiveListener && params.passiveListeners ? { passive: true, capture: false } : false;
        target.removeEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
        target.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
        target.removeEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);
      }
      if ((params.simulateTouch && !Device$1.ios && !Device$1.android) || (params.simulateTouch && !Support$4.touch && Device$1.ios)) {
        target.removeEventListener('mousedown', swiper.onTouchStart, false);
        document.removeEventListener('mousemove', swiper.onTouchMove, capture);
        document.removeEventListener('mouseup', swiper.onTouchEnd, false);
      }
    }
    // Prevent Links Clicks
    if (params.preventClicks || params.preventClicksPropagation) {
      target.removeEventListener('click', swiper.onClick, true);
    }
  }

  // Resize handler
  swiper.off('resize observerUpdate', onResize);
}

var events$1 = {
  attachEvents: attachEvents,
  detachEvents: detachEvents,
};

function getBreakpoint(breakpoints) {
  // Get breakpoint for window width
  if (!breakpoints) { return undefined; }
  var breakpoint = false;
  var points = [];
  Object.keys(breakpoints).forEach(function (point) {
    points.push(point);
  });
  points.sort(function (a, b) { return parseInt(a, 10) > parseInt(b, 10); });
  for (var i = 0; i < points.length; i += 1) {
    var point = points[i];
    if (point >= window.innerWidth && !breakpoint) {
      breakpoint = point;
    }
  }
  return breakpoint || 'max';
}

var setBreakpoint = function () {
  var swiper = this;
  var activeIndex = swiper.activeIndex;
  var loopedSlides = swiper.loopedSlides;
  var params = swiper.params;
  var breakpoints = params.breakpoints;
  if (!breakpoints || (breakpoints && Object.keys(breakpoints).length === 0)) { return; }
  // Set breakpoint for window width and update parameters
  var breakpoint = getBreakpoint(breakpoints);
  if (breakpoint && swiper.currentBreakpoint !== breakpoint) {
    var breakPointsParams = breakpoint in breakpoints ? breakpoints[breakpoint] : swiper.originalParams;
    var needsReLoop = params.loop && (breakPointsParams.slidesPerView !== params.slidesPerView);

    Utils.extend(swiper.params, breakPointsParams);

    Utils.extend(swiper, {
      allowTouchMove: swiper.params.allowTouchMove,
      allowSlideNext: swiper.params.allowSlideNext,
      allowSlidePrev: swiper.params.allowSlidePrev,
    });

    swiper.currentBreakpoint = breakpoint;

    if (needsReLoop) {
      var oldIndex = activeIndex - loopedSlides;
      swiper.loopDestroy();
      swiper.loopCreate();
      swiper.updateSlides();
      swiper.slideTo(oldIndex + loopedSlides, 0, false);
    }
  }
};

var breakpoints = { setBreakpoint: setBreakpoint };

var addClasses = function () {
  var swiper = this;
  var classNames = swiper.classNames;
  var params = swiper.params;
  var rtl = swiper.rtl;
  var $el = swiper.$el;
  var suffixes = [];

  suffixes.push(params.direction);

  if (params.freeMode) {
    suffixes.push('free-mode');
  }
  if (!Support$4.flexbox) {
    suffixes.push('no-flexbox');
  }
  if (params.autoHeight) {
    suffixes.push('autoheight');
  }
  if (rtl) {
    suffixes.push('rtl');
  }
  if (params.slidesPerColumn > 1) {
    suffixes.push('multirow');
  }
  if (Device$1.android) {
    suffixes.push('android');
  }
  if (Device$1.ios) {
    suffixes.push('ios');
  }
  // WP8 Touch Events Fix
  if (window.navigator.pointerEnabled || window.navigator.msPointerEnabled) {
    suffixes.push(("wp8-" + (params.direction)));
  }

  suffixes.forEach(function (suffix) {
    classNames.push(params.containerModifierClass + suffix);
  });

  $el.addClass(classNames.join(' '));
};

var removeClasses = function () {
  var swiper = this;
  var $el = swiper.$el;
  var classNames = swiper.classNames;

  $el.removeClass(classNames.join(' '));
};

var classes = { addClasses: addClasses, removeClasses: removeClasses };

var loadImage = function (imageEl, src, srcset, sizes, checkForComplete, callback) {
  var image;
  function onReady() {
    if (callback) { callback(); }
  }
  if (!imageEl.complete || !checkForComplete) {
    if (src) {
      image = new window.Image();
      image.onload = onReady;
      image.onerror = onReady;
      if (sizes) {
        image.sizes = sizes;
      }
      if (srcset) {
        image.srcset = srcset;
      }
      if (src) {
        image.src = src;
      }
    } else {
      onReady();
    }
  } else {
    // image already loaded...
    onReady();
  }
};

var preloadImages = function () {
  var swiper = this;
  swiper.imagesToLoad = swiper.$el.find('img');
  function onReady() {
    if (typeof swiper === 'undefined' || swiper === null || !swiper) { return; }
    if (swiper.imagesLoaded !== undefined) { swiper.imagesLoaded += 1; }
    if (swiper.imagesLoaded === swiper.imagesToLoad.length) {
      if (swiper.params.updateOnImagesReady) { swiper.update(); }
      swiper.emit('imagesReady');
    }
  }
  for (var i = 0; i < swiper.imagesToLoad.length; i += 1) {
    var imageEl = swiper.imagesToLoad[i];
    swiper.loadImage(
      imageEl,
      imageEl.currentSrc || imageEl.getAttribute('src'),
      imageEl.srcset || imageEl.getAttribute('srcset'),
      imageEl.sizes || imageEl.getAttribute('sizes'),
      true,
      onReady
    );
  }
};

var images = {
  loadImage: loadImage,
  preloadImages: preloadImages,
};

var defaults = {
  init: true,
  direction: 'horizontal',
  touchEventsTarget: 'container',
  initialSlide: 0,
  speed: 300,

  // To support iOS's swipe-to-go-back gesture (when being used in-app, with UIWebView).
  iOSEdgeSwipeDetection: false,
  iOSEdgeSwipeThreshold: 20,

  // Free mode
  freeMode: false,
  freeModeMomentum: true,
  freeModeMomentumRatio: 1,
  freeModeMomentumBounce: true,
  freeModeMomentumBounceRatio: 1,
  freeModeMomentumVelocityRatio: 1,
  freeModeSticky: false,
  freeModeMinimumVelocity: 0.02,

  // Autoheight
  autoHeight: false,

  // Set wrapper width
  setWrapperSize: false,

  // Virtual Translate
  virtualTranslate: false,

  // Effects
  effect: 'slide', // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'

  // Breakpoints
  breakpoints: undefined,

  // Slides grid
  spaceBetween: 0,
  slidesPerView: 1,
  slidesPerColumn: 1,
  slidesPerColumnFill: 'column',
  slidesPerGroup: 1,
  centeredSlides: false,
  slidesOffsetBefore: 0, // in px
  slidesOffsetAfter: 0, // in px
  normalizeSlideIndex: true,

  // Round length
  roundLengths: false,

  // Touches
  touchRatio: 1,
  touchAngle: 45,
  simulateTouch: true,
  shortSwipes: true,
  longSwipes: true,
  longSwipesRatio: 0.5,
  longSwipesMs: 300,
  followFinger: true,
  allowTouchMove: true,
  threshold: 0,
  touchMoveStopPropagation: true,
  touchReleaseOnEdges: false,

  // Unique Navigation Elements
  uniqueNavElements: true,

  // Resistance
  resistance: true,
  resistanceRatio: 0.85,

  // Progress
  watchSlidesProgress: false,
  watchSlidesVisibility: false,

  // Cursor
  grabCursor: false,

  // Clicks
  preventClicks: true,
  preventClicksPropagation: true,
  slideToClickedSlide: false,

  // Images
  preloadImages: true,
  updateOnImagesReady: true,

  // loop
  loop: false,
  loopAdditionalSlides: 0,
  loopedSlides: null,
  loopFillGroupWithBlank: false,

  // Swiping/no swiping
  allowSlidePrev: true,
  allowSlideNext: true,
  swipeHandler: null, // '.swipe-handler',
  noSwiping: true,
  noSwipingClass: 'swiper-no-swiping',

  // Passive Listeners
  passiveListeners: true,

  // NS
  containerModifierClass: 'swiper-container-', // NEW
  slideClass: 'swiper-slide',
  slideBlankClass: 'swiper-slide-invisible-blank',
  slideActiveClass: 'swiper-slide-active',
  slideDuplicateActiveClass: 'swiper-slide-duplicate-active',
  slideVisibleClass: 'swiper-slide-visible',
  slideDuplicateClass: 'swiper-slide-duplicate',
  slideNextClass: 'swiper-slide-next',
  slideDuplicateNextClass: 'swiper-slide-duplicate-next',
  slidePrevClass: 'swiper-slide-prev',
  slideDuplicatePrevClass: 'swiper-slide-duplicate-prev',
  wrapperClass: 'swiper-wrapper',

  // Callbacks
  runCallbacksOnInit: true,
};

var Swiper$1 = (function (SwiperClass) {
  function Swiper$1() {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var el;
    var params;
    if (args.length === 1 && args[0].constructor && args[0].constructor === Object) {
      params = args[0];
    } else {
      var assign;
      (assign = args, el = assign[0], params = assign[1]);
    }
    if (!params) { params = {}; }

    params = Utils.extend({}, params);
    if (el && !params.el) { params.el = el; }

    SwiperClass.call(this, params);

    // Swiper Instance
    var swiper = this;

    // Extend defaults with modules params
    var swiperParams = Utils.extend({}, defaults);
    swiper.useModulesParams(swiperParams);

    // Extend defaults with passed params
    swiper.params = Utils.extend({}, swiperParams, params);
    swiper.originalParams = Utils.extend({}, swiper.params);
    swiper.passedParams = Utils.extend({}, params);

    // Find el
    var $el = $$1(swiper.params.el);
    el = $el[0];

    if (!el) {
      return undefined;
    }

    if ($el.length > 1) {
      var swipers = [];
      $el.each(function (index, containerEl) {
        var newParams = Utils.extend({}, params, { el: containerEl });
        swipers.push(new Swiper$1(newParams));
      });
      return swipers;
    }

    el.swiper = swiper;
    $el.data('swiper', swiper);

    // Find Wrapper
    var $wrapperEl = $el.children(("." + (swiper.params.wrapperClass)));

    // Extend Swiper
    Utils.extend(swiper, {
      $el: $el,
      el: el,
      $wrapperEl: $wrapperEl,
      wrapperEl: $wrapperEl[0],

      // Classes
      classNames: [],

      // Slides
      slides: $$1(),
      slidesGrid: [],
      snapGrid: [],
      slidesSizesGrid: [],

      // isDirection
      isHorizontal: function isHorizontal() {
        return swiper.params.direction === 'horizontal';
      },
      isVertical: function isVertical() {
        return swiper.params.direction === 'vertical';
      },
      // RTL
      rtl: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),
      wrongRTL: $wrapperEl.css('display') === '-webkit-box',

      // Indexes
      activeIndex: 0,
      realIndex: 0,

      //
      isBeginning: true,
      isEnd: false,

      // Props
      translate: 0,
      progress: 0,
      velocity: 0,
      animating: false,

      // Locks
      allowSlideNext: swiper.params.allowSlideNext,
      allowSlidePrev: swiper.params.allowSlidePrev,

      // Touch Events
      touchEvents: (function touchEvents() {
        var touch = ['touchstart', 'touchmove', 'touchend'];
        var desktop = ['mousedown', 'mousemove', 'mouseup'];
        if (window.navigator.pointerEnabled) {
          desktop = ['pointerdown', 'pointermove', 'pointerup'];
        } else if (window.navigator.msPointerEnabled) {
          desktop = ['MSPointerDown', 'MsPointerMove', 'MsPointerUp'];
        }

        return {
          start: Support$4.touch || !swiper.params.simulateTouch ? touch[0] : desktop[0],
          move: Support$4.touch || !swiper.params.simulateTouch ? touch[1] : desktop[1],
          end: Support$4.touch || !swiper.params.simulateTouch ? touch[2] : desktop[2],
        };
      }()),
      touchEventsData: Utils.extend({}, touchEventsData),

      // Clicks
      allowClick: true,

      // Touches
      allowTouchMove: swiper.params.allowTouchMove,

      touches: {
        startX: 0,
        startY: 0,
        currentX: 0,
        currentY: 0,
        diff: 0,
      },

      // Images
      imagesToLoad: [],
      imagesLoaded: 0,

    });

    // Install Modules
    swiper.useModules();

    // Init
    if (swiper.params.init) {
      swiper.init();
    }

    // Return app instance
    return swiper;
  }

  if ( SwiperClass ) Swiper$1.__proto__ = SwiperClass;
  Swiper$1.prototype = Object.create( SwiperClass && SwiperClass.prototype );
  Swiper$1.prototype.constructor = Swiper$1;
  Swiper$1.prototype.slidesPerView = function slidesPerView () {
    var swiper = this;
    var params = swiper.params;
    var slides = swiper.slides;
    var slidesGrid = swiper.slidesGrid;
    var swiperSize = swiper.size;
    var activeIndex = swiper.activeIndex;
    var spv = 1;
    if (params.centeredSlides) {
      var slideSize = slides[activeIndex].swiperSlideSize;
      var breakLoop;
      for (var i = activeIndex + 1; i < slides.length; i += 1) {
        if (slides[i] && !breakLoop) {
          slideSize += slides[i].swiperSlideSize;
          spv += 1;
          if (slideSize > swiperSize) { breakLoop = true; }
        }
      }
      for (var i$1 = activeIndex - 1; i$1 >= 0; i$1 -= 1) {
        if (slides[i$1] && !breakLoop) {
          slideSize += slides[i$1].swiperSlideSize;
          spv += 1;
          if (slideSize > swiperSize) { breakLoop = true; }
        }
      }
    } else {
      for (var i$2 = activeIndex + 1; i$2 < slides.length; i$2 += 1) {
        if (slidesGrid[i$2] - slidesGrid[activeIndex] < swiperSize) {
          spv += 1;
        }
      }
    }
    return spv;
  };
  Swiper$1.prototype.update = function update () {
    var swiper = this;
    if (!swiper) { return; }
    swiper.updateSize();
    swiper.updateSlides();
    swiper.updateProgress();
    swiper.updateSlidesClasses();

    var newTranslate;
    function setTranslate() {
      newTranslate = Math.min(Math.max(swiper.translate, swiper.maxTranslate()), swiper.minTranslate());
      swiper.setTranslate(newTranslate);
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    }
    var translated;
    if (swiper.params.freeMode) {
      setTranslate();
      if (swiper.params.autoHeight) {
        swiper.updateAutoHeight();
      }
    } else {
      if ((swiper.params.slidesPerView === 'auto' || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {
        translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true);
      } else {
        translated = swiper.slideTo(swiper.activeIndex, 0, false, true);
      }
      if (!translated) {
        setTranslate();
      }
    }
    swiper.emit('update');
  };
  Swiper$1.prototype.init = function init () {
    var swiper = this;
    if (swiper.initialized) { return; }

    swiper.emit('beforeInit');

    // Set breakpoint
    if (swiper.params.breakpoints) {
      swiper.setBreakpoint();
    }

    // Add Classes
    swiper.addClasses();

    // Create loop
    if (swiper.params.loop) {
      swiper.loopCreate();
    }

    // Update size
    swiper.updateSize();

    // Update slides
    swiper.updateSlides();

    // Set Grab Cursor
    if (swiper.params.grabCursor) {
      swiper.setGrabCursor();
    }

    if (swiper.params.preloadImages) {
      swiper.preloadImages();
    }

    // Slide To Initial Slide
    if (swiper.params.loop) {
      swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit);
    } else {
      swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit);
    }

    // Attach events
    swiper.attachEvents();

    // Init Flag
    swiper.initialized = true;

    // Emit
    swiper.emit('init');
  };
  Swiper$1.prototype.destroy = function destroy (deleteInstance, cleanStyles) {
    if ( deleteInstance === void 0 ) deleteInstance = true;
    if ( cleanStyles === void 0 ) cleanStyles = true;

    var swiper = this;
    var params = swiper.params;
    var $el = swiper.$el;
    var $wrapperEl = swiper.$wrapperEl;
    var slides = swiper.slides;
    swiper.emit('beforeDestroy');

    // Init Flag
    swiper.initialized = false;

    // Detach events
    swiper.detachEvents();

    // Destroy loop
    if (params.loop) {
      swiper.loopDestroy();
    }

    // Cleanup styles
    if (cleanStyles) {
      swiper.removeClasses();
      $el.removeAttr('style');
      $wrapperEl.removeAttr('style');
      if (slides && slides.length) {
        slides
          .removeClass([
            params.slideVisibleClass,
            params.slideActiveClass,
            params.slideNextClass,
            params.slidePrevClass ].join(' '))
          .removeAttr('style')
          .removeAttr('data-swiper-slide-index')
          .removeAttr('data-swiper-column')
          .removeAttr('data-swiper-row');
      }
    }

    swiper.emit('destroy');

    // Detach emitter events
    Object.keys(swiper.eventsListeners).forEach(function (eventName) {
      swiper.off(eventName);
    });

    if (deleteInstance !== false) {
      swiper.$el[0].swiper = null;
      swiper.$el.data('swiper', null);
      Utils.deleteProps(swiper);
      swiper = null;
    }
  };

  return Swiper$1;
}(SwiperClass));

var prototypes = Utils.extend(
  {},
  update,
  translate,
  transition$1,
  slide,
  loop,
  grabCursor,
  manipulation,
  events$1,
  breakpoints,
  classes,
  images
);

Object.keys(prototypes).forEach(function (protoMethod) {
  Swiper$1.prototype[protoMethod] = prototypes[protoMethod];
});

Swiper$1.Class = SwiperClass;

var Device$4 = {
  name: 'device',
  proto: {
    device: Device$1,
  },
  static: {
    Device: Device$1,
  },
};

var Support$5 = {
  name: 'support',
  proto: {
    support: Support$4,
  },
  static: {
    Support: Support$4,
  },
};

var Browser$2 = {
  name: 'browser',
  proto: {
    browser: Browser$1,
  },
  static: {
    Browser: Browser$1,
  },
};

var Resize$1 = {
  name: 'resize',
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      resize: {
        resizeHandler: function resizeHandler() {
          if (!swiper || !swiper.initialized) { return; }
          swiper.emit('resize');
        },
        orientationChangeHandler: function orientationChangeHandler() {
          if (!swiper || !swiper.initialized) { return; }
          swiper.emit('orientationchange');
        },
      },
    });
  },
  on: {
    init: function init() {
      var swiper = this;
      // Emit resize
      window.addEventListener('resize', swiper.resize.resizeHandler);

      // Emit orientationchange
      window.addEventListener('orientationchange', swiper.resize.orientationChangeHandler);
    },
    destroy: function destroy() {
      var swiper = this;
      window.removeEventListener('resize', swiper.resize.resizeHandler);
      window.removeEventListener('orientationchange', swiper.resize.orientationChangeHandler);
    },
  },
};

var Observer$1 = {
  func: window.MutationObserver || window.WebkitMutationObserver,
  attach: function attach(target, options) {
    if ( options === void 0 ) options = {};

    var swiper = this;

    var ObserverFunc = Observer$1.func;
    var observer = new ObserverFunc(function (mutations) {
      mutations.forEach(function (mutation) {
        swiper.emit('observerUpdate', mutation);
      });
    });

    observer.observe(target, {
      attributes: typeof options.attributes === 'undefined' ? true : options.attributes,
      childList: typeof options.childList === 'undefined' ? true : options.childList,
      characterData: typeof options.characterData === 'undefined' ? true : options.characterData,
    });

    swiper.observer.observers.push(observer);
  },
  init: function init() {
    var swiper = this;
    if (!Support$4.observer || !swiper.params.observer) { return; }
    if (swiper.params.observeParents) {
      var containerParents = swiper.$el.parents();
      for (var i = 0; i < containerParents.length; i += 1) {
        swiper.observer.attach(containerParents[i]);
      }
    }
    // Observe container
    swiper.observer.attach(swiper.$el[0], { childList: false });

    // Observe wrapper
    swiper.observer.attach(swiper.$wrapperEl[0], { attributes: false });
  },
  destroy: function destroy() {
    var swiper = this;
    swiper.observer.observers.forEach(function (observer) {
      observer.disconnect();
    });
    swiper.observer.observers = [];
  },
};

var Observer$1$1 = {
  name: 'observer',
  params: {
    observer: false,
    observeParents: false,
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      observer: {
        init: Observer$1.init.bind(swiper),
        attach: Observer$1.attach.bind(swiper),
        destroy: Observer$1.destroy.bind(swiper),
        observers: [],
      },
    });
  },
  on: {
    init: function init() {
      var swiper = this;
      swiper.observer.init();
    },
    destroy: function destroy() {
      var swiper = this;
      swiper.observer.destroy();
    },
  },
};

var Navigation = {
  update: function update() {
    // Update Navigation Buttons
    var swiper = this;
    var params = swiper.params.navigation;

    if (swiper.params.loop) { return; }
    var ref = swiper.navigation;
    var $nextEl = ref.$nextEl;
    var $prevEl = ref.$prevEl;

    if ($prevEl && $prevEl.length > 0) {
      if (swiper.isBeginning) {
        $prevEl.addClass(params.disabledClass);
      } else {
        $prevEl.removeClass(params.disabledClass);
      }
    }
    if ($nextEl && $nextEl.length > 0) {
      if (swiper.isEnd) {
        $nextEl.addClass(params.disabledClass);
      } else {
        $nextEl.removeClass(params.disabledClass);
      }
    }
  },
  init: function init() {
    var swiper = this;
    var params = swiper.params.navigation;
    if (!(params.nextEl || params.prevEl)) { return; }

    var $nextEl;
    var $prevEl;
    if (params.nextEl) {
      $nextEl = $$1(params.nextEl);
      if (
        swiper.params.uniqueNavElements &&
        typeof params.nextEl === 'string' &&
        $nextEl.length > 1 &&
        swiper.$el.find(params.nextEl).length === 1
      ) {
        $nextEl = swiper.$el.find(params.nextEl);
      }
    }
    if (params.prevEl) {
      $prevEl = $$1(params.prevEl);
      if (
        swiper.params.uniqueNavElements &&
        typeof params.prevEl === 'string' &&
        $prevEl.length > 1 &&
        swiper.$el.find(params.prevEl).length === 1
      ) {
        $prevEl = swiper.$el.find(params.prevEl);
      }
    }

    if ($nextEl && $nextEl.length > 0) {
      $nextEl.on('click', function (e) {
        e.preventDefault();
        if (swiper.isEnd && !swiper.params.loop) { return; }
        swiper.slideNext();
      });
    }
    if ($prevEl && $prevEl.length > 0) {
      $prevEl.on('click', function (e) {
        e.preventDefault();
        if (swiper.isBeginning && !swiper.params.loop) { return; }
        swiper.slidePrev();
      });
    }

    Utils.extend(swiper.navigation, {
      $nextEl: $nextEl,
      nextEl: $nextEl && $nextEl[0],
      $prevEl: $prevEl,
      prevEl: $prevEl && $prevEl[0],
    });
  },
  destroy: function destroy() {
    var swiper = this;
    var ref = swiper.navigation;
    var $nextEl = ref.$nextEl;
    var $prevEl = ref.$prevEl;
    if ($nextEl && $nextEl.length) {
      $nextEl.off('click');
      $nextEl.removeClass(swiper.params.navigation.disabledClass);
    }
    if ($prevEl && $prevEl.length) {
      $prevEl.off('click');
      $prevEl.removeClass(swiper.params.navigation.disabledClass);
    }
  },
};

var Navigation$1 = {
  name: 'navigation',
  params: {
    navigation: {
      nextEl: null,
      prevEl: null,

      hideOnClick: false,
      disabledClass: 'swiper-button-disabled',
      hiddenClass: 'swiper-button-hidden',
    },
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      navigation: {
        init: Navigation.init.bind(swiper),
        update: Navigation.update.bind(swiper),
        destroy: Navigation.destroy.bind(swiper),
      },
    });
  },
  on: {
    init: function init() {
      var swiper = this;
      swiper.navigation.init();
      swiper.navigation.update();
    },
    toEdge: function toEdge() {
      var swiper = this;
      swiper.navigation.update();
    },
    fromEdge: function fromEdge() {
      var swiper = this;
      swiper.navigation.update();
    },
    destroy: function destroy() {
      var swiper = this;
      swiper.navigation.destroy();
    },
    click: function click(e) {
      var swiper = this;
      var ref = swiper.navigation;
      var $nextEl = ref.$nextEl;
      var $prevEl = ref.$prevEl;
      if (
        swiper.params.navigation.hideOnClick &&
        !$$1(e.target).is($prevEl) &&
        !$$1(e.target).is($nextEl)
      ) {
        if ($nextEl) { $nextEl.toggleClass(swiper.params.navigation.hiddenClass); }
        if ($prevEl) { $prevEl.toggleClass(swiper.params.navigation.hiddenClass); }
      }
    },
  },
};

var Pagination = {
  update: function update() {
    // Render || Update Pagination bullets/items
    var swiper = this;
    var params = swiper.params.pagination;
    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) { return; }
    var $el = swiper.pagination.$el;
    // Current/Total
    var current;
    var total = swiper.params.loop ? Math.ceil((swiper.slides.length - (swiper.loopedSlides * 2)) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;
    if (swiper.params.loop) {
      current = Math.ceil((swiper.activeIndex - swiper.loopedSlides) / swiper.params.slidesPerGroup);
      if (current > swiper.slides.length - 1 - (swiper.loopedSlides * 2)) {
        current -= (swiper.slides.length - (swiper.loopedSlides * 2));
      }
      if (current > total - 1) { current -= total; }
      if (current < 0 && swiper.params.paginationType !== 'bullets') { current = total + current; }
    } else if (typeof swiper.snapIndex !== 'undefined') {
      current = swiper.snapIndex;
    } else {
      current = swiper.activeIndex || 0;
    }
    // Types
    if (params.type === 'bullets' && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {
      var bullets = swiper.pagination.bullets;
      if (params.dynamicBullets) {
        swiper.pagination.bulletSize = bullets.eq(0)[swiper.isHorizontal() ? 'outerWidth' : 'outerHeight'](true);
        $el.css(swiper.isHorizontal() ? 'width' : 'height', ((swiper.pagination.bulletSize * 5) + "px"));
      }
      bullets.removeClass(((params.bulletActiveClass) + " " + (params.bulletActiveClass) + "-next " + (params.bulletActiveClass) + "-next-next " + (params.bulletActiveClass) + "-prev " + (params.bulletActiveClass) + "-prev-prev"));
      if ($el.length > 1) {
        bullets.each(function (index, bullet) {
          var $bullet = $$1(bullet);
          if ($bullet.index() === current) {
            $bullet.addClass(params.bulletActiveClass);
            if (params.dynamicBullets) {
              $bullet
                .prev()
                .addClass(((params.bulletActiveClass) + "-prev"))
                .prev()
                .addClass(((params.bulletActiveClass) + "-prev-prev"));
              $bullet
                .next()
                .addClass(((params.bulletActiveClass) + "-next"))
                .next()
                .addClass(((params.bulletActiveClass) + "-next-next"));
            }
          }
        });
      } else {
        var $bullet = bullets.eq(current);
        $bullet.addClass(params.bulletActiveClass);
        if (params.dynamicBullets) {
          $bullet
            .prev()
            .addClass(((params.bulletActiveClass) + "-prev"))
            .prev()
            .addClass(((params.bulletActiveClass) + "-prev-prev"));
          $bullet
            .next()
            .addClass(((params.bulletActiveClass) + "-next"))
            .next()
            .addClass(((params.bulletActiveClass) + "-next-next"));
        }
      }
      if (params.dynamicBullets) {
        var bulletsOffset = (((swiper.pagination.bulletSize * 5) - (swiper.pagination.bulletSize)) / 2) - (current * swiper.pagination.bulletSize);
        bullets.css(swiper.isHorizontal() ? 'left' : 'top', (bulletsOffset + "px"));
      }
    }
    if (params.type === 'fraction') {
      $el.find(("." + (params.currentClass))).text(current + 1);
      $el.find(("." + (params.totalClass))).text(total);
    }
    if (params.type === 'progressbar') {
      var scale = (current + 1) / total;
      var scaleX = scale;
      var scaleY = 1;
      if (!swiper.isHorizontal()) {
        scaleY = scale;
        scaleX = 1;
      }
      $el.find(("." + (params.progressbarFillClass))).transform(("translate3d(0,0,0) scaleX(" + scaleX + ") scaleY(" + scaleY + ")")).transition(swiper.params.speed);
    }
    if (params.type === 'custom' && params.renderCustom) {
      $el.html(params.renderCustom(swiper, current + 1, total));
      swiper.emit('paginationRender', swiper, $el[0]);
    } else {
      swiper.emit('paginationUpdate', swiper, $el[0]);
    }
  },
  render: function render() {
    // Render Container
    var swiper = this;
    var params = swiper.params.pagination;
    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) { return; }

    var $el = swiper.pagination.$el;
    var paginationHTML = '';
    if (params.type === 'bullets') {
      var numberOfBullets = swiper.params.loop ? Math.ceil((swiper.slides.length - (swiper.loopedSlides * 2)) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;
      for (var i = 0; i < numberOfBullets; i += 1) {
        if (params.renderBullet) {
          paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);
        } else {
          paginationHTML += "<" + (params.bulletElement) + " class=\"" + (params.bulletClass) + "\"></" + (params.bulletElement) + ">";
        }
      }
      $el.html(paginationHTML);
      swiper.pagination.bullets = $el.find(("." + (params.bulletClass)));
    }
    if (params.type === 'fraction') {
      if (params.renderFraction) {
        paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);
      } else {
        paginationHTML =
        "<span class=\"" + (params.currentClass) + "\"></span>" +
        ' / ' +
        "<span class=\"" + (params.totalClass) + "\"></span>";
      }
      $el.html(paginationHTML);
    }
    if (params.type === 'progressbar') {
      if (params.renderProgressbar) {
        paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);
      } else {
        paginationHTML = "<span class=\"" + (params.progressbarFillClass) + "\"></span>";
      }
      $el.html(paginationHTML);
    }
    if (params.type !== 'custom') {
      swiper.emit('paginationRender', swiper.pagination.$el[0]);
    }
  },
  init: function init() {
    var swiper = this;
    var params = swiper.params.pagination;
    if (!params.el) { return; }

    var $el = $$1(params.el);
    if ($el.length === 0) { return; }

    if (
      swiper.params.uniqueNavElements &&
      typeof params.el === 'string' &&
      $el.length > 1 &&
      swiper.$el.find(params.el).length === 1
    ) {
      $el = swiper.$el.find(params.el);
    }

    if (params.type === 'bullets' && params.clickable) {
      $el.addClass(params.clickableClass);
    }

    $el.addClass(params.modifierClass + params.type);

    if (params.type === 'bullets' && params.dynamicBullets) {
      $el.addClass(("" + (params.modifierClass) + (params.type) + "-dynamic"));
    }

    if (params.clickable) {
      $el.on('click', ("." + (params.bulletClass)), function onClick(e) {
        e.preventDefault();
        var index = $$1(this).index() * swiper.params.slidesPerGroup;
        if (swiper.params.loop) { index += swiper.loopedSlides; }
        swiper.slideTo(index);
      });
    }

    Utils.extend(swiper.pagination, {
      $el: $el,
      el: $el[0],
    });
  },
  destroy: function destroy() {
    var swiper = this;
    var params = swiper.params.pagination;
    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) { return; }
    var $el = swiper.pagination.$el;

    $el.removeClass(params.hiddenClass);
    $el.removeClass(params.modifierClass + params.type);
    if (swiper.pagination.bullets) { swiper.pagination.bullets.removeClass(params.bulletActiveClass); }
    if (params.clickable) {
      $el.off('click', ("." + (params.bulletClass)));
    }
  },
};

var Pagination$1 = {
  name: 'pagination',
  params: {
    pagination: {
      el: null,
      bulletElement: 'span',
      clickable: false,
      hideOnClick: false,
      renderBullet: null,
      renderProgressbar: null,
      renderFraction: null,
      renderCustom: null,
      type: 'bullets', // 'bullets' or 'progressbar' or 'fraction' or 'custom'
      dynamicBullets: false,

      bulletClass: 'swiper-pagination-bullet',
      bulletActiveClass: 'swiper-pagination-bullet-active',
      modifierClass: 'swiper-pagination-', // NEW
      currentClass: 'swiper-pagination-current',
      totalClass: 'swiper-pagination-total',
      hiddenClass: 'swiper-pagination-hidden',
      progressbarFillClass: 'swiper-pagination-progressbar-fill',
      clickableClass: 'swiper-pagination-clickable', // NEW
    },
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      pagination: {
        init: Pagination.init.bind(swiper),
        render: Pagination.render.bind(swiper),
        update: Pagination.update.bind(swiper),
        destroy: Pagination.destroy.bind(swiper),
      },
    });
  },
  on: {
    init: function init() {
      var swiper = this;
      swiper.pagination.init();
      swiper.pagination.render();
      swiper.pagination.update();
    },
    activeIndexChange: function activeIndexChange() {
      var swiper = this;
      if (swiper.params.loop) {
        swiper.pagination.update();
      } else if (typeof swiper.snapIndex === 'undefined') {
        swiper.pagination.update();
      }
    },
    snapIndexChange: function snapIndexChange() {
      var swiper = this;
      if (!swiper.params.loop) {
        swiper.pagination.update();
      }
    },
    slidesLengthChange: function slidesLengthChange() {
      var swiper = this;
      if (swiper.params.loop) {
        swiper.pagination.render();
        swiper.pagination.update();
      }
    },
    snapGridLengthChange: function snapGridLengthChange() {
      var swiper = this;
      if (!swiper.params.loop) {
        swiper.pagination.render();
        swiper.pagination.update();
      }
    },
    destroy: function destroy() {
      var swiper = this;
      swiper.pagination.destroy();
    },
    click: function click(e) {
      var swiper = this;
      if (
        swiper.params.pagination.el &&
        swiper.params.pagination.hideOnClick &&
        swiper.pagination.$el.length > 0 &&
        !$$1(e.target).hasClass(swiper.params.pagination.bulletClass)
      ) {
        swiper.pagination.$el.toggleClass(swiper.params.pagination.hiddenClass);
      }
    },
  },
};

var Scrollbar = {
  setTranslate: function setTranslate() {
    var swiper = this;
    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) { return; }
    var scrollbar = swiper.scrollbar;
    var rtl = swiper.rtl;
    var progress = swiper.progress;
    var dragSize = scrollbar.dragSize;
    var trackSize = scrollbar.trackSize;
    var $dragEl = scrollbar.$dragEl;
    var $el = scrollbar.$el;
    var params = swiper.params.scrollbar;

    var newSize = dragSize;
    var newPos = (trackSize - dragSize) * progress;
    if (rtl && swiper.isHorizontal()) {
      newPos = -newPos;
      if (newPos > 0) {
        newSize = dragSize - newPos;
        newPos = 0;
      } else if (-newPos + dragSize > trackSize) {
        newSize = trackSize + newPos;
      }
    } else if (newPos < 0) {
      newSize = dragSize + newPos;
      newPos = 0;
    } else if (newPos + dragSize > trackSize) {
      newSize = trackSize - newPos;
    }
    if (swiper.isHorizontal()) {
      if (Support$4.transforms3d) {
        $dragEl.transform(("translate3d(" + newPos + "px, 0, 0)"));
      } else {
        $dragEl.transform(("translateX(" + newPos + "px)"));
      }
      $dragEl[0].style.width = newSize + "px";
    } else {
      if (Support$4.transforms3d) {
        $dragEl.transform(("translate3d(0px, " + newPos + "px, 0)"));
      } else {
        $dragEl.transform(("translateY(" + newPos + "px)"));
      }
      $dragEl[0].style.height = newSize + "px";
    }
    if (params.hide) {
      clearTimeout(swiper.scrollbar.timeout);
      $el[0].style.opacity = 1;
      swiper.scrollbar.timeout = setTimeout(function () {
        $el[0].style.opacity = 0;
        $el.transition(400);
      }, 1000);
    }
  },
  setTransition: function setTransition(duration) {
    var swiper = this;
    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) { return; }
    swiper.scrollbar.$dragEl.transition(duration);
  },
  updateSize: function updateSize() {
    var swiper = this;
    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) { return; }

    var scrollbar = swiper.scrollbar;
    var $dragEl = scrollbar.$dragEl;
    var $el = scrollbar.$el;

    $dragEl[0].style.width = '';
    $dragEl[0].style.height = '';
    var trackSize = swiper.isHorizontal() ? $el[0].offsetWidth : $el[0].offsetHeight;

    var divider = swiper.size / swiper.virtualSize;
    var moveDivider = divider * (trackSize / swiper.size);
    var dragSize;
    if (swiper.params.scrollbar.dragSize === 'auto') {
      dragSize = trackSize * divider;
    } else {
      dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);
    }

    if (swiper.isHorizontal()) {
      $dragEl[0].style.width = dragSize + "px";
    } else {
      $dragEl[0].style.height = dragSize + "px";
    }

    if (divider >= 1) {
      $el[0].style.display = 'none';
    } else {
      $el[0].style.display = '';
    }
    if (swiper.params.scrollbarHide) {
      $el[0].style.opacity = 0;
    }
    Utils.extend(scrollbar, {
      trackSize: trackSize,
      divider: divider,
      moveDivider: moveDivider,
      dragSize: dragSize,
    });
  },
  setDragPosition: function setDragPosition(e) {
    var swiper = this;
    var scrollbar = swiper.scrollbar;
    var $el = scrollbar.$el;
    var dragSize = scrollbar.dragSize;
    var moveDivider = scrollbar.moveDivider;

    var pointerPosition;
    if (swiper.isHorizontal()) {
      pointerPosition = ((e.type === 'touchstart' || e.type === 'touchmove') ? e.targetTouches[0].pageX : e.pageX || e.clientX);
    } else {
      pointerPosition = ((e.type === 'touchstart' || e.type === 'touchmove') ? e.targetTouches[0].pageY : e.pageY || e.clientY);
    }
    var position = (pointerPosition) - $el.offset()[swiper.isHorizontal() ? 'left' : 'top'] - (dragSize / 2);
    var positionMin = -swiper.minTranslate() * moveDivider;
    var positionMax = -swiper.maxTranslate() * moveDivider;
    if (position < positionMin) {
      position = positionMin;
    } else if (position > positionMax) {
      position = positionMax;
    }
    position = -position / moveDivider;
    swiper.updateProgress(position);
    swiper.setTranslate(position);
    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();
    swiper.updateRealIndex();
  },
  onDragStart: function onDragStart(e) {
    var swiper = this;
    var params = swiper.params.scrollbar;
    var scrollbar = swiper.scrollbar;
    var $wrapperEl = swiper.$wrapperEl;
    var $el = scrollbar.$el;
    var $dragEl = scrollbar.$dragEl;
    swiper.scrollbar.isTouched = true;
    e.preventDefault();
    e.stopPropagation();

    $wrapperEl.transition(100);
    $dragEl.transition(100);
    scrollbar.setDragPosition(e);

    clearTimeout(swiper.scrollbar.dragTimeout);

    $el.transition(0);
    if (params.hide) {
      $el.css('opacity', 1);
    }
    swiper.emit('scrollbarDragStart', e);
  },
  onDragMove: function onDragMove(e) {
    var swiper = this;
    var scrollbar = swiper.scrollbar;
    var $wrapperEl = swiper.$wrapperEl;
    var $el = scrollbar.$el;
    var $dragEl = scrollbar.$dragEl;

    if (!swiper.scrollbar.isTouched) { return; }
    if (e.preventDefault) { e.preventDefault(); }
    else { e.returnValue = false; }
    scrollbar.setDragPosition(e);
    $wrapperEl.transition(0);
    $el.transition(0);
    $dragEl.transition(0);
    swiper.emit('scrollbarDragMove', e);
  },
  onDragEnd: function onDragEnd(e) {
    var swiper = this;

    var params = swiper.params.scrollbar;
    var scrollbar = swiper.scrollbar;
    var $el = scrollbar.$el;

    if (!swiper.scrollbar.isTouched) { return; }
    swiper.scrollbar.isTouched = false;
    if (params.hide) {
      clearTimeout(swiper.scrollbar.dragTimeout);
      swiper.scrollbar.dragTimeout = Utils.nextTick(function () {
        $el.css('opacity', 0);
        $el.transition(400);
      }, 1000);
    }
    swiper.emit('scrollbarDragEnd', e);
    if (params.snapOnRelease) {
      swiper.slideReset();
    }
  },
  enableDraggable: function enableDraggable() {
    var swiper = this;
    if (!swiper.params.scrollbar.el) { return; }
    var scrollbar = swiper.scrollbar;
    var $el = scrollbar.$el;
    var target = Support$4.touch ? $el[0] : document;
    $el.on(swiper.scrollbar.dragEvents.start, swiper.scrollbar.onDragStart);
    $$1(target).on(swiper.scrollbar.dragEvents.move, swiper.scrollbar.onDragMove);
    $$1(target).on(swiper.scrollbar.dragEvents.end, swiper.scrollbar.onDragEnd);
  },
  disableDraggable: function disableDraggable() {
    var swiper = this;
    if (!swiper.params.scrollbar.el) { return; }
    var scrollbar = swiper.scrollbar;
    var $el = scrollbar.$el;
    var target = Support$4.touch ? $el[0] : document;
    $el.off(swiper.scrollbar.dragEvents.start);
    $$1(target).off(swiper.scrollbar.dragEvents.move);
    $$1(target).off(swiper.scrollbar.dragEvents.end);
  },
  init: function init() {
    var swiper = this;
    if (!swiper.params.scrollbar.el) { return; }
    var scrollbar = swiper.scrollbar;
    var $swiperEl = swiper.$el;
    var touchEvents = swiper.touchEvents;
    var params = swiper.params.scrollbar;

    var $el = $$1(params.el);
    if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1 && $swiperEl.find(params.el).length === 1) {
      $el = $swiperEl.find(params.el);
    }

    var $dragEl = $el.find('.swiper-scrollbar-drag');
    if ($dragEl.length === 0) {
      $dragEl = $$1('<div class="swiper-scrollbar-drag"></div>');
      $el.append($dragEl);
    }

    swiper.scrollbar.dragEvents = (function dragEvents() {
      if ((swiper.params.simulateTouch === false && !Support$4.touch)) {
        return {
          start: 'mousedown',
          move: 'mousemove',
          end: 'mouseup',
        };
      }
      return touchEvents;
    }());

    Utils.extend(scrollbar, {
      $el: $el,
      el: $el[0],
      $dragEl: $dragEl,
      dragEl: $dragEl[0],
    });

    if (params.draggable) {
      scrollbar.enableDraggable();
    }
  },
  destroy: function destroy() {
    var swiper = this;
    swiper.scrollbar.disableDraggable();
  },
};

var Scrollbar$1 = {
  name: 'scrollbar',
  params: {
    scrollbar: {
      el: null,
      dragSize: 'auto',
      hide: false,
      draggable: false,
      snapOnRelease: false,
    },
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      scrollbar: {
        init: Scrollbar.init.bind(swiper),
        destroy: Scrollbar.destroy.bind(swiper),
        updateSize: Scrollbar.updateSize.bind(swiper),
        setTranslate: Scrollbar.setTranslate.bind(swiper),
        setTransition: Scrollbar.setTransition.bind(swiper),
        enableDraggable: Scrollbar.enableDraggable.bind(swiper),
        disableDraggable: Scrollbar.disableDraggable.bind(swiper),
        setDragPosition: Scrollbar.setDragPosition.bind(swiper),
        onDragStart: Scrollbar.onDragStart.bind(swiper),
        onDragMove: Scrollbar.onDragMove.bind(swiper),
        onDragEnd: Scrollbar.onDragEnd.bind(swiper),
        isTouched: false,
        timeout: null,
        dragTimeout: null,
      },
    });
  },
  on: {
    init: function init() {
      var swiper = this;
      swiper.scrollbar.init();
      swiper.scrollbar.updateSize();
      swiper.scrollbar.setTranslate();
    },
    update: function update() {
      var swiper = this;
      swiper.scrollbar.updateSize();
    },
    resize: function resize() {
      var swiper = this;
      swiper.scrollbar.updateSize();
    },
    observerUpdate: function observerUpdate() {
      var swiper = this;
      swiper.scrollbar.updateSize();
    },
    setTranslate: function setTranslate() {
      var swiper = this;
      swiper.scrollbar.setTranslate();
    },
    setTransition: function setTransition(duration) {
      var swiper = this;
      swiper.scrollbar.setTransition(duration);
    },
    destroy: function destroy() {
      var swiper = this;
      swiper.scrollbar.destroy();
    },
  },
};

var Parallax = {
  setTransform: function setTransform(el, progress) {
    var swiper = this;
    var rtl = swiper.rtl;

    var $el = $$1(el);
    var rtlFactor = rtl ? -1 : 1;

    var p = $el.attr('data-swiper-parallax') || '0';
    var x = $el.attr('data-swiper-parallax-x');
    var y = $el.attr('data-swiper-parallax-y');
    var scale = $el.attr('data-swiper-parallax-scale');
    var opacity = $el.attr('data-swiper-parallax-opacity');

    if (x || y) {
      x = x || '0';
      y = y || '0';
    } else if (swiper.isHorizontal()) {
      x = p;
      y = '0';
    } else {
      y = p;
      x = '0';
    }

    if ((x).indexOf('%') >= 0) {
      x = (parseInt(x, 10) * progress * rtlFactor) + "%";
    } else {
      x = (x * progress * rtlFactor) + "px";
    }
    if ((y).indexOf('%') >= 0) {
      y = (parseInt(y, 10) * progress) + "%";
    } else {
      y = (y * progress) + "px";
    }

    if (typeof pOpacity !== 'undefined' && opacity !== null) {
      var currentOpacity = opacity - ((opacity - 1) * (1 - Math.abs(progress)));
      $el[0].style.opacity = currentOpacity;
    }
    if (typeof pScale === 'undefined' || scale === null) {
      $el.transform(("translate3d(" + x + ", " + y + ", 0px)"));
    } else {
      var currentScale = scale - ((scale - 1) * (1 - Math.abs(progress)));
      $el.transform(("translate3d(" + x + ", " + y + ", 0px) scale(" + currentScale + ")"));
    }
  },
  setTranslate: function setTranslate() {
    var swiper = this;
    var $el = swiper.$el;
    var slides = swiper.slides;
    var progress = swiper.progress;
    $el.children('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]')
      .each(function (index, el) {
        swiper.parallax.setTransform(el, progress);
      });
    slides.each(function (slideIndex, slideEl) {
      $$1(slideEl).find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]')
        .each(function (index, el) {
          var slideProgress = Math.min(Math.max(slideEl.progress, -1), 1);
          swiper.parallax.setTransform(el, slideProgress);
        });
    });
  },
  setTransition: function setTransition(duration) {
    if ( duration === void 0 ) duration = this.params.speed;

    var swiper = this;
    var $el = swiper.$el;
    $el.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]')
      .each(function (index, parallaxEl) {
        var $parallaxEl = $$1(parallaxEl);
        var parallaxDuration = parseInt($parallaxEl.attr('data-swiper-parallax-duration'), 10) || duration;
        if (duration === 0) { parallaxDuration = 0; }
        $parallaxEl.transition(parallaxDuration);
      });
  },
};

var Parallax$1 = {
  name: 'parallax',
  params: {
    parallax: {
      enabled: false,
    },
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      parallax: {
        setTransform: Parallax.setTransform.bind(swiper),
        setTranslate: Parallax.setTranslate.bind(swiper),
        setTransition: Parallax.setTransition.bind(swiper),
      },
    });
  },
  on: {
    beforeInit: function beforeInit() {
      var swiper = this;
      swiper.params.watchSlidesProgress = true;
    },
    init: function init() {
      var swiper = this;
      if (!swiper.params.parallax) { return; }
      swiper.parallax.setTranslate();
    },
    setTranslate: function setTranslate() {
      var swiper = this;
      if (!swiper.params.parallax) { return; }
      swiper.parallax.setTranslate();
    },
    setTransition: function setTransition(duration) {
      var swiper = this;
      if (!swiper.params.parallax) { return; }
      swiper.parallax.setTransition(duration);
    },
  },
};

var Zoom = {
  // Calc Scale From Multi-touches
  getDistanceBetweenTouches: function getDistanceBetweenTouches(e) {
    if (e.targetTouches.length < 2) { return 1; }
    var x1 = e.targetTouches[0].pageX;
    var y1 = e.targetTouches[0].pageY;
    var x2 = e.targetTouches[1].pageX;
    var y2 = e.targetTouches[1].pageY;
    var distance = Math.sqrt((Math.pow( (x2 - x1), 2 )) + (Math.pow( (y2 - y1), 2 )));
    return distance;
  },
  // Events
  onGestureStart: function onGestureStart(e) {
    var swiper = this;
    var params = swiper.params.zoom;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture;
    if (!Support$4.gestures) {
      if (e.type !== 'touchstart' || (e.type === 'touchstart' && e.targetTouches.length < 2)) {
        return;
      }
      gesture.scaleStart = Zoom.getDistanceBetweenTouches(e);
    }
    if (!gesture.$slideEl || !gesture.$slideEl.length) {
      gesture.$slideEl = $$1(this);
      if (gesture.$slideEl.length === 0) { gesture.$slideEl = swiper.slides.eq(swiper.activeIndex); }
      gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas');
      gesture.$imageWrapEl = gesture.$imageEl.parent(("." + (params.containerClass)));
      gesture.maxRatio = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;
      if (gesture.$imageWrapEl.length === 0) {
        gesture.$imageEl = undefined;
        return;
      }
    }
    gesture.$imageEl.transition(0);
    swiper.zoom.isScaling = true;
  },
  onGestureChange: function onGestureChange(e) {
    var swiper = this;
    var params = swiper.params.zoom;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture;
    if (!Support$4.gestures) {
      if (e.type !== 'touchmove' || (e.type === 'touchmove' && e.targetTouches.length < 2)) {
        return;
      }
      gesture.scaleMove = Zoom.getDistanceBetweenTouches(e);
    }
    if (!gesture.$imageEl || gesture.$imageEl.length === 0) { return; }
    if (Support$4.gestures) {
      swiper.zoom.scale = e.scale * zoom.currentScale;
    } else {
      zoom.scale = (gesture.scaleMove / gesture.scaleStart) * zoom.currentScale;
    }
    if (zoom.scale > gesture.maxRatio) {
      zoom.scale = (gesture.maxRatio - 1) + (Math.pow( ((zoom.scale - gesture.maxRatio) + 1), 0.5 ));
    }
    if (zoom.scale < params.minRatio) {
      zoom.scale = (params.minRatio + 1) - (Math.pow( ((params.minRatio - zoom.scale) + 1), 0.5 ));
    }
    gesture.$imageEl.transform(("translate3d(0,0,0) scale(" + (zoom.scale) + ")"));
  },
  onGestureEnd: function onGestureEnd(e) {
    var swiper = this;
    var params = swiper.params.zoom;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture;
    if (!Support$4.gestures) {
      if (e.type !== 'touchend' || (e.type === 'touchend' && e.changedTouches.length < 2)) {
        return;
      }
    }
    if (!gesture.$imageEl || gesture.$imageEl.length === 0) { return; }
    zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);
    gesture.$imageEl.transition(swiper.params.speed).transform(("translate3d(0,0,0) scale(" + (zoom.scale) + ")"));
    zoom.currentScale = zoom.scale;
    zoom.isScaling = false;
    if (zoom.scale === 1) { gesture.$slideEl = undefined; }
  },
  onTouchStart: function onTouchStart(e) {
    var swiper = this;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture;
    var image = zoom.image;
    if (!gesture.$imageEl || gesture.$imageEl.length === 0) { return; }
    if (image.isTouched) { return; }
    if (Device$1.android) { e.preventDefault(); }
    image.isTouched = true;
    image.touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
    image.touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
  },
  onTouchMove: function onTouchMove(e) {
    var swiper = this;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture;
    var image = zoom.image;
    var velocity = zoom.velocity;
    if (!gesture.$imageEl || gesture.$imageEl.length === 0) { return; }
    swiper.allowClick = false;
    if (!image.isTouched || !gesture.$slideEl) { return; }

    if (!image.isMoved) {
      image.width = gesture.$imageEl[0].offsetWidth;
      image.height = gesture.$imageEl[0].offsetHeight;
      image.startX = Utils.getTranslate(gesture.$imageWrapEl[0], 'x') || 0;
      image.startY = Utils.getTranslate(gesture.$imageWrapEl[0], 'y') || 0;
      gesture.slideWidth = gesture.$slideEl[0].offsetWidth;
      gesture.slideHeight = gesture.$slideEl[0].offsetHeight;
      gesture.$imageWrapEl.transition(0);
      if (swiper.rtl) { image.startX = -image.startX; }
      if (swiper.rtl) { image.startY = -image.startY; }
    }
    // Define if we need image drag
    var scaledWidth = image.width * zoom.scale;
    var scaledHeight = image.height * zoom.scale;

    if (scaledWidth < gesture.slideWidth && scaledHeight < gesture.slideHeight) { return; }

    image.minX = Math.min(((gesture.slideWidth / 2) - (scaledWidth / 2)), 0);
    image.maxX = -image.minX;
    image.minY = Math.min(((gesture.slideHeight / 2) - (scaledHeight / 2)), 0);
    image.maxY = -image.minY;

    image.touchesCurrent.x = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
    image.touchesCurrent.y = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;

    if (!image.isMoved && !zoom.isScaling) {
      if (
        swiper.isHorizontal() &&
        (
          (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x) ||
          (Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)
        )
      ) {
        image.isTouched = false;
        return;
      } else if (
        !swiper.isHorizontal() &&
        (
          (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y) ||
          (Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)
        )
      ) {
        image.isTouched = false;
        return;
      }
    }
    e.preventDefault();
    e.stopPropagation();

    image.isMoved = true;
    image.currentX = (image.touchesCurrent.x - image.touchesStart.x) + image.startX;
    image.currentY = (image.touchesCurrent.y - image.touchesStart.y) + image.startY;

    if (image.currentX < image.minX) {
      image.currentX = (image.minX + 1) - (Math.pow( ((image.minX - image.currentX) + 1), 0.8 ));
    }
    if (image.currentX > image.maxX) {
      image.currentX = (image.maxX - 1) + (Math.pow( ((image.currentX - image.maxX) + 1), 0.8 ));
    }

    if (image.currentY < image.minY) {
      image.currentY = (image.minY + 1) - (Math.pow( ((image.minY - image.currentY) + 1), 0.8 ));
    }
    if (image.currentY > image.maxY) {
      image.currentY = (image.maxY - 1) + (Math.pow( ((image.currentY - image.maxY) + 1), 0.8 ));
    }

    // Velocity
    if (!velocity.prevPositionX) { velocity.prevPositionX = image.touchesCurrent.x; }
    if (!velocity.prevPositionY) { velocity.prevPositionY = image.touchesCurrent.y; }
    if (!velocity.prevTime) { velocity.prevTime = Date.now(); }
    velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;
    velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;
    if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2) { velocity.x = 0; }
    if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2) { velocity.y = 0; }
    velocity.prevPositionX = image.touchesCurrent.x;
    velocity.prevPositionY = image.touchesCurrent.y;
    velocity.prevTime = Date.now();

    gesture.$imageWrapEl.transform(("translate3d(" + (image.currentX) + "px, " + (image.currentY) + "px,0)"));
  },
  onTouchEnd: function onTouchEnd() {
    var swiper = this;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture;
    var image = zoom.image;
    var velocity = zoom.velocity;
    if (!gesture.$imageEl || gesture.$imageEl.length === 0) { return; }
    if (!image.isTouched || !image.isMoved) {
      image.isTouched = false;
      image.isMoved = false;
      return;
    }
    image.isTouched = false;
    image.isMoved = false;
    var momentumDurationX = 300;
    var momentumDurationY = 300;
    var momentumDistanceX = velocity.x * momentumDurationX;
    var newPositionX = image.currentX + momentumDistanceX;
    var momentumDistanceY = velocity.y * momentumDurationY;
    var newPositionY = image.currentY + momentumDistanceY;

    // Fix duration
    if (velocity.x !== 0) { momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x); }
    if (velocity.y !== 0) { momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y); }
    var momentumDuration = Math.max(momentumDurationX, momentumDurationY);

    image.currentX = newPositionX;
    image.currentY = newPositionY;

    // Define if we need image drag
    var scaledWidth = image.width * zoom.scale;
    var scaledHeight = image.height * zoom.scale;
    image.minX = Math.min(((gesture.slideWidth / 2) - (scaledWidth / 2)), 0);
    image.maxX = -image.minX;
    image.minY = Math.min(((gesture.slideHeight / 2) - (scaledHeight / 2)), 0);
    image.maxY = -image.minY;
    image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);
    image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);

    gesture.$imageWrapEl.transition(momentumDuration).transform(("translate3d(" + (image.currentX) + "px, " + (image.currentY) + "px,0)"));
  },
  onTransitionEnd: function onTransitionEnd() {
    var swiper = this;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture;
    if (gesture.$slideEl && swiper.previousIndex !== swiper.activeIndex) {
      gesture.$imageEl.transform('translate3d(0,0,0) scale(1)');
      gesture.$imageWrapEl.transform('translate3d(0,0,0)');
      gesture.$slideEl = undefined;
      gesture.$imageEl = undefined;
      gesture.$imageWrapEl = undefined;

      zoom.scale = 1;
      zoom.currentScale = 1;
    }
  },
  // Toggle Zoom
  toggle: function toggle(e) {
    var swiper = this;
    var zoom = swiper.zoom;

    if (zoom.scale && zoom.scale !== 1) {
      // Zoom Out
      zoom.out();
    } else {
      // Zoom In
      zoom.in(e);
    }
  },
  in: function in$1(e) {
    var swiper = this;

    var zoom = swiper.zoom;
    var params = swiper.params.zoom;
    var gesture = zoom.gesture;
    var image = zoom.image;

    if (!gesture.$slideEl) {
      gesture.$slideEl = swiper.clickedSlide ? $$1(swiper.clickedSlide) : swiper.slides.eq(swiper.activeIndex);
      gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas');
      gesture.$imageWrapEl = gesture.$imageEl.parent(("." + (params.containerClass)));
    }
    if (!gesture.$imageEl || gesture.$imageEl.length === 0) { return; }

    gesture.$slideEl.addClass(("" + (params.zoomedSlideClass)));

    var touchX;
    var touchY;
    var offsetX;
    var offsetY;
    var diffX;
    var diffY;
    var translateX;
    var translateY;
    var imageWidth;
    var imageHeight;
    var scaledWidth;
    var scaledHeight;
    var translateMinX;
    var translateMinY;
    var translateMaxX;
    var translateMaxY;
    var slideWidth;
    var slideHeight;

    if (typeof image.touchesStart.x === 'undefined' && e) {
      touchX = e.type === 'touchend' ? e.changedTouches[0].pageX : e.pageX;
      touchY = e.type === 'touchend' ? e.changedTouches[0].pageY : e.pageY;
    } else {
      touchX = image.touchesStart.x;
      touchY = image.touchesStart.y;
    }

    zoom.scale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;
    zoom.currentScale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;
    if (e) {
      slideWidth = gesture.$slideEl[0].offsetWidth;
      slideHeight = gesture.$slideEl[0].offsetHeight;
      offsetX = gesture.$slideEl.offset().left;
      offsetY = gesture.$slideEl.offset().top;
      diffX = (offsetX + (slideWidth / 2)) - touchX;
      diffY = (offsetY + (slideHeight / 2)) - touchY;

      imageWidth = gesture.$imageEl[0].offsetWidth;
      imageHeight = gesture.$imageEl[0].offsetHeight;
      scaledWidth = imageWidth * zoom.scale;
      scaledHeight = imageHeight * zoom.scale;

      translateMinX = Math.min(((slideWidth / 2) - (scaledWidth / 2)), 0);
      translateMinY = Math.min(((slideHeight / 2) - (scaledHeight / 2)), 0);
      translateMaxX = -translateMinX;
      translateMaxY = -translateMinY;

      translateX = diffX * zoom.scale;
      translateY = diffY * zoom.scale;

      if (translateX < translateMinX) {
        translateX = translateMinX;
      }
      if (translateX > translateMaxX) {
        translateX = translateMaxX;
      }

      if (translateY < translateMinY) {
        translateY = translateMinY;
      }
      if (translateY > translateMaxY) {
        translateY = translateMaxY;
      }
    } else {
      translateX = 0;
      translateY = 0;
    }
    gesture.$imageWrapEl.transition(300).transform(("translate3d(" + translateX + "px, " + translateY + "px,0)"));
    gesture.$imageEl.transition(300).transform(("translate3d(0,0,0) scale(" + (zoom.scale) + ")"));
  },
  out: function out() {
    var swiper = this;

    var zoom = swiper.zoom;
    var params = swiper.params.zoom;
    var gesture = zoom.gesture;

    if (!gesture.$slideEl) {
      gesture.$slideEl = swiper.clickedSlide ? $$1(swiper.clickedSlide) : swiper.slides.eq(swiper.activeIndex);
      gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas');
      gesture.$imageWrapEl = gesture.$imageEl.parent(("." + (params.containerClass)));
    }
    if (!gesture.$imageEl || gesture.$imageEl.length === 0) { return; }

    zoom.scale = 1;
    zoom.currentScale = 1;
    gesture.$imageWrapEl.transition(300).transform('translate3d(0,0,0)');
    gesture.$imageEl.transition(300).transform('translate3d(0,0,0) scale(1)');
    gesture.$slideEl.removeClass(("" + (params.zoomedSlideClass)));
    gesture.$slideEl = undefined;
  },
  // Attach/Detach Events
  enable: function enable() {
    var swiper = this;
    var zoom = swiper.zoom;
    if (zoom.enabled) { return; }
    zoom.enabled = true;

    var slides = swiper.slides;

    var passiveListener = swiper.touchEvents.start === 'touchstart' && Support$4.passiveListener && swiper.params.passiveListeners ? { passive: true, capture: false } : false;

    // Scale image
    if (Support$4.gestures) {
      slides.on('gesturestart', zoom.onGestureStart, passiveListener);
      slides.on('gesturechange', zoom.onGestureChange, passiveListener);
      slides.on('gestureend', zoom.onGestureEnd, passiveListener);
    } else if (swiper.touchEvents.start === 'touchstart') {
      slides.on(swiper.touchEvents.start, zoom.onGestureStart, passiveListener);
      slides.on(swiper.touchEvents.move, zoom.onGestureChange, passiveListener);
      slides.on(swiper.touchEvents.end, zoom.onGestureEnd, passiveListener);
    }

    // Move image
    swiper.slides.each(function (index, slideEl) {
      var $slideEl = $$1(slideEl);
      if ($slideEl.find(("." + (swiper.params.zoom.containerClass))).length > 0) {
        $slideEl.on(swiper.touchEvents.move, zoom.onTouchMove);
      }
    });
  },
  disable: function disable() {
    var swiper = this;
    var zoom = swiper.zoom;
    if (!zoom.enabled) { return; }

    swiper.zoom.enabled = false;

    var slides = swiper.slides;

    var passiveListener = swiper.touchEvents.start === 'touchstart' && Support$4.passiveListener && swiper.params.passiveListeners ? { passive: true, capture: false } : false;

    // Scale image
    if (Support$4.gestures) {
      slides.off('gesturestart', zoom.onGestureStart, passiveListener);
      slides.off('gesturechange', zoom.onGestureChange, passiveListener);
      slides.off('gestureend', zoom.onGestureEnd, passiveListener);
    } else if (swiper.touchEvents.start === 'touchstart') {
      slides.off(swiper.touchEvents.start, zoom.onGestureStart, passiveListener);
      slides.off(swiper.touchEvents.move, zoom.onGestureChange, passiveListener);
      slides.off(swiper.touchEvents.end, zoom.onGestureEnd, passiveListener);
    }

    // Move image
    swiper.slides.each(function (index, slideEl) {
      var $slideEl = $$1(slideEl);
      if ($slideEl.find(("." + (swiper.params.zoom.containerClass))).length > 0) {
        $slideEl.off(swiper.touchEvents.move, zoom.onTouchMove);
      }
    });
  },
};

var Zoom$1 = {
  name: 'zoom',
  params: {
    zoom: {
      enabled: false,
      maxRatio: 3,
      minRatio: 1,
      toggle: true,
      containerClass: 'swiper-zoom-container',
      zoomedSlideClass: 'swiper-slide-zoomed',
    },
  },
  create: function create() {
    var swiper = this;
    var zoom = {
      enabled: false,
      scale: 1,
      currentScale: 1,
      isScaling: false,
      gesture: {
        $slideEl: undefined,
        slideWidth: undefined,
        slideHeight: undefined,
        $imageEl: undefined,
        $imageWrapEl: undefined,
        maxRatio: 3,
      },
      image: {
        isTouched: undefined,
        isMoved: undefined,
        currentX: undefined,
        currentY: undefined,
        minX: undefined,
        minY: undefined,
        maxX: undefined,
        maxY: undefined,
        width: undefined,
        height: undefined,
        startX: undefined,
        startY: undefined,
        touchesStart: {},
        touchesCurrent: {},
      },
      velocity: {
        x: undefined,
        y: undefined,
        prevPositionX: undefined,
        prevPositionY: undefined,
        prevTime: undefined,
      },
    };
    ('onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out').split(' ').forEach(function (methodName) {
      zoom[methodName] = Zoom[methodName].bind(swiper);
    });
    Utils.extend(swiper, {
      zoom: zoom,
    });
  },
  on: {
    init: function init() {
      var swiper = this;
      if (swiper.params.zoom.enabled) {
        swiper.zoom.enable();
      }
    },
    destroy: function destroy() {
      var swiper = this;
      swiper.zoom.disable();
    },
    touchStart: function touchStart(e) {
      var swiper = this;
      if (!swiper.zoom.enabled) { return; }
      swiper.zoom.onTouchStart(e);
    },
    touchEnd: function touchEnd(e) {
      var swiper = this;
      if (!swiper.zoom.enabled) { return; }
      swiper.zoom.onTouchEnd(e);
    },
    doubleTap: function doubleTap(e) {
      var swiper = this;
      if (swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {
        swiper.zoom.toggle(e);
      }
    },
    transitionEnd: function transitionEnd() {
      var swiper = this;
      if (swiper.zoom.enabled && swiper.params.zoom.enabled) {
        swiper.zoom.onTransitionEnd();
      }
    },
  },
};

var Lazy$1 = {
  loadImagesInSlide: function loadImagesInSlide(index, loadInDuplicate) {
    if ( loadInDuplicate === void 0 ) loadInDuplicate = true;

    var swiper = this;
    var params = swiper.params.lazy;
    if (typeof index === 'undefined') { return; }
    if (swiper.slides.length === 0) { return; }

    var $slideEl = swiper.slides.eq(index);
    var $images = $slideEl.find(("." + (params.elementClass) + ":not(." + (params.loadedClass) + "):not(." + (params.loadingClass) + ")"));
    if ($slideEl.hasClass(params.elementClass) && !$slideEl.hasClass(params.loadedClass) && !$slideEl.hasClass(params.loadingClass)) {
      $images = $images.add($slideEl[0]);
    }
    if ($images.length === 0) { return; }

    $images.each(function (imageIndex, imageEl) {
      var $imageEl = $$1(imageEl);
      $imageEl.addClass(params.loadingClass);

      var background = $imageEl.attr('data-background');
      var src = $imageEl.attr('data-src');
      var srcset = $imageEl.attr('data-srcset');
      var sizes = $imageEl.attr('data-sizes');

      swiper.loadImage($imageEl[0], (src || background), srcset, sizes, false, function () {
        if (typeof swiper === 'undefined' || swiper === null || !swiper || (swiper && !swiper.params)) { return; }
        if (background) {
          $imageEl.css('background-image', ("url(\"" + background + "\")"));
          $imageEl.removeAttr('data-background');
        } else {
          if (srcset) {
            $imageEl.attr('srcset', srcset);
            $imageEl.removeAttr('data-srcset');
          }
          if (sizes) {
            $imageEl.attr('sizes', sizes);
            $imageEl.removeAttr('data-sizes');
          }
          if (src) {
            $imageEl.attr('src', src);
            $imageEl.removeAttr('data-src');
          }
        }

        $imageEl.addClass(params.loadedClass).removeClass(params.loadingClass);
        $slideEl.find(("." + (params.preloaderClass))).remove();
        if (swiper.params.loop && loadInDuplicate) {
          var slideOriginalIndex = $slideEl.attr('data-swiper-slide-index');
          if ($slideEl.hasClass(swiper.params.slideDuplicateClass)) {
            var originalSlide = swiper.$wrapperEl.children(("[data-swiper-slide-index=\"" + slideOriginalIndex + "\"]:not(." + (swiper.params.slideDuplicateClass) + ")"));
            swiper.lazy.loadImagesInSlide(originalSlide.index(), false);
          } else {
            var duplicatedSlide = swiper.$wrapperEl.children(("." + (swiper.params.slideDuplicateClass) + "[data-swiper-slide-index=\"" + slideOriginalIndex + "\"]"));
            swiper.lazy.loadImagesInSlide(duplicatedSlide.index(), false);
          }
        }
        swiper.emit('lazyImageReady', $slideEl[0], $imageEl[0]);
      });

      swiper.emit('lazyImageLoad', $slideEl[0], $imageEl[0]);
    });
  },
  load: function load() {
    var swiper = this;
    var $wrapperEl = swiper.$wrapperEl;
    var swiperParams = swiper.params;
    var slides = swiper.slides;
    var activeIndex = swiper.activeIndex;
    var params = swiperParams.lazy;

    var slidesPerView = swiperParams.slidesPerView;
    if (slidesPerView === 'auto') {
      slidesPerView = 0;
    }

    if (!swiper.lazy.initialImageLoaded) { swiper.lazy.initialImageLoaded = true; }
    if (swiper.params.watchSlidesVisibility) {
      $wrapperEl.children(("." + (swiperParams.slideVisibleClass))).each(function (index, slideEl) {
        swiper.lazy.loadImagesInSlide($$1(slideEl).index());
      });
    } else if (slidesPerView > 1) {
      for (var i = activeIndex; i < activeIndex + slidesPerView; i += 1) {
        if (slides[i]) { swiper.lazy.loadImagesInSlide(i); }
      }
    } else {
      swiper.lazy.loadImagesInSlide(activeIndex);
    }
    if (params.loadPrevNext) {
      if (slidesPerView > 1 || (params.loadPrevNextAmount && params.loadPrevNextAmount > 1)) {
        var amount = params.loadPrevNextAmount;
        var spv = slidesPerView;
        var maxIndex = Math.min(activeIndex + spv + Math.max(amount, spv), slides.length);
        var minIndex = Math.max(activeIndex - Math.max(spv, amount), 0);
        // Next Slides
        for (var i$1 = activeIndex + slidesPerView; i$1 < maxIndex; i$1 += 1) {
          if (slides[i$1]) { swiper.lazy.loadImagesInSlide(i$1); }
        }
        // Prev Slides
        for (var i$2 = minIndex; i$2 < activeIndex; i$2 += 1) {
          if (slides[i$2]) { swiper.lazy.loadImagesInSlide(i$2); }
        }
      } else {
        var nextSlide = $wrapperEl.children(("." + (swiperParams.slideNextClass)));
        if (nextSlide.length > 0) { swiper.lazy.loadImagesInSlide(nextSlide.index()); }

        var prevSlide = $wrapperEl.children(("." + (swiperParams.slidePrevClass)));
        if (prevSlide.length > 0) { swiper.lazy.loadImagesInSlide(prevSlide.index()); }
      }
    }
  },
};

var Lazy$2 = {
  name: 'lazy',
  params: {
    lazy: {
      enabled: false,
      loadPrevNext: false,
      loadPrevNextAmount: 1,
      loadOnTransitionStart: false,

      elementClass: 'swiper-lazy',
      loadingClass: 'swiper-lazy-loading',
      loadedClass: 'swiper-lazy-loaded',
      preloaderClass: 'swiper-lazy-preloader',
    },
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      lazy: {
        initialImageLoaded: false,
        load: Lazy$1.load.bind(swiper),
        loadImagesInSlide: Lazy$1.loadImagesInSlide.bind(swiper),
      },
    });
  },
  on: {
    beforeInit: function beforeInit() {
      var swiper = this;
      if (swiper.params.preloadImages) { swiper.params.preloadImages = false; }
    },
    init: function init() {
      var swiper = this;
      if (swiper.params.lazy.enabled && !swiper.params.loop && swiper.params.initialSlide === 0) {
        swiper.lazy.load();
      }
    },
    scroll: function scroll() {
      var swiper = this;
      if (swiper.params.freeMode && !swiper.params.freeModeSticky) {
        swiper.lazy.load();
      }
    },
    resize: function resize() {
      var swiper = this;
      if (swiper.params.lazy.enabled) {
        swiper.lazy.load();
      }
    },
    transitionStart: function transitionStart() {
      var swiper = this;
      if (swiper.params.lazy.enabled) {
        if (swiper.params.lazy.loadOnTransitionStart || (!swiper.params.lazy.loadOnTransitionStart && !swiper.lazy.initialImageLoaded)) {
          swiper.lazy.load();
        }
      }
    },
    transitionEnd: function transitionEnd() {
      var swiper = this;
      if (swiper.params.lazy.enabled && !swiper.params.lazy.loadOnTransitionStart) {
        swiper.lazy.load();
      }
    },
  },
};

/* eslint no-bitwise: ["error", { "allow": [">>"] }] */
var Controller = {
  LinearSpline: function LinearSpline(x, y) {
    var binarySearch = (function search() {
      var maxIndex;
      var minIndex;
      var guess;
      return function (array, val) {
        minIndex = -1;
        maxIndex = array.length;
        while (maxIndex - minIndex > 1) {
          guess = maxIndex + minIndex >> 1;
          if (array[guess] <= val) {
            minIndex = guess;
          } else {
            maxIndex = guess;
          }
        }
        return maxIndex;
      };
    }());
    this.x = x;
    this.y = y;
    this.lastIndex = x.length - 1;
    // Given an x value (x2), return the expected y2 value:
    // (x1,y1) is the known point before given value,
    // (x3,y3) is the known point after given value.
    var i1;
    var i3;

    this.interpolate = function interpolate(x2) {
      if (!x2) { return 0; }

      // Get the indexes of x1 and x3 (the array indexes before and after given x2):
      i3 = binarySearch(this.x, x2);
      i1 = i3 - 1;

      // We have our indexes i1 & i3, so we can calculate already:
      // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1
      return (((x2 - this.x[i1]) * (this.y[i3] - this.y[i1])) / (this.x[i3] - this.x[i1])) + this.y[i1];
    };
    return this;
  },
  // xxx: for now i will just save one spline function to to
  getInterpolateFunction: function getInterpolateFunction(c) {
    var swiper = this;
    if (!swiper.controller.spline) {
      swiper.controller.spline = swiper.params.loop ?
        new Controller.LinearSpline(swiper.slidesGrid, c.slidesGrid) :
        new Controller.LinearSpline(swiper.snapGrid, c.snapGrid);
    }
  },
  setTranslate: function setTranslate(setTranslate$1, byController) {
    var swiper = this;
    var controlled = swiper.controller.control;
    var multiplier;
    var controlledTranslate;
    function setControlledTranslate(c) {
      // this will create an Interpolate function based on the snapGrids
      // x is the Grid of the scrolled scroller and y will be the controlled scroller
      // it makes sense to create this only once and recall it for the interpolation
      // the function does a lot of value caching for performance
      var translate = c.rtl && c.params.direction === 'horizontal' ? -swiper.translate : swiper.translate;
      if (swiper.params.controller.by === 'slide') {
        swiper.controller.getInterpolateFunction(c);
        // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid
        // but it did not work out
        controlledTranslate = -swiper.controller.spline.interpolate(-translate);
      }

      if (!controlledTranslate || swiper.params.controller.by === 'container') {
        multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());
        controlledTranslate = ((translate - swiper.minTranslate()) * multiplier) + c.minTranslate();
      }

      if (swiper.params.controller.inverse) {
        controlledTranslate = c.maxTranslate() - controlledTranslate;
      }
      c.updateProgress(controlledTranslate);
      c.setTranslate(controlledTranslate, swiper);
      c.updateActiveIndex();
      c.updateSlidesClasses();
      c.updateRealIndex();
    }
    if (Array.isArray(controlled)) {
      for (var i = 0; i < controlled.length; i += 1) {
        if (controlled[i] !== byController && controlled[i] instanceof Swiper$1) {
          setControlledTranslate(controlled[i]);
        }
      }
    } else if (controlled instanceof Swiper$1 && byController !== controlled) {
      setControlledTranslate(controlled);
    }
  },
  setTransition: function setTransition(duration, byController) {
    var swiper = this;
    var controlled = swiper.controller.control;
    var i;
    function setControlledTransition(c) {
      c.setTransition(duration, swiper);
      if (duration !== 0) {
        c.transitionStart();
        c.$wrapperEl.transitionEnd(function () {
          if (!controlled) { return; }
          if (c.params.loop && swiper.params.controller.by === 'slide') {
            c.loopFix();
          }
          c.transitionEnd();
        });
      }
    }
    if (Array.isArray(controlled)) {
      for (i = 0; i < controlled.length; i += 1) {
        if (controlled[i] !== byController && controlled[i] instanceof Swiper$1) {
          setControlledTransition(controlled[i]);
        }
      }
    } else if (controlled instanceof Swiper$1 && byController !== controlled) {
      setControlledTransition(controlled);
    }
  },
};
var Controller$1 = {
  name: 'controller',
  params: {
    controller: {
      control: undefined,
      inverse: false,
      by: 'slide', // or 'container'
    },
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      controller: {
        control: swiper.params.controller.control,
        getInterpolateFunction: Controller.getInterpolateFunction.bind(swiper),
        setTranslate: Controller.setTranslate.bind(swiper),
        setTransition: Controller.setTransition.bind(swiper),
      },
    });
  },
  on: {
    update: function update() {
      var swiper = this;
      if (!swiper.controller.control) { return; }
      if (swiper.controller.spline) {
        swiper.controller.spline = undefined;
        delete swiper.controller.spline;
      }
    },
    resize: function resize() {
      var swiper = this;
      if (!swiper.controller.control) { return; }
      if (swiper.controller.spline) {
        swiper.controller.spline = undefined;
        delete swiper.controller.spline;
      }
    },
    observerUpdate: function observerUpdate() {
      var swiper = this;
      if (!swiper.controller.control) { return; }
      if (swiper.controller.spline) {
        swiper.controller.spline = undefined;
        delete swiper.controller.spline;
      }
    },
    setTranslate: function setTranslate(translate, byController) {
      var swiper = this;
      if (!swiper.controller.control) { return; }
      swiper.controller.setTranslate(translate, byController);
    },
    setTransition: function setTransition(duration, byController) {
      var swiper = this;
      if (!swiper.controller.control) { return; }
      swiper.controller.setTransition(duration, byController);
    },
  },
};

var a11y = {
  makeElFocusable: function makeElFocusable($el) {
    $el.attr('tabIndex', '0');
    return $el;
  },
  addElRole: function addElRole($el, role) {
    $el.attr('role', role);
    return $el;
  },
  addElLabel: function addElLabel($el, label) {
    $el.attr('aria-label', label);
    return $el;
  },
  disableEl: function disableEl($el) {
    $el.attr('aria-disabled', true);
    return $el;
  },
  enableEl: function enableEl($el) {
    $el.attr('aria-disabled', false);
    return $el;
  },
  onEnterKey: function onEnterKey(e) {
    var swiper = this;
    var params = swiper.params.a11y;
    if (e.keyCode !== 13) { return; }
    var $targetEl = $$1(e.target);
    if (swiper.navigation && swiper.navigation.$nextEl && $targetEl.is(swiper.navigation.$nextEl)) {
      if (!(swiper.isEnd && !swiper.params.loop)) {
        swiper.slideNext();
      }
      if (swiper.isEnd) {
        swiper.a11y.notify(params.lastSlideMessage);
      } else {
        swiper.a11y.notify(params.nextSlideMessage);
      }
    }
    if (swiper.navigation && swiper.navigation.$prevEl && $targetEl.is(swiper.navigation.$prevEl)) {
      if (!(swiper.isBeginning && !swiper.params.loop)) {
        swiper.slidePrev();
      }
      if (swiper.isBeginning) {
        swiper.a11y.notify(params.firstSlideMessage);
      } else {
        swiper.a11y.notify(params.prevSlideMessage);
      }
    }
    if (swiper.pagination && $targetEl.is(("." + (swiper.params.pagination.bulletClass)))) {
      $targetEl[0].click();
    }
  },
  notify: function notify(message) {
    var swiper = this;
    var notification = swiper.a11y.liveRegion;
    if (notification.length === 0) { return; }
    notification.html('');
    notification.html(message);
  },
  updateNavigation: function updateNavigation() {
    var swiper = this;

    if (swiper.params.loop) { return; }
    var ref = swiper.navigation;
    var $nextEl = ref.$nextEl;
    var $prevEl = ref.$prevEl;

    if ($prevEl && $prevEl.length > 0) {
      if (swiper.isBeginning) {
        swiper.a11y.disableEl($prevEl);
      } else {
        swiper.a11y.enableEl($prevEl);
      }
    }
    if ($nextEl && $nextEl.length > 0) {
      if (swiper.isEnd) {
        swiper.a11y.disableEl($nextEl);
      } else {
        swiper.a11y.enableEl($nextEl);
      }
    }
  },
  updatePagination: function updatePagination() {
    var swiper = this;
    var params = swiper.params.a11y;
    if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
      swiper.pagination.bullets.each(function (bulletIndex, bulletEl) {
        var $bulletEl = $$1(bulletEl);
        swiper.a11y.makeElFocusable($bulletEl);
        swiper.a11y.addElRole($bulletEl, 'button');
        swiper.a11y.addElLabel($bulletEl, params.paginationBulletMessage.replace(/{{index}}/, $bulletEl.index() + 1));
      });
    }
  },
  init: function init() {
    var swiper = this;

    swiper.$el.append(swiper.a11y.liveRegion);

    // Navigation
    var params = swiper.params.a11y;
    var $nextEl;
    var $prevEl;
    if (swiper.navigation && swiper.navigation.$nextEl) {
      $nextEl = swiper.navigation.$nextEl;
    }
    if (swiper.navigation && swiper.navigation.$prevEl) {
      $prevEl = swiper.navigation.$prevEl;
    }
    if ($nextEl) {
      swiper.a11y.makeElFocusable($nextEl);
      swiper.a11y.addElRole($nextEl, 'button');
      swiper.a11y.addElLabel($nextEl, params.nextSlideMessage);
      $nextEl.on('keydown', swiper.a11y.onEnterKey);
    }
    if ($prevEl) {
      swiper.a11y.makeElFocusable($prevEl);
      swiper.a11y.addElRole($prevEl, 'button');
      swiper.a11y.addElLabel($prevEl, params.prevSlideMessage);
      $prevEl.on('keydown', swiper.a11y.onEnterKey);
    }

    // Pagination
    if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
      swiper.pagination.$el.on('keydown', ("." + (swiper.params.pagination.bulletClass)), swiper.a11y.onEnterKey);
    }
  },
  destroy: function destroy() {
    var swiper = this;
    if (swiper.a11y.liveRegion && swiper.a11y.liveRegion.length > 0) { swiper.a11y.liveRegion.remove(); }

    var $nextEl;
    var $prevEl;
    if (swiper.navigation && swiper.navigation.$nextEl) {
      $nextEl = swiper.navigation.$nextEl;
    }
    if (swiper.navigation && swiper.navigation.$prevEl) {
      $prevEl = swiper.navigation.$prevEl;
    }
    if ($nextEl) {
      $nextEl.off('keydown', swiper.a11y.onEnterKey);
    }
    if ($prevEl) {
      $prevEl.off('keydown', swiper.a11y.onEnterKey);
    }

    // Pagination
    if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
      swiper.pagination.$el.off('keydown', ("." + (swiper.params.pagination.bulletClass)), swiper.a11y.onEnterKey);
    }
  },
};
var A11y = {
  name: 'a11y',
  params: {
    a11y: {
      enabled: false,
      notificationClass: 'swiper-notification',
      prevSlideMessage: 'Previous slide',
      nextSlideMessage: 'Next slide',
      firstSlideMessage: 'This is the first slide',
      lastSlideMessage: 'This is the last slide',
      paginationBulletMessage: 'Go to slide {{index}}',
    },
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      a11y: {
        liveRegion: $$1(("<span class=\"" + (swiper.params.a11y.notificationClass) + "\" aria-live=\"assertive\" aria-atomic=\"true\"></span>")),
      },
    });
    Object.keys(a11y).forEach(function (methodName) {
      swiper.a11y[methodName] = a11y[methodName].bind(swiper);
    });
  },
  on: {
    init: function init() {
      var swiper = this;
      if (!swiper.params.a11y.enabled) { return; }
      swiper.a11y.init();
      swiper.a11y.updateNavigation();
    },
    toEdge: function toEdge() {
      var swiper = this;
      if (!swiper.params.a11y.enabled) { return; }
      swiper.a11y.updateNavigation();
    },
    fromEdge: function fromEdge() {
      var swiper = this;
      if (!swiper.params.a11y.enabled) { return; }
      swiper.a11y.updateNavigation();
    },
    paginationUpdate: function paginationUpdate() {
      var swiper = this;
      if (!swiper.params.a11y.enabled) { return; }
      swiper.a11y.updatePagination();
    },
    destroy: function destroy() {
      var swiper = this;
      if (!swiper.params.a11y.enabled) { return; }
      swiper.a11y.destroy();
    },
  },
};

var Autoplay = {
  run: function run() {
    var swiper = this;
    var $activeSlideEl = swiper.slides.eq(swiper.activeIndex);
    var delay = swiper.params.autoplay.delay;
    if ($activeSlideEl.attr('data-swiper-autoplay')) {
      delay = $activeSlideEl.attr('data-swiper-autoplay') || swiper.params.autoplay.delay;
    }
    swiper.autoplay.timeout = Utils.nextTick(function () {
      if (swiper.params.loop) {
        swiper.loopFix();
        swiper.slideNext(swiper.params.speed, true, true);
        swiper.emit('autoplay');
      } else if (!swiper.isEnd) {
        swiper.slideNext(swiper.params.speed, true, true);
        swiper.emit('autoplay');
      } else if (!swiper.params.autoplay.stopOnLastSlide) {
        swiper.slideTo(0, swiper.params.speed, true, true);
        swiper.emit('autoplay');
      } else {
        swiper.autoplay.stop();
      }
    }, delay);
  },
  start: function start() {
    var swiper = this;
    if (typeof swiper.autoplay.timeout !== 'undefined') { return false; }
    if (swiper.autoplay.running) { return false; }
    swiper.autoplay.running = true;
    swiper.emit('autoplayStart');
    swiper.autoplay.run();
    return true;
  },
  stop: function stop() {
    var swiper = this;
    if (!swiper.autoplay.running) { return false; }
    if (typeof swiper.autoplay.timeout === 'undefined') { return false; }

    if (swiper.autoplay.timeout) {
      clearTimeout(swiper.autoplay.timeout);
      swiper.autoplay.timeout = undefined;
    }
    swiper.autoplay.running = false;
    swiper.emit('autoplayStop');
    return true;
  },
  pause: function pause(speed) {
    var swiper = this;
    if (!swiper.autoplay.running) { return; }
    if (swiper.autoplay.paused) { return; }
    if (swiper.autoplay.timeout) { clearTimeout(swiper.autoplay.timeout); }
    swiper.autoplay.paused = true;
    if (speed === 0) {
      swiper.autoplay.paused = false;
      swiper.autoplay.run();
    } else {
      swiper.$wrapperEl.transitionEnd(function () {
        if (!swiper) { return; }
        swiper.autoplay.paused = false;
        if (!swiper.autoplay.running) {
          swiper.autoplay.stop();
        } else {
          swiper.autoplay.run();
        }
      });
    }
  },
};

var Autoplay$1 = {
  name: 'autoplay',
  params: {
    autoplay: {
      enabled: false,
      delay: 3000,
      disableOnInteraction: true,
      stopOnLastSlide: false,
    },
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      autoplay: {
        running: false,
        paused: false,
        run: Autoplay.run.bind(swiper),
        start: Autoplay.start.bind(swiper),
        stop: Autoplay.stop.bind(swiper),
        pause: Autoplay.pause.bind(swiper),
      },
    });
  },
  on: {
    init: function init() {
      var swiper = this;
      if (swiper.params.autoplay.enabled) {
        swiper.autoplay.start();
      }
    },
    beforeTransitionStart: function beforeTransitionStart(speed, internal) {
      var swiper = this;
      if (swiper.autoplay.running) {
        if (internal || !swiper.params.autoplay.disableOnInteraction) {
          swiper.autoplay.pause(speed);
        } else {
          swiper.autoplay.stop();
        }
      }
    },
    sliderFirstMove: function sliderFirstMove() {
      var swiper = this;
      if (swiper.autoplay.running) {
        if (swiper.params.autoplay.disableOnInteraction) {
          swiper.autoplay.stop();
        } else {
          swiper.autoplay.pause();
        }
      }
    },
    destroy: function destroy() {
      var swiper = this;
      if (swiper.autoplay.running) {
        swiper.autoplay.stop();
      }
    },
  },
};

var Fade = {
  setTranslate: function setTranslate() {
    var swiper = this;
    var slides = swiper.slides;
    for (var i = 0; i < slides.length; i += 1) {
      var $slideEl = swiper.slides.eq(i);
      var offset = $slideEl[0].swiperSlideOffset;
      var tx = -offset;
      if (!swiper.params.virtualTranslate) { tx -= swiper.translate; }
      var ty = 0;
      if (!swiper.isHorizontal()) {
        ty = tx;
        tx = 0;
      }
      var slideOpacity = swiper.params.fadeEffect.crossFade ?
        Math.max(1 - Math.abs($slideEl[0].progress), 0) :
        1 + Math.min(Math.max($slideEl[0].progress, -1), 0);
      $slideEl
        .css({
          opacity: slideOpacity,
        })
        .transform(("translate3d(" + tx + "px, " + ty + "px, 0px)"));
    }
  },
  setTransition: function setTransition(duration) {
    var swiper = this;
    var slides = swiper.slides;
    var $wrapperEl = swiper.$wrapperEl;
    slides.transition(duration);
    if (swiper.params.virtualTranslate && duration !== 0) {
      var eventTriggered = false;
      slides.transitionEnd(function () {
        if (eventTriggered) { return; }
        if (!swiper) { return; }
        eventTriggered = true;
        swiper.animating = false;
        var triggerEvents = ['webkitTransitionEnd', 'transitionend', 'oTransitionEnd', 'MSTransitionEnd', 'msTransitionEnd'];
        for (var i = 0; i < triggerEvents.length; i += 1) {
          $wrapperEl.trigger(triggerEvents[i]);
        }
      });
    }
  },
};

var EffectFade = {
  name: 'effect-fade',
  params: {
    fadeEffect: {
      crossFade: false,
    },
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      fadeEffect: {
        setTranslate: Fade.setTranslate.bind(swiper),
        setTransition: Fade.setTransition.bind(swiper),
      },
    });
  },
  on: {
    beforeInit: function beforeInit() {
      var swiper = this;
      if (swiper.params.effect !== 'fade') { return; }
      swiper.classNames.push(((swiper.params.containerModifierClass) + "fade"));
      Utils.extend(swiper.params, {
        slidesPerView: 1,
        slidesPerColumn: 1,
        slidesPerGroup: 1,
        watchSlidesProgress: true,
        spaceBetween: 0,
      });
      if (typeof swiper.passedParams.virtualTranslate === 'undefined') {
        swiper.params.virtualTranslate = true;
      }
    },
    setTranslate: function setTranslate() {
      var swiper = this;
      if (swiper.params.effect !== 'fade') { return; }
      swiper.fadeEffect.setTranslate();
    },
    setTransition: function setTransition(duration) {
      var swiper = this;
      if (swiper.params.effect !== 'fade') { return; }
      swiper.fadeEffect.setTransition(duration);
    },
  },
};

var Cube = {
  setTranslate: function setTranslate() {
    var swiper = this;
    var $el = swiper.$el;
    var $wrapperEl = swiper.$wrapperEl;
    var slides = swiper.slides;
    var swiperWidth = swiper.width;
    var swiperHeight = swiper.height;
    var rtl = swiper.rtl;
    var swiperSize = swiper.size;
    var params = swiper.params.cubeEffect;
    var isHorizontal = swiper.isHorizontal();
    var wrapperRotate = 0;
    var $cubeShadowEl;
    if (params.shadow) {
      if (isHorizontal) {
        $cubeShadowEl = $wrapperEl.find('.swiper-cube-shadow');
        if ($cubeShadowEl.length === 0) {
          $cubeShadowEl = $$1('<div class="swiper-cube-shadow"></div>');
          $wrapperEl.append($cubeShadowEl);
        }
        $cubeShadowEl.css({ height: (swiperWidth + "px") });
      } else {
        $cubeShadowEl = $el.find('.swiper-cube-shadow');
        if ($cubeShadowEl.length === 0) {
          $cubeShadowEl = $$1('<div class="swiper-cube-shadow"></div>');
          $el.append($cubeShadowEl);
        }
      }
    }
    for (var i = 0; i < slides.length; i += 1) {
      var $slideEl = slides.eq(i);
      var slideAngle = i * 90;
      var round = Math.floor(slideAngle / 360);
      if (rtl) {
        slideAngle = -slideAngle;
        round = Math.floor(-slideAngle / 360);
      }
      var progress = Math.max(Math.min($slideEl[0].progress, 1), -1);
      var tx = 0;
      var ty = 0;
      var tz = 0;
      if (i % 4 === 0) {
        tx = -round * 4 * swiperSize;
        tz = 0;
      } else if ((i - 1) % 4 === 0) {
        tx = 0;
        tz = -round * 4 * swiperSize;
      } else if ((i - 2) % 4 === 0) {
        tx = swiperSize + (round * 4 * swiperSize);
        tz = swiperSize;
      } else if ((i - 3) % 4 === 0) {
        tx = -swiperSize;
        tz = (3 * swiperSize) + (swiperSize * 4 * round);
      }
      if (rtl) {
        tx = -tx;
      }

      if (!isHorizontal) {
        ty = tx;
        tx = 0;
      }

      var transform = "rotateX(" + (isHorizontal ? 0 : -slideAngle) + "deg) rotateY(" + (isHorizontal ? slideAngle : 0) + "deg) translate3d(" + tx + "px, " + ty + "px, " + tz + "px)";
      if (progress <= 1 && progress > -1) {
        wrapperRotate = (i * 90) + (progress * 90);
        if (rtl) { wrapperRotate = (-i * 90) - (progress * 90); }
      }
      $slideEl.transform(transform);
      if (params.slideShadows) {
        // Set shadows
        var shadowBefore = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
        var shadowAfter = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');
        if (shadowBefore.length === 0) {
          shadowBefore = $$1(("<div class=\"swiper-slide-shadow-" + (isHorizontal ? 'left' : 'top') + "\"></div>"));
          $slideEl.append(shadowBefore);
        }
        if (shadowAfter.length === 0) {
          shadowAfter = $$1(("<div class=\"swiper-slide-shadow-" + (isHorizontal ? 'right' : 'bottom') + "\"></div>"));
          $slideEl.append(shadowAfter);
        }
        if (shadowBefore.length) { shadowBefore[0].style.opacity = Math.max(-progress, 0); }
        if (shadowAfter.length) { shadowAfter[0].style.opacity = Math.max(progress, 0); }
      }
    }
    $wrapperEl.css({
      '-webkit-transform-origin': ("50% 50% -" + (swiperSize / 2) + "px"),
      '-moz-transform-origin': ("50% 50% -" + (swiperSize / 2) + "px"),
      '-ms-transform-origin': ("50% 50% -" + (swiperSize / 2) + "px"),
      'transform-origin': ("50% 50% -" + (swiperSize / 2) + "px"),
    });

    if (params.shadow) {
      if (isHorizontal) {
        $cubeShadowEl.transform(("translate3d(0px, " + ((swiperWidth / 2) + params.shadowOffset) + "px, " + (-swiperWidth / 2) + "px) rotateX(90deg) rotateZ(0deg) scale(" + (params.shadowScale) + ")"));
      } else {
        var shadowAngle = Math.abs(wrapperRotate) - (Math.floor(Math.abs(wrapperRotate) / 90) * 90);
        var multiplier = 1.5 - (
          (Math.sin((shadowAngle * 2 * Math.PI) / 360) / 2) +
          (Math.cos((shadowAngle * 2 * Math.PI) / 360) / 2)
        );
        var scale1 = params.shadowScale;
        var scale2 = params.shadowScale / multiplier;
        var offset = params.shadowOffset;
        $cubeShadowEl.transform(("scale3d(" + scale1 + ", 1, " + scale2 + ") translate3d(0px, " + ((swiperHeight / 2) + offset) + "px, " + (-swiperHeight / 2 / scale2) + "px) rotateX(-90deg)"));
      }
    }
    var zFactor = (Browser$1.isSafari || Browser$1.isUiWebView) ? (-swiperSize / 2) : 0;
    $wrapperEl
      .transform(("translate3d(0px,0," + zFactor + "px) rotateX(" + (swiper.isHorizontal() ? 0 : wrapperRotate) + "deg) rotateY(" + (swiper.isHorizontal() ? -wrapperRotate : 0) + "deg)"));
  },
  setTransition: function setTransition(duration) {
    var swiper = this;
    var $el = swiper.$el;
    var slides = swiper.slides;
    slides
      .transition(duration)
      .find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left')
      .transition(duration);
    if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {
      $el.find('.swiper-cube-shadow').transition(duration);
    }
  },
};

var EffectCube = {
  name: 'effect-cube',
  params: {
    cubeEffect: {
      slideShadows: true,
      shadow: true,
      shadowOffset: 20,
      shadowScale: 0.94,
    },
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      cubeEffect: {
        setTranslate: Cube.setTranslate.bind(swiper),
        setTransition: Cube.setTransition.bind(swiper),
      },
    });
  },
  on: {
    beforeInit: function beforeInit() {
      var swiper = this;
      if (swiper.params.effect !== 'cube') { return; }
      swiper.classNames.push(((swiper.params.containerModifierClass) + "cube"));
      swiper.classNames.push(((swiper.params.containerModifierClass) + "3d"));
      Utils.extend(swiper.params, {
        slidesPerView: 1,
        slidesPerColumn: 1,
        slidesPerGroup: 1,
        watchSlidesProgress: true,
        resistanceRatio: 0,
        spaceBetween: 0,
        centeredSlides: false,
        virtualTranslate: true,
      });
    },
    setTranslate: function setTranslate() {
      var swiper = this;
      if (swiper.params.effect !== 'cube') { return; }
      swiper.cubeEffect.setTranslate();
    },
    setTransition: function setTransition(duration) {
      var swiper = this;
      if (swiper.params.effect !== 'cube') { return; }
      swiper.cubeEffect.setTransition(duration);
    },
  },
};

var Flip = {
  setTranslate: function setTranslate() {
    var swiper = this;
    var slides = swiper.slides;
    for (var i = 0; i < slides.length; i += 1) {
      var $slideEl = slides.eq(i);
      var progress = $slideEl[0].progress;
      if (swiper.params.flipEffect.limitRotation) {
        progress = Math.max(Math.min($slideEl[0].progress, 1), -1);
      }
      var offset = $slideEl[0].swiperSlideOffset;
      var rotate = -180 * progress;
      var rotateY = rotate;
      var rotateX = 0;
      var tx = -offset;
      var ty = 0;
      if (!swiper.isHorizontal()) {
        ty = tx;
        tx = 0;
        rotateX = -rotateY;
        rotateY = 0;
      } else if (swiper.rtl) {
        rotateY = -rotateY;
      }

      $slideEl[0].style.zIndex = -Math.abs(Math.round(progress)) + slides.length;

      if (swiper.params.flipEffect.slideShadows) {
        // Set shadows
        var shadowBefore = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
        var shadowAfter = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');
        if (shadowBefore.length === 0) {
          shadowBefore = $$1(("<div class=\"swiper-slide-shadow-" + (swiper.isHorizontal() ? 'left' : 'top') + "\"></div>"));
          $slideEl.append(shadowBefore);
        }
        if (shadowAfter.length === 0) {
          shadowAfter = $$1(("<div class=\"swiper-slide-shadow-" + (swiper.isHorizontal() ? 'right' : 'bottom') + "\"></div>"));
          $slideEl.append(shadowAfter);
        }
        if (shadowBefore.length) { shadowBefore[0].style.opacity = Math.max(-progress, 0); }
        if (shadowAfter.length) { shadowAfter[0].style.opacity = Math.max(progress, 0); }
      }

      $slideEl
        .transform(("translate3d(" + tx + "px, " + ty + "px, 0px) rotateX(" + rotateX + "deg) rotateY(" + rotateY + "deg)"));
    }
  },
  setTransition: function setTransition(duration) {
    var swiper = this;
    var slides = swiper.slides;
    var activeIndex = swiper.activeIndex;
    var $wrapperEl = swiper.$wrapperEl;
    slides
      .transition(duration)
      .find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left')
      .transition(duration);
    if (swiper.params.virtualTranslate && duration !== 0) {
      var eventTriggered = false;
      slides.eq(activeIndex).transitionEnd(function onTransitionEnd() {
        if (eventTriggered) { return; }
        if (!swiper) { return; }
        if (!$$1(this).hasClass(swiper.params.slideActiveClass)) { return; }
        eventTriggered = true;
        swiper.animating = false;
        var triggerEvents = ['webkitTransitionEnd', 'transitionend', 'oTransitionEnd', 'MSTransitionEnd', 'msTransitionEnd'];
        for (var i = 0; i < triggerEvents.length; i += 1) {
          $wrapperEl.trigger(triggerEvents[i]);
        }
      });
    }
  },
};

var EffectFlip = {
  name: 'effect-flip',
  params: {
    flipEffect: {
      slideShadows: true,
      limitRotation: true,
    },
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      flipEffect: {
        setTranslate: Flip.setTranslate.bind(swiper),
        setTransition: Flip.setTransition.bind(swiper),
      },
    });
  },
  on: {
    beforeInit: function beforeInit() {
      var swiper = this;
      if (swiper.params.effect !== 'flip') { return; }
      swiper.classNames.push(((swiper.params.containerModifierClass) + "flip"));
      swiper.classNames.push(((swiper.params.containerModifierClass) + "3d"));
      Utils.extend(swiper.params, {
        slidesPerView: 1,
        slidesPerColumn: 1,
        slidesPerGroup: 1,
        watchSlidesProgress: true,
        spaceBetween: 0,
      });
      if (typeof swiper.passedParams.virtualTranslate === 'undefined') {
        swiper.params.virtualTranslate = true;
      }
    },
    setTranslate: function setTranslate() {
      var swiper = this;
      if (swiper.params.effect !== 'flip') { return; }
      swiper.flipEffect.setTranslate();
    },
    setTransition: function setTransition(duration) {
      var swiper = this;
      if (swiper.params.effect !== 'flip') { return; }
      swiper.flipEffect.setTransition(duration);
    },
  },
};

var Coverflow = {
  setTranslate: function setTranslate() {
    var swiper = this;
    var swiperWidth = swiper.width;
    var swiperHeight = swiper.height;
    var slides = swiper.slides;
    var $wrapperEl = swiper.$wrapperEl;
    var slidesSizesGrid = swiper.slidesSizesGrid;
    var params = swiper.params.coverflowEffect;
    var isHorizontal = swiper.isHorizontal();
    var transform = swiper.translate;
    var center = isHorizontal ? -transform + (swiperWidth / 2) : -transform + (swiperHeight / 2);
    var rotate = isHorizontal ? params.rotate : -params.rotate;
    var translate = params.depth;
    // Each slide offset from center
    for (var i = 0, length = slides.length; i < length; i += 1) {
      var $slideEl = slides.eq(i);
      var slideSize = slidesSizesGrid[i];
      var slideOffset = $slideEl[0].swiperSlideOffset;
      var offsetMultiplier = ((center - slideOffset - (slideSize / 2)) / slideSize) * params.modifier;

      var rotateY = isHorizontal ? rotate * offsetMultiplier : 0;
      var rotateX = isHorizontal ? 0 : rotate * offsetMultiplier;
      // var rotateZ = 0
      var translateZ = -translate * Math.abs(offsetMultiplier);

      var translateY = isHorizontal ? 0 : params.stretch * (offsetMultiplier);
      var translateX = isHorizontal ? params.stretch * (offsetMultiplier) : 0;

      // Fix for ultra small values
      if (Math.abs(translateX) < 0.001) { translateX = 0; }
      if (Math.abs(translateY) < 0.001) { translateY = 0; }
      if (Math.abs(translateZ) < 0.001) { translateZ = 0; }
      if (Math.abs(rotateY) < 0.001) { rotateY = 0; }
      if (Math.abs(rotateX) < 0.001) { rotateX = 0; }

      var slideTransform = "translate3d(" + translateX + "px," + translateY + "px," + translateZ + "px)  rotateX(" + rotateX + "deg) rotateY(" + rotateY + "deg)";

      $slideEl.transform(slideTransform);
      $slideEl[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;
      if (params.slideShadows) {
        // Set shadows
        var $shadowBeforeEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
        var $shadowAfterEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');
        if ($shadowBeforeEl.length === 0) {
          $shadowBeforeEl = $$1(("<div class=\"swiper-slide-shadow-" + (isHorizontal ? 'left' : 'top') + "\"></div>"));
          $slideEl.append($shadowBeforeEl);
        }
        if ($shadowAfterEl.length === 0) {
          $shadowAfterEl = $$1(("<div class=\"swiper-slide-shadow-" + (isHorizontal ? 'right' : 'bottom') + "\"></div>"));
          $slideEl.append($shadowAfterEl);
        }
        if ($shadowBeforeEl.length) { $shadowBeforeEl[0].style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0; }
        if ($shadowAfterEl.length) { $shadowAfterEl[0].style.opacity = (-offsetMultiplier) > 0 ? -offsetMultiplier : 0; }
      }
    }

    // Set correct perspective for IE10
    if (Browser$1.ie) {
      var ws = $wrapperEl[0].style;
      ws.perspectiveOrigin = center + "px 50%";
    }
  },
  setTransition: function setTransition(duration) {
    var swiper = this;
    swiper.slides
      .transition(duration)
      .find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left')
      .transition(duration);
  },
};

var EffectCoverflow = {
  name: 'effect-coverflow',
  params: {
    coverflowEffect: {
      rotate: 50,
      stretch: 0,
      depth: 100,
      modifier: 1,
      slideShadows: true,
    },
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      coverflowEffect: {
        setTranslate: Coverflow.setTranslate.bind(swiper),
        setTransition: Coverflow.setTransition.bind(swiper),
      },
    });
  },
  on: {
    beforeInit: function beforeInit() {
      var swiper = this;
      if (swiper.params.effect !== 'coverflow') { return; }

      swiper.classNames.push(((swiper.params.containerModifierClass) + "coverflow"));
      swiper.classNames.push(((swiper.params.containerModifierClass) + "3d"));

      swiper.params.watchSlidesProgress = true;
    },
    setTranslate: function setTranslate() {
      var swiper = this;
      if (swiper.params.effect !== 'coverflow') { return; }
      swiper.coverflowEffect.setTranslate();
    },
    setTransition: function setTransition(duration) {
      var swiper = this;
      if (swiper.params.effect !== 'coverflow') { return; }
      swiper.coverflowEffect.setTransition(duration);
    },
  },
};

// Swiper Class
// Core Modules
// Components
Swiper$1
  .use(Device$4)
  .use(Support$5)
  .use(Browser$2)
  .use(Resize$1)
  .use(Observer$1$1)
  // Components
  .use(Navigation$1)
  .use(Pagination$1)
  .use(Scrollbar$1)
  .use(Parallax$1)
  .use(Zoom$1)
  .use(Lazy$2)
  .use(Controller$1)
  .use(A11y)
  .use(Autoplay$1)
  .use(EffectFade)
  .use(EffectCube)
  .use(EffectFlip)
  .use(EffectCoverflow);

if (!window.Swiper) {
  window.Swiper = Swiper$1;
}

// F7 Class
// Import Core Modules
// Core Components
// Template7
if (typeof t7 !== 'undefined') {
  Framework7.prototype.t7 = t7;
  if (!window.Template7) { window.Template7 = t7; }
}

// Dom7
if (typeof $$1 !== 'undefined') {
  Framework7.prototype.$ = $$1;
  if (!window.Dom7) { window.Dom7 = $$1; }
}

// Install Modules & Components
Framework7
  // Core Modules
  .use(Utils$2)
  .use(Storage$1)
  .use(Support)
  .use(Device$2)
  .use(Resize)
  .use(Touch)
  .use(Router)
  .use(History$2)
  .use(Clicks)
  // Core Components
  .use(Statusbar$1)
  .use(View$2)
  .use(Navbar$1)
  .use(Toolbar$1)
  .use(Subnavbar)
  .use(TouchRipple);

var Utils$2$1 = {
  isObject: function isObject(o) {
    return typeof o === 'object' && o !== null && o.constructor && o.constructor === Object;
  },
  now: function now() {
    return Date.now();
  },
  extend: function extend() {
    var args = [], len$1 = arguments.length;
    while ( len$1-- ) args[ len$1 ] = arguments[ len$1 ];

    var deep = true;
    var to;
    var from;
    if (typeof args[0] === 'boolean') {
      var assign;
      (assign = args, deep = assign[0], to = assign[1]);
      args.splice(0, 2);
      from = args;
    } else {
      var assign$1;
      (assign$1 = args, to = assign$1[0]);
      args.splice(0, 1);
      from = args;
    }
    for (var i = 0; i < from.length; i += 1) {
      var nextSource = args[i];
      if (nextSource !== undefined && nextSource !== null) {
        var keysArray = Object.keys(Object(nextSource));
        for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
          var nextKey = keysArray[nextIndex];
          var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
          if (desc !== undefined && desc.enumerable) {
            if (!deep) {
              to[nextKey] = nextSource[nextKey];
            } else if (Utils$2$1.isObject(to[nextKey]) && Utils$2$1.isObject(nextSource[nextKey])) {
              Utils$2$1.extend(to[nextKey], nextSource[nextKey]);
            } else if (!Utils$2$1.isObject(to[nextKey]) && Utils$2$1.isObject(nextSource[nextKey])) {
              to[nextKey] = {};
              Utils$2$1.extend(to[nextKey], nextSource[nextKey]);
            } else {
              to[nextKey] = nextSource[nextKey];
            }
          }
        }
      }
    }
    return to;
  },
};

/* eslint no-underscore-dangle: "off" */
var VueRouter = {
  proto: {
    pageComponentLoader: function pageComponentLoader(routerEl, component, componentUrl, options, resolve, reject) {
      var router = this;
      var el = router.$el[0];
      var vueRouter = el.__vue__;
      if (!vueRouter || !vueRouter.pages) {
        reject();
      }
      var id = Utils$2$1.now();
      var pageData = {
        component: component,
        id: id,
        params: Utils$2$1.extend({}, options.route.params),
        route: Utils$2$1.extend({}, options.route),
      };
      vueRouter.$route = options.route;
      vueRouter.pages.push(pageData);
      vueRouter.$nextTick(function () {
        var pageEl = el.childNodes[el.childNodes.length - 1];
        pageData.el = pageEl;
        resolve(pageEl);
      });
    },
    removePage: function removePage($pageEl) {
      if (!$pageEl) { return; }
      var router = this;
      var vueRouter = router.$el[0].__vue__;

      var pageEl;
      if ('length' in $pageEl) {
        // Dom7
        if ($pageEl.length === 0) { return; }
        pageEl = $pageEl[0];
      } else {
        pageEl = $pageEl;
      }

      if ($pageEl.length === 0) { return; }

      vueRouter.pages.forEach(function (page, index) {
        if (page.el === pageEl) {
          vueRouter.pages.splice(index, 1);
        }
      });
    },
  },
};

/* eslint no-param-reassign: "off" */
var Framework7Vue = {
  install: function install(Vue) {
    // Event Hub
    var eventHub = new Vue();

    // Flags
    var f7Ready = false;
    var f7Instance;

    // Define protos
    var $theme = { ios: false, md: false };
    Vue.prototype.$f7 = undefined;
    Vue.prototype.$theme = $theme;

    // Init F7
    function initFramework7(rootEl, params, routes) {
      if ( params === void 0 ) params = {};

      var f7Params = Utils$2$1.extend({}, params, { root: rootEl });
      if (routes && routes.length && !f7Params.routes) { f7Params.routes = routes; }

      f7Instance = new Framework7(f7Params);
      Vue.prototype.$f7 = f7Instance;
      $theme.ios = f7Instance.theme === 'ios';
      $theme.md = f7Instance.theme === 'md';
      f7Ready = true;
      eventHub.$emit('f7init', f7Instance);
    }

    // Extend Router
    Framework7.Router.use(VueRouter);

    // Mixin
    Vue.mixin({
      beforeCreate: function beforeCreate() {
        var self = this;
        if (self === self.$root) {
          var ref = (self.$options.framework7 || {});
          var theme = ref.theme;
          if (theme === 'md') { $theme.md = true; }
          if (theme === 'ios') { $theme.ios = true; }
          if (!theme || theme === 'auto') {
            $theme.ios = !!(Framework7.Device || Framework7.device).ios;
            $theme.md = !(Framework7.Device || Framework7.device).ios;
          }
        }

        var $route;
        var $router;
        var parent = self;
        while (parent && !$router && !$route) {
          if (parent.$route) { $route = parent.$route; }
          if (parent.$router) { $router = parent.$router; }
          else if (parent.f7View) {
            $router = parent.f7View.router;
          }
          parent = parent.$parent;
        }

        self.$route = $route;
        self.$router = $router;
      },
      mounted: function mounted() {
        var self = this;
        if (self === self.$root) {
          initFramework7(self.$root.$el, self.$options.framework7, self.$options.routes);
        }
        if (!self.onF7Init) { return; }
        if (f7Ready) { self.onF7Init(f7Instance); }
        else {
          eventHub.$on('f7init', function (f7) {
            self.onF7Init(f7);
          });
        }
      },
    });
  },
};

var f7View = {
    render: function render(c) {
      var self = this;
      var pages = self.pages.map(function (page) {
        return c(page.component, {
          tag: 'component',
          props: page.params ? page.params || {} : {},
          key: page.id,
        });
      });
      return c('div',
        {
          staticClass: 'view',
          ref: 'view',
          class: self.classesObject,
        },
        [
          self.$slots.default,
          pages
        ]
      );
    },
    beforeDestroy: function () {
      var self = this;
      if (self.f7View && self.f7View.destroy) { self.f7View.destroy(); }
    },
    props: {
      'main': Boolean,
      'tab': Boolean,
      'tab-active': Boolean,

      url: String,
      main: Boolean,
      stackPages: String,
      xhrCache: String,
      xhrCacheIgnore: Array,
      xhrCacheIgnoreGetParameters: Boolean,
      xhrCacheDuration: Number,
      preloadPreviousPage: Boolean,
      uniqueHistory: Boolean,
      uniqueHistoryIgnoreGetParameters: Boolean,
      allowDuplicateUrls: Boolean,
      reloadPages: Boolean,
      removeElements: Boolean,
      removeElementsWithTimeout: Boolean,
      removeElementsTimeout: Number,
      restoreScrollTopOnBack: Boolean,
      // Swipe Back
      iosSwipeBack: Boolean,
      iosSwipeBackAnimateShadow: Boolean,
      iosSwipeBackAnimateOpacity: Boolean,
      iosSwipeBackActiveArea: Number,
      iosSwipeBackThreshold: Number,
      // Push State
      pushState: Boolean,
      pushStateRoot: String,
      pushStateAnimate: Boolean,
      pushStateAnimateOnLoad: Boolean,
      pushStateSeparator: String,
      pushStateOnLoad: Boolean,
      // Animate Pages
      animate: Boolean,
      animateWithJS: Boolean,
      // iOS Dynamic Navbar
      iosDynamicNavbar: Boolean,
      iosSeparateDynamicNavbar: Boolean,
      // Animate iOS Navbar Back Icon
      iosAnimateNavbarBackIcon: Boolean,
      // MD Theme delay
      materialPageLoadDelay: Number,

      init: {
        type: Boolean,
        default: true
      },

      'color-theme': String,
    },
    data: function data() {
      return {
        pages: [],
      };
    },
    computed: {
      classesObject: function () {
        var co = {
          'view-main': this.main,
          'tab-active': this.tabActive,
          'tab': this.tab,
        };
        if (this.colorTheme) { co['color-theme-' + this.colorTheme] = true; }
        if (this.layout) { co['layout-' + this.layout] = true; }
        return co;
      },
    },
    methods: {
      onF7Init: function (f7) {
        var self = this;
        if (!self.init) { return; }

        // Init View
        self.f7View = f7.views.create(self.$el, self.$options.propsData);
      },
      onSwipeBackMove: function (event) {
        this.$emit('swipeback:move', event, event.detail);
      },
      onSwipeBackBeforeChange: function (event) {
        this.$emit('swipeback:beforechange', event, event.detail);
      },
      onSwipeBackAfterChange: function (event) {
        this.$emit('swipeback:afterchange', event, event.detail);
      },
      onSwipeBackBeforeReset: function (event) {
        this.$emit('swipeback:beforereset', event, event.detail);
      },
      onSwipeBackAfterReset: function (event) {
        this.$emit('swipeback:afterreset', event, event.detail);
      },
      onTabShow: function (e) {
        this.$emit('tab:show', e);
      },
      onTabHide: function (e) {
        this.$emit('tab:hide', e);
      }
    }
  };

var f7Page = {
    render: function (c) {
      var pageEl, pageContentEl, ptrEl, infiniteEl, fixedList = [], staticList = [];
      var self = this;

      if (self.pullToRefresh && (self.ptrLayer && self.pullToRefreshLayer)) {
        ptrEl = c('div', {class: {'pull-to-refresh-layer': true}} ,[
          c('div', {class: {'preloader': true}}),
          c('div', {class: {'pull-to-refresh-arrow': true}})
        ]);
      }
      if ((self.infiniteScroll || self.infiniteScroll === '') && self.infiniteScrollPreloader) {
        infiniteEl = c('div', {class: {'infinite-scroll-preloader': true}} ,[
          c('div', {class: {'preloader': true}})
        ]);
      }

      var fixedTags = ('navbar toolbar tabbar subnavbar searchbar messagebar fab speed-dial floating-button').split(' ');

      var tag, child, withSubnavbar, withMessages, withSearchbar;

      var i, j;
      if (self.$slots.default) {
        for (i = 0; i < self.$slots.default.length; i++) {
          child = self.$slots.default[i];
          tag = child.tag;
          if (!tag) {
            staticList.push(child);
            continue;
          }
          var isFixed = false;
          if (tag.indexOf('messages') >= 0) { withMessages = true; }
          if (tag.indexOf('subnavbar') >= 0) { withSubnavbar = true; }
          if (tag.indexOf('searchbar') >= 0) { withSearchbar = true; }
          for (j = 0; j < fixedTags.length; j++) {
            if (tag.indexOf(fixedTags[j]) >= 0) {
              isFixed = true;
            }
          }
          if (isFixed) { fixedList.push(child); }
          else { staticList.push(child); }
        }
      }

      if (fixedList.length > 0 && withSearchbar) {
        fixedList.push(c('div', {class:{'searchbar-overlay': true}}));
      }
      if (withMessages) { self.classesObjectPageContent['messages-content'] = true; }
      if (!self.noPageContent) {
        pageContentEl = c('div', {
          staticClass: 'page-content',
          class: self.classesObjectPageContent,
          attrs: {
            'data-ptr-distance': self.pullToRefreshDistance || self.ptrDistance,
            'data-distance': self.infiniteScrollDistance
          },
          on: {
            'ptr:pullstart': self.onPtrPullstart,
            'ptr:pullmove': self.onPtrPullmove,
            'ptr:pullend': self.onPtrPullend,
            'ptr:refresh': self.onPtrRefresh,
            'ptr:done': self.onPtrRefreshdone,
            'infinite': self.onInfinite
          },
        }, (self.infiniteScroll === 'top' ? [ptrEl, infiniteEl, self.$slots.static, staticList] : [ptrEl, self.$slots.static, staticList, infiniteEl]));
      }
      else {
        pageContentEl = [];
        if (self.$slots.default && fixedList.length > 0) {
          for (i = 0; i < self.$slots.default.length; i++) {
            if (fixedList.indexOf(self.$slots.default[i]) < 0) {
              pageContentEl.push(self.$slots.default[i]);
            }
          }
        }
        else {
          pageContentEl = [self.$slots.default];
        }
      }
      fixedList.push(self.$slots.fixed);

      if (withSubnavbar) { self.classesObjectPage['with-subnavbar'] = true; }
      pageEl = c('div', {
        staticClass: 'page',
        class: self.classesObjectPage,
        attrs: {
          'data-page': self.name
        },
        on: {
          'page:beforeinit': self.onPageBeforeInit,
          'page:init': self.onPageInit,
          'page:reinit': self.onPageReinit,
          'page:beforeanimation': self.onPageBeforeAnimation,
          'page:afteranimation': self.onPageAfterAnimation,
          'page:beforeremove': self.onPageBeforeRemove,
          'page:back': self.onPageBack,
          'page:afterback': self.onPageAfterBack
        }
      }, [fixedList, pageContentEl]);

      return pageEl;

    },
    props: {
      'name': String,
      'cached': Boolean,
      'navbar-fixed': Boolean,
      'navbar-through': Boolean,
      'toolbar-fixed': Boolean,
      'toolbar-through': Boolean,
      'tabbar-fixed': Boolean,
      'tabbar-through': Boolean,
      'tabbar-labels-fixed': Boolean,
      'tabbar-labels-through': Boolean,
      'with-subnavbar': Boolean,
      'subnavbar': Boolean,
      'no-navbar': Boolean,
      'no-toolbar': Boolean,
      'no-tabbar': Boolean,
      'pull-to-refresh': Boolean,
      'pull-to-refresh-distance': Number,
      'ptr-distance': Number,
      'pull-to-refresh-layer': {
        type: Boolean,
        default: true
      },
      'ptr-layer': {
        type: Boolean,
        default: true
      },
      'infinite-scroll': [Boolean, String],
      'infinite-scroll-distance': Number,
      'infinite-scroll-preloader': {
        type: Boolean,
        default: true
      },
      'hide-bars-on-scroll': Boolean,
      'hide-navbar-on-scroll': Boolean,
      'hide-toolbar-on-scroll': Boolean,
      'hide-tabbar-on-scroll': Boolean,
      'messages': Boolean,
      'tabs': Boolean,
      'no-page-content': Boolean,
      'login-screen': Boolean,
      'theme': String,
      'layout': String,
      'no-swipeback': Boolean
    },
    computed: {
      classesObjectPage: function () {
        var co = {
          'cached': this.cached,
          'navbar-fixed': this.navbarFixed || this.navbarThrough && this.$theme.material,
          'navbar-through': this.navbarThrough,
          'toolbar-fixed': this.toolbarFixed,
          'toolbar-through': this.toolbarThrough,
          'tabbar-fixed': this.tabbarFixed,
          'tabbar-through': this.tabbarThrough,
          'tabbar-labels-fixed': this.tabbarLabelsFixed,
          'tabbar-labels-through': this.tabbarLabelsThrough,
          'with-subnavbar': this.subnavbar || this.withSubnavbar,
          'no-navbar': this.noNavbar,
          'no-toolbar': this.noToolbar,
          'no-tabbar': this.noTabbar,
          'tabs': this.tabs,
          'no-swipeback': this.noSwipeback
        };
        if (this.theme) { co['theme-' + this.theme] = true; }
        if (this.layout) { co['layout-' + this.layout] = true; }
        return co;
      },
      classesObjectPageContent: function () {
        return {
          'pull-to-refresh-content': this.pullToRefresh,
          'infinite-scroll': this.infiniteScroll || this.infiniteScroll === '',
          'infinite-scroll-top': this.infiniteScroll === 'top',
          'hide-bars-on-scroll': this.hideBarsOnScroll,
          'hide-navbar-on-scroll': this.hideNavbarOnScroll,
          'hide-toolbar-on-scroll': this.hideToolbarOnScroll,
          'hide-tabbar-on-scroll': this.hideTabbarOnScroll,
          'messages-content': this.messages,
          'login-screen-content': this.loginScreen
        }
      }
    },
    methods: {
      onPtrPullstart: function (event) {
        this.$emit('ptr:pullstart', event);
      },
      onPtrPullmove: function (event) {
        this.$emit('ptr:pullmove', event);
      },
      onPtrPullend: function (event) {
        this.$emit('ptr:pullend', event);
      },
      onPtrRefresh: function (event) {
        this.$emit('ptr:refresh', event, event.detail.done);
      },
      onPtrRefreshdone: function (event) {
        this.$emit('ptr:done', event);
      },
      onInfinite: function (event) {
        this.$emit('infinite', event);
      },
      onPageBeforeInit: function (event) {
        this.f7PageData = event.detail.page;
        this.$emit('page:beforeinit', event, event.detail.page);
      },
      onPageInit: function (event) {
        this.$emit('page:init', event, event.detail.page);
      },
      onPageReinit: function (event) {
        this.$emit('page:reinit', event, event.detail.page);
      },
      onPageBeforeAnimation: function (event) {
        this.$emit('page:beforeanimation', event, event.detail.page);
      },
      onPageAfterAnimation: function (event) {
        this.$emit('page:afteranimation', event, event.detail.page);
      },
      onPageBeforeRemove: function (event) {
        this.$emit('page:beforeremove', event, event.detail.page);
      },
      onPageBack: function (event) {
        this.$emit('page:back', event, event.detail.page);
      },
      onPageAfterBack: function (event) {
        this.$emit('page:afterback', event, event.detail.page);
      }
    }
  };

var App = {
render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{"id":"app"}},[_c('f7-view',{attrs:{"url":"/about/"}})],1)},
staticRenderFns: [],
    components: {
      f7View: f7View,
    },
    mounted: function mounted() {
      console.log('app mounted');
    }
  };

var AboutPage = {
render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)},
staticRenderFns: [function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"page"},[_c('div',{staticClass:"navbar"},[_c('div',{staticClass:"navbar-inner"},[_c('div',{staticClass:"title"},[_vm._v("About")])])]),_vm._v(" "),_c('p',[_vm._v("About")]),_vm._v(" "),_c('ul',[_c('li',[_c('a',{attrs:{"href":"/about/"}},[_vm._v("About")])]),_vm._v(" "),_c('li',[_c('a',{attrs:{"href":"/about-news/"}},[_vm._v("About News")])]),_vm._v(" "),_c('li',[_c('a',{attrs:{"href":"/about-services/test1/test2/?foo=baz1&bar=baz2"}},[_vm._v("About Services")])]),_vm._v(" "),_c('li',[_c('a',{attrs:{"href":"/about-contacts/"}},[_vm._v("About Contacts")])])]),_vm._v(" "),_c('p',[_c('a',{staticClass:"back",attrs:{"href":""}},[_vm._v("Back")])]),_vm._v(" "),_c('p',[_c('a',{staticClass:"back",attrs:{"href":"/about/","data-force":"true"}},[_vm._v("Back To Home")])])])}],
    components: {
      f7Page: f7Page,
    },
  };

var AboutNews = {
render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)},
staticRenderFns: [function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"page"},[_c('div',{staticClass:"navbar"},[_c('div',{staticClass:"navbar-inner"},[_c('div',{staticClass:"title"},[_vm._v("About News")])])]),_vm._v(" "),_c('p',[_vm._v("About News")]),_vm._v(" "),_c('ul',[_c('li',[_c('a',{attrs:{"href":"/about/"}},[_vm._v("About")])]),_vm._v(" "),_c('li',[_c('a',{attrs:{"href":"/about-news/"}},[_vm._v("About News")])]),_vm._v(" "),_c('li',[_c('a',{attrs:{"href":"/about-services/"}},[_vm._v("About Services")])]),_vm._v(" "),_c('li',[_c('a',{attrs:{"href":"/about-contacts/"}},[_vm._v("About Contacts")])])]),_vm._v(" "),_c('p',[_c('a',{staticClass:"back",attrs:{"href":""}},[_vm._v("Back")])]),_vm._v(" "),_c('p',[_c('a',{staticClass:"back",attrs:{"href":"/about/","data-force":"true"}},[_vm._v("Back To Home")])])])}],
    components: {
      f7Page: f7Page,
    },
  };

var AboutServices = {
render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"page"},[_vm._m(0),_vm._v(" "),_c('p',[_vm._v("About Services")]),_vm._v(" "),_c('p',[_vm._v(_vm._s(_vm.prop1)+" "+_vm._s(_vm.prop2))]),_vm._v(" "),_c('p',[_vm._v(_vm._s(_vm.$route.query.foo)+" "+_vm._s(_vm.$route.query.bar))]),_vm._v(" "),_c('p',[_vm._v(_vm._s(_vm.$route.params.prop1)+" "+_vm._s(_vm.$route.params.prop2))]),_vm._v(" "),_vm._m(1),_vm._v(" "),_vm._m(2),_vm._v(" "),_vm._m(3)])},
staticRenderFns: [function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"navbar"},[_c('div',{staticClass:"navbar-inner"},[_c('div',{staticClass:"title"},[_vm._v("About Services")])])])},function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('a',{attrs:{"href":"/about/"}},[_vm._v("About")])]),_vm._v(" "),_c('li',[_c('a',{attrs:{"href":"/about-news/"}},[_vm._v("About News")])]),_vm._v(" "),_c('li',[_c('a',{attrs:{"href":"/about-services/"}},[_vm._v("About Services")])]),_vm._v(" "),_c('li',[_c('a',{attrs:{"href":"/about-contacts/"}},[_vm._v("About Contacts")])])])},function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('a',{staticClass:"back",attrs:{"href":""}},[_vm._v("Back")])])},function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('a',{staticClass:"back",attrs:{"href":"/about/","data-force":"true"}},[_vm._v("Back To Home")])])}],
    components: {
      f7Page: f7Page,
    },
    props: ['prop1', 'prop2'],
    beforeCreate: function beforeCreate() {
      console.log('page before create');
    },
    created: function created() {
      console.log('page created');
    }
  };

var AboutContacts = {
render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)},
staticRenderFns: [function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"page"},[_c('div',{staticClass:"navbar"},[_c('div',{staticClass:"navbar-inner"},[_c('div',{staticClass:"title"},[_vm._v("About Contacts")])])]),_vm._v(" "),_c('p',[_vm._v("About Contacts")]),_vm._v(" "),_c('ul',[_c('li',[_c('a',{attrs:{"href":"/about/"}},[_vm._v("About")])]),_vm._v(" "),_c('li',[_c('a',{attrs:{"href":"/about-news/"}},[_vm._v("About News")])]),_vm._v(" "),_c('li',[_c('a',{attrs:{"href":"/about-services/"}},[_vm._v("About Services")])]),_vm._v(" "),_c('li',[_c('a',{attrs:{"href":"/about-contacts/"}},[_vm._v("About Contacts")])])]),_vm._v(" "),_c('p',[_c('a',{staticClass:"back",attrs:{"href":""}},[_vm._v("Back")])]),_vm._v(" "),_c('p',[_c('a',{staticClass:"back",attrs:{"href":"/about/","data-force":"true"}},[_vm._v("Back To Home")])])])}],
    components: {
      f7Page: f7Page,
    },
  };

/* eslint import/no-extraneous-dependencies: "off" */
// Install Plugin
Vue$3$1.use(Framework7Vue);

// Init Vue App
new Vue$3$1({
  // Root Element
  el: '#app',
  render: function (c) { return c('app'); },
  components: {
    App: App,
  },
  routes: [
    {
      path: '/about/',
      component: AboutPage,
    },
    {
      path: '/about-news/',
      component: AboutNews,
    },
    {
      path: '/about-services/:prop1/:prop2/',
      component: AboutServices,
    },
    {
      path: '/about-contacts/',
      component: AboutContacts,
    } ],
});

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy92bGFkaW1pcmtoYXJsYW1waWRpL0dpdEh1Yi9GcmFtZXdvcms3LVZ1ZS9ub2RlX21vZHVsZXMvdnVlL2Rpc3QvdnVlLnJ1bnRpbWUuZXNtLmpzIiwiL1VzZXJzL3ZsYWRpbWlya2hhcmxhbXBpZGkvR2l0SHViL0ZyYW1ld29yazctVnVlL25vZGVfbW9kdWxlcy90ZW1wbGF0ZTcvZGlzdC90ZW1wbGF0ZTcubW9kdWxlLmpzIiwiL1VzZXJzL3ZsYWRpbWlya2hhcmxhbXBpZGkvR2l0SHViL0ZyYW1ld29yazctVnVlL25vZGVfbW9kdWxlcy9kb203L2Rpc3QvZG9tNy5tb2R1bGUuanMiLCIvVXNlcnMvdmxhZGltaXJraGFybGFtcGlkaS9HaXRIdWIvRnJhbWV3b3JrNy1WdWUvbm9kZV9tb2R1bGVzL2ZyYW1ld29yazcvZGlzdC9qcy9mcmFtZXdvcms3Lm1vZHVsYXIuanMiLCIvVXNlcnMvdmxhZGltaXJraGFybGFtcGlkaS9HaXRIdWIvRnJhbWV3b3JrNy1WdWUvc3JjL3V0aWxzL3V0aWxzLmpzIiwiL1VzZXJzL3ZsYWRpbWlya2hhcmxhbXBpZGkvR2l0SHViL0ZyYW1ld29yazctVnVlL3NyYy91dGlscy92dWUtcm91dGVyLmpzIiwiL1VzZXJzL3ZsYWRpbWlya2hhcmxhbXBpZGkvR2l0SHViL0ZyYW1ld29yazctVnVlL3NyYy91dGlscy92dWUtcGx1Z2luLmpzIiwiL1VzZXJzL3ZsYWRpbWlya2hhcmxhbXBpZGkvR2l0SHViL0ZyYW1ld29yazctVnVlL3NyYy9jb21wb25lbnRzL3ZpZXcudnVlIiwiL1VzZXJzL3ZsYWRpbWlya2hhcmxhbXBpZGkvR2l0SHViL0ZyYW1ld29yazctVnVlL3NyYy9jb21wb25lbnRzL3BhZ2UudnVlIiwiL1VzZXJzL3ZsYWRpbWlya2hhcmxhbXBpZGkvR2l0SHViL0ZyYW1ld29yazctVnVlL2tpdGNoZW4tc2luay9hcHAudnVlIiwiL1VzZXJzL3ZsYWRpbWlya2hhcmxhbXBpZGkvR2l0SHViL0ZyYW1ld29yazctVnVlL2tpdGNoZW4tc2luay9wYWdlcy9hYm91dC52dWUiLCIvVXNlcnMvdmxhZGltaXJraGFybGFtcGlkaS9HaXRIdWIvRnJhbWV3b3JrNy1WdWUva2l0Y2hlbi1zaW5rL3BhZ2VzL2Fib3V0LW5ld3MudnVlIiwiL1VzZXJzL3ZsYWRpbWlya2hhcmxhbXBpZGkvR2l0SHViL0ZyYW1ld29yazctVnVlL2tpdGNoZW4tc2luay9wYWdlcy9hYm91dC1zZXJ2aWNlcy52dWUiLCIvVXNlcnMvdmxhZGltaXJraGFybGFtcGlkaS9HaXRIdWIvRnJhbWV3b3JrNy1WdWUva2l0Y2hlbi1zaW5rL3BhZ2VzL2Fib3V0LWNvbnRhY3RzLnZ1ZSIsIi9Vc2Vycy92bGFkaW1pcmtoYXJsYW1waWRpL0dpdEh1Yi9GcmFtZXdvcms3LVZ1ZS9raXRjaGVuLXNpbmsvYXBwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogVnVlLmpzIHYyLjQuMlxuICogKGMpIDIwMTQtMjAxNyBFdmFuIFlvdVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG4vKiAgKi9cblxuLy8gdGhlc2UgaGVscGVycyBwcm9kdWNlcyBiZXR0ZXIgdm0gY29kZSBpbiBKUyBlbmdpbmVzIGR1ZSB0byB0aGVpclxuLy8gZXhwbGljaXRuZXNzIGFuZCBmdW5jdGlvbiBpbmxpbmluZ1xuZnVuY3Rpb24gaXNVbmRlZiAodikge1xuICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNEZWYgKHYpIHtcbiAgcmV0dXJuIHYgIT09IHVuZGVmaW5lZCAmJiB2ICE9PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzVHJ1ZSAodikge1xuICByZXR1cm4gdiA9PT0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBpc0ZhbHNlICh2KSB7XG4gIHJldHVybiB2ID09PSBmYWxzZVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbHVlIGlzIHByaW1pdGl2ZVxuICovXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSAodmFsdWUpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gIClcbn1cblxuLyoqXG4gKiBRdWljayBvYmplY3QgY2hlY2sgLSB0aGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIHRlbGxcbiAqIE9iamVjdHMgZnJvbSBwcmltaXRpdmUgdmFsdWVzIHdoZW4gd2Uga25vdyB0aGUgdmFsdWVcbiAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QgKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG59XG5cbnZhciBfdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHAgKHYpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBSZWdFeHBdJ1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbCBpcyBhIHZhbGlkIGFycmF5IGluZGV4LlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlJbmRleCAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdCh2YWwpO1xuICByZXR1cm4gbiA+PSAwICYmIE1hdGguZmxvb3IobikgPT09IG4gJiYgaXNGaW5pdGUodmFsKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSB0byBhIHN0cmluZyB0aGF0IGlzIGFjdHVhbGx5IHJlbmRlcmVkLlxuICovXG5mdW5jdGlvbiB0b1N0cmluZyAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbFxuICAgID8gJydcbiAgICA6IHR5cGVvZiB2YWwgPT09ICdvYmplY3QnXG4gICAgICA/IEpTT04uc3RyaW5naWZ5KHZhbCwgbnVsbCwgMilcbiAgICAgIDogU3RyaW5nKHZhbClcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgaW5wdXQgdmFsdWUgdG8gYSBudW1iZXIgZm9yIHBlcnNpc3RlbmNlLlxuICogSWYgdGhlIGNvbnZlcnNpb24gZmFpbHMsIHJldHVybiBvcmlnaW5hbCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyICh2YWwpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KHZhbCk7XG4gIHJldHVybiBpc05hTihuKSA/IHZhbCA6IG5cbn1cblxuLyoqXG4gKiBNYWtlIGEgbWFwIGFuZCByZXR1cm4gYSBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYSBrZXlcbiAqIGlzIGluIHRoYXQgbWFwLlxuICovXG5mdW5jdGlvbiBtYWtlTWFwIChcbiAgc3RyLFxuICBleHBlY3RzTG93ZXJDYXNlXG4pIHtcbiAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBsaXN0ID0gc3RyLnNwbGl0KCcsJyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIG1hcFtsaXN0W2ldXSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGV4cGVjdHNMb3dlckNhc2VcbiAgICA/IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWwudG9Mb3dlckNhc2UoKV07IH1cbiAgICA6IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWxdOyB9XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB0YWcgaXMgYSBidWlsdC1pbiB0YWcuXG4gKi9cbnZhciBpc0J1aWx0SW5UYWcgPSBtYWtlTWFwKCdzbG90LGNvbXBvbmVudCcsIHRydWUpO1xuXG4vKipcbiAqIENoZWNrIGlmIGEgYXR0cmlidXRlIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlLlxuICovXG52YXIgaXNSZXNlcnZlZEF0dHJpYnV0ZSA9IG1ha2VNYXAoJ2tleSxyZWYsc2xvdCxpcycpO1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpdGVtIGZyb20gYW4gYXJyYXlcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlIChhcnIsIGl0ZW0pIHtcbiAgaWYgKGFyci5sZW5ndGgpIHtcbiAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgb2JqZWN0IGhhcyB0aGUgcHJvcGVydHkuXG4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBoYXNPd24gKG9iaiwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGNhY2hlZCB2ZXJzaW9uIG9mIGEgcHVyZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2FjaGVkIChmbikge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gKGZ1bmN0aW9uIGNhY2hlZEZuIChzdHIpIHtcbiAgICB2YXIgaGl0ID0gY2FjaGVbc3RyXTtcbiAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSlcbiAgfSlcbn1cblxuLyoqXG4gKiBDYW1lbGl6ZSBhIGh5cGhlbi1kZWxpbWl0ZWQgc3RyaW5nLlxuICovXG52YXIgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcbnZhciBjYW1lbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCBmdW5jdGlvbiAoXywgYykgeyByZXR1cm4gYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnOyB9KVxufSk7XG5cbi8qKlxuICogQ2FwaXRhbGl6ZSBhIHN0cmluZy5cbiAqL1xudmFyIGNhcGl0YWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpXG59KTtcblxuLyoqXG4gKiBIeXBoZW5hdGUgYSBjYW1lbENhc2Ugc3RyaW5nLlxuICovXG52YXIgaHlwaGVuYXRlUkUgPSAvKFteLV0pKFtBLVpdKS9nO1xudmFyIGh5cGhlbmF0ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHJcbiAgICAucmVwbGFjZShoeXBoZW5hdGVSRSwgJyQxLSQyJylcbiAgICAucmVwbGFjZShoeXBoZW5hdGVSRSwgJyQxLSQyJylcbiAgICAudG9Mb3dlckNhc2UoKVxufSk7XG5cbi8qKlxuICogU2ltcGxlIGJpbmQsIGZhc3RlciB0aGFuIG5hdGl2ZVxuICovXG5mdW5jdGlvbiBiaW5kIChmbiwgY3R4KSB7XG4gIGZ1bmN0aW9uIGJvdW5kRm4gKGEpIHtcbiAgICB2YXIgbCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgcmV0dXJuIGxcbiAgICAgID8gbCA+IDFcbiAgICAgICAgPyBmbi5hcHBseShjdHgsIGFyZ3VtZW50cylcbiAgICAgICAgOiBmbi5jYWxsKGN0eCwgYSlcbiAgICAgIDogZm4uY2FsbChjdHgpXG4gIH1cbiAgLy8gcmVjb3JkIG9yaWdpbmFsIGZuIGxlbmd0aFxuICBib3VuZEZuLl9sZW5ndGggPSBmbi5sZW5ndGg7XG4gIHJldHVybiBib3VuZEZuXG59XG5cbi8qKlxuICogQ29udmVydCBhbiBBcnJheS1saWtlIG9iamVjdCB0byBhIHJlYWwgQXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkgKGxpc3QsIHN0YXJ0KSB7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgdmFyIGkgPSBsaXN0Lmxlbmd0aCAtIHN0YXJ0O1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgcmV0W2ldID0gbGlzdFtpICsgc3RhcnRdO1xuICB9XG4gIHJldHVybiByZXRcbn1cblxuLyoqXG4gKiBNaXggcHJvcGVydGllcyBpbnRvIHRhcmdldCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZCAodG8sIF9mcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBfZnJvbSkge1xuICAgIHRvW2tleV0gPSBfZnJvbVtrZXldO1xuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIE1lcmdlIGFuIEFycmF5IG9mIE9iamVjdHMgaW50byBhIHNpbmdsZSBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHRvT2JqZWN0IChhcnIpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhcnJbaV0pIHtcbiAgICAgIGV4dGVuZChyZXMsIGFycltpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyoqXG4gKiBQZXJmb3JtIG5vIG9wZXJhdGlvbi5cbiAqIFN0dWJiaW5nIGFyZ3MgdG8gbWFrZSBGbG93IGhhcHB5IHdpdGhvdXQgbGVhdmluZyB1c2VsZXNzIHRyYW5zcGlsZWQgY29kZVxuICogd2l0aCAuLi5yZXN0IChodHRwczovL2Zsb3cub3JnL2Jsb2cvMjAxNy8wNS8wNy9TdHJpY3QtRnVuY3Rpb24tQ2FsbC1Bcml0eS8pXG4gKi9cbmZ1bmN0aW9uIG5vb3AgKGEsIGIsIGMpIHt9XG5cbi8qKlxuICogQWx3YXlzIHJldHVybiBmYWxzZS5cbiAqL1xudmFyIG5vID0gZnVuY3Rpb24gKGEsIGIsIGMpIHsgcmV0dXJuIGZhbHNlOyB9O1xuXG4vKipcbiAqIFJldHVybiBzYW1lIHZhbHVlXG4gKi9cbnZhciBpZGVudGl0eSA9IGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9O1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgc3RhdGljIGtleXMgc3RyaW5nIGZyb20gY29tcGlsZXIgbW9kdWxlcy5cbiAqL1xuXG5cbi8qKlxuICogQ2hlY2sgaWYgdHdvIHZhbHVlcyBhcmUgbG9vc2VseSBlcXVhbCAtIHRoYXQgaXMsXG4gKiBpZiB0aGV5IGFyZSBwbGFpbiBvYmplY3RzLCBkbyB0aGV5IGhhdmUgdGhlIHNhbWUgc2hhcGU/XG4gKi9cbmZ1bmN0aW9uIGxvb3NlRXF1YWwgKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHsgcmV0dXJuIHRydWUgfVxuICB2YXIgaXNPYmplY3RBID0gaXNPYmplY3QoYSk7XG4gIHZhciBpc09iamVjdEIgPSBpc09iamVjdChiKTtcbiAgaWYgKGlzT2JqZWN0QSAmJiBpc09iamVjdEIpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIGlzQXJyYXlBID0gQXJyYXkuaXNBcnJheShhKTtcbiAgICAgIHZhciBpc0FycmF5QiA9IEFycmF5LmlzQXJyYXkoYik7XG4gICAgICBpZiAoaXNBcnJheUEgJiYgaXNBcnJheUIpIHtcbiAgICAgICAgcmV0dXJuIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoZSwgYltpXSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSBpZiAoIWlzQXJyYXlBICYmICFpc0FycmF5Qikge1xuICAgICAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMoYik7XG4gICAgICAgIHJldHVybiBrZXlzQS5sZW5ndGggPT09IGtleXNCLmxlbmd0aCAmJiBrZXlzQS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9IGVsc2UgaWYgKCFpc09iamVjdEEgJiYgIWlzT2JqZWN0Qikge1xuICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGxvb3NlSW5kZXhPZiAoYXJyLCB2YWwpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobG9vc2VFcXVhbChhcnJbaV0sIHZhbCkpIHsgcmV0dXJuIGkgfVxuICB9XG4gIHJldHVybiAtMVxufVxuXG4vKipcbiAqIEVuc3VyZSBhIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmx5IG9uY2UuXG4gKi9cbmZ1bmN0aW9uIG9uY2UgKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59XG5cbnZhciBTU1JfQVRUUiA9ICdkYXRhLXNlcnZlci1yZW5kZXJlZCc7XG5cbnZhciBBU1NFVF9UWVBFUyA9IFtcbiAgJ2NvbXBvbmVudCcsXG4gICdkaXJlY3RpdmUnLFxuICAnZmlsdGVyJ1xuXTtcblxudmFyIExJRkVDWUNMRV9IT09LUyA9IFtcbiAgJ2JlZm9yZUNyZWF0ZScsXG4gICdjcmVhdGVkJyxcbiAgJ2JlZm9yZU1vdW50JyxcbiAgJ21vdW50ZWQnLFxuICAnYmVmb3JlVXBkYXRlJyxcbiAgJ3VwZGF0ZWQnLFxuICAnYmVmb3JlRGVzdHJveScsXG4gICdkZXN0cm95ZWQnLFxuICAnYWN0aXZhdGVkJyxcbiAgJ2RlYWN0aXZhdGVkJ1xuXTtcblxuLyogICovXG5cbnZhciBjb25maWcgPSAoe1xuICAvKipcbiAgICogT3B0aW9uIG1lcmdlIHN0cmF0ZWdpZXMgKHVzZWQgaW4gY29yZS91dGlsL29wdGlvbnMpXG4gICAqL1xuICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc3VwcHJlc3Mgd2FybmluZ3MuXG4gICAqL1xuICBzaWxlbnQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBTaG93IHByb2R1Y3Rpb24gbW9kZSB0aXAgbWVzc2FnZSBvbiBib290P1xuICAgKi9cbiAgcHJvZHVjdGlvblRpcDogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byBlbmFibGUgZGV2dG9vbHNcbiAgICovXG4gIGRldnRvb2xzOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHJlY29yZCBwZXJmXG4gICAqL1xuICBwZXJmb3JtYW5jZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEVycm9yIGhhbmRsZXIgZm9yIHdhdGNoZXIgZXJyb3JzXG4gICAqL1xuICBlcnJvckhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIFdhcm4gaGFuZGxlciBmb3Igd2F0Y2hlciB3YXJuc1xuICAgKi9cbiAgd2FybkhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIElnbm9yZSBjZXJ0YWluIGN1c3RvbSBlbGVtZW50c1xuICAgKi9cbiAgaWdub3JlZEVsZW1lbnRzOiBbXSxcblxuICAvKipcbiAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cbiAgICovXG4gIGtleUNvZGVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSByZWdpc3RlcmVkIGFzIGFcbiAgICogY29tcG9uZW50LiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZFRhZzogbm8sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSB1c2VkIGFzIGEgY29tcG9uZW50XG4gICAqIHByb3AuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkQXR0cjogbm8sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIGFuIHVua25vd24gZWxlbWVudC5cbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgaXNVbmtub3duRWxlbWVudDogbm8sXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbmFtZXNwYWNlIG9mIGFuIGVsZW1lbnRcbiAgICovXG4gIGdldFRhZ05hbWVzcGFjZTogbm9vcCxcblxuICAvKipcbiAgICogUGFyc2UgdGhlIHJlYWwgdGFnIG5hbWUgZm9yIHRoZSBzcGVjaWZpYyBwbGF0Zm9ybS5cbiAgICovXG4gIHBhcnNlUGxhdGZvcm1UYWdOYW1lOiBpZGVudGl0eSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIG11c3QgYmUgYm91bmQgdXNpbmcgcHJvcGVydHksIGUuZy4gdmFsdWVcbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgbXVzdFVzZVByb3A6IG5vLFxuXG4gIC8qKlxuICAgKiBFeHBvc2VkIGZvciBsZWdhY3kgcmVhc29uc1xuICAgKi9cbiAgX2xpZmVjeWNsZUhvb2tzOiBMSUZFQ1lDTEVfSE9PS1Ncbn0pO1xuXG4vKiAgKi9cblxudmFyIGVtcHR5T2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG4gKi9cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RlxufVxuXG4vKipcbiAqIERlZmluZSBhIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBkZWYgKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgdmFsdWU6IHZhbCxcbiAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHNpbXBsZSBwYXRoLlxuICovXG52YXIgYmFpbFJFID0gL1teXFx3LiRdLztcbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cbiAgICAgIG9iaiA9IG9ialtzZWdtZW50c1tpXV07XG4gICAgfVxuICAgIHJldHVybiBvYmpcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHdhcm4gPSBub29wO1xudmFyIHRpcCA9IG5vb3A7XG52YXIgZm9ybWF0Q29tcG9uZW50TmFtZSA9IChudWxsKTsgLy8gd29yayBhcm91bmQgZmxvdyBjaGVja1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaGFzQ29uc29sZSA9IHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJztcbiAgdmFyIGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XG4gIHZhciBjbGFzc2lmeSA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIHN0clxuICAgIC5yZXBsYWNlKGNsYXNzaWZ5UkUsIGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRvVXBwZXJDYXNlKCk7IH0pXG4gICAgLnJlcGxhY2UoL1stX10vZywgJycpOyB9O1xuXG4gIHdhcm4gPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIHZhciB0cmFjZSA9IHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJztcblxuICAgIGlmIChjb25maWcud2FybkhhbmRsZXIpIHtcbiAgICAgIGNvbmZpZy53YXJuSGFuZGxlci5jYWxsKG51bGwsIG1zZywgdm0sIHRyYWNlKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbVnVlIHdhcm5dOiBcIiArIG1zZyArIHRyYWNlKSk7XG4gICAgfVxuICB9O1xuXG4gIHRpcCA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKFwiW1Z1ZSB0aXBdOiBcIiArIG1zZyArIChcbiAgICAgICAgdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnXG4gICAgICApKTtcbiAgICB9XG4gIH07XG5cbiAgZm9ybWF0Q29tcG9uZW50TmFtZSA9IGZ1bmN0aW9uICh2bSwgaW5jbHVkZUZpbGUpIHtcbiAgICBpZiAodm0uJHJvb3QgPT09IHZtKSB7XG4gICAgICByZXR1cm4gJzxSb290PidcbiAgICB9XG4gICAgdmFyIG5hbWUgPSB0eXBlb2Ygdm0gPT09ICdzdHJpbmcnXG4gICAgICA/IHZtXG4gICAgICA6IHR5cGVvZiB2bSA9PT0gJ2Z1bmN0aW9uJyAmJiB2bS5vcHRpb25zXG4gICAgICAgID8gdm0ub3B0aW9ucy5uYW1lXG4gICAgICAgIDogdm0uX2lzVnVlXG4gICAgICAgICAgPyB2bS4kb3B0aW9ucy5uYW1lIHx8IHZtLiRvcHRpb25zLl9jb21wb25lbnRUYWdcbiAgICAgICAgICA6IHZtLm5hbWU7XG5cbiAgICB2YXIgZmlsZSA9IHZtLl9pc1Z1ZSAmJiB2bS4kb3B0aW9ucy5fX2ZpbGU7XG4gICAgaWYgKCFuYW1lICYmIGZpbGUpIHtcbiAgICAgIHZhciBtYXRjaCA9IGZpbGUubWF0Y2goLyhbXi9cXFxcXSspXFwudnVlJC8pO1xuICAgICAgbmFtZSA9IG1hdGNoICYmIG1hdGNoWzFdO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAobmFtZSA/IChcIjxcIiArIChjbGFzc2lmeShuYW1lKSkgKyBcIj5cIikgOiBcIjxBbm9ueW1vdXM+XCIpICtcbiAgICAgIChmaWxlICYmIGluY2x1ZGVGaWxlICE9PSBmYWxzZSA/IChcIiBhdCBcIiArIGZpbGUpIDogJycpXG4gICAgKVxuICB9O1xuXG4gIHZhciByZXBlYXQgPSBmdW5jdGlvbiAoc3RyLCBuKSB7XG4gICAgdmFyIHJlcyA9ICcnO1xuICAgIHdoaWxlIChuKSB7XG4gICAgICBpZiAobiAlIDIgPT09IDEpIHsgcmVzICs9IHN0cjsgfVxuICAgICAgaWYgKG4gPiAxKSB7IHN0ciArPSBzdHI7IH1cbiAgICAgIG4gPj49IDE7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfTtcblxuICB2YXIgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IGZ1bmN0aW9uICh2bSkge1xuICAgIGlmICh2bS5faXNWdWUgJiYgdm0uJHBhcmVudCkge1xuICAgICAgdmFyIHRyZWUgPSBbXTtcbiAgICAgIHZhciBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgd2hpbGUgKHZtKSB7XG4gICAgICAgIGlmICh0cmVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgbGFzdCA9IHRyZWVbdHJlZS5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpZiAobGFzdC5jb25zdHJ1Y3RvciA9PT0gdm0uY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSsrO1xuICAgICAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA+IDApIHtcbiAgICAgICAgICAgIHRyZWVbdHJlZS5sZW5ndGggLSAxXSA9IFtsYXN0LCBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2VdO1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHJlZS5wdXNoKHZtKTtcbiAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuICdcXG5cXG5mb3VuZCBpblxcblxcbicgKyB0cmVlXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKHZtLCBpKSB7IHJldHVybiAoXCJcIiArIChpID09PSAwID8gJy0tLT4gJyA6IHJlcGVhdCgnICcsIDUgKyBpICogMikpICsgKEFycmF5LmlzQXJyYXkodm0pXG4gICAgICAgICAgICA/ICgoZm9ybWF0Q29tcG9uZW50TmFtZSh2bVswXSkpICsgXCIuLi4gKFwiICsgKHZtWzFdKSArIFwiIHJlY3Vyc2l2ZSBjYWxscylcIilcbiAgICAgICAgICAgIDogZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpKTsgfSlcbiAgICAgICAgLmpvaW4oJ1xcbicpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXCJcXG5cXG4oZm91bmQgaW4gXCIgKyAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIpXCIpXG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKGNvbmZpZy5lcnJvckhhbmRsZXIpIHtcbiAgICBjb25maWcuZXJyb3JIYW5kbGVyLmNhbGwobnVsbCwgZXJyLCB2bSwgaW5mbyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oKFwiRXJyb3IgaW4gXCIgKyBpbmZvICsgXCI6IFxcXCJcIiArIChlcnIudG9TdHJpbmcoKSkgKyBcIlxcXCJcIiksIHZtKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoaW5Ccm93c2VyICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlcnJcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG4vKiBnbG9iYWxzIE11dGF0aW9uT2JzZXJ2ZXIgKi9cblxuLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIFVBID0gaW5Ccm93c2VyICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG52YXIgaXNJRSA9IFVBICYmIC9tc2llfHRyaWRlbnQvLnRlc3QoVUEpO1xudmFyIGlzSUU5ID0gVUEgJiYgVUEuaW5kZXhPZignbXNpZSA5LjAnKSA+IDA7XG52YXIgaXNFZGdlID0gVUEgJiYgVUEuaW5kZXhPZignZWRnZS8nKSA+IDA7XG52YXIgaXNBbmRyb2lkID0gVUEgJiYgVUEuaW5kZXhPZignYW5kcm9pZCcpID4gMDtcbnZhciBpc0lPUyA9IFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSk7XG52YXIgaXNDaHJvbWUgPSBVQSAmJiAvY2hyb21lXFwvXFxkKy8udGVzdChVQSkgJiYgIWlzRWRnZTtcblxuLy8gRmlyZWZpeCBoYXMgYSBcIndhdGNoXCIgZnVuY3Rpb24gb24gT2JqZWN0LnByb3RvdHlwZS4uLlxudmFyIG5hdGl2ZVdhdGNoID0gKHt9KS53YXRjaDtcblxudmFyIHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuaWYgKGluQnJvd3Nlcikge1xuICB0cnkge1xuICAgIHZhciBvcHRzID0ge307XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wdHMsICdwYXNzaXZlJywgKHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KSk7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yODVcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdC1wYXNzaXZlJywgbnVsbCwgb3B0cyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cbi8vIHRoaXMgbmVlZHMgdG8gYmUgbGF6eS1ldmFsZWQgYmVjYXVzZSB2dWUgbWF5IGJlIHJlcXVpcmVkIGJlZm9yZVxuLy8gdnVlLXNlcnZlci1yZW5kZXJlciBjYW4gc2V0IFZVRV9FTlZcbnZhciBfaXNTZXJ2ZXI7XG52YXIgaXNTZXJ2ZXJSZW5kZXJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChfaXNTZXJ2ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghaW5Ccm93c2VyICYmIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBkZXRlY3QgcHJlc2VuY2Ugb2YgdnVlLXNlcnZlci1yZW5kZXJlciBhbmQgYXZvaWRcbiAgICAgIC8vIFdlYnBhY2sgc2hpbW1pbmcgdGhlIHByb2Nlc3NcbiAgICAgIF9pc1NlcnZlciA9IGdsb2JhbFsncHJvY2VzcyddLmVudi5WVUVfRU5WID09PSAnc2VydmVyJztcbiAgICB9IGVsc2Uge1xuICAgICAgX2lzU2VydmVyID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBfaXNTZXJ2ZXJcbn07XG5cbi8vIGRldGVjdCBkZXZ0b29sc1xudmFyIGRldnRvb2xzID0gaW5Ccm93c2VyICYmIHdpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gaXNOYXRpdmUgKEN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChDdG9yLnRvU3RyaW5nKCkpXG59XG5cbnZhciBoYXNTeW1ib2wgPVxuICB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTeW1ib2wpICYmXG4gIHR5cGVvZiBSZWZsZWN0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShSZWZsZWN0Lm93bktleXMpO1xuXG4vKipcbiAqIERlZmVyIGEgdGFzayB0byBleGVjdXRlIGl0IGFzeW5jaHJvbm91c2x5LlxuICovXG52YXIgbmV4dFRpY2sgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgY2FsbGJhY2tzID0gW107XG4gIHZhciBwZW5kaW5nID0gZmFsc2U7XG4gIHZhciB0aW1lckZ1bmM7XG5cbiAgZnVuY3Rpb24gbmV4dFRpY2tIYW5kbGVyICgpIHtcbiAgICBwZW5kaW5nID0gZmFsc2U7XG4gICAgdmFyIGNvcGllcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcbiAgICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvcGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29waWVzW2ldKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gdGhlIG5leHRUaWNrIGJlaGF2aW9yIGxldmVyYWdlcyB0aGUgbWljcm90YXNrIHF1ZXVlLCB3aGljaCBjYW4gYmUgYWNjZXNzZWRcbiAgLy8gdmlhIGVpdGhlciBuYXRpdmUgUHJvbWlzZS50aGVuIG9yIE11dGF0aW9uT2JzZXJ2ZXIuXG4gIC8vIE11dGF0aW9uT2JzZXJ2ZXIgaGFzIHdpZGVyIHN1cHBvcnQsIGhvd2V2ZXIgaXQgaXMgc2VyaW91c2x5IGJ1Z2dlZCBpblxuICAvLyBVSVdlYlZpZXcgaW4gaU9TID49IDkuMy4zIHdoZW4gdHJpZ2dlcmVkIGluIHRvdWNoIGV2ZW50IGhhbmRsZXJzLiBJdFxuICAvLyBjb21wbGV0ZWx5IHN0b3BzIHdvcmtpbmcgYWZ0ZXIgdHJpZ2dlcmluZyBhIGZldyB0aW1lcy4uLiBzbywgaWYgbmF0aXZlXG4gIC8vIFByb21pc2UgaXMgYXZhaWxhYmxlLCB3ZSB3aWxsIHVzZSBpdDpcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJvbWlzZSkpIHtcbiAgICB2YXIgcCA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIHZhciBsb2dFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHsgY29uc29sZS5lcnJvcihlcnIpOyB9O1xuICAgIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHAudGhlbihuZXh0VGlja0hhbmRsZXIpLmNhdGNoKGxvZ0Vycm9yKTtcbiAgICAgIC8vIGluIHByb2JsZW1hdGljIFVJV2ViVmlld3MsIFByb21pc2UudGhlbiBkb2Vzbid0IGNvbXBsZXRlbHkgYnJlYWssIGJ1dFxuICAgICAgLy8gaXQgY2FuIGdldCBzdHVjayBpbiBhIHdlaXJkIHN0YXRlIHdoZXJlIGNhbGxiYWNrcyBhcmUgcHVzaGVkIGludG8gdGhlXG4gICAgICAvLyBtaWNyb3Rhc2sgcXVldWUgYnV0IHRoZSBxdWV1ZSBpc24ndCBiZWluZyBmbHVzaGVkLCB1bnRpbCB0aGUgYnJvd3NlclxuICAgICAgLy8gbmVlZHMgdG8gZG8gc29tZSBvdGhlciB3b3JrLCBlLmcuIGhhbmRsZSBhIHRpbWVyLiBUaGVyZWZvcmUgd2UgY2FuXG4gICAgICAvLyBcImZvcmNlXCIgdGhlIG1pY3JvdGFzayBxdWV1ZSB0byBiZSBmbHVzaGVkIGJ5IGFkZGluZyBhbiBlbXB0eSB0aW1lci5cbiAgICAgIGlmIChpc0lPUykgeyBzZXRUaW1lb3V0KG5vb3ApOyB9XG4gICAgfTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgTXV0YXRpb25PYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgKFxuICAgIGlzTmF0aXZlKE11dGF0aW9uT2JzZXJ2ZXIpIHx8XG4gICAgLy8gUGhhbnRvbUpTIGFuZCBpT1MgNy54XG4gICAgTXV0YXRpb25PYnNlcnZlci50b1N0cmluZygpID09PSAnW29iamVjdCBNdXRhdGlvbk9ic2VydmVyQ29uc3RydWN0b3JdJ1xuICApKSB7XG4gICAgLy8gdXNlIE11dGF0aW9uT2JzZXJ2ZXIgd2hlcmUgbmF0aXZlIFByb21pc2UgaXMgbm90IGF2YWlsYWJsZSxcbiAgICAvLyBlLmcuIFBoYW50b21KUyBJRTExLCBpT1M3LCBBbmRyb2lkIDQuNFxuICAgIHZhciBjb3VudGVyID0gMTtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihuZXh0VGlja0hhbmRsZXIpO1xuICAgIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhjb3VudGVyKSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0ZXh0Tm9kZSwge1xuICAgICAgY2hhcmFjdGVyRGF0YTogdHJ1ZVxuICAgIH0pO1xuICAgIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvdW50ZXIgPSAoY291bnRlciArIDEpICUgMjtcbiAgICAgIHRleHROb2RlLmRhdGEgPSBTdHJpbmcoY291bnRlcik7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICAvLyBmYWxsYmFjayB0byBzZXRUaW1lb3V0XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBzZXRUaW1lb3V0KG5leHRUaWNrSGFuZGxlciwgMCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBxdWV1ZU5leHRUaWNrIChjYiwgY3R4KSB7XG4gICAgdmFyIF9yZXNvbHZlO1xuICAgIGNhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChjYikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNiLmNhbGwoY3R4KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIGN0eCwgJ25leHRUaWNrJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoX3Jlc29sdmUpIHtcbiAgICAgICAgX3Jlc29sdmUoY3R4KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIXBlbmRpbmcpIHtcbiAgICAgIHBlbmRpbmcgPSB0cnVlO1xuICAgICAgdGltZXJGdW5jKCk7XG4gICAgfVxuICAgIGlmICghY2IgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICB9KVxuICAgIH1cbiAgfVxufSkoKTtcblxudmFyIF9TZXQ7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmICh0eXBlb2YgU2V0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTZXQpKSB7XG4gIC8vIHVzZSBuYXRpdmUgU2V0IHdoZW4gYXZhaWxhYmxlLlxuICBfU2V0ID0gU2V0O1xufSBlbHNlIHtcbiAgLy8gYSBub24tc3RhbmRhcmQgU2V0IHBvbHlmaWxsIHRoYXQgb25seSB3b3JrcyB3aXRoIHByaW1pdGl2ZSBrZXlzLlxuICBfU2V0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZXQgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cbiAgICBTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIGhhcyAoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXRba2V5XSA9PT0gdHJ1ZVxuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGtleSkge1xuICAgICAgdGhpcy5zZXRba2V5XSA9IHRydWU7XG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH07XG5cbiAgICByZXR1cm4gU2V0O1xuICB9KCkpO1xufVxuXG4vKiAgKi9cblxuXG52YXIgdWlkJDEgPSAwO1xuXG4vKipcbiAqIEEgZGVwIGlzIGFuIG9ic2VydmFibGUgdGhhdCBjYW4gaGF2ZSBtdWx0aXBsZVxuICogZGlyZWN0aXZlcyBzdWJzY3JpYmluZyB0byBpdC5cbiAqL1xudmFyIERlcCA9IGZ1bmN0aW9uIERlcCAoKSB7XG4gIHRoaXMuaWQgPSB1aWQkMSsrO1xuICB0aGlzLnN1YnMgPSBbXTtcbn07XG5cbkRlcC5wcm90b3R5cGUuYWRkU3ViID0gZnVuY3Rpb24gYWRkU3ViIChzdWIpIHtcbiAgdGhpcy5zdWJzLnB1c2goc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUucmVtb3ZlU3ViID0gZnVuY3Rpb24gcmVtb3ZlU3ViIChzdWIpIHtcbiAgcmVtb3ZlKHRoaXMuc3Vicywgc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgaWYgKERlcC50YXJnZXQpIHtcbiAgICBEZXAudGFyZ2V0LmFkZERlcCh0aGlzKTtcbiAgfVxufTtcblxuRGVwLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkgKCkge1xuICAvLyBzdGFiaWxpemUgdGhlIHN1YnNjcmliZXIgbGlzdCBmaXJzdFxuICB2YXIgc3VicyA9IHRoaXMuc3Vicy5zbGljZSgpO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHN1YnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgc3Vic1tpXS51cGRhdGUoKTtcbiAgfVxufTtcblxuLy8gdGhlIGN1cnJlbnQgdGFyZ2V0IHdhdGNoZXIgYmVpbmcgZXZhbHVhdGVkLlxuLy8gdGhpcyBpcyBnbG9iYWxseSB1bmlxdWUgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvbmx5IG9uZVxuLy8gd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQgYXQgYW55IHRpbWUuXG5EZXAudGFyZ2V0ID0gbnVsbDtcbnZhciB0YXJnZXRTdGFjayA9IFtdO1xuXG5mdW5jdGlvbiBwdXNoVGFyZ2V0IChfdGFyZ2V0KSB7XG4gIGlmIChEZXAudGFyZ2V0KSB7IHRhcmdldFN0YWNrLnB1c2goRGVwLnRhcmdldCk7IH1cbiAgRGVwLnRhcmdldCA9IF90YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIHBvcFRhcmdldCAoKSB7XG4gIERlcC50YXJnZXQgPSB0YXJnZXRTdGFjay5wb3AoKTtcbn1cblxuLypcbiAqIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aFxuICogZHluYW1pY2FsbHkgYWNjZXNzaW5nIG1ldGhvZHMgb24gQXJyYXkgcHJvdG90eXBlXG4gKi9cblxudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG52YXIgYXJyYXlNZXRob2RzID0gT2JqZWN0LmNyZWF0ZShhcnJheVByb3RvKTtbXG4gICdwdXNoJyxcbiAgJ3BvcCcsXG4gICdzaGlmdCcsXG4gICd1bnNoaWZ0JyxcbiAgJ3NwbGljZScsXG4gICdzb3J0JyxcbiAgJ3JldmVyc2UnXG5dXG4uZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gIC8vIGNhY2hlIG9yaWdpbmFsIG1ldGhvZFxuICB2YXIgb3JpZ2luYWwgPSBhcnJheVByb3RvW21ldGhvZF07XG4gIGRlZihhcnJheU1ldGhvZHMsIG1ldGhvZCwgZnVuY3Rpb24gbXV0YXRvciAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgdmFyIHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIHZhciBvYiA9IHRoaXMuX19vYl9fO1xuICAgIHZhciBpbnNlcnRlZDtcbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgY2FzZSAncHVzaCc6XG4gICAgICBjYXNlICd1bnNoaWZ0JzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc3BsaWNlJzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzLnNsaWNlKDIpO1xuICAgICAgICBicmVha1xuICAgIH1cbiAgICBpZiAoaW5zZXJ0ZWQpIHsgb2Iub2JzZXJ2ZUFycmF5KGluc2VydGVkKTsgfVxuICAgIC8vIG5vdGlmeSBjaGFuZ2VcbiAgICBvYi5kZXAubm90aWZ5KCk7XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9KTtcbn0pO1xuXG4vKiAgKi9cblxudmFyIGFycmF5S2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFycmF5TWV0aG9kcyk7XG5cbi8qKlxuICogQnkgZGVmYXVsdCwgd2hlbiBhIHJlYWN0aXZlIHByb3BlcnR5IGlzIHNldCwgdGhlIG5ldyB2YWx1ZSBpc1xuICogYWxzbyBjb252ZXJ0ZWQgdG8gYmVjb21lIHJlYWN0aXZlLiBIb3dldmVyIHdoZW4gcGFzc2luZyBkb3duIHByb3BzLFxuICogd2UgZG9uJ3Qgd2FudCB0byBmb3JjZSBjb252ZXJzaW9uIGJlY2F1c2UgdGhlIHZhbHVlIG1heSBiZSBhIG5lc3RlZCB2YWx1ZVxuICogdW5kZXIgYSBmcm96ZW4gZGF0YSBzdHJ1Y3R1cmUuIENvbnZlcnRpbmcgaXQgd291bGQgZGVmZWF0IHRoZSBvcHRpbWl6YXRpb24uXG4gKi9cbnZhciBvYnNlcnZlclN0YXRlID0ge1xuICBzaG91bGRDb252ZXJ0OiB0cnVlXG59O1xuXG4vKipcbiAqIE9ic2VydmVyIGNsYXNzIHRoYXQgYXJlIGF0dGFjaGVkIHRvIGVhY2ggb2JzZXJ2ZWRcbiAqIG9iamVjdC4gT25jZSBhdHRhY2hlZCwgdGhlIG9ic2VydmVyIGNvbnZlcnRzIHRhcmdldFxuICogb2JqZWN0J3MgcHJvcGVydHkga2V5cyBpbnRvIGdldHRlci9zZXR0ZXJzIHRoYXRcbiAqIGNvbGxlY3QgZGVwZW5kZW5jaWVzIGFuZCBkaXNwYXRjaGVzIHVwZGF0ZXMuXG4gKi9cbnZhciBPYnNlcnZlciA9IGZ1bmN0aW9uIE9ic2VydmVyICh2YWx1ZSkge1xuICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIHRoaXMuZGVwID0gbmV3IERlcCgpO1xuICB0aGlzLnZtQ291bnQgPSAwO1xuICBkZWYodmFsdWUsICdfX29iX18nLCB0aGlzKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgdmFyIGF1Z21lbnQgPSBoYXNQcm90b1xuICAgICAgPyBwcm90b0F1Z21lbnRcbiAgICAgIDogY29weUF1Z21lbnQ7XG4gICAgYXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzLCBhcnJheUtleXMpO1xuICAgIHRoaXMub2JzZXJ2ZUFycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLndhbGsodmFsdWUpO1xuICB9XG59O1xuXG4vKipcbiAqIFdhbGsgdGhyb3VnaCBlYWNoIHByb3BlcnR5IGFuZCBjb252ZXJ0IHRoZW0gaW50b1xuICogZ2V0dGVyL3NldHRlcnMuIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuXG4gKiB2YWx1ZSB0eXBlIGlzIE9iamVjdC5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbiB3YWxrIChvYmopIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMShvYmosIGtleXNbaV0sIG9ialtrZXlzW2ldXSk7XG4gIH1cbn07XG5cbi8qKlxuICogT2JzZXJ2ZSBhIGxpc3Qgb2YgQXJyYXkgaXRlbXMuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS5vYnNlcnZlQXJyYXkgPSBmdW5jdGlvbiBvYnNlcnZlQXJyYXkgKGl0ZW1zKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gaXRlbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb2JzZXJ2ZShpdGVtc1tpXSk7XG4gIH1cbn07XG5cbi8vIGhlbHBlcnNcblxuLyoqXG4gKiBBdWdtZW50IGFuIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgaW50ZXJjZXB0aW5nXG4gKiB0aGUgcHJvdG90eXBlIGNoYWluIHVzaW5nIF9fcHJvdG9fX1xuICovXG5mdW5jdGlvbiBwcm90b0F1Z21lbnQgKHRhcmdldCwgc3JjLCBrZXlzKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG4gIHRhcmdldC5fX3Byb3RvX18gPSBzcmM7XG4gIC8qIGVzbGludC1lbmFibGUgbm8tcHJvdG8gKi9cbn1cblxuLyoqXG4gKiBBdWdtZW50IGFuIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgZGVmaW5pbmdcbiAqIGhpZGRlbiBwcm9wZXJ0aWVzLlxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gY29weUF1Z21lbnQgKHRhcmdldCwgc3JjLCBrZXlzKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBkZWYodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgfVxufVxuXG4vKipcbiAqIEF0dGVtcHQgdG8gY3JlYXRlIGFuIG9ic2VydmVyIGluc3RhbmNlIGZvciBhIHZhbHVlLFxuICogcmV0dXJucyB0aGUgbmV3IG9ic2VydmVyIGlmIHN1Y2Nlc3NmdWxseSBvYnNlcnZlZCxcbiAqIG9yIHRoZSBleGlzdGluZyBvYnNlcnZlciBpZiB0aGUgdmFsdWUgYWxyZWFkeSBoYXMgb25lLlxuICovXG5mdW5jdGlvbiBvYnNlcnZlICh2YWx1ZSwgYXNSb290RGF0YSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYjtcbiAgaWYgKGhhc093bih2YWx1ZSwgJ19fb2JfXycpICYmIHZhbHVlLl9fb2JfXyBpbnN0YW5jZW9mIE9ic2VydmVyKSB7XG4gICAgb2IgPSB2YWx1ZS5fX29iX187XG4gIH0gZWxzZSBpZiAoXG4gICAgb2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0ICYmXG4gICAgIWlzU2VydmVyUmVuZGVyaW5nKCkgJiZcbiAgICAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgaXNQbGFpbk9iamVjdCh2YWx1ZSkpICYmXG4gICAgT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWx1ZSkgJiZcbiAgICAhdmFsdWUuX2lzVnVlXG4gICkge1xuICAgIG9iID0gbmV3IE9ic2VydmVyKHZhbHVlKTtcbiAgfVxuICBpZiAoYXNSb290RGF0YSAmJiBvYikge1xuICAgIG9iLnZtQ291bnQrKztcbiAgfVxuICByZXR1cm4gb2Jcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiBhbiBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGRlZmluZVJlYWN0aXZlJCQxIChcbiAgb2JqLFxuICBrZXksXG4gIHZhbCxcbiAgY3VzdG9tU2V0dGVyLFxuICBzaGFsbG93XG4pIHtcbiAgdmFyIGRlcCA9IG5ldyBEZXAoKTtcblxuICB2YXIgcHJvcGVydHkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KTtcbiAgaWYgKHByb3BlcnR5ICYmIHByb3BlcnR5LmNvbmZpZ3VyYWJsZSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGNhdGVyIGZvciBwcmUtZGVmaW5lZCBnZXR0ZXIvc2V0dGVyc1xuICB2YXIgZ2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuZ2V0O1xuICB2YXIgc2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuc2V0O1xuXG4gIHZhciBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZSh2YWwpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlR2V0dGVyICgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgICBkZXAuZGVwZW5kKCk7XG4gICAgICAgIGlmIChjaGlsZE9iKSB7XG4gICAgICAgICAgY2hpbGRPYi5kZXAuZGVwZW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgZGVwZW5kQXJyYXkodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gcmVhY3RpdmVTZXR0ZXIgKG5ld1ZhbCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKG5ld1ZhbCA9PT0gdmFsdWUgfHwgKG5ld1ZhbCAhPT0gbmV3VmFsICYmIHZhbHVlICE9PSB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY3VzdG9tU2V0dGVyKSB7XG4gICAgICAgIGN1c3RvbVNldHRlcigpO1xuICAgICAgfVxuICAgICAgaWYgKHNldHRlcikge1xuICAgICAgICBzZXR0ZXIuY2FsbChvYmosIG5ld1ZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBuZXdWYWw7XG4gICAgICB9XG4gICAgICBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZShuZXdWYWwpO1xuICAgICAgZGVwLm5vdGlmeSgpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IGEgcHJvcGVydHkgb24gYW4gb2JqZWN0LiBBZGRzIHRoZSBuZXcgcHJvcGVydHkgYW5kXG4gKiB0cmlnZ2VycyBjaGFuZ2Ugbm90aWZpY2F0aW9uIGlmIHRoZSBwcm9wZXJ0eSBkb2Vzbid0XG4gKiBhbHJlYWR5IGV4aXN0LlxuICovXG5mdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWwpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0Lmxlbmd0aCA9IE1hdGgubWF4KHRhcmdldC5sZW5ndGgsIGtleSk7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEsIHZhbCk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmIChoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGFkZGluZyByZWFjdGl2ZSBwcm9wZXJ0aWVzIHRvIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJ2F0IHJ1bnRpbWUgLSBkZWNsYXJlIGl0IHVwZnJvbnQgaW4gdGhlIGRhdGEgb3B0aW9uLidcbiAgICApO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBpZiAoIW9iKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGRlZmluZVJlYWN0aXZlJCQxKG9iLnZhbHVlLCBrZXksIHZhbCk7XG4gIG9iLmRlcC5ub3RpZnkoKTtcbiAgcmV0dXJuIHZhbFxufVxuXG4vKipcbiAqIERlbGV0ZSBhIHByb3BlcnR5IGFuZCB0cmlnZ2VyIGNoYW5nZSBpZiBuZWNlc3NhcnkuXG4gKi9cbmZ1bmN0aW9uIGRlbCAodGFyZ2V0LCBrZXkpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEpO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGRlbGV0aW5nIHByb3BlcnRpZXMgb24gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnLSBqdXN0IHNldCBpdCB0byBudWxsLidcbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICghaGFzT3duKHRhcmdldCwga2V5KSkge1xuICAgIHJldHVyblxuICB9XG4gIGRlbGV0ZSB0YXJnZXRba2V5XTtcbiAgaWYgKCFvYikge1xuICAgIHJldHVyblxuICB9XG4gIG9iLmRlcC5ub3RpZnkoKTtcbn1cblxuLyoqXG4gKiBDb2xsZWN0IGRlcGVuZGVuY2llcyBvbiBhcnJheSBlbGVtZW50cyB3aGVuIHRoZSBhcnJheSBpcyB0b3VjaGVkLCBzaW5jZVxuICogd2UgY2Fubm90IGludGVyY2VwdCBhcnJheSBlbGVtZW50IGFjY2VzcyBsaWtlIHByb3BlcnR5IGdldHRlcnMuXG4gKi9cbmZ1bmN0aW9uIGRlcGVuZEFycmF5ICh2YWx1ZSkge1xuICBmb3IgKHZhciBlID0gKHZvaWQgMCksIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZSA9IHZhbHVlW2ldO1xuICAgIGUgJiYgZS5fX29iX18gJiYgZS5fX29iX18uZGVwLmRlcGVuZCgpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSB7XG4gICAgICBkZXBlbmRBcnJheShlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogT3B0aW9uIG92ZXJ3cml0aW5nIHN0cmF0ZWdpZXMgYXJlIGZ1bmN0aW9ucyB0aGF0IGhhbmRsZVxuICogaG93IHRvIG1lcmdlIGEgcGFyZW50IG9wdGlvbiB2YWx1ZSBhbmQgYSBjaGlsZCBvcHRpb25cbiAqIHZhbHVlIGludG8gdGhlIGZpbmFsIHZhbHVlLlxuICovXG52YXIgc3RyYXRzID0gY29uZmlnLm9wdGlvbk1lcmdlU3RyYXRlZ2llcztcblxuLyoqXG4gKiBPcHRpb25zIHdpdGggcmVzdHJpY3Rpb25zXG4gKi9cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHN0cmF0cy5lbCA9IHN0cmF0cy5wcm9wc0RhdGEgPSBmdW5jdGlvbiAocGFyZW50LCBjaGlsZCwgdm0sIGtleSkge1xuICAgIGlmICghdm0pIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwib3B0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBjYW4gb25seSBiZSB1c2VkIGR1cmluZyBpbnN0YW5jZSBcIiArXG4gICAgICAgICdjcmVhdGlvbiB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkLidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0U3RyYXQocGFyZW50LCBjaGlsZClcbiAgfTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdGhhdCByZWN1cnNpdmVseSBtZXJnZXMgdHdvIGRhdGEgb2JqZWN0cyB0b2dldGhlci5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhICh0bywgZnJvbSkge1xuICBpZiAoIWZyb20pIHsgcmV0dXJuIHRvIH1cbiAgdmFyIGtleSwgdG9WYWwsIGZyb21WYWw7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZnJvbSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgdG9WYWwgPSB0b1trZXldO1xuICAgIGZyb21WYWwgPSBmcm9tW2tleV07XG4gICAgaWYgKCFoYXNPd24odG8sIGtleSkpIHtcbiAgICAgIHNldCh0bywga2V5LCBmcm9tVmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodG9WYWwpICYmIGlzUGxhaW5PYmplY3QoZnJvbVZhbCkpIHtcbiAgICAgIG1lcmdlRGF0YSh0b1ZhbCwgZnJvbVZhbCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIERhdGFcbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhT3JGbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIC8vIGluIGEgVnVlLmV4dGVuZCBtZXJnZSwgYm90aCBzaG91bGQgYmUgZnVuY3Rpb25zXG4gICAgaWYgKCFjaGlsZFZhbCkge1xuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICBpZiAoIXBhcmVudFZhbCkge1xuICAgICAgcmV0dXJuIGNoaWxkVmFsXG4gICAgfVxuICAgIC8vIHdoZW4gcGFyZW50VmFsICYgY2hpbGRWYWwgYXJlIGJvdGggcHJlc2VudCxcbiAgICAvLyB3ZSBuZWVkIHRvIHJldHVybiBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgICAvLyBtZXJnZWQgcmVzdWx0IG9mIGJvdGggZnVuY3Rpb25zLi4uIG5vIG5lZWQgdG9cbiAgICAvLyBjaGVjayBpZiBwYXJlbnRWYWwgaXMgYSBmdW5jdGlvbiBoZXJlIGJlY2F1c2VcbiAgICAvLyBpdCBoYXMgdG8gYmUgYSBmdW5jdGlvbiB0byBwYXNzIHByZXZpb3VzIG1lcmdlcy5cbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkRGF0YUZuICgpIHtcbiAgICAgIHJldHVybiBtZXJnZURhdGEoXG4gICAgICAgIHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkVmFsLmNhbGwodGhpcykgOiBjaGlsZFZhbCxcbiAgICAgICAgdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IHBhcmVudFZhbC5jYWxsKHRoaXMpIDogcGFyZW50VmFsXG4gICAgICApXG4gICAgfVxuICB9IGVsc2UgaWYgKHBhcmVudFZhbCB8fCBjaGlsZFZhbCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWRJbnN0YW5jZURhdGFGbiAoKSB7XG4gICAgICAvLyBpbnN0YW5jZSBtZXJnZVxuICAgICAgdmFyIGluc3RhbmNlRGF0YSA9IHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IGNoaWxkVmFsLmNhbGwodm0pXG4gICAgICAgIDogY2hpbGRWYWw7XG4gICAgICB2YXIgZGVmYXVsdERhdGEgPSB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcGFyZW50VmFsLmNhbGwodm0pXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKGluc3RhbmNlRGF0YSkge1xuICAgICAgICByZXR1cm4gbWVyZ2VEYXRhKGluc3RhbmNlRGF0YSwgZGVmYXVsdERhdGEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdERhdGFcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuc3RyYXRzLmRhdGEgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIGlmIChjaGlsZFZhbCAmJiB0eXBlb2YgY2hpbGRWYWwgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ1RoZSBcImRhdGFcIiBvcHRpb24gc2hvdWxkIGJlIGEgZnVuY3Rpb24gJyArXG4gICAgICAgICd0aGF0IHJldHVybnMgYSBwZXItaW5zdGFuY2UgdmFsdWUgaW4gY29tcG9uZW50ICcgK1xuICAgICAgICAnZGVmaW5pdGlvbnMuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlRGF0YU9yRm4uY2FsbCh0aGlzLCBwYXJlbnRWYWwsIGNoaWxkVmFsKVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pXG59O1xuXG4vKipcbiAqIEhvb2tzIGFuZCBwcm9wcyBhcmUgbWVyZ2VkIGFzIGFycmF5cy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VIb29rIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbFxuKSB7XG4gIHJldHVybiBjaGlsZFZhbFxuICAgID8gcGFyZW50VmFsXG4gICAgICA/IHBhcmVudFZhbC5jb25jYXQoY2hpbGRWYWwpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRWYWwpXG4gICAgICAgID8gY2hpbGRWYWxcbiAgICAgICAgOiBbY2hpbGRWYWxdXG4gICAgOiBwYXJlbnRWYWxcbn1cblxuTElGRUNZQ0xFX0hPT0tTLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgc3RyYXRzW2hvb2tdID0gbWVyZ2VIb29rO1xufSk7XG5cbi8qKlxuICogQXNzZXRzXG4gKlxuICogV2hlbiBhIHZtIGlzIHByZXNlbnQgKGluc3RhbmNlIGNyZWF0aW9uKSwgd2UgbmVlZCB0byBkb1xuICogYSB0aHJlZS13YXkgbWVyZ2UgYmV0d2VlbiBjb25zdHJ1Y3RvciBvcHRpb25zLCBpbnN0YW5jZVxuICogb3B0aW9ucyBhbmQgcGFyZW50IG9wdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQXNzZXRzIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKTtcbiAgcmV0dXJuIGNoaWxkVmFsXG4gICAgPyBleHRlbmQocmVzLCBjaGlsZFZhbClcbiAgICA6IHJlc1xufVxuXG5BU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gIHN0cmF0c1t0eXBlICsgJ3MnXSA9IG1lcmdlQXNzZXRzO1xufSk7XG5cbi8qKlxuICogV2F0Y2hlcnMuXG4gKlxuICogV2F0Y2hlcnMgaGFzaGVzIHNob3VsZCBub3Qgb3ZlcndyaXRlIG9uZVxuICogYW5vdGhlciwgc28gd2UgbWVyZ2UgdGhlbSBhcyBhcnJheXMuXG4gKi9cbnN0cmF0cy53YXRjaCA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gIC8vIHdvcmsgYXJvdW5kIEZpcmVmb3gncyBPYmplY3QucHJvdG90eXBlLndhdGNoLi4uXG4gIGlmIChwYXJlbnRWYWwgPT09IG5hdGl2ZVdhdGNoKSB7IHBhcmVudFZhbCA9IHVuZGVmaW5lZDsgfVxuICBpZiAoY2hpbGRWYWwgPT09IG5hdGl2ZVdhdGNoKSB7IGNoaWxkVmFsID0gdW5kZWZpbmVkOyB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNoaWxkVmFsKSB7IHJldHVybiBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKSB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSB7fTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgZm9yICh2YXIga2V5IGluIGNoaWxkVmFsKSB7XG4gICAgdmFyIHBhcmVudCA9IHJldFtrZXldO1xuICAgIHZhciBjaGlsZCA9IGNoaWxkVmFsW2tleV07XG4gICAgaWYgKHBhcmVudCAmJiAhQXJyYXkuaXNBcnJheShwYXJlbnQpKSB7XG4gICAgICBwYXJlbnQgPSBbcGFyZW50XTtcbiAgICB9XG4gICAgcmV0W2tleV0gPSBwYXJlbnRcbiAgICAgID8gcGFyZW50LmNvbmNhdChjaGlsZClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZCkgPyBjaGlsZCA6IFtjaGlsZF07XG4gIH1cbiAgcmV0dXJuIHJldFxufTtcblxuLyoqXG4gKiBPdGhlciBvYmplY3QgaGFzaGVzLlxuICovXG5zdHJhdHMucHJvcHMgPVxuc3RyYXRzLm1ldGhvZHMgPVxuc3RyYXRzLmluamVjdCA9XG5zdHJhdHMuY29tcHV0ZWQgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuICB2YXIgcmV0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgaWYgKGNoaWxkVmFsKSB7IGV4dGVuZChyZXQsIGNoaWxkVmFsKTsgfVxuICByZXR1cm4gcmV0XG59O1xuc3RyYXRzLnByb3ZpZGUgPSBtZXJnZURhdGFPckZuO1xuXG4vKipcbiAqIERlZmF1bHQgc3RyYXRlZ3kuXG4gKi9cbnZhciBkZWZhdWx0U3RyYXQgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICByZXR1cm4gY2hpbGRWYWwgPT09IHVuZGVmaW5lZFxuICAgID8gcGFyZW50VmFsXG4gICAgOiBjaGlsZFZhbFxufTtcblxuLyoqXG4gKiBWYWxpZGF0ZSBjb21wb25lbnQgbmFtZXNcbiAqL1xuZnVuY3Rpb24gY2hlY2tDb21wb25lbnRzIChvcHRpb25zKSB7XG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLmNvbXBvbmVudHMpIHtcbiAgICB2YXIgbG93ZXIgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoaXNCdWlsdEluVGFnKGxvd2VyKSB8fCBjb25maWcuaXNSZXNlcnZlZFRhZyhsb3dlcikpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuICAgICAgICAnaWQ6ICcgKyBrZXlcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRW5zdXJlIGFsbCBwcm9wcyBvcHRpb24gc3ludGF4IGFyZSBub3JtYWxpemVkIGludG8gdGhlXG4gKiBPYmplY3QtYmFzZWQgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVQcm9wcyAob3B0aW9ucykge1xuICB2YXIgcHJvcHMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoIXByb3BzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGksIHZhbCwgbmFtZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YWwgPSBwcm9wc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICBuYW1lID0gY2FtZWxpemUodmFsKTtcbiAgICAgICAgcmVzW25hbWVdID0geyB0eXBlOiBudWxsIH07XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybigncHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LicpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgdmFsID0gcHJvcHNba2V5XTtcbiAgICAgIG5hbWUgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgcmVzW25hbWVdID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gdmFsXG4gICAgICAgIDogeyB0eXBlOiB2YWwgfTtcbiAgICB9XG4gIH1cbiAgb3B0aW9ucy5wcm9wcyA9IHJlcztcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYWxsIGluamVjdGlvbnMgaW50byBPYmplY3QtYmFzZWQgZm9ybWF0XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZUluamVjdCAob3B0aW9ucykge1xuICB2YXIgaW5qZWN0ID0gb3B0aW9ucy5pbmplY3Q7XG4gIGlmIChBcnJheS5pc0FycmF5KGluamVjdCkpIHtcbiAgICB2YXIgbm9ybWFsaXplZCA9IG9wdGlvbnMuaW5qZWN0ID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmplY3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5vcm1hbGl6ZWRbaW5qZWN0W2ldXSA9IGluamVjdFtpXTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgcmF3IGZ1bmN0aW9uIGRpcmVjdGl2ZXMgaW50byBvYmplY3QgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzIChvcHRpb25zKSB7XG4gIHZhciBkaXJzID0gb3B0aW9ucy5kaXJlY3RpdmVzO1xuICBpZiAoZGlycykge1xuICAgIGZvciAodmFyIGtleSBpbiBkaXJzKSB7XG4gICAgICB2YXIgZGVmID0gZGlyc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYsIHVwZGF0ZTogZGVmIH07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgdHdvIG9wdGlvbiBvYmplY3RzIGludG8gYSBuZXcgb25lLlxuICogQ29yZSB1dGlsaXR5IHVzZWQgaW4gYm90aCBpbnN0YW50aWF0aW9uIGFuZCBpbmhlcml0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VPcHRpb25zIChcbiAgcGFyZW50LFxuICBjaGlsZCxcbiAgdm1cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNoZWNrQ29tcG9uZW50cyhjaGlsZCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGNoaWxkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2hpbGQgPSBjaGlsZC5vcHRpb25zO1xuICB9XG5cbiAgbm9ybWFsaXplUHJvcHMoY2hpbGQpO1xuICBub3JtYWxpemVJbmplY3QoY2hpbGQpO1xuICBub3JtYWxpemVEaXJlY3RpdmVzKGNoaWxkKTtcbiAgdmFyIGV4dGVuZHNGcm9tID0gY2hpbGQuZXh0ZW5kcztcbiAgaWYgKGV4dGVuZHNGcm9tKSB7XG4gICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgZXh0ZW5kc0Zyb20sIHZtKTtcbiAgfVxuICBpZiAoY2hpbGQubWl4aW5zKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZC5taXhpbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5taXhpbnNbaV0sIHZtKTtcbiAgICB9XG4gIH1cbiAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gcGFyZW50KSB7XG4gICAgbWVyZ2VGaWVsZChrZXkpO1xuICB9XG4gIGZvciAoa2V5IGluIGNoaWxkKSB7XG4gICAgaWYgKCFoYXNPd24ocGFyZW50LCBrZXkpKSB7XG4gICAgICBtZXJnZUZpZWxkKGtleSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1lcmdlRmllbGQgKGtleSkge1xuICAgIHZhciBzdHJhdCA9IHN0cmF0c1trZXldIHx8IGRlZmF1bHRTdHJhdDtcbiAgICBvcHRpb25zW2tleV0gPSBzdHJhdChwYXJlbnRba2V5XSwgY2hpbGRba2V5XSwgdm0sIGtleSk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuLyoqXG4gKiBSZXNvbHZlIGFuIGFzc2V0LlxuICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGJlY2F1c2UgY2hpbGQgaW5zdGFuY2VzIG5lZWQgYWNjZXNzXG4gKiB0byBhc3NldHMgZGVmaW5lZCBpbiBpdHMgYW5jZXN0b3IgY2hhaW4uXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVBc3NldCAoXG4gIG9wdGlvbnMsXG4gIHR5cGUsXG4gIGlkLFxuICB3YXJuTWlzc2luZ1xuKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodHlwZW9mIGlkICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBhc3NldHMgPSBvcHRpb25zW3R5cGVdO1xuICAvLyBjaGVjayBsb2NhbCByZWdpc3RyYXRpb24gdmFyaWF0aW9ucyBmaXJzdFxuICBpZiAoaGFzT3duKGFzc2V0cywgaWQpKSB7IHJldHVybiBhc3NldHNbaWRdIH1cbiAgdmFyIGNhbWVsaXplZElkID0gY2FtZWxpemUoaWQpO1xuICBpZiAoaGFzT3duKGFzc2V0cywgY2FtZWxpemVkSWQpKSB7IHJldHVybiBhc3NldHNbY2FtZWxpemVkSWRdIH1cbiAgdmFyIFBhc2NhbENhc2VJZCA9IGNhcGl0YWxpemUoY2FtZWxpemVkSWQpO1xuICBpZiAoaGFzT3duKGFzc2V0cywgUGFzY2FsQ2FzZUlkKSkgeyByZXR1cm4gYXNzZXRzW1Bhc2NhbENhc2VJZF0gfVxuICAvLyBmYWxsYmFjayB0byBwcm90b3R5cGUgY2hhaW5cbiAgdmFyIHJlcyA9IGFzc2V0c1tpZF0gfHwgYXNzZXRzW2NhbWVsaXplZElkXSB8fCBhc3NldHNbUGFzY2FsQ2FzZUlkXTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2Fybk1pc3NpbmcgJiYgIXJlcykge1xuICAgIHdhcm4oXG4gICAgICAnRmFpbGVkIHRvIHJlc29sdmUgJyArIHR5cGUuc2xpY2UoMCwgLTEpICsgJzogJyArIGlkLFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wIChcbiAga2V5LFxuICBwcm9wT3B0aW9ucyxcbiAgcHJvcHNEYXRhLFxuICB2bVxuKSB7XG4gIHZhciBwcm9wID0gcHJvcE9wdGlvbnNba2V5XTtcbiAgdmFyIGFic2VudCA9ICFoYXNPd24ocHJvcHNEYXRhLCBrZXkpO1xuICB2YXIgdmFsdWUgPSBwcm9wc0RhdGFba2V5XTtcbiAgLy8gaGFuZGxlIGJvb2xlYW4gcHJvcHNcbiAgaWYgKGlzVHlwZShCb29sZWFuLCBwcm9wLnR5cGUpKSB7XG4gICAgaWYgKGFic2VudCAmJiAhaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICAgIHZhbHVlID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmICghaXNUeXBlKFN0cmluZywgcHJvcC50eXBlKSAmJiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBoeXBoZW5hdGUoa2V5KSkpIHtcbiAgICAgIHZhbHVlID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgLy8gY2hlY2sgZGVmYXVsdCB2YWx1ZVxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhbHVlID0gZ2V0UHJvcERlZmF1bHRWYWx1ZSh2bSwgcHJvcCwga2V5KTtcbiAgICAvLyBzaW5jZSB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBhIGZyZXNoIGNvcHksXG4gICAgLy8gbWFrZSBzdXJlIHRvIG9ic2VydmUgaXQuXG4gICAgdmFyIHByZXZTaG91bGRDb252ZXJ0ID0gb2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0O1xuICAgIG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydCA9IHRydWU7XG4gICAgb2JzZXJ2ZSh2YWx1ZSk7XG4gICAgb2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0ID0gcHJldlNob3VsZENvbnZlcnQ7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRQcm9wKHByb3AsIGtleSwgdmFsdWUsIHZtLCBhYnNlbnQpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhIHByb3AuXG4gKi9cbmZ1bmN0aW9uIGdldFByb3BEZWZhdWx0VmFsdWUgKHZtLCBwcm9wLCBrZXkpIHtcbiAgLy8gbm8gZGVmYXVsdCwgcmV0dXJuIHVuZGVmaW5lZFxuICBpZiAoIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIHZhciBkZWYgPSBwcm9wLmRlZmF1bHQ7XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tZmFjdG9yeSBkZWZhdWx0cyBmb3IgT2JqZWN0ICYgQXJyYXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNPYmplY3QoZGVmKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBkZWZhdWx0IHZhbHVlIGZvciBwcm9wIFwiJyArIGtleSArICdcIjogJyArXG4gICAgICAnUHJvcHMgd2l0aCB0eXBlIE9iamVjdC9BcnJheSBtdXN0IHVzZSBhIGZhY3RvcnkgZnVuY3Rpb24gJyArXG4gICAgICAndG8gcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlLicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gdGhlIHJhdyBwcm9wIHZhbHVlIHdhcyBhbHNvIHVuZGVmaW5lZCBmcm9tIHByZXZpb3VzIHJlbmRlcixcbiAgLy8gcmV0dXJuIHByZXZpb3VzIGRlZmF1bHQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3Nhcnkgd2F0Y2hlciB0cmlnZ2VyXG4gIGlmICh2bSAmJiB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgJiZcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGFba2V5XSA9PT0gdW5kZWZpbmVkICYmXG4gICAgdm0uX3Byb3BzW2tleV0gIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICByZXR1cm4gdm0uX3Byb3BzW2tleV1cbiAgfVxuICAvLyBjYWxsIGZhY3RvcnkgZnVuY3Rpb24gZm9yIG5vbi1GdW5jdGlvbiB0eXBlc1xuICAvLyBhIHZhbHVlIGlzIEZ1bmN0aW9uIGlmIGl0cyBwcm90b3R5cGUgaXMgZnVuY3Rpb24gZXZlbiBhY3Jvc3MgZGlmZmVyZW50IGV4ZWN1dGlvbiBjb250ZXh0XG4gIHJldHVybiB0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIGdldFR5cGUocHJvcC50eXBlKSAhPT0gJ0Z1bmN0aW9uJ1xuICAgID8gZGVmLmNhbGwodm0pXG4gICAgOiBkZWZcbn1cblxuLyoqXG4gKiBBc3NlcnQgd2hldGhlciBhIHByb3AgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFByb3AgKFxuICBwcm9wLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgdm0sXG4gIGFic2VudFxuKSB7XG4gIGlmIChwcm9wLnJlcXVpcmVkICYmIGFic2VudCkge1xuICAgIHdhcm4oXG4gICAgICAnTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhcHJvcC5yZXF1aXJlZCkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciB0eXBlID0gcHJvcC50eXBlO1xuICB2YXIgdmFsaWQgPSAhdHlwZSB8fCB0eXBlID09PSB0cnVlO1xuICB2YXIgZXhwZWN0ZWRUeXBlcyA9IFtdO1xuICBpZiAodHlwZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgdHlwZSA9IFt0eXBlXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aCAmJiAhdmFsaWQ7IGkrKykge1xuICAgICAgdmFyIGFzc2VydGVkVHlwZSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVbaV0pO1xuICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGFzc2VydGVkVHlwZS5leHBlY3RlZFR5cGUgfHwgJycpO1xuICAgICAgdmFsaWQgPSBhc3NlcnRlZFR5cGUudmFsaWQ7XG4gICAgfVxuICB9XG4gIGlmICghdmFsaWQpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ludmFsaWQgcHJvcDogdHlwZSBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nICtcbiAgICAgICcgRXhwZWN0ZWQgJyArIGV4cGVjdGVkVHlwZXMubWFwKGNhcGl0YWxpemUpLmpvaW4oJywgJykgK1xuICAgICAgJywgZ290ICcgKyBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKSArICcuJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdmFsaWRhdG9yID0gcHJvcC52YWxpZGF0b3I7XG4gIGlmICh2YWxpZGF0b3IpIHtcbiAgICBpZiAoIXZhbGlkYXRvcih2YWx1ZSkpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdJbnZhbGlkIHByb3A6IGN1c3RvbSB2YWxpZGF0b3IgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFwiJyArIG5hbWUgKyAnXCIuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbnZhciBzaW1wbGVDaGVja1JFID0gL14oU3RyaW5nfE51bWJlcnxCb29sZWFufEZ1bmN0aW9ufFN5bWJvbCkkLztcblxuZnVuY3Rpb24gYXNzZXJ0VHlwZSAodmFsdWUsIHR5cGUpIHtcbiAgdmFyIHZhbGlkO1xuICB2YXIgZXhwZWN0ZWRUeXBlID0gZ2V0VHlwZSh0eXBlKTtcbiAgaWYgKHNpbXBsZUNoZWNrUkUudGVzdChleHBlY3RlZFR5cGUpKSB7XG4gICAgdmFsaWQgPSB0eXBlb2YgdmFsdWUgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ09iamVjdCcpIHtcbiAgICB2YWxpZCA9IGlzUGxhaW5PYmplY3QodmFsdWUpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0FycmF5Jykge1xuICAgIHZhbGlkID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZDogdmFsaWQsXG4gICAgZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGVcbiAgfVxufVxuXG4vKipcbiAqIFVzZSBmdW5jdGlvbiBzdHJpbmcgbmFtZSB0byBjaGVjayBidWlsdC1pbiB0eXBlcyxcbiAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuICogYWNyb3NzIGRpZmZlcmVudCB2bXMgLyBpZnJhbWVzLlxuICovXG5mdW5jdGlvbiBnZXRUeXBlIChmbikge1xuICB2YXIgbWF0Y2ggPSBmbiAmJiBmbi50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChcXHcrKS8pO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnXG59XG5cbmZ1bmN0aW9uIGlzVHlwZSAodHlwZSwgZm4pIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGZuKSkge1xuICAgIHJldHVybiBnZXRUeXBlKGZuKSA9PT0gZ2V0VHlwZSh0eXBlKVxuICB9XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBmbi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChnZXRUeXBlKGZuW2ldKSA9PT0gZ2V0VHlwZSh0eXBlKSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qICAqL1xuXG4vKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGggUHJveHkgKi9cblxudmFyIGluaXRQcm94eTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGFsbG93ZWRHbG9iYWxzID0gbWFrZU1hcChcbiAgICAnSW5maW5pdHksdW5kZWZpbmVkLE5hTixpc0Zpbml0ZSxpc05hTiwnICtcbiAgICAncGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsJyArXG4gICAgJ01hdGgsTnVtYmVyLERhdGUsQXJyYXksT2JqZWN0LEJvb2xlYW4sU3RyaW5nLFJlZ0V4cCxNYXAsU2V0LEpTT04sSW50bCwnICtcbiAgICAncmVxdWlyZScgLy8gZm9yIFdlYnBhY2svQnJvd3NlcmlmeVxuICApO1xuXG4gIHZhciB3YXJuTm9uUHJlc2VudCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHdhcm4oXG4gICAgICBcIlByb3BlcnR5IG9yIG1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgbm90IGRlZmluZWQgb24gdGhlIGluc3RhbmNlIGJ1dCBcIiArXG4gICAgICBcInJlZmVyZW5jZWQgZHVyaW5nIHJlbmRlci4gTWFrZSBzdXJlIHRvIGRlY2xhcmUgcmVhY3RpdmUgZGF0YSBcIiArXG4gICAgICBcInByb3BlcnRpZXMgaW4gdGhlIGRhdGEgb3B0aW9uLlwiLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgaGFzUHJveHkgPVxuICAgIHR5cGVvZiBQcm94eSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICBQcm94eS50b1N0cmluZygpLm1hdGNoKC9uYXRpdmUgY29kZS8pO1xuXG4gIGlmIChoYXNQcm94eSkge1xuICAgIHZhciBpc0J1aWx0SW5Nb2RpZmllciA9IG1ha2VNYXAoJ3N0b3AscHJldmVudCxzZWxmLGN0cmwsc2hpZnQsYWx0LG1ldGEnKTtcbiAgICBjb25maWcua2V5Q29kZXMgPSBuZXcgUHJveHkoY29uZmlnLmtleUNvZGVzLCB7XG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0J1aWx0SW5Nb2RpZmllcihrZXkpKSB7XG4gICAgICAgICAgd2FybigoXCJBdm9pZCBvdmVyd3JpdGluZyBidWlsdC1pbiBtb2RpZmllciBpbiBjb25maWcua2V5Q29kZXM6IC5cIiArIGtleSkpO1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGhhc0hhbmRsZXIgPSB7XG4gICAgaGFzOiBmdW5jdGlvbiBoYXMgKHRhcmdldCwga2V5KSB7XG4gICAgICB2YXIgaGFzID0ga2V5IGluIHRhcmdldDtcbiAgICAgIHZhciBpc0FsbG93ZWQgPSBhbGxvd2VkR2xvYmFscyhrZXkpIHx8IGtleS5jaGFyQXQoMCkgPT09ICdfJztcbiAgICAgIGlmICghaGFzICYmICFpc0FsbG93ZWQpIHtcbiAgICAgICAgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhcyB8fCAhaXNBbGxvd2VkXG4gICAgfVxuICB9O1xuXG4gIHZhciBnZXRIYW5kbGVyID0ge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICh0YXJnZXQsIGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmICEoa2V5IGluIHRhcmdldCkpIHtcbiAgICAgICAgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRhcmdldFtrZXldXG4gICAgfVxuICB9O1xuXG4gIGluaXRQcm94eSA9IGZ1bmN0aW9uIGluaXRQcm94eSAodm0pIHtcbiAgICBpZiAoaGFzUHJveHkpIHtcbiAgICAgIC8vIGRldGVybWluZSB3aGljaCBwcm94eSBoYW5kbGVyIHRvIHVzZVxuICAgICAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcbiAgICAgIHZhciBoYW5kbGVycyA9IG9wdGlvbnMucmVuZGVyICYmIG9wdGlvbnMucmVuZGVyLl93aXRoU3RyaXBwZWRcbiAgICAgICAgPyBnZXRIYW5kbGVyXG4gICAgICAgIDogaGFzSGFuZGxlcjtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IG5ldyBQcm94eSh2bSwgaGFuZGxlcnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBtYXJrO1xudmFyIG1lYXN1cmU7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwZXJmID0gaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChcbiAgICBwZXJmICYmXG4gICAgcGVyZi5tYXJrICYmXG4gICAgcGVyZi5tZWFzdXJlICYmXG4gICAgcGVyZi5jbGVhck1hcmtzICYmXG4gICAgcGVyZi5jbGVhck1lYXN1cmVzXG4gICkge1xuICAgIG1hcmsgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiBwZXJmLm1hcmsodGFnKTsgfTtcbiAgICBtZWFzdXJlID0gZnVuY3Rpb24gKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpIHtcbiAgICAgIHBlcmYubWVhc3VyZShuYW1lLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhzdGFydFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNZWFzdXJlcyhuYW1lKTtcbiAgICB9O1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgVk5vZGUgPSBmdW5jdGlvbiBWTm9kZSAoXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIHRleHQsXG4gIGVsbSxcbiAgY29udGV4dCxcbiAgY29tcG9uZW50T3B0aW9ucyxcbiAgYXN5bmNGYWN0b3J5XG4pIHtcbiAgdGhpcy50YWcgPSB0YWc7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgdGhpcy5lbG0gPSBlbG07XG4gIHRoaXMubnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuZnVuY3Rpb25hbENvbnRleHQgPSB1bmRlZmluZWQ7XG4gIHRoaXMua2V5ID0gZGF0YSAmJiBkYXRhLmtleTtcbiAgdGhpcy5jb21wb25lbnRPcHRpb25zID0gY29tcG9uZW50T3B0aW9ucztcbiAgdGhpcy5jb21wb25lbnRJbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gIHRoaXMucmF3ID0gZmFsc2U7XG4gIHRoaXMuaXNTdGF0aWMgPSBmYWxzZTtcbiAgdGhpcy5pc1Jvb3RJbnNlcnQgPSB0cnVlO1xuICB0aGlzLmlzQ29tbWVudCA9IGZhbHNlO1xuICB0aGlzLmlzQ2xvbmVkID0gZmFsc2U7XG4gIHRoaXMuaXNPbmNlID0gZmFsc2U7XG4gIHRoaXMuYXN5bmNGYWN0b3J5ID0gYXN5bmNGYWN0b3J5O1xuICB0aGlzLmFzeW5jTWV0YSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5pc0FzeW5jUGxhY2Vob2xkZXIgPSBmYWxzZTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGNoaWxkOiB7fSB9O1xuXG4vLyBERVBSRUNBVEVEOiBhbGlhcyBmb3IgY29tcG9uZW50SW5zdGFuY2UgZm9yIGJhY2t3YXJkcyBjb21wYXQuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xucHJvdG90eXBlQWNjZXNzb3JzLmNoaWxkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY29tcG9uZW50SW5zdGFuY2Vcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWTm9kZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgY3JlYXRlRW1wdHlWTm9kZSA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gIGlmICggdGV4dCA9PT0gdm9pZCAwICkgdGV4dCA9ICcnO1xuXG4gIHZhciBub2RlID0gbmV3IFZOb2RlKCk7XG4gIG5vZGUudGV4dCA9IHRleHQ7XG4gIG5vZGUuaXNDb21tZW50ID0gdHJ1ZTtcbiAgcmV0dXJuIG5vZGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHRWTm9kZSAodmFsKSB7XG4gIHJldHVybiBuZXcgVk5vZGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgU3RyaW5nKHZhbCkpXG59XG5cbi8vIG9wdGltaXplZCBzaGFsbG93IGNsb25lXG4vLyB1c2VkIGZvciBzdGF0aWMgbm9kZXMgYW5kIHNsb3Qgbm9kZXMgYmVjYXVzZSB0aGV5IG1heSBiZSByZXVzZWQgYWNyb3NzXG4vLyBtdWx0aXBsZSByZW5kZXJzLCBjbG9uaW5nIHRoZW0gYXZvaWRzIGVycm9ycyB3aGVuIERPTSBtYW5pcHVsYXRpb25zIHJlbHlcbi8vIG9uIHRoZWlyIGVsbSByZWZlcmVuY2UuXG5mdW5jdGlvbiBjbG9uZVZOb2RlICh2bm9kZSkge1xuICB2YXIgY2xvbmVkID0gbmV3IFZOb2RlKFxuICAgIHZub2RlLnRhZyxcbiAgICB2bm9kZS5kYXRhLFxuICAgIHZub2RlLmNoaWxkcmVuLFxuICAgIHZub2RlLnRleHQsXG4gICAgdm5vZGUuZWxtLFxuICAgIHZub2RlLmNvbnRleHQsXG4gICAgdm5vZGUuY29tcG9uZW50T3B0aW9ucyxcbiAgICB2bm9kZS5hc3luY0ZhY3RvcnlcbiAgKTtcbiAgY2xvbmVkLm5zID0gdm5vZGUubnM7XG4gIGNsb25lZC5pc1N0YXRpYyA9IHZub2RlLmlzU3RhdGljO1xuICBjbG9uZWQua2V5ID0gdm5vZGUua2V5O1xuICBjbG9uZWQuaXNDb21tZW50ID0gdm5vZGUuaXNDb21tZW50O1xuICBjbG9uZWQuaXNDbG9uZWQgPSB0cnVlO1xuICByZXR1cm4gY2xvbmVkXG59XG5cbmZ1bmN0aW9uIGNsb25lVk5vZGVzICh2bm9kZXMpIHtcbiAgdmFyIGxlbiA9IHZub2Rlcy5sZW5ndGg7XG4gIHZhciByZXMgPSBuZXcgQXJyYXkobGVuKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIHJlc1tpXSA9IGNsb25lVk5vZGUodm5vZGVzW2ldKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIHBhc3NpdmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyYnO1xuICBuYW1lID0gcGFzc2l2ZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgb25jZSQkMSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcbiAgbmFtZSA9IG9uY2UkJDEgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnO1xuICBuYW1lID0gY2FwdHVyZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgb25jZTogb25jZSQkMSxcbiAgICBjYXB0dXJlOiBjYXB0dXJlLFxuICAgIHBhc3NpdmU6IHBhc3NpdmVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZuSW52b2tlciAoZm5zKSB7XG4gIGZ1bmN0aW9uIGludm9rZXIgKCkge1xuICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgIHZhciBmbnMgPSBpbnZva2VyLmZucztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnMpKSB7XG4gICAgICB2YXIgY2xvbmVkID0gZm5zLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjbG9uZWRbaV0uYXBwbHkobnVsbCwgYXJndW1lbnRzJDEpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXR1cm4gaGFuZGxlciByZXR1cm4gdmFsdWUgZm9yIHNpbmdsZSBoYW5kbGVyc1xuICAgICAgcmV0dXJuIGZucy5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgfVxuICB9XG4gIGludm9rZXIuZm5zID0gZm5zO1xuICByZXR1cm4gaW52b2tlclxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaXN0ZW5lcnMgKFxuICBvbixcbiAgb2xkT24sXG4gIGFkZCxcbiAgcmVtb3ZlJCQxLFxuICB2bVxuKSB7XG4gIHZhciBuYW1lLCBjdXIsIG9sZCwgZXZlbnQ7XG4gIGZvciAobmFtZSBpbiBvbikge1xuICAgIGN1ciA9IG9uW25hbWVdO1xuICAgIG9sZCA9IG9sZE9uW25hbWVdO1xuICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgaWYgKGlzVW5kZWYoY3VyKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkludmFsaWQgaGFuZGxlciBmb3IgZXZlbnQgXFxcIlwiICsgKGV2ZW50Lm5hbWUpICsgXCJcXFwiOiBnb3QgXCIgKyBTdHJpbmcoY3VyKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZCkpIHtcbiAgICAgIGlmIChpc1VuZGVmKGN1ci5mbnMpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlRm5JbnZva2VyKGN1cik7XG4gICAgICB9XG4gICAgICBhZGQoZXZlbnQubmFtZSwgY3VyLCBldmVudC5vbmNlLCBldmVudC5jYXB0dXJlLCBldmVudC5wYXNzaXZlKTtcbiAgICB9IGVsc2UgaWYgKGN1ciAhPT0gb2xkKSB7XG4gICAgICBvbGQuZm5zID0gY3VyO1xuICAgICAgb25bbmFtZV0gPSBvbGQ7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBvbGRPbikge1xuICAgIGlmIChpc1VuZGVmKG9uW25hbWVdKSkge1xuICAgICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICAgIHJlbW92ZSQkMShldmVudC5uYW1lLCBvbGRPbltuYW1lXSwgZXZlbnQuY2FwdHVyZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBtZXJnZVZOb2RlSG9vayAoZGVmLCBob29rS2V5LCBob29rKSB7XG4gIHZhciBpbnZva2VyO1xuICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTtcblxuICBmdW5jdGlvbiB3cmFwcGVkSG9vayAoKSB7XG4gICAgaG9vay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIC8vIGltcG9ydGFudDogcmVtb3ZlIG1lcmdlZCBob29rIHRvIGVuc3VyZSBpdCdzIGNhbGxlZCBvbmx5IG9uY2VcbiAgICAvLyBhbmQgcHJldmVudCBtZW1vcnkgbGVha1xuICAgIHJlbW92ZShpbnZva2VyLmZucywgd3JhcHBlZEhvb2spO1xuICB9XG5cbiAgaWYgKGlzVW5kZWYob2xkSG9vaykpIHtcbiAgICAvLyBubyBleGlzdGluZyBob29rXG4gICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbd3JhcHBlZEhvb2tdKTtcbiAgfSBlbHNlIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNEZWYob2xkSG9vay5mbnMpICYmIGlzVHJ1ZShvbGRIb29rLm1lcmdlZCkpIHtcbiAgICAgIC8vIGFscmVhZHkgYSBtZXJnZWQgaW52b2tlclxuICAgICAgaW52b2tlciA9IG9sZEhvb2s7XG4gICAgICBpbnZva2VyLmZucy5wdXNoKHdyYXBwZWRIb29rKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgcGxhaW4gaG9va1xuICAgICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbb2xkSG9vaywgd3JhcHBlZEhvb2tdKTtcbiAgICB9XG4gIH1cblxuICBpbnZva2VyLm1lcmdlZCA9IHRydWU7XG4gIGRlZltob29rS2V5XSA9IGludm9rZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIChcbiAgZGF0YSxcbiAgQ3RvcixcbiAgdGFnXG4pIHtcbiAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuXG4gIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuICAvLyBjb21wb25lbnQgaXRzZWxmLlxuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGF0dHJzID0gZGF0YS5hdHRycztcbiAgdmFyIHByb3BzID0gZGF0YS5wcm9wcztcbiAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBrZXlJbkxvd2VyQ2FzZSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ICE9PSBrZXlJbkxvd2VyQ2FzZSAmJlxuICAgICAgICAgIGF0dHJzICYmIGhhc093bihhdHRycywga2V5SW5Mb3dlckNhc2UpXG4gICAgICAgICkge1xuICAgICAgICAgIHRpcChcbiAgICAgICAgICAgIFwiUHJvcCBcXFwiXCIgKyBrZXlJbkxvd2VyQ2FzZSArIFwiXFxcIiBpcyBwYXNzZWQgdG8gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHRhZyB8fCBDdG9yKSkgKyBcIiwgYnV0IHRoZSBkZWNsYXJlZCBwcm9wIG5hbWUgaXNcIiArXG4gICAgICAgICAgICBcIiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgY2FtZWxDYXNlZCBcIiArXG4gICAgICAgICAgICBcInByb3BzIG5lZWQgdG8gdXNlIHRoZWlyIGtlYmFiLWNhc2UgZXF1aXZhbGVudHMgd2hlbiB1c2luZyBpbi1ET00gXCIgK1xuICAgICAgICAgICAgXCJ0ZW1wbGF0ZXMuIFlvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIGFsdEtleSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGtleSArIFwiXFxcIi5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoZWNrUHJvcChyZXMsIHByb3BzLCBrZXksIGFsdEtleSwgdHJ1ZSkgfHxcbiAgICAgIGNoZWNrUHJvcChyZXMsIGF0dHJzLCBrZXksIGFsdEtleSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGNoZWNrUHJvcCAoXG4gIHJlcyxcbiAgaGFzaCxcbiAga2V5LFxuICBhbHRLZXksXG4gIHByZXNlcnZlXG4pIHtcbiAgaWYgKGlzRGVmKGhhc2gpKSB7XG4gICAgaWYgKGhhc093bihoYXNoLCBrZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hba2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIGlmIChoYXNPd24oaGFzaCwgYWx0S2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2FsdEtleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2FsdEtleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogICovXG5cbi8vIFRoZSB0ZW1wbGF0ZSBjb21waWxlciBhdHRlbXB0cyB0byBtaW5pbWl6ZSB0aGUgbmVlZCBmb3Igbm9ybWFsaXphdGlvbiBieVxuLy8gc3RhdGljYWxseSBhbmFseXppbmcgdGhlIHRlbXBsYXRlIGF0IGNvbXBpbGUgdGltZS5cbi8vXG4vLyBGb3IgcGxhaW4gSFRNTCBtYXJrdXAsIG5vcm1hbGl6YXRpb24gY2FuIGJlIGNvbXBsZXRlbHkgc2tpcHBlZCBiZWNhdXNlIHRoZVxuLy8gZ2VuZXJhdGVkIHJlbmRlciBmdW5jdGlvbiBpcyBndWFyYW50ZWVkIHRvIHJldHVybiBBcnJheTxWTm9kZT4uIFRoZXJlIGFyZVxuLy8gdHdvIGNhc2VzIHdoZXJlIGV4dHJhIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkOlxuXG4vLyAxLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb21wb25lbnRzIC0gYmVjYXVzZSBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4vLyBtYXkgcmV0dXJuIGFuIEFycmF5IGluc3RlYWQgb2YgYSBzaW5nbGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBqdXN0IGEgc2ltcGxlXG4vLyBub3JtYWxpemF0aW9uIGlzIG5lZWRlZCAtIGlmIGFueSBjaGlsZCBpcyBhbiBBcnJheSwgd2UgZmxhdHRlbiB0aGUgd2hvbGVcbi8vIHRoaW5nIHdpdGggQXJyYXkucHJvdG90eXBlLmNvbmNhdC4gSXQgaXMgZ3VhcmFudGVlZCB0byBiZSBvbmx5IDEtbGV2ZWwgZGVlcFxuLy8gYmVjYXVzZSBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYWxyZWFkeSBub3JtYWxpemUgdGhlaXIgb3duIGNoaWxkcmVuLlxuZnVuY3Rpb24gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBjaGlsZHJlbilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoaWxkcmVuXG59XG5cbi8vIDIuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbnN0cnVjdHMgdGhhdCBhbHdheXMgZ2VuZXJhdGVkIG5lc3RlZCBBcnJheXMsXG4vLyBlLmcuIDx0ZW1wbGF0ZT4sIDxzbG90Piwgdi1mb3IsIG9yIHdoZW4gdGhlIGNoaWxkcmVuIGlzIHByb3ZpZGVkIGJ5IHVzZXJcbi8vIHdpdGggaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMgLyBKU1guIEluIHN1Y2ggY2FzZXMgYSBmdWxsIG5vcm1hbGl6YXRpb25cbi8vIGlzIG5lZWRlZCB0byBjYXRlciB0byBhbGwgcG9zc2libGUgdHlwZXMgb2YgY2hpbGRyZW4gdmFsdWVzLlxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIHJldHVybiBpc1ByaW1pdGl2ZShjaGlsZHJlbilcbiAgICA/IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXVxuICAgIDogQXJyYXkuaXNBcnJheShjaGlsZHJlbilcbiAgICAgID8gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjaGlsZHJlbilcbiAgICAgIDogdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGlzVGV4dE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIGlzRGVmKG5vZGUpICYmIGlzRGVmKG5vZGUudGV4dCkgJiYgaXNGYWxzZShub2RlLmlzQ29tbWVudClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXlDaGlsZHJlbiAoY2hpbGRyZW4sIG5lc3RlZEluZGV4KSB7XG4gIHZhciByZXMgPSBbXTtcbiAgdmFyIGksIGMsIGxhc3Q7XG4gIGZvciAoaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGMgPSBjaGlsZHJlbltpXTtcbiAgICBpZiAoaXNVbmRlZihjKSB8fCB0eXBlb2YgYyA9PT0gJ2Jvb2xlYW4nKSB7IGNvbnRpbnVlIH1cbiAgICBsYXN0ID0gcmVzW3Jlcy5sZW5ndGggLSAxXTtcbiAgICAvLyAgbmVzdGVkXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYykpIHtcbiAgICAgIHJlcy5wdXNoLmFwcGx5KHJlcywgbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjLCAoKG5lc3RlZEluZGV4IHx8ICcnKSArIFwiX1wiICsgaSkpKTtcbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKGMpKSB7XG4gICAgICBpZiAoaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIC8vIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBTU1IgaHlkcmF0aW9uIGJlY2F1c2UgdGV4dCBub2RlcyBhcmVcbiAgICAgICAgLy8gZXNzZW50aWFsbHkgbWVyZ2VkIHdoZW4gcmVuZGVyZWQgdG8gSFRNTCBzdHJpbmdzXG4gICAgICAgIChsYXN0KS50ZXh0ICs9IFN0cmluZyhjKTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPT0gJycpIHtcbiAgICAgICAgLy8gY29udmVydCBwcmltaXRpdmUgdG8gdm5vZGVcbiAgICAgICAgcmVzLnB1c2goY3JlYXRlVGV4dFZOb2RlKGMpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzVGV4dE5vZGUoYykgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIHJlc1tyZXMubGVuZ3RoIC0gMV0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYy50ZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlZmF1bHQga2V5IGZvciBuZXN0ZWQgYXJyYXkgY2hpbGRyZW4gKGxpa2VseSBnZW5lcmF0ZWQgYnkgdi1mb3IpXG4gICAgICAgIGlmIChpc1RydWUoY2hpbGRyZW4uX2lzVkxpc3QpICYmXG4gICAgICAgICAgaXNEZWYoYy50YWcpICYmXG4gICAgICAgICAgaXNVbmRlZihjLmtleSkgJiZcbiAgICAgICAgICBpc0RlZihuZXN0ZWRJbmRleCkpIHtcbiAgICAgICAgICBjLmtleSA9IFwiX192bGlzdFwiICsgbmVzdGVkSW5kZXggKyBcIl9cIiArIGkgKyBcIl9fXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2goYyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVuc3VyZUN0b3IgKGNvbXAsIGJhc2UpIHtcbiAgaWYgKGNvbXAuX19lc01vZHVsZSAmJiBjb21wLmRlZmF1bHQpIHtcbiAgICBjb21wID0gY29tcC5kZWZhdWx0O1xuICB9XG4gIHJldHVybiBpc09iamVjdChjb21wKVxuICAgID8gYmFzZS5leHRlbmQoY29tcClcbiAgICA6IGNvbXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXN5bmNQbGFjZWhvbGRlciAoXG4gIGZhY3RvcnksXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICB2YXIgbm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgbm9kZS5hc3luY0ZhY3RvcnkgPSBmYWN0b3J5O1xuICBub2RlLmFzeW5jTWV0YSA9IHsgZGF0YTogZGF0YSwgY29udGV4dDogY29udGV4dCwgY2hpbGRyZW46IGNoaWxkcmVuLCB0YWc6IHRhZyB9O1xuICByZXR1cm4gbm9kZVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnQgKFxuICBmYWN0b3J5LFxuICBiYXNlQ3RvcixcbiAgY29udGV4dFxuKSB7XG4gIGlmIChpc1RydWUoZmFjdG9yeS5lcnJvcikgJiYgaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkuZXJyb3JDb21wXG4gIH1cblxuICBpZiAoaXNEZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5yZXNvbHZlZFxuICB9XG5cbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmxvYWRpbmcpICYmIGlzRGVmKGZhY3RvcnkubG9hZGluZ0NvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LmNvbnRleHRzKSkge1xuICAgIC8vIGFscmVhZHkgcGVuZGluZ1xuICAgIGZhY3RvcnkuY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY29udGV4dHMgPSBmYWN0b3J5LmNvbnRleHRzID0gW2NvbnRleHRdO1xuICAgIHZhciBzeW5jID0gdHJ1ZTtcblxuICAgIHZhciBmb3JjZVJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY29udGV4dHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvbnRleHRzW2ldLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgcmVzb2x2ZSA9IG9uY2UoZnVuY3Rpb24gKHJlcykge1xuICAgICAgLy8gY2FjaGUgcmVzb2x2ZWRcbiAgICAgIGZhY3RvcnkucmVzb2x2ZWQgPSBlbnN1cmVDdG9yKHJlcywgYmFzZUN0b3IpO1xuICAgICAgLy8gaW52b2tlIGNhbGxiYWNrcyBvbmx5IGlmIHRoaXMgaXMgbm90IGEgc3luY2hyb25vdXMgcmVzb2x2ZVxuICAgICAgLy8gKGFzeW5jIHJlc29sdmVzIGFyZSBzaGltbWVkIGFzIHN5bmNocm9ub3VzIGR1cmluZyBTU1IpXG4gICAgICBpZiAoIXN5bmMpIHtcbiAgICAgICAgZm9yY2VSZW5kZXIoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZWplY3QgPSBvbmNlKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQ6IFwiICsgKFN0cmluZyhmYWN0b3J5KSkgK1xuICAgICAgICAocmVhc29uID8gKFwiXFxuUmVhc29uOiBcIiArIHJlYXNvbikgOiAnJylcbiAgICAgICk7XG4gICAgICBpZiAoaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgICAgIGZhY3RvcnkuZXJyb3IgPSB0cnVlO1xuICAgICAgICBmb3JjZVJlbmRlcigpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlcyA9IGZhY3RvcnkocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgIGlmIChpc09iamVjdChyZXMpKSB7XG4gICAgICBpZiAodHlwZW9mIHJlcy50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vICgpID0+IFByb21pc2VcbiAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICByZXMudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKHJlcy5jb21wb25lbnQpICYmIHR5cGVvZiByZXMuY29tcG9uZW50LnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmVzLmNvbXBvbmVudC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5lcnJvcikpIHtcbiAgICAgICAgICBmYWN0b3J5LmVycm9yQ29tcCA9IGVuc3VyZUN0b3IocmVzLmVycm9yLCBiYXNlQ3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLmxvYWRpbmcpKSB7XG4gICAgICAgICAgZmFjdG9yeS5sb2FkaW5nQ29tcCA9IGVuc3VyZUN0b3IocmVzLmxvYWRpbmcsIGJhc2VDdG9yKTtcbiAgICAgICAgICBpZiAocmVzLmRlbGF5ID09PSAwKSB7XG4gICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkgJiYgaXNVbmRlZihmYWN0b3J5LmVycm9yKSkge1xuICAgICAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yY2VSZW5kZXIoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVzLmRlbGF5IHx8IDIwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy50aW1lb3V0KSkge1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICAgICAgICAgICAgICAgID8gKFwidGltZW91dCAoXCIgKyAocmVzLnRpbWVvdXQpICsgXCJtcylcIilcbiAgICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHJlcy50aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHN5bmMgPSBmYWxzZTtcbiAgICAvLyByZXR1cm4gaW4gY2FzZSByZXNvbHZlZCBzeW5jaHJvbm91c2x5XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ1xuICAgICAgPyBmYWN0b3J5LmxvYWRpbmdDb21wXG4gICAgICA6IGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCAoY2hpbGRyZW4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjKSAmJiBpc0RlZihjLmNvbXBvbmVudE9wdGlvbnMpKSB7XG4gICAgICAgIHJldHVybiBjXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV2ZW50cyAodm0pIHtcbiAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZtLl9oYXNIb29rRXZlbnQgPSBmYWxzZTtcbiAgLy8gaW5pdCBwYXJlbnQgYXR0YWNoZWQgZXZlbnRzXG4gIHZhciBsaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBpZiAobGlzdGVuZXJzKSB7XG4gICAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMpO1xuICB9XG59XG5cbnZhciB0YXJnZXQ7XG5cbmZ1bmN0aW9uIGFkZCAoZXZlbnQsIGZuLCBvbmNlJCQxKSB7XG4gIGlmIChvbmNlJCQxKSB7XG4gICAgdGFyZ2V0LiRvbmNlKGV2ZW50LCBmbik7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0LiRvbihldmVudCwgZm4pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQxIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvZmYoZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIChcbiAgdm0sXG4gIGxpc3RlbmVycyxcbiAgb2xkTGlzdGVuZXJzXG4pIHtcbiAgdGFyZ2V0ID0gdm07XG4gIHVwZGF0ZUxpc3RlbmVycyhsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyB8fCB7fSwgYWRkLCByZW1vdmUkMSwgdm0pO1xufVxuXG5mdW5jdGlvbiBldmVudHNNaXhpbiAoVnVlKSB7XG4gIHZhciBob29rUkUgPSAvXmhvb2s6LztcbiAgVnVlLnByb3RvdHlwZS4kb24gPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdGhpcyQxLiRvbihldmVudFtpXSwgZm4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAodm0uX2V2ZW50c1tldmVudF0gfHwgKHZtLl9ldmVudHNbZXZlbnRdID0gW10pKS5wdXNoKGZuKTtcbiAgICAgIC8vIG9wdGltaXplIGhvb2s6ZXZlbnQgY29zdCBieSB1c2luZyBhIGJvb2xlYW4gZmxhZyBtYXJrZWQgYXQgcmVnaXN0cmF0aW9uXG4gICAgICAvLyBpbnN0ZWFkIG9mIGEgaGFzaCBsb29rdXBcbiAgICAgIGlmIChob29rUkUudGVzdChldmVudCkpIHtcbiAgICAgICAgdm0uX2hhc0hvb2tFdmVudCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9uY2UgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBmdW5jdGlvbiBvbiAoKSB7XG4gICAgICB2bS4kb2ZmKGV2ZW50LCBvbik7XG4gICAgICBmbi5hcHBseSh2bSwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgb24uZm4gPSBmbjtcbiAgICB2bS4kb24oZXZlbnQsIG9uKTtcbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvZmYgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGFsbFxuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gYXJyYXkgb2YgZXZlbnRzXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpJDEgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpJDEgPCBsOyBpJDErKykge1xuICAgICAgICB0aGlzJDEuJG9mZihldmVudFtpJDFdLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKCFjYnMpIHtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdm0uX2V2ZW50c1tldmVudF0gPSBudWxsO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGhhbmRsZXJcbiAgICB2YXIgY2I7XG4gICAgdmFyIGkgPSBjYnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGNiID0gY2JzW2ldO1xuICAgICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcbiAgICAgICAgY2JzLnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZW1pdCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBsb3dlckNhc2VFdmVudCA9IGV2ZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAobG93ZXJDYXNlRXZlbnQgIT09IGV2ZW50ICYmIHZtLl9ldmVudHNbbG93ZXJDYXNlRXZlbnRdKSB7XG4gICAgICAgIHRpcChcbiAgICAgICAgICBcIkV2ZW50IFxcXCJcIiArIGxvd2VyQ2FzZUV2ZW50ICsgXCJcXFwiIGlzIGVtaXR0ZWQgaW4gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIgYnV0IHRoZSBoYW5kbGVyIGlzIHJlZ2lzdGVyZWQgZm9yIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLiBcIiArXG4gICAgICAgICAgXCJOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCB5b3UgY2Fubm90IHVzZSBcIiArXG4gICAgICAgICAgXCJ2LW9uIHRvIGxpc3RlbiB0byBjYW1lbENhc2UgZXZlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIHRlbXBsYXRlcy4gXCIgK1xuICAgICAgICAgIFwiWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXFxcIlwiICsgKGh5cGhlbmF0ZShldmVudCkpICsgXCJcXFwiIGluc3RlYWQgb2YgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGNicyA9IHZtLl9ldmVudHNbZXZlbnRdO1xuICAgIGlmIChjYnMpIHtcbiAgICAgIGNicyA9IGNicy5sZW5ndGggPiAxID8gdG9BcnJheShjYnMpIDogY2JzO1xuICAgICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjYnNbaV0uYXBwbHkodm0sIGFyZ3MpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIChcImV2ZW50IGhhbmRsZXIgZm9yIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyByYXcgY2hpbGRyZW4gVk5vZGVzIGludG8gYSBzbG90IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVNsb3RzIChcbiAgY2hpbGRyZW4sXG4gIGNvbnRleHRcbikge1xuICB2YXIgc2xvdHMgPSB7fTtcbiAgaWYgKCFjaGlsZHJlbikge1xuICAgIHJldHVybiBzbG90c1xuICB9XG4gIHZhciBkZWZhdWx0U2xvdCA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgIC8vIG5hbWVkIHNsb3RzIHNob3VsZCBvbmx5IGJlIHJlc3BlY3RlZCBpZiB0aGUgdm5vZGUgd2FzIHJlbmRlcmVkIGluIHRoZVxuICAgIC8vIHNhbWUgY29udGV4dC5cbiAgICBpZiAoKGNoaWxkLmNvbnRleHQgPT09IGNvbnRleHQgfHwgY2hpbGQuZnVuY3Rpb25hbENvbnRleHQgPT09IGNvbnRleHQpICYmXG4gICAgICBjaGlsZC5kYXRhICYmIGNoaWxkLmRhdGEuc2xvdCAhPSBudWxsXG4gICAgKSB7XG4gICAgICB2YXIgbmFtZSA9IGNoaWxkLmRhdGEuc2xvdDtcbiAgICAgIHZhciBzbG90ID0gKHNsb3RzW25hbWVdIHx8IChzbG90c1tuYW1lXSA9IFtdKSk7XG4gICAgICBpZiAoY2hpbGQudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAgIHNsb3QucHVzaC5hcHBseShzbG90LCBjaGlsZC5jaGlsZHJlbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbG90LnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkZWZhdWx0U2xvdC5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbiAgLy8gaWdub3JlIHdoaXRlc3BhY2VcbiAgaWYgKCFkZWZhdWx0U2xvdC5ldmVyeShpc1doaXRlc3BhY2UpKSB7XG4gICAgc2xvdHMuZGVmYXVsdCA9IGRlZmF1bHRTbG90O1xuICB9XG4gIHJldHVybiBzbG90c1xufVxuXG5mdW5jdGlvbiBpc1doaXRlc3BhY2UgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuaXNDb21tZW50IHx8IG5vZGUudGV4dCA9PT0gJyAnXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVTY29wZWRTbG90cyAoXG4gIGZucywgLy8gc2VlIGZsb3cvdm5vZGVcbiAgcmVzXG4pIHtcbiAgcmVzID0gcmVzIHx8IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGZucy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGZuc1tpXSkpIHtcbiAgICAgIHJlc29sdmVTY29wZWRTbG90cyhmbnNbaV0sIHJlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc1tmbnNbaV0ua2V5XSA9IGZuc1tpXS5mbjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIGFjdGl2ZUluc3RhbmNlID0gbnVsbDtcbnZhciBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcblxuZnVuY3Rpb24gaW5pdExpZmVjeWNsZSAodm0pIHtcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcblxuICAvLyBsb2NhdGUgZmlyc3Qgbm9uLWFic3RyYWN0IHBhcmVudFxuICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIGlmIChwYXJlbnQgJiYgIW9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICB3aGlsZSAocGFyZW50LiRvcHRpb25zLmFic3RyYWN0ICYmIHBhcmVudC4kcGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcbiAgICB9XG4gICAgcGFyZW50LiRjaGlsZHJlbi5wdXNoKHZtKTtcbiAgfVxuXG4gIHZtLiRwYXJlbnQgPSBwYXJlbnQ7XG4gIHZtLiRyb290ID0gcGFyZW50ID8gcGFyZW50LiRyb290IDogdm07XG5cbiAgdm0uJGNoaWxkcmVuID0gW107XG4gIHZtLiRyZWZzID0ge307XG5cbiAgdm0uX3dhdGNoZXIgPSBudWxsO1xuICB2bS5faW5hY3RpdmUgPSBudWxsO1xuICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgdm0uX2lzTW91bnRlZCA9IGZhbHNlO1xuICB2bS5faXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbGlmZWN5Y2xlTWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl9pc01vdW50ZWQpIHtcbiAgICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlVXBkYXRlJyk7XG4gICAgfVxuICAgIHZhciBwcmV2RWwgPSB2bS4kZWw7XG4gICAgdmFyIHByZXZWbm9kZSA9IHZtLl92bm9kZTtcbiAgICB2YXIgcHJldkFjdGl2ZUluc3RhbmNlID0gYWN0aXZlSW5zdGFuY2U7XG4gICAgYWN0aXZlSW5zdGFuY2UgPSB2bTtcbiAgICB2bS5fdm5vZGUgPSB2bm9kZTtcbiAgICAvLyBWdWUucHJvdG90eXBlLl9fcGF0Y2hfXyBpcyBpbmplY3RlZCBpbiBlbnRyeSBwb2ludHNcbiAgICAvLyBiYXNlZCBvbiB0aGUgcmVuZGVyaW5nIGJhY2tlbmQgdXNlZC5cbiAgICBpZiAoIXByZXZWbm9kZSkge1xuICAgICAgLy8gaW5pdGlhbCByZW5kZXJcbiAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyhcbiAgICAgICAgdm0uJGVsLCB2bm9kZSwgaHlkcmF0aW5nLCBmYWxzZSAvKiByZW1vdmVPbmx5ICovLFxuICAgICAgICB2bS4kb3B0aW9ucy5fcGFyZW50RWxtLFxuICAgICAgICB2bS4kb3B0aW9ucy5fcmVmRWxtXG4gICAgICApO1xuICAgICAgLy8gbm8gbmVlZCBmb3IgdGhlIHJlZiBub2RlcyBhZnRlciBpbml0aWFsIHBhdGNoXG4gICAgICAvLyB0aGlzIHByZXZlbnRzIGtlZXBpbmcgYSBkZXRhY2hlZCBET00gdHJlZSBpbiBtZW1vcnkgKCM1ODUxKVxuICAgICAgdm0uJG9wdGlvbnMuX3BhcmVudEVsbSA9IHZtLiRvcHRpb25zLl9yZWZFbG0gPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1cGRhdGVzXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18ocHJldlZub2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIGFjdGl2ZUluc3RhbmNlID0gcHJldkFjdGl2ZUluc3RhbmNlO1xuICAgIC8vIHVwZGF0ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmIChwcmV2RWwpIHtcbiAgICAgIHByZXZFbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHZtLiRlbCkge1xuICAgICAgdm0uJGVsLl9fdnVlX18gPSB2bTtcbiAgICB9XG4gICAgLy8gaWYgcGFyZW50IGlzIGFuIEhPQywgdXBkYXRlIGl0cyAkZWwgYXMgd2VsbFxuICAgIGlmICh2bS4kdm5vZGUgJiYgdm0uJHBhcmVudCAmJiB2bS4kdm5vZGUgPT09IHZtLiRwYXJlbnQuX3Zub2RlKSB7XG4gICAgICB2bS4kcGFyZW50LiRlbCA9IHZtLiRlbDtcbiAgICB9XG4gICAgLy8gdXBkYXRlZCBob29rIGlzIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyIHRvIGVuc3VyZSB0aGF0IGNoaWxkcmVuIGFyZVxuICAgIC8vIHVwZGF0ZWQgaW4gYSBwYXJlbnQncyB1cGRhdGVkIGhvb2suXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRkZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVEZXN0cm95Jyk7XG4gICAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gcGFyZW50XG4gICAgdmFyIHBhcmVudCA9IHZtLiRwYXJlbnQ7XG4gICAgaWYgKHBhcmVudCAmJiAhcGFyZW50Ll9pc0JlaW5nRGVzdHJveWVkICYmICF2bS4kb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgICAgcmVtb3ZlKHBhcmVudC4kY2hpbGRyZW4sIHZtKTtcbiAgICB9XG4gICAgLy8gdGVhcmRvd24gd2F0Y2hlcnNcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIHZhciBpID0gdm0uX3dhdGNoZXJzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2bS5fd2F0Y2hlcnNbaV0udGVhcmRvd24oKTtcbiAgICB9XG4gICAgLy8gcmVtb3ZlIHJlZmVyZW5jZSBmcm9tIGRhdGEgb2JcbiAgICAvLyBmcm96ZW4gb2JqZWN0IG1heSBub3QgaGF2ZSBvYnNlcnZlci5cbiAgICBpZiAodm0uX2RhdGEuX19vYl9fKSB7XG4gICAgICB2bS5fZGF0YS5fX29iX18udm1Db3VudC0tO1xuICAgIH1cbiAgICAvLyBjYWxsIHRoZSBsYXN0IGhvb2suLi5cbiAgICB2bS5faXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIGludm9rZSBkZXN0cm95IGhvb2tzIG9uIGN1cnJlbnQgcmVuZGVyZWQgdHJlZVxuICAgIHZtLl9fcGF0Y2hfXyh2bS5fdm5vZGUsIG51bGwpO1xuICAgIC8vIGZpcmUgZGVzdHJveWVkIGhvb2tcbiAgICBjYWxsSG9vayh2bSwgJ2Rlc3Ryb3llZCcpO1xuICAgIC8vIHR1cm4gb2ZmIGFsbCBpbnN0YW5jZSBsaXN0ZW5lcnMuXG4gICAgdm0uJG9mZigpO1xuICAgIC8vIHJlbW92ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vdW50Q29tcG9uZW50IChcbiAgdm0sXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICB2bS4kZWwgPSBlbDtcbiAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICgodm0uJG9wdGlvbnMudGVtcGxhdGUgJiYgdm0uJG9wdGlvbnMudGVtcGxhdGUuY2hhckF0KDApICE9PSAnIycpIHx8XG4gICAgICAgIHZtLiRvcHRpb25zLmVsIHx8IGVsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuICAgICAgICAgICdjb21waWxlciBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgK1xuICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNhbGxIb29rKHZtLCAnYmVmb3JlTW91bnQnKTtcblxuICB2YXIgdXBkYXRlQ29tcG9uZW50O1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmFtZSA9IHZtLl9uYW1lO1xuICAgICAgdmFyIGlkID0gdm0uX3VpZDtcbiAgICAgIHZhciBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyBpZDtcbiAgICAgIHZhciBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArIGlkO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZhciB2bm9kZSA9IHZtLl9yZW5kZXIoKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKG5hbWUgKyBcIiByZW5kZXJcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZtLl91cGRhdGUodm5vZGUsIGh5ZHJhdGluZyk7XG4gICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICBtZWFzdXJlKChuYW1lICsgXCIgcGF0Y2hcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdXBkYXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdm0uX3VwZGF0ZSh2bS5fcmVuZGVyKCksIGh5ZHJhdGluZyk7XG4gICAgfTtcbiAgfVxuXG4gIHZtLl93YXRjaGVyID0gbmV3IFdhdGNoZXIodm0sIHVwZGF0ZUNvbXBvbmVudCwgbm9vcCk7XG4gIGh5ZHJhdGluZyA9IGZhbHNlO1xuXG4gIC8vIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UsIGNhbGwgbW91bnRlZCBvbiBzZWxmXG4gIC8vIG1vdW50ZWQgaXMgY2FsbGVkIGZvciByZW5kZXItY3JlYXRlZCBjaGlsZCBjb21wb25lbnRzIGluIGl0cyBpbnNlcnRlZCBob29rXG4gIGlmICh2bS4kdm5vZGUgPT0gbnVsbCkge1xuICAgIHZtLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIGNhbGxIb29rKHZtLCAnbW91bnRlZCcpO1xuICB9XG4gIHJldHVybiB2bVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDaGlsZENvbXBvbmVudCAoXG4gIHZtLFxuICBwcm9wc0RhdGEsXG4gIGxpc3RlbmVycyxcbiAgcGFyZW50Vm5vZGUsXG4gIHJlbmRlckNoaWxkcmVuXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSB0cnVlO1xuICB9XG5cbiAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgY29tcG9uZW50IGhhcyBzbG90IGNoaWxkcmVuXG4gIC8vIHdlIG5lZWQgdG8gZG8gdGhpcyBiZWZvcmUgb3ZlcndyaXRpbmcgJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuXG4gIHZhciBoYXNDaGlsZHJlbiA9ICEhKFxuICAgIHJlbmRlckNoaWxkcmVuIHx8ICAgICAgICAgICAgICAgLy8gaGFzIG5ldyBzdGF0aWMgc2xvdHNcbiAgICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gfHwgIC8vIGhhcyBvbGQgc3RhdGljIHNsb3RzXG4gICAgcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cyB8fCAvLyBoYXMgbmV3IHNjb3BlZCBzbG90c1xuICAgIHZtLiRzY29wZWRTbG90cyAhPT0gZW1wdHlPYmplY3QgLy8gaGFzIG9sZCBzY29wZWQgc2xvdHNcbiAgKTtcblxuICB2bS4kb3B0aW9ucy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcbiAgdm0uJHZub2RlID0gcGFyZW50Vm5vZGU7IC8vIHVwZGF0ZSB2bSdzIHBsYWNlaG9sZGVyIG5vZGUgd2l0aG91dCByZS1yZW5kZXJcblxuICBpZiAodm0uX3Zub2RlKSB7IC8vIHVwZGF0ZSBjaGlsZCB0cmVlJ3MgcGFyZW50XG4gICAgdm0uX3Zub2RlLnBhcmVudCA9IHBhcmVudFZub2RlO1xuICB9XG4gIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiA9IHJlbmRlckNoaWxkcmVuO1xuXG4gIC8vIHVwZGF0ZSAkYXR0cnMgYW5kICRsaXN0ZW5zZXJzIGhhc2hcbiAgLy8gdGhlc2UgYXJlIGFsc28gcmVhY3RpdmUgc28gdGhleSBtYXkgdHJpZ2dlciBjaGlsZCB1cGRhdGUgaWYgdGhlIGNoaWxkXG4gIC8vIHVzZWQgdGhlbSBkdXJpbmcgcmVuZGVyXG4gIHZtLiRhdHRycyA9IHBhcmVudFZub2RlLmRhdGEgJiYgcGFyZW50Vm5vZGUuZGF0YS5hdHRycztcbiAgdm0uJGxpc3RlbmVycyA9IGxpc3RlbmVycztcblxuICAvLyB1cGRhdGUgcHJvcHNcbiAgaWYgKHByb3BzRGF0YSAmJiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgIG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydCA9IGZhbHNlO1xuICAgIHZhciBwcm9wcyA9IHZtLl9wcm9wcztcbiAgICB2YXIgcHJvcEtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IHByb3BLZXlzW2ldO1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHZtLiRvcHRpb25zLnByb3BzLCBwcm9wc0RhdGEsIHZtKTtcbiAgICB9XG4gICAgb2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0ID0gdHJ1ZTtcbiAgICAvLyBrZWVwIGEgY29weSBvZiByYXcgcHJvcHNEYXRhXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhID0gcHJvcHNEYXRhO1xuICB9XG5cbiAgLy8gdXBkYXRlIGxpc3RlbmVyc1xuICBpZiAobGlzdGVuZXJzKSB7XG4gICAgdmFyIG9sZExpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gICAgdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycywgb2xkTGlzdGVuZXJzKTtcbiAgfVxuICAvLyByZXNvbHZlIHNsb3RzICsgZm9yY2UgdXBkYXRlIGlmIGhhcyBjaGlsZHJlblxuICBpZiAoaGFzQ2hpbGRyZW4pIHtcbiAgICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMocmVuZGVyQ2hpbGRyZW4sIHBhcmVudFZub2RlLmNvbnRleHQpO1xuICAgIHZtLiRmb3JjZVVwZGF0ZSgpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0luSW5hY3RpdmVUcmVlICh2bSkge1xuICB3aGlsZSAodm0gJiYgKHZtID0gdm0uJHBhcmVudCkpIHtcbiAgICBpZiAodm0uX2luYWN0aXZlKSB7IHJldHVybiB0cnVlIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH0gZWxzZSBpZiAodm0uX2RpcmVjdEluYWN0aXZlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZtLl9pbmFjdGl2ZSB8fCB2bS5faW5hY3RpdmUgPT09IG51bGwpIHtcbiAgICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2FjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gdHJ1ZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxuICBpZiAoIXZtLl9pbmFjdGl2ZSkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2RlYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbEhvb2sgKHZtLCBob29rKSB7XG4gIHZhciBoYW5kbGVycyA9IHZtLiRvcHRpb25zW2hvb2tdO1xuICBpZiAoaGFuZGxlcnMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IGhhbmRsZXJzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaGFuZGxlcnNbaV0uY2FsbCh2bSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCAoaG9vayArIFwiIGhvb2tcIikpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAodm0uX2hhc0hvb2tFdmVudCkge1xuICAgIHZtLiRlbWl0KCdob29rOicgKyBob29rKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuXG52YXIgTUFYX1VQREFURV9DT1VOVCA9IDEwMDtcblxudmFyIHF1ZXVlID0gW107XG52YXIgYWN0aXZhdGVkQ2hpbGRyZW4gPSBbXTtcbnZhciBoYXMgPSB7fTtcbnZhciBjaXJjdWxhciA9IHt9O1xudmFyIHdhaXRpbmcgPSBmYWxzZTtcbnZhciBmbHVzaGluZyA9IGZhbHNlO1xudmFyIGluZGV4ID0gMDtcblxuLyoqXG4gKiBSZXNldCB0aGUgc2NoZWR1bGVyJ3Mgc3RhdGUuXG4gKi9cbmZ1bmN0aW9uIHJlc2V0U2NoZWR1bGVyU3RhdGUgKCkge1xuICBpbmRleCA9IHF1ZXVlLmxlbmd0aCA9IGFjdGl2YXRlZENoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIGhhcyA9IHt9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNpcmN1bGFyID0ge307XG4gIH1cbiAgd2FpdGluZyA9IGZsdXNoaW5nID0gZmFsc2U7XG59XG5cbi8qKlxuICogRmx1c2ggYm90aCBxdWV1ZXMgYW5kIHJ1biB0aGUgd2F0Y2hlcnMuXG4gKi9cbmZ1bmN0aW9uIGZsdXNoU2NoZWR1bGVyUXVldWUgKCkge1xuICBmbHVzaGluZyA9IHRydWU7XG4gIHZhciB3YXRjaGVyLCBpZDtcblxuICAvLyBTb3J0IHF1ZXVlIGJlZm9yZSBmbHVzaC5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQ6XG4gIC8vIDEuIENvbXBvbmVudHMgYXJlIHVwZGF0ZWQgZnJvbSBwYXJlbnQgdG8gY2hpbGQuIChiZWNhdXNlIHBhcmVudCBpcyBhbHdheXNcbiAgLy8gICAgY3JlYXRlZCBiZWZvcmUgdGhlIGNoaWxkKVxuICAvLyAyLiBBIGNvbXBvbmVudCdzIHVzZXIgd2F0Y2hlcnMgYXJlIHJ1biBiZWZvcmUgaXRzIHJlbmRlciB3YXRjaGVyIChiZWNhdXNlXG4gIC8vICAgIHVzZXIgd2F0Y2hlcnMgYXJlIGNyZWF0ZWQgYmVmb3JlIHRoZSByZW5kZXIgd2F0Y2hlcilcbiAgLy8gMy4gSWYgYSBjb21wb25lbnQgaXMgZGVzdHJveWVkIGR1cmluZyBhIHBhcmVudCBjb21wb25lbnQncyB3YXRjaGVyIHJ1bixcbiAgLy8gICAgaXRzIHdhdGNoZXJzIGNhbiBiZSBza2lwcGVkLlxuICBxdWV1ZS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG5cbiAgLy8gZG8gbm90IGNhY2hlIGxlbmd0aCBiZWNhdXNlIG1vcmUgd2F0Y2hlcnMgbWlnaHQgYmUgcHVzaGVkXG4gIC8vIGFzIHdlIHJ1biBleGlzdGluZyB3YXRjaGVyc1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBxdWV1ZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICB3YXRjaGVyID0gcXVldWVbaW5kZXhdO1xuICAgIGlkID0gd2F0Y2hlci5pZDtcbiAgICBoYXNbaWRdID0gbnVsbDtcbiAgICB3YXRjaGVyLnJ1bigpO1xuICAgIC8vIGluIGRldiBidWlsZCwgY2hlY2sgYW5kIHN0b3AgY2lyY3VsYXIgdXBkYXRlcy5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBoYXNbaWRdICE9IG51bGwpIHtcbiAgICAgIGNpcmN1bGFyW2lkXSA9IChjaXJjdWxhcltpZF0gfHwgMCkgKyAxO1xuICAgICAgaWYgKGNpcmN1bGFyW2lkXSA+IE1BWF9VUERBVEVfQ09VTlQpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IG1heSBoYXZlIGFuIGluZmluaXRlIHVwZGF0ZSBsb29wICcgKyAoXG4gICAgICAgICAgICB3YXRjaGVyLnVzZXJcbiAgICAgICAgICAgICAgPyAoXCJpbiB3YXRjaGVyIHdpdGggZXhwcmVzc2lvbiBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKVxuICAgICAgICAgICAgICA6IFwiaW4gYSBjb21wb25lbnQgcmVuZGVyIGZ1bmN0aW9uLlwiXG4gICAgICAgICAgKSxcbiAgICAgICAgICB3YXRjaGVyLnZtXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8ga2VlcCBjb3BpZXMgb2YgcG9zdCBxdWV1ZXMgYmVmb3JlIHJlc2V0dGluZyBzdGF0ZVxuICB2YXIgYWN0aXZhdGVkUXVldWUgPSBhY3RpdmF0ZWRDaGlsZHJlbi5zbGljZSgpO1xuICB2YXIgdXBkYXRlZFF1ZXVlID0gcXVldWUuc2xpY2UoKTtcblxuICByZXNldFNjaGVkdWxlclN0YXRlKCk7XG5cbiAgLy8gY2FsbCBjb21wb25lbnQgdXBkYXRlZCBhbmQgYWN0aXZhdGVkIGhvb2tzXG4gIGNhbGxBY3RpdmF0ZWRIb29rcyhhY3RpdmF0ZWRRdWV1ZSk7XG4gIGNhbGxVcGRhdGVkSG9va3ModXBkYXRlZFF1ZXVlKTtcblxuICAvLyBkZXZ0b29sIGhvb2tcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChkZXZ0b29scyAmJiBjb25maWcuZGV2dG9vbHMpIHtcbiAgICBkZXZ0b29scy5lbWl0KCdmbHVzaCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxVcGRhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIHZhciBpID0gcXVldWUubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIHdhdGNoZXIgPSBxdWV1ZVtpXTtcbiAgICB2YXIgdm0gPSB3YXRjaGVyLnZtO1xuICAgIGlmICh2bS5fd2F0Y2hlciA9PT0gd2F0Y2hlciAmJiB2bS5faXNNb3VudGVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ3VwZGF0ZWQnKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBRdWV1ZSBhIGtlcHQtYWxpdmUgY29tcG9uZW50IHRoYXQgd2FzIGFjdGl2YXRlZCBkdXJpbmcgcGF0Y2guXG4gKiBUaGUgcXVldWUgd2lsbCBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIGVudGlyZSB0cmVlIGhhcyBiZWVuIHBhdGNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50ICh2bSkge1xuICAvLyBzZXR0aW5nIF9pbmFjdGl2ZSB0byBmYWxzZSBoZXJlIHNvIHRoYXQgYSByZW5kZXIgZnVuY3Rpb24gY2FuXG4gIC8vIHJlbHkgb24gY2hlY2tpbmcgd2hldGhlciBpdCdzIGluIGFuIGluYWN0aXZlIHRyZWUgKGUuZy4gcm91dGVyLXZpZXcpXG4gIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICBhY3RpdmF0ZWRDaGlsZHJlbi5wdXNoKHZtKTtcbn1cblxuZnVuY3Rpb24gY2FsbEFjdGl2YXRlZEhvb2tzIChxdWV1ZSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgcXVldWVbaV0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHF1ZXVlW2ldLCB0cnVlIC8qIHRydWUgKi8pO1xuICB9XG59XG5cbi8qKlxuICogUHVzaCBhIHdhdGNoZXIgaW50byB0aGUgd2F0Y2hlciBxdWV1ZS5cbiAqIEpvYnMgd2l0aCBkdXBsaWNhdGUgSURzIHdpbGwgYmUgc2tpcHBlZCB1bmxlc3MgaXQnc1xuICogcHVzaGVkIHdoZW4gdGhlIHF1ZXVlIGlzIGJlaW5nIGZsdXNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlV2F0Y2hlciAod2F0Y2hlcikge1xuICB2YXIgaWQgPSB3YXRjaGVyLmlkO1xuICBpZiAoaGFzW2lkXSA9PSBudWxsKSB7XG4gICAgaGFzW2lkXSA9IHRydWU7XG4gICAgaWYgKCFmbHVzaGluZykge1xuICAgICAgcXVldWUucHVzaCh3YXRjaGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgYWxyZWFkeSBmbHVzaGluZywgc3BsaWNlIHRoZSB3YXRjaGVyIGJhc2VkIG9uIGl0cyBpZFxuICAgICAgLy8gaWYgYWxyZWFkeSBwYXN0IGl0cyBpZCwgaXQgd2lsbCBiZSBydW4gbmV4dCBpbW1lZGlhdGVseS5cbiAgICAgIHZhciBpID0gcXVldWUubGVuZ3RoIC0gMTtcbiAgICAgIHdoaWxlIChpID4gaW5kZXggJiYgcXVldWVbaV0uaWQgPiB3YXRjaGVyLmlkKSB7XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICAgIHF1ZXVlLnNwbGljZShpICsgMSwgMCwgd2F0Y2hlcik7XG4gICAgfVxuICAgIC8vIHF1ZXVlIHRoZSBmbHVzaFxuICAgIGlmICghd2FpdGluZykge1xuICAgICAgd2FpdGluZyA9IHRydWU7XG4gICAgICBuZXh0VGljayhmbHVzaFNjaGVkdWxlclF1ZXVlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciB1aWQkMiA9IDA7XG5cbi8qKlxuICogQSB3YXRjaGVyIHBhcnNlcyBhbiBleHByZXNzaW9uLCBjb2xsZWN0cyBkZXBlbmRlbmNpZXMsXG4gKiBhbmQgZmlyZXMgY2FsbGJhY2sgd2hlbiB0aGUgZXhwcmVzc2lvbiB2YWx1ZSBjaGFuZ2VzLlxuICogVGhpcyBpcyB1c2VkIGZvciBib3RoIHRoZSAkd2F0Y2goKSBhcGkgYW5kIGRpcmVjdGl2ZXMuXG4gKi9cbnZhciBXYXRjaGVyID0gZnVuY3Rpb24gV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBjYixcbiAgb3B0aW9uc1xuKSB7XG4gIHRoaXMudm0gPSB2bTtcbiAgdm0uX3dhdGNoZXJzLnB1c2godGhpcyk7XG4gIC8vIG9wdGlvbnNcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB0aGlzLmRlZXAgPSAhIW9wdGlvbnMuZGVlcDtcbiAgICB0aGlzLnVzZXIgPSAhIW9wdGlvbnMudXNlcjtcbiAgICB0aGlzLmxhenkgPSAhIW9wdGlvbnMubGF6eTtcbiAgICB0aGlzLnN5bmMgPSAhIW9wdGlvbnMuc3luYztcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRlZXAgPSB0aGlzLnVzZXIgPSB0aGlzLmxhenkgPSB0aGlzLnN5bmMgPSBmYWxzZTtcbiAgfVxuICB0aGlzLmNiID0gY2I7XG4gIHRoaXMuaWQgPSArK3VpZCQyOyAvLyB1aWQgZm9yIGJhdGNoaW5nXG4gIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgdGhpcy5kaXJ0eSA9IHRoaXMubGF6eTsgLy8gZm9yIGxhenkgd2F0Y2hlcnNcbiAgdGhpcy5kZXBzID0gW107XG4gIHRoaXMubmV3RGVwcyA9IFtdO1xuICB0aGlzLmRlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMubmV3RGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5leHByZXNzaW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgID8gZXhwT3JGbi50b1N0cmluZygpXG4gICAgOiAnJztcbiAgLy8gcGFyc2UgZXhwcmVzc2lvbiBmb3IgZ2V0dGVyXG4gIGlmICh0eXBlb2YgZXhwT3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuZ2V0dGVyID0gZXhwT3JGbjtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmdldHRlciA9IHBhcnNlUGF0aChleHBPckZuKTtcbiAgICBpZiAoIXRoaXMuZ2V0dGVyKSB7XG4gICAgICB0aGlzLmdldHRlciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB3YXRjaGluZyBwYXRoOiBcXFwiXCIgKyBleHBPckZuICsgXCJcXFwiIFwiICtcbiAgICAgICAgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICtcbiAgICAgICAgJ0ZvciBmdWxsIGNvbnRyb2wsIHVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHRoaXMudmFsdWUgPSB0aGlzLmxhenlcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogdGhpcy5nZXQoKTtcbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIGdldHRlciwgYW5kIHJlLWNvbGxlY3QgZGVwZW5kZW5jaWVzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKCkge1xuICBwdXNoVGFyZ2V0KHRoaXMpO1xuICB2YXIgdmFsdWU7XG4gIHZhciB2bSA9IHRoaXMudm07XG4gIHRyeSB7XG4gICAgdmFsdWUgPSB0aGlzLmdldHRlci5jYWxsKHZtLCB2bSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKFwiZ2V0dGVyIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBcInRvdWNoXCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXNcbiAgICAvLyBkZXBlbmRlbmNpZXMgZm9yIGRlZXAgd2F0Y2hpbmdcbiAgICBpZiAodGhpcy5kZWVwKSB7XG4gICAgICB0cmF2ZXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIHBvcFRhcmdldCgpO1xuICAgIHRoaXMuY2xlYW51cERlcHMoKTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn07XG5cbi8qKlxuICogQWRkIGEgZGVwZW5kZW5jeSB0byB0aGlzIGRpcmVjdGl2ZS5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gYWRkRGVwIChkZXApIHtcbiAgdmFyIGlkID0gZGVwLmlkO1xuICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcbiAgICB0aGlzLm5ld0RlcElkcy5hZGQoaWQpO1xuICAgIHRoaXMubmV3RGVwcy5wdXNoKGRlcCk7XG4gICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XG4gICAgICBkZXAuYWRkU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5jbGVhbnVwRGVwcyA9IGZ1bmN0aW9uIGNsZWFudXBEZXBzICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgZGVwID0gdGhpcyQxLmRlcHNbaV07XG4gICAgaWYgKCF0aGlzJDEubmV3RGVwSWRzLmhhcyhkZXAuaWQpKSB7XG4gICAgICBkZXAucmVtb3ZlU3ViKHRoaXMkMSk7XG4gICAgfVxuICB9XG4gIHZhciB0bXAgPSB0aGlzLmRlcElkcztcbiAgdGhpcy5kZXBJZHMgPSB0aGlzLm5ld0RlcElkcztcbiAgdGhpcy5uZXdEZXBJZHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwSWRzLmNsZWFyKCk7XG4gIHRtcCA9IHRoaXMuZGVwcztcbiAgdGhpcy5kZXBzID0gdGhpcy5uZXdEZXBzO1xuICB0aGlzLm5ld0RlcHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwcy5sZW5ndGggPSAwO1xufTtcblxuLyoqXG4gKiBTdWJzY3JpYmVyIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIHdoZW4gYSBkZXBlbmRlbmN5IGNoYW5nZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0aGlzLmxhenkpIHtcbiAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICh0aGlzLnN5bmMpIHtcbiAgICB0aGlzLnJ1bigpO1xuICB9IGVsc2Uge1xuICAgIHF1ZXVlV2F0Y2hlcih0aGlzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTY2hlZHVsZXIgam9iIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIHJ1biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gICAgaWYgKFxuICAgICAgdmFsdWUgIT09IHRoaXMudmFsdWUgfHxcbiAgICAgIC8vIERlZXAgd2F0Y2hlcnMgYW5kIHdhdGNoZXJzIG9uIE9iamVjdC9BcnJheXMgc2hvdWxkIGZpcmUgZXZlblxuICAgICAgLy8gd2hlbiB0aGUgdmFsdWUgaXMgdGhlIHNhbWUsIGJlY2F1c2UgdGhlIHZhbHVlIG1heVxuICAgICAgLy8gaGF2ZSBtdXRhdGVkLlxuICAgICAgaXNPYmplY3QodmFsdWUpIHx8XG4gICAgICB0aGlzLmRlZXBcbiAgICApIHtcbiAgICAgIC8vIHNldCBuZXcgdmFsdWVcbiAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBoYW5kbGVFcnJvcihlLCB0aGlzLnZtLCAoXCJjYWxsYmFjayBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBFdmFsdWF0ZSB0aGUgdmFsdWUgb2YgdGhlIHdhdGNoZXIuXG4gKiBUaGlzIG9ubHkgZ2V0cyBjYWxsZWQgZm9yIGxhenkgd2F0Y2hlcnMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmV2YWx1YXRlID0gZnVuY3Rpb24gZXZhbHVhdGUgKCkge1xuICB0aGlzLnZhbHVlID0gdGhpcy5nZXQoKTtcbiAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xufTtcblxuLyoqXG4gKiBEZXBlbmQgb24gYWxsIGRlcHMgY29sbGVjdGVkIGJ5IHRoaXMgd2F0Y2hlci5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB0aGlzJDEuZGVwc1tpXS5kZXBlbmQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSB2bSdzIHdhdGNoZXIgbGlzdFxuICAgIC8vIHRoaXMgaXMgYSBzb21ld2hhdCBleHBlbnNpdmUgb3BlcmF0aW9uIHNvIHdlIHNraXAgaXRcbiAgICAvLyBpZiB0aGUgdm0gaXMgYmVpbmcgZGVzdHJveWVkLlxuICAgIGlmICghdGhpcy52bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmVtb3ZlKHRoaXMudm0uX3dhdGNoZXJzLCB0aGlzKTtcbiAgICB9XG4gICAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHRoaXMkMS5kZXBzW2ldLnJlbW92ZVN1Yih0aGlzJDEpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59O1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IHRyYXZlcnNlIGFuIG9iamVjdCB0byBldm9rZSBhbGwgY29udmVydGVkXG4gKiBnZXR0ZXJzLCBzbyB0aGF0IGV2ZXJ5IG5lc3RlZCBwcm9wZXJ0eSBpbnNpZGUgdGhlIG9iamVjdFxuICogaXMgY29sbGVjdGVkIGFzIGEgXCJkZWVwXCIgZGVwZW5kZW5jeS5cbiAqL1xudmFyIHNlZW5PYmplY3RzID0gbmV3IF9TZXQoKTtcbmZ1bmN0aW9uIHRyYXZlcnNlICh2YWwpIHtcbiAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcbiAgX3RyYXZlcnNlKHZhbCwgc2Vlbk9iamVjdHMpO1xufVxuXG5mdW5jdGlvbiBfdHJhdmVyc2UgKHZhbCwgc2Vlbikge1xuICB2YXIgaSwga2V5cztcbiAgdmFyIGlzQSA9IEFycmF5LmlzQXJyYXkodmFsKTtcbiAgaWYgKCghaXNBICYmICFpc09iamVjdCh2YWwpKSB8fCAhT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWwpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbC5fX29iX18pIHtcbiAgICB2YXIgZGVwSWQgPSB2YWwuX19vYl9fLmRlcC5pZDtcbiAgICBpZiAoc2Vlbi5oYXMoZGVwSWQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgc2Vlbi5hZGQoZGVwSWQpO1xuICB9XG4gIGlmIChpc0EpIHtcbiAgICBpID0gdmFsLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxbaV0sIHNlZW4pOyB9XG4gIH0gZWxzZSB7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgaSA9IGtleXMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtrZXlzW2ldXSwgc2Vlbik7IH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IG5vb3AsXG4gIHNldDogbm9vcFxufTtcblxuZnVuY3Rpb24gcHJveHkgKHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV1cbiAgfTtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbDtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBpbml0U3RhdGUgKHZtKSB7XG4gIHZtLl93YXRjaGVycyA9IFtdO1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zO1xuICBpZiAob3B0cy5wcm9wcykgeyBpbml0UHJvcHModm0sIG9wdHMucHJvcHMpOyB9XG4gIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgaWYgKG9wdHMuZGF0YSkge1xuICAgIGluaXREYXRhKHZtKTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG4gIH1cbiAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICBpZiAob3B0cy53YXRjaCAmJiBvcHRzLndhdGNoICE9PSBuYXRpdmVXYXRjaCkge1xuICAgIGluaXRXYXRjaCh2bSwgb3B0cy53YXRjaCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tPcHRpb25UeXBlICh2bSwgbmFtZSkge1xuICB2YXIgb3B0aW9uID0gdm0uJG9wdGlvbnNbbmFtZV07XG4gIGlmICghaXNQbGFpbk9iamVjdChvcHRpb24pKSB7XG4gICAgd2FybihcbiAgICAgIChcImNvbXBvbmVudCBvcHRpb24gXFxcIlwiICsgbmFtZSArIFwiXFxcIiBzaG91bGQgYmUgYW4gb2JqZWN0LlwiKSxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMgKHZtLCBwcm9wc09wdGlvbnMpIHtcbiAgdmFyIHByb3BzRGF0YSA9IHZtLiRvcHRpb25zLnByb3BzRGF0YSB8fCB7fTtcbiAgdmFyIHByb3BzID0gdm0uX3Byb3BzID0ge307XG4gIC8vIGNhY2hlIHByb3Aga2V5cyBzbyB0aGF0IGZ1dHVyZSBwcm9wcyB1cGRhdGVzIGNhbiBpdGVyYXRlIHVzaW5nIEFycmF5XG4gIC8vIGluc3RlYWQgb2YgZHluYW1pYyBvYmplY3Qga2V5IGVudW1lcmF0aW9uLlxuICB2YXIga2V5cyA9IHZtLiRvcHRpb25zLl9wcm9wS2V5cyA9IFtdO1xuICB2YXIgaXNSb290ID0gIXZtLiRwYXJlbnQ7XG4gIC8vIHJvb3QgaW5zdGFuY2UgcHJvcHMgc2hvdWxkIGJlIGNvbnZlcnRlZFxuICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgPSBpc1Jvb3Q7XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gICAgdmFyIHZhbHVlID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcHNPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaXNSZXNlcnZlZEF0dHJpYnV0ZShrZXkpIHx8IGNvbmZpZy5pc1Jlc2VydmVkQXR0cihrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlIGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBjb21wb25lbnQgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh2bS4kcGFyZW50ICYmICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhIHByb3AgZGlyZWN0bHkgc2luY2UgdGhlIHZhbHVlIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcGFyZW50IGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcIkluc3RlYWQsIHVzZSBhIGRhdGEgb3IgY29tcHV0ZWQgcHJvcGVydHkgYmFzZWQgb24gdGhlIHByb3AncyBcIiArXG4gICAgICAgICAgICBcInZhbHVlLiBQcm9wIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVmaW5lUmVhY3RpdmUkJDEocHJvcHMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICAvLyBzdGF0aWMgcHJvcHMgYXJlIGFscmVhZHkgcHJveGllZCBvbiB0aGUgY29tcG9uZW50J3MgcHJvdG90eXBlXG4gICAgLy8gZHVyaW5nIFZ1ZS5leHRlbmQoKS4gV2Ugb25seSBuZWVkIHRvIHByb3h5IHByb3BzIGRlZmluZWQgYXRcbiAgICAvLyBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgcHJveHkodm0sIFwiX3Byb3BzXCIsIGtleSk7XG4gICAgfVxuICB9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wc09wdGlvbnMpIGxvb3AoIGtleSApO1xuICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBpbml0RGF0YSAodm0pIHtcbiAgdmFyIGRhdGEgPSB2bS4kb3B0aW9ucy5kYXRhO1xuICBkYXRhID0gdm0uX2RhdGEgPSB0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gZ2V0RGF0YShkYXRhLCB2bSlcbiAgICA6IGRhdGEgfHwge307XG4gIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgIGRhdGEgPSB7fTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnZGF0YSBmdW5jdGlvbnMgc2hvdWxkIHJldHVybiBhbiBvYmplY3Q6XFxuJyArXG4gICAgICAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyBwcm94eSBkYXRhIG9uIGluc3RhbmNlXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICB2YXIgbWV0aG9kcyA9IHZtLiRvcHRpb25zLm1ldGhvZHM7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKG1ldGhvZHMgJiYgaGFzT3duKG1ldGhvZHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIGRhdGEgcHJvcGVydHkuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJUaGUgZGF0YSBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWNsYXJlZCBhcyBhIHByb3AuIFwiICtcbiAgICAgICAgXCJVc2UgcHJvcCBkZWZhdWx0IHZhbHVlIGluc3RlYWQuXCIsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgcHJveHkodm0sIFwiX2RhdGFcIiwga2V5KTtcbiAgICB9XG4gIH1cbiAgLy8gb2JzZXJ2ZSBkYXRhXG4gIG9ic2VydmUoZGF0YSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YSAoZGF0YSwgdm0pIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGF0YS5jYWxsKHZtKVxuICB9IGNhdGNoIChlKSB7XG4gICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwiZGF0YSgpXCIpO1xuICAgIHJldHVybiB7fVxuICB9XG59XG5cbnZhciBjb21wdXRlZFdhdGNoZXJPcHRpb25zID0geyBsYXp5OiB0cnVlIH07XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCAodm0sIGNvbXB1dGVkKSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY2hlY2tPcHRpb25UeXBlKHZtLCAnY29tcHV0ZWQnKTtcbiAgdmFyIHdhdGNoZXJzID0gdm0uX2NvbXB1dGVkV2F0Y2hlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIHZhciB1c2VyRGVmID0gY29tcHV0ZWRba2V5XTtcbiAgICB2YXIgZ2V0dGVyID0gdHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicgPyB1c2VyRGVmIDogdXNlckRlZi5nZXQ7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZ2V0dGVyID09IG51bGwpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkdldHRlciBpcyBtaXNzaW5nIGZvciBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gICAgLy8gY3JlYXRlIGludGVybmFsIHdhdGNoZXIgZm9yIHRoZSBjb21wdXRlZCBwcm9wZXJ0eS5cbiAgICB3YXRjaGVyc1trZXldID0gbmV3IFdhdGNoZXIodm0sIGdldHRlciB8fCBub29wLCBub29wLCBjb21wdXRlZFdhdGNoZXJPcHRpb25zKTtcblxuICAgIC8vIGNvbXBvbmVudC1kZWZpbmVkIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGFscmVhZHkgZGVmaW5lZCBvbiB0aGVcbiAgICAvLyBjb21wb25lbnQgcHJvdG90eXBlLiBXZSBvbmx5IG5lZWQgdG8gZGVmaW5lIGNvbXB1dGVkIHByb3BlcnRpZXMgZGVmaW5lZFxuICAgIC8vIGF0IGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICBpZiAoIShrZXkgaW4gdm0pKSB7XG4gICAgICBkZWZpbmVDb21wdXRlZCh2bSwga2V5LCB1c2VyRGVmKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChrZXkgaW4gdm0uJGRhdGEpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBkYXRhLlwiKSwgdm0pO1xuICAgICAgfSBlbHNlIGlmICh2bS4kb3B0aW9ucy5wcm9wcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIHByb3AuXCIpLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmluZUNvbXB1dGVkICh0YXJnZXQsIGtleSwgdXNlckRlZikge1xuICBpZiAodHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KTtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gbm9vcDtcbiAgfSBlbHNlIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gdXNlckRlZi5nZXRcbiAgICAgID8gdXNlckRlZi5jYWNoZSAhPT0gZmFsc2VcbiAgICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICAgIDogdXNlckRlZi5nZXRcbiAgICAgIDogbm9vcDtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gdXNlckRlZi5zZXRcbiAgICAgID8gdXNlckRlZi5zZXRcbiAgICAgIDogbm9vcDtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9PT0gbm9vcCkge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJDb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIGFzc2lnbmVkIHRvIGJ1dCBpdCBoYXMgbm8gc2V0dGVyLlwiKSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIgKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHZhciB3YXRjaGVyID0gdGhpcy5fY29tcHV0ZWRXYXRjaGVycyAmJiB0aGlzLl9jb21wdXRlZFdhdGNoZXJzW2tleV07XG4gICAgaWYgKHdhdGNoZXIpIHtcbiAgICAgIGlmICh3YXRjaGVyLmRpcnR5KSB7XG4gICAgICAgIHdhdGNoZXIuZXZhbHVhdGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIHdhdGNoZXIuZGVwZW5kKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd2F0Y2hlci52YWx1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TWV0aG9kcyAodm0sIG1ldGhvZHMpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjaGVja09wdGlvblR5cGUodm0sICdtZXRob2RzJyk7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kcykge1xuICAgIHZtW2tleV0gPSBtZXRob2RzW2tleV0gPT0gbnVsbCA/IG5vb3AgOiBiaW5kKG1ldGhvZHNba2V5XSwgdm0pO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAobWV0aG9kc1trZXldID09IG51bGwpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIm1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFuIHVuZGVmaW5lZCB2YWx1ZSBpbiB0aGUgY29tcG9uZW50IGRlZmluaXRpb24uIFwiICtcbiAgICAgICAgICBcIkRpZCB5b3UgcmVmZXJlbmNlIHRoZSBmdW5jdGlvbiBjb3JyZWN0bHk/XCIsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRXYXRjaCAodm0sIHdhdGNoKSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY2hlY2tPcHRpb25UeXBlKHZtLCAnd2F0Y2gnKTtcbiAgZm9yICh2YXIga2V5IGluIHdhdGNoKSB7XG4gICAgdmFyIGhhbmRsZXIgPSB3YXRjaFtrZXldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhbmRsZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlV2F0Y2hlciAoXG4gIHZtLFxuICBrZXlPckZuLFxuICBoYW5kbGVyLFxuICBvcHRpb25zXG4pIHtcbiAgaWYgKGlzUGxhaW5PYmplY3QoaGFuZGxlcikpIHtcbiAgICBvcHRpb25zID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gaGFuZGxlci5oYW5kbGVyO1xuICB9XG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZycpIHtcbiAgICBoYW5kbGVyID0gdm1baGFuZGxlcl07XG4gIH1cbiAgcmV0dXJuIHZtLiR3YXRjaChrZXlPckZuLCBoYW5kbGVyLCBvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBzdGF0ZU1peGluIChWdWUpIHtcbiAgLy8gZmxvdyBzb21laG93IGhhcyBwcm9ibGVtcyB3aXRoIGRpcmVjdGx5IGRlY2xhcmVkIGRlZmluaXRpb24gb2JqZWN0XG4gIC8vIHdoZW4gdXNpbmcgT2JqZWN0LmRlZmluZVByb3BlcnR5LCBzbyB3ZSBoYXZlIHRvIHByb2NlZHVyYWxseSBidWlsZCB1cFxuICAvLyB0aGUgb2JqZWN0IGhlcmUuXG4gIHZhciBkYXRhRGVmID0ge307XG4gIGRhdGFEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGF0YSB9O1xuICB2YXIgcHJvcHNEZWYgPSB7fTtcbiAgcHJvcHNEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcHJvcHMgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkYXRhRGVmLnNldCA9IGZ1bmN0aW9uIChuZXdEYXRhKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgcmVwbGFjaW5nIGluc3RhbmNlIHJvb3QgJGRhdGEuICcgK1xuICAgICAgICAnVXNlIG5lc3RlZCBkYXRhIHByb3BlcnRpZXMgaW5zdGVhZC4nLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gICAgcHJvcHNEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcIiRwcm9wcyBpcyByZWFkb25seS5cIiwgdGhpcyk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRkYXRhJywgZGF0YURlZik7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHByb3BzJywgcHJvcHNEZWYpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHNldCA9IHNldDtcbiAgVnVlLnByb3RvdHlwZS4kZGVsZXRlID0gZGVsO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHdhdGNoID0gZnVuY3Rpb24gKFxuICAgIGV4cE9yRm4sXG4gICAgY2IsXG4gICAgb3B0aW9uc1xuICApIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChpc1BsYWluT2JqZWN0KGNiKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKVxuICAgIH1cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLnVzZXIgPSB0cnVlO1xuICAgIHZhciB3YXRjaGVyID0gbmV3IFdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucy5pbW1lZGlhdGUpIHtcbiAgICAgIGNiLmNhbGwodm0sIHdhdGNoZXIudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gdW53YXRjaEZuICgpIHtcbiAgICAgIHdhdGNoZXIudGVhcmRvd24oKTtcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UHJvdmlkZSAodm0pIHtcbiAgdmFyIHByb3ZpZGUgPSB2bS4kb3B0aW9ucy5wcm92aWRlO1xuICBpZiAocHJvdmlkZSkge1xuICAgIHZtLl9wcm92aWRlZCA9IHR5cGVvZiBwcm92aWRlID09PSAnZnVuY3Rpb24nXG4gICAgICA/IHByb3ZpZGUuY2FsbCh2bSlcbiAgICAgIDogcHJvdmlkZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0SW5qZWN0aW9ucyAodm0pIHtcbiAgdmFyIHJlc3VsdCA9IHJlc29sdmVJbmplY3Qodm0uJG9wdGlvbnMuaW5qZWN0LCB2bSk7XG4gIGlmIChyZXN1bHQpIHtcbiAgICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgPSBmYWxzZTtcbiAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCBrZXksIHJlc3VsdFtrZXldLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYW4gaW5qZWN0ZWQgdmFsdWUgZGlyZWN0bHkgc2luY2UgdGhlIGNoYW5nZXMgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwcm92aWRlZCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJpbmplY3Rpb24gYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydCA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUluamVjdCAoaW5qZWN0LCB2bSkge1xuICBpZiAoaW5qZWN0KSB7XG4gICAgLy8gaW5qZWN0IGlzIDphbnkgYmVjYXVzZSBmbG93IGlzIG5vdCBzbWFydCBlbm91Z2ggdG8gZmlndXJlIG91dCBjYWNoZWRcbiAgICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIga2V5cyA9IGhhc1N5bWJvbFxuICAgICAgICA/IFJlZmxlY3Qub3duS2V5cyhpbmplY3QpXG4gICAgICAgIDogT2JqZWN0LmtleXMoaW5qZWN0KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICB2YXIgcHJvdmlkZUtleSA9IGluamVjdFtrZXldO1xuICAgICAgdmFyIHNvdXJjZSA9IHZtO1xuICAgICAgd2hpbGUgKHNvdXJjZSkge1xuICAgICAgICBpZiAoc291cmNlLl9wcm92aWRlZCAmJiBwcm92aWRlS2V5IGluIHNvdXJjZS5fcHJvdmlkZWQpIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHNvdXJjZS5fcHJvdmlkZWRbcHJvdmlkZUtleV07XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2UgPSBzb3VyY2UuJHBhcmVudDtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFzb3VyY2UpIHtcbiAgICAgICAgd2FybigoXCJJbmplY3Rpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIG5vdCBmb3VuZFwiKSwgdm0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQgKFxuICBDdG9yLFxuICBwcm9wc0RhdGEsXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuXG4pIHtcbiAgdmFyIHByb3BzID0ge307XG4gIHZhciBwcm9wT3B0aW9ucyA9IEN0b3Iub3B0aW9ucy5wcm9wcztcbiAgaWYgKGlzRGVmKHByb3BPcHRpb25zKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEgfHwge30pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoaXNEZWYoZGF0YS5hdHRycykpIHsgbWVyZ2VQcm9wcyhwcm9wcywgZGF0YS5hdHRycyk7IH1cbiAgICBpZiAoaXNEZWYoZGF0YS5wcm9wcykpIHsgbWVyZ2VQcm9wcyhwcm9wcywgZGF0YS5wcm9wcyk7IH1cbiAgfVxuICAvLyBlbnN1cmUgdGhlIGNyZWF0ZUVsZW1lbnQgZnVuY3Rpb24gaW4gZnVuY3Rpb25hbCBjb21wb25lbnRzXG4gIC8vIGdldHMgYSB1bmlxdWUgY29udGV4dCAtIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBjb3JyZWN0IG5hbWVkIHNsb3QgY2hlY2tcbiAgdmFyIF9jb250ZXh0ID0gT2JqZWN0LmNyZWF0ZShjb250ZXh0KTtcbiAgdmFyIGggPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudChfY29udGV4dCwgYSwgYiwgYywgZCwgdHJ1ZSk7IH07XG4gIHZhciB2bm9kZSA9IEN0b3Iub3B0aW9ucy5yZW5kZXIuY2FsbChudWxsLCBoLCB7XG4gICAgZGF0YTogZGF0YSxcbiAgICBwcm9wczogcHJvcHMsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIHBhcmVudDogY29udGV4dCxcbiAgICBsaXN0ZW5lcnM6IGRhdGEub24gfHwge30sXG4gICAgaW5qZWN0aW9uczogcmVzb2x2ZUluamVjdChDdG9yLm9wdGlvbnMuaW5qZWN0LCBjb250ZXh0KSxcbiAgICBzbG90czogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBjb250ZXh0KTsgfVxuICB9KTtcbiAgaWYgKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICB2bm9kZS5mdW5jdGlvbmFsQ29udGV4dCA9IGNvbnRleHQ7XG4gICAgdm5vZGUuZnVuY3Rpb25hbE9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gICAgaWYgKGRhdGEuc2xvdCkge1xuICAgICAgKHZub2RlLmRhdGEgfHwgKHZub2RlLmRhdGEgPSB7fSkpLnNsb3QgPSBkYXRhLnNsb3Q7XG4gICAgfVxuICB9XG4gIHJldHVybiB2bm9kZVxufVxuXG5mdW5jdGlvbiBtZXJnZVByb3BzICh0bywgZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuICAgIHRvW2NhbWVsaXplKGtleSldID0gZnJvbVtrZXldO1xuICB9XG59XG5cbi8qICAqL1xuXG4vLyBob29rcyB0byBiZSBpbnZva2VkIG9uIGNvbXBvbmVudCBWTm9kZXMgZHVyaW5nIHBhdGNoXG52YXIgY29tcG9uZW50Vk5vZGVIb29rcyA9IHtcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCAoXG4gICAgdm5vZGUsXG4gICAgaHlkcmF0aW5nLFxuICAgIHBhcmVudEVsbSxcbiAgICByZWZFbG1cbiAgKSB7XG4gICAgaWYgKCF2bm9kZS5jb21wb25lbnRJbnN0YW5jZSB8fCB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZShcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIGFjdGl2ZUluc3RhbmNlLFxuICAgICAgICBwYXJlbnRFbG0sXG4gICAgICAgIHJlZkVsbVxuICAgICAgKTtcbiAgICAgIGNoaWxkLiRtb3VudChoeWRyYXRpbmcgPyB2bm9kZS5lbG0gOiB1bmRlZmluZWQsIGh5ZHJhdGluZyk7XG4gICAgfSBlbHNlIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgLy8ga2VwdC1hbGl2ZSBjb21wb25lbnRzLCB0cmVhdCBhcyBhIHBhdGNoXG4gICAgICB2YXIgbW91bnRlZE5vZGUgPSB2bm9kZTsgLy8gd29yayBhcm91bmQgZmxvd1xuICAgICAgY29tcG9uZW50Vk5vZGVIb29rcy5wcmVwYXRjaChtb3VudGVkTm9kZSwgbW91bnRlZE5vZGUpO1xuICAgIH1cbiAgfSxcblxuICBwcmVwYXRjaDogZnVuY3Rpb24gcHJlcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBvcHRpb25zID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIHVwZGF0ZUNoaWxkQ29tcG9uZW50KFxuICAgICAgY2hpbGQsXG4gICAgICBvcHRpb25zLnByb3BzRGF0YSwgLy8gdXBkYXRlZCBwcm9wc1xuICAgICAgb3B0aW9ucy5saXN0ZW5lcnMsIC8vIHVwZGF0ZWQgbGlzdGVuZXJzXG4gICAgICB2bm9kZSwgLy8gbmV3IHBhcmVudCB2bm9kZVxuICAgICAgb3B0aW9ucy5jaGlsZHJlbiAvLyBuZXcgY2hpbGRyZW5cbiAgICApO1xuICB9LFxuXG4gIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0ICh2bm9kZSkge1xuICAgIHZhciBjb250ZXh0ID0gdm5vZGUuY29udGV4dDtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQpIHtcbiAgICAgIGNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgY2FsbEhvb2soY29tcG9uZW50SW5zdGFuY2UsICdtb3VudGVkJyk7XG4gICAgfVxuICAgIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgaWYgKGNvbnRleHQuX2lzTW91bnRlZCkge1xuICAgICAgICAvLyB2dWUtcm91dGVyIzEyMTJcbiAgICAgICAgLy8gRHVyaW5nIHVwZGF0ZXMsIGEga2VwdC1hbGl2ZSBjb21wb25lbnQncyBjaGlsZCBjb21wb25lbnRzIG1heVxuICAgICAgICAvLyBjaGFuZ2UsIHNvIGRpcmVjdGx5IHdhbGtpbmcgdGhlIHRyZWUgaGVyZSBtYXkgY2FsbCBhY3RpdmF0ZWQgaG9va3NcbiAgICAgICAgLy8gb24gaW5jb3JyZWN0IGNoaWxkcmVuLiBJbnN0ZWFkIHdlIHB1c2ggdGhlbSBpbnRvIGEgcXVldWUgd2hpY2ggd2lsbFxuICAgICAgICAvLyBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIHdob2xlIHBhdGNoIHByb2Nlc3MgZW5kZWQuXG4gICAgICAgIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgaWYgKCF2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgICBjb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG52YXIgaG9va3NUb01lcmdlID0gT2JqZWN0LmtleXMoY29tcG9uZW50Vk5vZGVIb29rcyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAoXG4gIEN0b3IsXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICBpZiAoaXNVbmRlZihDdG9yKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGJhc2VDdG9yID0gY29udGV4dC4kb3B0aW9ucy5fYmFzZTtcblxuICAvLyBwbGFpbiBvcHRpb25zIG9iamVjdDogdHVybiBpdCBpbnRvIGEgY29uc3RydWN0b3JcbiAgaWYgKGlzT2JqZWN0KEN0b3IpKSB7XG4gICAgQ3RvciA9IGJhc2VDdG9yLmV4dGVuZChDdG9yKTtcbiAgfVxuXG4gIC8vIGlmIGF0IHRoaXMgc3RhZ2UgaXQncyBub3QgYSBjb25zdHJ1Y3RvciBvciBhbiBhc3luYyBjb21wb25lbnQgZmFjdG9yeSxcbiAgLy8gcmVqZWN0LlxuICBpZiAodHlwZW9mIEN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybigoXCJJbnZhbGlkIENvbXBvbmVudCBkZWZpbml0aW9uOiBcIiArIChTdHJpbmcoQ3RvcikpKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgLy8gYXN5bmMgY29tcG9uZW50XG4gIHZhciBhc3luY0ZhY3Rvcnk7XG4gIGlmIChpc1VuZGVmKEN0b3IuY2lkKSkge1xuICAgIGFzeW5jRmFjdG9yeSA9IEN0b3I7XG4gICAgQ3RvciA9IHJlc29sdmVBc3luY0NvbXBvbmVudChhc3luY0ZhY3RvcnksIGJhc2VDdG9yLCBjb250ZXh0KTtcbiAgICBpZiAoQ3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciBub2RlIGZvciBhc3luYyBjb21wb25lbnQsIHdoaWNoIGlzIHJlbmRlcmVkXG4gICAgICAvLyBhcyBhIGNvbW1lbnQgbm9kZSBidXQgcHJlc2VydmVzIGFsbCB0aGUgcmF3IGluZm9ybWF0aW9uIGZvciB0aGUgbm9kZS5cbiAgICAgIC8vIHRoZSBpbmZvcm1hdGlvbiB3aWxsIGJlIHVzZWQgZm9yIGFzeW5jIHNlcnZlci1yZW5kZXJpbmcgYW5kIGh5ZHJhdGlvbi5cbiAgICAgIHJldHVybiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyKFxuICAgICAgICBhc3luY0ZhY3RvcnksXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICB0YWdcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBkYXRhID0gZGF0YSB8fCB7fTtcblxuICAvLyByZXNvbHZlIGNvbnN0cnVjdG9yIG9wdGlvbnMgaW4gY2FzZSBnbG9iYWwgbWl4aW5zIGFyZSBhcHBsaWVkIGFmdGVyXG4gIC8vIGNvbXBvbmVudCBjb25zdHJ1Y3RvciBjcmVhdGlvblxuICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3IpO1xuXG4gIC8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBkYXRhIGludG8gcHJvcHMgJiBldmVudHNcbiAgaWYgKGlzRGVmKGRhdGEubW9kZWwpKSB7XG4gICAgdHJhbnNmb3JtTW9kZWwoQ3Rvci5vcHRpb25zLCBkYXRhKTtcbiAgfVxuXG4gIC8vIGV4dHJhY3QgcHJvcHNcbiAgdmFyIHByb3BzRGF0YSA9IGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEoZGF0YSwgQ3RvciwgdGFnKTtcblxuICAvLyBmdW5jdGlvbmFsIGNvbXBvbmVudFxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5mdW5jdGlvbmFsKSkge1xuICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50KEN0b3IsIHByb3BzRGF0YSwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pXG4gIH1cblxuICAvLyBleHRyYWN0IGxpc3RlbmVycywgc2luY2UgdGhlc2UgbmVlZHMgdG8gYmUgdHJlYXRlZCBhc1xuICAvLyBjaGlsZCBjb21wb25lbnQgbGlzdGVuZXJzIGluc3RlYWQgb2YgRE9NIGxpc3RlbmVyc1xuICB2YXIgbGlzdGVuZXJzID0gZGF0YS5vbjtcbiAgLy8gcmVwbGFjZSB3aXRoIGxpc3RlbmVycyB3aXRoIC5uYXRpdmUgbW9kaWZpZXJcbiAgLy8gc28gaXQgZ2V0cyBwcm9jZXNzZWQgZHVyaW5nIHBhcmVudCBjb21wb25lbnQgcGF0Y2guXG4gIGRhdGEub24gPSBkYXRhLm5hdGl2ZU9uO1xuXG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmFic3RyYWN0KSkge1xuICAgIC8vIGFic3RyYWN0IGNvbXBvbmVudHMgZG8gbm90IGtlZXAgYW55dGhpbmdcbiAgICAvLyBvdGhlciB0aGFuIHByb3BzICYgbGlzdGVuZXJzICYgc2xvdFxuXG4gICAgLy8gd29yayBhcm91bmQgZmxvd1xuICAgIHZhciBzbG90ID0gZGF0YS5zbG90O1xuICAgIGRhdGEgPSB7fTtcbiAgICBpZiAoc2xvdCkge1xuICAgICAgZGF0YS5zbG90ID0gc2xvdDtcbiAgICB9XG4gIH1cblxuICAvLyBtZXJnZSBjb21wb25lbnQgbWFuYWdlbWVudCBob29rcyBvbnRvIHRoZSBwbGFjZWhvbGRlciBub2RlXG4gIG1lcmdlSG9va3MoZGF0YSk7XG5cbiAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgdm5vZGVcbiAgdmFyIG5hbWUgPSBDdG9yLm9wdGlvbnMubmFtZSB8fCB0YWc7XG4gIHZhciB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAoXCJ2dWUtY29tcG9uZW50LVwiICsgKEN0b3IuY2lkKSArIChuYW1lID8gKFwiLVwiICsgbmFtZSkgOiAnJykpLFxuICAgIGRhdGEsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHQsXG4gICAgeyBDdG9yOiBDdG9yLCBwcm9wc0RhdGE6IHByb3BzRGF0YSwgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsIHRhZzogdGFnLCBjaGlsZHJlbjogY2hpbGRyZW4gfSxcbiAgICBhc3luY0ZhY3RvcnlcbiAgKTtcbiAgcmV0dXJuIHZub2RlXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUgKFxuICB2bm9kZSwgLy8gd2Uga25vdyBpdCdzIE1vdW50ZWRDb21wb25lbnRWTm9kZSBidXQgZmxvdyBkb2Vzbid0XG4gIHBhcmVudCwgLy8gYWN0aXZlSW5zdGFuY2UgaW4gbGlmZWN5Y2xlIHN0YXRlXG4gIHBhcmVudEVsbSxcbiAgcmVmRWxtXG4pIHtcbiAgdmFyIHZub2RlQ29tcG9uZW50T3B0aW9ucyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIF9pc0NvbXBvbmVudDogdHJ1ZSxcbiAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICBwcm9wc0RhdGE6IHZub2RlQ29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGEsXG4gICAgX2NvbXBvbmVudFRhZzogdm5vZGVDb21wb25lbnRPcHRpb25zLnRhZyxcbiAgICBfcGFyZW50Vm5vZGU6IHZub2RlLFxuICAgIF9wYXJlbnRMaXN0ZW5lcnM6IHZub2RlQ29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnMsXG4gICAgX3JlbmRlckNoaWxkcmVuOiB2bm9kZUNvbXBvbmVudE9wdGlvbnMuY2hpbGRyZW4sXG4gICAgX3BhcmVudEVsbTogcGFyZW50RWxtIHx8IG51bGwsXG4gICAgX3JlZkVsbTogcmVmRWxtIHx8IG51bGxcbiAgfTtcbiAgLy8gY2hlY2sgaW5saW5lLXRlbXBsYXRlIHJlbmRlciBmdW5jdGlvbnNcbiAgdmFyIGlubGluZVRlbXBsYXRlID0gdm5vZGUuZGF0YS5pbmxpbmVUZW1wbGF0ZTtcbiAgaWYgKGlzRGVmKGlubGluZVRlbXBsYXRlKSkge1xuICAgIG9wdGlvbnMucmVuZGVyID0gaW5saW5lVGVtcGxhdGUucmVuZGVyO1xuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gaW5saW5lVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zO1xuICB9XG4gIHJldHVybiBuZXcgdm5vZGVDb21wb25lbnRPcHRpb25zLkN0b3Iob3B0aW9ucylcbn1cblxuZnVuY3Rpb24gbWVyZ2VIb29rcyAoZGF0YSkge1xuICBpZiAoIWRhdGEuaG9vaykge1xuICAgIGRhdGEuaG9vayA9IHt9O1xuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3NUb01lcmdlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGhvb2tzVG9NZXJnZVtpXTtcbiAgICB2YXIgZnJvbVBhcmVudCA9IGRhdGEuaG9va1trZXldO1xuICAgIHZhciBvdXJzID0gY29tcG9uZW50Vk5vZGVIb29rc1trZXldO1xuICAgIGRhdGEuaG9va1trZXldID0gZnJvbVBhcmVudCA/IG1lcmdlSG9vayQxKG91cnMsIGZyb21QYXJlbnQpIDogb3VycztcbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZUhvb2skMSAob25lLCB0d28pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7XG4gICAgb25lKGEsIGIsIGMsIGQpO1xuICAgIHR3byhhLCBiLCBjLCBkKTtcbiAgfVxufVxuXG4vLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgaW5mbyAodmFsdWUgYW5kIGNhbGxiYWNrKSBpbnRvXG4vLyBwcm9wIGFuZCBldmVudCBoYW5kbGVyIHJlc3BlY3RpdmVseS5cbmZ1bmN0aW9uIHRyYW5zZm9ybU1vZGVsIChvcHRpb25zLCBkYXRhKSB7XG4gIHZhciBwcm9wID0gKG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5wcm9wKSB8fCAndmFsdWUnO1xuICB2YXIgZXZlbnQgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLmV2ZW50KSB8fCAnaW5wdXQnOyhkYXRhLnByb3BzIHx8IChkYXRhLnByb3BzID0ge30pKVtwcm9wXSA9IGRhdGEubW9kZWwudmFsdWU7XG4gIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gIGlmIChpc0RlZihvbltldmVudF0pKSB7XG4gICAgb25bZXZlbnRdID0gW2RhdGEubW9kZWwuY2FsbGJhY2tdLmNvbmNhdChvbltldmVudF0pO1xuICB9IGVsc2Uge1xuICAgIG9uW2V2ZW50XSA9IGRhdGEubW9kZWwuY2FsbGJhY2s7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBTSU1QTEVfTk9STUFMSVpFID0gMTtcbnZhciBBTFdBWVNfTk9STUFMSVpFID0gMjtcblxuLy8gd3JhcHBlciBmdW5jdGlvbiBmb3IgcHJvdmlkaW5nIGEgbW9yZSBmbGV4aWJsZSBpbnRlcmZhY2Vcbi8vIHdpdGhvdXQgZ2V0dGluZyB5ZWxsZWQgYXQgYnkgZmxvd1xuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlLFxuICBhbHdheXNOb3JtYWxpemVcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSB8fCBpc1ByaW1pdGl2ZShkYXRhKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gY2hpbGRyZW47XG4gICAgY2hpbGRyZW4gPSBkYXRhO1xuICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKGlzVHJ1ZShhbHdheXNOb3JtYWxpemUpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBBTFdBWVNfTk9STUFMSVpFO1xuICB9XG4gIHJldHVybiBfY3JlYXRlRWxlbWVudChjb250ZXh0LCB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSlcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZVxuKSB7XG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZigoZGF0YSkuX19vYl9fKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiQXZvaWQgdXNpbmcgb2JzZXJ2ZWQgZGF0YSBvYmplY3QgYXMgdm5vZGUgZGF0YTogXCIgKyAoSlNPTi5zdHJpbmdpZnkoZGF0YSkpICsgXCJcXG5cIiArXG4gICAgICAnQWx3YXlzIGNyZWF0ZSBmcmVzaCB2bm9kZSBkYXRhIG9iamVjdHMgaW4gZWFjaCByZW5kZXIhJyxcbiAgICAgIGNvbnRleHRcbiAgICApO1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyBvYmplY3Qgc3ludGF4IGluIHYtYmluZFxuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5pcykpIHtcbiAgICB0YWcgPSBkYXRhLmlzO1xuICB9XG4gIGlmICghdGFnKSB7XG4gICAgLy8gaW4gY2FzZSBvZiBjb21wb25lbnQgOmlzIHNldCB0byBmYWxzeSB2YWx1ZVxuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyB3YXJuIGFnYWluc3Qgbm9uLXByaW1pdGl2ZSBrZXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmtleSkgJiYgIWlzUHJpbWl0aXZlKGRhdGEua2V5KVxuICApIHtcbiAgICB3YXJuKFxuICAgICAgJ0F2b2lkIHVzaW5nIG5vbi1wcmltaXRpdmUgdmFsdWUgYXMga2V5LCAnICtcbiAgICAgICd1c2Ugc3RyaW5nL251bWJlciB2YWx1ZSBpbnN0ZWFkLicsXG4gICAgICBjb250ZXh0XG4gICAgKTtcbiAgfVxuICAvLyBzdXBwb3J0IHNpbmdsZSBmdW5jdGlvbiBjaGlsZHJlbiBhcyBkZWZhdWx0IHNjb3BlZCBzbG90XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJlxuICAgIHR5cGVvZiBjaGlsZHJlblswXSA9PT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICBkYXRhID0gZGF0YSB8fCB7fTtcbiAgICBkYXRhLnNjb3BlZFNsb3RzID0geyBkZWZhdWx0OiBjaGlsZHJlblswXSB9O1xuICAgIGNoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIH1cbiAgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBBTFdBWVNfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBub3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH0gZWxzZSBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IFNJTVBMRV9OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfVxuICB2YXIgdm5vZGUsIG5zO1xuICBpZiAodHlwZW9mIHRhZyA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgQ3RvcjtcbiAgICBucyA9IGNvbmZpZy5nZXRUYWdOYW1lc3BhY2UodGFnKTtcbiAgICBpZiAoY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgICAgLy8gcGxhdGZvcm0gYnVpbHQtaW4gZWxlbWVudHNcbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICBjb25maWcucGFyc2VQbGF0Zm9ybVRhZ05hbWUodGFnKSwgZGF0YSwgY2hpbGRyZW4sXG4gICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0XG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoaXNEZWYoQ3RvciA9IHJlc29sdmVBc3NldChjb250ZXh0LiRvcHRpb25zLCAnY29tcG9uZW50cycsIHRhZykpKSB7XG4gICAgICAvLyBjb21wb25lbnRcbiAgICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KEN0b3IsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuLCB0YWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1bmtub3duIG9yIHVubGlzdGVkIG5hbWVzcGFjZWQgZWxlbWVudHNcbiAgICAgIC8vIGNoZWNrIGF0IHJ1bnRpbWUgYmVjYXVzZSBpdCBtYXkgZ2V0IGFzc2lnbmVkIGEgbmFtZXNwYWNlIHdoZW4gaXRzXG4gICAgICAvLyBwYXJlbnQgbm9ybWFsaXplcyBjaGlsZHJlblxuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIHRhZywgZGF0YSwgY2hpbGRyZW4sXG4gICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBkaXJlY3QgY29tcG9uZW50IG9wdGlvbnMgLyBjb25zdHJ1Y3RvclxuICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KHRhZywgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pO1xuICB9XG4gIGlmIChpc0RlZih2bm9kZSkpIHtcbiAgICBpZiAobnMpIHsgYXBwbHlOUyh2bm9kZSwgbnMpOyB9XG4gICAgcmV0dXJuIHZub2RlXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5TlMgKHZub2RlLCBucykge1xuICB2bm9kZS5ucyA9IG5zO1xuICBpZiAodm5vZGUudGFnID09PSAnZm9yZWlnbk9iamVjdCcpIHtcbiAgICAvLyB1c2UgZGVmYXVsdCBuYW1lc3BhY2UgaW5zaWRlIGZvcmVpZ25PYmplY3RcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoaXNEZWYodm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGNoaWxkLnRhZykgJiYgaXNVbmRlZihjaGlsZC5ucykpIHtcbiAgICAgICAgYXBwbHlOUyhjaGlsZCwgbnMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHYtZm9yIGxpc3RzLlxuICovXG5mdW5jdGlvbiByZW5kZXJMaXN0IChcbiAgdmFsLFxuICByZW5kZXJcbikge1xuICB2YXIgcmV0LCBpLCBsLCBrZXlzLCBrZXk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkgfHwgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgbCA9IHZhbC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxbaV0sIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwpO1xuICAgIGZvciAoaSA9IDA7IGkgPCB2YWw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKGkgKyAxLCBpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsKSkge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgIHJldCA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtrZXldLCBrZXksIGkpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNEZWYocmV0KSkge1xuICAgIChyZXQpLl9pc1ZMaXN0ID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgPHNsb3Q+XG4gKi9cbmZ1bmN0aW9uIHJlbmRlclNsb3QgKFxuICBuYW1lLFxuICBmYWxsYmFjayxcbiAgcHJvcHMsXG4gIGJpbmRPYmplY3Rcbikge1xuICB2YXIgc2NvcGVkU2xvdEZuID0gdGhpcy4kc2NvcGVkU2xvdHNbbmFtZV07XG4gIGlmIChzY29wZWRTbG90Rm4pIHsgLy8gc2NvcGVkIHNsb3RcbiAgICBwcm9wcyA9IHByb3BzIHx8IHt9O1xuICAgIGlmIChiaW5kT2JqZWN0KSB7XG4gICAgICBwcm9wcyA9IGV4dGVuZChleHRlbmQoe30sIGJpbmRPYmplY3QpLCBwcm9wcyk7XG4gICAgfVxuICAgIHJldHVybiBzY29wZWRTbG90Rm4ocHJvcHMpIHx8IGZhbGxiYWNrXG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsb3ROb2RlcyA9IHRoaXMuJHNsb3RzW25hbWVdO1xuICAgIC8vIHdhcm4gZHVwbGljYXRlIHNsb3QgdXNhZ2VcbiAgICBpZiAoc2xvdE5vZGVzICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHNsb3ROb2Rlcy5fcmVuZGVyZWQgJiYgd2FybihcbiAgICAgICAgXCJEdXBsaWNhdGUgcHJlc2VuY2Ugb2Ygc2xvdCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiIGZvdW5kIGluIHRoZSBzYW1lIHJlbmRlciB0cmVlIFwiICtcbiAgICAgICAgXCItIHRoaXMgd2lsbCBsaWtlbHkgY2F1c2UgcmVuZGVyIGVycm9ycy5cIixcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICAgIHNsb3ROb2Rlcy5fcmVuZGVyZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gc2xvdE5vZGVzIHx8IGZhbGxiYWNrXG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyBmaWx0ZXJzXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIgKGlkKSB7XG4gIHJldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBpZCwgdHJ1ZSkgfHwgaWRlbnRpdHlcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIGNoZWNraW5nIGtleUNvZGVzIGZyb20gY29uZmlnLlxuICovXG5mdW5jdGlvbiBjaGVja0tleUNvZGVzIChcbiAgZXZlbnRLZXlDb2RlLFxuICBrZXksXG4gIGJ1aWx0SW5BbGlhc1xuKSB7XG4gIHZhciBrZXlDb2RlcyA9IGNvbmZpZy5rZXlDb2Rlc1trZXldIHx8IGJ1aWx0SW5BbGlhcztcbiAgaWYgKEFycmF5LmlzQXJyYXkoa2V5Q29kZXMpKSB7XG4gICAgcmV0dXJuIGtleUNvZGVzLmluZGV4T2YoZXZlbnRLZXlDb2RlKSA9PT0gLTFcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ga2V5Q29kZXMgIT09IGV2ZW50S2V5Q29kZVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBtZXJnaW5nIHYtYmluZD1cIm9iamVjdFwiIGludG8gYSBWTm9kZSdzIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGJpbmRPYmplY3RQcm9wcyAoXG4gIGRhdGEsXG4gIHRhZyxcbiAgdmFsdWUsXG4gIGFzUHJvcCxcbiAgaXNTeW5jXG4pIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3YtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IG9yIEFycmF5IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdG9PYmplY3QodmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFyIGhhc2g7XG4gICAgICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ID09PSAnY2xhc3MnIHx8XG4gICAgICAgICAga2V5ID09PSAnc3R5bGUnIHx8XG4gICAgICAgICAgaXNSZXNlcnZlZEF0dHJpYnV0ZShrZXkpXG4gICAgICAgICkge1xuICAgICAgICAgIGhhc2ggPSBkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB0eXBlID0gZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnR5cGU7XG4gICAgICAgICAgaGFzaCA9IGFzUHJvcCB8fCBjb25maWcubXVzdFVzZVByb3AodGFnLCB0eXBlLCBrZXkpXG4gICAgICAgICAgICA/IGRhdGEuZG9tUHJvcHMgfHwgKGRhdGEuZG9tUHJvcHMgPSB7fSlcbiAgICAgICAgICAgIDogZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIShrZXkgaW4gaGFzaCkpIHtcbiAgICAgICAgICBoYXNoW2tleV0gPSB2YWx1ZVtrZXldO1xuXG4gICAgICAgICAgaWYgKGlzU3luYykge1xuICAgICAgICAgICAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgICAgICAgICAgIG9uWyhcInVwZGF0ZTpcIiArIGtleSldID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICB2YWx1ZVtrZXldID0gJGV2ZW50O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkgbG9vcCgga2V5ICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgc3RhdGljIHRyZWVzLlxuICovXG5mdW5jdGlvbiByZW5kZXJTdGF0aWMgKFxuICBpbmRleCxcbiAgaXNJbkZvclxuKSB7XG4gIHZhciB0cmVlID0gdGhpcy5fc3RhdGljVHJlZXNbaW5kZXhdO1xuICAvLyBpZiBoYXMgYWxyZWFkeS1yZW5kZXJlZCBzdGF0aWMgdHJlZSBhbmQgbm90IGluc2lkZSB2LWZvcixcbiAgLy8gd2UgY2FuIHJldXNlIHRoZSBzYW1lIHRyZWUgYnkgZG9pbmcgYSBzaGFsbG93IGNsb25lLlxuICBpZiAodHJlZSAmJiAhaXNJbkZvcikge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHRyZWUpXG4gICAgICA/IGNsb25lVk5vZGVzKHRyZWUpXG4gICAgICA6IGNsb25lVk5vZGUodHJlZSlcbiAgfVxuICAvLyBvdGhlcndpc2UsIHJlbmRlciBhIGZyZXNoIHRyZWUuXG4gIHRyZWUgPSB0aGlzLl9zdGF0aWNUcmVlc1tpbmRleF0gPVxuICAgIHRoaXMuJG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zW2luZGV4XS5jYWxsKHRoaXMuX3JlbmRlclByb3h5KTtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX3N0YXRpY19fXCIgKyBpbmRleCksIGZhbHNlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3Igdi1vbmNlLlxuICogRWZmZWN0aXZlbHkgaXQgbWVhbnMgbWFya2luZyB0aGUgbm9kZSBhcyBzdGF0aWMgd2l0aCBhIHVuaXF1ZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIG1hcmtPbmNlIChcbiAgdHJlZSxcbiAgaW5kZXgsXG4gIGtleVxuKSB7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19vbmNlX19cIiArIGluZGV4ICsgKGtleSA/IChcIl9cIiArIGtleSkgOiBcIlwiKSksIHRydWUpO1xuICByZXR1cm4gdHJlZVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljIChcbiAgdHJlZSxcbiAga2V5LFxuICBpc09uY2Vcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheSh0cmVlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJlZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRyZWVbaV0gJiYgdHlwZW9mIHRyZWVbaV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG1hcmtTdGF0aWNOb2RlKHRyZWVbaV0sIChrZXkgKyBcIl9cIiArIGkpLCBpc09uY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBtYXJrU3RhdGljTm9kZSh0cmVlLCBrZXksIGlzT25jZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpY05vZGUgKG5vZGUsIGtleSwgaXNPbmNlKSB7XG4gIG5vZGUuaXNTdGF0aWMgPSB0cnVlO1xuICBub2RlLmtleSA9IGtleTtcbiAgbm9kZS5pc09uY2UgPSBpc09uY2U7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kT2JqZWN0TGlzdGVuZXJzIChkYXRhLCB2YWx1ZSkge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICd2LW9uIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3QgdmFsdWUnLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgb24gPSBkYXRhLm9uID0gZGF0YS5vbiA/IGV4dGVuZCh7fSwgZGF0YS5vbikgOiB7fTtcbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICB2YXIgZXhpc3RpbmcgPSBvbltrZXldO1xuICAgICAgICB2YXIgb3VycyA9IHZhbHVlW2tleV07XG4gICAgICAgIG9uW2tleV0gPSBleGlzdGluZyA/IFtdLmNvbmNhdChvdXJzLCBleGlzdGluZykgOiBvdXJzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFJlbmRlciAodm0pIHtcbiAgdm0uX3Zub2RlID0gbnVsbDsgLy8gdGhlIHJvb3Qgb2YgdGhlIGNoaWxkIHRyZWVcbiAgdm0uX3N0YXRpY1RyZWVzID0gbnVsbDtcbiAgdmFyIHBhcmVudFZub2RlID0gdm0uJHZub2RlID0gdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlOyAvLyB0aGUgcGxhY2Vob2xkZXIgbm9kZSBpbiBwYXJlbnQgdHJlZVxuICB2YXIgcmVuZGVyQ29udGV4dCA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmNvbnRleHQ7XG4gIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyh2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4sIHJlbmRlckNvbnRleHQpO1xuICB2bS4kc2NvcGVkU2xvdHMgPSBlbXB0eU9iamVjdDtcbiAgLy8gYmluZCB0aGUgY3JlYXRlRWxlbWVudCBmbiB0byB0aGlzIGluc3RhbmNlXG4gIC8vIHNvIHRoYXQgd2UgZ2V0IHByb3BlciByZW5kZXIgY29udGV4dCBpbnNpZGUgaXQuXG4gIC8vIGFyZ3Mgb3JkZXI6IHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlLCBhbHdheXNOb3JtYWxpemVcbiAgLy8gaW50ZXJuYWwgdmVyc2lvbiBpcyB1c2VkIGJ5IHJlbmRlciBmdW5jdGlvbnMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZXNcbiAgdm0uX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgZmFsc2UpOyB9O1xuICAvLyBub3JtYWxpemF0aW9uIGlzIGFsd2F5cyBhcHBsaWVkIGZvciB0aGUgcHVibGljIHZlcnNpb24sIHVzZWQgaW5cbiAgLy8gdXNlci13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMuXG4gIHZtLiRjcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIHRydWUpOyB9O1xuXG4gIC8vICRhdHRycyAmICRsaXN0ZW5lcnMgYXJlIGV4cG9zZWQgZm9yIGVhc2llciBIT0MgY3JlYXRpb24uXG4gIC8vIHRoZXkgbmVlZCB0byBiZSByZWFjdGl2ZSBzbyB0aGF0IEhPQ3MgdXNpbmcgdGhlbSBhcmUgYWx3YXlzIHVwZGF0ZWRcbiAgdmFyIHBhcmVudERhdGEgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5kYXRhO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkYXR0cnMgaXMgcmVhZG9ubHkuXCIsIHZtKTtcbiAgICB9LCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRsaXN0ZW5lcnMnLCB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkbGlzdGVuZXJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMsIG51bGwsIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMsIG51bGwsIHRydWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbmRlck1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS4kbmV4dFRpY2sgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICByZXR1cm4gbmV4dFRpY2soZm4sIHRoaXMpXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS5fcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHJlZiA9IHZtLiRvcHRpb25zO1xuICAgIHZhciByZW5kZXIgPSByZWYucmVuZGVyO1xuICAgIHZhciBzdGF0aWNSZW5kZXJGbnMgPSByZWYuc3RhdGljUmVuZGVyRm5zO1xuICAgIHZhciBfcGFyZW50Vm5vZGUgPSByZWYuX3BhcmVudFZub2RlO1xuXG4gICAgaWYgKHZtLl9pc01vdW50ZWQpIHtcbiAgICAgIC8vIGNsb25lIHNsb3Qgbm9kZXMgb24gcmUtcmVuZGVyc1xuICAgICAgZm9yICh2YXIga2V5IGluIHZtLiRzbG90cykge1xuICAgICAgICB2bS4kc2xvdHNba2V5XSA9IGNsb25lVk5vZGVzKHZtLiRzbG90c1trZXldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2bS4kc2NvcGVkU2xvdHMgPSAoX3BhcmVudFZub2RlICYmIF9wYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzKSB8fCBlbXB0eU9iamVjdDtcblxuICAgIGlmIChzdGF0aWNSZW5kZXJGbnMgJiYgIXZtLl9zdGF0aWNUcmVlcykge1xuICAgICAgdm0uX3N0YXRpY1RyZWVzID0gW107XG4gICAgfVxuICAgIC8vIHNldCBwYXJlbnQgdm5vZGUuIHRoaXMgYWxsb3dzIHJlbmRlciBmdW5jdGlvbnMgdG8gaGF2ZSBhY2Nlc3NcbiAgICAvLyB0byB0aGUgZGF0YSBvbiB0aGUgcGxhY2Vob2xkZXIgbm9kZS5cbiAgICB2bS4kdm5vZGUgPSBfcGFyZW50Vm5vZGU7XG4gICAgLy8gcmVuZGVyIHNlbGZcbiAgICB2YXIgdm5vZGU7XG4gICAgdHJ5IHtcbiAgICAgIHZub2RlID0gcmVuZGVyLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyIGZ1bmN0aW9uXCIpO1xuICAgICAgLy8gcmV0dXJuIGVycm9yIHJlbmRlciByZXN1bHQsXG4gICAgICAvLyBvciBwcmV2aW91cyB2bm9kZSB0byBwcmV2ZW50IHJlbmRlciBlcnJvciBjYXVzaW5nIGJsYW5rIGNvbXBvbmVudFxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZub2RlID0gdm0uJG9wdGlvbnMucmVuZGVyRXJyb3JcbiAgICAgICAgICA/IHZtLiRvcHRpb25zLnJlbmRlckVycm9yLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCwgZSlcbiAgICAgICAgICA6IHZtLl92bm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyByZXR1cm4gZW1wdHkgdm5vZGUgaW4gY2FzZSB0aGUgcmVuZGVyIGZ1bmN0aW9uIGVycm9yZWQgb3V0XG4gICAgaWYgKCEodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ011bHRpcGxlIHJvb3Qgbm9kZXMgcmV0dXJuZWQgZnJvbSByZW5kZXIgZnVuY3Rpb24uIFJlbmRlciBmdW5jdGlvbiAnICtcbiAgICAgICAgICAnc2hvdWxkIHJldHVybiBhIHNpbmdsZSByb290IG5vZGUuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gICAgfVxuICAgIC8vIHNldCBwYXJlbnRcbiAgICB2bm9kZS5wYXJlbnQgPSBfcGFyZW50Vm5vZGU7XG4gICAgcmV0dXJuIHZub2RlXG4gIH07XG5cbiAgLy8gaW50ZXJuYWwgcmVuZGVyIGhlbHBlcnMuXG4gIC8vIHRoZXNlIGFyZSBleHBvc2VkIG9uIHRoZSBpbnN0YW5jZSBwcm90b3R5cGUgdG8gcmVkdWNlIGdlbmVyYXRlZCByZW5kZXJcbiAgLy8gY29kZSBzaXplLlxuICBWdWUucHJvdG90eXBlLl9vID0gbWFya09uY2U7XG4gIFZ1ZS5wcm90b3R5cGUuX24gPSB0b051bWJlcjtcbiAgVnVlLnByb3RvdHlwZS5fcyA9IHRvU3RyaW5nO1xuICBWdWUucHJvdG90eXBlLl9sID0gcmVuZGVyTGlzdDtcbiAgVnVlLnByb3RvdHlwZS5fdCA9IHJlbmRlclNsb3Q7XG4gIFZ1ZS5wcm90b3R5cGUuX3EgPSBsb29zZUVxdWFsO1xuICBWdWUucHJvdG90eXBlLl9pID0gbG9vc2VJbmRleE9mO1xuICBWdWUucHJvdG90eXBlLl9tID0gcmVuZGVyU3RhdGljO1xuICBWdWUucHJvdG90eXBlLl9mID0gcmVzb2x2ZUZpbHRlcjtcbiAgVnVlLnByb3RvdHlwZS5fayA9IGNoZWNrS2V5Q29kZXM7XG4gIFZ1ZS5wcm90b3R5cGUuX2IgPSBiaW5kT2JqZWN0UHJvcHM7XG4gIFZ1ZS5wcm90b3R5cGUuX3YgPSBjcmVhdGVUZXh0Vk5vZGU7XG4gIFZ1ZS5wcm90b3R5cGUuX2UgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICBWdWUucHJvdG90eXBlLl91ID0gcmVzb2x2ZVNjb3BlZFNsb3RzO1xuICBWdWUucHJvdG90eXBlLl9nID0gYmluZE9iamVjdExpc3RlbmVycztcbn1cblxuLyogICovXG5cbnZhciB1aWQgPSAwO1xuXG5mdW5jdGlvbiBpbml0TWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGEgdWlkXG4gICAgdm0uX3VpZCA9IHVpZCsrO1xuXG4gICAgdmFyIHN0YXJ0VGFnLCBlbmRUYWc7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1pbml0OlwiICsgKHZtLl91aWQpO1xuICAgICAgZW5kVGFnID0gXCJ2dWUtcGVyZi1lbmQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICB9XG5cbiAgICAvLyBhIGZsYWcgdG8gYXZvaWQgdGhpcyBiZWluZyBvYnNlcnZlZFxuICAgIHZtLl9pc1Z1ZSA9IHRydWU7XG4gICAgLy8gbWVyZ2Ugb3B0aW9uc1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuX2lzQ29tcG9uZW50KSB7XG4gICAgICAvLyBvcHRpbWl6ZSBpbnRlcm5hbCBjb21wb25lbnQgaW5zdGFudGlhdGlvblxuICAgICAgLy8gc2luY2UgZHluYW1pYyBvcHRpb25zIG1lcmdpbmcgaXMgcHJldHR5IHNsb3csIGFuZCBub25lIG9mIHRoZVxuICAgICAgLy8gaW50ZXJuYWwgY29tcG9uZW50IG9wdGlvbnMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQuXG4gICAgICBpbml0SW50ZXJuYWxDb21wb25lbnQodm0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS4kb3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgICAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyh2bS5jb25zdHJ1Y3RvciksXG4gICAgICAgIG9wdGlvbnMgfHwge30sXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpbml0UHJveHkodm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICB9XG4gICAgLy8gZXhwb3NlIHJlYWwgc2VsZlxuICAgIHZtLl9zZWxmID0gdm07XG4gICAgaW5pdExpZmVjeWNsZSh2bSk7XG4gICAgaW5pdEV2ZW50cyh2bSk7XG4gICAgaW5pdFJlbmRlcih2bSk7XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVDcmVhdGUnKTtcbiAgICBpbml0SW5qZWN0aW9ucyh2bSk7IC8vIHJlc29sdmUgaW5qZWN0aW9ucyBiZWZvcmUgZGF0YS9wcm9wc1xuICAgIGluaXRTdGF0ZSh2bSk7XG4gICAgaW5pdFByb3ZpZGUodm0pOyAvLyByZXNvbHZlIHByb3ZpZGUgYWZ0ZXIgZGF0YS9wcm9wc1xuICAgIGNhbGxIb29rKHZtLCAnY3JlYXRlZCcpO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHZtLl9uYW1lID0gZm9ybWF0Q29tcG9uZW50TmFtZSh2bSwgZmFsc2UpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoKHZtLl9uYW1lKSArIFwiIGluaXRcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH1cblxuICAgIGlmICh2bS4kb3B0aW9ucy5lbCkge1xuICAgICAgdm0uJG1vdW50KHZtLiRvcHRpb25zLmVsKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRJbnRlcm5hbENvbXBvbmVudCAodm0sIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUodm0uY29uc3RydWN0b3Iub3B0aW9ucyk7XG4gIC8vIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCdzIGZhc3RlciB0aGFuIGR5bmFtaWMgZW51bWVyYXRpb24uXG4gIG9wdHMucGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIG9wdHMucHJvcHNEYXRhID0gb3B0aW9ucy5wcm9wc0RhdGE7XG4gIG9wdHMuX3BhcmVudFZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7XG4gIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgb3B0cy5fcmVuZGVyQ2hpbGRyZW4gPSBvcHRpb25zLl9yZW5kZXJDaGlsZHJlbjtcbiAgb3B0cy5fY29tcG9uZW50VGFnID0gb3B0aW9ucy5fY29tcG9uZW50VGFnO1xuICBvcHRzLl9wYXJlbnRFbG0gPSBvcHRpb25zLl9wYXJlbnRFbG07XG4gIG9wdHMuX3JlZkVsbSA9IG9wdGlvbnMuX3JlZkVsbTtcbiAgaWYgKG9wdGlvbnMucmVuZGVyKSB7XG4gICAgb3B0cy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcbiAgICBvcHRzLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIGlmIChDdG9yLnN1cGVyKSB7XG4gICAgdmFyIHN1cGVyT3B0aW9ucyA9IHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvci5zdXBlcik7XG4gICAgdmFyIGNhY2hlZFN1cGVyT3B0aW9ucyA9IEN0b3Iuc3VwZXJPcHRpb25zO1xuICAgIGlmIChzdXBlck9wdGlvbnMgIT09IGNhY2hlZFN1cGVyT3B0aW9ucykge1xuICAgICAgLy8gc3VwZXIgb3B0aW9uIGNoYW5nZWQsXG4gICAgICAvLyBuZWVkIHRvIHJlc29sdmUgbmV3IG9wdGlvbnMuXG4gICAgICBDdG9yLnN1cGVyT3B0aW9ucyA9IHN1cGVyT3B0aW9ucztcbiAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBhbnkgbGF0ZS1tb2RpZmllZC9hdHRhY2hlZCBvcHRpb25zICgjNDk3NilcbiAgICAgIHZhciBtb2RpZmllZE9wdGlvbnMgPSByZXNvbHZlTW9kaWZpZWRPcHRpb25zKEN0b3IpO1xuICAgICAgLy8gdXBkYXRlIGJhc2UgZXh0ZW5kIG9wdGlvbnNcbiAgICAgIGlmIChtb2RpZmllZE9wdGlvbnMpIHtcbiAgICAgICAgZXh0ZW5kKEN0b3IuZXh0ZW5kT3B0aW9ucywgbW9kaWZpZWRPcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoc3VwZXJPcHRpb25zLCBDdG9yLmV4dGVuZE9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMubmFtZSkge1xuICAgICAgICBvcHRpb25zLmNvbXBvbmVudHNbb3B0aW9ucy5uYW1lXSA9IEN0b3I7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVNb2RpZmllZE9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG1vZGlmaWVkO1xuICB2YXIgbGF0ZXN0ID0gQ3Rvci5vcHRpb25zO1xuICB2YXIgZXh0ZW5kZWQgPSBDdG9yLmV4dGVuZE9wdGlvbnM7XG4gIHZhciBzZWFsZWQgPSBDdG9yLnNlYWxlZE9wdGlvbnM7XG4gIGZvciAodmFyIGtleSBpbiBsYXRlc3QpIHtcbiAgICBpZiAobGF0ZXN0W2tleV0gIT09IHNlYWxlZFtrZXldKSB7XG4gICAgICBpZiAoIW1vZGlmaWVkKSB7IG1vZGlmaWVkID0ge307IH1cbiAgICAgIG1vZGlmaWVkW2tleV0gPSBkZWR1cGUobGF0ZXN0W2tleV0sIGV4dGVuZGVkW2tleV0sIHNlYWxlZFtrZXldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1vZGlmaWVkXG59XG5cbmZ1bmN0aW9uIGRlZHVwZSAobGF0ZXN0LCBleHRlbmRlZCwgc2VhbGVkKSB7XG4gIC8vIGNvbXBhcmUgbGF0ZXN0IGFuZCBzZWFsZWQgdG8gZW5zdXJlIGxpZmVjeWNsZSBob29rcyB3b24ndCBiZSBkdXBsaWNhdGVkXG4gIC8vIGJldHdlZW4gbWVyZ2VzXG4gIGlmIChBcnJheS5pc0FycmF5KGxhdGVzdCkpIHtcbiAgICB2YXIgcmVzID0gW107XG4gICAgc2VhbGVkID0gQXJyYXkuaXNBcnJheShzZWFsZWQpID8gc2VhbGVkIDogW3NlYWxlZF07XG4gICAgZXh0ZW5kZWQgPSBBcnJheS5pc0FycmF5KGV4dGVuZGVkKSA/IGV4dGVuZGVkIDogW2V4dGVuZGVkXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhdGVzdC5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gcHVzaCBvcmlnaW5hbCBvcHRpb25zIGFuZCBub3Qgc2VhbGVkIG9wdGlvbnMgdG8gZXhjbHVkZSBkdXBsaWNhdGVkIG9wdGlvbnNcbiAgICAgIGlmIChleHRlbmRlZC5pbmRleE9mKGxhdGVzdFtpXSkgPj0gMCB8fCBzZWFsZWQuaW5kZXhPZihsYXRlc3RbaV0pIDwgMCkge1xuICAgICAgICByZXMucHVzaChsYXRlc3RbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxhdGVzdFxuICB9XG59XG5cbmZ1bmN0aW9uIFZ1ZSQzIChvcHRpb25zKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgISh0aGlzIGluc3RhbmNlb2YgVnVlJDMpXG4gICkge1xuICAgIHdhcm4oJ1Z1ZSBpcyBhIGNvbnN0cnVjdG9yIGFuZCBzaG91bGQgYmUgY2FsbGVkIHdpdGggdGhlIGBuZXdgIGtleXdvcmQnKTtcbiAgfVxuICB0aGlzLl9pbml0KG9wdGlvbnMpO1xufVxuXG5pbml0TWl4aW4oVnVlJDMpO1xuc3RhdGVNaXhpbihWdWUkMyk7XG5ldmVudHNNaXhpbihWdWUkMyk7XG5saWZlY3ljbGVNaXhpbihWdWUkMyk7XG5yZW5kZXJNaXhpbihWdWUkMyk7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0VXNlIChWdWUpIHtcbiAgVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICB2YXIgaW5zdGFsbGVkUGx1Z2lucyA9ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zIHx8ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zID0gW10pKTtcbiAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPiAtMSkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICBhcmdzLnVuc2hpZnQodGhpcyk7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW4uaW5zdGFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmluc3RhbGwuYXBwbHkocGx1Z2luLCBhcmdzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gICAgaW5zdGFsbGVkUGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRNaXhpbiQxIChWdWUpIHtcbiAgVnVlLm1peGluID0gZnVuY3Rpb24gKG1peGluKSB7XG4gICAgdGhpcy5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMub3B0aW9ucywgbWl4aW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXh0ZW5kIChWdWUpIHtcbiAgLyoqXG4gICAqIEVhY2ggaW5zdGFuY2UgY29uc3RydWN0b3IsIGluY2x1ZGluZyBWdWUsIGhhcyBhIHVuaXF1ZVxuICAgKiBjaWQuIFRoaXMgZW5hYmxlcyB1cyB0byBjcmVhdGUgd3JhcHBlZCBcImNoaWxkXG4gICAqIGNvbnN0cnVjdG9yc1wiIGZvciBwcm90b3R5cGFsIGluaGVyaXRhbmNlIGFuZCBjYWNoZSB0aGVtLlxuICAgKi9cbiAgVnVlLmNpZCA9IDA7XG4gIHZhciBjaWQgPSAxO1xuXG4gIC8qKlxuICAgKiBDbGFzcyBpbmhlcml0YW5jZVxuICAgKi9cbiAgVnVlLmV4dGVuZCA9IGZ1bmN0aW9uIChleHRlbmRPcHRpb25zKSB7XG4gICAgZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnMgfHwge307XG4gICAgdmFyIFN1cGVyID0gdGhpcztcbiAgICB2YXIgU3VwZXJJZCA9IFN1cGVyLmNpZDtcbiAgICB2YXIgY2FjaGVkQ3RvcnMgPSBleHRlbmRPcHRpb25zLl9DdG9yIHx8IChleHRlbmRPcHRpb25zLl9DdG9yID0ge30pO1xuICAgIGlmIChjYWNoZWRDdG9yc1tTdXBlcklkXSkge1xuICAgICAgcmV0dXJuIGNhY2hlZEN0b3JzW1N1cGVySWRdXG4gICAgfVxuXG4gICAgdmFyIG5hbWUgPSBleHRlbmRPcHRpb25zLm5hbWUgfHwgU3VwZXIub3B0aW9ucy5uYW1lO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIS9eW2EtekEtWl1bXFx3LV0qJC8udGVzdChuYW1lKSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdJbnZhbGlkIGNvbXBvbmVudCBuYW1lOiBcIicgKyBuYW1lICsgJ1wiLiBDb21wb25lbnQgbmFtZXMgJyArXG4gICAgICAgICAgJ2NhbiBvbmx5IGNvbnRhaW4gYWxwaGFudW1lcmljIGNoYXJhY3RlcnMgYW5kIHRoZSBoeXBoZW4sICcgK1xuICAgICAgICAgICdhbmQgbXVzdCBzdGFydCB3aXRoIGEgbGV0dGVyLidcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgU3ViID0gZnVuY3Rpb24gVnVlQ29tcG9uZW50IChvcHRpb25zKSB7XG4gICAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xuICAgIH07XG4gICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgICBTdWIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViO1xuICAgIFN1Yi5jaWQgPSBjaWQrKztcbiAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgIFN1cGVyLm9wdGlvbnMsXG4gICAgICBleHRlbmRPcHRpb25zXG4gICAgKTtcbiAgICBTdWJbJ3N1cGVyJ10gPSBTdXBlcjtcblxuICAgIC8vIEZvciBwcm9wcyBhbmQgY29tcHV0ZWQgcHJvcGVydGllcywgd2UgZGVmaW5lIHRoZSBwcm94eSBnZXR0ZXJzIG9uXG4gICAgLy8gdGhlIFZ1ZSBpbnN0YW5jZXMgYXQgZXh0ZW5zaW9uIHRpbWUsIG9uIHRoZSBleHRlbmRlZCBwcm90b3R5cGUuIFRoaXNcbiAgICAvLyBhdm9pZHMgT2JqZWN0LmRlZmluZVByb3BlcnR5IGNhbGxzIGZvciBlYWNoIGluc3RhbmNlIGNyZWF0ZWQuXG4gICAgaWYgKFN1Yi5vcHRpb25zLnByb3BzKSB7XG4gICAgICBpbml0UHJvcHMkMShTdWIpO1xuICAgIH1cbiAgICBpZiAoU3ViLm9wdGlvbnMuY29tcHV0ZWQpIHtcbiAgICAgIGluaXRDb21wdXRlZCQxKFN1Yik7XG4gICAgfVxuXG4gICAgLy8gYWxsb3cgZnVydGhlciBleHRlbnNpb24vbWl4aW4vcGx1Z2luIHVzYWdlXG4gICAgU3ViLmV4dGVuZCA9IFN1cGVyLmV4dGVuZDtcbiAgICBTdWIubWl4aW4gPSBTdXBlci5taXhpbjtcbiAgICBTdWIudXNlID0gU3VwZXIudXNlO1xuXG4gICAgLy8gY3JlYXRlIGFzc2V0IHJlZ2lzdGVycywgc28gZXh0ZW5kZWQgY2xhc3Nlc1xuICAgIC8vIGNhbiBoYXZlIHRoZWlyIHByaXZhdGUgYXNzZXRzIHRvby5cbiAgICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBTdWJbdHlwZV0gPSBTdXBlclt0eXBlXTtcbiAgICB9KTtcbiAgICAvLyBlbmFibGUgcmVjdXJzaXZlIHNlbGYtbG9va3VwXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIFN1Yi5vcHRpb25zLmNvbXBvbmVudHNbbmFtZV0gPSBTdWI7XG4gICAgfVxuXG4gICAgLy8ga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgc3VwZXIgb3B0aW9ucyBhdCBleHRlbnNpb24gdGltZS5cbiAgICAvLyBsYXRlciBhdCBpbnN0YW50aWF0aW9uIHdlIGNhbiBjaGVjayBpZiBTdXBlcidzIG9wdGlvbnMgaGF2ZVxuICAgIC8vIGJlZW4gdXBkYXRlZC5cbiAgICBTdWIuc3VwZXJPcHRpb25zID0gU3VwZXIub3B0aW9ucztcbiAgICBTdWIuZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnM7XG4gICAgU3ViLnNlYWxlZE9wdGlvbnMgPSBleHRlbmQoe30sIFN1Yi5vcHRpb25zKTtcblxuICAgIC8vIGNhY2hlIGNvbnN0cnVjdG9yXG4gICAgY2FjaGVkQ3RvcnNbU3VwZXJJZF0gPSBTdWI7XG4gICAgcmV0dXJuIFN1YlxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMkMSAoQ29tcCkge1xuICB2YXIgcHJvcHMgPSBDb21wLm9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIHByb3h5KENvbXAucHJvdG90eXBlLCBcIl9wcm9wc1wiLCBrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCQxIChDb21wKSB7XG4gIHZhciBjb21wdXRlZCA9IENvbXAub3B0aW9ucy5jb21wdXRlZDtcbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgZGVmaW5lQ29tcHV0ZWQoQ29tcC5wcm90b3R5cGUsIGtleSwgY29tcHV0ZWRba2V5XSk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyAoVnVlKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYXNzZXQgcmVnaXN0cmF0aW9uIG1ldGhvZHMuXG4gICAqL1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlW3R5cGVdID0gZnVuY3Rpb24gKFxuICAgICAgaWQsXG4gICAgICBkZWZpbml0aW9uXG4gICAgKSB7XG4gICAgICBpZiAoIWRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmICh0eXBlID09PSAnY29tcG9uZW50JyAmJiBjb25maWcuaXNSZXNlcnZlZFRhZyhpZCkpIHtcbiAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuICAgICAgICAgICAgICAnaWQ6ICcgKyBpZFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGlzUGxhaW5PYmplY3QoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgICBkZWZpbml0aW9uLm5hbWUgPSBkZWZpbml0aW9uLm5hbWUgfHwgaWQ7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHRoaXMub3B0aW9ucy5fYmFzZS5leHRlbmQoZGVmaW5pdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdkaXJlY3RpdmUnICYmIHR5cGVvZiBkZWZpbml0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHsgYmluZDogZGVmaW5pdGlvbiwgdXBkYXRlOiBkZWZpbml0aW9uIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXSA9IGRlZmluaXRpb247XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qICAqL1xuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbmZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWUgKG9wdHMpIHtcbiAgcmV0dXJuIG9wdHMgJiYgKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcpXG59XG5cbmZ1bmN0aW9uIG1hdGNoZXMgKHBhdHRlcm4sIG5hbWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi5pbmRleE9mKG5hbWUpID4gLTFcbiAgfSBlbHNlIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGF0dGVybi5zcGxpdCgnLCcpLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKGlzUmVnRXhwKHBhdHRlcm4pKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4udGVzdChuYW1lKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBwcnVuZUNhY2hlIChjYWNoZSwgY3VycmVudCwgZmlsdGVyKSB7XG4gIGZvciAodmFyIGtleSBpbiBjYWNoZSkge1xuICAgIHZhciBjYWNoZWROb2RlID0gY2FjaGVba2V5XTtcbiAgICBpZiAoY2FjaGVkTm9kZSkge1xuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNhY2hlZE5vZGUuY29tcG9uZW50T3B0aW9ucyk7XG4gICAgICBpZiAobmFtZSAmJiAhZmlsdGVyKG5hbWUpKSB7XG4gICAgICAgIGlmIChjYWNoZWROb2RlICE9PSBjdXJyZW50KSB7XG4gICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlZE5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGNhY2hlW2tleV0gPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcnVuZUNhY2hlRW50cnkgKHZub2RlKSB7XG4gIGlmICh2bm9kZSkge1xuICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbn1cblxudmFyIEtlZXBBbGl2ZSA9IHtcbiAgbmFtZTogJ2tlZXAtYWxpdmUnLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICBwcm9wczoge1xuICAgIGluY2x1ZGU6IHBhdHRlcm5UeXBlcyxcbiAgICBleGNsdWRlOiBwYXR0ZXJuVHlwZXNcbiAgfSxcblxuICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkICgpIHtcbiAgICB0aGlzLmNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfSxcblxuICBkZXN0cm95ZWQ6IGZ1bmN0aW9uIGRlc3Ryb3llZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcyQxLmNhY2hlKSB7XG4gICAgICBwcnVuZUNhY2hlRW50cnkodGhpcyQxLmNhY2hlW2tleV0pO1xuICAgIH1cbiAgfSxcblxuICB3YXRjaDoge1xuICAgIGluY2x1ZGU6IGZ1bmN0aW9uIGluY2x1ZGUgKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzLmNhY2hlLCB0aGlzLl92bm9kZSwgZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIG1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSxcbiAgICBleGNsdWRlOiBmdW5jdGlvbiBleGNsdWRlICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcy5jYWNoZSwgdGhpcy5fdm5vZGUsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAhbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciB2bm9kZSA9IGdldEZpcnN0Q29tcG9uZW50Q2hpbGQodGhpcy4kc2xvdHMuZGVmYXVsdCk7XG4gICAgdmFyIGNvbXBvbmVudE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIGlmIChjb21wb25lbnRPcHRpb25zKSB7XG4gICAgICAvLyBjaGVjayBwYXR0ZXJuXG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50T3B0aW9ucyk7XG4gICAgICBpZiAobmFtZSAmJiAoXG4gICAgICAgICh0aGlzLmluY2x1ZGUgJiYgIW1hdGNoZXModGhpcy5pbmNsdWRlLCBuYW1lKSkgfHxcbiAgICAgICAgKHRoaXMuZXhjbHVkZSAmJiBtYXRjaGVzKHRoaXMuZXhjbHVkZSwgbmFtZSkpXG4gICAgICApKSB7XG4gICAgICAgIHJldHVybiB2bm9kZVxuICAgICAgfVxuICAgICAgdmFyIGtleSA9IHZub2RlLmtleSA9PSBudWxsXG4gICAgICAgIC8vIHNhbWUgY29uc3RydWN0b3IgbWF5IGdldCByZWdpc3RlcmVkIGFzIGRpZmZlcmVudCBsb2NhbCBjb21wb25lbnRzXG4gICAgICAgIC8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcbiAgICAgICAgPyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkICsgKGNvbXBvbmVudE9wdGlvbnMudGFnID8gKFwiOjpcIiArIChjb21wb25lbnRPcHRpb25zLnRhZykpIDogJycpXG4gICAgICAgIDogdm5vZGUua2V5O1xuICAgICAgaWYgKHRoaXMuY2FjaGVba2V5XSkge1xuICAgICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IHRoaXMuY2FjaGVba2V5XS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2FjaGVba2V5XSA9IHZub2RlO1xuICAgICAgfVxuICAgICAgdm5vZGUuZGF0YS5rZWVwQWxpdmUgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdm5vZGVcbiAgfVxufTtcblxudmFyIGJ1aWx0SW5Db21wb25lbnRzID0ge1xuICBLZWVwQWxpdmU6IEtlZXBBbGl2ZVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRHbG9iYWxBUEkgKFZ1ZSkge1xuICAvLyBjb25maWdcbiAgdmFyIGNvbmZpZ0RlZiA9IHt9O1xuICBjb25maWdEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uZmlnOyB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbmZpZ0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnRG8gbm90IHJlcGxhY2UgdGhlIFZ1ZS5jb25maWcgb2JqZWN0LCBzZXQgaW5kaXZpZHVhbCBmaWVsZHMgaW5zdGVhZC4nXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSwgJ2NvbmZpZycsIGNvbmZpZ0RlZik7XG5cbiAgLy8gZXhwb3NlZCB1dGlsIG1ldGhvZHMuXG4gIC8vIE5PVEU6IHRoZXNlIGFyZSBub3QgY29uc2lkZXJlZCBwYXJ0IG9mIHRoZSBwdWJsaWMgQVBJIC0gYXZvaWQgcmVseWluZyBvblxuICAvLyB0aGVtIHVubGVzcyB5b3UgYXJlIGF3YXJlIG9mIHRoZSByaXNrLlxuICBWdWUudXRpbCA9IHtcbiAgICB3YXJuOiB3YXJuLFxuICAgIGV4dGVuZDogZXh0ZW5kLFxuICAgIG1lcmdlT3B0aW9uczogbWVyZ2VPcHRpb25zLFxuICAgIGRlZmluZVJlYWN0aXZlOiBkZWZpbmVSZWFjdGl2ZSQkMVxuICB9O1xuXG4gIFZ1ZS5zZXQgPSBzZXQ7XG4gIFZ1ZS5kZWxldGUgPSBkZWw7XG4gIFZ1ZS5uZXh0VGljayA9IG5leHRUaWNrO1xuXG4gIFZ1ZS5vcHRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZS5vcHRpb25zW3R5cGUgKyAncyddID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfSk7XG5cbiAgLy8gdGhpcyBpcyB1c2VkIHRvIGlkZW50aWZ5IHRoZSBcImJhc2VcIiBjb25zdHJ1Y3RvciB0byBleHRlbmQgYWxsIHBsYWluLW9iamVjdFxuICAvLyBjb21wb25lbnRzIHdpdGggaW4gV2VleCdzIG11bHRpLWluc3RhbmNlIHNjZW5hcmlvcy5cbiAgVnVlLm9wdGlvbnMuX2Jhc2UgPSBWdWU7XG5cbiAgZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIGJ1aWx0SW5Db21wb25lbnRzKTtcblxuICBpbml0VXNlKFZ1ZSk7XG4gIGluaXRNaXhpbiQxKFZ1ZSk7XG4gIGluaXRFeHRlbmQoVnVlKTtcbiAgaW5pdEFzc2V0UmVnaXN0ZXJzKFZ1ZSk7XG59XG5cbmluaXRHbG9iYWxBUEkoVnVlJDMpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlJDMucHJvdG90eXBlLCAnJGlzU2VydmVyJywge1xuICBnZXQ6IGlzU2VydmVyUmVuZGVyaW5nXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSQzLnByb3RvdHlwZSwgJyRzc3JDb250ZXh0Jywge1xuICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICByZXR1cm4gdGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dFxuICB9XG59KTtcblxuVnVlJDMudmVyc2lvbiA9ICcyLjQuMic7XG5cbi8qICAqL1xuXG4vLyB0aGVzZSBhcmUgcmVzZXJ2ZWQgZm9yIHdlYiBiZWNhdXNlIHRoZXkgYXJlIGRpcmVjdGx5IGNvbXBpbGVkIGF3YXlcbi8vIGR1cmluZyB0ZW1wbGF0ZSBjb21waWxhdGlvblxudmFyIGlzUmVzZXJ2ZWRBdHRyID0gbWFrZU1hcCgnc3R5bGUsY2xhc3MnKTtcblxuLy8gYXR0cmlidXRlcyB0aGF0IHNob3VsZCBiZSB1c2luZyBwcm9wcyBmb3IgYmluZGluZ1xudmFyIGFjY2VwdFZhbHVlID0gbWFrZU1hcCgnaW5wdXQsdGV4dGFyZWEsb3B0aW9uLHNlbGVjdCcpO1xudmFyIG11c3RVc2VQcm9wID0gZnVuY3Rpb24gKHRhZywgdHlwZSwgYXR0cikge1xuICByZXR1cm4gKFxuICAgIChhdHRyID09PSAndmFsdWUnICYmIGFjY2VwdFZhbHVlKHRhZykpICYmIHR5cGUgIT09ICdidXR0b24nIHx8XG4gICAgKGF0dHIgPT09ICdzZWxlY3RlZCcgJiYgdGFnID09PSAnb3B0aW9uJykgfHxcbiAgICAoYXR0ciA9PT0gJ2NoZWNrZWQnICYmIHRhZyA9PT0gJ2lucHV0JykgfHxcbiAgICAoYXR0ciA9PT0gJ211dGVkJyAmJiB0YWcgPT09ICd2aWRlbycpXG4gIClcbn07XG5cbnZhciBpc0VudW1lcmF0ZWRBdHRyID0gbWFrZU1hcCgnY29udGVudGVkaXRhYmxlLGRyYWdnYWJsZSxzcGVsbGNoZWNrJyk7XG5cbnZhciBpc0Jvb2xlYW5BdHRyID0gbWFrZU1hcChcbiAgJ2FsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsJyArXG4gICdkZWZhdWx0LGRlZmF1bHRjaGVja2VkLGRlZmF1bHRtdXRlZCxkZWZhdWx0c2VsZWN0ZWQsZGVmZXIsZGlzYWJsZWQsJyArXG4gICdlbmFibGVkLGZvcm1ub3ZhbGlkYXRlLGhpZGRlbixpbmRldGVybWluYXRlLGluZXJ0LGlzbWFwLGl0ZW1zY29wZSxsb29wLG11bHRpcGxlLCcgK1xuICAnbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSwnICtcbiAgJ3JlcXVpcmVkLHJldmVyc2VkLHNjb3BlZCxzZWFtbGVzcyxzZWxlY3RlZCxzb3J0YWJsZSx0cmFuc2xhdGUsJyArXG4gICd0cnVlc3BlZWQsdHlwZW11c3RtYXRjaCx2aXNpYmxlJ1xuKTtcblxudmFyIHhsaW5rTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7XG5cbnZhciBpc1hsaW5rID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUuY2hhckF0KDUpID09PSAnOicgJiYgbmFtZS5zbGljZSgwLCA1KSA9PT0gJ3hsaW5rJ1xufTtcblxudmFyIGdldFhsaW5rUHJvcCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBpc1hsaW5rKG5hbWUpID8gbmFtZS5zbGljZSg2LCBuYW1lLmxlbmd0aCkgOiAnJ1xufTtcblxudmFyIGlzRmFsc3lBdHRyVmFsdWUgPSBmdW5jdGlvbiAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbCB8fCB2YWwgPT09IGZhbHNlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2VuQ2xhc3NGb3JWbm9kZSAodm5vZGUpIHtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gIHdoaWxlIChpc0RlZihjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICBpZiAoY2hpbGROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShjaGlsZE5vZGUuZGF0YSwgZGF0YSk7XG4gICAgfVxuICB9XG4gIHdoaWxlIChpc0RlZihwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGRhdGEsIHBhcmVudE5vZGUuZGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZW5kZXJDbGFzcyhkYXRhLnN0YXRpY0NsYXNzLCBkYXRhLmNsYXNzKVxufVxuXG5mdW5jdGlvbiBtZXJnZUNsYXNzRGF0YSAoY2hpbGQsIHBhcmVudCkge1xuICByZXR1cm4ge1xuICAgIHN0YXRpY0NsYXNzOiBjb25jYXQoY2hpbGQuc3RhdGljQ2xhc3MsIHBhcmVudC5zdGF0aWNDbGFzcyksXG4gICAgY2xhc3M6IGlzRGVmKGNoaWxkLmNsYXNzKVxuICAgICAgPyBbY2hpbGQuY2xhc3MsIHBhcmVudC5jbGFzc11cbiAgICAgIDogcGFyZW50LmNsYXNzXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyQ2xhc3MgKFxuICBzdGF0aWNDbGFzcyxcbiAgZHluYW1pY0NsYXNzXG4pIHtcbiAgaWYgKGlzRGVmKHN0YXRpY0NsYXNzKSB8fCBpc0RlZihkeW5hbWljQ2xhc3MpKSB7XG4gICAgcmV0dXJuIGNvbmNhdChzdGF0aWNDbGFzcywgc3RyaW5naWZ5Q2xhc3MoZHluYW1pY0NsYXNzKSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gY29uY2F0IChhLCBiKSB7XG4gIHJldHVybiBhID8gYiA/IChhICsgJyAnICsgYikgOiBhIDogKGIgfHwgJycpXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUNsYXNzICh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5QXJyYXkodmFsdWUpXG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlPYmplY3QodmFsdWUpXG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5QXJyYXkgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIHN0cmluZ2lmaWVkO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChpc0RlZihzdHJpbmdpZmllZCA9IHN0cmluZ2lmeUNsYXNzKHZhbHVlW2ldKSkgJiYgc3RyaW5naWZpZWQgIT09ICcnKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBzdHJpbmdpZmllZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlPYmplY3QgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlW2tleV0pIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIG5hbWVzcGFjZU1hcCA9IHtcbiAgc3ZnOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLFxuICBtYXRoOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCdcbn07XG5cbnZhciBpc0hUTUxUYWcgPSBtYWtlTWFwKFxuICAnaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsJyArXG4gICdhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLGhlYWRlcixoMSxoMixoMyxoNCxoNSxoNixoZ3JvdXAsbmF2LHNlY3Rpb24sJyArXG4gICdkaXYsZGQsZGwsZHQsZmlnY2FwdGlvbixmaWd1cmUscGljdHVyZSxocixpbWcsbGksbWFpbixvbCxwLHByZSx1bCwnICtcbiAgJ2EsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLGRhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydGMscnVieSwnICtcbiAgJ3Msc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLHRpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLCcgK1xuICAnZW1iZWQsb2JqZWN0LHBhcmFtLHNvdXJjZSxjYW52YXMsc2NyaXB0LG5vc2NyaXB0LGRlbCxpbnMsJyArXG4gICdjYXB0aW9uLGNvbCxjb2xncm91cCx0YWJsZSx0aGVhZCx0Ym9keSx0ZCx0aCx0ciwnICtcbiAgJ2J1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCxvcHRpb24sJyArXG4gICdvdXRwdXQscHJvZ3Jlc3Msc2VsZWN0LHRleHRhcmVhLCcgK1xuICAnZGV0YWlscyxkaWFsb2csbWVudSxtZW51aXRlbSxzdW1tYXJ5LCcgK1xuICAnY29udGVudCxlbGVtZW50LHNoYWRvdyx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdCdcbik7XG5cbi8vIHRoaXMgbWFwIGlzIGludGVudGlvbmFsbHkgc2VsZWN0aXZlLCBvbmx5IGNvdmVyaW5nIFNWRyBlbGVtZW50cyB0aGF0IG1heVxuLy8gY29udGFpbiBjaGlsZCBlbGVtZW50cy5cbnZhciBpc1NWRyA9IG1ha2VNYXAoXG4gICdzdmcsYW5pbWF0ZSxjaXJjbGUsY2xpcHBhdGgsY3Vyc29yLGRlZnMsZGVzYyxlbGxpcHNlLGZpbHRlcixmb250LWZhY2UsJyArXG4gICdmb3JlaWduT2JqZWN0LGcsZ2x5cGgsaW1hZ2UsbGluZSxtYXJrZXIsbWFzayxtaXNzaW5nLWdseXBoLHBhdGgscGF0dGVybiwnICtcbiAgJ3BvbHlnb24scG9seWxpbmUscmVjdCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dHBhdGgsdHNwYW4sdXNlLHZpZXcnLFxuICB0cnVlXG4pO1xuXG5cblxudmFyIGlzUmVzZXJ2ZWRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHJldHVybiBpc0hUTUxUYWcodGFnKSB8fCBpc1NWRyh0YWcpXG59O1xuXG5mdW5jdGlvbiBnZXRUYWdOYW1lc3BhY2UgKHRhZykge1xuICBpZiAoaXNTVkcodGFnKSkge1xuICAgIHJldHVybiAnc3ZnJ1xuICB9XG4gIC8vIGJhc2ljIHN1cHBvcnQgZm9yIE1hdGhNTFxuICAvLyBub3RlIGl0IGRvZXNuJ3Qgc3VwcG9ydCBvdGhlciBNYXRoTUwgZWxlbWVudHMgYmVpbmcgY29tcG9uZW50IHJvb3RzXG4gIGlmICh0YWcgPT09ICdtYXRoJykge1xuICAgIHJldHVybiAnbWF0aCdcbiAgfVxufVxuXG52YXIgdW5rbm93bkVsZW1lbnRDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mdW5jdGlvbiBpc1Vua25vd25FbGVtZW50ICh0YWcpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghaW5Ccm93c2VyKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBpZiAoaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdGFnID0gdGFnLnRvTG93ZXJDYXNlKCk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddICE9IG51bGwpIHtcbiAgICByZXR1cm4gdW5rbm93bkVsZW1lbnRDYWNoZVt0YWddXG4gIH1cbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICBpZiAodGFnLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjgyMTAzNjQvMTA3MDI0NFxuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gKFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MVW5rbm93bkVsZW1lbnQgfHxcbiAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTEVsZW1lbnRcbiAgICApKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gL0hUTUxVbmtub3duRWxlbWVudC8udGVzdChlbC50b1N0cmluZygpKSlcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBRdWVyeSBhbiBlbGVtZW50IHNlbGVjdG9yIGlmIGl0J3Mgbm90IGFuIGVsZW1lbnQgYWxyZWFkeS5cbiAqL1xuZnVuY3Rpb24gcXVlcnkgKGVsKSB7XG4gIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHNlbGVjdGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgaWYgKCFzZWxlY3RlZCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnQ2Fubm90IGZpbmQgZWxlbWVudDogJyArIGVsXG4gICAgICApO1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgfVxuICAgIHJldHVybiBzZWxlY3RlZFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50JDEgKHRhZ05hbWUsIHZub2RlKSB7XG4gIHZhciBlbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICBpZiAodGFnTmFtZSAhPT0gJ3NlbGVjdCcpIHtcbiAgICByZXR1cm4gZWxtXG4gIH1cbiAgLy8gZmFsc2Ugb3IgbnVsbCB3aWxsIHJlbW92ZSB0aGUgYXR0cmlidXRlIGJ1dCB1bmRlZmluZWQgd2lsbCBub3RcbiAgaWYgKHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS5hdHRycyAmJiB2bm9kZS5kYXRhLmF0dHJzLm11bHRpcGxlICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbG0uc2V0QXR0cmlidXRlKCdtdWx0aXBsZScsICdtdWx0aXBsZScpO1xuICB9XG4gIHJldHVybiBlbG1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TIChuYW1lc3BhY2UsIHRhZ05hbWUpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSwgdGFnTmFtZSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGV4dE5vZGUgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnQgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGV4dClcbn1cblxuZnVuY3Rpb24gaW5zZXJ0QmVmb3JlIChwYXJlbnROb2RlLCBuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZENoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50Tm9kZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS5wYXJlbnROb2RlXG59XG5cbmZ1bmN0aW9uIG5leHRTaWJsaW5nIChub2RlKSB7XG4gIHJldHVybiBub2RlLm5leHRTaWJsaW5nXG59XG5cbmZ1bmN0aW9uIHRhZ05hbWUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUudGFnTmFtZVxufVxuXG5mdW5jdGlvbiBzZXRUZXh0Q29udGVudCAobm9kZSwgdGV4dCkge1xuICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn1cblxuZnVuY3Rpb24gc2V0QXR0cmlidXRlIChub2RlLCBrZXksIHZhbCkge1xuICBub2RlLnNldEF0dHJpYnV0ZShrZXksIHZhbCk7XG59XG5cblxudmFyIG5vZGVPcHMgPSBPYmplY3QuZnJlZXplKHtcblx0Y3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCQxLFxuXHRjcmVhdGVFbGVtZW50TlM6IGNyZWF0ZUVsZW1lbnROUyxcblx0Y3JlYXRlVGV4dE5vZGU6IGNyZWF0ZVRleHROb2RlLFxuXHRjcmVhdGVDb21tZW50OiBjcmVhdGVDb21tZW50LFxuXHRpbnNlcnRCZWZvcmU6IGluc2VydEJlZm9yZSxcblx0cmVtb3ZlQ2hpbGQ6IHJlbW92ZUNoaWxkLFxuXHRhcHBlbmRDaGlsZDogYXBwZW5kQ2hpbGQsXG5cdHBhcmVudE5vZGU6IHBhcmVudE5vZGUsXG5cdG5leHRTaWJsaW5nOiBuZXh0U2libGluZyxcblx0dGFnTmFtZTogdGFnTmFtZSxcblx0c2V0VGV4dENvbnRlbnQ6IHNldFRleHRDb250ZW50LFxuXHRzZXRBdHRyaWJ1dGU6IHNldEF0dHJpYnV0ZVxufSk7XG5cbi8qICAqL1xuXG52YXIgcmVmID0ge1xuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSAoXywgdm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICBpZiAob2xkVm5vZGUuZGF0YS5yZWYgIT09IHZub2RlLmRhdGEucmVmKSB7XG4gICAgICByZWdpc3RlclJlZihvbGRWbm9kZSwgdHJ1ZSk7XG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgfVxuICB9LFxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95ICh2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlLCB0cnVlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gcmVnaXN0ZXJSZWYgKHZub2RlLCBpc1JlbW92YWwpIHtcbiAgdmFyIGtleSA9IHZub2RlLmRhdGEucmVmO1xuICBpZiAoIWtleSkgeyByZXR1cm4gfVxuXG4gIHZhciB2bSA9IHZub2RlLmNvbnRleHQ7XG4gIHZhciByZWYgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSB8fCB2bm9kZS5lbG07XG4gIHZhciByZWZzID0gdm0uJHJlZnM7XG4gIGlmIChpc1JlbW92YWwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICByZW1vdmUocmVmc1trZXldLCByZWYpO1xuICAgIH0gZWxzZSBpZiAocmVmc1trZXldID09PSByZWYpIHtcbiAgICAgIHJlZnNba2V5XSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZub2RlLmRhdGEucmVmSW5Gb3IpIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICAgIHJlZnNba2V5XSA9IFtyZWZdO1xuICAgICAgfSBlbHNlIGlmIChyZWZzW2tleV0uaW5kZXhPZihyZWYpIDwgMCkge1xuICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgICAgcmVmc1trZXldLnB1c2gocmVmKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVmc1trZXldID0gcmVmO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFZpcnR1YWwgRE9NIHBhdGNoaW5nIGFsZ29yaXRobSBiYXNlZCBvbiBTbmFiYmRvbSBieVxuICogU2ltb24gRnJpaXMgVmluZHVtIChAcGFsZGVwaW5kKVxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGFsZGVwaW5kL3NuYWJiZG9tL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqXG4gKiBtb2RpZmllZCBieSBFdmFuIFlvdSAoQHl5eDk5MDgwMylcbiAqXG5cbi8qXG4gKiBOb3QgdHlwZS1jaGVja2luZyB0aGlzIGJlY2F1c2UgdGhpcyBmaWxlIGlzIHBlcmYtY3JpdGljYWwgYW5kIHRoZSBjb3N0XG4gKiBvZiBtYWtpbmcgZmxvdyB1bmRlcnN0YW5kIGl0IGlzIG5vdCB3b3J0aCBpdC5cbiAqL1xuXG52YXIgZW1wdHlOb2RlID0gbmV3IFZOb2RlKCcnLCB7fSwgW10pO1xuXG52YXIgaG9va3MgPSBbJ2NyZWF0ZScsICdhY3RpdmF0ZScsICd1cGRhdGUnLCAncmVtb3ZlJywgJ2Rlc3Ryb3knXTtcblxuZnVuY3Rpb24gc2FtZVZub2RlIChhLCBiKSB7XG4gIHJldHVybiAoXG4gICAgYS5rZXkgPT09IGIua2V5ICYmIChcbiAgICAgIChcbiAgICAgICAgYS50YWcgPT09IGIudGFnICYmXG4gICAgICAgIGEuaXNDb21tZW50ID09PSBiLmlzQ29tbWVudCAmJlxuICAgICAgICBpc0RlZihhLmRhdGEpID09PSBpc0RlZihiLmRhdGEpICYmXG4gICAgICAgIHNhbWVJbnB1dFR5cGUoYSwgYilcbiAgICAgICkgfHwgKFxuICAgICAgICBpc1RydWUoYS5pc0FzeW5jUGxhY2Vob2xkZXIpICYmXG4gICAgICAgIGEuYXN5bmNGYWN0b3J5ID09PSBiLmFzeW5jRmFjdG9yeSAmJlxuICAgICAgICBpc1VuZGVmKGIuYXN5bmNGYWN0b3J5LmVycm9yKVxuICAgICAgKVxuICAgIClcbiAgKVxufVxuXG4vLyBTb21lIGJyb3dzZXJzIGRvIG5vdCBzdXBwb3J0IGR5bmFtaWNhbGx5IGNoYW5naW5nIHR5cGUgZm9yIDxpbnB1dD5cbi8vIHNvIHRoZXkgbmVlZCB0byBiZSB0cmVhdGVkIGFzIGRpZmZlcmVudCBub2Rlc1xuZnVuY3Rpb24gc2FtZUlucHV0VHlwZSAoYSwgYikge1xuICBpZiAoYS50YWcgIT09ICdpbnB1dCcpIHsgcmV0dXJuIHRydWUgfVxuICB2YXIgaTtcbiAgdmFyIHR5cGVBID0gaXNEZWYoaSA9IGEuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTtcbiAgdmFyIHR5cGVCID0gaXNEZWYoaSA9IGIuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTtcbiAgcmV0dXJuIHR5cGVBID09PSB0eXBlQlxufVxuXG5mdW5jdGlvbiBjcmVhdGVLZXlUb09sZElkeCAoY2hpbGRyZW4sIGJlZ2luSWR4LCBlbmRJZHgpIHtcbiAgdmFyIGksIGtleTtcbiAgdmFyIG1hcCA9IHt9O1xuICBmb3IgKGkgPSBiZWdpbklkeDsgaSA8PSBlbmRJZHg7ICsraSkge1xuICAgIGtleSA9IGNoaWxkcmVuW2ldLmtleTtcbiAgICBpZiAoaXNEZWYoa2V5KSkgeyBtYXBba2V5XSA9IGk7IH1cbiAgfVxuICByZXR1cm4gbWFwXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhdGNoRnVuY3Rpb24gKGJhY2tlbmQpIHtcbiAgdmFyIGksIGo7XG4gIHZhciBjYnMgPSB7fTtcblxuICB2YXIgbW9kdWxlcyA9IGJhY2tlbmQubW9kdWxlcztcbiAgdmFyIG5vZGVPcHMgPSBiYWNrZW5kLm5vZGVPcHM7XG5cbiAgZm9yIChpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgKytpKSB7XG4gICAgY2JzW2hvb2tzW2ldXSA9IFtdO1xuICAgIGZvciAoaiA9IDA7IGogPCBtb2R1bGVzLmxlbmd0aDsgKytqKSB7XG4gICAgICBpZiAoaXNEZWYobW9kdWxlc1tqXVtob29rc1tpXV0pKSB7XG4gICAgICAgIGNic1tob29rc1tpXV0ucHVzaChtb2R1bGVzW2pdW2hvb2tzW2ldXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW1wdHlOb2RlQXQgKGVsbSkge1xuICAgIHJldHVybiBuZXcgVk5vZGUobm9kZU9wcy50YWdOYW1lKGVsbSkudG9Mb3dlckNhc2UoKSwge30sIFtdLCB1bmRlZmluZWQsIGVsbSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVJtQ2IgKGNoaWxkRWxtLCBsaXN0ZW5lcnMpIHtcbiAgICBmdW5jdGlvbiByZW1vdmUkJDEgKCkge1xuICAgICAgaWYgKC0tcmVtb3ZlJCQxLmxpc3RlbmVycyA9PT0gMCkge1xuICAgICAgICByZW1vdmVOb2RlKGNoaWxkRWxtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlJCQxLmxpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgICByZXR1cm4gcmVtb3ZlJCQxXG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVOb2RlIChlbCkge1xuICAgIHZhciBwYXJlbnQgPSBub2RlT3BzLnBhcmVudE5vZGUoZWwpO1xuICAgIC8vIGVsZW1lbnQgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIHJlbW92ZWQgZHVlIHRvIHYtaHRtbCAvIHYtdGV4dFxuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBub2RlT3BzLnJlbW92ZUNoaWxkKHBhcmVudCwgZWwpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpblByZSA9IDA7XG4gIGZ1bmN0aW9uIGNyZWF0ZUVsbSAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0sIG5lc3RlZCkge1xuICAgIHZub2RlLmlzUm9vdEluc2VydCA9ICFuZXN0ZWQ7IC8vIGZvciB0cmFuc2l0aW9uIGVudGVyIGNoZWNrXG4gICAgaWYgKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICAgIGluUHJlKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgICFpblByZSAmJlxuICAgICAgICAgICF2bm9kZS5ucyAmJlxuICAgICAgICAgICEoY29uZmlnLmlnbm9yZWRFbGVtZW50cy5sZW5ndGggJiYgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5pbmRleE9mKHRhZykgPiAtMSkgJiZcbiAgICAgICAgICBjb25maWcuaXNVbmtub3duRWxlbWVudCh0YWcpXG4gICAgICAgICkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcgKyB0YWcgKyAnPiAtIGRpZCB5b3UgJyArXG4gICAgICAgICAgICAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArXG4gICAgICAgICAgICAnbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhlIFwibmFtZVwiIG9wdGlvbi4nLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZub2RlLmVsbSA9IHZub2RlLm5zXG4gICAgICAgID8gbm9kZU9wcy5jcmVhdGVFbGVtZW50TlModm5vZGUubnMsIHRhZylcbiAgICAgICAgOiBub2RlT3BzLmNyZWF0ZUVsZW1lbnQodGFnLCB2bm9kZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAge1xuICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICBpblByZS0tO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNUcnVlKHZub2RlLmlzQ29tbWVudCkpIHtcbiAgICAgIHZub2RlLmVsbSA9IG5vZGVPcHMuY3JlYXRlQ29tbWVudCh2bm9kZS50ZXh0KTtcbiAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZSh2bm9kZS50ZXh0KTtcbiAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7XG4gICAgdmFyIGkgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihpKSkge1xuICAgICAgdmFyIGlzUmVhY3RpdmF0ZWQgPSBpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaS5rZWVwQWxpdmU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGkuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHtcbiAgICAgICAgaSh2bm9kZSwgZmFsc2UgLyogaHlkcmF0aW5nICovLCBwYXJlbnRFbG0sIHJlZkVsbSk7XG4gICAgICB9XG4gICAgICAvLyBhZnRlciBjYWxsaW5nIHRoZSBpbml0IGhvb2ssIGlmIHRoZSB2bm9kZSBpcyBhIGNoaWxkIGNvbXBvbmVudFxuICAgICAgLy8gaXQgc2hvdWxkJ3ZlIGNyZWF0ZWQgYSBjaGlsZCBpbnN0YW5jZSBhbmQgbW91bnRlZCBpdC4gdGhlIGNoaWxkXG4gICAgICAvLyBjb21wb25lbnQgYWxzbyBoYXMgc2V0IHRoZSBwbGFjZWhvbGRlciB2bm9kZSdzIGVsbS5cbiAgICAgIC8vIGluIHRoYXQgY2FzZSB3ZSBjYW4ganVzdCByZXR1cm4gdGhlIGVsZW1lbnQgYW5kIGJlIGRvbmUuXG4gICAgICBpZiAoaXNEZWYodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGlmIChpc1RydWUoaXNSZWFjdGl2YXRlZCkpIHtcbiAgICAgICAgICByZWFjdGl2YXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KSkge1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2guYXBwbHkoaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpO1xuICAgICAgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gbnVsbDtcbiAgICB9XG4gICAgdm5vZGUuZWxtID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuJGVsO1xuICAgIGlmIChpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgc2V0U2NvcGUodm5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlbXB0eSBjb21wb25lbnQgcm9vdC5cbiAgICAgIC8vIHNraXAgYWxsIGVsZW1lbnQtcmVsYXRlZCBtb2R1bGVzIGV4Y2VwdCBmb3IgcmVmICgjMzQ1NSlcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICAgIC8vIG1ha2Ugc3VyZSB0byBpbnZva2UgdGhlIGluc2VydCBob29rXG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhY3RpdmF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaTtcbiAgICAvLyBoYWNrIGZvciAjNDMzOTogYSByZWFjdGl2YXRlZCBjb21wb25lbnQgd2l0aCBpbm5lciB0cmFuc2l0aW9uXG4gICAgLy8gZG9lcyBub3QgdHJpZ2dlciBiZWNhdXNlIHRoZSBpbm5lciBub2RlJ3MgY3JlYXRlZCBob29rcyBhcmUgbm90IGNhbGxlZFxuICAgIC8vIGFnYWluLiBJdCdzIG5vdCBpZGVhbCB0byBpbnZvbHZlIG1vZHVsZS1zcGVjaWZpYyBsb2dpYyBpbiBoZXJlIGJ1dFxuICAgIC8vIHRoZXJlIGRvZXNuJ3Qgc2VlbSB0byBiZSBhIGJldHRlciB3YXkgdG8gZG8gaXQuXG4gICAgdmFyIGlubmVyTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGlubmVyTm9kZSA9IGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGlubmVyTm9kZS5kYXRhKSAmJiBpc0RlZihpID0gaS50cmFuc2l0aW9uKSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmFjdGl2YXRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgY2JzLmFjdGl2YXRlW2ldKGVtcHR5Tm9kZSwgaW5uZXJOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaChpbm5lck5vZGUpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICAvLyB1bmxpa2UgYSBuZXdseSBjcmVhdGVkIGNvbXBvbmVudCxcbiAgICAvLyBhIHJlYWN0aXZhdGVkIGtlZXAtYWxpdmUgY29tcG9uZW50IGRvZXNuJ3QgaW5zZXJ0IGl0c2VsZlxuICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc2VydCAocGFyZW50LCBlbG0sIHJlZiQkMSkge1xuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBpZiAoaXNEZWYocmVmJCQxKSkge1xuICAgICAgICBpZiAocmVmJCQxLnBhcmVudE5vZGUgPT09IHBhcmVudCkge1xuICAgICAgICAgIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudCwgZWxtLCByZWYkJDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHBhcmVudCwgZWxtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZHJlbiAodm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY3JlYXRlRWxtKGNoaWxkcmVuW2ldLCBpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmVsbSwgbnVsbCwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZSh2bm9kZS50ZXh0KSkge1xuICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZCh2bm9kZS5lbG0sIG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUodm5vZGUudGV4dCkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzUGF0Y2hhYmxlICh2bm9kZSkge1xuICAgIHdoaWxlICh2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgdm5vZGUgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgfVxuICAgIHJldHVybiBpc0RlZih2bm9kZS50YWcpXG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VDcmVhdGVIb29rcyAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgY2JzLmNyZWF0ZVtpJDFdKGVtcHR5Tm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICBpID0gdm5vZGUuZGF0YS5ob29rOyAvLyBSZXVzZSB2YXJpYWJsZVxuICAgIGlmIChpc0RlZihpKSkge1xuICAgICAgaWYgKGlzRGVmKGkuY3JlYXRlKSkgeyBpLmNyZWF0ZShlbXB0eU5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkuaW5zZXJ0KSkgeyBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7IH1cbiAgICB9XG4gIH1cblxuICAvLyBzZXQgc2NvcGUgaWQgYXR0cmlidXRlIGZvciBzY29wZWQgQ1NTLlxuICAvLyB0aGlzIGlzIGltcGxlbWVudGVkIGFzIGEgc3BlY2lhbCBjYXNlIHRvIGF2b2lkIHRoZSBvdmVyaGVhZFxuICAvLyBvZiBnb2luZyB0aHJvdWdoIHRoZSBub3JtYWwgYXR0cmlidXRlIHBhdGNoaW5nIHByb2Nlc3MuXG4gIGZ1bmN0aW9uIHNldFNjb3BlICh2bm9kZSkge1xuICAgIHZhciBpO1xuICAgIHZhciBhbmNlc3RvciA9IHZub2RlO1xuICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgaWYgKGlzRGVmKGkgPSBhbmNlc3Rvci5jb250ZXh0KSAmJiBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZCkpIHtcbiAgICAgICAgbm9kZU9wcy5zZXRBdHRyaWJ1dGUodm5vZGUuZWxtLCBpLCAnJyk7XG4gICAgICB9XG4gICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICB9XG4gICAgLy8gZm9yIHNsb3QgY29udGVudCB0aGV5IHNob3VsZCBhbHNvIGdldCB0aGUgc2NvcGVJZCBmcm9tIHRoZSBob3N0IGluc3RhbmNlLlxuICAgIGlmIChpc0RlZihpID0gYWN0aXZlSW5zdGFuY2UpICYmXG4gICAgICBpICE9PSB2bm9kZS5jb250ZXh0ICYmXG4gICAgICBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZClcbiAgICApIHtcbiAgICAgIG5vZGVPcHMuc2V0QXR0cmlidXRlKHZub2RlLmVsbSwgaSwgJycpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFZub2RlcyAocGFyZW50RWxtLCByZWZFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgY3JlYXRlRWxtKHZub2Rlc1tzdGFydElkeF0sIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZURlc3Ryb3lIb29rICh2bm9kZSkge1xuICAgIHZhciBpLCBqO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5kZXN0cm95KSkgeyBpKHZub2RlKTsgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5kZXN0cm95Lmxlbmd0aDsgKytpKSB7IGNicy5kZXN0cm95W2ldKHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNoaWxkcmVuKSkge1xuICAgICAgZm9yIChqID0gMDsgaiA8IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIGludm9rZURlc3Ryb3lIb29rKHZub2RlLmNoaWxkcmVuW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVWbm9kZXMgKHBhcmVudEVsbSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4KSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgdmFyIGNoID0gdm5vZGVzW3N0YXJ0SWR4XTtcbiAgICAgIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKGlzRGVmKGNoLnRhZykpIHtcbiAgICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGNoKTtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhjaCk7XG4gICAgICAgIH0gZWxzZSB7IC8vIFRleHQgbm9kZVxuICAgICAgICAgIHJlbW92ZU5vZGUoY2guZWxtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2sgKHZub2RlLCBybSkge1xuICAgIGlmIChpc0RlZihybSkgfHwgaXNEZWYodm5vZGUuZGF0YSkpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGNicy5yZW1vdmUubGVuZ3RoICsgMTtcbiAgICAgIGlmIChpc0RlZihybSkpIHtcbiAgICAgICAgLy8gd2UgaGF2ZSBhIHJlY3Vyc2l2ZWx5IHBhc3NlZCBkb3duIHJtIGNhbGxiYWNrXG4gICAgICAgIC8vIGluY3JlYXNlIHRoZSBsaXN0ZW5lcnMgY291bnRcbiAgICAgICAgcm0ubGlzdGVuZXJzICs9IGxpc3RlbmVycztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRpcmVjdGx5IHJlbW92aW5nXG4gICAgICAgIHJtID0gY3JlYXRlUm1DYih2bm9kZS5lbG0sIGxpc3RlbmVycyk7XG4gICAgICB9XG4gICAgICAvLyByZWN1cnNpdmVseSBpbnZva2UgaG9va3Mgb24gY2hpbGQgY29tcG9uZW50IHJvb3Qgbm9kZVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaXNEZWYoaSA9IGkuX3Zub2RlKSAmJiBpc0RlZihpLmRhdGEpKSB7XG4gICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soaSwgcm0pO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5yZW1vdmUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY2JzLnJlbW92ZVtpXSh2bm9kZSwgcm0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5kYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnJlbW92ZSkpIHtcbiAgICAgICAgaSh2bm9kZSwgcm0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm0oKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlTm9kZSh2bm9kZS5lbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUNoaWxkcmVuIChwYXJlbnRFbG0sIG9sZENoLCBuZXdDaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KSB7XG4gICAgdmFyIG9sZFN0YXJ0SWR4ID0gMDtcbiAgICB2YXIgbmV3U3RhcnRJZHggPSAwO1xuICAgIHZhciBvbGRFbmRJZHggPSBvbGRDaC5sZW5ndGggLSAxO1xuICAgIHZhciBvbGRTdGFydFZub2RlID0gb2xkQ2hbMF07XG4gICAgdmFyIG9sZEVuZFZub2RlID0gb2xkQ2hbb2xkRW5kSWR4XTtcbiAgICB2YXIgbmV3RW5kSWR4ID0gbmV3Q2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWzBdO1xuICAgIHZhciBuZXdFbmRWbm9kZSA9IG5ld0NoW25ld0VuZElkeF07XG4gICAgdmFyIG9sZEtleVRvSWR4LCBpZHhJbk9sZCwgZWxtVG9Nb3ZlLCByZWZFbG07XG5cbiAgICAvLyByZW1vdmVPbmx5IGlzIGEgc3BlY2lhbCBmbGFnIHVzZWQgb25seSBieSA8dHJhbnNpdGlvbi1ncm91cD5cbiAgICAvLyB0byBlbnN1cmUgcmVtb3ZlZCBlbGVtZW50cyBzdGF5IGluIGNvcnJlY3QgcmVsYXRpdmUgcG9zaXRpb25zXG4gICAgLy8gZHVyaW5nIGxlYXZpbmcgdHJhbnNpdGlvbnNcbiAgICB2YXIgY2FuTW92ZSA9ICFyZW1vdmVPbmx5O1xuXG4gICAgd2hpbGUgKG9sZFN0YXJ0SWR4IDw9IG9sZEVuZElkeCAmJiBuZXdTdGFydElkeCA8PSBuZXdFbmRJZHgpIHtcbiAgICAgIGlmIChpc1VuZGVmKG9sZFN0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTsgLy8gVm5vZGUgaGFzIGJlZW4gbW92ZWQgbGVmdFxuICAgICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZEVuZFZub2RlKSkge1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgcmlnaHRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVuZFZub2RlLmVsbSkpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIGxlZnRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzVW5kZWYob2xkS2V5VG9JZHgpKSB7IG9sZEtleVRvSWR4ID0gY3JlYXRlS2V5VG9PbGRJZHgob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpOyB9XG4gICAgICAgIGlkeEluT2xkID0gaXNEZWYobmV3U3RhcnRWbm9kZS5rZXkpID8gb2xkS2V5VG9JZHhbbmV3U3RhcnRWbm9kZS5rZXldIDogbnVsbDtcbiAgICAgICAgaWYgKGlzVW5kZWYoaWR4SW5PbGQpKSB7IC8vIE5ldyBlbGVtZW50XG4gICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsbVRvTW92ZSA9IG9sZENoW2lkeEluT2xkXTtcbiAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhZWxtVG9Nb3ZlKSB7XG4gICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAnSXQgc2VlbXMgdGhlcmUgYXJlIGR1cGxpY2F0ZSBrZXlzIHRoYXQgaXMgY2F1c2luZyBhbiB1cGRhdGUgZXJyb3IuICcgK1xuICAgICAgICAgICAgICAnTWFrZSBzdXJlIGVhY2ggdi1mb3IgaXRlbSBoYXMgYSB1bmlxdWUga2V5LidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzYW1lVm5vZGUoZWxtVG9Nb3ZlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICAgICAgcGF0Y2hWbm9kZShlbG1Ub01vdmUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBvbGRDaFtpZHhJbk9sZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgZWxtVG9Nb3ZlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzYW1lIGtleSBidXQgZGlmZmVyZW50IGVsZW1lbnQuIHRyZWF0IGFzIG5ldyBlbGVtZW50XG4gICAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9sZFN0YXJ0SWR4ID4gb2xkRW5kSWR4KSB7XG4gICAgICByZWZFbG0gPSBpc1VuZGVmKG5ld0NoW25ld0VuZElkeCArIDFdKSA/IG51bGwgOiBuZXdDaFtuZXdFbmRJZHggKyAxXS5lbG07XG4gICAgICBhZGRWbm9kZXMocGFyZW50RWxtLCByZWZFbG0sIG5ld0NoLCBuZXdTdGFydElkeCwgbmV3RW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgIH0gZWxzZSBpZiAobmV3U3RhcnRJZHggPiBuZXdFbmRJZHgpIHtcbiAgICAgIHJlbW92ZVZub2RlcyhwYXJlbnRFbG0sIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaFZub2RlIChvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSkge1xuICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBlbG0gPSB2bm9kZS5lbG0gPSBvbGRWbm9kZS5lbG07XG5cbiAgICBpZiAoaXNUcnVlKG9sZFZub2RlLmlzQXN5bmNQbGFjZWhvbGRlcikpIHtcbiAgICAgIGlmIChpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgIGh5ZHJhdGUob2xkVm5vZGUuZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlLmlzQXN5bmNQbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyByZXVzZSBlbGVtZW50IGZvciBzdGF0aWMgdHJlZXMuXG4gICAgLy8gbm90ZSB3ZSBvbmx5IGRvIHRoaXMgaWYgdGhlIHZub2RlIGlzIGNsb25lZCAtXG4gICAgLy8gaWYgdGhlIG5ldyBub2RlIGlzIG5vdCBjbG9uZWQgaXQgbWVhbnMgdGhlIHJlbmRlciBmdW5jdGlvbnMgaGF2ZSBiZWVuXG4gICAgLy8gcmVzZXQgYnkgdGhlIGhvdC1yZWxvYWQtYXBpIGFuZCB3ZSBuZWVkIHRvIGRvIGEgcHJvcGVyIHJlLXJlbmRlci5cbiAgICBpZiAoaXNUcnVlKHZub2RlLmlzU3RhdGljKSAmJlxuICAgICAgaXNUcnVlKG9sZFZub2RlLmlzU3RhdGljKSAmJlxuICAgICAgdm5vZGUua2V5ID09PSBvbGRWbm9kZS5rZXkgJiZcbiAgICAgIChpc1RydWUodm5vZGUuaXNDbG9uZWQpIHx8IGlzVHJ1ZSh2bm9kZS5pc09uY2UpKVxuICAgICkge1xuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucHJlcGF0Y2gpKSB7XG4gICAgICBpKG9sZFZub2RlLCB2bm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIG9sZENoID0gb2xkVm5vZGUuY2hpbGRyZW47XG4gICAgdmFyIGNoID0gdm5vZGUuY2hpbGRyZW47XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy51cGRhdGUubGVuZ3RoOyArK2kpIHsgY2JzLnVwZGF0ZVtpXShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkudXBkYXRlKSkgeyBpKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICB9XG4gICAgaWYgKGlzVW5kZWYodm5vZGUudGV4dCkpIHtcbiAgICAgIGlmIChpc0RlZihvbGRDaCkgJiYgaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChvbGRDaCAhPT0gY2gpIHsgdXBkYXRlQ2hpbGRyZW4oZWxtLCBvbGRDaCwgY2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSk7IH1cbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkgeyBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpOyB9XG4gICAgICAgIGFkZFZub2RlcyhlbG0sIG51bGwsIGNoLCAwLCBjaC5sZW5ndGggLSAxLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRDaCkpIHtcbiAgICAgICAgcmVtb3ZlVm5vZGVzKGVsbSwgb2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkge1xuICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2xkVm5vZGUudGV4dCAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wb3N0cGF0Y2gpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUluc2VydEhvb2sgKHZub2RlLCBxdWV1ZSwgaW5pdGlhbCkge1xuICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZVxuICAgIC8vIGVsZW1lbnQgaXMgcmVhbGx5IGluc2VydGVkXG4gICAgaWYgKGlzVHJ1ZShpbml0aWFsKSAmJiBpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhaWxlZCA9IGZhbHNlO1xuICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuICAvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvblxuICB2YXIgaXNSZW5kZXJlZE1vZHVsZSA9IG1ha2VNYXAoJ2F0dHJzLHN0eWxlLGNsYXNzLHN0YXRpY0NsYXNzLHN0YXRpY1N0eWxlLGtleScpO1xuXG4gIC8vIE5vdGU6IHRoaXMgaXMgYSBicm93c2VyLW9ubHkgZnVuY3Rpb24gc28gd2UgY2FuIGFzc3VtZSBlbG1zIGFyZSBET00gbm9kZXMuXG4gIGZ1bmN0aW9uIGh5ZHJhdGUgKGVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSAmJiBpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkpKSB7XG4gICAgICB2bm9kZS5lbG0gPSBlbG07XG4gICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghYXNzZXJ0Tm9kZU1hdGNoKGVsbSwgdm5vZGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgICB2bm9kZS5lbG0gPSBlbG07XG4gICAgdmFyIHRhZyA9IHZub2RlLnRhZztcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHsgaSh2bm9kZSwgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICAvLyBjaGlsZCBjb21wb25lbnQuIGl0IHNob3VsZCBoYXZlIGh5ZHJhdGVkIGl0cyBvd24gdHJlZS5cbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChpc0RlZihjaGlsZHJlbikpIHtcbiAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuXG4gICAgICAgIGlmICghZWxtLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgdmFyIGNoaWxkTm9kZSA9IGVsbS5maXJzdENoaWxkO1xuICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNoaWxkcmVuLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSkge1xuICAgICAgICAgICAgICBjaGlsZHJlbk1hdGNoID0gZmFsc2U7XG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGlmIGNoaWxkTm9kZSBpcyBub3QgbnVsbCwgaXQgbWVhbnMgdGhlIGFjdHVhbCBjaGlsZE5vZGVzIGxpc3QgaXNcbiAgICAgICAgICAvLyBsb25nZXIgdGhhbiB0aGUgdmlydHVhbCBjaGlsZHJlbiBsaXN0LlxuICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAhYmFpbGVkXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgYmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybignTWlzbWF0Y2hpbmcgY2hpbGROb2RlcyB2cy4gVk5vZGVzOiAnLCBlbG0uY2hpbGROb2RlcywgY2hpbGRyZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICBpZiAoIWlzUmVuZGVyZWRNb2R1bGUoa2V5KSkge1xuICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZWxtLmRhdGEgIT09IHZub2RlLnRleHQpIHtcbiAgICAgIGVsbS5kYXRhID0gdm5vZGUudGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzc2VydE5vZGVNYXRjaCAobm9kZSwgdm5vZGUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUudGFnKSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdm5vZGUudGFnLmluZGV4T2YoJ3Z1ZS1jb21wb25lbnQnKSA9PT0gMCB8fFxuICAgICAgICB2bm9kZS50YWcudG9Mb3dlckNhc2UoKSA9PT0gKG5vZGUudGFnTmFtZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09ICh2bm9kZS5pc0NvbW1lbnQgPyA4IDogMylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSwgaHlkcmF0aW5nLCByZW1vdmVPbmx5LCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIGlmIChpc1VuZGVmKHZub2RlKSkge1xuICAgICAgaWYgKGlzRGVmKG9sZFZub2RlKSkgeyBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7IH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBpc0luaXRpYWxQYXRjaCA9IGZhbHNlO1xuICAgIHZhciBpbnNlcnRlZFZub2RlUXVldWUgPSBbXTtcblxuICAgIGlmIChpc1VuZGVmKG9sZFZub2RlKSkge1xuICAgICAgLy8gZW1wdHkgbW91bnQgKGxpa2VseSBhcyBjb21wb25lbnQpLCBjcmVhdGUgbmV3IHJvb3QgZWxlbWVudFxuICAgICAgaXNJbml0aWFsUGF0Y2ggPSB0cnVlO1xuICAgICAgY3JlYXRlRWxtKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGlzUmVhbEVsZW1lbnQgPSBpc0RlZihvbGRWbm9kZS5ub2RlVHlwZSk7XG4gICAgICBpZiAoIWlzUmVhbEVsZW1lbnQgJiYgc2FtZVZub2RlKG9sZFZub2RlLCB2bm9kZSkpIHtcbiAgICAgICAgLy8gcGF0Y2ggZXhpc3Rpbmcgcm9vdCBub2RlXG4gICAgICAgIHBhdGNoVm5vZGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzUmVhbEVsZW1lbnQpIHtcbiAgICAgICAgICAvLyBtb3VudGluZyB0byBhIHJlYWwgZWxlbWVudFxuICAgICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgaXMgc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQgYW5kIGlmIHdlIGNhbiBwZXJmb3JtXG4gICAgICAgICAgLy8gYSBzdWNjZXNzZnVsIGh5ZHJhdGlvbi5cbiAgICAgICAgICBpZiAob2xkVm5vZGUubm9kZVR5cGUgPT09IDEgJiYgb2xkVm5vZGUuaGFzQXR0cmlidXRlKFNTUl9BVFRSKSkge1xuICAgICAgICAgICAgb2xkVm5vZGUucmVtb3ZlQXR0cmlidXRlKFNTUl9BVFRSKTtcbiAgICAgICAgICAgIGh5ZHJhdGluZyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1RydWUoaHlkcmF0aW5nKSkge1xuICAgICAgICAgICAgaWYgKGh5ZHJhdGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpKSB7XG4gICAgICAgICAgICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHJldHVybiBvbGRWbm9kZVxuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgICAgJ1RoZSBjbGllbnQtc2lkZSByZW5kZXJlZCB2aXJ0dWFsIERPTSB0cmVlIGlzIG5vdCBtYXRjaGluZyAnICtcbiAgICAgICAgICAgICAgICAnc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQuIFRoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBpbmNvcnJlY3QgJyArXG4gICAgICAgICAgICAgICAgJ0hUTUwgbWFya3VwLCBmb3IgZXhhbXBsZSBuZXN0aW5nIGJsb2NrLWxldmVsIGVsZW1lbnRzIGluc2lkZSAnICtcbiAgICAgICAgICAgICAgICAnPHA+LCBvciBtaXNzaW5nIDx0Ym9keT4uIEJhaWxpbmcgaHlkcmF0aW9uIGFuZCBwZXJmb3JtaW5nICcgK1xuICAgICAgICAgICAgICAgICdmdWxsIGNsaWVudC1zaWRlIHJlbmRlci4nXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGVpdGhlciBub3Qgc2VydmVyLXJlbmRlcmVkLCBvciBoeWRyYXRpb24gZmFpbGVkLlxuICAgICAgICAgIC8vIGNyZWF0ZSBhbiBlbXB0eSBub2RlIGFuZCByZXBsYWNlIGl0XG4gICAgICAgICAgb2xkVm5vZGUgPSBlbXB0eU5vZGVBdChvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVwbGFjaW5nIGV4aXN0aW5nIGVsZW1lbnRcbiAgICAgICAgdmFyIG9sZEVsbSA9IG9sZFZub2RlLmVsbTtcbiAgICAgICAgdmFyIHBhcmVudEVsbSQxID0gbm9kZU9wcy5wYXJlbnROb2RlKG9sZEVsbSk7XG4gICAgICAgIGNyZWF0ZUVsbShcbiAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgICAgICAgLy8gZXh0cmVtZWx5IHJhcmUgZWRnZSBjYXNlOiBkbyBub3QgaW5zZXJ0IGlmIG9sZCBlbGVtZW50IGlzIGluIGFcbiAgICAgICAgICAvLyBsZWF2aW5nIHRyYW5zaXRpb24uIE9ubHkgaGFwcGVucyB3aGVuIGNvbWJpbmluZyB0cmFuc2l0aW9uICtcbiAgICAgICAgICAvLyBrZWVwLWFsaXZlICsgSE9Dcy4gKCM0NTkwKVxuICAgICAgICAgIG9sZEVsbS5fbGVhdmVDYiA/IG51bGwgOiBwYXJlbnRFbG0kMSxcbiAgICAgICAgICBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVsbSlcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgICAgIC8vIGNvbXBvbmVudCByb290IGVsZW1lbnQgcmVwbGFjZWQuXG4gICAgICAgICAgLy8gdXBkYXRlIHBhcmVudCBwbGFjZWhvbGRlciBub2RlIGVsZW1lbnQsIHJlY3Vyc2l2ZWx5XG4gICAgICAgICAgdmFyIGFuY2VzdG9yID0gdm5vZGUucGFyZW50O1xuICAgICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICAgICAgYW5jZXN0b3IuZWxtID0gdm5vZGUuZWxtO1xuICAgICAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2JzLmNyZWF0ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBjYnMuY3JlYXRlW2ldKGVtcHR5Tm9kZSwgdm5vZGUucGFyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocGFyZW50RWxtJDEpKSB7XG4gICAgICAgICAgcmVtb3ZlVm5vZGVzKHBhcmVudEVsbSQxLCBbb2xkVm5vZGVdLCAwLCAwKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50YWcpKSB7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpc0luaXRpYWxQYXRjaCk7XG4gICAgcmV0dXJuIHZub2RlLmVsbVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgZGlyZWN0aXZlcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVEaXJlY3RpdmVzLFxuICB1cGRhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIHVuYmluZERpcmVjdGl2ZXMgKHZub2RlKSB7XG4gICAgdXBkYXRlRGlyZWN0aXZlcyh2bm9kZSwgZW1wdHlOb2RlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gdXBkYXRlRGlyZWN0aXZlcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMgfHwgdm5vZGUuZGF0YS5kaXJlY3RpdmVzKSB7XG4gICAgX3VwZGF0ZShvbGRWbm9kZSwgdm5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF91cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgaXNDcmVhdGUgPSBvbGRWbm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgaXNEZXN0cm95ID0gdm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIG9sZERpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzLCBvbGRWbm9kZS5jb250ZXh0KTtcbiAgdmFyIG5ld0RpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEodm5vZGUuZGF0YS5kaXJlY3RpdmVzLCB2bm9kZS5jb250ZXh0KTtcblxuICB2YXIgZGlyc1dpdGhJbnNlcnQgPSBbXTtcbiAgdmFyIGRpcnNXaXRoUG9zdHBhdGNoID0gW107XG5cbiAgdmFyIGtleSwgb2xkRGlyLCBkaXI7XG4gIGZvciAoa2V5IGluIG5ld0RpcnMpIHtcbiAgICBvbGREaXIgPSBvbGREaXJzW2tleV07XG4gICAgZGlyID0gbmV3RGlyc1trZXldO1xuICAgIGlmICghb2xkRGlyKSB7XG4gICAgICAvLyBuZXcgZGlyZWN0aXZlLCBiaW5kXG4gICAgICBjYWxsSG9vayQxKGRpciwgJ2JpbmQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5pbnNlcnRlZCkge1xuICAgICAgICBkaXJzV2l0aEluc2VydC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGV4aXN0aW5nIGRpcmVjdGl2ZSwgdXBkYXRlXG4gICAgICBkaXIub2xkVmFsdWUgPSBvbGREaXIudmFsdWU7XG4gICAgICBjYWxsSG9vayQxKGRpciwgJ3VwZGF0ZScsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmNvbXBvbmVudFVwZGF0ZWQpIHtcbiAgICAgICAgZGlyc1dpdGhQb3N0cGF0Y2gucHVzaChkaXIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJzV2l0aEluc2VydC5sZW5ndGgpIHtcbiAgICB2YXIgY2FsbEluc2VydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhJbnNlcnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbEhvb2skMShkaXJzV2l0aEluc2VydFtpXSwgJ2luc2VydGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChpc0NyZWF0ZSkge1xuICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUuZGF0YS5ob29rIHx8ICh2bm9kZS5kYXRhLmhvb2sgPSB7fSksICdpbnNlcnQnLCBjYWxsSW5zZXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbEluc2VydCgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGgpIHtcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZS5kYXRhLmhvb2sgfHwgKHZub2RlLmRhdGEuaG9vayA9IHt9KSwgJ3Bvc3RwYXRjaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbEhvb2skMShkaXJzV2l0aFBvc3RwYXRjaFtpXSwgJ2NvbXBvbmVudFVwZGF0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKCFpc0NyZWF0ZSkge1xuICAgIGZvciAoa2V5IGluIG9sZERpcnMpIHtcbiAgICAgIGlmICghbmV3RGlyc1trZXldKSB7XG4gICAgICAgIC8vIG5vIGxvbmdlciBwcmVzZW50LCB1bmJpbmRcbiAgICAgICAgY2FsbEhvb2skMShvbGREaXJzW2tleV0sICd1bmJpbmQnLCBvbGRWbm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBlbXB0eU1vZGlmaWVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSAoXG4gIGRpcnMsXG4gIHZtXG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmICghZGlycykge1xuICAgIHJldHVybiByZXNcbiAgfVxuICB2YXIgaSwgZGlyO1xuICBmb3IgKGkgPSAwOyBpIDwgZGlycy5sZW5ndGg7IGkrKykge1xuICAgIGRpciA9IGRpcnNbaV07XG4gICAgaWYgKCFkaXIubW9kaWZpZXJzKSB7XG4gICAgICBkaXIubW9kaWZpZXJzID0gZW1wdHlNb2RpZmllcnM7XG4gICAgfVxuICAgIHJlc1tnZXRSYXdEaXJOYW1lKGRpcildID0gZGlyO1xuICAgIGRpci5kZWYgPSByZXNvbHZlQXNzZXQodm0uJG9wdGlvbnMsICdkaXJlY3RpdmVzJywgZGlyLm5hbWUsIHRydWUpO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2V0UmF3RGlyTmFtZSAoZGlyKSB7XG4gIHJldHVybiBkaXIucmF3TmFtZSB8fCAoKGRpci5uYW1lKSArIFwiLlwiICsgKE9iamVjdC5rZXlzKGRpci5tb2RpZmllcnMgfHwge30pLmpvaW4oJy4nKSkpXG59XG5cbmZ1bmN0aW9uIGNhbGxIb29rJDEgKGRpciwgaG9vaywgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpIHtcbiAgdmFyIGZuID0gZGlyLmRlZiAmJiBkaXIuZGVmW2hvb2tdO1xuICBpZiAoZm4pIHtcbiAgICB0cnkge1xuICAgICAgZm4odm5vZGUuZWxtLCBkaXIsIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bm9kZS5jb250ZXh0LCAoXCJkaXJlY3RpdmUgXCIgKyAoZGlyLm5hbWUpICsgXCIgXCIgKyBob29rICsgXCIgaG9va1wiKSk7XG4gICAgfVxuICB9XG59XG5cbnZhciBiYXNlTW9kdWxlcyA9IFtcbiAgcmVmLFxuICBkaXJlY3RpdmVzXG5dO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQXR0cnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgb3B0cyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChpc0RlZihvcHRzKSAmJiBvcHRzLkN0b3Iub3B0aW9ucy5pbmhlcml0QXR0cnMgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5hdHRycykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmF0dHJzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1ciwgb2xkO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkQXR0cnMgPSBvbGRWbm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICB2YXIgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKGF0dHJzLl9fb2JfXykpIHtcbiAgICBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgPSBleHRlbmQoe30sIGF0dHJzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIGF0dHJzKSB7XG4gICAgY3VyID0gYXR0cnNba2V5XTtcbiAgICBvbGQgPSBvbGRBdHRyc1trZXldO1xuICAgIGlmIChvbGQgIT09IGN1cikge1xuICAgICAgc2V0QXR0cihlbG0sIGtleSwgY3VyKTtcbiAgICB9XG4gIH1cbiAgLy8gIzQzOTE6IGluIElFOSwgc2V0dGluZyB0eXBlIGNhbiByZXNldCB2YWx1ZSBmb3IgaW5wdXRbdHlwZT1yYWRpb11cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0lFOSAmJiBhdHRycy52YWx1ZSAhPT0gb2xkQXR0cnMudmFsdWUpIHtcbiAgICBzZXRBdHRyKGVsbSwgJ3ZhbHVlJywgYXR0cnMudmFsdWUpO1xuICB9XG4gIGZvciAoa2V5IGluIG9sZEF0dHJzKSB7XG4gICAgaWYgKGlzVW5kZWYoYXR0cnNba2V5XSkpIHtcbiAgICAgIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gIGlmIChpc0Jvb2xlYW5BdHRyKGtleSkpIHtcbiAgICAvLyBzZXQgYXR0cmlidXRlIGZvciBibGFuayB2YWx1ZVxuICAgIC8vIGUuZy4gPG9wdGlvbiBkaXNhYmxlZD5TZWxlY3Qgb25lPC9vcHRpb24+XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwga2V5KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKGtleSwgaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkgfHwgdmFsdWUgPT09ICdmYWxzZScgPyAnZmFsc2UnIDogJ3RydWUnKTtcbiAgfSBlbHNlIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2V0QXR0cmlidXRlTlMoeGxpbmtOUywga2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGF0dHJzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUF0dHJzLFxuICB1cGRhdGU6IHVwZGF0ZUF0dHJzXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQ2xhc3MgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuICBpZiAoXG4gICAgaXNVbmRlZihkYXRhLnN0YXRpY0NsYXNzKSAmJlxuICAgIGlzVW5kZWYoZGF0YS5jbGFzcykgJiYgKFxuICAgICAgaXNVbmRlZihvbGREYXRhKSB8fCAoXG4gICAgICAgIGlzVW5kZWYob2xkRGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICAgICAgaXNVbmRlZihvbGREYXRhLmNsYXNzKVxuICAgICAgKVxuICAgIClcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY2xzID0gZ2VuQ2xhc3NGb3JWbm9kZSh2bm9kZSk7XG5cbiAgLy8gaGFuZGxlIHRyYW5zaXRpb24gY2xhc3Nlc1xuICB2YXIgdHJhbnNpdGlvbkNsYXNzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzO1xuICBpZiAoaXNEZWYodHJhbnNpdGlvbkNsYXNzKSkge1xuICAgIGNscyA9IGNvbmNhdChjbHMsIHN0cmluZ2lmeUNsYXNzKHRyYW5zaXRpb25DbGFzcykpO1xuICB9XG5cbiAgLy8gc2V0IHRoZSBjbGFzc1xuICBpZiAoY2xzICE9PSBlbC5fcHJldkNsYXNzKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGNscyk7XG4gICAgZWwuX3ByZXZDbGFzcyA9IGNscztcbiAgfVxufVxuXG52YXIga2xhc3MgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQ2xhc3MsXG4gIHVwZGF0ZTogdXBkYXRlQ2xhc3Ncbn07XG5cbi8qICAqL1xuXG52YXIgdmFsaWREaXZpc2lvbkNoYXJSRSA9IC9bXFx3KS4rXFwtXyRcXF1dLztcblxuXG5cbmZ1bmN0aW9uIHdyYXBGaWx0ZXIgKGV4cCwgZmlsdGVyKSB7XG4gIHZhciBpID0gZmlsdGVyLmluZGV4T2YoJygnKTtcbiAgaWYgKGkgPCAwKSB7XG4gICAgLy8gX2Y6IHJlc29sdmVGaWx0ZXJcbiAgICByZXR1cm4gKFwiX2YoXFxcIlwiICsgZmlsdGVyICsgXCJcXFwiKShcIiArIGV4cCArIFwiKVwiKVxuICB9IGVsc2Uge1xuICAgIHZhciBuYW1lID0gZmlsdGVyLnNsaWNlKDAsIGkpO1xuICAgIHZhciBhcmdzID0gZmlsdGVyLnNsaWNlKGkgKyAxKTtcbiAgICByZXR1cm4gKFwiX2YoXFxcIlwiICsgbmFtZSArIFwiXFxcIikoXCIgKyBleHAgKyBcIixcIiArIGFyZ3MpXG4gIH1cbn1cblxuLyogICovXG5cbi8qICAqL1xuXG4vKipcbiAqIENyb3NzLXBsYXRmb3JtIGNvZGUgZ2VuZXJhdGlvbiBmb3IgY29tcG9uZW50IHYtbW9kZWxcbiAqL1xuXG5cbi8qKlxuICogQ3Jvc3MtcGxhdGZvcm0gY29kZWdlbiBoZWxwZXIgZm9yIGdlbmVyYXRpbmcgdi1tb2RlbCB2YWx1ZSBhc3NpZ25tZW50IGNvZGUuXG4gKi9cblxuXG4vKipcbiAqIHBhcnNlIGRpcmVjdGl2ZSBtb2RlbCB0byBkbyB0aGUgYXJyYXkgdXBkYXRlIHRyYW5zZm9ybS4gYVtpZHhdID0gdmFsID0+ICQkYS5zcGxpY2UoJCRpZHgsIDEsIHZhbClcbiAqXG4gKiBmb3IgbG9vcCBwb3NzaWJsZSBjYXNlczpcbiAqXG4gKiAtIHRlc3RcbiAqIC0gdGVzdFtpZHhdXG4gKiAtIHRlc3RbdGVzdDFbaWR4XV1cbiAqIC0gdGVzdFtcImFcIl1baWR4XVxuICogLSB4eHgudGVzdFthW2FdLnRlc3QxW2lkeF1dXG4gKiAtIHRlc3QueHh4LmFbXCJhc2FcIl1bdGVzdDFbaWR4XV1cbiAqXG4gKi9cblxudmFyIHN0cjtcbnZhciBpbmRleCQxO1xuXG4vKiAgKi9cblxuLy8gaW4gc29tZSBjYXNlcywgdGhlIGV2ZW50IHVzZWQgaGFzIHRvIGJlIGRldGVybWluZWQgYXQgcnVudGltZVxuLy8gc28gd2UgdXNlZCBzb21lIHJlc2VydmVkIHRva2VucyBkdXJpbmcgY29tcGlsZS5cbnZhciBSQU5HRV9UT0tFTiA9ICdfX3InO1xudmFyIENIRUNLQk9YX1JBRElPX1RPS0VOID0gJ19fYyc7XG5cbi8qICAqL1xuXG4vLyBub3JtYWxpemUgdi1tb2RlbCBldmVudCB0b2tlbnMgdGhhdCBjYW4gb25seSBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWUuXG4vLyBpdCdzIGltcG9ydGFudCB0byBwbGFjZSB0aGUgZXZlbnQgYXMgdGhlIGZpcnN0IGluIHRoZSBhcnJheSBiZWNhdXNlXG4vLyB0aGUgd2hvbGUgcG9pbnQgaXMgZW5zdXJpbmcgdGhlIHYtbW9kZWwgY2FsbGJhY2sgZ2V0cyBjYWxsZWQgYmVmb3JlXG4vLyB1c2VyLWF0dGFjaGVkIGhhbmRsZXJzLlxuZnVuY3Rpb24gbm9ybWFsaXplRXZlbnRzIChvbikge1xuICB2YXIgZXZlbnQ7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYob25bUkFOR0VfVE9LRU5dKSkge1xuICAgIC8vIElFIGlucHV0W3R5cGU9cmFuZ2VdIG9ubHkgc3VwcG9ydHMgYGNoYW5nZWAgZXZlbnRcbiAgICBldmVudCA9IGlzSUUgPyAnY2hhbmdlJyA6ICdpbnB1dCc7XG4gICAgb25bZXZlbnRdID0gW10uY29uY2F0KG9uW1JBTkdFX1RPS0VOXSwgb25bZXZlbnRdIHx8IFtdKTtcbiAgICBkZWxldGUgb25bUkFOR0VfVE9LRU5dO1xuICB9XG4gIGlmIChpc0RlZihvbltDSEVDS0JPWF9SQURJT19UT0tFTl0pKSB7XG4gICAgLy8gQ2hyb21lIGZpcmVzIG1pY3JvdGFza3MgaW4gYmV0d2VlbiBjbGljay9jaGFuZ2UsIGxlYWRzIHRvICM0NTIxXG4gICAgZXZlbnQgPSBpc0Nocm9tZSA/ICdjbGljaycgOiAnY2hhbmdlJztcbiAgICBvbltldmVudF0gPSBbXS5jb25jYXQob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dLCBvbltldmVudF0gfHwgW10pO1xuICAgIGRlbGV0ZSBvbltDSEVDS0JPWF9SQURJT19UT0tFTl07XG4gIH1cbn1cblxudmFyIHRhcmdldCQxO1xuXG5mdW5jdGlvbiBhZGQkMSAoXG4gIGV2ZW50LFxuICBoYW5kbGVyLFxuICBvbmNlJCQxLFxuICBjYXB0dXJlLFxuICBwYXNzaXZlXG4pIHtcbiAgaWYgKG9uY2UkJDEpIHtcbiAgICB2YXIgb2xkSGFuZGxlciA9IGhhbmRsZXI7XG4gICAgdmFyIF90YXJnZXQgPSB0YXJnZXQkMTsgLy8gc2F2ZSBjdXJyZW50IHRhcmdldCBlbGVtZW50IGluIGNsb3N1cmVcbiAgICBoYW5kbGVyID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICB2YXIgcmVzID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMVxuICAgICAgICA/IG9sZEhhbmRsZXIoZXYpXG4gICAgICAgIDogb2xkSGFuZGxlci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHJlcyAhPT0gbnVsbCkge1xuICAgICAgICByZW1vdmUkMihldmVudCwgaGFuZGxlciwgY2FwdHVyZSwgX3RhcmdldCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICB0YXJnZXQkMS5hZGRFdmVudExpc3RlbmVyKFxuICAgIGV2ZW50LFxuICAgIGhhbmRsZXIsXG4gICAgc3VwcG9ydHNQYXNzaXZlXG4gICAgICA/IHsgY2FwdHVyZTogY2FwdHVyZSwgcGFzc2l2ZTogcGFzc2l2ZSB9XG4gICAgICA6IGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDIgKFxuICBldmVudCxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgX3RhcmdldFxuKSB7XG4gIChfdGFyZ2V0IHx8IHRhcmdldCQxKS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlRE9NTGlzdGVuZXJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5vbikgJiYgaXNVbmRlZih2bm9kZS5kYXRhLm9uKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvbiA9IHZub2RlLmRhdGEub24gfHwge307XG4gIHZhciBvbGRPbiA9IG9sZFZub2RlLmRhdGEub24gfHwge307XG4gIHRhcmdldCQxID0gdm5vZGUuZWxtO1xuICBub3JtYWxpemVFdmVudHMob24pO1xuICB1cGRhdGVMaXN0ZW5lcnMob24sIG9sZE9uLCBhZGQkMSwgcmVtb3ZlJDIsIHZub2RlLmNvbnRleHQpO1xufVxuXG52YXIgZXZlbnRzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURPTUxpc3RlbmVycyxcbiAgdXBkYXRlOiB1cGRhdGVET01MaXN0ZW5lcnNcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVET01Qcm9wcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEuZG9tUHJvcHMpICYmIGlzVW5kZWYodm5vZGUuZGF0YS5kb21Qcm9wcykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIga2V5LCBjdXI7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRQcm9wcyA9IG9sZFZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307XG4gIHZhciBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAoaXNEZWYocHJvcHMuX19vYl9fKSkge1xuICAgIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyA9IGV4dGVuZCh7fSwgcHJvcHMpO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gb2xkUHJvcHMpIHtcbiAgICBpZiAoaXNVbmRlZihwcm9wc1trZXldKSkge1xuICAgICAgZWxtW2tleV0gPSAnJztcbiAgICB9XG4gIH1cbiAgZm9yIChrZXkgaW4gcHJvcHMpIHtcbiAgICBjdXIgPSBwcm9wc1trZXldO1xuICAgIC8vIGlnbm9yZSBjaGlsZHJlbiBpZiB0aGUgbm9kZSBoYXMgdGV4dENvbnRlbnQgb3IgaW5uZXJIVE1MLFxuICAgIC8vIGFzIHRoZXNlIHdpbGwgdGhyb3cgYXdheSBleGlzdGluZyBET00gbm9kZXMgYW5kIGNhdXNlIHJlbW92YWwgZXJyb3JzXG4gICAgLy8gb24gc3Vic2VxdWVudCBwYXRjaGVzICgjMzM2MClcbiAgICBpZiAoa2V5ID09PSAndGV4dENvbnRlbnQnIHx8IGtleSA9PT0gJ2lubmVySFRNTCcpIHtcbiAgICAgIGlmICh2bm9kZS5jaGlsZHJlbikgeyB2bm9kZS5jaGlsZHJlbi5sZW5ndGggPSAwOyB9XG4gICAgICBpZiAoY3VyID09PSBvbGRQcm9wc1trZXldKSB7IGNvbnRpbnVlIH1cbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAndmFsdWUnKSB7XG4gICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBfdmFsdWUgYXMgd2VsbCBzaW5jZVxuICAgICAgLy8gbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZSBzdHJpbmdpZmllZFxuICAgICAgZWxtLl92YWx1ZSA9IGN1cjtcbiAgICAgIC8vIGF2b2lkIHJlc2V0dGluZyBjdXJzb3IgcG9zaXRpb24gd2hlbiB2YWx1ZSBpcyB0aGUgc2FtZVxuICAgICAgdmFyIHN0ckN1ciA9IGlzVW5kZWYoY3VyKSA/ICcnIDogU3RyaW5nKGN1cik7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlVmFsdWUoZWxtLCB2bm9kZSwgc3RyQ3VyKSkge1xuICAgICAgICBlbG0udmFsdWUgPSBzdHJDdXI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsbVtrZXldID0gY3VyO1xuICAgIH1cbiAgfVxufVxuXG4vLyBjaGVjayBwbGF0Zm9ybXMvd2ViL3V0aWwvYXR0cnMuanMgYWNjZXB0VmFsdWVcblxuXG5mdW5jdGlvbiBzaG91bGRVcGRhdGVWYWx1ZSAoXG4gIGVsbSxcbiAgdm5vZGUsXG4gIGNoZWNrVmFsXG4pIHtcbiAgcmV0dXJuICghZWxtLmNvbXBvc2luZyAmJiAoXG4gICAgdm5vZGUudGFnID09PSAnb3B0aW9uJyB8fFxuICAgIGlzRGlydHkoZWxtLCBjaGVja1ZhbCkgfHxcbiAgICBpc0lucHV0Q2hhbmdlZChlbG0sIGNoZWNrVmFsKVxuICApKVxufVxuXG5mdW5jdGlvbiBpc0RpcnR5IChlbG0sIGNoZWNrVmFsKSB7XG4gIC8vIHJldHVybiB0cnVlIHdoZW4gdGV4dGJveCAoLm51bWJlciBhbmQgLnRyaW0pIGxvc2VzIGZvY3VzIGFuZCBpdHMgdmFsdWUgaXNcbiAgLy8gbm90IGVxdWFsIHRvIHRoZSB1cGRhdGVkIHZhbHVlXG4gIHZhciBub3RJbkZvY3VzID0gdHJ1ZTtcbiAgLy8gIzYxNTdcbiAgLy8gd29yayBhcm91bmQgSUUgYnVnIHdoZW4gYWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaW4gYW4gaWZyYW1lXG4gIHRyeSB7IG5vdEluRm9jdXMgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBlbG07IH0gY2F0Y2ggKGUpIHt9XG4gIHJldHVybiBub3RJbkZvY3VzICYmIGVsbS52YWx1ZSAhPT0gY2hlY2tWYWxcbn1cblxuZnVuY3Rpb24gaXNJbnB1dENoYW5nZWQgKGVsbSwgbmV3VmFsKSB7XG4gIHZhciB2YWx1ZSA9IGVsbS52YWx1ZTtcbiAgdmFyIG1vZGlmaWVycyA9IGVsbS5fdk1vZGlmaWVyczsgLy8gaW5qZWN0ZWQgYnkgdi1tb2RlbCBydW50aW1lXG4gIGlmIChpc0RlZihtb2RpZmllcnMpICYmIG1vZGlmaWVycy5udW1iZXIpIHtcbiAgICByZXR1cm4gdG9OdW1iZXIodmFsdWUpICE9PSB0b051bWJlcihuZXdWYWwpXG4gIH1cbiAgaWYgKGlzRGVmKG1vZGlmaWVycykgJiYgbW9kaWZpZXJzLnRyaW0pIHtcbiAgICByZXR1cm4gdmFsdWUudHJpbSgpICE9PSBuZXdWYWwudHJpbSgpXG4gIH1cbiAgcmV0dXJuIHZhbHVlICE9PSBuZXdWYWxcbn1cblxudmFyIGRvbVByb3BzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURPTVByb3BzLFxuICB1cGRhdGU6IHVwZGF0ZURPTVByb3BzXG59O1xuXG4vKiAgKi9cblxudmFyIHBhcnNlU3R5bGVUZXh0ID0gY2FjaGVkKGZ1bmN0aW9uIChjc3NUZXh0KSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGxpc3REZWxpbWl0ZXIgPSAvOyg/IVteKF0qXFwpKS9nO1xuICB2YXIgcHJvcGVydHlEZWxpbWl0ZXIgPSAvOiguKykvO1xuICBjc3NUZXh0LnNwbGl0KGxpc3REZWxpbWl0ZXIpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgdmFyIHRtcCA9IGl0ZW0uc3BsaXQocHJvcGVydHlEZWxpbWl0ZXIpO1xuICAgICAgdG1wLmxlbmd0aCA+IDEgJiYgKHJlc1t0bXBbMF0udHJpbSgpXSA9IHRtcFsxXS50cmltKCkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vLyBtZXJnZSBzdGF0aWMgYW5kIGR5bmFtaWMgc3R5bGUgZGF0YSBvbiB0aGUgc2FtZSB2bm9kZVxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVEYXRhIChkYXRhKSB7XG4gIHZhciBzdHlsZSA9IG5vcm1hbGl6ZVN0eWxlQmluZGluZyhkYXRhLnN0eWxlKTtcbiAgLy8gc3RhdGljIHN0eWxlIGlzIHByZS1wcm9jZXNzZWQgaW50byBhbiBvYmplY3QgZHVyaW5nIGNvbXBpbGF0aW9uXG4gIC8vIGFuZCBpcyBhbHdheXMgYSBmcmVzaCBvYmplY3QsIHNvIGl0J3Mgc2FmZSB0byBtZXJnZSBpbnRvIGl0XG4gIHJldHVybiBkYXRhLnN0YXRpY1N0eWxlXG4gICAgPyBleHRlbmQoZGF0YS5zdGF0aWNTdHlsZSwgc3R5bGUpXG4gICAgOiBzdHlsZVxufVxuXG4vLyBub3JtYWxpemUgcG9zc2libGUgYXJyYXkgLyBzdHJpbmcgdmFsdWVzIGludG8gT2JqZWN0XG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZUJpbmRpbmcgKGJpbmRpbmdTdHlsZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShiaW5kaW5nU3R5bGUpKSB7XG4gICAgcmV0dXJuIHRvT2JqZWN0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICBpZiAodHlwZW9mIGJpbmRpbmdTdHlsZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGFyc2VTdHlsZVRleHQoYmluZGluZ1N0eWxlKVxuICB9XG4gIHJldHVybiBiaW5kaW5nU3R5bGVcbn1cblxuLyoqXG4gKiBwYXJlbnQgY29tcG9uZW50IHN0eWxlIHNob3VsZCBiZSBhZnRlciBjaGlsZCdzXG4gKiBzbyB0aGF0IHBhcmVudCBjb21wb25lbnQncyBzdHlsZSBjb3VsZCBvdmVycmlkZSBpdFxuICovXG5mdW5jdGlvbiBnZXRTdHlsZSAodm5vZGUsIGNoZWNrQ2hpbGQpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgc3R5bGVEYXRhO1xuXG4gIGlmIChjaGVja0NoaWxkKSB7XG4gICAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoY2hpbGROb2RlLmRhdGEgJiYgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShjaGlsZE5vZGUuZGF0YSkpKSB7XG4gICAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEodm5vZGUuZGF0YSkpKSB7XG4gICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgfVxuXG4gIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gIHdoaWxlICgocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xuICAgIGlmIChwYXJlbnROb2RlLmRhdGEgJiYgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShwYXJlbnROb2RlLmRhdGEpKSkge1xuICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIGNzc1ZhclJFID0gL14tLS87XG52YXIgaW1wb3J0YW50UkUgPSAvXFxzKiFpbXBvcnRhbnQkLztcbnZhciBzZXRQcm9wID0gZnVuY3Rpb24gKGVsLCBuYW1lLCB2YWwpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjc3NWYXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsKTtcbiAgfSBlbHNlIGlmIChpbXBvcnRhbnRSRS50ZXN0KHZhbCkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwucmVwbGFjZShpbXBvcnRhbnRSRSwgJycpLCAnaW1wb3J0YW50Jyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG5vcm1hbGl6ZWROYW1lID0gbm9ybWFsaXplKG5hbWUpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgIC8vIFN1cHBvcnQgdmFsdWVzIGFycmF5IGNyZWF0ZWQgYnkgYXV0b3ByZWZpeGVyLCBlLmcuXG4gICAgICAvLyB7ZGlzcGxheTogW1wiLXdlYmtpdC1ib3hcIiwgXCItbXMtZmxleGJveFwiLCBcImZsZXhcIl19XG4gICAgICAvLyBTZXQgdGhlbSBvbmUgYnkgb25lLCBhbmQgdGhlIGJyb3dzZXIgd2lsbCBvbmx5IHNldCB0aG9zZSBpdCBjYW4gcmVjb2duaXplXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdmFsLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGVsLnN0eWxlW25vcm1hbGl6ZWROYW1lXSA9IHZhbFtpXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHZlbmRvck5hbWVzID0gWydXZWJraXQnLCAnTW96JywgJ21zJ107XG5cbnZhciBlbXB0eVN0eWxlO1xudmFyIG5vcm1hbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAocHJvcCkge1xuICBlbXB0eVN0eWxlID0gZW1wdHlTdHlsZSB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKS5zdHlsZTtcbiAgcHJvcCA9IGNhbWVsaXplKHByb3ApO1xuICBpZiAocHJvcCAhPT0gJ2ZpbHRlcicgJiYgKHByb3AgaW4gZW1wdHlTdHlsZSkpIHtcbiAgICByZXR1cm4gcHJvcFxuICB9XG4gIHZhciBjYXBOYW1lID0gcHJvcC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3Auc2xpY2UoMSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmVuZG9yTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbmFtZSA9IHZlbmRvck5hbWVzW2ldICsgY2FwTmFtZTtcbiAgICBpZiAobmFtZSBpbiBlbXB0eVN0eWxlKSB7XG4gICAgICByZXR1cm4gbmFtZVxuICAgIH1cbiAgfVxufSk7XG5cbmZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG5cbiAgaWYgKGlzVW5kZWYoZGF0YS5zdGF0aWNTdHlsZSkgJiYgaXNVbmRlZihkYXRhLnN0eWxlKSAmJlxuICAgIGlzVW5kZWYob2xkRGF0YS5zdGF0aWNTdHlsZSkgJiYgaXNVbmRlZihvbGREYXRhLnN0eWxlKVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjdXIsIG5hbWU7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZFN0YXRpY1N0eWxlID0gb2xkRGF0YS5zdGF0aWNTdHlsZTtcbiAgdmFyIG9sZFN0eWxlQmluZGluZyA9IG9sZERhdGEubm9ybWFsaXplZFN0eWxlIHx8IG9sZERhdGEuc3R5bGUgfHwge307XG5cbiAgLy8gaWYgc3RhdGljIHN0eWxlIGV4aXN0cywgc3R5bGViaW5kaW5nIGFscmVhZHkgbWVyZ2VkIGludG8gaXQgd2hlbiBkb2luZyBub3JtYWxpemVTdHlsZURhdGFcbiAgdmFyIG9sZFN0eWxlID0gb2xkU3RhdGljU3R5bGUgfHwgb2xkU3R5bGVCaW5kaW5nO1xuXG4gIHZhciBzdHlsZSA9IG5vcm1hbGl6ZVN0eWxlQmluZGluZyh2bm9kZS5kYXRhLnN0eWxlKSB8fCB7fTtcblxuICAvLyBzdG9yZSBub3JtYWxpemVkIHN0eWxlIHVuZGVyIGEgZGlmZmVyZW50IGtleSBmb3IgbmV4dCBkaWZmXG4gIC8vIG1ha2Ugc3VyZSB0byBjbG9uZSBpdCBpZiBpdCdzIHJlYWN0aXZlLCBzaW5jZSB0aGUgdXNlciBsaWtsZXkgd2FudHNcbiAgLy8gdG8gbXV0YXRlIGl0LlxuICB2bm9kZS5kYXRhLm5vcm1hbGl6ZWRTdHlsZSA9IGlzRGVmKHN0eWxlLl9fb2JfXylcbiAgICA/IGV4dGVuZCh7fSwgc3R5bGUpXG4gICAgOiBzdHlsZTtcblxuICB2YXIgbmV3U3R5bGUgPSBnZXRTdHlsZSh2bm9kZSwgdHJ1ZSk7XG5cbiAgZm9yIChuYW1lIGluIG9sZFN0eWxlKSB7XG4gICAgaWYgKGlzVW5kZWYobmV3U3R5bGVbbmFtZV0pKSB7XG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCAnJyk7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBuZXdTdHlsZSkge1xuICAgIGN1ciA9IG5ld1N0eWxlW25hbWVdO1xuICAgIGlmIChjdXIgIT09IG9sZFN0eWxlW25hbWVdKSB7XG4gICAgICAvLyBpZTkgc2V0dGluZyB0byBudWxsIGhhcyBubyBlZmZlY3QsIG11c3QgdXNlIGVtcHR5IHN0cmluZ1xuICAgICAgc2V0UHJvcChlbCwgbmFtZSwgY3VyID09IG51bGwgPyAnJyA6IGN1cik7XG4gICAgfVxuICB9XG59XG5cbnZhciBzdHlsZSA9IHtcbiAgY3JlYXRlOiB1cGRhdGVTdHlsZSxcbiAgdXBkYXRlOiB1cGRhdGVTdHlsZVxufTtcblxuLyogICovXG5cbi8qKlxuICogQWRkIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAqL1xuZnVuY3Rpb24gYWRkQ2xhc3MgKGVsLCBjbHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2xzIHx8ICEoY2xzID0gY2xzLnRyaW0oKSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgICBjbHMuc3BsaXQoL1xccysvKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBlbC5jbGFzc0xpc3QuYWRkKGMpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbHMpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VyID0gXCIgXCIgKyAoZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiO1xuICAgIGlmIChjdXIuaW5kZXhPZignICcgKyBjbHMgKyAnICcpIDwgMCkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIChjdXIgKyBjbHMpLnRyaW0oKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MgKGVsLCBjbHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2xzIHx8ICEoY2xzID0gY2xzLnRyaW0oKSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgICBjbHMuc3BsaXQoL1xccysvKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBlbC5jbGFzc0xpc3QucmVtb3ZlKGMpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbHMpO1xuICAgIH1cbiAgICBpZiAoIWVsLmNsYXNzTGlzdC5sZW5ndGgpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICB2YXIgdGFyID0gJyAnICsgY2xzICsgJyAnO1xuICAgIHdoaWxlIChjdXIuaW5kZXhPZih0YXIpID49IDApIHtcbiAgICAgIGN1ciA9IGN1ci5yZXBsYWNlKHRhciwgJyAnKTtcbiAgICB9XG4gICAgY3VyID0gY3VyLnRyaW0oKTtcbiAgICBpZiAoY3VyKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY3VyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb24gKGRlZiQkMSkge1xuICBpZiAoIWRlZiQkMSkge1xuICAgIHJldHVyblxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0eXBlb2YgZGVmJCQxID09PSAnb2JqZWN0Jykge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICBpZiAoZGVmJCQxLmNzcyAhPT0gZmFsc2UpIHtcbiAgICAgIGV4dGVuZChyZXMsIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZiQkMS5uYW1lIHx8ICd2JykpO1xuICAgIH1cbiAgICBleHRlbmQocmVzLCBkZWYkJDEpO1xuICAgIHJldHVybiByZXNcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmJCQxID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEpXG4gIH1cbn1cblxudmFyIGF1dG9Dc3NUcmFuc2l0aW9uID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiB7XG4gICAgZW50ZXJDbGFzczogKG5hbWUgKyBcIi1lbnRlclwiKSxcbiAgICBlbnRlclRvQ2xhc3M6IChuYW1lICsgXCItZW50ZXItdG9cIiksXG4gICAgZW50ZXJBY3RpdmVDbGFzczogKG5hbWUgKyBcIi1lbnRlci1hY3RpdmVcIiksXG4gICAgbGVhdmVDbGFzczogKG5hbWUgKyBcIi1sZWF2ZVwiKSxcbiAgICBsZWF2ZVRvQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtdG9cIiksXG4gICAgbGVhdmVBY3RpdmVDbGFzczogKG5hbWUgKyBcIi1sZWF2ZS1hY3RpdmVcIilcbiAgfVxufSk7XG5cbnZhciBoYXNUcmFuc2l0aW9uID0gaW5Ccm93c2VyICYmICFpc0lFOTtcbnZhciBUUkFOU0lUSU9OID0gJ3RyYW5zaXRpb24nO1xudmFyIEFOSU1BVElPTiA9ICdhbmltYXRpb24nO1xuXG4vLyBUcmFuc2l0aW9uIHByb3BlcnR5L2V2ZW50IHNuaWZmaW5nXG52YXIgdHJhbnNpdGlvblByb3AgPSAndHJhbnNpdGlvbic7XG52YXIgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3RyYW5zaXRpb25lbmQnO1xudmFyIGFuaW1hdGlvblByb3AgPSAnYW5pbWF0aW9uJztcbnZhciBhbmltYXRpb25FbmRFdmVudCA9ICdhbmltYXRpb25lbmQnO1xuaWYgKGhhc1RyYW5zaXRpb24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh3aW5kb3cub250cmFuc2l0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXR0cmFuc2l0aW9uZW5kICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgdHJhbnNpdGlvblByb3AgPSAnV2Via2l0VHJhbnNpdGlvbic7XG4gICAgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdFRyYW5zaXRpb25FbmQnO1xuICB9XG4gIGlmICh3aW5kb3cub25hbmltYXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdGFuaW1hdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIGFuaW1hdGlvblByb3AgPSAnV2Via2l0QW5pbWF0aW9uJztcbiAgICBhbmltYXRpb25FbmRFdmVudCA9ICd3ZWJraXRBbmltYXRpb25FbmQnO1xuICB9XG59XG5cbi8vIGJpbmRpbmcgdG8gd2luZG93IGlzIG5lY2Vzc2FyeSB0byBtYWtlIGhvdCByZWxvYWQgd29yayBpbiBJRSBpbiBzdHJpY3QgbW9kZVxudmFyIHJhZiA9IGluQnJvd3NlciAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdylcbiAgOiBzZXRUaW1lb3V0O1xuXG5mdW5jdGlvbiBuZXh0RnJhbWUgKGZuKSB7XG4gIHJhZihmdW5jdGlvbiAoKSB7XG4gICAgcmFmKGZuKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZFRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICB2YXIgdHJhbnNpdGlvbkNsYXNzZXMgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXMgfHwgKGVsLl90cmFuc2l0aW9uQ2xhc3NlcyA9IFtdKTtcbiAgaWYgKHRyYW5zaXRpb25DbGFzc2VzLmluZGV4T2YoY2xzKSA8IDApIHtcbiAgICB0cmFuc2l0aW9uQ2xhc3Nlcy5wdXNoKGNscyk7XG4gICAgYWRkQ2xhc3MoZWwsIGNscyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICByZW1vdmUoZWwuX3RyYW5zaXRpb25DbGFzc2VzLCBjbHMpO1xuICB9XG4gIHJlbW92ZUNsYXNzKGVsLCBjbHMpO1xufVxuXG5mdW5jdGlvbiB3aGVuVHJhbnNpdGlvbkVuZHMgKFxuICBlbCxcbiAgZXhwZWN0ZWRUeXBlLFxuICBjYlxuKSB7XG4gIHZhciByZWYgPSBnZXRUcmFuc2l0aW9uSW5mbyhlbCwgZXhwZWN0ZWRUeXBlKTtcbiAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgdmFyIHRpbWVvdXQgPSByZWYudGltZW91dDtcbiAgdmFyIHByb3BDb3VudCA9IHJlZi5wcm9wQ291bnQ7XG4gIGlmICghdHlwZSkgeyByZXR1cm4gY2IoKSB9XG4gIHZhciBldmVudCA9IHR5cGUgPT09IFRSQU5TSVRJT04gPyB0cmFuc2l0aW9uRW5kRXZlbnQgOiBhbmltYXRpb25FbmRFdmVudDtcbiAgdmFyIGVuZGVkID0gMDtcbiAgdmFyIGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7XG4gICAgY2IoKTtcbiAgfTtcbiAgdmFyIG9uRW5kID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGVsKSB7XG4gICAgICBpZiAoKytlbmRlZCA+PSBwcm9wQ291bnQpIHtcbiAgICAgICAgZW5kKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZW5kZWQgPCBwcm9wQ291bnQpIHtcbiAgICAgIGVuZCgpO1xuICAgIH1cbiAgfSwgdGltZW91dCArIDEpO1xuICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7XG59XG5cbnZhciB0cmFuc2Zvcm1SRSA9IC9cXGIodHJhbnNmb3JtfGFsbCkoLHwkKS87XG5cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25JbmZvIChlbCwgZXhwZWN0ZWRUeXBlKSB7XG4gIHZhciBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gIHZhciB0cmFuc2l0aW9uRGVsYXlzID0gc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0RlbGF5J10uc3BsaXQoJywgJyk7XG4gIHZhciB0cmFuc2l0aW9uRHVyYXRpb25zID0gc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10uc3BsaXQoJywgJyk7XG4gIHZhciB0cmFuc2l0aW9uVGltZW91dCA9IGdldFRpbWVvdXQodHJhbnNpdGlvbkRlbGF5cywgdHJhbnNpdGlvbkR1cmF0aW9ucyk7XG4gIHZhciBhbmltYXRpb25EZWxheXMgPSBzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEZWxheSddLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uRHVyYXRpb25zID0gc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRHVyYXRpb24nXS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KGFuaW1hdGlvbkRlbGF5cywgYW5pbWF0aW9uRHVyYXRpb25zKTtcblxuICB2YXIgdHlwZTtcbiAgdmFyIHRpbWVvdXQgPSAwO1xuICB2YXIgcHJvcENvdW50ID0gMDtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChleHBlY3RlZFR5cGUgPT09IFRSQU5TSVRJT04pIHtcbiAgICBpZiAodHJhbnNpdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gVFJBTlNJVElPTjtcbiAgICAgIHRpbWVvdXQgPSB0cmFuc2l0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09IEFOSU1BVElPTikge1xuICAgIGlmIChhbmltYXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IEFOSU1BVElPTjtcbiAgICAgIHRpbWVvdXQgPSBhbmltYXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGltZW91dCA9IE1hdGgubWF4KHRyYW5zaXRpb25UaW1lb3V0LCBhbmltYXRpb25UaW1lb3V0KTtcbiAgICB0eXBlID0gdGltZW91dCA+IDBcbiAgICAgID8gdHJhbnNpdGlvblRpbWVvdXQgPiBhbmltYXRpb25UaW1lb3V0XG4gICAgICAgID8gVFJBTlNJVElPTlxuICAgICAgICA6IEFOSU1BVElPTlxuICAgICAgOiBudWxsO1xuICAgIHByb3BDb3VudCA9IHR5cGVcbiAgICAgID8gdHlwZSA9PT0gVFJBTlNJVElPTlxuICAgICAgICA/IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICAgIDogYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgOiAwO1xuICB9XG4gIHZhciBoYXNUcmFuc2Zvcm0gPVxuICAgIHR5cGUgPT09IFRSQU5TSVRJT04gJiZcbiAgICB0cmFuc2Zvcm1SRS50ZXN0KHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdQcm9wZXJ0eSddKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHRpbWVvdXQ6IHRpbWVvdXQsXG4gICAgcHJvcENvdW50OiBwcm9wQ291bnQsXG4gICAgaGFzVHJhbnNmb3JtOiBoYXNUcmFuc2Zvcm1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRUaW1lb3V0IChkZWxheXMsIGR1cmF0aW9ucykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB3aGlsZSAoZGVsYXlzLmxlbmd0aCA8IGR1cmF0aW9ucy5sZW5ndGgpIHtcbiAgICBkZWxheXMgPSBkZWxheXMuY29uY2F0KGRlbGF5cyk7XG4gIH1cblxuICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgZHVyYXRpb25zLm1hcChmdW5jdGlvbiAoZCwgaSkge1xuICAgIHJldHVybiB0b01zKGQpICsgdG9NcyhkZWxheXNbaV0pXG4gIH0pKVxufVxuXG5mdW5jdGlvbiB0b01zIChzKSB7XG4gIHJldHVybiBOdW1iZXIocy5zbGljZSgwLCAtMSkpICogMTAwMFxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW50ZXIgKHZub2RlLCB0b2dnbGVEaXNwbGF5KSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGxlYXZlIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7XG4gICAgZWwuX2xlYXZlQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fbGVhdmVDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBlbnRlckNsYXNzID0gZGF0YS5lbnRlckNsYXNzO1xuICB2YXIgZW50ZXJUb0NsYXNzID0gZGF0YS5lbnRlclRvQ2xhc3M7XG4gIHZhciBlbnRlckFjdGl2ZUNsYXNzID0gZGF0YS5lbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgYXBwZWFyQ2xhc3MgPSBkYXRhLmFwcGVhckNsYXNzO1xuICB2YXIgYXBwZWFyVG9DbGFzcyA9IGRhdGEuYXBwZWFyVG9DbGFzcztcbiAgdmFyIGFwcGVhckFjdGl2ZUNsYXNzID0gZGF0YS5hcHBlYXJBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUVudGVyID0gZGF0YS5iZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVyID0gZGF0YS5lbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXIgPSBkYXRhLmFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZCA9IGRhdGEuZW50ZXJDYW5jZWxsZWQ7XG4gIHZhciBiZWZvcmVBcHBlYXIgPSBkYXRhLmJlZm9yZUFwcGVhcjtcbiAgdmFyIGFwcGVhciA9IGRhdGEuYXBwZWFyO1xuICB2YXIgYWZ0ZXJBcHBlYXIgPSBkYXRhLmFmdGVyQXBwZWFyO1xuICB2YXIgYXBwZWFyQ2FuY2VsbGVkID0gZGF0YS5hcHBlYXJDYW5jZWxsZWQ7XG4gIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG5cbiAgLy8gYWN0aXZlSW5zdGFuY2Ugd2lsbCBhbHdheXMgYmUgdGhlIDx0cmFuc2l0aW9uPiBjb21wb25lbnQgbWFuYWdpbmcgdGhpc1xuICAvLyB0cmFuc2l0aW9uLiBPbmUgZWRnZSBjYXNlIHRvIGNoZWNrIGlzIHdoZW4gdGhlIDx0cmFuc2l0aW9uPiBpcyBwbGFjZWRcbiAgLy8gYXMgdGhlIHJvb3Qgbm9kZSBvZiBhIGNoaWxkIGNvbXBvbmVudC4gSW4gdGhhdCBjYXNlIHdlIG5lZWQgdG8gY2hlY2tcbiAgLy8gPHRyYW5zaXRpb24+J3MgcGFyZW50IGZvciBhcHBlYXIgY2hlY2suXG4gIHZhciBjb250ZXh0ID0gYWN0aXZlSW5zdGFuY2U7XG4gIHZhciB0cmFuc2l0aW9uTm9kZSA9IGFjdGl2ZUluc3RhbmNlLiR2bm9kZTtcbiAgd2hpbGUgKHRyYW5zaXRpb25Ob2RlICYmIHRyYW5zaXRpb25Ob2RlLnBhcmVudCkge1xuICAgIHRyYW5zaXRpb25Ob2RlID0gdHJhbnNpdGlvbk5vZGUucGFyZW50O1xuICAgIGNvbnRleHQgPSB0cmFuc2l0aW9uTm9kZS5jb250ZXh0O1xuICB9XG5cbiAgdmFyIGlzQXBwZWFyID0gIWNvbnRleHQuX2lzTW91bnRlZCB8fCAhdm5vZGUuaXNSb290SW5zZXJ0O1xuXG4gIGlmIChpc0FwcGVhciAmJiAhYXBwZWFyICYmIGFwcGVhciAhPT0gJycpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBzdGFydENsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQ2xhc3NcbiAgICA/IGFwcGVhckNsYXNzXG4gICAgOiBlbnRlckNsYXNzO1xuICB2YXIgYWN0aXZlQ2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJBY3RpdmVDbGFzc1xuICAgID8gYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA6IGVudGVyQWN0aXZlQ2xhc3M7XG4gIHZhciB0b0NsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyVG9DbGFzc1xuICAgID8gYXBwZWFyVG9DbGFzc1xuICAgIDogZW50ZXJUb0NsYXNzO1xuXG4gIHZhciBiZWZvcmVFbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKGJlZm9yZUFwcGVhciB8fCBiZWZvcmVFbnRlcilcbiAgICA6IGJlZm9yZUVudGVyO1xuICB2YXIgZW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/ICh0eXBlb2YgYXBwZWFyID09PSAnZnVuY3Rpb24nID8gYXBwZWFyIDogZW50ZXIpXG4gICAgOiBlbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChhZnRlckFwcGVhciB8fCBhZnRlckVudGVyKVxuICAgIDogYWZ0ZXJFbnRlcjtcbiAgdmFyIGVudGVyQ2FuY2VsbGVkSG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYXBwZWFyQ2FuY2VsbGVkIHx8IGVudGVyQ2FuY2VsbGVkKVxuICAgIDogZW50ZXJDYW5jZWxsZWQ7XG5cbiAgdmFyIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiA9IHRvTnVtYmVyKFxuICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgPyBkdXJhdGlvbi5lbnRlclxuICAgICAgOiBkdXJhdGlvblxuICApO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiAhPSBudWxsKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24sICdlbnRlcicsIHZub2RlKTtcbiAgfVxuXG4gIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gIHZhciB1c2VyV2FudHNDb250cm9sID0gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChlbnRlckhvb2spO1xuXG4gIHZhciBjYiA9IGVsLl9lbnRlckNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIH1cbiAgICAgIGVudGVyQ2FuY2VsbGVkSG9vayAmJiBlbnRlckNhbmNlbGxlZEhvb2soZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhZnRlckVudGVySG9vayAmJiBhZnRlckVudGVySG9vayhlbCk7XG4gICAgfVxuICAgIGVsLl9lbnRlckNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKCF2bm9kZS5kYXRhLnNob3cpIHtcbiAgICAvLyByZW1vdmUgcGVuZGluZyBsZWF2ZSBlbGVtZW50IG9uIGVudGVyIGJ5IGluamVjdGluZyBhbiBpbnNlcnQgaG9va1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLmRhdGEuaG9vayB8fCAodm5vZGUuZGF0YS5ob29rID0ge30pLCAnaW5zZXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudE5vZGU7XG4gICAgICB2YXIgcGVuZGluZ05vZGUgPSBwYXJlbnQgJiYgcGFyZW50Ll9wZW5kaW5nICYmIHBhcmVudC5fcGVuZGluZ1t2bm9kZS5rZXldO1xuICAgICAgaWYgKHBlbmRpbmdOb2RlICYmXG4gICAgICAgIHBlbmRpbmdOb2RlLnRhZyA9PT0gdm5vZGUudGFnICYmXG4gICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYlxuICAgICAgKSB7XG4gICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYigpO1xuICAgICAgfVxuICAgICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gc3RhcnQgZW50ZXIgdHJhbnNpdGlvblxuICBiZWZvcmVFbnRlckhvb2sgJiYgYmVmb3JlRW50ZXJIb29rKGVsKTtcbiAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xuICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIGlmICghY2IuY2FuY2VsbGVkICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uKSkge1xuICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0RW50ZXJEdXJhdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICh2bm9kZS5kYXRhLnNob3cpIHtcbiAgICB0b2dnbGVEaXNwbGF5ICYmIHRvZ2dsZURpc3BsYXkoKTtcbiAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gIH1cblxuICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICBjYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxlYXZlICh2bm9kZSwgcm0pIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXG4gIC8vIGNhbGwgZW50ZXIgY2FsbGJhY2sgbm93XG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikpIHtcbiAgICBlbC5fZW50ZXJDYi5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIGVsLl9lbnRlckNiKCk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7XG4gIGlmIChpc1VuZGVmKGRhdGEpKSB7XG4gICAgcmV0dXJuIHJtKClcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgbGVhdmVDbGFzcyA9IGRhdGEubGVhdmVDbGFzcztcbiAgdmFyIGxlYXZlVG9DbGFzcyA9IGRhdGEubGVhdmVUb0NsYXNzO1xuICB2YXIgbGVhdmVBY3RpdmVDbGFzcyA9IGRhdGEubGVhdmVBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUxlYXZlID0gZGF0YS5iZWZvcmVMZWF2ZTtcbiAgdmFyIGxlYXZlID0gZGF0YS5sZWF2ZTtcbiAgdmFyIGFmdGVyTGVhdmUgPSBkYXRhLmFmdGVyTGVhdmU7XG4gIHZhciBsZWF2ZUNhbmNlbGxlZCA9IGRhdGEubGVhdmVDYW5jZWxsZWQ7XG4gIHZhciBkZWxheUxlYXZlID0gZGF0YS5kZWxheUxlYXZlO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gIHZhciB1c2VyV2FudHNDb250cm9sID0gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChsZWF2ZSk7XG5cbiAgdmFyIGV4cGxpY2l0TGVhdmVEdXJhdGlvbiA9IHRvTnVtYmVyKFxuICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgPyBkdXJhdGlvbi5sZWF2ZVxuICAgICAgOiBkdXJhdGlvblxuICApO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRGVmKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbiwgJ2xlYXZlJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGNiID0gZWwuX2xlYXZlQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSAmJiBlbC5wYXJlbnROb2RlLl9wZW5kaW5nKSB7XG4gICAgICBlbC5wYXJlbnROb2RlLl9wZW5kaW5nW3Zub2RlLmtleV0gPSBudWxsO1xuICAgIH1cbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGxlYXZlQ2FuY2VsbGVkICYmIGxlYXZlQ2FuY2VsbGVkKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICAgIGFmdGVyTGVhdmUgJiYgYWZ0ZXJMZWF2ZShlbCk7XG4gICAgfVxuICAgIGVsLl9sZWF2ZUNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKGRlbGF5TGVhdmUpIHtcbiAgICBkZWxheUxlYXZlKHBlcmZvcm1MZWF2ZSk7XG4gIH0gZWxzZSB7XG4gICAgcGVyZm9ybUxlYXZlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwZXJmb3JtTGVhdmUgKCkge1xuICAgIC8vIHRoZSBkZWxheWVkIGxlYXZlIG1heSBoYXZlIGFscmVhZHkgYmVlbiBjYW5jZWxsZWRcbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gcmVjb3JkIGxlYXZpbmcgZWxlbWVudFxuICAgIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgICAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyB8fCAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyA9IHt9KSlbKHZub2RlLmtleSldID0gdm5vZGU7XG4gICAgfVxuICAgIGJlZm9yZUxlYXZlICYmIGJlZm9yZUxlYXZlKGVsKTtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICAgIGlmICghY2IuY2FuY2VsbGVkICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdExlYXZlRHVyYXRpb24pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZWF2ZSAmJiBsZWF2ZShlbCwgY2IpO1xuICAgIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gb25seSB1c2VkIGluIGRldiBtb2RlXG5mdW5jdGlvbiBjaGVja0R1cmF0aW9uICh2YWwsIG5hbWUsIHZub2RlKSB7XG4gIGlmICh0eXBlb2YgdmFsICE9PSAnbnVtYmVyJykge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSBcIiArXG4gICAgICBcImdvdCBcIiArIChKU09OLnN0cmluZ2lmeSh2YWwpKSArIFwiLlwiLFxuICAgICAgdm5vZGUuY29udGV4dFxuICAgICk7XG4gIH0gZWxzZSBpZiAoaXNOYU4odmFsKSkge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBOYU4gLSBcIiArXG4gICAgICAndGhlIGR1cmF0aW9uIGV4cHJlc3Npb24gbWlnaHQgYmUgaW5jb3JyZWN0LicsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkRHVyYXRpb24gKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHZhbClcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYSB0cmFuc2l0aW9uIGhvb2sncyBhcmd1bWVudCBsZW5ndGguIFRoZSBob29rIG1heSBiZTpcbiAqIC0gYSBtZXJnZWQgaG9vayAoaW52b2tlcikgd2l0aCB0aGUgb3JpZ2luYWwgaW4gLmZuc1xuICogLSBhIHdyYXBwZWQgY29tcG9uZW50IG1ldGhvZCAoY2hlY2sgLl9sZW5ndGgpXG4gKiAtIGEgcGxhaW4gZnVuY3Rpb24gKC5sZW5ndGgpXG4gKi9cbmZ1bmN0aW9uIGdldEhvb2tBcmd1bWVudHNMZW5ndGggKGZuKSB7XG4gIGlmIChpc1VuZGVmKGZuKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHZhciBpbnZva2VyRm5zID0gZm4uZm5zO1xuICBpZiAoaXNEZWYoaW52b2tlckZucykpIHtcbiAgICAvLyBpbnZva2VyXG4gICAgcmV0dXJuIGdldEhvb2tBcmd1bWVudHNMZW5ndGgoXG4gICAgICBBcnJheS5pc0FycmF5KGludm9rZXJGbnMpXG4gICAgICAgID8gaW52b2tlckZuc1swXVxuICAgICAgICA6IGludm9rZXJGbnNcbiAgICApXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChmbi5fbGVuZ3RoIHx8IGZuLmxlbmd0aCkgPiAxXG4gIH1cbn1cblxuZnVuY3Rpb24gX2VudGVyIChfLCB2bm9kZSkge1xuICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgZW50ZXIodm5vZGUpO1xuICB9XG59XG5cbnZhciB0cmFuc2l0aW9uID0gaW5Ccm93c2VyID8ge1xuICBjcmVhdGU6IF9lbnRlcixcbiAgYWN0aXZhdGU6IF9lbnRlcixcbiAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUkJDEgKHZub2RlLCBybSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgICAgbGVhdmUodm5vZGUsIHJtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICB9XG4gIH1cbn0gOiB7fTtcblxudmFyIHBsYXRmb3JtTW9kdWxlcyA9IFtcbiAgYXR0cnMsXG4gIGtsYXNzLFxuICBldmVudHMsXG4gIGRvbVByb3BzLFxuICBzdHlsZSxcbiAgdHJhbnNpdGlvblxuXTtcblxuLyogICovXG5cbi8vIHRoZSBkaXJlY3RpdmUgbW9kdWxlIHNob3VsZCBiZSBhcHBsaWVkIGxhc3QsIGFmdGVyIGFsbFxuLy8gYnVpbHQtaW4gbW9kdWxlcyBoYXZlIGJlZW4gYXBwbGllZC5cbnZhciBtb2R1bGVzID0gcGxhdGZvcm1Nb2R1bGVzLmNvbmNhdChiYXNlTW9kdWxlcyk7XG5cbnZhciBwYXRjaCA9IGNyZWF0ZVBhdGNoRnVuY3Rpb24oeyBub2RlT3BzOiBub2RlT3BzLCBtb2R1bGVzOiBtb2R1bGVzIH0pO1xuXG4vKipcbiAqIE5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBsaWtlIGF0dGFjaGluZ1xuICogcHJvcGVydGllcyB0byBFbGVtZW50cy5cbiAqL1xuXG52YXIgaXNUZXh0SW5wdXRUeXBlID0gbWFrZU1hcCgndGV4dCxudW1iZXIscGFzc3dvcmQsc2VhcmNoLGVtYWlsLHRlbCx1cmwnKTtcblxuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5pZiAoaXNJRTkpIHtcbiAgLy8gaHR0cDovL3d3dy5tYXR0czQxMS5jb20vcG9zdC9pbnRlcm5ldC1leHBsb3Jlci05LW9uaW5wdXQvXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdGlvbmNoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgIGlmIChlbCAmJiBlbC52bW9kZWwpIHtcbiAgICAgIHRyaWdnZXIoZWwsICdpbnB1dCcpO1xuICAgIH1cbiAgfSk7XG59XG5cbnZhciBtb2RlbCQxID0ge1xuICBpbnNlcnRlZDogZnVuY3Rpb24gaW5zZXJ0ZWQgKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICB2YXIgY2IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgIH07XG4gICAgICBjYigpO1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXNJRSB8fCBpc0VkZ2UpIHtcbiAgICAgICAgc2V0VGltZW91dChjYiwgMCk7XG4gICAgICB9XG4gICAgICBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgfSBlbHNlIGlmICh2bm9kZS50YWcgPT09ICd0ZXh0YXJlYScgfHwgaXNUZXh0SW5wdXRUeXBlKGVsLnR5cGUpKSB7XG4gICAgICBlbC5fdk1vZGlmaWVycyA9IGJpbmRpbmcubW9kaWZpZXJzO1xuICAgICAgaWYgKCFiaW5kaW5nLm1vZGlmaWVycy5sYXp5KSB7XG4gICAgICAgIC8vIFNhZmFyaSA8IDEwLjIgJiBVSVdlYlZpZXcgZG9lc24ndCBmaXJlIGNvbXBvc2l0aW9uZW5kIHdoZW5cbiAgICAgICAgLy8gc3dpdGNoaW5nIGZvY3VzIGJlZm9yZSBjb25maXJtaW5nIGNvbXBvc2l0aW9uIGNob2ljZVxuICAgICAgICAvLyB0aGlzIGFsc28gZml4ZXMgdGhlIGlzc3VlIHdoZXJlIHNvbWUgYnJvd3NlcnMgZS5nLiBpT1MgQ2hyb21lXG4gICAgICAgIC8vIGZpcmVzIFwiY2hhbmdlXCIgaW5zdGVhZCBvZiBcImlucHV0XCIgb24gYXV0b2NvbXBsZXRlLlxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgaWYgKCFpc0FuZHJvaWQpIHtcbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0Jywgb25Db21wb3NpdGlvblN0YXJ0KTtcbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbmVuZCcsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICB9XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoaXNJRTkpIHtcbiAgICAgICAgICBlbC52bW9kZWwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBjb21wb25lbnRVcGRhdGVkOiBmdW5jdGlvbiBjb21wb25lbnRVcGRhdGVkIChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgLy8gaW4gY2FzZSB0aGUgb3B0aW9ucyByZW5kZXJlZCBieSB2LWZvciBoYXZlIGNoYW5nZWQsXG4gICAgICAvLyBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIHZhbHVlIGlzIG91dC1vZi1zeW5jIHdpdGggdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gICAgICAvLyBkZXRlY3Qgc3VjaCBjYXNlcyBhbmQgZmlsdGVyIG91dCB2YWx1ZXMgdGhhdCBubyBsb25nZXIgaGFzIGEgbWF0Y2hpbmdcbiAgICAgIC8vIG9wdGlvbiBpbiB0aGUgRE9NLlxuICAgICAgdmFyIHByZXZPcHRpb25zID0gZWwuX3ZPcHRpb25zO1xuICAgICAgdmFyIGN1ck9wdGlvbnMgPSBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgICBpZiAoY3VyT3B0aW9ucy5zb21lKGZ1bmN0aW9uIChvLCBpKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCBwcmV2T3B0aW9uc1tpXSk7IH0pKSB7XG4gICAgICAgIHRyaWdnZXIoZWwsICdjaGFuZ2UnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHNldFNlbGVjdGVkIChlbCwgYmluZGluZywgdm0pIHtcbiAgdmFyIHZhbHVlID0gYmluZGluZy52YWx1ZTtcbiAgdmFyIGlzTXVsdGlwbGUgPSBlbC5tdWx0aXBsZTtcbiAgaWYgKGlzTXVsdGlwbGUgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCI8c2VsZWN0IG11bHRpcGxlIHYtbW9kZWw9XFxcIlwiICsgKGJpbmRpbmcuZXhwcmVzc2lvbikgKyBcIlxcXCI+IFwiICtcbiAgICAgIFwiZXhwZWN0cyBhbiBBcnJheSB2YWx1ZSBmb3IgaXRzIGJpbmRpbmcsIGJ1dCBnb3QgXCIgKyAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSkpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBzZWxlY3RlZCwgb3B0aW9uO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGVsLm9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb3B0aW9uID0gZWwub3B0aW9uc1tpXTtcbiAgICBpZiAoaXNNdWx0aXBsZSkge1xuICAgICAgc2VsZWN0ZWQgPSBsb29zZUluZGV4T2YodmFsdWUsIGdldFZhbHVlKG9wdGlvbikpID4gLTE7XG4gICAgICBpZiAob3B0aW9uLnNlbGVjdGVkICE9PSBzZWxlY3RlZCkge1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxvb3NlRXF1YWwoZ2V0VmFsdWUob3B0aW9uKSwgdmFsdWUpKSB7XG4gICAgICAgIGlmIChlbC5zZWxlY3RlZEluZGV4ICE9PSBpKSB7XG4gICAgICAgICAgZWwuc2VsZWN0ZWRJbmRleCA9IGk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNNdWx0aXBsZSkge1xuICAgIGVsLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZSAob3B0aW9uKSB7XG4gIHJldHVybiAnX3ZhbHVlJyBpbiBvcHRpb25cbiAgICA/IG9wdGlvbi5fdmFsdWVcbiAgICA6IG9wdGlvbi52YWx1ZVxufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uU3RhcnQgKGUpIHtcbiAgZS50YXJnZXQuY29tcG9zaW5nID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gb25Db21wb3NpdGlvbkVuZCAoZSkge1xuICAvLyBwcmV2ZW50IHRyaWdnZXJpbmcgYW4gaW5wdXQgZXZlbnQgZm9yIG5vIHJlYXNvblxuICBpZiAoIWUudGFyZ2V0LmNvbXBvc2luZykgeyByZXR1cm4gfVxuICBlLnRhcmdldC5jb21wb3NpbmcgPSBmYWxzZTtcbiAgdHJpZ2dlcihlLnRhcmdldCwgJ2lucHV0Jyk7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXIgKGVsLCB0eXBlKSB7XG4gIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcbiAgZS5pbml0RXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSk7XG4gIGVsLmRpc3BhdGNoRXZlbnQoZSk7XG59XG5cbi8qICAqL1xuXG4vLyByZWN1cnNpdmVseSBzZWFyY2ggZm9yIHBvc3NpYmxlIHRyYW5zaXRpb24gZGVmaW5lZCBpbnNpZGUgdGhlIGNvbXBvbmVudCByb290XG5mdW5jdGlvbiBsb2NhdGVOb2RlICh2bm9kZSkge1xuICByZXR1cm4gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiYgKCF2bm9kZS5kYXRhIHx8ICF2bm9kZS5kYXRhLnRyYW5zaXRpb24pXG4gICAgPyBsb2NhdGVOb2RlKHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZSlcbiAgICA6IHZub2RlXG59XG5cbnZhciBzaG93ID0ge1xuICBiaW5kOiBmdW5jdGlvbiBiaW5kIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcblxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24kJDEgPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICB2YXIgb3JpZ2luYWxEaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5ID1cbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyA/ICcnIDogZWwuc3R5bGUuZGlzcGxheTtcbiAgICBpZiAodmFsdWUgJiYgdHJhbnNpdGlvbiQkMSkge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBvcmlnaW5hbERpc3BsYXk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gb3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgIH1cbiAgfSxcblxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG4gICAgdmFyIG9sZFZhbHVlID0gcmVmLm9sZFZhbHVlO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHZhbHVlID09PSBvbGRWYWx1ZSkgeyByZXR1cm4gfVxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24kJDEgPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICBpZiAodHJhbnNpdGlvbiQkMSkge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGVhdmUodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gZWwuX192T3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgIH1cbiAgfSxcblxuICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCAoXG4gICAgZWwsXG4gICAgYmluZGluZyxcbiAgICB2bm9kZSxcbiAgICBvbGRWbm9kZSxcbiAgICBpc0Rlc3Ryb3lcbiAgKSB7XG4gICAgaWYgKCFpc0Rlc3Ryb3kpIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgcGxhdGZvcm1EaXJlY3RpdmVzID0ge1xuICBtb2RlbDogbW9kZWwkMSxcbiAgc2hvdzogc2hvd1xufTtcblxuLyogICovXG5cbi8vIFByb3ZpZGVzIHRyYW5zaXRpb24gc3VwcG9ydCBmb3IgYSBzaW5nbGUgZWxlbWVudC9jb21wb25lbnQuXG4vLyBzdXBwb3J0cyB0cmFuc2l0aW9uIG1vZGUgKG91dC1pbiAvIGluLW91dClcblxudmFyIHRyYW5zaXRpb25Qcm9wcyA9IHtcbiAgbmFtZTogU3RyaW5nLFxuICBhcHBlYXI6IEJvb2xlYW4sXG4gIGNzczogQm9vbGVhbixcbiAgbW9kZTogU3RyaW5nLFxuICB0eXBlOiBTdHJpbmcsXG4gIGVudGVyQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVDbGFzczogU3RyaW5nLFxuICBlbnRlclRvQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVUb0NsYXNzOiBTdHJpbmcsXG4gIGVudGVyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJDbGFzczogU3RyaW5nLFxuICBhcHBlYXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJUb0NsYXNzOiBTdHJpbmcsXG4gIGR1cmF0aW9uOiBbTnVtYmVyLCBTdHJpbmcsIE9iamVjdF1cbn07XG5cbi8vIGluIGNhc2UgdGhlIGNoaWxkIGlzIGFsc28gYW4gYWJzdHJhY3QgY29tcG9uZW50LCBlLmcuIDxrZWVwLWFsaXZlPlxuLy8gd2Ugd2FudCB0byByZWN1cnNpdmVseSByZXRyaWV2ZSB0aGUgcmVhbCBjb21wb25lbnQgdG8gYmUgcmVuZGVyZWRcbmZ1bmN0aW9uIGdldFJlYWxDaGlsZCAodm5vZGUpIHtcbiAgdmFyIGNvbXBPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgaWYgKGNvbXBPcHRpb25zICYmIGNvbXBPcHRpb25zLkN0b3Iub3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHJldHVybiBnZXRSZWFsQ2hpbGQoZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChjb21wT3B0aW9ucy5jaGlsZHJlbikpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdFRyYW5zaXRpb25EYXRhIChjb21wKSB7XG4gIHZhciBkYXRhID0ge307XG4gIHZhciBvcHRpb25zID0gY29tcC4kb3B0aW9ucztcbiAgLy8gcHJvcHNcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMucHJvcHNEYXRhKSB7XG4gICAgZGF0YVtrZXldID0gY29tcFtrZXldO1xuICB9XG4gIC8vIGV2ZW50cy5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMgYW5kIHBhc3MgdGhlbSBkaXJlY3RseSB0byB0aGUgdHJhbnNpdGlvbiBtZXRob2RzXG4gIHZhciBsaXN0ZW5lcnMgPSBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGZvciAodmFyIGtleSQxIGluIGxpc3RlbmVycykge1xuICAgIGRhdGFbY2FtZWxpemUoa2V5JDEpXSA9IGxpc3RlbmVyc1trZXkkMV07XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuZnVuY3Rpb24gcGxhY2Vob2xkZXIgKGgsIHJhd0NoaWxkKSB7XG4gIGlmICgvXFxkLWtlZXAtYWxpdmUkLy50ZXN0KHJhd0NoaWxkLnRhZykpIHtcbiAgICByZXR1cm4gaCgna2VlcC1hbGl2ZScsIHtcbiAgICAgIHByb3BzOiByYXdDaGlsZC5jb21wb25lbnRPcHRpb25zLnByb3BzRGF0YVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzUGFyZW50VHJhbnNpdGlvbiAodm5vZGUpIHtcbiAgd2hpbGUgKCh2bm9kZSA9IHZub2RlLnBhcmVudCkpIHtcbiAgICBpZiAodm5vZGUuZGF0YS50cmFuc2l0aW9uKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1NhbWVDaGlsZCAoY2hpbGQsIG9sZENoaWxkKSB7XG4gIHJldHVybiBvbGRDaGlsZC5rZXkgPT09IGNoaWxkLmtleSAmJiBvbGRDaGlsZC50YWcgPT09IGNoaWxkLnRhZ1xufVxuXG5mdW5jdGlvbiBpc0FzeW5jUGxhY2Vob2xkZXIgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuaXNDb21tZW50ICYmIG5vZGUuYXN5bmNGYWN0b3J5XG59XG5cbnZhciBUcmFuc2l0aW9uID0ge1xuICBuYW1lOiAndHJhbnNpdGlvbicsXG4gIHByb3BzOiB0cmFuc2l0aW9uUHJvcHMsXG4gIGFic3RyYWN0OiB0cnVlLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbjtcbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBmaWx0ZXIgb3V0IHRleHQgbm9kZXMgKHBvc3NpYmxlIHdoaXRlc3BhY2VzKVxuICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRhZyB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYyk7IH0pO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3YXJuIG11bHRpcGxlIGVsZW1lbnRzXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgd2FybihcbiAgICAgICAgJzx0cmFuc2l0aW9uPiBjYW4gb25seSBiZSB1c2VkIG9uIGEgc2luZ2xlIGVsZW1lbnQuIFVzZSAnICtcbiAgICAgICAgJzx0cmFuc2l0aW9uLWdyb3VwPiBmb3IgbGlzdHMuJyxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciBtb2RlID0gdGhpcy5tb2RlO1xuXG4gICAgLy8gd2FybiBpbnZhbGlkIG1vZGVcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgbW9kZSAmJiBtb2RlICE9PSAnaW4tb3V0JyAmJiBtb2RlICE9PSAnb3V0LWluJ1xuICAgICkge1xuICAgICAgd2FybihcbiAgICAgICAgJ2ludmFsaWQgPHRyYW5zaXRpb24+IG1vZGU6ICcgKyBtb2RlLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIHJhd0NoaWxkID0gY2hpbGRyZW5bMF07XG5cbiAgICAvLyBpZiB0aGlzIGlzIGEgY29tcG9uZW50IHJvb3Qgbm9kZSBhbmQgdGhlIGNvbXBvbmVudCdzXG4gICAgLy8gcGFyZW50IGNvbnRhaW5lciBub2RlIGFsc28gaGFzIHRyYW5zaXRpb24sIHNraXAuXG4gICAgaWYgKGhhc1BhcmVudFRyYW5zaXRpb24odGhpcy4kdm5vZGUpKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICAvLyBhcHBseSB0cmFuc2l0aW9uIGRhdGEgdG8gY2hpbGRcbiAgICAvLyB1c2UgZ2V0UmVhbENoaWxkKCkgdG8gaWdub3JlIGFic3RyYWN0IGNvbXBvbmVudHMgZS5nLiBrZWVwLWFsaXZlXG4gICAgdmFyIGNoaWxkID0gZ2V0UmVhbENoaWxkKHJhd0NoaWxkKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGVhdmluZykge1xuICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgIH1cblxuICAgIC8vIGVuc3VyZSBhIGtleSB0aGF0IGlzIHVuaXF1ZSB0byB0aGUgdm5vZGUgdHlwZSBhbmQgdG8gdGhpcyB0cmFuc2l0aW9uXG4gICAgLy8gY29tcG9uZW50IGluc3RhbmNlLiBUaGlzIGtleSB3aWxsIGJlIHVzZWQgdG8gcmVtb3ZlIHBlbmRpbmcgbGVhdmluZyBub2Rlc1xuICAgIC8vIGR1cmluZyBlbnRlcmluZy5cbiAgICB2YXIgaWQgPSBcIl9fdHJhbnNpdGlvbi1cIiArICh0aGlzLl91aWQpICsgXCItXCI7XG4gICAgY2hpbGQua2V5ID0gY2hpbGQua2V5ID09IG51bGxcbiAgICAgID8gY2hpbGQuaXNDb21tZW50XG4gICAgICAgID8gaWQgKyAnY29tbWVudCdcbiAgICAgICAgOiBpZCArIGNoaWxkLnRhZ1xuICAgICAgOiBpc1ByaW1pdGl2ZShjaGlsZC5rZXkpXG4gICAgICAgID8gKFN0cmluZyhjaGlsZC5rZXkpLmluZGV4T2YoaWQpID09PSAwID8gY2hpbGQua2V5IDogaWQgKyBjaGlsZC5rZXkpXG4gICAgICAgIDogY2hpbGQua2V5O1xuXG4gICAgdmFyIGRhdGEgPSAoY2hpbGQuZGF0YSB8fCAoY2hpbGQuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcbiAgICB2YXIgb2xkUmF3Q2hpbGQgPSB0aGlzLl92bm9kZTtcbiAgICB2YXIgb2xkQ2hpbGQgPSBnZXRSZWFsQ2hpbGQob2xkUmF3Q2hpbGQpO1xuXG4gICAgLy8gbWFyayB2LXNob3dcbiAgICAvLyBzbyB0aGF0IHRoZSB0cmFuc2l0aW9uIG1vZHVsZSBjYW4gaGFuZCBvdmVyIHRoZSBjb250cm9sIHRvIHRoZSBkaXJlY3RpdmVcbiAgICBpZiAoY2hpbGQuZGF0YS5kaXJlY3RpdmVzICYmIGNoaWxkLmRhdGEuZGlyZWN0aXZlcy5zb21lKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLm5hbWUgPT09ICdzaG93JzsgfSkpIHtcbiAgICAgIGNoaWxkLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgb2xkQ2hpbGQgJiZcbiAgICAgIG9sZENoaWxkLmRhdGEgJiZcbiAgICAgICFpc1NhbWVDaGlsZChjaGlsZCwgb2xkQ2hpbGQpICYmXG4gICAgICAhaXNBc3luY1BsYWNlaG9sZGVyKG9sZENoaWxkKVxuICAgICkge1xuICAgICAgLy8gcmVwbGFjZSBvbGQgY2hpbGQgdHJhbnNpdGlvbiBkYXRhIHdpdGggZnJlc2ggb25lXG4gICAgICAvLyBpbXBvcnRhbnQgZm9yIGR5bmFtaWMgdHJhbnNpdGlvbnMhXG4gICAgICB2YXIgb2xkRGF0YSA9IG9sZENoaWxkICYmIChvbGRDaGlsZC5kYXRhLnRyYW5zaXRpb24gPSBleHRlbmQoe30sIGRhdGEpKTtcbiAgICAgIC8vIGhhbmRsZSB0cmFuc2l0aW9uIG1vZGVcbiAgICAgIGlmIChtb2RlID09PSAnb3V0LWluJykge1xuICAgICAgICAvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcbiAgICAgICAgdGhpcy5fbGVhdmluZyA9IHRydWU7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdhZnRlckxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMkMS5fbGVhdmluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMkMS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2luLW91dCcpIHtcbiAgICAgICAgaWYgKGlzQXN5bmNQbGFjZWhvbGRlcihjaGlsZCkpIHtcbiAgICAgICAgICByZXR1cm4gb2xkUmF3Q2hpbGRcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsYXllZExlYXZlO1xuICAgICAgICB2YXIgcGVyZm9ybUxlYXZlID0gZnVuY3Rpb24gKCkgeyBkZWxheWVkTGVhdmUoKTsgfTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2FmdGVyRW50ZXInLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnZW50ZXJDYW5jZWxsZWQnLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnZGVsYXlMZWF2ZScsIGZ1bmN0aW9uIChsZWF2ZSkgeyBkZWxheWVkTGVhdmUgPSBsZWF2ZTsgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhd0NoaWxkXG4gIH1cbn07XG5cbi8qICAqL1xuXG4vLyBQcm92aWRlcyB0cmFuc2l0aW9uIHN1cHBvcnQgZm9yIGxpc3QgaXRlbXMuXG4vLyBzdXBwb3J0cyBtb3ZlIHRyYW5zaXRpb25zIHVzaW5nIHRoZSBGTElQIHRlY2huaXF1ZS5cblxuLy8gQmVjYXVzZSB0aGUgdmRvbSdzIGNoaWxkcmVuIHVwZGF0ZSBhbGdvcml0aG0gaXMgXCJ1bnN0YWJsZVwiIC0gaS5lLlxuLy8gaXQgZG9lc24ndCBndWFyYW50ZWUgdGhlIHJlbGF0aXZlIHBvc2l0aW9uaW5nIG9mIHJlbW92ZWQgZWxlbWVudHMsXG4vLyB3ZSBmb3JjZSB0cmFuc2l0aW9uLWdyb3VwIHRvIHVwZGF0ZSBpdHMgY2hpbGRyZW4gaW50byB0d28gcGFzc2VzOlxuLy8gaW4gdGhlIGZpcnN0IHBhc3MsIHdlIHJlbW92ZSBhbGwgbm9kZXMgdGhhdCBuZWVkIHRvIGJlIHJlbW92ZWQsXG4vLyB0cmlnZ2VyaW5nIHRoZWlyIGxlYXZpbmcgdHJhbnNpdGlvbjsgaW4gdGhlIHNlY29uZCBwYXNzLCB3ZSBpbnNlcnQvbW92ZVxuLy8gaW50byB0aGUgZmluYWwgZGVzaXJlZCBzdGF0ZS4gVGhpcyB3YXkgaW4gdGhlIHNlY29uZCBwYXNzIHJlbW92ZWRcbi8vIG5vZGVzIHdpbGwgcmVtYWluIHdoZXJlIHRoZXkgc2hvdWxkIGJlLlxuXG52YXIgcHJvcHMgPSBleHRlbmQoe1xuICB0YWc6IFN0cmluZyxcbiAgbW92ZUNsYXNzOiBTdHJpbmdcbn0sIHRyYW5zaXRpb25Qcm9wcyk7XG5cbmRlbGV0ZSBwcm9wcy5tb2RlO1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID0ge1xuICBwcm9wczogcHJvcHMsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGFnID0gdGhpcy50YWcgfHwgdGhpcy4kdm5vZGUuZGF0YS50YWcgfHwgJ3NwYW4nO1xuICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgdmFyIHJhd0NoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdCB8fCBbXTtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgdmFyIHRyYW5zaXRpb25EYXRhID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXdDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSByYXdDaGlsZHJlbltpXTtcbiAgICAgIGlmIChjLnRhZykge1xuICAgICAgICBpZiAoYy5rZXkgIT0gbnVsbCAmJiBTdHJpbmcoYy5rZXkpLmluZGV4T2YoJ19fdmxpc3QnKSAhPT0gMCkge1xuICAgICAgICAgIGNoaWxkcmVuLnB1c2goYyk7XG4gICAgICAgICAgbWFwW2Mua2V5XSA9IGNcbiAgICAgICAgICA7KGMuZGF0YSB8fCAoYy5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHZhciBvcHRzID0gYy5jb21wb25lbnRPcHRpb25zO1xuICAgICAgICAgIHZhciBuYW1lID0gb3B0cyA/IChvcHRzLkN0b3Iub3B0aW9ucy5uYW1lIHx8IG9wdHMudGFnIHx8ICcnKSA6IGMudGFnO1xuICAgICAgICAgIHdhcm4oKFwiPHRyYW5zaXRpb24tZ3JvdXA+IGNoaWxkcmVuIG11c3QgYmUga2V5ZWQ6IDxcIiArIG5hbWUgKyBcIj5cIikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByZXZDaGlsZHJlbikge1xuICAgICAgdmFyIGtlcHQgPSBbXTtcbiAgICAgIHZhciByZW1vdmVkID0gW107XG4gICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBwcmV2Q2hpbGRyZW4ubGVuZ3RoOyBpJDErKykge1xuICAgICAgICB2YXIgYyQxID0gcHJldkNoaWxkcmVuW2kkMV07XG4gICAgICAgIGMkMS5kYXRhLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgYyQxLmRhdGEucG9zID0gYyQxLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgaWYgKG1hcFtjJDEua2V5XSkge1xuICAgICAgICAgIGtlcHQucHVzaChjJDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlbW92ZWQucHVzaChjJDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmtlcHQgPSBoKHRhZywgbnVsbCwga2VwdCk7XG4gICAgICB0aGlzLnJlbW92ZWQgPSByZW1vdmVkO1xuICAgIH1cblxuICAgIHJldHVybiBoKHRhZywgbnVsbCwgY2hpbGRyZW4pXG4gIH0sXG5cbiAgYmVmb3JlVXBkYXRlOiBmdW5jdGlvbiBiZWZvcmVVcGRhdGUgKCkge1xuICAgIC8vIGZvcmNlIHJlbW92aW5nIHBhc3NcbiAgICB0aGlzLl9fcGF0Y2hfXyhcbiAgICAgIHRoaXMuX3Zub2RlLFxuICAgICAgdGhpcy5rZXB0LFxuICAgICAgZmFsc2UsIC8vIGh5ZHJhdGluZ1xuICAgICAgdHJ1ZSAvLyByZW1vdmVPbmx5ICghaW1wb3J0YW50LCBhdm9pZHMgdW5uZWNlc3NhcnkgbW92ZXMpXG4gICAgKTtcbiAgICB0aGlzLl92bm9kZSA9IHRoaXMua2VwdDtcbiAgfSxcblxuICB1cGRhdGVkOiBmdW5jdGlvbiB1cGRhdGVkICgpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbjtcbiAgICB2YXIgbW92ZUNsYXNzID0gdGhpcy5tb3ZlQ2xhc3MgfHwgKCh0aGlzLm5hbWUgfHwgJ3YnKSArICctbW92ZScpO1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoIHx8ICF0aGlzLmhhc01vdmUoY2hpbGRyZW5bMF0uZWxtLCBtb3ZlQ2xhc3MpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3ZSBkaXZpZGUgdGhlIHdvcmsgaW50byB0aHJlZSBsb29wcyB0byBhdm9pZCBtaXhpbmcgRE9NIHJlYWRzIGFuZCB3cml0ZXNcbiAgICAvLyBpbiBlYWNoIGl0ZXJhdGlvbiAtIHdoaWNoIGhlbHBzIHByZXZlbnQgbGF5b3V0IHRocmFzaGluZy5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKGNhbGxQZW5kaW5nQ2JzKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKHJlY29yZFBvc2l0aW9uKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKGFwcGx5VHJhbnNsYXRpb24pO1xuXG4gICAgLy8gZm9yY2UgcmVmbG93IHRvIHB1dCBldmVyeXRoaW5nIGluIHBvc2l0aW9uXG4gICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAgIHZhciBmID0gYm9keS5vZmZzZXRIZWlnaHQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIGlmIChjLmRhdGEubW92ZWQpIHtcbiAgICAgICAgdmFyIGVsID0gYy5lbG07XG4gICAgICAgIHZhciBzID0gZWwuc3R5bGU7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJyc7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBlbC5fbW92ZUNiID0gZnVuY3Rpb24gY2IgKGUpIHtcbiAgICAgICAgICBpZiAoIWUgfHwgL3RyYW5zZm9ybSQvLnRlc3QoZS5wcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgY2IpO1xuICAgICAgICAgICAgZWwuX21vdmVDYiA9IG51bGw7XG4gICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgaGFzTW92ZTogZnVuY3Rpb24gaGFzTW92ZSAoZWwsIG1vdmVDbGFzcykge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoIWhhc1RyYW5zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICh0aGlzLl9oYXNNb3ZlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYXNNb3ZlXG4gICAgICB9XG4gICAgICAvLyBEZXRlY3Qgd2hldGhlciBhbiBlbGVtZW50IHdpdGggdGhlIG1vdmUgY2xhc3MgYXBwbGllZCBoYXNcbiAgICAgIC8vIENTUyB0cmFuc2l0aW9ucy4gU2luY2UgdGhlIGVsZW1lbnQgbWF5IGJlIGluc2lkZSBhbiBlbnRlcmluZ1xuICAgICAgLy8gdHJhbnNpdGlvbiBhdCB0aGlzIHZlcnkgbW9tZW50LCB3ZSBtYWtlIGEgY2xvbmUgb2YgaXQgYW5kIHJlbW92ZVxuICAgICAgLy8gYWxsIG90aGVyIHRyYW5zaXRpb24gY2xhc3NlcyBhcHBsaWVkIHRvIGVuc3VyZSBvbmx5IHRoZSBtb3ZlIGNsYXNzXG4gICAgICAvLyBpcyBhcHBsaWVkLlxuICAgICAgdmFyIGNsb25lID0gZWwuY2xvbmVOb2RlKCk7XG4gICAgICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgICAgIGVsLl90cmFuc2l0aW9uQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uIChjbHMpIHsgcmVtb3ZlQ2xhc3MoY2xvbmUsIGNscyk7IH0pO1xuICAgICAgfVxuICAgICAgYWRkQ2xhc3MoY2xvbmUsIG1vdmVDbGFzcyk7XG4gICAgICBjbG9uZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgdGhpcy4kZWwuYXBwZW5kQ2hpbGQoY2xvbmUpO1xuICAgICAgdmFyIGluZm8gPSBnZXRUcmFuc2l0aW9uSW5mbyhjbG9uZSk7XG4gICAgICB0aGlzLiRlbC5yZW1vdmVDaGlsZChjbG9uZSk7XG4gICAgICByZXR1cm4gKHRoaXMuX2hhc01vdmUgPSBpbmZvLmhhc1RyYW5zZm9ybSlcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNhbGxQZW5kaW5nQ2JzIChjKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX21vdmVDYikge1xuICAgIGMuZWxtLl9tb3ZlQ2IoKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9lbnRlckNiKSB7XG4gICAgYy5lbG0uX2VudGVyQ2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWNvcmRQb3NpdGlvbiAoYykge1xuICBjLmRhdGEubmV3UG9zID0gYy5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5VHJhbnNsYXRpb24gKGMpIHtcbiAgdmFyIG9sZFBvcyA9IGMuZGF0YS5wb3M7XG4gIHZhciBuZXdQb3MgPSBjLmRhdGEubmV3UG9zO1xuICB2YXIgZHggPSBvbGRQb3MubGVmdCAtIG5ld1Bvcy5sZWZ0O1xuICB2YXIgZHkgPSBvbGRQb3MudG9wIC0gbmV3UG9zLnRvcDtcbiAgaWYgKGR4IHx8IGR5KSB7XG4gICAgYy5kYXRhLm1vdmVkID0gdHJ1ZTtcbiAgICB2YXIgcyA9IGMuZWxtLnN0eWxlO1xuICAgIHMudHJhbnNmb3JtID0gcy5XZWJraXRUcmFuc2Zvcm0gPSBcInRyYW5zbGF0ZShcIiArIGR4ICsgXCJweCxcIiArIGR5ICsgXCJweClcIjtcbiAgICBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwcyc7XG4gIH1cbn1cblxudmFyIHBsYXRmb3JtQ29tcG9uZW50cyA9IHtcbiAgVHJhbnNpdGlvbjogVHJhbnNpdGlvbixcbiAgVHJhbnNpdGlvbkdyb3VwOiBUcmFuc2l0aW9uR3JvdXBcbn07XG5cbi8qICAqL1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHNwZWNpZmljIHV0aWxzXG5WdWUkMy5jb25maWcubXVzdFVzZVByb3AgPSBtdXN0VXNlUHJvcDtcblZ1ZSQzLmNvbmZpZy5pc1Jlc2VydmVkVGFnID0gaXNSZXNlcnZlZFRhZztcblZ1ZSQzLmNvbmZpZy5pc1Jlc2VydmVkQXR0ciA9IGlzUmVzZXJ2ZWRBdHRyO1xuVnVlJDMuY29uZmlnLmdldFRhZ05hbWVzcGFjZSA9IGdldFRhZ05hbWVzcGFjZTtcblZ1ZSQzLmNvbmZpZy5pc1Vua25vd25FbGVtZW50ID0gaXNVbmtub3duRWxlbWVudDtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBydW50aW1lIGRpcmVjdGl2ZXMgJiBjb21wb25lbnRzXG5leHRlbmQoVnVlJDMub3B0aW9ucy5kaXJlY3RpdmVzLCBwbGF0Zm9ybURpcmVjdGl2ZXMpO1xuZXh0ZW5kKFZ1ZSQzLm9wdGlvbnMuY29tcG9uZW50cywgcGxhdGZvcm1Db21wb25lbnRzKTtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBwYXRjaCBmdW5jdGlvblxuVnVlJDMucHJvdG90eXBlLl9fcGF0Y2hfXyA9IGluQnJvd3NlciA/IHBhdGNoIDogbm9vcDtcblxuLy8gcHVibGljIG1vdW50IG1ldGhvZFxuVnVlJDMucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uIChcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIGVsID0gZWwgJiYgaW5Ccm93c2VyID8gcXVlcnkoZWwpIDogdW5kZWZpbmVkO1xuICByZXR1cm4gbW91bnRDb21wb25lbnQodGhpcywgZWwsIGh5ZHJhdGluZylcbn07XG5cbi8vIGRldnRvb2xzIGdsb2JhbCBob29rXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gIGlmIChjb25maWcuZGV2dG9vbHMpIHtcbiAgICBpZiAoZGV2dG9vbHMpIHtcbiAgICAgIGRldnRvb2xzLmVtaXQoJ2luaXQnLCBWdWUkMyk7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzQ2hyb21lKSB7XG4gICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgJ0Rvd25sb2FkIHRoZSBWdWUgRGV2dG9vbHMgZXh0ZW5zaW9uIGZvciBhIGJldHRlciBkZXZlbG9wbWVudCBleHBlcmllbmNlOlxcbicgK1xuICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1kZXZ0b29scydcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgY29uZmlnLnByb2R1Y3Rpb25UaXAgIT09IGZhbHNlICYmXG4gICAgaW5Ccm93c2VyICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJ1xuICApIHtcbiAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgIFwiWW91IGFyZSBydW5uaW5nIFZ1ZSBpbiBkZXZlbG9wbWVudCBtb2RlLlxcblwiICtcbiAgICAgIFwiTWFrZSBzdXJlIHRvIHR1cm4gb24gcHJvZHVjdGlvbiBtb2RlIHdoZW4gZGVwbG95aW5nIGZvciBwcm9kdWN0aW9uLlxcblwiICtcbiAgICAgIFwiU2VlIG1vcmUgdGlwcyBhdCBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9kZXBsb3ltZW50Lmh0bWxcIlxuICAgICk7XG4gIH1cbn0sIDApO1xuXG4vKiAgKi9cblxuZXhwb3J0IGRlZmF1bHQgVnVlJDM7XG4iLCIvKipcbiAqIFRlbXBsYXRlNyAxLjIuNVxuICogTW9iaWxlLWZpcnN0IEhUTUwgdGVtcGxhdGUgZW5naW5lXG4gKiBcbiAqIGh0dHA6Ly93d3cuaWRhbmdlcm8udXMvdGVtcGxhdGU3L1xuICogXG4gKiBDb3B5cmlnaHQgMjAxNywgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqIFRoZSBpRGFuZ2Vyby51c1xuICogaHR0cDovL3d3dy5pZGFuZ2Vyby51cy9cbiAqIFxuICogTGljZW5zZWQgdW5kZXIgTUlUXG4gKiBcbiAqIFJlbGVhc2VkIG9uOiBBdWd1c3QgMiwgMjAxN1xuICovXG5sZXQgdGVtcGxhdGU3Q29udGV4dDtcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICB0ZW1wbGF0ZTdDb250ZXh0ID0gd2luZG93O1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICB0ZW1wbGF0ZTdDb250ZXh0ID0gZ2xvYmFsO1xufSBlbHNlIHtcbiAgdGVtcGxhdGU3Q29udGV4dCA9IHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGlzQXJyYXkoYXJyKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5ID8gQXJyYXkuaXNBcnJheShhcnIpIDogT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5hcHBseShhcnIpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuZnVuY3Rpb24gaXNGdW5jdGlvbihmdW5jKSB7XG4gIHJldHVybiB0eXBlb2YgZnVuYyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmZ1bmN0aW9uIGVzY2FwZShzdHJpbmcpIHtcbiAgcmV0dXJuICh0eXBlb2YgdGVtcGxhdGU3Q29udGV4dCAhPT0gJ3VuZGVmaW5lZCcgJiYgdGVtcGxhdGU3Q29udGV4dC5lc2NhcGUgPyB0ZW1wbGF0ZTdDb250ZXh0LmVzY2FwZShzdHJpbmcpIDogc3RyaW5nKVxuICAgICAgICAucmVwbGFjZSgvJi9nLCAnJmFtcDsnKVxuICAgICAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAgICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn1cbmNvbnN0IHF1b3RlU2luZ2xlUmV4RXhwID0gbmV3IFJlZ0V4cCgnXFwnJywgJ2cnKTtcbmNvbnN0IHF1b3RlRG91YmxlUmV4RXhwID0gbmV3IFJlZ0V4cCgnXCInLCAnZycpO1xuZnVuY3Rpb24gaGVscGVyVG9TbGljZXMoc3RyaW5nKSB7XG4gIGNvbnN0IGhlbHBlclBhcnRzID0gc3RyaW5nLnJlcGxhY2UoL1t7fSN9XS9nLCAnJykuc3BsaXQoJyAnKTtcbiAgY29uc3Qgc2xpY2VzID0gW107XG4gIGxldCBzaGlmdEluZGV4O1xuICBsZXQgaTtcbiAgbGV0IGo7XG4gIGZvciAoaSA9IDA7IGkgPCBoZWxwZXJQYXJ0cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGxldCBwYXJ0ID0gaGVscGVyUGFydHNbaV07XG4gICAgbGV0IGJsb2NrUXVvdGVSZWdFeHA7XG4gICAgbGV0IG9wZW5pbmdRdW90ZTtcbiAgICBpZiAoaSA9PT0gMCkgc2xpY2VzLnB1c2gocGFydCk7XG4gICAgZWxzZSBpZiAocGFydC5pbmRleE9mKCdcIicpID09PSAwIHx8IHBhcnQuaW5kZXhPZignXFwnJykgPT09IDApIHtcbiAgICAgIGJsb2NrUXVvdGVSZWdFeHAgPSBwYXJ0LmluZGV4T2YoJ1wiJykgPT09IDAgPyBxdW90ZURvdWJsZVJleEV4cCA6IHF1b3RlU2luZ2xlUmV4RXhwO1xuICAgICAgb3BlbmluZ1F1b3RlID0gcGFydC5pbmRleE9mKCdcIicpID09PSAwID8gJ1wiJyA6ICdcXCcnO1xuICAgICAgLy8gUGxhaW4gU3RyaW5nXG4gICAgICBpZiAocGFydC5tYXRjaChibG9ja1F1b3RlUmVnRXhwKS5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgLy8gT25lIHdvcmQgc3RyaW5nXG4gICAgICAgIHNsaWNlcy5wdXNoKHBhcnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRmluZCBjbG9zZWQgSW5kZXhcbiAgICAgICAgc2hpZnRJbmRleCA9IDA7XG4gICAgICAgIGZvciAoaiA9IGkgKyAxOyBqIDwgaGVscGVyUGFydHMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICBwYXJ0ICs9IGAgJHtoZWxwZXJQYXJ0c1tqXX1gO1xuICAgICAgICAgIGlmIChoZWxwZXJQYXJ0c1tqXS5pbmRleE9mKG9wZW5pbmdRdW90ZSkgPj0gMCkge1xuICAgICAgICAgICAgc2hpZnRJbmRleCA9IGo7XG4gICAgICAgICAgICBzbGljZXMucHVzaChwYXJ0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hpZnRJbmRleCkgaSA9IHNoaWZ0SW5kZXg7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJ0LmluZGV4T2YoJz0nKSA+IDApIHtcbiAgICAgIC8vIEhhc2hcbiAgICAgIGNvbnN0IGhhc2hQYXJ0cyA9IHBhcnQuc3BsaXQoJz0nKTtcbiAgICAgIGNvbnN0IGhhc2hOYW1lID0gaGFzaFBhcnRzWzBdO1xuICAgICAgbGV0IGhhc2hDb250ZW50ID0gaGFzaFBhcnRzWzFdO1xuICAgICAgaWYgKCFibG9ja1F1b3RlUmVnRXhwKSB7XG4gICAgICAgIGJsb2NrUXVvdGVSZWdFeHAgPSBoYXNoQ29udGVudC5pbmRleE9mKCdcIicpID09PSAwID8gcXVvdGVEb3VibGVSZXhFeHAgOiBxdW90ZVNpbmdsZVJleEV4cDtcbiAgICAgICAgb3BlbmluZ1F1b3RlID0gaGFzaENvbnRlbnQuaW5kZXhPZignXCInKSA9PT0gMCA/ICdcIicgOiAnXFwnJztcbiAgICAgIH1cbiAgICAgIGlmIChoYXNoQ29udGVudC5tYXRjaChibG9ja1F1b3RlUmVnRXhwKS5sZW5ndGggIT09IDIpIHtcbiAgICAgICAgc2hpZnRJbmRleCA9IDA7XG4gICAgICAgIGZvciAoaiA9IGkgKyAxOyBqIDwgaGVscGVyUGFydHMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICBoYXNoQ29udGVudCArPSBgICR7aGVscGVyUGFydHNbal19YDtcbiAgICAgICAgICBpZiAoaGVscGVyUGFydHNbal0uaW5kZXhPZihvcGVuaW5nUXVvdGUpID49IDApIHtcbiAgICAgICAgICAgIHNoaWZ0SW5kZXggPSBqO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzaGlmdEluZGV4KSBpID0gc2hpZnRJbmRleDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGhhc2ggPSBbaGFzaE5hbWUsIGhhc2hDb250ZW50LnJlcGxhY2UoYmxvY2tRdW90ZVJlZ0V4cCwgJycpXTtcbiAgICAgIHNsaWNlcy5wdXNoKGhhc2gpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBQbGFpbiB2YXJpYWJsZVxuICAgICAgc2xpY2VzLnB1c2gocGFydCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzbGljZXM7XG59XG5mdW5jdGlvbiBzdHJpbmdUb0Jsb2NrcyhzdHJpbmcpIHtcbiAgY29uc3QgYmxvY2tzID0gW107XG4gIGxldCBpO1xuICBsZXQgajtcbiAgaWYgKCFzdHJpbmcpIHJldHVybiBbXTtcbiAgY29uc3Qgc3RyaW5nQmxvY2tzID0gc3RyaW5nLnNwbGl0KC8oe3tbXntefV0qfX0pLyk7XG4gIGZvciAoaSA9IDA7IGkgPCBzdHJpbmdCbG9ja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBibG9jayA9IHN0cmluZ0Jsb2Nrc1tpXTtcbiAgICBpZiAoYmxvY2sgPT09ICcnKSBjb250aW51ZTtcbiAgICBpZiAoYmxvY2suaW5kZXhPZigne3snKSA8IDApIHtcbiAgICAgIGJsb2Nrcy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ3BsYWluJyxcbiAgICAgICAgY29udGVudDogYmxvY2ssXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGJsb2NrLmluZGV4T2YoJ3svJykgPj0gMCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChibG9jay5pbmRleE9mKCd7IycpIDwgMCAmJiBibG9jay5pbmRleE9mKCcgJykgPCAwICYmIGJsb2NrLmluZGV4T2YoJ2Vsc2UnKSA8IDApIHtcbiAgICAgICAgLy8gU2ltcGxlIHZhcmlhYmxlXG4gICAgICAgIGJsb2Nrcy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiAndmFyaWFibGUnLFxuICAgICAgICAgIGNvbnRleHROYW1lOiBibG9jay5yZXBsYWNlKC9be31dL2csICcnKSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgLy8gSGVscGVyc1xuICAgICAgY29uc3QgaGVscGVyU2xpY2VzID0gaGVscGVyVG9TbGljZXMoYmxvY2spO1xuICAgICAgbGV0IGhlbHBlck5hbWUgPSBoZWxwZXJTbGljZXNbMF07XG4gICAgICBjb25zdCBpc1BhcnRpYWwgPSBoZWxwZXJOYW1lID09PSAnPic7XG4gICAgICBjb25zdCBoZWxwZXJDb250ZXh0ID0gW107XG4gICAgICBjb25zdCBoZWxwZXJIYXNoID0ge307XG4gICAgICBmb3IgKGogPSAxOyBqIDwgaGVscGVyU2xpY2VzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGNvbnN0IHNsaWNlID0gaGVscGVyU2xpY2VzW2pdO1xuICAgICAgICBpZiAoaXNBcnJheShzbGljZSkpIHtcbiAgICAgICAgICAvLyBIYXNoXG4gICAgICAgICAgaGVscGVySGFzaFtzbGljZVswXV0gPSBzbGljZVsxXSA9PT0gJ2ZhbHNlJyA/IGZhbHNlIDogc2xpY2VbMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGVscGVyQ29udGV4dC5wdXNoKHNsaWNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYmxvY2suaW5kZXhPZigneyMnKSA+PSAwKSB7XG4gICAgICAgIC8vIENvbmRpdGlvbi9IZWxwZXJcbiAgICAgICAgbGV0IGhlbHBlckNvbnRlbnQgPSAnJztcbiAgICAgICAgbGV0IGVsc2VDb250ZW50ID0gJyc7XG4gICAgICAgIGxldCB0b1NraXAgPSAwO1xuICAgICAgICBsZXQgc2hpZnRJbmRleDtcbiAgICAgICAgbGV0IGZvdW5kQ2xvc2VkID0gZmFsc2U7XG4gICAgICAgIGxldCBmb3VuZEVsc2UgPSBmYWxzZTtcbiAgICAgICAgbGV0IGRlcHRoID0gMDtcbiAgICAgICAgZm9yIChqID0gaSArIDE7IGogPCBzdHJpbmdCbG9ja3MubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICBpZiAoc3RyaW5nQmxvY2tzW2pdLmluZGV4T2YoJ3t7IycpID49IDApIHtcbiAgICAgICAgICAgIGRlcHRoICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzdHJpbmdCbG9ja3Nbal0uaW5kZXhPZigne3svJykgPj0gMCkge1xuICAgICAgICAgICAgZGVwdGggLT0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN0cmluZ0Jsb2Nrc1tqXS5pbmRleE9mKGB7eyMke2hlbHBlck5hbWV9YCkgPj0gMCkge1xuICAgICAgICAgICAgaGVscGVyQ29udGVudCArPSBzdHJpbmdCbG9ja3Nbal07XG4gICAgICAgICAgICBpZiAoZm91bmRFbHNlKSBlbHNlQ29udGVudCArPSBzdHJpbmdCbG9ja3Nbal07XG4gICAgICAgICAgICB0b1NraXAgKz0gMTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0cmluZ0Jsb2Nrc1tqXS5pbmRleE9mKGB7ey8ke2hlbHBlck5hbWV9YCkgPj0gMCkge1xuICAgICAgICAgICAgaWYgKHRvU2tpcCA+IDApIHtcbiAgICAgICAgICAgICAgdG9Ta2lwIC09IDE7XG4gICAgICAgICAgICAgIGhlbHBlckNvbnRlbnQgKz0gc3RyaW5nQmxvY2tzW2pdO1xuICAgICAgICAgICAgICBpZiAoZm91bmRFbHNlKSBlbHNlQ29udGVudCArPSBzdHJpbmdCbG9ja3Nbal07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzaGlmdEluZGV4ID0gajtcbiAgICAgICAgICAgICAgZm91bmRDbG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHN0cmluZ0Jsb2Nrc1tqXS5pbmRleE9mKCdlbHNlJykgPj0gMCAmJiBkZXB0aCA9PT0gMCkge1xuICAgICAgICAgICAgZm91bmRFbHNlID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFmb3VuZEVsc2UpIGhlbHBlckNvbnRlbnQgKz0gc3RyaW5nQmxvY2tzW2pdO1xuICAgICAgICAgICAgaWYgKGZvdW5kRWxzZSkgZWxzZUNvbnRlbnQgKz0gc3RyaW5nQmxvY2tzW2pdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZm91bmRDbG9zZWQpIHtcbiAgICAgICAgICBpZiAoc2hpZnRJbmRleCkgaSA9IHNoaWZ0SW5kZXg7XG4gICAgICAgICAgYmxvY2tzLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogJ2hlbHBlcicsXG4gICAgICAgICAgICBoZWxwZXJOYW1lLFxuICAgICAgICAgICAgY29udGV4dE5hbWU6IGhlbHBlckNvbnRleHQsXG4gICAgICAgICAgICBjb250ZW50OiBoZWxwZXJDb250ZW50LFxuICAgICAgICAgICAgaW52ZXJzZUNvbnRlbnQ6IGVsc2VDb250ZW50LFxuICAgICAgICAgICAgaGFzaDogaGVscGVySGFzaCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChibG9jay5pbmRleE9mKCcgJykgPiAwKSB7XG4gICAgICAgIGlmIChpc1BhcnRpYWwpIHtcbiAgICAgICAgICBoZWxwZXJOYW1lID0gJ19wYXJ0aWFsJztcbiAgICAgICAgICBpZiAoaGVscGVyQ29udGV4dFswXSkgaGVscGVyQ29udGV4dFswXSA9IGBcIiR7aGVscGVyQ29udGV4dFswXS5yZXBsYWNlKC9cInwnL2csICcnKX1cImA7XG4gICAgICAgIH1cbiAgICAgICAgYmxvY2tzLnB1c2goe1xuICAgICAgICAgIHR5cGU6ICdoZWxwZXInLFxuICAgICAgICAgIGhlbHBlck5hbWUsXG4gICAgICAgICAgY29udGV4dE5hbWU6IGhlbHBlckNvbnRleHQsXG4gICAgICAgICAgaGFzaDogaGVscGVySGFzaCxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBibG9ja3M7XG59XG5mdW5jdGlvbiBwYXJzZUpzVmFyaWFibGUoZXhwcmVzc2lvbiwgcmVwbGFjZSwgb2JqZWN0KSB7XG4gIHJldHVybiBleHByZXNzaW9uLnNwbGl0KC8oWysgLSovXl0pL2cpLm1hcCgocGFydCkgPT4ge1xuICAgIGlmIChwYXJ0LmluZGV4T2YocmVwbGFjZSkgPCAwKSByZXR1cm4gcGFydDtcbiAgICBpZiAoIW9iamVjdCkgcmV0dXJuIEpTT04uc3RyaW5naWZ5KCcnKTtcbiAgICBsZXQgdmFyaWFibGUgPSBvYmplY3Q7XG4gICAgaWYgKHBhcnQuaW5kZXhPZihgJHtyZXBsYWNlfS5gKSA+PSAwKSB7XG4gICAgICBwYXJ0LnNwbGl0KGAke3JlcGxhY2V9LmApWzFdLnNwbGl0KCcuJykuZm9yRWFjaCgocGFydE5hbWUpID0+IHtcbiAgICAgICAgaWYgKHZhcmlhYmxlW3BhcnROYW1lXSkgdmFyaWFibGUgPSB2YXJpYWJsZVtwYXJ0TmFtZV07XG4gICAgICAgIGVsc2UgdmFyaWFibGUgPSAndW5kZWZpbmVkJztcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFyaWFibGUpO1xuICB9KS5qb2luKCcnKTtcbn1cbmZ1bmN0aW9uIHBhcnNlSnNQYXJlbnRzKGV4cHJlc3Npb24sIHBhcmVudHMpIHtcbiAgcmV0dXJuIGV4cHJlc3Npb24uc3BsaXQoLyhbKyAtKl5dKS9nKS5tYXAoKHBhcnQpID0+IHtcbiAgICBpZiAocGFydC5pbmRleE9mKCcuLi8nKSA8IDApIHJldHVybiBwYXJ0O1xuICAgIGlmICghcGFyZW50cyB8fCBwYXJlbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIEpTT04uc3RyaW5naWZ5KCcnKTtcbiAgICBjb25zdCBsZXZlbHNVcCA9IHBhcnQuc3BsaXQoJy4uLycpLmxlbmd0aCAtIDE7XG4gICAgY29uc3QgcGFyZW50RGF0YSA9IGxldmVsc1VwID4gcGFyZW50cy5sZW5ndGggPyBwYXJlbnRzW3BhcmVudHMubGVuZ3RoIC0gMV0gOiBwYXJlbnRzW2xldmVsc1VwIC0gMV07XG5cbiAgICBsZXQgdmFyaWFibGUgPSBwYXJlbnREYXRhO1xuICAgIGNvbnN0IHBhcmVudFBhcnQgPSBwYXJ0LnJlcGxhY2UoLy4uXFwvL2csICcnKTtcbiAgICBwYXJlbnRQYXJ0LnNwbGl0KCcuJykuZm9yRWFjaCgocGFydE5hbWUpID0+IHtcbiAgICAgIGlmICh2YXJpYWJsZVtwYXJ0TmFtZV0pIHZhcmlhYmxlID0gdmFyaWFibGVbcGFydE5hbWVdO1xuICAgICAgZWxzZSB2YXJpYWJsZSA9ICd1bmRlZmluZWQnO1xuICAgIH0pO1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YXJpYWJsZSk7XG4gIH0pLmpvaW4oJycpO1xufVxuY2xhc3MgVGVtcGxhdGU3IHtcbiAgY29uc3RydWN0b3IodGVtcGxhdGUpIHtcbiAgICBjb25zdCB0ID0gdGhpcztcbiAgICB0LnRlbXBsYXRlID0gdGVtcGxhdGU7XG5cbiAgICBmdW5jdGlvbiBnZXRDb21waWxlVmFyKG5hbWUsIGN0eCwgZGF0YSA9ICdkYXRhXzEnKSB7XG4gICAgICBsZXQgdmFyaWFibGUgPSBjdHg7XG4gICAgICBsZXQgcGFydHM7XG4gICAgICBsZXQgbGV2ZWxzVXAgPSAwO1xuICAgICAgbGV0IG5ld0RlcHRoO1xuICAgICAgaWYgKG5hbWUuaW5kZXhPZignLi4vJykgPT09IDApIHtcbiAgICAgICAgbGV2ZWxzVXAgPSBuYW1lLnNwbGl0KCcuLi8nKS5sZW5ndGggLSAxO1xuICAgICAgICBuZXdEZXB0aCA9IHZhcmlhYmxlLnNwbGl0KCdfJylbMV0gLSBsZXZlbHNVcDtcbiAgICAgICAgdmFyaWFibGUgPSBgY3R4XyR7bmV3RGVwdGggPj0gMSA/IG5ld0RlcHRoIDogMX1gO1xuICAgICAgICBwYXJ0cyA9IG5hbWUuc3BsaXQoJy4uLycpW2xldmVsc1VwXS5zcGxpdCgnLicpO1xuICAgICAgfSBlbHNlIGlmIChuYW1lLmluZGV4T2YoJ0BnbG9iYWwnKSA9PT0gMCkge1xuICAgICAgICB2YXJpYWJsZSA9ICdUZW1wbGF0ZTcuZ2xvYmFsJztcbiAgICAgICAgcGFydHMgPSBuYW1lLnNwbGl0KCdAZ2xvYmFsLicpWzFdLnNwbGl0KCcuJyk7XG4gICAgICB9IGVsc2UgaWYgKG5hbWUuaW5kZXhPZignQHJvb3QnKSA9PT0gMCkge1xuICAgICAgICB2YXJpYWJsZSA9ICdyb290JztcbiAgICAgICAgcGFydHMgPSBuYW1lLnNwbGl0KCdAcm9vdC4nKVsxXS5zcGxpdCgnLicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFydHMgPSBuYW1lLnNwbGl0KCcuJyk7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IHBhcnQgPSBwYXJ0c1tpXTtcbiAgICAgICAgaWYgKHBhcnQuaW5kZXhPZignQCcpID09PSAwKSB7XG4gICAgICAgICAgbGV0IGRhdGFMZXZlbCA9IGRhdGEuc3BsaXQoJ18nKVsxXTtcbiAgICAgICAgICBpZiAobGV2ZWxzVXAgPiAwKSB7XG4gICAgICAgICAgICBkYXRhTGV2ZWwgPSBuZXdEZXB0aDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICB2YXJpYWJsZSArPSBgWyhkYXRhXyR7ZGF0YUxldmVsfSAmJiBkYXRhXyR7ZGF0YUxldmVsfS4ke3BhcnQucmVwbGFjZSgnQCcsICcnKX0pXWA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhcmlhYmxlID0gYChkYXRhXyR7ZGF0YUxldmVsfSAmJiBkYXRhXyR7ZGF0YUxldmVsfS4ke3BhcnQucmVwbGFjZSgnQCcsICcnKX0pYDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaXNGaW5pdGUocGFydCkpIHtcbiAgICAgICAgICB2YXJpYWJsZSArPSBgWyR7cGFydH1dYDtcbiAgICAgICAgfSBlbHNlIGlmIChwYXJ0ID09PSAndGhpcycgfHwgcGFydC5pbmRleE9mKCd0aGlzLicpID49IDAgfHwgcGFydC5pbmRleE9mKCd0aGlzWycpID49IDAgfHwgcGFydC5pbmRleE9mKCd0aGlzKCcpID49IDApIHtcbiAgICAgICAgICB2YXJpYWJsZSA9IHBhcnQucmVwbGFjZSgndGhpcycsIGN0eCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyaWFibGUgKz0gYC4ke3BhcnR9YDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHZhcmlhYmxlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRDb21waWxlZEFyZ3VtZW50cyhjb250ZXh0QXJyYXksIGN0eCwgZGF0YSkge1xuICAgICAgY29uc3QgYXJyID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRleHRBcnJheS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoL15bJ1wiXS8udGVzdChjb250ZXh0QXJyYXlbaV0pKSBhcnIucHVzaChjb250ZXh0QXJyYXlbaV0pO1xuICAgICAgICBlbHNlIGlmICgvXih0cnVlfGZhbHNlfFxcZCspJC8udGVzdChjb250ZXh0QXJyYXlbaV0pKSBhcnIucHVzaChjb250ZXh0QXJyYXlbaV0pO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBhcnIucHVzaChnZXRDb21waWxlVmFyKGNvbnRleHRBcnJheVtpXSwgY3R4LCBkYXRhKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFyci5qb2luKCcsICcpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21waWxlKHRlbXBsYXRlID0gdC50ZW1wbGF0ZSwgZGVwdGggPSAxKSB7XG4gICAgICBpZiAodHlwZW9mIHRlbXBsYXRlICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RlbXBsYXRlNzogVGVtcGxhdGUgbXVzdCBiZSBhIHN0cmluZycpO1xuICAgICAgfVxuICAgICAgY29uc3QgYmxvY2tzID0gc3RyaW5nVG9CbG9ja3ModGVtcGxhdGUpO1xuICAgICAgY29uc3QgY3R4ID0gYGN0eF8ke2RlcHRofWA7XG4gICAgICBjb25zdCBkYXRhID0gYGRhdGFfJHtkZXB0aH1gO1xuICAgICAgaWYgKGJsb2Nrcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGVtcHR5KCkgeyByZXR1cm4gJyc7IH07XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGdldENvbXBpbGVGbihibG9jaywgbmV3RGVwdGgpIHtcbiAgICAgICAgaWYgKGJsb2NrLmNvbnRlbnQpIHJldHVybiBjb21waWxlKGJsb2NrLmNvbnRlbnQsIG5ld0RlcHRoKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGVtcHR5KCkgeyByZXR1cm4gJyc7IH07XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBnZXRDb21waWxlSW52ZXJzZShibG9jaywgbmV3RGVwdGgpIHtcbiAgICAgICAgaWYgKGJsb2NrLmludmVyc2VDb250ZW50KSByZXR1cm4gY29tcGlsZShibG9jay5pbnZlcnNlQ29udGVudCwgbmV3RGVwdGgpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZW1wdHkoKSB7IHJldHVybiAnJzsgfTtcbiAgICAgIH1cblxuICAgICAgbGV0IHJlc3VsdFN0cmluZyA9ICcnO1xuICAgICAgaWYgKGRlcHRoID09PSAxKSB7XG4gICAgICAgIHJlc3VsdFN0cmluZyArPSBgKGZ1bmN0aW9uICgke2N0eH0sICR7ZGF0YX0sIHJvb3QpIHtcXG5gO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0U3RyaW5nICs9IGAoZnVuY3Rpb24gKCR7Y3R4fSwgJHtkYXRhfSkge1xcbmA7XG4gICAgICB9XG4gICAgICBpZiAoZGVwdGggPT09IDEpIHtcbiAgICAgICAgcmVzdWx0U3RyaW5nICs9ICdmdW5jdGlvbiBpc0FycmF5KGFycil7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuYXBwbHkoYXJyKSA9PT0gXFwnW29iamVjdCBBcnJheV1cXCc7fVxcbic7XG4gICAgICAgIHJlc3VsdFN0cmluZyArPSAnZnVuY3Rpb24gaXNGdW5jdGlvbihmdW5jKXtyZXR1cm4gKHR5cGVvZiBmdW5jID09PSBcXCdmdW5jdGlvblxcJyk7fVxcbic7XG4gICAgICAgIHJlc3VsdFN0cmluZyArPSAnZnVuY3Rpb24gYyh2YWwsIGN0eCkge2lmICh0eXBlb2YgdmFsICE9PSBcInVuZGVmaW5lZFwiICYmIHZhbCAhPT0gbnVsbCkge2lmIChpc0Z1bmN0aW9uKHZhbCkpIHtyZXR1cm4gdmFsLmNhbGwoY3R4KTt9IGVsc2UgcmV0dXJuIHZhbDt9IGVsc2UgcmV0dXJuIFwiXCI7fVxcbic7XG4gICAgICAgIHJlc3VsdFN0cmluZyArPSAncm9vdCA9IHJvb3QgfHwgY3R4XzEgfHwge307XFxuJztcbiAgICAgIH1cbiAgICAgIHJlc3VsdFN0cmluZyArPSAndmFyIHIgPSBcXCdcXCc7XFxuJztcbiAgICAgIGxldCBpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGJsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBibG9jayA9IGJsb2Nrc1tpXTtcbiAgICAgICAgLy8gUGxhaW4gYmxvY2tcbiAgICAgICAgaWYgKGJsb2NrLnR5cGUgPT09ICdwbGFpbicpIHtcbiAgICAgICAgICByZXN1bHRTdHJpbmcgKz0gYHIgKz0nJHsoYmxvY2suY29udGVudCkucmVwbGFjZSgvXFxyL2csICdcXFxccicpLnJlcGxhY2UoL1xcbi9nLCAnXFxcXG4nKS5yZXBsYWNlKC8nL2csICdcXFxcJyArICdcXCcnKX0nO2A7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHZhcmlhYmxlO1xuICAgICAgICBsZXQgY29tcGlsZWRBcmd1bWVudHM7XG4gICAgICAgIC8vIFZhcmlhYmxlIGJsb2NrXG4gICAgICAgIGlmIChibG9jay50eXBlID09PSAndmFyaWFibGUnKSB7XG4gICAgICAgICAgdmFyaWFibGUgPSBnZXRDb21waWxlVmFyKGJsb2NrLmNvbnRleHROYW1lLCBjdHgsIGRhdGEpO1xuICAgICAgICAgIHJlc3VsdFN0cmluZyArPSBgciArPSBjKCR7dmFyaWFibGV9LCAke2N0eH0pO2A7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSGVscGVycyBibG9ja1xuICAgICAgICBpZiAoYmxvY2sudHlwZSA9PT0gJ2hlbHBlcicpIHtcbiAgICAgICAgICBsZXQgcGFyZW50cztcbiAgICAgICAgICBpZiAoY3R4ICE9PSAnY3R4XzEnKSB7XG4gICAgICAgICAgICBjb25zdCBsZXZlbCA9IGN0eC5zcGxpdCgnXycpWzFdO1xuICAgICAgICAgICAgbGV0IHBhcmVudHNTdHJpbmcgPSBgY3R4XyR7bGV2ZWwgLSAxfWA7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gbGV2ZWwgLSAyOyBqID49IDE7IGogLT0gMSkge1xuICAgICAgICAgICAgICBwYXJlbnRzU3RyaW5nICs9IGAsIGN0eF8ke2p9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudHMgPSBgWyR7cGFyZW50c1N0cmluZ31dYDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyZW50cyA9IGBbJHtjdHh9XWA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChibG9jay5oZWxwZXJOYW1lIGluIHQuaGVscGVycykge1xuICAgICAgICAgICAgY29tcGlsZWRBcmd1bWVudHMgPSBnZXRDb21waWxlZEFyZ3VtZW50cyhibG9jay5jb250ZXh0TmFtZSwgY3R4LCBkYXRhKTtcbiAgICAgICAgICAgIHJlc3VsdFN0cmluZyArPSBgciArPSAoVGVtcGxhdGU3LmhlbHBlcnMuJHtibG9jay5oZWxwZXJOYW1lfSkuY2FsbCgke2N0eH0sICR7Y29tcGlsZWRBcmd1bWVudHMgJiYgKGAke2NvbXBpbGVkQXJndW1lbnRzfSwgYCl9e2hhc2g6JHtKU09OLnN0cmluZ2lmeShibG9jay5oYXNoKX0sIGRhdGE6ICR7ZGF0YX0gfHwge30sIGZuOiAke2dldENvbXBpbGVGbihibG9jaywgZGVwdGggKyAxKX0sIGludmVyc2U6ICR7Z2V0Q29tcGlsZUludmVyc2UoYmxvY2ssIGRlcHRoICsgMSl9LCByb290OiByb290LCBwYXJlbnRzOiAke3BhcmVudHN9fSk7YDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGJsb2NrLmNvbnRleHROYW1lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGVtcGxhdGU3OiBNaXNzaW5nIGhlbHBlcjogXCIke2Jsb2NrLmhlbHBlck5hbWV9XCJgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyaWFibGUgPSBnZXRDb21waWxlVmFyKGJsb2NrLmhlbHBlck5hbWUsIGN0eCwgZGF0YSk7XG4gICAgICAgICAgICByZXN1bHRTdHJpbmcgKz0gYGlmICgke3ZhcmlhYmxlfSkge2A7XG4gICAgICAgICAgICByZXN1bHRTdHJpbmcgKz0gYGlmIChpc0FycmF5KCR7dmFyaWFibGV9KSkge2A7XG4gICAgICAgICAgICByZXN1bHRTdHJpbmcgKz0gYHIgKz0gKFRlbXBsYXRlNy5oZWxwZXJzLmVhY2gpLmNhbGwoJHtjdHh9LCAke3ZhcmlhYmxlfSwge2hhc2g6JHtKU09OLnN0cmluZ2lmeShibG9jay5oYXNoKX0sIGRhdGE6ICR7ZGF0YX0gfHwge30sIGZuOiAke2dldENvbXBpbGVGbihibG9jaywgZGVwdGggKyAxKX0sIGludmVyc2U6ICR7Z2V0Q29tcGlsZUludmVyc2UoYmxvY2ssIGRlcHRoICsgMSl9LCByb290OiByb290LCBwYXJlbnRzOiAke3BhcmVudHN9fSk7YDtcbiAgICAgICAgICAgIHJlc3VsdFN0cmluZyArPSAnfWVsc2Ugeyc7XG4gICAgICAgICAgICByZXN1bHRTdHJpbmcgKz0gYHIgKz0gKFRlbXBsYXRlNy5oZWxwZXJzLndpdGgpLmNhbGwoJHtjdHh9LCAke3ZhcmlhYmxlfSwge2hhc2g6JHtKU09OLnN0cmluZ2lmeShibG9jay5oYXNoKX0sIGRhdGE6ICR7ZGF0YX0gfHwge30sIGZuOiAke2dldENvbXBpbGVGbihibG9jaywgZGVwdGggKyAxKX0sIGludmVyc2U6ICR7Z2V0Q29tcGlsZUludmVyc2UoYmxvY2ssIGRlcHRoICsgMSl9LCByb290OiByb290LCBwYXJlbnRzOiAke3BhcmVudHN9fSk7YDtcbiAgICAgICAgICAgIHJlc3VsdFN0cmluZyArPSAnfX0nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVzdWx0U3RyaW5nICs9ICdcXG5yZXR1cm4gcjt9KSc7XG4gICAgICByZXR1cm4gZXZhbC5jYWxsKHRlbXBsYXRlN0NvbnRleHQsIHJlc3VsdFN0cmluZyk7XG4gICAgfVxuICAgIHQuY29tcGlsZSA9IGZ1bmN0aW9uIF9jb21waWxlKHRlbXBsYXRlKSB7XG4gICAgICBpZiAoIXQuY29tcGlsZWQpIHtcbiAgICAgICAgdC5jb21waWxlZCA9IGNvbXBpbGUodGVtcGxhdGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHQuY29tcGlsZWQ7XG4gICAgfTtcbiAgfVxufVxuXG5UZW1wbGF0ZTcucHJvdG90eXBlID0ge1xuICBvcHRpb25zOiB7fSxcbiAgcGFydGlhbHM6IHt9LFxuICBoZWxwZXJzOiB7XG4gICAgX3BhcnRpYWwocGFydGlhbE5hbWUsIG9wdGlvbnMpIHtcbiAgICAgIGNvbnN0IHAgPSBUZW1wbGF0ZTcucHJvdG90eXBlLnBhcnRpYWxzW3BhcnRpYWxOYW1lXTtcbiAgICAgIGlmICghcCB8fCAocCAmJiAhcC50ZW1wbGF0ZSkpIHJldHVybiAnJztcbiAgICAgIGlmICghcC5jb21waWxlZCkge1xuICAgICAgICBwLmNvbXBpbGVkID0gbmV3IFRlbXBsYXRlNyhwLnRlbXBsYXRlKS5jb21waWxlKCk7XG4gICAgICB9XG4gICAgICBjb25zdCBjdHggPSB0aGlzO1xuICAgICAgZm9yIChjb25zdCBoYXNoTmFtZSBpbiBvcHRpb25zLmhhc2gpIHtcbiAgICAgICAgY3R4W2hhc2hOYW1lXSA9IG9wdGlvbnMuaGFzaFtoYXNoTmFtZV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcC5jb21waWxlZChjdHgsIG9wdGlvbnMuZGF0YSwgb3B0aW9ucy5yb290KTtcbiAgICB9LFxuICAgIGVzY2FwZShjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgICBpZiAodHlwZW9mIGNvbnRleHQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGVtcGxhdGU3OiBQYXNzZWQgY29udGV4dCB0byBcImVzY2FwZVwiIGhlbHBlciBzaG91bGQgYmUgYSBzdHJpbmcnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlc2NhcGUoY29udGV4dCk7XG4gICAgfSxcbiAgICBpZihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgICBsZXQgY3R4ID0gY29udGV4dDtcbiAgICAgIGlmIChpc0Z1bmN0aW9uKGN0eCkpIHsgY3R4ID0gY3R4LmNhbGwodGhpcyk7IH1cbiAgICAgIGlmIChjdHgpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMuZm4odGhpcywgb3B0aW9ucy5kYXRhKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZSh0aGlzLCBvcHRpb25zLmRhdGEpO1xuICAgIH0sXG4gICAgdW5sZXNzKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICAgIGxldCBjdHggPSBjb250ZXh0O1xuICAgICAgaWYgKGlzRnVuY3Rpb24oY3R4KSkgeyBjdHggPSBjdHguY2FsbCh0aGlzKTsgfVxuICAgICAgaWYgKCFjdHgpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMuZm4odGhpcywgb3B0aW9ucy5kYXRhKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZSh0aGlzLCBvcHRpb25zLmRhdGEpO1xuICAgIH0sXG4gICAgZWFjaChjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgICBsZXQgY3R4ID0gY29udGV4dDtcbiAgICAgIGxldCByZXQgPSAnJztcbiAgICAgIGxldCBpID0gMDtcbiAgICAgIGlmIChpc0Z1bmN0aW9uKGN0eCkpIHsgY3R4ID0gY3R4LmNhbGwodGhpcyk7IH1cbiAgICAgIGlmIChpc0FycmF5KGN0eCkpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzaC5yZXZlcnNlKSB7XG4gICAgICAgICAgY3R4ID0gY3R4LnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY3R4Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgcmV0ICs9IG9wdGlvbnMuZm4oY3R4W2ldLCB7IGZpcnN0OiBpID09PSAwLCBsYXN0OiBpID09PSBjdHgubGVuZ3RoIC0gMSwgaW5kZXg6IGkgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzaC5yZXZlcnNlKSB7XG4gICAgICAgICAgY3R4ID0gY3R4LnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gY3R4KSB7XG4gICAgICAgICAgaSArPSAxO1xuICAgICAgICAgIHJldCArPSBvcHRpb25zLmZuKGN0eFtrZXldLCB7IGtleSB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGkgPiAwKSByZXR1cm4gcmV0O1xuICAgICAgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcbiAgICB9LFxuICAgIHdpdGgoY29udGV4dCwgb3B0aW9ucykge1xuICAgICAgbGV0IGN0eCA9IGNvbnRleHQ7XG4gICAgICBpZiAoaXNGdW5jdGlvbihjdHgpKSB7IGN0eCA9IGNvbnRleHQuY2FsbCh0aGlzKTsgfVxuICAgICAgcmV0dXJuIG9wdGlvbnMuZm4oY3R4KTtcbiAgICB9LFxuICAgIGpvaW4oY29udGV4dCwgb3B0aW9ucykge1xuICAgICAgbGV0IGN0eCA9IGNvbnRleHQ7XG4gICAgICBpZiAoaXNGdW5jdGlvbihjdHgpKSB7IGN0eCA9IGN0eC5jYWxsKHRoaXMpOyB9XG4gICAgICByZXR1cm4gY3R4LmpvaW4ob3B0aW9ucy5oYXNoLmRlbGltaXRlciB8fCBvcHRpb25zLmhhc2guZGVsaW1ldGVyKTtcbiAgICB9LFxuICAgIGpzKGV4cHJlc3Npb24sIG9wdGlvbnMpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBvcHRpb25zLmRhdGE7XG4gICAgICBsZXQgZnVuYztcbiAgICAgIGxldCBleGVjdXRlID0gZXhwcmVzc2lvbjtcbiAgICAgICgnaW5kZXggZmlyc3QgbGFzdCBrZXknKS5zcGxpdCgnICcpLmZvckVhY2goKHByb3ApID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGNvbnN0IHJlMSA9IG5ldyBSZWdFeHAoYHRoaXMuQCR7cHJvcH1gLCAnZycpO1xuICAgICAgICAgIGNvbnN0IHJlMiA9IG5ldyBSZWdFeHAoYEAke3Byb3B9YCwgJ2cnKTtcbiAgICAgICAgICBleGVjdXRlID0gZXhlY3V0ZVxuICAgICAgICAgICAgLnJlcGxhY2UocmUxLCBKU09OLnN0cmluZ2lmeShkYXRhW3Byb3BdKSlcbiAgICAgICAgICAgIC5yZXBsYWNlKHJlMiwgSlNPTi5zdHJpbmdpZnkoZGF0YVtwcm9wXSkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChvcHRpb25zLnJvb3QgJiYgZXhlY3V0ZS5pbmRleE9mKCdAcm9vdCcpID49IDApIHtcbiAgICAgICAgZXhlY3V0ZSA9IHBhcnNlSnNWYXJpYWJsZShleGVjdXRlLCAnQHJvb3QnLCBvcHRpb25zLnJvb3QpO1xuICAgICAgfVxuICAgICAgaWYgKGV4ZWN1dGUuaW5kZXhPZignQGdsb2JhbCcpID49IDApIHtcbiAgICAgICAgZXhlY3V0ZSA9IHBhcnNlSnNWYXJpYWJsZShleGVjdXRlLCAnQGdsb2JhbCcsIHRlbXBsYXRlN0NvbnRleHQuVGVtcGxhdGU3Lmdsb2JhbCk7XG4gICAgICB9XG4gICAgICBpZiAoZXhlY3V0ZS5pbmRleE9mKCcuLi8nKSA+PSAwKSB7XG4gICAgICAgIGV4ZWN1dGUgPSBwYXJzZUpzUGFyZW50cyhleGVjdXRlLCBvcHRpb25zLnBhcmVudHMpO1xuICAgICAgfVxuICAgICAgaWYgKGV4ZWN1dGUuaW5kZXhPZigncmV0dXJuJykgPj0gMCkge1xuICAgICAgICBmdW5jID0gYChmdW5jdGlvbigpeyR7ZXhlY3V0ZX19KWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmdW5jID0gYChmdW5jdGlvbigpe3JldHVybiAoJHtleGVjdXRlfSl9KWA7XG4gICAgICB9XG4gICAgICByZXR1cm4gZXZhbC5jYWxsKHRoaXMsIGZ1bmMpLmNhbGwodGhpcyk7XG4gICAgfSxcbiAgICBqc19pZihleHByZXNzaW9uLCBvcHRpb25zKSB7XG4gICAgICBjb25zdCBkYXRhID0gb3B0aW9ucy5kYXRhO1xuICAgICAgbGV0IGZ1bmM7XG4gICAgICBsZXQgZXhlY3V0ZSA9IGV4cHJlc3Npb247XG4gICAgICAoJ2luZGV4IGZpcnN0IGxhc3Qga2V5Jykuc3BsaXQoJyAnKS5mb3JFYWNoKChwcm9wKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YVtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBjb25zdCByZTEgPSBuZXcgUmVnRXhwKGB0aGlzLkAke3Byb3B9YCwgJ2cnKTtcbiAgICAgICAgICBjb25zdCByZTIgPSBuZXcgUmVnRXhwKGBAJHtwcm9wfWAsICdnJyk7XG4gICAgICAgICAgZXhlY3V0ZSA9IGV4ZWN1dGVcbiAgICAgICAgICAgIC5yZXBsYWNlKHJlMSwgSlNPTi5zdHJpbmdpZnkoZGF0YVtwcm9wXSkpXG4gICAgICAgICAgICAucmVwbGFjZShyZTIsIEpTT04uc3RyaW5naWZ5KGRhdGFbcHJvcF0pKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAob3B0aW9ucy5yb290ICYmIGV4ZWN1dGUuaW5kZXhPZignQHJvb3QnKSA+PSAwKSB7XG4gICAgICAgIGV4ZWN1dGUgPSBwYXJzZUpzVmFyaWFibGUoZXhlY3V0ZSwgJ0Byb290Jywgb3B0aW9ucy5yb290KTtcbiAgICAgIH1cbiAgICAgIGlmIChleGVjdXRlLmluZGV4T2YoJ0BnbG9iYWwnKSA+PSAwKSB7XG4gICAgICAgIGV4ZWN1dGUgPSBwYXJzZUpzVmFyaWFibGUoZXhlY3V0ZSwgJ0BnbG9iYWwnLCBUZW1wbGF0ZTcuZ2xvYmFsKTtcbiAgICAgIH1cbiAgICAgIGlmIChleGVjdXRlLmluZGV4T2YoJy4uLycpID49IDApIHtcbiAgICAgICAgZXhlY3V0ZSA9IHBhcnNlSnNQYXJlbnRzKGV4ZWN1dGUsIG9wdGlvbnMucGFyZW50cyk7XG4gICAgICB9XG4gICAgICBpZiAoZXhlY3V0ZS5pbmRleE9mKCdyZXR1cm4nKSA+PSAwKSB7XG4gICAgICAgIGZ1bmMgPSBgKGZ1bmN0aW9uKCl7JHtleGVjdXRlfX0pYDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZ1bmMgPSBgKGZ1bmN0aW9uKCl7cmV0dXJuICgke2V4ZWN1dGV9KX0pYDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNvbmRpdGlvbiA9IGV2YWwuY2FsbCh0aGlzLCBmdW5jKS5jYWxsKHRoaXMpO1xuICAgICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5mbih0aGlzLCBvcHRpb25zLmRhdGEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb3B0aW9ucy5pbnZlcnNlKHRoaXMsIG9wdGlvbnMuZGF0YSk7XG4gICAgfSxcbiAgfSxcbn07XG5UZW1wbGF0ZTcucHJvdG90eXBlLmhlbHBlcnMuanNfY29tcGFyZSA9IFRlbXBsYXRlNy5wcm90b3R5cGUuaGVscGVycy5qc19pZjtcbmZ1bmN0aW9uIHQ3KHRlbXBsYXRlLCBkYXRhKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgbGV0IGluc3RhbmNlID0gbmV3IFRlbXBsYXRlNyh0ZW1wbGF0ZSk7XG4gICAgY29uc3QgcmVuZGVyZWQgPSBpbnN0YW5jZS5jb21waWxlKCkoZGF0YSk7XG4gICAgaW5zdGFuY2UgPSBudWxsO1xuICAgIHJldHVybiAocmVuZGVyZWQpO1xuICB9XG4gIHJldHVybiBuZXcgVGVtcGxhdGU3KHRlbXBsYXRlKTtcbn1cbnQ3LnJlZ2lzdGVySGVscGVyID0gZnVuY3Rpb24gcmVnaXN0ZXJIZWxwZXIobmFtZSwgZm4pIHtcbiAgVGVtcGxhdGU3LnByb3RvdHlwZS5oZWxwZXJzW25hbWVdID0gZm47XG59O1xudDcudW5yZWdpc3RlckhlbHBlciA9IGZ1bmN0aW9uIHVucmVnaXN0ZXJIZWxwZXIobmFtZSkge1xuICBUZW1wbGF0ZTcucHJvdG90eXBlLmhlbHBlcnNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gIGRlbGV0ZSBUZW1wbGF0ZTcucHJvdG90eXBlLmhlbHBlcnNbbmFtZV07XG59O1xudDcucmVnaXN0ZXJQYXJ0aWFsID0gZnVuY3Rpb24gcmVnaXN0ZXJQYXJ0aWFsKG5hbWUsIHRlbXBsYXRlKSB7XG4gIFRlbXBsYXRlNy5wcm90b3R5cGUucGFydGlhbHNbbmFtZV0gPSB7IHRlbXBsYXRlIH07XG59O1xudDcudW5yZWdpc3RlclBhcnRpYWwgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyUGFydGlhbChuYW1lKSB7XG4gIGlmIChUZW1wbGF0ZTcucHJvdG90eXBlLnBhcnRpYWxzW25hbWVdKSB7XG4gICAgVGVtcGxhdGU3LnByb3RvdHlwZS5wYXJ0aWFsc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICBkZWxldGUgVGVtcGxhdGU3LnByb3RvdHlwZS5wYXJ0aWFsc1tuYW1lXTtcbiAgfVxufTtcbnQ3LmNvbXBpbGUgPSBmdW5jdGlvbiBjb21waWxlKHRlbXBsYXRlLCBvcHRpb25zKSB7XG4gIGNvbnN0IGluc3RhbmNlID0gbmV3IFRlbXBsYXRlNyh0ZW1wbGF0ZSwgb3B0aW9ucyk7XG4gIHJldHVybiBpbnN0YW5jZS5jb21waWxlKCk7XG59O1xuXG50Ny5vcHRpb25zID0gVGVtcGxhdGU3LnByb3RvdHlwZS5vcHRpb25zO1xudDcuaGVscGVycyA9IFRlbXBsYXRlNy5wcm90b3R5cGUuaGVscGVycztcbnQ3LnBhcnRpYWxzID0gVGVtcGxhdGU3LnByb3RvdHlwZS5wYXJ0aWFscztcblxuZXhwb3J0IGRlZmF1bHQgdDc7XG4iLCIvKipcbiAqIERvbTcgMS43LjJcbiAqIE1pbmltYWxpc3RpYyBKYXZhU2NyaXB0IGxpYnJhcnkgZm9yIERPTSBtYW5pcHVsYXRpb24sIHdpdGggYSBqUXVlcnktY29tcGF0aWJsZSBBUElcbiAqIGh0dHA6Ly9mcmFtZXdvcms3LmlvL2RvY3MvZG9tLmh0bWxcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNywgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqIFRoZSBpRGFuZ2Vyby51c1xuICogaHR0cDovL3d3dy5pZGFuZ2Vyby51cy9cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciBNSVRcbiAqXG4gKiBSZWxlYXNlZCBvbjogU2VwdGVtYmVyIDcsIDIwMTdcbiAqL1xuY2xhc3MgRG9tNyB7XG4gIGNvbnN0cnVjdG9yKGFycikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIC8vIENyZWF0ZSBhcnJheS1saWtlIG9iamVjdFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBzZWxmW2ldID0gYXJyW2ldO1xuICAgIH1cbiAgICBzZWxmLmxlbmd0aCA9IGFyci5sZW5ndGg7XG4gICAgLy8gUmV0dXJuIGNvbGxlY3Rpb24gd2l0aCBtZXRob2RzXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuZnVuY3Rpb24gJCQxKHNlbGVjdG9yLCBjb250ZXh0KSB7XG4gIGNvbnN0IGFyciA9IFtdO1xuICBsZXQgaSA9IDA7XG4gIGlmIChzZWxlY3RvciAmJiAhY29udGV4dCkge1xuICAgIGlmIChzZWxlY3RvciBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICAgIHJldHVybiBzZWxlY3RvcjtcbiAgICB9XG4gIH1cbiAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAvLyBTdHJpbmdcbiAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgICAgbGV0IGVscztcbiAgICAgIGxldCB0ZW1wUGFyZW50O1xuICAgICAgY29uc3QgaHRtbCA9IHNlbGVjdG9yLnRyaW0oKTtcbiAgICAgIGlmIChodG1sLmluZGV4T2YoJzwnKSA+PSAwICYmIGh0bWwuaW5kZXhPZignPicpID49IDApIHtcbiAgICAgICAgbGV0IHRvQ3JlYXRlID0gJ2Rpdic7XG4gICAgICAgIGlmIChodG1sLmluZGV4T2YoJzxsaScpID09PSAwKSB0b0NyZWF0ZSA9ICd1bCc7XG4gICAgICAgIGlmIChodG1sLmluZGV4T2YoJzx0cicpID09PSAwKSB0b0NyZWF0ZSA9ICd0Ym9keSc7XG4gICAgICAgIGlmIChodG1sLmluZGV4T2YoJzx0ZCcpID09PSAwIHx8IGh0bWwuaW5kZXhPZignPHRoJykgPT09IDApIHRvQ3JlYXRlID0gJ3RyJztcbiAgICAgICAgaWYgKGh0bWwuaW5kZXhPZignPHRib2R5JykgPT09IDApIHRvQ3JlYXRlID0gJ3RhYmxlJztcbiAgICAgICAgaWYgKGh0bWwuaW5kZXhPZignPG9wdGlvbicpID09PSAwKSB0b0NyZWF0ZSA9ICdzZWxlY3QnO1xuICAgICAgICB0ZW1wUGFyZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0b0NyZWF0ZSk7XG4gICAgICAgIHRlbXBQYXJlbnQuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRlbXBQYXJlbnQuY2hpbGROb2Rlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGFyci5wdXNoKHRlbXBQYXJlbnQuY2hpbGROb2Rlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghY29udGV4dCAmJiBzZWxlY3RvclswXSA9PT0gJyMnICYmICFzZWxlY3Rvci5tYXRjaCgvWyAuPD46fl0vKSkge1xuICAgICAgICAgIC8vIFB1cmUgSUQgc2VsZWN0b3JcbiAgICAgICAgICBlbHMgPSBbZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2VsZWN0b3IudHJpbSgpLnNwbGl0KCcjJylbMV0pXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlciBzZWxlY3RvcnNcbiAgICAgICAgICBlbHMgPSAoY29udGV4dCB8fCBkb2N1bWVudCkucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvci50cmltKCkpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBlbHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBpZiAoZWxzW2ldKSBhcnIucHVzaChlbHNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzZWxlY3Rvci5ub2RlVHlwZSB8fCBzZWxlY3RvciA9PT0gd2luZG93IHx8IHNlbGVjdG9yID09PSBkb2N1bWVudCkge1xuICAgICAgLy8gTm9kZS9lbGVtZW50XG4gICAgICBhcnIucHVzaChzZWxlY3Rvcik7XG4gICAgfSBlbHNlIGlmIChzZWxlY3Rvci5sZW5ndGggPiAwICYmIHNlbGVjdG9yWzBdLm5vZGVUeXBlKSB7XG4gICAgICAvLyBBcnJheSBvZiBlbGVtZW50cyBvciBpbnN0YW5jZSBvZiBEb21cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzZWxlY3Rvci5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBhcnIucHVzaChzZWxlY3RvcltpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgRG9tNyhhcnIpO1xufVxuXG4kJDEuZm4gPSBEb203LnByb3RvdHlwZTtcbiQkMS5DbGFzcyA9IERvbTc7XG5cbiQkMS51c2UgPSBmdW5jdGlvbiB1c2UoLi4uYXJncykge1xuICBhcmdzLmZvckVhY2goKG1ldGhvZHMpID0+IHtcbiAgICBjb25zdCBpc1V0aWxzID0gJ19fdXRpbHMnIGluIG1ldGhvZHM7XG4gICAgT2JqZWN0LmtleXMobWV0aG9kcykuZm9yRWFjaCgobWV0aG9kTmFtZSkgPT4ge1xuICAgICAgaWYgKG1ldGhvZE5hbWUgPT09ICdfX3V0aWxzJykgcmV0dXJuO1xuICAgICAgaWYgKGlzVXRpbHMpIHtcbiAgICAgICAgJCQxW21ldGhvZE5hbWVdID0gbWV0aG9kc1ttZXRob2ROYW1lXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQkMS5mblttZXRob2ROYW1lXSA9IG1ldGhvZHNbbWV0aG9kTmFtZV07XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTtcblxuZnVuY3Rpb24gcGFyc2VVcmxRdWVyeSh1cmwpIHtcbiAgY29uc3QgcXVlcnkgPSB7fTtcbiAgbGV0IHVybFRvUGFyc2UgPSB1cmwgfHwgd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIGxldCBpO1xuICBsZXQgcGFyYW1zO1xuICBsZXQgcGFyYW07XG4gIGxldCBsZW5ndGg7XG4gIGlmICh0eXBlb2YgdXJsVG9QYXJzZSA9PT0gJ3N0cmluZycgJiYgdXJsVG9QYXJzZS5sZW5ndGgpIHtcbiAgICB1cmxUb1BhcnNlID0gdXJsVG9QYXJzZS5pbmRleE9mKCc/JykgPiAtMSA/IHVybFRvUGFyc2UucmVwbGFjZSgvXFxTKlxcPy8sICcnKSA6ICcnO1xuICAgIHBhcmFtcyA9IHVybFRvUGFyc2Uuc3BsaXQoJyYnKS5maWx0ZXIocGFyYW1zUGFydCA9PiBwYXJhbXNQYXJ0ICE9PSAnJyk7XG4gICAgbGVuZ3RoID0gcGFyYW1zLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgcGFyYW0gPSBwYXJhbXNbaV0ucmVwbGFjZSgvI1xcUysvZywgJycpLnNwbGl0KCc9Jyk7XG4gICAgICBxdWVyeVtkZWNvZGVVUklDb21wb25lbnQocGFyYW1bMF0pXSA9IHR5cGVvZiBwYXJhbVsxXSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBkZWNvZGVVUklDb21wb25lbnQocGFyYW1bMV0pIHx8ICcnO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcXVlcnk7XG59XG5mdW5jdGlvbiBpc0FycmF5KGFycikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShhcnIpO1xufVxuZnVuY3Rpb24gZWFjaChvYmosIGNhbGxiYWNrKSB7XG4gIC8vIENoZWNrIGl0J3MgaXRlcmFibGVcbiAgLy8gVE9ETzogU2hvdWxkIHByb2JhYmx5IHJhaXNlIGEgdmFsdWUgZXJyb3IgaGVyZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHJldHVybjtcbiAgLy8gRG9uJ3QgYm90aGVyIGNvbnRpbnVpbmcgd2l0aG91dCBhIGNhbGxiYWNrXG4gIGlmICghY2FsbGJhY2spIHJldHVybjtcbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBEb203KSB7XG4gICAgLy8gQXJyYXlcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgLy8gSWYgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICAgICAgaWYgKGNhbGxiYWNrKGksIG9ialtpXSkgPT09IGZhbHNlKSB7XG4gICAgICAgIC8vIEJyZWFrIG91dCBvZiB0aGUgbG9vcFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIE9iamVjdFxuICAgIGZvciAobGV0IHByb3AgaW4gb2JqKSB7XG4gICAgICAvLyBDaGVjayB0aGUgcHJvcGVydGllIGJlbG9uZ3MgdG8gdGhlIG9iamVjdFxuICAgICAgLy8gbm90IGl0J3MgcHJvdG90eXBlXG4gICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgIC8vIElmIHRoZSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gICAgICAgIGlmIChjYWxsYmFjayhwcm9wLCBvYmpbcHJvcF0pID09PSBmYWxzZSkge1xuICAgICAgICAgIC8vIEJyZWFrIG91dCBvZiB0aGUgbG9vcDtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHVuaXF1ZShhcnIpIHtcbiAgY29uc3QgdW5pcXVlQXJyYXkgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodW5pcXVlQXJyYXkuaW5kZXhPZihhcnJbaV0pID09PSAtMSkgdW5pcXVlQXJyYXkucHVzaChhcnJbaV0pO1xuICB9XG4gIHJldHVybiB1bmlxdWVBcnJheTtcbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZU9iamVjdChvYmosIHBhcmVudHMgPSBbXSkge1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHJldHVybiBvYmo7XG4gIGNvbnN0IHJlc3VsdEFycmF5ID0gW107XG4gIGNvbnN0IHNlcGFyYXRvciA9ICcmJztcbiAgbGV0IG5ld1BhcmVudHM7XG4gIGZ1bmN0aW9uIHZhck5hbWUobmFtZSkge1xuICAgIGlmIChwYXJlbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGxldCBwYXJlbnRQYXJ0cyA9ICcnO1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBwYXJlbnRzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGlmIChqID09PSAwKSBwYXJlbnRQYXJ0cyArPSBwYXJlbnRzW2pdO1xuICAgICAgICBlbHNlIHBhcmVudFBhcnRzICs9IGBbJHtlbmNvZGVVUklDb21wb25lbnQocGFyZW50c1tqXSl9XWA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYCR7cGFyZW50UGFydHN9WyR7ZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpfV1gO1xuICAgIH1cbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpO1xuICB9XG4gIGZ1bmN0aW9uIHZhclZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gIH1cbiAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKChwcm9wKSA9PiB7XG4gICAgbGV0IHRvUHVzaDtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmpbcHJvcF0pKSB7XG4gICAgICB0b1B1c2ggPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqW3Byb3BdLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShvYmpbcHJvcF1baV0pICYmIHR5cGVvZiBvYmpbcHJvcF1baV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgbmV3UGFyZW50cyA9IHBhcmVudHMuc2xpY2UoKTtcbiAgICAgICAgICBuZXdQYXJlbnRzLnB1c2gocHJvcCk7XG4gICAgICAgICAgbmV3UGFyZW50cy5wdXNoKFN0cmluZyhpKSk7XG4gICAgICAgICAgdG9QdXNoLnB1c2goc2VyaWFsaXplT2JqZWN0KG9ialtwcm9wXVtpXSwgbmV3UGFyZW50cykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRvUHVzaC5wdXNoKGAke3Zhck5hbWUocHJvcCl9W109JHt2YXJWYWx1ZShvYmpbcHJvcF1baV0pfWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodG9QdXNoLmxlbmd0aCA+IDApIHJlc3VsdEFycmF5LnB1c2godG9QdXNoLmpvaW4oc2VwYXJhdG9yKSk7XG4gICAgfSBlbHNlIGlmIChvYmpbcHJvcF0gPT09IG51bGwgfHwgb2JqW3Byb3BdID09PSAnJykge1xuICAgICAgcmVzdWx0QXJyYXkucHVzaChgJHt2YXJOYW1lKHByb3ApfT1gKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmpbcHJvcF0gPT09ICdvYmplY3QnKSB7XG4gICAgICAvLyBPYmplY3QsIGNvbnZlcnQgdG8gbmFtZWQgYXJyYXlcbiAgICAgIG5ld1BhcmVudHMgPSBwYXJlbnRzLnNsaWNlKCk7XG4gICAgICBuZXdQYXJlbnRzLnB1c2gocHJvcCk7XG4gICAgICB0b1B1c2ggPSBzZXJpYWxpemVPYmplY3Qob2JqW3Byb3BdLCBuZXdQYXJlbnRzKTtcbiAgICAgIGlmICh0b1B1c2ggIT09ICcnKSByZXN1bHRBcnJheS5wdXNoKHRvUHVzaCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqW3Byb3BdICE9PSAndW5kZWZpbmVkJyAmJiBvYmpbcHJvcF0gIT09ICcnKSB7XG4gICAgICAvLyBTaG91bGQgYmUgc3RyaW5nIG9yIHBsYWluIHZhbHVlXG4gICAgICByZXN1bHRBcnJheS5wdXNoKGAke3Zhck5hbWUocHJvcCl9PSR7dmFyVmFsdWUob2JqW3Byb3BdKX1gKTtcbiAgICB9IGVsc2UgaWYgKG9ialtwcm9wXSA9PT0gJycpIHJlc3VsdEFycmF5LnB1c2godmFyTmFtZShwcm9wKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0QXJyYXkuam9pbihzZXBhcmF0b3IpO1xufVxuZnVuY3Rpb24gdG9DYW1lbENhc2Uoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8tKC4pL2csIChtYXRjaCwgZ3JvdXAxKSA9PiBncm91cDEudG9VcHBlckNhc2UoKSk7XG59XG5mdW5jdGlvbiBkYXRhc2V0KGVsKSB7XG4gIHJldHVybiAkJDEoZWwpLmRhdGFzZXQoKTtcbn1cbmZ1bmN0aW9uIHJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjaykge1xuICBpZiAod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkgcmV0dXJuIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2FsbGJhY2spO1xuICBlbHNlIGlmICh3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lKSByZXR1cm4gd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjayk7XG4gIHJldHVybiB3aW5kb3cuc2V0VGltZW91dChjYWxsYmFjaywgMTAwMCAvIDYwKTtcbn1cbmZ1bmN0aW9uIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKSB7XG4gIGlmICh3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUpIHJldHVybiB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpO1xuICBlbHNlIGlmICh3aW5kb3cud2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUpIHJldHVybiB3aW5kb3cud2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpO1xuICByZXR1cm4gd2luZG93LmNsZWFyVGltZW91dChpZCk7XG59XG5mdW5jdGlvbiBpc09iamVjdChvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgbyAhPT0gbnVsbCAmJiBvLmNvbnN0cnVjdG9yICYmIG8uY29uc3RydWN0b3IgPT09IE9iamVjdDtcbn1cbmZ1bmN0aW9uIGV4dGVuZCguLi5hcmdzKSB7XG4gIGNvbnN0IHRvID0gT2JqZWN0KGFyZ3NbMF0pO1xuICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBuZXh0U291cmNlID0gYXJnc1tpXTtcbiAgICBpZiAobmV4dFNvdXJjZSAhPT0gdW5kZWZpbmVkICYmIG5leHRTb3VyY2UgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IGtleXNBcnJheSA9IE9iamVjdC5rZXlzKE9iamVjdChuZXh0U291cmNlKSk7XG4gICAgICBmb3IgKGxldCBuZXh0SW5kZXggPSAwLCBsZW4gPSBrZXlzQXJyYXkubGVuZ3RoOyBuZXh0SW5kZXggPCBsZW47IG5leHRJbmRleCArPSAxKSB7XG4gICAgICAgIGNvbnN0IG5leHRLZXkgPSBrZXlzQXJyYXlbbmV4dEluZGV4XTtcbiAgICAgICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobmV4dFNvdXJjZSwgbmV4dEtleSk7XG4gICAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQgJiYgZGVzYy5lbnVtZXJhYmxlKSB7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KHRvW25leHRLZXldKSAmJiBpc09iamVjdChuZXh0U291cmNlW25leHRLZXldKSkge1xuICAgICAgICAgICAgZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFpc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHtcbiAgICAgICAgICAgIHRvW25leHRLZXldID0ge307XG4gICAgICAgICAgICBleHRlbmQodG9bbmV4dEtleV0sIG5leHRTb3VyY2VbbmV4dEtleV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0bztcbn1cbmNvbnN0IFV0aWxzID0ge1xuICBfX3V0aWxzOiB0cnVlLFxuICBwYXJzZVVybFF1ZXJ5LFxuICBwYXJzZVF1ZXJ5OiBwYXJzZVVybFF1ZXJ5LFxuICBpc0FycmF5LFxuICBlYWNoLFxuICB1bmlxdWUsXG4gIHNlcmlhbGl6ZU9iamVjdCxcbiAgcGFyYW06IHNlcmlhbGl6ZU9iamVjdCxcbiAgdG9DYW1lbENhc2UsXG4gIGRhdGFzZXQsXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSxcbiAgY2FuY2VsQW5pbWF0aW9uRnJhbWUsXG4gIGV4dGVuZCxcbn07XG5cbmNvbnN0IE1ldGhvZHMgPSB7XG4gIC8vIENsYXNzZXMgYW5kIGF0dHJpYnV0ZXNcbiAgYWRkQ2xhc3MoY2xhc3NOYW1lKSB7XG4gICAgaWYgKHR5cGVvZiBjbGFzc05hbWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgY29uc3QgY2xhc3NlcyA9IGNsYXNzTmFtZS5zcGxpdCgnICcpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2xhc3Nlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpc1tqXS5jbGFzc0xpc3QgIT09ICd1bmRlZmluZWQnKSB0aGlzW2pdLmNsYXNzTGlzdC5hZGQoY2xhc3Nlc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICByZW1vdmVDbGFzcyhjbGFzc05hbWUpIHtcbiAgICBjb25zdCBjbGFzc2VzID0gY2xhc3NOYW1lLnNwbGl0KCcgJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjbGFzc2VzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzW2pdLmNsYXNzTGlzdCAhPT0gJ3VuZGVmaW5lZCcpIHRoaXNbal0uY2xhc3NMaXN0LnJlbW92ZShjbGFzc2VzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGhhc0NsYXNzKGNsYXNzTmFtZSkge1xuICAgIGlmICghdGhpc1swXSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0aGlzWzBdLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO1xuICB9LFxuICB0b2dnbGVDbGFzcyhjbGFzc05hbWUpIHtcbiAgICBjb25zdCBjbGFzc2VzID0gY2xhc3NOYW1lLnNwbGl0KCcgJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjbGFzc2VzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzW2pdLmNsYXNzTGlzdCAhPT0gJ3VuZGVmaW5lZCcpIHRoaXNbal0uY2xhc3NMaXN0LnRvZ2dsZShjbGFzc2VzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGF0dHIoYXR0cnMsIHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGF0dHJzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gR2V0IGF0dHJcbiAgICAgIGlmICh0aGlzWzBdKSByZXR1cm4gdGhpc1swXS5nZXRBdHRyaWJ1dGUoYXR0cnMpO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBTZXQgYXR0cnNcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIC8vIFN0cmluZ1xuICAgICAgICB0aGlzW2ldLnNldEF0dHJpYnV0ZShhdHRycywgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT2JqZWN0XG4gICAgICAgIGZvciAoY29uc3QgYXR0ck5hbWUgaW4gYXR0cnMpIHtcbiAgICAgICAgICB0aGlzW2ldW2F0dHJOYW1lXSA9IGF0dHJzW2F0dHJOYW1lXTtcbiAgICAgICAgICB0aGlzW2ldLnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgYXR0cnNbYXR0ck5hbWVdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgcmVtb3ZlQXR0cihhdHRyKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB0aGlzW2ldLnJlbW92ZUF0dHJpYnV0ZShhdHRyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHByb3AocHJvcHMsIHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIHByb3BzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gR2V0IHByb3BcbiAgICAgIGlmICh0aGlzWzBdKSByZXR1cm4gdGhpc1swXVtwcm9wc107XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNldCBwcm9wc1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgLy8gU3RyaW5nXG4gICAgICAgICAgdGhpc1tpXVtwcm9wc10gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPYmplY3RcbiAgICAgICAgICBmb3IgKGNvbnN0IHByb3BOYW1lIGluIHByb3BzKSB7XG4gICAgICAgICAgICB0aGlzW2ldW3Byb3BOYW1lXSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfSxcbiAgZGF0YShrZXksIHZhbHVlKSB7XG4gICAgbGV0IGVsO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBlbCA9IHRoaXNbMF07XG4gICAgICAvLyBHZXQgdmFsdWVcbiAgICAgIGlmIChlbCkge1xuICAgICAgICBpZiAoZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSAmJiAoa2V5IGluIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UpKSB7XG4gICAgICAgICAgcmV0dXJuIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGRhdGFLZXkgPSBlbC5nZXRBdHRyaWJ1dGUoYGRhdGEtJHtrZXl9YCk7XG4gICAgICAgIGlmIChkYXRhS2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGFLZXk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gU2V0IHZhbHVlXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBlbCA9IHRoaXNbaV07XG4gICAgICBpZiAoIWVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UpIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UgPSB7fTtcbiAgICAgIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgcmVtb3ZlRGF0YShrZXkpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGVsID0gdGhpc1tpXTtcbiAgICAgIGlmIChlbC5kb203RWxlbWVudERhdGFTdG9yYWdlICYmIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XSkge1xuICAgICAgICBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV0gPSBudWxsO1xuICAgICAgICBkZWxldGUgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZGF0YXNldCgpIHtcbiAgICBjb25zdCBlbCA9IHRoaXNbMF07XG4gICAgaWYgKCFlbCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBjb25zdCBkYXRhc2V0JCQxID0ge307XG4gICAgaWYgKGVsLmRhdGFzZXQpIHtcbiAgICAgIGZvciAoY29uc3QgZGF0YUtleSBpbiBlbC5kYXRhc2V0KSB7XG4gICAgICAgIGRhdGFzZXQkJDFbZGF0YUtleV0gPSBlbC5kYXRhc2V0W2RhdGFLZXldO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsLmF0dHJpYnV0ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgYXR0ciA9IGVsLmF0dHJpYnV0ZXNbaV07XG4gICAgICAgIGlmIChhdHRyLm5hbWUuaW5kZXhPZignZGF0YS0nKSA+PSAwKSB7XG4gICAgICAgICAgZGF0YXNldCQkMVt0b0NhbWVsQ2FzZShhdHRyLm5hbWUuc3BsaXQoJ2RhdGEtJylbMV0pXSA9IGF0dHIudmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gZGF0YXNldCQkMSkge1xuICAgICAgaWYgKGRhdGFzZXQkJDFba2V5XSA9PT0gJ2ZhbHNlJykgZGF0YXNldCQkMVtrZXldID0gZmFsc2U7XG4gICAgICBlbHNlIGlmIChkYXRhc2V0JCQxW2tleV0gPT09ICd0cnVlJykgZGF0YXNldCQkMVtrZXldID0gdHJ1ZTtcbiAgICAgIGVsc2UgaWYgKHBhcnNlRmxvYXQoZGF0YXNldCQkMVtrZXldKSA9PT0gZGF0YXNldCQkMVtrZXldICogMSkgZGF0YXNldCQkMVtrZXldICo9IDE7XG4gICAgfVxuICAgIHJldHVybiBkYXRhc2V0JCQxO1xuICB9LFxuICB2YWwodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHRoaXNbMF0pIHtcbiAgICAgICAgaWYgKHRoaXNbMF0ubXVsdGlwbGUgJiYgdGhpc1swXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnc2VsZWN0Jykge1xuICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpc1swXS5zZWxlY3RlZE9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKHRoaXNbMF0uc2VsZWN0ZWRPcHRpb25zW2ldLnZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpc1swXS52YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB0aGlzW2ldLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICAvLyBUcmFuc2Zvcm1zXG4gIHRyYW5zZm9ybSh0cmFuc2Zvcm0pIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGVsU3R5bGUgPSB0aGlzW2ldLnN0eWxlO1xuICAgICAgZWxTdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgICBlbFN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICBpZiAodHlwZW9mIGR1cmF0aW9uICE9PSAnc3RyaW5nJykge1xuICAgICAgZHVyYXRpb24gPSBgJHtkdXJhdGlvbn1tc2A7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgZWxTdHlsZSA9IHRoaXNbaV0uc3R5bGU7XG4gICAgICBlbFN0eWxlLndlYmtpdFRyYW5zaXRpb25EdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgZWxTdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIC8vIEV2ZW50c1xuICBvbiguLi5hcmdzKSB7XG4gICAgY29uc3QgZXZlbnRUeXBlID0gYXJnc1swXTtcbiAgICBsZXQgdGFyZ2V0U2VsZWN0b3I7XG4gICAgbGV0IGxpc3RlbmVyO1xuICAgIGxldCBjYXB0dXJlID0gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0YXJnZXRTZWxlY3RvciA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXIgPSBhcmdzWzFdO1xuICAgICAgY2FwdHVyZSA9IGFyZ3NbMl07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldFNlbGVjdG9yID0gYXJnc1sxXTtcbiAgICAgIGxpc3RlbmVyID0gYXJnc1syXTtcbiAgICAgIGNhcHR1cmUgPSBhcmdzWzNdO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVMaXZlRXZlbnQoZSkge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICBpZiAoIXRhcmdldCkgcmV0dXJuO1xuICAgICAgY29uc3QgZXZlbnREYXRhID0gZS50YXJnZXQuZG9tN0V2ZW50RGF0YSB8fCBbXTtcbiAgICAgIGV2ZW50RGF0YS51bnNoaWZ0KGUpO1xuICAgICAgaWYgKCQkMSh0YXJnZXQpLmlzKHRhcmdldFNlbGVjdG9yKSkgbGlzdGVuZXIuYXBwbHkodGFyZ2V0LCBldmVudERhdGEpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHBhcmVudHMgPSAkJDEodGFyZ2V0KS5wYXJlbnRzKCk7XG4gICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgcGFyZW50cy5sZW5ndGg7IGsgKz0gMSkge1xuICAgICAgICAgIGlmICgkJDEocGFyZW50c1trXSkuaXModGFyZ2V0U2VsZWN0b3IpKSBsaXN0ZW5lci5hcHBseShwYXJlbnRzW2tdLCBldmVudERhdGEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZUV2ZW50KGUpIHtcbiAgICAgIGNvbnN0IGV2ZW50RGF0YSA9IGUgJiYgZS50YXJnZXQgPyBlLnRhcmdldC5kb203RXZlbnREYXRhIHx8IFtdIDogW107XG4gICAgICBldmVudERhdGEudW5zaGlmdChlKTtcbiAgICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGV2ZW50RGF0YSk7XG4gICAgfVxuICAgIGNvbnN0IGV2ZW50cyA9IGV2ZW50VHlwZS5zcGxpdCgnICcpO1xuICAgIGxldCBqO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgZWwgPSB0aGlzW2ldO1xuICAgICAgaWYgKCF0YXJnZXRTZWxlY3Rvcikge1xuICAgICAgICBmb3IgKGogPSAwOyBqIDwgZXZlbnRzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgaWYgKCFlbC5kb203TGlzdGVuZXJzKSBlbC5kb203TGlzdGVuZXJzID0gW107XG4gICAgICAgICAgZWwuZG9tN0xpc3RlbmVycy5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6IGV2ZW50VHlwZSxcbiAgICAgICAgICAgIGxpc3RlbmVyLFxuICAgICAgICAgICAgcHJveHlMaXN0ZW5lcjogaGFuZGxlRXZlbnQsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudHNbal0sIGhhbmRsZUV2ZW50LCBjYXB0dXJlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTGl2ZSBldmVudHNcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGV2ZW50cy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIGlmICghZWwuZG9tN0xpdmVMaXN0ZW5lcnMpIGVsLmRvbTdMaXZlTGlzdGVuZXJzID0gW107XG4gICAgICAgICAgZWwuZG9tN0xpdmVMaXN0ZW5lcnMucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiBldmVudFR5cGUsXG4gICAgICAgICAgICBsaXN0ZW5lcixcbiAgICAgICAgICAgIHByb3h5TGlzdGVuZXI6IGhhbmRsZUxpdmVFdmVudCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50c1tqXSwgaGFuZGxlTGl2ZUV2ZW50LCBjYXB0dXJlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgb2ZmKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBldmVudFR5cGUgPSBhcmdzWzBdO1xuICAgIGxldCB0YXJnZXRTZWxlY3RvcjtcbiAgICBsZXQgbGlzdGVuZXI7XG4gICAgbGV0IGNhcHR1cmUgPSBmYWxzZTtcbiAgICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRhcmdldFNlbGVjdG9yID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lciA9IGFyZ3NbMV07XG4gICAgICBjYXB0dXJlID0gYXJnc1syXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0U2VsZWN0b3IgPSBhcmdzWzFdO1xuICAgICAgbGlzdGVuZXIgPSBhcmdzWzJdO1xuICAgICAgY2FwdHVyZSA9IGFyZ3NbM107XG4gICAgfVxuICAgIGNvbnN0IGV2ZW50cyA9IGV2ZW50VHlwZS5zcGxpdCgnICcpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgY29uc3QgZWwgPSB0aGlzW2pdO1xuICAgICAgICBpZiAoIXRhcmdldFNlbGVjdG9yKSB7XG4gICAgICAgICAgaWYgKGVsLmRvbTdMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgZWwuZG9tN0xpc3RlbmVycy5sZW5ndGg7IGsgKz0gMSkge1xuICAgICAgICAgICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWwuZG9tN0xpc3RlbmVyc1trXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRzW2ldLCBlbC5kb203TGlzdGVuZXJzW2tdLnByb3h5TGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChlbC5kb203TGlzdGVuZXJzW2tdLnR5cGUgPT09IGV2ZW50c1tpXSkge1xuICAgICAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRzW2ldLCBlbC5kb203TGlzdGVuZXJzW2tdLnByb3h5TGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGVsLmRvbTdMaXZlTGlzdGVuZXJzKSB7XG4gICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBlbC5kb203TGl2ZUxpc3RlbmVycy5sZW5ndGg7IGsgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgIGlmIChlbC5kb203TGl2ZUxpc3RlbmVyc1trXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50c1tpXSwgZWwuZG9tN0xpdmVMaXN0ZW5lcnNba10ucHJveHlMaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZWwuZG9tN0xpdmVMaXN0ZW5lcnNba10udHlwZSA9PT0gZXZlbnRzW2ldKSB7XG4gICAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRzW2ldLCBlbC5kb203TGl2ZUxpc3RlbmVyc1trXS5wcm94eUxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIG9uY2UoZXZlbnROYW1lLCB0YXJnZXRTZWxlY3RvciwgbGlzdGVuZXIsIGNhcHR1cmUpIHtcbiAgICBjb25zdCBkb20gPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgdGFyZ2V0U2VsZWN0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGxpc3RlbmVyID0gYXJndW1lbnRzWzFdO1xuICAgICAgY2FwdHVyZSA9IGFyZ3VtZW50c1syXTtcbiAgICAgIHRhcmdldFNlbGVjdG9yID0gZmFsc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByb3h5KGUpIHtcbiAgICAgIGNvbnN0IGV2ZW50RGF0YSA9IGUudGFyZ2V0LmRvbTdFdmVudERhdGEgfHwgW107XG4gICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBldmVudERhdGEpO1xuICAgICAgZG9tLm9mZihldmVudE5hbWUsIHRhcmdldFNlbGVjdG9yLCBwcm94eSwgY2FwdHVyZSk7XG4gICAgfVxuICAgIHJldHVybiBkb20ub24oZXZlbnROYW1lLCB0YXJnZXRTZWxlY3RvciwgcHJveHksIGNhcHR1cmUpO1xuICB9LFxuICB0cmlnZ2VyKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBldmVudHMgPSBhcmdzWzBdLnNwbGl0KCcgJyk7XG4gICAgY29uc3QgZXZlbnREYXRhID0gYXJnc1sxXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGxldCBldnQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZXZ0ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudChldmVudHNbaV0sIHsgZGV0YWlsOiBldmVudERhdGEsIGJ1YmJsZXM6IHRydWUsIGNhbmNlbGFibGU6IHRydWUgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICAgICAgICBldnQuaW5pdEV2ZW50KGV2ZW50c1tpXSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgZXZ0LmRldGFpbCA9IGV2ZW50RGF0YTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzW2pdLmRvbTdFdmVudERhdGEgPSBhcmdzLmZpbHRlcigoZGF0YSwgZGF0YUluZGV4KSA9PiBkYXRhSW5kZXggPiAwKTtcbiAgICAgICAgdGhpc1tqXS5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gICAgICAgIHRoaXNbal0uZG9tN0V2ZW50RGF0YSA9IFtdO1xuICAgICAgICBkZWxldGUgdGhpc1tqXS5kb203RXZlbnREYXRhO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgdHJhbnNpdGlvbkVuZChjYWxsYmFjaykge1xuICAgIGNvbnN0IGV2ZW50cyA9IFsnd2Via2l0VHJhbnNpdGlvbkVuZCcsICd0cmFuc2l0aW9uZW5kJ107XG4gICAgY29uc3QgZG9tID0gdGhpcztcbiAgICBsZXQgaTtcbiAgICBmdW5jdGlvbiBmaXJlQ2FsbEJhY2soZSkge1xuICAgICAgLyoganNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZSk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGRvbS5vZmYoZXZlbnRzW2ldLCBmaXJlQ2FsbEJhY2spO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgZG9tLm9uKGV2ZW50c1tpXSwgZmlyZUNhbGxCYWNrKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGFuaW1hdGlvbkVuZChjYWxsYmFjaykge1xuICAgIGNvbnN0IGV2ZW50cyA9IFsnd2Via2l0QW5pbWF0aW9uRW5kJywgJ2FuaW1hdGlvbmVuZCddO1xuICAgIGNvbnN0IGRvbSA9IHRoaXM7XG4gICAgbGV0IGk7XG4gICAgZnVuY3Rpb24gZmlyZUNhbGxCYWNrKGUpIHtcbiAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCBlKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgZG9tLm9mZihldmVudHNbaV0sIGZpcmVDYWxsQmFjayk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBkb20ub24oZXZlbnRzW2ldLCBmaXJlQ2FsbEJhY2spO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgLy8gU2l6aW5nL1N0eWxlc1xuICB3aWR0aCgpIHtcbiAgICBpZiAodGhpc1swXSA9PT0gd2luZG93KSB7XG4gICAgICByZXR1cm4gd2luZG93LmlubmVyV2lkdGg7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodGhpcy5jc3MoJ3dpZHRoJykpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBvdXRlcldpZHRoKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlcyA9IHRoaXMuc3R5bGVzKCk7XG4gICAgICAgIHJldHVybiB0aGlzWzBdLm9mZnNldFdpZHRoICsgcGFyc2VGbG9hdChzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLXJpZ2h0JykpICsgcGFyc2VGbG9hdChzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLWxlZnQnKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRXaWR0aDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIGhlaWdodCgpIHtcbiAgICBpZiAodGhpc1swXSA9PT0gd2luZG93KSB7XG4gICAgICByZXR1cm4gd2luZG93LmlubmVySGVpZ2h0O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBwYXJzZUZsb2F0KHRoaXMuY3NzKCdoZWlnaHQnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIG91dGVySGVpZ2h0KGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlcyA9IHRoaXMuc3R5bGVzKCk7XG4gICAgICAgIHJldHVybiB0aGlzWzBdLm9mZnNldEhlaWdodCArIHBhcnNlRmxvYXQoc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi10b3AnKSkgKyBwYXJzZUZsb2F0KHN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tYm90dG9tJykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgb2Zmc2V0KCkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGVsID0gdGhpc1swXTtcbiAgICAgIGNvbnN0IGJveCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgY29uc3QgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gICAgICBjb25zdCBjbGllbnRUb3AgPSBlbC5jbGllbnRUb3AgfHwgYm9keS5jbGllbnRUb3AgfHwgMDtcbiAgICAgIGNvbnN0IGNsaWVudExlZnQgPSBlbC5jbGllbnRMZWZ0IHx8IGJvZHkuY2xpZW50TGVmdCB8fCAwO1xuICAgICAgY29uc3Qgc2Nyb2xsVG9wID0gZWwgPT09IHdpbmRvdyA/IHdpbmRvdy5zY3JvbGxZIDogZWwuc2Nyb2xsVG9wO1xuICAgICAgY29uc3Qgc2Nyb2xsTGVmdCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWCA6IGVsLnNjcm9sbExlZnQ7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IChib3gudG9wICsgc2Nyb2xsVG9wKSAtIGNsaWVudFRvcCxcbiAgICAgICAgbGVmdDogKGJveC5sZWZ0ICsgc2Nyb2xsTGVmdCkgLSBjbGllbnRMZWZ0LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgaGlkZSgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHRoaXNbaV0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHNob3coKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBlbCA9IHRoaXNbaV07XG4gICAgICBpZiAoZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSB7XG4gICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICAgIH1cbiAgICAgIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZSgnZGlzcGxheScpID09PSAnbm9uZScpIHtcbiAgICAgICAgLy8gU3RpbGwgbm90IHZpc2libGVcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBzdHlsZXMoKSB7XG4gICAgaWYgKHRoaXNbMF0pIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzWzBdLCBudWxsKTtcbiAgICByZXR1cm4ge307XG4gIH0sXG4gIGNzcyhwcm9wcywgdmFsdWUpIHtcbiAgICBsZXQgaTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHRoaXNbMF0pIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzWzBdLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3BzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgZm9yIChsZXQgcHJvcCBpbiBwcm9wcykge1xuICAgICAgICAgICAgdGhpc1tpXS5zdHlsZVtwcm9wXSA9IHByb3BzW3Byb3BdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIHByb3BzID09PSAnc3RyaW5nJykge1xuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdGhpc1tpXS5zdHlsZVtwcm9wc10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvLyBEb20gbWFuaXB1bGF0aW9uXG4gIHRvQXJyYXkoKSB7XG4gICAgY29uc3QgYXJyID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBhcnIucHVzaCh0aGlzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycjtcbiAgfSxcbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSBjb2xsZWN0aW9uIHBhc3NpbmcgZWxlbWVudHMgdG8gYGNhbGxiYWNrYFxuICBlYWNoKGNhbGxiYWNrKSB7XG4gICAgLy8gRG9uJ3QgYm90aGVyIGNvbnRpbnVpbmcgd2l0aG91dCBhIGNhbGxiYWNrXG4gICAgaWYgKCFjYWxsYmFjaykgcmV0dXJuIHRoaXM7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIHRoZSBjdXJyZW50IGNvbGxlY3Rpb25cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIC8vIElmIHRoZSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gICAgICBpZiAoY2FsbGJhY2suY2FsbCh0aGlzW2ldLCBpLCB0aGlzW2ldKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgLy8gRW5kIHRoZSBsb29wIGVhcmx5XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBSZXR1cm4gYHRoaXNgIHRvIGFsbG93IGNoYWluZWQgRE9NIG9wZXJhdGlvbnNcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgZm9yRWFjaChjYWxsYmFjaykge1xuICAgIC8vIERvbid0IGJvdGhlciBjb250aW51aW5nIHdpdGhvdXQgYSBjYWxsYmFja1xuICAgIGlmICghY2FsbGJhY2spIHJldHVybiB0aGlzO1xuICAgIC8vIEl0ZXJhdGUgb3ZlciB0aGUgY3VycmVudCBjb2xsZWN0aW9uXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAvLyBJZiB0aGUgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICAgICAgaWYgKGNhbGxiYWNrLmNhbGwodGhpc1tpXSwgdGhpc1tpXSwgaSkgPT09IGZhbHNlKSB7XG4gICAgICAgIC8vIEVuZCB0aGUgbG9vcCBlYXJseVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gUmV0dXJuIGB0aGlzYCB0byBhbGxvdyBjaGFpbmVkIERPTSBvcGVyYXRpb25zXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGZpbHRlcihjYWxsYmFjaykge1xuICAgIGNvbnN0IG1hdGNoZWRJdGVtcyA9IFtdO1xuICAgIGNvbnN0IGRvbSA9IHRoaXM7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkb20ubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChjYWxsYmFjay5jYWxsKGRvbVtpXSwgaSwgZG9tW2ldKSkgbWF0Y2hlZEl0ZW1zLnB1c2goZG9tW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEb203KG1hdGNoZWRJdGVtcyk7XG4gIH0sXG4gIG1hcChjYWxsYmFjaykge1xuICAgIGNvbnN0IG1vZGlmaWVkSXRlbXMgPSBbXTtcbiAgICBjb25zdCBkb20gPSB0aGlzO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZG9tLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBtb2RpZmllZEl0ZW1zLnB1c2goY2FsbGJhY2suY2FsbChkb21baV0sIGksIGRvbVtpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IERvbTcobW9kaWZpZWRJdGVtcyk7XG4gIH0sXG4gIGh0bWwoaHRtbCkge1xuICAgIGlmICh0eXBlb2YgaHRtbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0aGlzWzBdID8gdGhpc1swXS5pbm5lckhUTUwgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB0aGlzW2ldLmlubmVySFRNTCA9IGh0bWw7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICB0ZXh0KHRleHQpIHtcbiAgICBpZiAodHlwZW9mIHRleHQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAodGhpc1swXSkge1xuICAgICAgICByZXR1cm4gdGhpc1swXS50ZXh0Q29udGVudC50cmltKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHRoaXNbaV0udGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgaXMoc2VsZWN0b3IpIHtcbiAgICBjb25zdCBlbCA9IHRoaXNbMF07XG4gICAgbGV0IGNvbXBhcmVXaXRoO1xuICAgIGxldCBpO1xuICAgIGlmICghZWwgfHwgdHlwZW9mIHNlbGVjdG9yID09PSAndW5kZWZpbmVkJykgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAoZWwubWF0Y2hlcykgcmV0dXJuIGVsLm1hdGNoZXMoc2VsZWN0b3IpO1xuICAgICAgZWxzZSBpZiAoZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKSByZXR1cm4gZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgIGVsc2UgaWYgKGVsLm1zTWF0Y2hlc1NlbGVjdG9yKSByZXR1cm4gZWwubXNNYXRjaGVzU2VsZWN0b3Ioc2VsZWN0b3IpO1xuXG4gICAgICBjb21wYXJlV2l0aCA9ICQkMShzZWxlY3Rvcik7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY29tcGFyZVdpdGgubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGNvbXBhcmVXaXRoW2ldID09PSBlbCkgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChzZWxlY3RvciA9PT0gZG9jdW1lbnQpIHJldHVybiBlbCA9PT0gZG9jdW1lbnQ7XG4gICAgZWxzZSBpZiAoc2VsZWN0b3IgPT09IHdpbmRvdykgcmV0dXJuIGVsID09PSB3aW5kb3c7XG5cbiAgICBpZiAoc2VsZWN0b3Iubm9kZVR5cGUgfHwgc2VsZWN0b3IgaW5zdGFuY2VvZiBEb203KSB7XG4gICAgICBjb21wYXJlV2l0aCA9IHNlbGVjdG9yLm5vZGVUeXBlID8gW3NlbGVjdG9yXSA6IHNlbGVjdG9yO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGNvbXBhcmVXaXRoLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChjb21wYXJlV2l0aFtpXSA9PT0gZWwpIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIGluZGV4T2YoZWwpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmICh0aGlzW2ldID09PSBlbCkgcmV0dXJuIGk7XG4gICAgfVxuICB9LFxuICBpbmRleCgpIHtcbiAgICBsZXQgY2hpbGQgPSB0aGlzWzBdO1xuICAgIGxldCBpO1xuICAgIGlmIChjaGlsZCkge1xuICAgICAgaSA9IDA7XG4gICAgICB3aGlsZSAoKGNoaWxkID0gY2hpbGQucHJldmlvdXNTaWJsaW5nKSAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEpIGkgKz0gMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfSxcbiAgZXEoaW5kZXgpIHtcbiAgICBpZiAodHlwZW9mIGluZGV4ID09PSAndW5kZWZpbmVkJykgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgbGV0IHJldHVybkluZGV4O1xuICAgIGlmIChpbmRleCA+IGxlbmd0aCAtIDEpIHtcbiAgICAgIHJldHVybiBuZXcgRG9tNyhbXSk7XG4gICAgfVxuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgIHJldHVybkluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgICBpZiAocmV0dXJuSW5kZXggPCAwKSByZXR1cm4gbmV3IERvbTcoW10pO1xuICAgICAgcmV0dXJuIG5ldyBEb203KFt0aGlzW3JldHVybkluZGV4XV0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IERvbTcoW3RoaXNbaW5kZXhdXSk7XG4gIH0sXG4gIGFwcGVuZCguLi5hcmdzKSB7XG4gICAgbGV0IG5ld0NoaWxkO1xuXG4gICAgZm9yIChsZXQgayA9IDA7IGsgPCBhcmdzLmxlbmd0aDsgayArPSAxKSB7XG4gICAgICBuZXdDaGlsZCA9IGFyZ3Nba107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBjb25zdCB0ZW1wRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgdGVtcERpdi5pbm5lckhUTUwgPSBuZXdDaGlsZDtcbiAgICAgICAgICB3aGlsZSAodGVtcERpdi5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICB0aGlzW2ldLmFwcGVuZENoaWxkKHRlbXBEaXYuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG5ld0NoaWxkIGluc3RhbmNlb2YgRG9tNykge1xuICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbmV3Q2hpbGQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQobmV3Q2hpbGRbal0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzW2ldLmFwcGVuZENoaWxkKG5ld0NoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBhcHBlbmRUbyhwYXJlbnQpIHtcbiAgICAkJDEocGFyZW50KS5hcHBlbmQodGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHByZXBlbmQobmV3Q2hpbGQpIHtcbiAgICBsZXQgaTtcbiAgICBsZXQgajtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc3QgdGVtcERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0ZW1wRGl2LmlubmVySFRNTCA9IG5ld0NoaWxkO1xuICAgICAgICBmb3IgKGogPSB0ZW1wRGl2LmNoaWxkTm9kZXMubGVuZ3RoIC0gMTsgaiA+PSAwOyBqIC09IDEpIHtcbiAgICAgICAgICB0aGlzW2ldLmluc2VydEJlZm9yZSh0ZW1wRGl2LmNoaWxkTm9kZXNbal0sIHRoaXNbaV0uY2hpbGROb2Rlc1swXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobmV3Q2hpbGQgaW5zdGFuY2VvZiBEb203KSB7XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBuZXdDaGlsZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIHRoaXNbaV0uaW5zZXJ0QmVmb3JlKG5ld0NoaWxkW2pdLCB0aGlzW2ldLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzW2ldLmluc2VydEJlZm9yZShuZXdDaGlsZCwgdGhpc1tpXS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHByZXBlbmRUbyhwYXJlbnQpIHtcbiAgICAkJDEocGFyZW50KS5wcmVwZW5kKHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBpbnNlcnRCZWZvcmUoc2VsZWN0b3IpIHtcbiAgICBjb25zdCBiZWZvcmUgPSAkJDEoc2VsZWN0b3IpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGJlZm9yZS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgYmVmb3JlWzBdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXNbaV0sIGJlZm9yZVswXSk7XG4gICAgICB9IGVsc2UgaWYgKGJlZm9yZS5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYmVmb3JlLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgYmVmb3JlW2pdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXNbaV0uY2xvbmVOb2RlKHRydWUpLCBiZWZvcmVbal0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBpbnNlcnRBZnRlcihzZWxlY3Rvcikge1xuICAgIGNvbnN0IGFmdGVyID0gJCQxKHNlbGVjdG9yKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChhZnRlci5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgYWZ0ZXJbMF0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpc1tpXSwgYWZ0ZXJbMF0ubmV4dFNpYmxpbmcpO1xuICAgICAgfSBlbHNlIGlmIChhZnRlci5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYWZ0ZXIubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICBhZnRlcltqXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzW2ldLmNsb25lTm9kZSh0cnVlKSwgYWZ0ZXJbal0ubmV4dFNpYmxpbmcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBuZXh0KHNlbGVjdG9yKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIGlmICh0aGlzWzBdLm5leHRFbGVtZW50U2libGluZyAmJiAkJDEodGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmcpLmlzKHNlbGVjdG9yKSkgcmV0dXJuIG5ldyBEb203KFt0aGlzWzBdLm5leHRFbGVtZW50U2libGluZ10pO1xuICAgICAgICByZXR1cm4gbmV3IERvbTcoW10pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmcpIHJldHVybiBuZXcgRG9tNyhbdGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmddKTtcbiAgICAgIHJldHVybiBuZXcgRG9tNyhbXSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRG9tNyhbXSk7XG4gIH0sXG4gIG5leHRBbGwoc2VsZWN0b3IpIHtcbiAgICBjb25zdCBuZXh0RWxzID0gW107XG4gICAgbGV0IGVsID0gdGhpc1swXTtcbiAgICBpZiAoIWVsKSByZXR1cm4gbmV3IERvbTcoW10pO1xuICAgIHdoaWxlIChlbC5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICAgIGNvbnN0IG5leHQgPSBlbC5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKCQkMShuZXh0KS5pcyhzZWxlY3RvcikpIG5leHRFbHMucHVzaChuZXh0KTtcbiAgICAgIH0gZWxzZSBuZXh0RWxzLnB1c2gobmV4dCk7XG4gICAgICBlbCA9IG5leHQ7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRG9tNyhuZXh0RWxzKTtcbiAgfSxcbiAgcHJldihzZWxlY3Rvcikge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGVsID0gdGhpc1swXTtcbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICBpZiAoZWwucHJldmlvdXNFbGVtZW50U2libGluZyAmJiAkJDEoZWwucHJldmlvdXNFbGVtZW50U2libGluZykuaXMoc2VsZWN0b3IpKSByZXR1cm4gbmV3IERvbTcoW2VsLnByZXZpb3VzRWxlbWVudFNpYmxpbmddKTtcbiAgICAgICAgcmV0dXJuIG5ldyBEb203KFtdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHJldHVybiBuZXcgRG9tNyhbZWwucHJldmlvdXNFbGVtZW50U2libGluZ10pO1xuICAgICAgcmV0dXJuIG5ldyBEb203KFtdKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEb203KFtdKTtcbiAgfSxcbiAgcHJldkFsbChzZWxlY3Rvcikge1xuICAgIGNvbnN0IHByZXZFbHMgPSBbXTtcbiAgICBsZXQgZWwgPSB0aGlzWzBdO1xuICAgIGlmICghZWwpIHJldHVybiBuZXcgRG9tNyhbXSk7XG4gICAgd2hpbGUgKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICAgIGNvbnN0IHByZXYgPSBlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIGlmICgkJDEocHJldikuaXMoc2VsZWN0b3IpKSBwcmV2RWxzLnB1c2gocHJldik7XG4gICAgICB9IGVsc2UgcHJldkVscy5wdXNoKHByZXYpO1xuICAgICAgZWwgPSBwcmV2O1xuICAgIH1cbiAgICByZXR1cm4gbmV3IERvbTcocHJldkVscyk7XG4gIH0sXG4gIHNpYmxpbmdzKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHRoaXMubmV4dEFsbChzZWxlY3RvcikuYWRkKHRoaXMucHJldkFsbChzZWxlY3RvcikpO1xuICB9LFxuICBwYXJlbnQoc2VsZWN0b3IpIHtcbiAgICBjb25zdCBwYXJlbnRzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpc1tpXS5wYXJlbnROb2RlICE9PSBudWxsKSB7XG4gICAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICAgIGlmICgkJDEodGhpc1tpXS5wYXJlbnROb2RlKS5pcyhzZWxlY3RvcikpIHBhcmVudHMucHVzaCh0aGlzW2ldLnBhcmVudE5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcmVudHMucHVzaCh0aGlzW2ldLnBhcmVudE5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAkJDEodW5pcXVlKHBhcmVudHMpKTtcbiAgfSxcbiAgcGFyZW50cyhzZWxlY3Rvcikge1xuICAgIGNvbnN0IHBhcmVudHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGxldCBwYXJlbnQgPSB0aGlzW2ldLnBhcmVudE5vZGU7XG4gICAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICAgIGlmICgkJDEocGFyZW50KS5pcyhzZWxlY3RvcikpIHBhcmVudHMucHVzaChwYXJlbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcmVudHMucHVzaChwYXJlbnQpO1xuICAgICAgICB9XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJCQxKHVuaXF1ZShwYXJlbnRzKSk7XG4gIH0sXG4gIGNsb3Nlc3Qoc2VsZWN0b3IpIHtcbiAgICBsZXQgY2xvc2VzdCA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBuZXcgRG9tNyhbXSk7XG4gICAgfVxuICAgIGlmICghY2xvc2VzdC5pcyhzZWxlY3RvcikpIHtcbiAgICAgIGNsb3Nlc3QgPSBjbG9zZXN0LnBhcmVudHMoc2VsZWN0b3IpLmVxKDApO1xuICAgIH1cbiAgICByZXR1cm4gY2xvc2VzdDtcbiAgfSxcbiAgZmluZChzZWxlY3Rvcikge1xuICAgIGNvbnN0IGZvdW5kRWxlbWVudHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGZvdW5kID0gdGhpc1tpXS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZm91bmQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgZm91bmRFbGVtZW50cy5wdXNoKGZvdW5kW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEb203KGZvdW5kRWxlbWVudHMpO1xuICB9LFxuICBjaGlsZHJlbihzZWxlY3Rvcikge1xuICAgIGNvbnN0IGNoaWxkcmVuID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBjaGlsZE5vZGVzID0gdGhpc1tpXS5jaGlsZE5vZGVzO1xuXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNoaWxkTm9kZXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgICAgIGlmIChjaGlsZE5vZGVzW2pdLm5vZGVUeXBlID09PSAxKSBjaGlsZHJlbi5wdXNoKGNoaWxkTm9kZXNbal0pO1xuICAgICAgICB9IGVsc2UgaWYgKGNoaWxkTm9kZXNbal0ubm9kZVR5cGUgPT09IDEgJiYgJCQxKGNoaWxkTm9kZXNbal0pLmlzKHNlbGVjdG9yKSkgY2hpbGRyZW4ucHVzaChjaGlsZE5vZGVzW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEb203KHVuaXF1ZShjaGlsZHJlbikpO1xuICB9LFxuICByZW1vdmUoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpc1tpXS5wYXJlbnROb2RlKSB0aGlzW2ldLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpc1tpXSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBkZXRhY2goKSB7XG4gICAgcmV0dXJuIHRoaXMucmVtb3ZlKCk7XG4gIH0sXG4gIGFkZCguLi5hcmdzKSB7XG4gICAgY29uc3QgZG9tID0gdGhpcztcbiAgICBsZXQgaTtcbiAgICBsZXQgajtcbiAgICBmb3IgKGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgdG9BZGQgPSAkJDEoYXJnc1tpXSk7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgdG9BZGQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgZG9tW2RvbS5sZW5ndGhdID0gdG9BZGRbal07XG4gICAgICAgIGRvbS5sZW5ndGggKz0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRvbTtcbiAgfSxcbiAgZW1wdHkoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBlbCA9IHRoaXNbaV07XG4gICAgICBpZiAoZWwubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBlbC5jaGlsZE5vZGVzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgaWYgKGVsLmNoaWxkTm9kZXNbal0ucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgZWwuY2hpbGROb2Rlc1tqXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsLmNoaWxkTm9kZXNbal0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbC50ZXh0Q29udGVudCA9ICcnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbn07XG5cbi8vIFNob3J0Y3V0c1xuY29uc3Qgc2hvcnRjdXRzID0gKCdjbGljayBibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQga2V5dXAga2V5ZG93biBrZXlwcmVzcyBzdWJtaXQgY2hhbmdlIG1vdXNlZG93biBtb3VzZW1vdmUgbW91c2V1cCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgbW91c2VvdXQgbW91c2VvdmVyIHRvdWNoc3RhcnQgdG91Y2hlbmQgdG91Y2htb3ZlIHJlc2l6ZSBzY3JvbGwnKS5zcGxpdCgnICcpO1xuY29uc3Qgbm90VHJpZ2dlciA9ICgncmVzaXplIHNjcm9sbCcpLnNwbGl0KCcgJyk7XG5mdW5jdGlvbiBjcmVhdGVNZXRob2QobmFtZSkge1xuICBNZXRob2RzW25hbWVdID0gZnVuY3Rpb24gZXZlbnRTaG9ydGN1dCh0YXJnZXRTZWxlY3RvciwgbGlzdGVuZXIsIGNhcHR1cmUpIHtcbiAgICBpZiAodHlwZW9mIHRhcmdldFNlbGVjdG9yID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChub3RUcmlnZ2VyLmluZGV4T2YobmFtZSkgPCAwKSB7XG4gICAgICAgICAgaWYgKG5hbWUgaW4gdGhpc1tpXSkgdGhpc1tpXVtuYW1lXSgpO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgJCQxKHRoaXNbaV0pLnRyaWdnZXIobmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMub24obmFtZSwgdGFyZ2V0U2VsZWN0b3IsIGxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgfTtcbn1cbmZvciAobGV0IGkgPSAwOyBpIDwgc2hvcnRjdXRzLmxlbmd0aDsgaSArPSAxKSB7XG4gIGNyZWF0ZU1ldGhvZChzaG9ydGN1dHNbaV0pO1xufVxuXG5jb25zdCBTY3JvbGwgPSB7XG4gIHNjcm9sbFRvKC4uLmFyZ3MpIHtcbiAgICBsZXQgW2xlZnQsIHRvcCwgZHVyYXRpb24sIGVhc2luZywgY2FsbGJhY2tdID0gYXJncztcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDQgJiYgdHlwZW9mIGVhc2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY2FsbGJhY2sgPSBlYXNpbmc7XG4gICAgICBbbGVmdCwgdG9wLCBkdXJhdGlvbiwgY2FsbGJhY2ssIGVhc2luZ10gPSBhcmdzO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGVhc2luZyA9PT0gJ3VuZGVmaW5lZCcpIGVhc2luZyA9ICdzd2luZyc7XG5cbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIGFuaW1hdGUoKSB7XG4gICAgICBjb25zdCBlbCA9IHRoaXM7XG4gICAgICBsZXQgY3VycmVudFRvcDtcbiAgICAgIGxldCBjdXJyZW50TGVmdDtcbiAgICAgIGxldCBtYXhUb3A7XG4gICAgICBsZXQgbWF4TGVmdDtcbiAgICAgIGxldCBuZXdUb3A7XG4gICAgICBsZXQgbmV3TGVmdDtcbiAgICAgIGxldCBzY3JvbGxUb3A7XG4gICAgICBsZXQgc2Nyb2xsTGVmdDtcbiAgICAgIGxldCBhbmltYXRlVG9wID0gdG9wID4gMCB8fCB0b3AgPT09IDA7XG4gICAgICBsZXQgYW5pbWF0ZUxlZnQgPSBsZWZ0ID4gMCB8fCBsZWZ0ID09PSAwO1xuICAgICAgaWYgKHR5cGVvZiBlYXNpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGVhc2luZyA9ICdzd2luZyc7XG4gICAgICB9XG4gICAgICBpZiAoYW5pbWF0ZVRvcCkge1xuICAgICAgICBjdXJyZW50VG9wID0gZWwuc2Nyb2xsVG9wO1xuICAgICAgICBpZiAoIWR1cmF0aW9uKSB7XG4gICAgICAgICAgZWwuc2Nyb2xsVG9wID0gdG9wO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYW5pbWF0ZUxlZnQpIHtcbiAgICAgICAgY3VycmVudExlZnQgPSBlbC5zY3JvbGxMZWZ0O1xuICAgICAgICBpZiAoIWR1cmF0aW9uKSB7XG4gICAgICAgICAgZWwuc2Nyb2xsTGVmdCA9IGxlZnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghZHVyYXRpb24pIHJldHVybjtcbiAgICAgIGlmIChhbmltYXRlVG9wKSB7XG4gICAgICAgIG1heFRvcCA9IGVsLnNjcm9sbEhlaWdodCAtIGVsLm9mZnNldEhlaWdodDtcbiAgICAgICAgbmV3VG9wID0gTWF0aC5tYXgoTWF0aC5taW4odG9wLCBtYXhUb3ApLCAwKTtcbiAgICAgIH1cbiAgICAgIGlmIChhbmltYXRlTGVmdCkge1xuICAgICAgICBtYXhMZWZ0ID0gZWwuc2Nyb2xsV2lkdGggLSBlbC5vZmZzZXRXaWR0aDtcbiAgICAgICAgbmV3TGVmdCA9IE1hdGgubWF4KE1hdGgubWluKGxlZnQsIG1heExlZnQpLCAwKTtcbiAgICAgIH1cbiAgICAgIGxldCBzdGFydFRpbWUgPSBudWxsO1xuICAgICAgaWYgKGFuaW1hdGVUb3AgJiYgbmV3VG9wID09PSBjdXJyZW50VG9wKSBhbmltYXRlVG9wID0gZmFsc2U7XG4gICAgICBpZiAoYW5pbWF0ZUxlZnQgJiYgbmV3TGVmdCA9PT0gY3VycmVudExlZnQpIGFuaW1hdGVMZWZ0ID0gZmFsc2U7XG4gICAgICBmdW5jdGlvbiByZW5kZXIodGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpKSB7XG4gICAgICAgIGlmIChzdGFydFRpbWUgPT09IG51bGwpIHtcbiAgICAgICAgICBzdGFydFRpbWUgPSB0aW1lO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gZHVyYXRpb24sIDEpLCAwKTtcbiAgICAgICAgY29uc3QgZWFzZVByb2dyZXNzID0gZWFzaW5nID09PSAnbGluZWFyJyA/IHByb2dyZXNzIDogKDAuNSAtIChNYXRoLmNvcyhwcm9ncmVzcyAqIE1hdGguUEkpIC8gMikpO1xuICAgICAgICBsZXQgZG9uZTtcbiAgICAgICAgaWYgKGFuaW1hdGVUb3ApIHNjcm9sbFRvcCA9IGN1cnJlbnRUb3AgKyAoZWFzZVByb2dyZXNzICogKG5ld1RvcCAtIGN1cnJlbnRUb3ApKTtcbiAgICAgICAgaWYgKGFuaW1hdGVMZWZ0KSBzY3JvbGxMZWZ0ID0gY3VycmVudExlZnQgKyAoZWFzZVByb2dyZXNzICogKG5ld0xlZnQgLSBjdXJyZW50TGVmdCkpO1xuICAgICAgICBpZiAoYW5pbWF0ZVRvcCAmJiBuZXdUb3AgPiBjdXJyZW50VG9wICYmIHNjcm9sbFRvcCA+PSBuZXdUb3ApIHtcbiAgICAgICAgICBlbC5zY3JvbGxUb3AgPSBuZXdUb3A7XG4gICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFuaW1hdGVUb3AgJiYgbmV3VG9wIDwgY3VycmVudFRvcCAmJiBzY3JvbGxUb3AgPD0gbmV3VG9wKSB7XG4gICAgICAgICAgZWwuc2Nyb2xsVG9wID0gbmV3VG9wO1xuICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbmltYXRlTGVmdCAmJiBuZXdMZWZ0ID4gY3VycmVudExlZnQgJiYgc2Nyb2xsTGVmdCA+PSBuZXdMZWZ0KSB7XG4gICAgICAgICAgZWwuc2Nyb2xsTGVmdCA9IG5ld0xlZnQ7XG4gICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFuaW1hdGVMZWZ0ICYmIG5ld0xlZnQgPCBjdXJyZW50TGVmdCAmJiBzY3JvbGxMZWZ0IDw9IG5ld0xlZnQpIHtcbiAgICAgICAgICBlbC5zY3JvbGxMZWZ0ID0gbmV3TGVmdDtcbiAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5pbWF0ZVRvcCkgZWwuc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICAgICAgICBpZiAoYW5pbWF0ZUxlZnQpIGVsLnNjcm9sbExlZnQgPSBzY3JvbGxMZWZ0O1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICAgIH1cbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xuICAgIH0pO1xuICB9LFxuICAvLyBzY3JvbGxUb3AodG9wLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFjaykge1xuICBzY3JvbGxUb3AoLi4uYXJncykge1xuICAgIGxldCBbdG9wLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFja10gPSBhcmdzO1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2YgZWFzaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBbdG9wLCBkdXJhdGlvbiwgY2FsbGJhY2ssIGVhc2luZ10gPSBhcmdzO1xuICAgIH1cbiAgICBjb25zdCBkb20gPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgdG9wID09PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKGRvbS5sZW5ndGggPiAwKSByZXR1cm4gZG9tWzBdLnNjcm9sbFRvcDtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZG9tLnNjcm9sbFRvKHVuZGVmaW5lZCwgdG9wLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFjayk7XG4gIH0sXG4gIHNjcm9sbExlZnQoLi4uYXJncykge1xuICAgIGxldCBbbGVmdCwgZHVyYXRpb24sIGVhc2luZywgY2FsbGJhY2tdID0gYXJncztcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIGVhc2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgW2xlZnQsIGR1cmF0aW9uLCBjYWxsYmFjaywgZWFzaW5nXSA9IGFyZ3M7XG4gICAgfVxuICAgIGNvbnN0IGRvbSA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiBsZWZ0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKGRvbS5sZW5ndGggPiAwKSByZXR1cm4gZG9tWzBdLnNjcm9sbExlZnQ7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGRvbS5zY3JvbGxUbyhsZWZ0LCB1bmRlZmluZWQsIGR1cmF0aW9uLCBlYXNpbmcsIGNhbGxiYWNrKTtcbiAgfSxcbn07XG5cbmZ1bmN0aW9uIGFuaW1hdGUoaW5pdGlhbFByb3BzLCBpbml0aWFsUGFyYW1zKSB7XG4gIGNvbnN0IGVscyA9IHRoaXM7XG4gIGNvbnN0IGEgPSB7XG4gICAgcHJvcHM6ICQkMS5leHRlbmQoe30sIGluaXRpYWxQcm9wcyksXG4gICAgcGFyYW1zOiAkJDEuZXh0ZW5kKHtcbiAgICAgIGR1cmF0aW9uOiAzMDAsXG4gICAgICBlYXNpbmc6ICdzd2luZycsIC8vIG9yICdsaW5lYXInXG4gICAgICAvKiBDYWxsYmFja3NcbiAgICAgIGJlZ2luKGVsZW1lbnRzKVxuICAgICAgY29tcGxldGUoZWxlbWVudHMpXG4gICAgICBwcm9ncmVzcyhlbGVtZW50cywgY29tcGxldGUsIHJlbWFpbmluZywgc3RhcnQsIHR3ZWVuVmFsdWUpXG4gICAgICAqL1xuICAgIH0sIGluaXRpYWxQYXJhbXMpLFxuXG4gICAgZWxlbWVudHM6IGVscyxcbiAgICBhbmltYXRpbmc6IGZhbHNlLFxuICAgIHF1ZTogW10sXG5cbiAgICBlYXNpbmdQcm9ncmVzcyhlYXNpbmcsIHByb2dyZXNzKSB7XG4gICAgICBpZiAoZWFzaW5nID09PSAnc3dpbmcnKSB7XG4gICAgICAgIHJldHVybiAwLjUgLSAoTWF0aC5jb3MocHJvZ3Jlc3MgKiBNYXRoLlBJKSAvIDIpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBlYXNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGVhc2luZyhwcm9ncmVzcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvZ3Jlc3M7XG4gICAgfSxcbiAgICBzdG9wKCkge1xuICAgICAgaWYgKGEuZnJhbWVJZCkge1xuICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShhLmZyYW1lSWQpO1xuICAgICAgfVxuICAgICAgYS5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgIGEuZWxlbWVudHMuZWFjaCgoaW5kZXgsIGVsKSA9PiB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBlbDtcbiAgICAgICAgZGVsZXRlIGVsZW1lbnQuZG9tN0FuaW1hdGVJbnN0YW5jZTtcbiAgICAgIH0pO1xuICAgICAgYS5xdWUgPSBbXTtcbiAgICB9LFxuICAgIGRvbmUoY29tcGxldGUpIHtcbiAgICAgIGEuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICBhLmVsZW1lbnRzLmVhY2goKGluZGV4LCBlbCkgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZWw7XG4gICAgICAgIGRlbGV0ZSBlbGVtZW50LmRvbTdBbmltYXRlSW5zdGFuY2U7XG4gICAgICB9KTtcbiAgICAgIGlmIChjb21wbGV0ZSkgY29tcGxldGUoZWxzKTtcbiAgICAgIGlmIChhLnF1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHF1ZSA9IGEucXVlLnNoaWZ0KCk7XG4gICAgICAgIGEuYW5pbWF0ZShxdWVbMF0sIHF1ZVsxXSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhbmltYXRlKHByb3BzLCBwYXJhbXMpIHtcbiAgICAgIGlmIChhLmFuaW1hdGluZykge1xuICAgICAgICBhLnF1ZS5wdXNoKFtwcm9wcywgcGFyYW1zXSk7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfVxuICAgICAgY29uc3QgZWxlbWVudHMgPSBbXTtcblxuICAgICAgLy8gRGVmaW5lICYgQ2FjaGUgSW5pdGlhbHMgJiBVbml0c1xuICAgICAgYS5lbGVtZW50cy5lYWNoKChpbmRleCwgZWwpID0+IHtcbiAgICAgICAgbGV0IGluaXRpYWxGdWxsVmFsdWU7XG4gICAgICAgIGxldCBpbml0aWFsVmFsdWU7XG4gICAgICAgIGxldCB1bml0O1xuICAgICAgICBsZXQgZmluYWxWYWx1ZTtcbiAgICAgICAgbGV0IGZpbmFsRnVsbFZhbHVlO1xuXG4gICAgICAgIGlmICghZWwuZG9tN0FuaW1hdGVJbnN0YW5jZSkgYS5lbGVtZW50c1tpbmRleF0uZG9tN0FuaW1hdGVJbnN0YW5jZSA9IGE7XG5cbiAgICAgICAgZWxlbWVudHNbaW5kZXhdID0ge1xuICAgICAgICAgIGNvbnRhaW5lcjogZWwsXG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5rZXlzKHByb3BzKS5mb3JFYWNoKChwcm9wKSA9PiB7XG4gICAgICAgICAgaW5pdGlhbEZ1bGxWYWx1ZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApLnJlcGxhY2UoJywnLCAnLicpO1xuICAgICAgICAgIGluaXRpYWxWYWx1ZSA9IHBhcnNlRmxvYXQoaW5pdGlhbEZ1bGxWYWx1ZSk7XG4gICAgICAgICAgdW5pdCA9IGluaXRpYWxGdWxsVmFsdWUucmVwbGFjZShpbml0aWFsVmFsdWUsICcnKTtcbiAgICAgICAgICBmaW5hbFZhbHVlID0gcGFyc2VGbG9hdChwcm9wc1twcm9wXSk7XG4gICAgICAgICAgZmluYWxGdWxsVmFsdWUgPSBwcm9wc1twcm9wXSArIHVuaXQ7XG4gICAgICAgICAgZWxlbWVudHNbaW5kZXhdW3Byb3BdID0ge1xuICAgICAgICAgICAgaW5pdGlhbEZ1bGxWYWx1ZSxcbiAgICAgICAgICAgIGluaXRpYWxWYWx1ZSxcbiAgICAgICAgICAgIHVuaXQsXG4gICAgICAgICAgICBmaW5hbFZhbHVlLFxuICAgICAgICAgICAgZmluYWxGdWxsVmFsdWUsXG4gICAgICAgICAgICBjdXJyZW50VmFsdWU6IGluaXRpYWxWYWx1ZSxcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBsZXQgc3RhcnRUaW1lID0gbnVsbDtcbiAgICAgIGxldCB0aW1lO1xuICAgICAgbGV0IGVsZW1lbnRzRG9uZSA9IDA7XG4gICAgICBsZXQgcHJvcHNEb25lID0gMDtcbiAgICAgIGxldCBkb25lO1xuICAgICAgbGV0IGJlZ2FuID0gZmFsc2U7XG5cbiAgICAgIGEuYW5pbWF0aW5nID0gdHJ1ZTtcblxuICAgICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIGxldCBwcm9ncmVzcztcbiAgICAgICAgbGV0IGVhc2VQcm9ncmVzcztcbiAgICAgICAgLy8gbGV0IGVsO1xuICAgICAgICBpZiAoIWJlZ2FuKSB7XG4gICAgICAgICAgYmVnYW4gPSB0cnVlO1xuICAgICAgICAgIGlmIChwYXJhbXMuYmVnaW4pIHBhcmFtcy5iZWdpbihlbHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydFRpbWUgPT09IG51bGwpIHtcbiAgICAgICAgICBzdGFydFRpbWUgPSB0aW1lO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMucHJvZ3Jlc3MpIHtcbiAgICAgICAgICBwYXJhbXMucHJvZ3Jlc3MoZWxzLCBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBwYXJhbXMuZHVyYXRpb24sIDEpLCAwKSwgKChzdGFydFRpbWUgKyBwYXJhbXMuZHVyYXRpb24pIC0gdGltZSA8IDAgPyAwIDogKHN0YXJ0VGltZSArIHBhcmFtcy5kdXJhdGlvbikgLSB0aW1lKSwgc3RhcnRUaW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICBjb25zdCBlbCA9IGVsZW1lbnQ7XG4gICAgICAgICAgaWYgKGRvbmUgfHwgZWwuZG9uZSkgcmV0dXJuO1xuICAgICAgICAgIE9iamVjdC5rZXlzKHByb3BzKS5mb3JFYWNoKChwcm9wKSA9PiB7XG4gICAgICAgICAgICBpZiAoZG9uZSB8fCBlbC5kb25lKSByZXR1cm47XG4gICAgICAgICAgICBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKCh0aW1lIC0gc3RhcnRUaW1lKSAvIHBhcmFtcy5kdXJhdGlvbiwgMSksIDApO1xuICAgICAgICAgICAgZWFzZVByb2dyZXNzID0gYS5lYXNpbmdQcm9ncmVzcyhwYXJhbXMuZWFzaW5nLCBwcm9ncmVzcyk7XG4gICAgICAgICAgICBjb25zdCB7IGluaXRpYWxWYWx1ZSwgZmluYWxWYWx1ZSwgdW5pdCB9ID0gZWxbcHJvcF07XG4gICAgICAgICAgICBlbFtwcm9wXS5jdXJyZW50VmFsdWUgPSBpbml0aWFsVmFsdWUgKyAoZWFzZVByb2dyZXNzICogKGZpbmFsVmFsdWUgLSBpbml0aWFsVmFsdWUpKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IGVsW3Byb3BdLmN1cnJlbnRWYWx1ZTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAoZmluYWxWYWx1ZSA+IGluaXRpYWxWYWx1ZSAmJiBjdXJyZW50VmFsdWUgPj0gZmluYWxWYWx1ZSkgfHxcbiAgICAgICAgICAgICAgKGZpbmFsVmFsdWUgPCBpbml0aWFsVmFsdWUgJiYgY3VycmVudFZhbHVlIDw9IGZpbmFsVmFsdWUpKSB7XG4gICAgICAgICAgICAgIGVsLmNvbnRhaW5lci5zdHlsZVtwcm9wXSA9IGZpbmFsVmFsdWUgKyB1bml0O1xuICAgICAgICAgICAgICBwcm9wc0RvbmUgKz0gMTtcbiAgICAgICAgICAgICAgaWYgKHByb3BzRG9uZSA9PT0gT2JqZWN0LmtleXMocHJvcHMpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGVsLmRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGVsZW1lbnRzRG9uZSArPSAxO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChlbGVtZW50c0RvbmUgPT09IGVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICBhLmRvbmUocGFyYW1zLmNvbXBsZXRlKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWwuY29udGFpbmVyLnN0eWxlW3Byb3BdID0gY3VycmVudFZhbHVlICsgdW5pdDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgICAgIC8vIFRoZW4gY2FsbFxuICAgICAgICBhLmZyYW1lSWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICAgIH1cbiAgICAgIGEuZnJhbWVJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xuICAgICAgcmV0dXJuIGE7XG4gICAgfSxcbiAgfTtcblxuICBpZiAoYS5lbGVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZWxzO1xuICB9XG5cbiAgbGV0IGFuaW1hdGVJbnN0YW5jZTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmVsZW1lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGEuZWxlbWVudHNbaV0uZG9tN0FuaW1hdGVJbnN0YW5jZSkge1xuICAgICAgYW5pbWF0ZUluc3RhbmNlID0gYS5lbGVtZW50c1tpXS5kb203QW5pbWF0ZUluc3RhbmNlO1xuICAgIH0gZWxzZSBhLmVsZW1lbnRzW2ldLmRvbTdBbmltYXRlSW5zdGFuY2UgPSBhO1xuICB9XG4gIGlmICghYW5pbWF0ZUluc3RhbmNlKSB7XG4gICAgYW5pbWF0ZUluc3RhbmNlID0gYTtcbiAgfVxuXG4gIGlmIChpbml0aWFsUHJvcHMgPT09ICdzdG9wJykge1xuICAgIGFuaW1hdGVJbnN0YW5jZS5zdG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgYW5pbWF0ZUluc3RhbmNlLmFuaW1hdGUoYS5wcm9wcywgYS5wYXJhbXMpO1xuICB9XG5cbiAgcmV0dXJuIGVscztcbn1cblxuZnVuY3Rpb24gc3RvcCgpIHtcbiAgY29uc3QgZWxzID0gdGhpcztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoZWxzW2ldLmRvbTdBbmltYXRlSW5zdGFuY2UpIHtcbiAgICAgIGVsc1tpXS5kb203QW5pbWF0ZUluc3RhbmNlLnN0b3AoKTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgQW5pbWF0ZSA9IHtcbiAgYW5pbWF0ZSxcbiAgc3RvcCxcbn07XG5cbi8vIEdsb2JhbCBBamF4IFNldHVwXG5jb25zdCBnbG9iYWxBamF4T3B0aW9ucyA9IHt9O1xuZnVuY3Rpb24gYWpheFNldHVwKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMudHlwZSAmJiAhb3B0aW9ucy5tZXRob2QpIG9wdGlvbnMubWV0aG9kID0gb3B0aW9ucy50eXBlO1xuICBlYWNoKG9wdGlvbnMsIChvcHRpb25OYW1lLCBvcHRpb25WYWx1ZSkgPT4ge1xuICAgIGdsb2JhbEFqYXhPcHRpb25zW29wdGlvbk5hbWVdID0gb3B0aW9uVmFsdWU7XG4gIH0pO1xufVxuXG4vLyBKU09OUCBSZXF1ZXN0c1xubGV0IGpzb25wUmVxdWVzdHMgPSAwO1xuXG4vLyBBamF4XG5mdW5jdGlvbiBhamF4KG9wdGlvbnMpIHtcbiAgY29uc3QgZGVmYXVsdHMgPSB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICBkYXRhOiBmYWxzZSxcbiAgICBhc3luYzogdHJ1ZSxcbiAgICBjYWNoZTogdHJ1ZSxcbiAgICB1c2VyOiAnJyxcbiAgICBwYXNzd29yZDogJycsXG4gICAgaGVhZGVyczoge30sXG4gICAgeGhyRmllbGRzOiB7fSxcbiAgICBzdGF0dXNDb2RlOiB7fSxcbiAgICBwcm9jZXNzRGF0YTogdHJ1ZSxcbiAgICBkYXRhVHlwZTogJ3RleHQnLFxuICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgICB0aW1lb3V0OiAwLFxuICB9O1xuICBjb25zdCBjYWxsYmFja3MgPSBbJ2JlZm9yZVNlbmQnLCAnZXJyb3InLCAnY29tcGxldGUnLCAnc3VjY2VzcycsICdzdGF0dXNDb2RlJ107XG5cbiAgLy8gRm9yIGpRdWVyeSBndXlzXG4gIGlmIChvcHRpb25zLnR5cGUpIG9wdGlvbnMubWV0aG9kID0gb3B0aW9ucy50eXBlO1xuXG4gIC8vIEdsb2JhbCBvcHRpb25zXG4gIGNvbnN0IGdsb2JhbHMgPSBnbG9iYWxBamF4T3B0aW9ucztcblxuICAvLyBNZXJnZSBnbG9iYWwgYW5kIGRlZmF1bHRzXG4gIGVhY2goZ2xvYmFscywgKGdsb2JhbE9wdGlvbk5hbWUsIGdsb2JhbE9wdGlvblZhbHVlKSA9PiB7XG4gICAgaWYgKGNhbGxiYWNrcy5pbmRleE9mKGdsb2JhbE9wdGlvbk5hbWUpIDwgMCkgZGVmYXVsdHNbZ2xvYmFsT3B0aW9uTmFtZV0gPSBnbG9iYWxPcHRpb25WYWx1ZTtcbiAgfSk7XG5cbiAgLy8gRnVuY3Rpb24gdG8gcnVuIFhIUiBjYWxsYmFja3MgYW5kIGV2ZW50c1xuICBmdW5jdGlvbiBmaXJlQWpheENhbGxiYWNrKGV2ZW50TmFtZSwgZXZlbnREYXRhLCBjYWxsYmFja05hbWUpIHtcbiAgICBjb25zdCBhID0gYXJndW1lbnRzO1xuICAgIGlmIChldmVudE5hbWUpICQkMShkb2N1bWVudCkudHJpZ2dlcihldmVudE5hbWUsIGV2ZW50RGF0YSk7XG4gICAgaWYgKGNhbGxiYWNrTmFtZSkge1xuICAgICAgLy8gR2xvYmFsIGNhbGxiYWNrXG4gICAgICBpZiAoY2FsbGJhY2tOYW1lIGluIGdsb2JhbHMpIGdsb2JhbHNbY2FsbGJhY2tOYW1lXShhWzNdLCBhWzRdLCBhWzVdLCBhWzZdKTtcbiAgICAgIC8vIE9wdGlvbnMgY2FsbGJhY2tcbiAgICAgIGlmIChvcHRpb25zW2NhbGxiYWNrTmFtZV0pIG9wdGlvbnNbY2FsbGJhY2tOYW1lXShhWzNdLCBhWzRdLCBhWzVdLCBhWzZdKTtcbiAgICB9XG4gIH1cblxuICAvLyBNZXJnZSBvcHRpb25zIGFuZCBkZWZhdWx0c1xuICBlYWNoKGRlZmF1bHRzLCAocHJvcCwgZGVmYXVsdFZhbHVlKSA9PiB7XG4gICAgaWYgKCEocHJvcCBpbiBvcHRpb25zKSkgb3B0aW9uc1twcm9wXSA9IGRlZmF1bHRWYWx1ZTtcbiAgfSk7XG5cbiAgLy8gRGVmYXVsdCBVUkxcbiAgaWYgKCFvcHRpb25zLnVybCkge1xuICAgIG9wdGlvbnMudXJsID0gd2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKCk7XG4gIH1cbiAgLy8gUGFyYW1ldGVycyBQcmVmaXhcbiAgbGV0IHBhcmFtc1ByZWZpeCA9IG9wdGlvbnMudXJsLmluZGV4T2YoJz8nKSA+PSAwID8gJyYnIDogJz8nO1xuXG4gIC8vIFVDIG1ldGhvZFxuICBjb25zdCBtZXRob2QgPSBvcHRpb25zLm1ldGhvZC50b1VwcGVyQ2FzZSgpO1xuXG4gIC8vIERhdGEgdG8gbW9kaWZ5IEdFVCBVUkxcbiAgaWYgKChtZXRob2QgPT09ICdHRVQnIHx8IG1ldGhvZCA9PT0gJ0hFQUQnIHx8IG1ldGhvZCA9PT0gJ09QVElPTlMnIHx8IG1ldGhvZCA9PT0gJ0RFTEVURScpICYmIG9wdGlvbnMuZGF0YSkge1xuICAgIGxldCBzdHJpbmdEYXRhO1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gU2hvdWxkIGJlIGtleT12YWx1ZSBzdHJpbmdcbiAgICAgIGlmIChvcHRpb25zLmRhdGEuaW5kZXhPZignPycpID49IDApIHN0cmluZ0RhdGEgPSBvcHRpb25zLmRhdGEuc3BsaXQoJz8nKVsxXTtcbiAgICAgIGVsc2Ugc3RyaW5nRGF0YSA9IG9wdGlvbnMuZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2hvdWxkIGJlIGtleT12YWx1ZSBvYmplY3RcbiAgICAgIHN0cmluZ0RhdGEgPSBzZXJpYWxpemVPYmplY3Qob3B0aW9ucy5kYXRhKTtcbiAgICB9XG4gICAgaWYgKHN0cmluZ0RhdGEubGVuZ3RoKSB7XG4gICAgICBvcHRpb25zLnVybCArPSBwYXJhbXNQcmVmaXggKyBzdHJpbmdEYXRhO1xuICAgICAgaWYgKHBhcmFtc1ByZWZpeCA9PT0gJz8nKSBwYXJhbXNQcmVmaXggPSAnJic7XG4gICAgfVxuICB9XG4gIC8vIEpTT05QXG4gIGlmIChvcHRpb25zLmRhdGFUeXBlID09PSAnanNvbicgJiYgb3B0aW9ucy51cmwuaW5kZXhPZignY2FsbGJhY2s9JykgPj0gMCkge1xuICAgIGNvbnN0IGNhbGxiYWNrTmFtZSA9IGBmN2pzb25wXyR7RGF0ZS5ub3coKSArICgoanNvbnBSZXF1ZXN0cyArPSAxKSl9YDtcbiAgICBsZXQgYWJvcnRUaW1lb3V0O1xuICAgIGNvbnN0IGNhbGxiYWNrU3BsaXQgPSBvcHRpb25zLnVybC5zcGxpdCgnY2FsbGJhY2s9Jyk7XG4gICAgbGV0IHJlcXVlc3RVcmwgPSBgJHtjYWxsYmFja1NwbGl0WzBdfWNhbGxiYWNrPSR7Y2FsbGJhY2tOYW1lfWA7XG4gICAgaWYgKGNhbGxiYWNrU3BsaXRbMV0uaW5kZXhPZignJicpID49IDApIHtcbiAgICAgIGNvbnN0IGFkZFZhcnMgPSBjYWxsYmFja1NwbGl0WzFdLnNwbGl0KCcmJykuZmlsdGVyKChlbCkgPT4gZWwuaW5kZXhPZignPScpID4gMCkuam9pbignJicpO1xuICAgICAgaWYgKGFkZFZhcnMubGVuZ3RoID4gMCkgcmVxdWVzdFVybCArPSBgJiR7YWRkVmFyc31gO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSBzY3JpcHRcbiAgICBsZXQgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgICBzY3JpcHQub25lcnJvciA9IGZ1bmN0aW9uIG9uZXJyb3IoKSB7XG4gICAgICBjbGVhclRpbWVvdXQoYWJvcnRUaW1lb3V0KTtcbiAgICAgIGZpcmVBamF4Q2FsbGJhY2sodW5kZWZpbmVkLCB1bmRlZmluZWQsICdlcnJvcicsIG51bGwsICdzY3JpcHRlcnJvcicpO1xuICAgICAgZmlyZUFqYXhDYWxsYmFjaygnYWpheENvbXBsZXRlIGFqYXg6Y29tcGxldGUnLCB7IHNjcmlwdGVycm9yOiB0cnVlIH0sICdjb21wbGV0ZScsIG51bGwsICdzY3JpcHRlcnJvcicpO1xuICAgIH07XG4gICAgc2NyaXB0LnNyYyA9IHJlcXVlc3RVcmw7XG5cbiAgICAvLyBIYW5kbGVyXG4gICAgd2luZG93W2NhbGxiYWNrTmFtZV0gPSBmdW5jdGlvbiBqc29ucENhbGxiYWNrKGRhdGEpIHtcbiAgICAgIGNsZWFyVGltZW91dChhYm9ydFRpbWVvdXQpO1xuICAgICAgZmlyZUFqYXhDYWxsYmFjayh1bmRlZmluZWQsIHVuZGVmaW5lZCwgJ3N1Y2Nlc3MnLCBkYXRhKTtcbiAgICAgIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICBzY3JpcHQgPSBudWxsO1xuICAgICAgZGVsZXRlIHdpbmRvd1tjYWxsYmFja05hbWVdO1xuICAgIH07XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZCcpLmFwcGVuZENoaWxkKHNjcmlwdCk7XG5cbiAgICBpZiAob3B0aW9ucy50aW1lb3V0ID4gMCkge1xuICAgICAgYWJvcnRUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgIGZpcmVBamF4Q2FsbGJhY2sodW5kZWZpbmVkLCB1bmRlZmluZWQsICdlcnJvcicsIG51bGwsICd0aW1lb3V0Jyk7XG4gICAgICB9LCBvcHRpb25zLnRpbWVvdXQpO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIENhY2hlIGZvciBHRVQvSEVBRCByZXF1ZXN0c1xuICBpZiAobWV0aG9kID09PSAnR0VUJyB8fCBtZXRob2QgPT09ICdIRUFEJyB8fCBtZXRob2QgPT09ICdPUFRJT05TJyB8fCBtZXRob2QgPT09ICdERUxFVEUnKSB7XG4gICAgaWYgKG9wdGlvbnMuY2FjaGUgPT09IGZhbHNlKSB7XG4gICAgICBvcHRpb25zLnVybCArPSBgJHtwYXJhbXNQcmVmaXh9X25vY2FjaGUke0RhdGUubm93KCl9YDtcbiAgICB9XG4gIH1cblxuICAvLyBDcmVhdGUgWEhSXG4gIGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gIC8vIFNhdmUgUmVxdWVzdCBVUkxcbiAgeGhyLnJlcXVlc3RVcmwgPSBvcHRpb25zLnVybDtcbiAgeGhyLnJlcXVlc3RQYXJhbWV0ZXJzID0gb3B0aW9ucztcblxuICAvLyBPcGVuIFhIUlxuICB4aHIub3BlbihtZXRob2QsIG9wdGlvbnMudXJsLCBvcHRpb25zLmFzeW5jLCBvcHRpb25zLnVzZXIsIG9wdGlvbnMucGFzc3dvcmQpO1xuXG4gIC8vIENyZWF0ZSBQT1NUIERhdGFcbiAgbGV0IHBvc3REYXRhID0gbnVsbDtcblxuICBpZiAoKG1ldGhvZCA9PT0gJ1BPU1QnIHx8IG1ldGhvZCA9PT0gJ1BVVCcgfHwgbWV0aG9kID09PSAnUEFUQ0gnKSAmJiBvcHRpb25zLmRhdGEpIHtcbiAgICBpZiAob3B0aW9ucy5wcm9jZXNzRGF0YSkge1xuICAgICAgY29uc3QgcG9zdERhdGFJbnN0YW5jZXMgPSBbQXJyYXlCdWZmZXIsIEJsb2IsIERvY3VtZW50LCBGb3JtRGF0YV07XG4gICAgICAvLyBQb3N0IERhdGFcbiAgICAgIGlmIChwb3N0RGF0YUluc3RhbmNlcy5pbmRleE9mKG9wdGlvbnMuZGF0YS5jb25zdHJ1Y3RvcikgPj0gMCkge1xuICAgICAgICBwb3N0RGF0YSA9IG9wdGlvbnMuZGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFBPU1QgSGVhZGVyc1xuICAgICAgICBsZXQgYm91bmRhcnkgPSBgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJHtEYXRlLm5vdygpLnRvU3RyaW5nKDE2KX1gO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmNvbnRlbnRUeXBlID09PSAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScpIHtcbiAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgYG11bHRpcGFydC9mb3JtLWRhdGE7IGJvdW5kYXJ5PSR7Ym91bmRhcnl9YCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtVHlwZScsIG9wdGlvbnMuY29udGVudFR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIHBvc3REYXRhID0gJyc7XG4gICAgICAgIGxldCBkYXRhID0gc2VyaWFsaXplT2JqZWN0KG9wdGlvbnMuZGF0YSk7XG4gICAgICAgIGlmIChvcHRpb25zLmNvbnRlbnRUeXBlID09PSAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScpIHtcbiAgICAgICAgICBkYXRhID0gZGF0YS5zcGxpdCgnJicpO1xuICAgICAgICAgIGNvbnN0IG5ld0RhdGEgPSBbXTtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIG5ld0RhdGEucHVzaChgQ29udGVudC1EaXNwb3NpdGlvbjogZm9ybS1kYXRhOyBuYW1lPVwiJHtkYXRhW2ldLnNwbGl0KCc9JylbMF19XCJcXHJcXG5cXHJcXG4ke2RhdGFbaV0uc3BsaXQoJz0nKVsxXX1cXHJcXG5gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcG9zdERhdGEgPSBgLS0ke2JvdW5kYXJ5fVxcclxcbiR7bmV3RGF0YS5qb2luKGAtLSR7Ym91bmRhcnl9XFxyXFxuYCl9LS0ke2JvdW5kYXJ5fS0tXFxyXFxuYDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwb3N0RGF0YSA9IGRhdGE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcG9zdERhdGEgPSBvcHRpb25zLmRhdGE7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkaXRpb25hbCBoZWFkZXJzXG4gIGlmIChvcHRpb25zLmhlYWRlcnMpIHtcbiAgICBlYWNoKG9wdGlvbnMuaGVhZGVycywgKGhlYWRlck5hbWUsIGhlYWRlckNhbGxiYWNrKSA9PiB7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihoZWFkZXJOYW1lLCBoZWFkZXJDYWxsYmFjayk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBDaGVjayBmb3IgY3Jvc3NEb21haW5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmNyb3NzRG9tYWluID09PSAndW5kZWZpbmVkJykge1xuICAgIG9wdGlvbnMuY3Jvc3NEb21haW4gPSAvXihbXFx3LV0rOik/XFwvXFwvKFteXFwvXSspLy50ZXN0KG9wdGlvbnMudXJsKSAmJiBSZWdFeHAuJDIgIT09IHdpbmRvdy5sb2NhdGlvbi5ob3N0O1xuICB9XG5cbiAgaWYgKCFvcHRpb25zLmNyb3NzRG9tYWluKSB7XG4gICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ1gtUmVxdWVzdGVkLVdpdGgnLCAnWE1MSHR0cFJlcXVlc3QnKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLnhockZpZWxkcykge1xuICAgIGVhY2gob3B0aW9ucy54aHJGaWVsZHMsIChmaWVsZE5hbWUsIGZpZWxkVmFsdWUpID0+IHtcbiAgICAgIHhocltmaWVsZE5hbWVdID0gZmllbGRWYWx1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIGxldCB4aHJUaW1lb3V0O1xuICAvLyBIYW5kbGUgWEhSXG4gIHhoci5vbmxvYWQgPSBmdW5jdGlvbiBvbmxvYWQoKSB7XG4gICAgaWYgKHhoclRpbWVvdXQpIGNsZWFyVGltZW91dCh4aHJUaW1lb3V0KTtcbiAgICBpZiAoKHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPCAzMDApIHx8IHhoci5zdGF0dXMgPT09IDApIHtcbiAgICAgIGxldCByZXNwb25zZURhdGE7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhVHlwZSA9PT0gJ2pzb24nKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVzcG9uc2VEYXRhID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICBmaXJlQWpheENhbGxiYWNrKCdhamF4U3VjY2VzcyBhamF4OnN1Y2Nlc3MnLCB7IHhociB9LCAnc3VjY2VzcycsIHJlc3BvbnNlRGF0YSwgeGhyLnN0YXR1cywgeGhyKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgZmlyZUFqYXhDYWxsYmFjaygnYWpheEVycm9yIGFqYXg6ZXJyb3InLCB7IHhociwgcGFyc2VlcnJvcjogdHJ1ZSB9LCAnZXJyb3InLCB4aHIsICdwYXJzZWVycm9yJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3BvbnNlRGF0YSA9IHhoci5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JyB8fCB4aHIucmVzcG9uc2VUeXBlID09PSAnJyA/IHhoci5yZXNwb25zZVRleHQgOiB4aHIucmVzcG9uc2U7XG4gICAgICAgIGZpcmVBamF4Q2FsbGJhY2soJ2FqYXhTdWNjZXNzIGFqYXg6c3VjY2VzcycsIHsgeGhyIH0sICdzdWNjZXNzJywgcmVzcG9uc2VEYXRhLCB4aHIuc3RhdHVzLCB4aHIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmaXJlQWpheENhbGxiYWNrKCdhamF4RXJyb3IgYWpheDplcnJvcicsIHsgeGhyIH0sICdlcnJvcicsIHhociwgeGhyLnN0YXR1cyk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnN0YXR1c0NvZGUpIHtcbiAgICAgIGlmIChnbG9iYWxzLnN0YXR1c0NvZGUgJiYgZ2xvYmFscy5zdGF0dXNDb2RlW3hoci5zdGF0dXNdKSBnbG9iYWxzLnN0YXR1c0NvZGVbeGhyLnN0YXR1c10oeGhyKTtcbiAgICAgIGlmIChvcHRpb25zLnN0YXR1c0NvZGVbeGhyLnN0YXR1c10pIG9wdGlvbnMuc3RhdHVzQ29kZVt4aHIuc3RhdHVzXSh4aHIpO1xuICAgIH1cbiAgICBmaXJlQWpheENhbGxiYWNrKCdhamF4Q29tcGxldGUgYWpheDpjb21wbGV0ZScsIHsgeGhyIH0sICdjb21wbGV0ZScsIHhociwgeGhyLnN0YXR1cyk7XG4gIH07XG5cbiAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbiBvbmVycm9yKCkge1xuICAgIGlmICh4aHJUaW1lb3V0KSBjbGVhclRpbWVvdXQoeGhyVGltZW91dCk7XG4gICAgZmlyZUFqYXhDYWxsYmFjaygnYWpheEVycm9yIGFqYXg6ZXJyb3InLCB7IHhociB9LCAnZXJyb3InLCB4aHIsIHhoci5zdGF0dXMpO1xuICAgIGZpcmVBamF4Q2FsbGJhY2soJ2FqYXhDb21wbGV0ZSBhamF4OmNvbXBsZXRlJywgeyB4aHIsIGVycm9yOiB0cnVlIH0sICdjb21wbGV0ZScsIHhociwgJ2Vycm9yJyk7XG4gIH07XG5cbiAgLy8gQWpheCBzdGFydCBjYWxsYmFja1xuICBmaXJlQWpheENhbGxiYWNrKCdhamF4U3RhcnQgYWpheDpzdGFydCcsIHsgeGhyIH0sICdzdGFydCcsIHhocik7XG4gIGZpcmVBamF4Q2FsbGJhY2sodW5kZWZpbmVkLCB1bmRlZmluZWQsICdiZWZvcmVTZW5kJywgeGhyKTtcblxuICAvLyBUaW1lb3V0XG4gIGlmIChvcHRpb25zLnRpbWVvdXQgPiAwKSB7XG4gICAgeGhyLm9uYWJvcnQgPSBmdW5jdGlvbiBvbmFib3J0KCkge1xuICAgICAgaWYgKHhoclRpbWVvdXQpIGNsZWFyVGltZW91dCh4aHJUaW1lb3V0KTtcbiAgICB9O1xuICAgIHhoclRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHhoci5hYm9ydCgpO1xuICAgICAgZmlyZUFqYXhDYWxsYmFjaygnYWpheEVycm9yIGFqYXg6ZXJyb3InLCB7IHhociwgdGltZW91dDogdHJ1ZSB9LCAnZXJyb3InLCB4aHIsICd0aW1lb3V0Jyk7XG4gICAgICBmaXJlQWpheENhbGxiYWNrKCdhamF4Q29tcGxldGUgYWpheDpjb21wbGV0ZScsIHsgeGhyLCB0aW1lb3V0OiB0cnVlIH0sICdjb21wbGV0ZScsIHhociwgJ3RpbWVvdXQnKTtcbiAgICB9LCBvcHRpb25zLnRpbWVvdXQpO1xuICB9XG5cbiAgLy8gU2VuZCBYSFJcbiAgeGhyLnNlbmQocG9zdERhdGEpO1xuXG4gIC8vIFJldHVybiBYSFIgb2JqZWN0XG4gIHJldHVybiB4aHI7XG59XG5cbmZ1bmN0aW9uIGFqYXhTaG9ydGN1dChtZXRob2QsIC4uLmFyZ3MpIHtcbiAgbGV0IHVybDtcbiAgbGV0IGRhdGE7XG4gIGxldCBzdWNjZXNzO1xuICBsZXQgZXJyb3I7XG4gIGxldCBkYXRhVHlwZTtcbiAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgW3VybCwgc3VjY2VzcywgZXJyb3IsIGRhdGFUeXBlXSA9IGFyZ3M7XG4gIH0gZWxzZSB7XG4gICAgW3VybCwgZGF0YSwgc3VjY2VzcywgZXJyb3IsIGRhdGFUeXBlXSA9IGFyZ3M7XG4gIH1cbiAgW3N1Y2Nlc3MsIGVycm9yXS5mb3JFYWNoKChjYWxsYmFjaykgPT4ge1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICBkYXRhVHlwZSA9IGNhbGxiYWNrO1xuICAgICAgaWYgKGNhbGxiYWNrID09PSBzdWNjZXNzKSBzdWNjZXNzID0gdW5kZWZpbmVkO1xuICAgICAgZWxzZSBlcnJvciA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0pO1xuICBkYXRhVHlwZSA9IGRhdGFUeXBlIHx8IChtZXRob2QgPT09ICdnZXRKU09OJyA/ICdqc29uJyA6IHVuZGVmaW5lZCk7XG4gIHJldHVybiBhamF4KHtcbiAgICB1cmwsXG4gICAgbWV0aG9kOiBtZXRob2QgPT09ICdwb3N0JyA/ICdQT1NUJyA6ICdHRVQnLFxuICAgIGRhdGEsXG4gICAgc3VjY2VzcyxcbiAgICBlcnJvcixcbiAgICBkYXRhVHlwZSxcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldCguLi5hcmdzKSB7XG4gIGFyZ3MudW5zaGlmdCgnZ2V0Jyk7XG4gIHJldHVybiBhamF4U2hvcnRjdXQuYXBwbHkodGhpcywgYXJncyk7XG59XG5mdW5jdGlvbiBwb3N0KC4uLmFyZ3MpIHtcbiAgYXJncy51bnNoaWZ0KCdwb3N0Jyk7XG4gIHJldHVybiBhamF4U2hvcnRjdXQuYXBwbHkodGhpcywgYXJncyk7XG59XG5mdW5jdGlvbiBnZXRKU09OKC4uLmFyZ3MpIHtcbiAgYXJncy51bnNoaWZ0KCdnZXRKU09OJyk7XG4gIHJldHVybiBhamF4U2hvcnRjdXQuYXBwbHkodGhpcywgYXJncyk7XG59XG5cbmNvbnN0IEFqYXggPSB7XG4gIF9fdXRpbHM6IHRydWUsXG4gIGFqYXhTZXR1cCxcbiAgYWpheCxcbiAgZ2V0LFxuICBwb3N0LFxuICBnZXRKU09OLFxufTtcblxuLy8gVXRpbHMgJiBIZWxwZXJzXG4kJDEudXNlKFV0aWxzLCBNZXRob2RzLCBTY3JvbGwsIEFuaW1hdGUsIEFqYXgpO1xuXG5leHBvcnQgZGVmYXVsdCAkJDE7XG4iLCIvKipcbiAqIEZyYW1ld29yazcgMi4wLjAtYmV0YS4zXG4gKiBGdWxsIGZlYXR1cmVkIG1vYmlsZSBIVE1MIGZyYW1ld29yayBmb3IgYnVpbGRpbmcgaU9TICYgQW5kcm9pZCBhcHBzXG4gKiBodHRwOi8vZnJhbWV3b3JrNy5pby9cbiAqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE3IFZsYWRpbWlyIEtoYXJsYW1waWRpXG4gKlxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKlxuICogUmVsZWFzZWQgb246IFNlcHRlbWJlciA3LCAyMDE3XG4gKi9cblxuaW1wb3J0IHQ3IGZyb20gJ3RlbXBsYXRlNyc7XG5pbXBvcnQgJCBmcm9tICdkb203JztcblxuLyoqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZ3JlL2Jlemllci1lYXNpbmdcbiAqIEJlemllckVhc2luZyAtIHVzZSBiZXppZXIgY3VydmUgZm9yIHRyYW5zaXRpb24gZWFzaW5nIGZ1bmN0aW9uXG4gKiBieSBHYcOrdGFuIFJlbmF1ZGVhdSAyMDE0IC0gMjAxNSDigJMgTUlUIExpY2Vuc2VcbiAqL1xuXG4vLyBUaGVzZSB2YWx1ZXMgYXJlIGVzdGFibGlzaGVkIGJ5IGVtcGlyaWNpc20gd2l0aCB0ZXN0cyAodHJhZGVvZmY6IHBlcmZvcm1hbmNlIFZTIHByZWNpc2lvbilcbnZhciBORVdUT05fSVRFUkFUSU9OUyA9IDQ7XG52YXIgTkVXVE9OX01JTl9TTE9QRSA9IDAuMDAxO1xudmFyIFNVQkRJVklTSU9OX1BSRUNJU0lPTiA9IDAuMDAwMDAwMTtcbnZhciBTVUJESVZJU0lPTl9NQVhfSVRFUkFUSU9OUyA9IDEwO1xuXG52YXIga1NwbGluZVRhYmxlU2l6ZSA9IDExO1xudmFyIGtTYW1wbGVTdGVwU2l6ZSA9IDEuMCAvIChrU3BsaW5lVGFibGVTaXplIC0gMS4wKTtcblxudmFyIGZsb2F0MzJBcnJheVN1cHBvcnRlZCA9IHR5cGVvZiBGbG9hdDMyQXJyYXkgPT09ICdmdW5jdGlvbic7XG5cbmZ1bmN0aW9uIEEgKGFBMSwgYUEyKSB7IHJldHVybiAxLjAgLSAzLjAgKiBhQTIgKyAzLjAgKiBhQTE7IH1cbmZ1bmN0aW9uIEIgKGFBMSwgYUEyKSB7IHJldHVybiAzLjAgKiBhQTIgLSA2LjAgKiBhQTE7IH1cbmZ1bmN0aW9uIEMgKGFBMSkgICAgICB7IHJldHVybiAzLjAgKiBhQTE7IH1cblxuLy8gUmV0dXJucyB4KHQpIGdpdmVuIHQsIHgxLCBhbmQgeDIsIG9yIHkodCkgZ2l2ZW4gdCwgeTEsIGFuZCB5Mi5cbmZ1bmN0aW9uIGNhbGNCZXppZXIgKGFULCBhQTEsIGFBMikgeyByZXR1cm4gKChBKGFBMSwgYUEyKSAqIGFUICsgQihhQTEsIGFBMikpICogYVQgKyBDKGFBMSkpICogYVQ7IH1cblxuLy8gUmV0dXJucyBkeC9kdCBnaXZlbiB0LCB4MSwgYW5kIHgyLCBvciBkeS9kdCBnaXZlbiB0LCB5MSwgYW5kIHkyLlxuZnVuY3Rpb24gZ2V0U2xvcGUgKGFULCBhQTEsIGFBMikgeyByZXR1cm4gMy4wICogQShhQTEsIGFBMikgKiBhVCAqIGFUICsgMi4wICogQihhQTEsIGFBMikgKiBhVCArIEMoYUExKTsgfVxuXG5mdW5jdGlvbiBiaW5hcnlTdWJkaXZpZGUgKGFYLCBhQSwgYUIsIG1YMSwgbVgyKSB7XG4gIHZhciBjdXJyZW50WCwgY3VycmVudFQsIGkgPSAwO1xuICBkbyB7XG4gICAgY3VycmVudFQgPSBhQSArIChhQiAtIGFBKSAvIDIuMDtcbiAgICBjdXJyZW50WCA9IGNhbGNCZXppZXIoY3VycmVudFQsIG1YMSwgbVgyKSAtIGFYO1xuICAgIGlmIChjdXJyZW50WCA+IDAuMCkge1xuICAgICAgYUIgPSBjdXJyZW50VDtcbiAgICB9IGVsc2Uge1xuICAgICAgYUEgPSBjdXJyZW50VDtcbiAgICB9XG4gIH0gd2hpbGUgKE1hdGguYWJzKGN1cnJlbnRYKSA+IFNVQkRJVklTSU9OX1BSRUNJU0lPTiAmJiArK2kgPCBTVUJESVZJU0lPTl9NQVhfSVRFUkFUSU9OUyk7XG4gIHJldHVybiBjdXJyZW50VDtcbn1cblxuZnVuY3Rpb24gbmV3dG9uUmFwaHNvbkl0ZXJhdGUgKGFYLCBhR3Vlc3NULCBtWDEsIG1YMikge1xuIGZvciAodmFyIGkgPSAwOyBpIDwgTkVXVE9OX0lURVJBVElPTlM7ICsraSkge1xuICAgdmFyIGN1cnJlbnRTbG9wZSA9IGdldFNsb3BlKGFHdWVzc1QsIG1YMSwgbVgyKTtcbiAgIGlmIChjdXJyZW50U2xvcGUgPT09IDAuMCkge1xuICAgICByZXR1cm4gYUd1ZXNzVDtcbiAgIH1cbiAgIHZhciBjdXJyZW50WCA9IGNhbGNCZXppZXIoYUd1ZXNzVCwgbVgxLCBtWDIpIC0gYVg7XG4gICBhR3Vlc3NUIC09IGN1cnJlbnRYIC8gY3VycmVudFNsb3BlO1xuIH1cbiByZXR1cm4gYUd1ZXNzVDtcbn1cblxuZnVuY3Rpb24gYmV6aWVyIChtWDEsIG1ZMSwgbVgyLCBtWTIpIHtcbiAgaWYgKCEoMCA8PSBtWDEgJiYgbVgxIDw9IDEgJiYgMCA8PSBtWDIgJiYgbVgyIDw9IDEpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdiZXppZXIgeCB2YWx1ZXMgbXVzdCBiZSBpbiBbMCwgMV0gcmFuZ2UnKTtcbiAgfVxuXG4gIC8vIFByZWNvbXB1dGUgc2FtcGxlcyB0YWJsZVxuICB2YXIgc2FtcGxlVmFsdWVzID0gZmxvYXQzMkFycmF5U3VwcG9ydGVkID8gbmV3IEZsb2F0MzJBcnJheShrU3BsaW5lVGFibGVTaXplKSA6IG5ldyBBcnJheShrU3BsaW5lVGFibGVTaXplKTtcbiAgaWYgKG1YMSAhPT0gbVkxIHx8IG1YMiAhPT0gbVkyKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrU3BsaW5lVGFibGVTaXplOyArK2kpIHtcbiAgICAgIHNhbXBsZVZhbHVlc1tpXSA9IGNhbGNCZXppZXIoaSAqIGtTYW1wbGVTdGVwU2l6ZSwgbVgxLCBtWDIpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFRGb3JYIChhWCkge1xuICAgIHZhciBpbnRlcnZhbFN0YXJ0ID0gMC4wO1xuICAgIHZhciBjdXJyZW50U2FtcGxlID0gMTtcbiAgICB2YXIgbGFzdFNhbXBsZSA9IGtTcGxpbmVUYWJsZVNpemUgLSAxO1xuXG4gICAgZm9yICg7IGN1cnJlbnRTYW1wbGUgIT09IGxhc3RTYW1wbGUgJiYgc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGVdIDw9IGFYOyArK2N1cnJlbnRTYW1wbGUpIHtcbiAgICAgIGludGVydmFsU3RhcnQgKz0ga1NhbXBsZVN0ZXBTaXplO1xuICAgIH1cbiAgICAtLWN1cnJlbnRTYW1wbGU7XG5cbiAgICAvLyBJbnRlcnBvbGF0ZSB0byBwcm92aWRlIGFuIGluaXRpYWwgZ3Vlc3MgZm9yIHRcbiAgICB2YXIgZGlzdCA9IChhWCAtIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSkgLyAoc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGUgKyAxXSAtIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSk7XG4gICAgdmFyIGd1ZXNzRm9yVCA9IGludGVydmFsU3RhcnQgKyBkaXN0ICoga1NhbXBsZVN0ZXBTaXplO1xuXG4gICAgdmFyIGluaXRpYWxTbG9wZSA9IGdldFNsb3BlKGd1ZXNzRm9yVCwgbVgxLCBtWDIpO1xuICAgIGlmIChpbml0aWFsU2xvcGUgPj0gTkVXVE9OX01JTl9TTE9QRSkge1xuICAgICAgcmV0dXJuIG5ld3RvblJhcGhzb25JdGVyYXRlKGFYLCBndWVzc0ZvclQsIG1YMSwgbVgyKTtcbiAgICB9IGVsc2UgaWYgKGluaXRpYWxTbG9wZSA9PT0gMC4wKSB7XG4gICAgICByZXR1cm4gZ3Vlc3NGb3JUO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYmluYXJ5U3ViZGl2aWRlKGFYLCBpbnRlcnZhbFN0YXJ0LCBpbnRlcnZhbFN0YXJ0ICsga1NhbXBsZVN0ZXBTaXplLCBtWDEsIG1YMik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIEJlemllckVhc2luZyAoeCkge1xuICAgIGlmIChtWDEgPT09IG1ZMSAmJiBtWDIgPT09IG1ZMikge1xuICAgICAgcmV0dXJuIHg7IC8vIGxpbmVhclxuICAgIH1cbiAgICAvLyBCZWNhdXNlIEphdmFTY3JpcHQgbnVtYmVyIGFyZSBpbXByZWNpc2UsIHdlIHNob3VsZCBndWFyYW50ZWUgdGhlIGV4dHJlbWVzIGFyZSByaWdodC5cbiAgICBpZiAoeCA9PT0gMCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmICh4ID09PSAxKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgcmV0dXJuIGNhbGNCZXppZXIoZ2V0VEZvclgoeCksIG1ZMSwgbVkyKTtcbiAgfTtcbn1cblxuLy8gUmVtb3ZlIERpYWNyaXRpY3NcbmNvbnN0IGRlZmF1bHREaWFjcml0aWNzUmVtb3ZhbGFwID0gW1xuICB7IGJhc2U6ICdBJywgbGV0dGVyczogJ1xcdTAwNDFcXHUyNEI2XFx1RkYyMVxcdTAwQzBcXHUwMEMxXFx1MDBDMlxcdTFFQTZcXHUxRUE0XFx1MUVBQVxcdTFFQThcXHUwMEMzXFx1MDEwMFxcdTAxMDJcXHUxRUIwXFx1MUVBRVxcdTFFQjRcXHUxRUIyXFx1MDIyNlxcdTAxRTBcXHUwMEM0XFx1MDFERVxcdTFFQTJcXHUwMEM1XFx1MDFGQVxcdTAxQ0RcXHUwMjAwXFx1MDIwMlxcdTFFQTBcXHUxRUFDXFx1MUVCNlxcdTFFMDBcXHUwMTA0XFx1MDIzQVxcdTJDNkYnIH0sXG4gIHsgYmFzZTogJ0FBJywgbGV0dGVyczogJ1xcdUE3MzInIH0sXG4gIHsgYmFzZTogJ0FFJywgbGV0dGVyczogJ1xcdTAwQzZcXHUwMUZDXFx1MDFFMicgfSxcbiAgeyBiYXNlOiAnQU8nLCBsZXR0ZXJzOiAnXFx1QTczNCcgfSxcbiAgeyBiYXNlOiAnQVUnLCBsZXR0ZXJzOiAnXFx1QTczNicgfSxcbiAgeyBiYXNlOiAnQVYnLCBsZXR0ZXJzOiAnXFx1QTczOFxcdUE3M0EnIH0sXG4gIHsgYmFzZTogJ0FZJywgbGV0dGVyczogJ1xcdUE3M0MnIH0sXG4gIHsgYmFzZTogJ0InLCBsZXR0ZXJzOiAnXFx1MDA0MlxcdTI0QjdcXHVGRjIyXFx1MUUwMlxcdTFFMDRcXHUxRTA2XFx1MDI0M1xcdTAxODJcXHUwMTgxJyB9LFxuICB7IGJhc2U6ICdDJywgbGV0dGVyczogJ1xcdTAwNDNcXHUyNEI4XFx1RkYyM1xcdTAxMDZcXHUwMTA4XFx1MDEwQVxcdTAxMENcXHUwMEM3XFx1MUUwOFxcdTAxODdcXHUwMjNCXFx1QTczRScgfSxcbiAgeyBiYXNlOiAnRCcsIGxldHRlcnM6ICdcXHUwMDQ0XFx1MjRCOVxcdUZGMjRcXHUxRTBBXFx1MDEwRVxcdTFFMENcXHUxRTEwXFx1MUUxMlxcdTFFMEVcXHUwMTEwXFx1MDE4QlxcdTAxOEFcXHUwMTg5XFx1QTc3OScgfSxcbiAgeyBiYXNlOiAnRFonLCBsZXR0ZXJzOiAnXFx1MDFGMVxcdTAxQzQnIH0sXG4gIHsgYmFzZTogJ0R6JywgbGV0dGVyczogJ1xcdTAxRjJcXHUwMUM1JyB9LFxuICB7IGJhc2U6ICdFJywgbGV0dGVyczogJ1xcdTAwNDVcXHUyNEJBXFx1RkYyNVxcdTAwQzhcXHUwMEM5XFx1MDBDQVxcdTFFQzBcXHUxRUJFXFx1MUVDNFxcdTFFQzJcXHUxRUJDXFx1MDExMlxcdTFFMTRcXHUxRTE2XFx1MDExNFxcdTAxMTZcXHUwMENCXFx1MUVCQVxcdTAxMUFcXHUwMjA0XFx1MDIwNlxcdTFFQjhcXHUxRUM2XFx1MDIyOFxcdTFFMUNcXHUwMTE4XFx1MUUxOFxcdTFFMUFcXHUwMTkwXFx1MDE4RScgfSxcbiAgeyBiYXNlOiAnRicsIGxldHRlcnM6ICdcXHUwMDQ2XFx1MjRCQlxcdUZGMjZcXHUxRTFFXFx1MDE5MVxcdUE3N0InIH0sXG4gIHsgYmFzZTogJ0cnLCBsZXR0ZXJzOiAnXFx1MDA0N1xcdTI0QkNcXHVGRjI3XFx1MDFGNFxcdTAxMUNcXHUxRTIwXFx1MDExRVxcdTAxMjBcXHUwMUU2XFx1MDEyMlxcdTAxRTRcXHUwMTkzXFx1QTdBMFxcdUE3N0RcXHVBNzdFJyB9LFxuICB7IGJhc2U6ICdIJywgbGV0dGVyczogJ1xcdTAwNDhcXHUyNEJEXFx1RkYyOFxcdTAxMjRcXHUxRTIyXFx1MUUyNlxcdTAyMUVcXHUxRTI0XFx1MUUyOFxcdTFFMkFcXHUwMTI2XFx1MkM2N1xcdTJDNzVcXHVBNzhEJyB9LFxuICB7IGJhc2U6ICdJJywgbGV0dGVyczogJ1xcdTAwNDlcXHUyNEJFXFx1RkYyOVxcdTAwQ0NcXHUwMENEXFx1MDBDRVxcdTAxMjhcXHUwMTJBXFx1MDEyQ1xcdTAxMzBcXHUwMENGXFx1MUUyRVxcdTFFQzhcXHUwMUNGXFx1MDIwOFxcdTAyMEFcXHUxRUNBXFx1MDEyRVxcdTFFMkNcXHUwMTk3JyB9LFxuICB7IGJhc2U6ICdKJywgbGV0dGVyczogJ1xcdTAwNEFcXHUyNEJGXFx1RkYyQVxcdTAxMzRcXHUwMjQ4JyB9LFxuICB7IGJhc2U6ICdLJywgbGV0dGVyczogJ1xcdTAwNEJcXHUyNEMwXFx1RkYyQlxcdTFFMzBcXHUwMUU4XFx1MUUzMlxcdTAxMzZcXHUxRTM0XFx1MDE5OFxcdTJDNjlcXHVBNzQwXFx1QTc0MlxcdUE3NDRcXHVBN0EyJyB9LFxuICB7IGJhc2U6ICdMJywgbGV0dGVyczogJ1xcdTAwNENcXHUyNEMxXFx1RkYyQ1xcdTAxM0ZcXHUwMTM5XFx1MDEzRFxcdTFFMzZcXHUxRTM4XFx1MDEzQlxcdTFFM0NcXHUxRTNBXFx1MDE0MVxcdTAyM0RcXHUyQzYyXFx1MkM2MFxcdUE3NDhcXHVBNzQ2XFx1QTc4MCcgfSxcbiAgeyBiYXNlOiAnTEonLCBsZXR0ZXJzOiAnXFx1MDFDNycgfSxcbiAgeyBiYXNlOiAnTGonLCBsZXR0ZXJzOiAnXFx1MDFDOCcgfSxcbiAgeyBiYXNlOiAnTScsIGxldHRlcnM6ICdcXHUwMDREXFx1MjRDMlxcdUZGMkRcXHUxRTNFXFx1MUU0MFxcdTFFNDJcXHUyQzZFXFx1MDE5QycgfSxcbiAgeyBiYXNlOiAnTicsIGxldHRlcnM6ICdcXHUwMDRFXFx1MjRDM1xcdUZGMkVcXHUwMUY4XFx1MDE0M1xcdTAwRDFcXHUxRTQ0XFx1MDE0N1xcdTFFNDZcXHUwMTQ1XFx1MUU0QVxcdTFFNDhcXHUwMjIwXFx1MDE5RFxcdUE3OTBcXHVBN0E0JyB9LFxuICB7IGJhc2U6ICdOSicsIGxldHRlcnM6ICdcXHUwMUNBJyB9LFxuICB7IGJhc2U6ICdOaicsIGxldHRlcnM6ICdcXHUwMUNCJyB9LFxuICB7IGJhc2U6ICdPJywgbGV0dGVyczogJ1xcdTAwNEZcXHUyNEM0XFx1RkYyRlxcdTAwRDJcXHUwMEQzXFx1MDBENFxcdTFFRDJcXHUxRUQwXFx1MUVENlxcdTFFRDRcXHUwMEQ1XFx1MUU0Q1xcdTAyMkNcXHUxRTRFXFx1MDE0Q1xcdTFFNTBcXHUxRTUyXFx1MDE0RVxcdTAyMkVcXHUwMjMwXFx1MDBENlxcdTAyMkFcXHUxRUNFXFx1MDE1MFxcdTAxRDFcXHUwMjBDXFx1MDIwRVxcdTAxQTBcXHUxRURDXFx1MUVEQVxcdTFFRTBcXHUxRURFXFx1MUVFMlxcdTFFQ0NcXHUxRUQ4XFx1MDFFQVxcdTAxRUNcXHUwMEQ4XFx1MDFGRVxcdTAxODZcXHUwMTlGXFx1QTc0QVxcdUE3NEMnIH0sXG4gIHsgYmFzZTogJ09JJywgbGV0dGVyczogJ1xcdTAxQTInIH0sXG4gIHsgYmFzZTogJ09PJywgbGV0dGVyczogJ1xcdUE3NEUnIH0sXG4gIHsgYmFzZTogJ09VJywgbGV0dGVyczogJ1xcdTAyMjInIH0sXG4gIHsgYmFzZTogJ09FJywgbGV0dGVyczogJ1xcdTAwOENcXHUwMTUyJyB9LFxuICB7IGJhc2U6ICdvZScsIGxldHRlcnM6ICdcXHUwMDlDXFx1MDE1MycgfSxcbiAgeyBiYXNlOiAnUCcsIGxldHRlcnM6ICdcXHUwMDUwXFx1MjRDNVxcdUZGMzBcXHUxRTU0XFx1MUU1NlxcdTAxQTRcXHUyQzYzXFx1QTc1MFxcdUE3NTJcXHVBNzU0JyB9LFxuICB7IGJhc2U6ICdRJywgbGV0dGVyczogJ1xcdTAwNTFcXHUyNEM2XFx1RkYzMVxcdUE3NTZcXHVBNzU4XFx1MDI0QScgfSxcbiAgeyBiYXNlOiAnUicsIGxldHRlcnM6ICdcXHUwMDUyXFx1MjRDN1xcdUZGMzJcXHUwMTU0XFx1MUU1OFxcdTAxNThcXHUwMjEwXFx1MDIxMlxcdTFFNUFcXHUxRTVDXFx1MDE1NlxcdTFFNUVcXHUwMjRDXFx1MkM2NFxcdUE3NUFcXHVBN0E2XFx1QTc4MicgfSxcbiAgeyBiYXNlOiAnUycsIGxldHRlcnM6ICdcXHUwMDUzXFx1MjRDOFxcdUZGMzNcXHUxRTlFXFx1MDE1QVxcdTFFNjRcXHUwMTVDXFx1MUU2MFxcdTAxNjBcXHUxRTY2XFx1MUU2MlxcdTFFNjhcXHUwMjE4XFx1MDE1RVxcdTJDN0VcXHVBN0E4XFx1QTc4NCcgfSxcbiAgeyBiYXNlOiAnVCcsIGxldHRlcnM6ICdcXHUwMDU0XFx1MjRDOVxcdUZGMzRcXHUxRTZBXFx1MDE2NFxcdTFFNkNcXHUwMjFBXFx1MDE2MlxcdTFFNzBcXHUxRTZFXFx1MDE2NlxcdTAxQUNcXHUwMUFFXFx1MDIzRVxcdUE3ODYnIH0sXG4gIHsgYmFzZTogJ1RaJywgbGV0dGVyczogJ1xcdUE3MjgnIH0sXG4gIHsgYmFzZTogJ1UnLCBsZXR0ZXJzOiAnXFx1MDA1NVxcdTI0Q0FcXHVGRjM1XFx1MDBEOVxcdTAwREFcXHUwMERCXFx1MDE2OFxcdTFFNzhcXHUwMTZBXFx1MUU3QVxcdTAxNkNcXHUwMERDXFx1MDFEQlxcdTAxRDdcXHUwMUQ1XFx1MDFEOVxcdTFFRTZcXHUwMTZFXFx1MDE3MFxcdTAxRDNcXHUwMjE0XFx1MDIxNlxcdTAxQUZcXHUxRUVBXFx1MUVFOFxcdTFFRUVcXHUxRUVDXFx1MUVGMFxcdTFFRTRcXHUxRTcyXFx1MDE3MlxcdTFFNzZcXHUxRTc0XFx1MDI0NCcgfSxcbiAgeyBiYXNlOiAnVicsIGxldHRlcnM6ICdcXHUwMDU2XFx1MjRDQlxcdUZGMzZcXHUxRTdDXFx1MUU3RVxcdTAxQjJcXHVBNzVFXFx1MDI0NScgfSxcbiAgeyBiYXNlOiAnVlknLCBsZXR0ZXJzOiAnXFx1QTc2MCcgfSxcbiAgeyBiYXNlOiAnVycsIGxldHRlcnM6ICdcXHUwMDU3XFx1MjRDQ1xcdUZGMzdcXHUxRTgwXFx1MUU4MlxcdTAxNzRcXHUxRTg2XFx1MUU4NFxcdTFFODhcXHUyQzcyJyB9LFxuICB7IGJhc2U6ICdYJywgbGV0dGVyczogJ1xcdTAwNThcXHUyNENEXFx1RkYzOFxcdTFFOEFcXHUxRThDJyB9LFxuICB7IGJhc2U6ICdZJywgbGV0dGVyczogJ1xcdTAwNTlcXHUyNENFXFx1RkYzOVxcdTFFRjJcXHUwMEREXFx1MDE3NlxcdTFFRjhcXHUwMjMyXFx1MUU4RVxcdTAxNzhcXHUxRUY2XFx1MUVGNFxcdTAxQjNcXHUwMjRFXFx1MUVGRScgfSxcbiAgeyBiYXNlOiAnWicsIGxldHRlcnM6ICdcXHUwMDVBXFx1MjRDRlxcdUZGM0FcXHUwMTc5XFx1MUU5MFxcdTAxN0JcXHUwMTdEXFx1MUU5MlxcdTFFOTRcXHUwMUI1XFx1MDIyNFxcdTJDN0ZcXHUyQzZCXFx1QTc2MicgfSxcbiAgeyBiYXNlOiAnYScsIGxldHRlcnM6ICdcXHUwMDYxXFx1MjREMFxcdUZGNDFcXHUxRTlBXFx1MDBFMFxcdTAwRTFcXHUwMEUyXFx1MUVBN1xcdTFFQTVcXHUxRUFCXFx1MUVBOVxcdTAwRTNcXHUwMTAxXFx1MDEwM1xcdTFFQjFcXHUxRUFGXFx1MUVCNVxcdTFFQjNcXHUwMjI3XFx1MDFFMVxcdTAwRTRcXHUwMURGXFx1MUVBM1xcdTAwRTVcXHUwMUZCXFx1MDFDRVxcdTAyMDFcXHUwMjAzXFx1MUVBMVxcdTFFQURcXHUxRUI3XFx1MUUwMVxcdTAxMDVcXHUyQzY1XFx1MDI1MCcgfSxcbiAgeyBiYXNlOiAnYWEnLCBsZXR0ZXJzOiAnXFx1QTczMycgfSxcbiAgeyBiYXNlOiAnYWUnLCBsZXR0ZXJzOiAnXFx1MDBFNlxcdTAxRkRcXHUwMUUzJyB9LFxuICB7IGJhc2U6ICdhbycsIGxldHRlcnM6ICdcXHVBNzM1JyB9LFxuICB7IGJhc2U6ICdhdScsIGxldHRlcnM6ICdcXHVBNzM3JyB9LFxuICB7IGJhc2U6ICdhdicsIGxldHRlcnM6ICdcXHVBNzM5XFx1QTczQicgfSxcbiAgeyBiYXNlOiAnYXknLCBsZXR0ZXJzOiAnXFx1QTczRCcgfSxcbiAgeyBiYXNlOiAnYicsIGxldHRlcnM6ICdcXHUwMDYyXFx1MjREMVxcdUZGNDJcXHUxRTAzXFx1MUUwNVxcdTFFMDdcXHUwMTgwXFx1MDE4M1xcdTAyNTMnIH0sXG4gIHsgYmFzZTogJ2MnLCBsZXR0ZXJzOiAnXFx1MDA2M1xcdTI0RDJcXHVGRjQzXFx1MDEwN1xcdTAxMDlcXHUwMTBCXFx1MDEwRFxcdTAwRTdcXHUxRTA5XFx1MDE4OFxcdTAyM0NcXHVBNzNGXFx1MjE4NCcgfSxcbiAgeyBiYXNlOiAnZCcsIGxldHRlcnM6ICdcXHUwMDY0XFx1MjREM1xcdUZGNDRcXHUxRTBCXFx1MDEwRlxcdTFFMERcXHUxRTExXFx1MUUxM1xcdTFFMEZcXHUwMTExXFx1MDE4Q1xcdTAyNTZcXHUwMjU3XFx1QTc3QScgfSxcbiAgeyBiYXNlOiAnZHonLCBsZXR0ZXJzOiAnXFx1MDFGM1xcdTAxQzYnIH0sXG4gIHsgYmFzZTogJ2UnLCBsZXR0ZXJzOiAnXFx1MDA2NVxcdTI0RDRcXHVGRjQ1XFx1MDBFOFxcdTAwRTlcXHUwMEVBXFx1MUVDMVxcdTFFQkZcXHUxRUM1XFx1MUVDM1xcdTFFQkRcXHUwMTEzXFx1MUUxNVxcdTFFMTdcXHUwMTE1XFx1MDExN1xcdTAwRUJcXHUxRUJCXFx1MDExQlxcdTAyMDVcXHUwMjA3XFx1MUVCOVxcdTFFQzdcXHUwMjI5XFx1MUUxRFxcdTAxMTlcXHUxRTE5XFx1MUUxQlxcdTAyNDdcXHUwMjVCXFx1MDFERCcgfSxcbiAgeyBiYXNlOiAnZicsIGxldHRlcnM6ICdcXHUwMDY2XFx1MjRENVxcdUZGNDZcXHUxRTFGXFx1MDE5MlxcdUE3N0MnIH0sXG4gIHsgYmFzZTogJ2cnLCBsZXR0ZXJzOiAnXFx1MDA2N1xcdTI0RDZcXHVGRjQ3XFx1MDFGNVxcdTAxMURcXHUxRTIxXFx1MDExRlxcdTAxMjFcXHUwMUU3XFx1MDEyM1xcdTAxRTVcXHUwMjYwXFx1QTdBMVxcdTFENzlcXHVBNzdGJyB9LFxuICB7IGJhc2U6ICdoJywgbGV0dGVyczogJ1xcdTAwNjhcXHUyNEQ3XFx1RkY0OFxcdTAxMjVcXHUxRTIzXFx1MUUyN1xcdTAyMUZcXHUxRTI1XFx1MUUyOVxcdTFFMkJcXHUxRTk2XFx1MDEyN1xcdTJDNjhcXHUyQzc2XFx1MDI2NScgfSxcbiAgeyBiYXNlOiAnaHYnLCBsZXR0ZXJzOiAnXFx1MDE5NScgfSxcbiAgeyBiYXNlOiAnaScsIGxldHRlcnM6ICdcXHUwMDY5XFx1MjREOFxcdUZGNDlcXHUwMEVDXFx1MDBFRFxcdTAwRUVcXHUwMTI5XFx1MDEyQlxcdTAxMkRcXHUwMEVGXFx1MUUyRlxcdTFFQzlcXHUwMUQwXFx1MDIwOVxcdTAyMEJcXHUxRUNCXFx1MDEyRlxcdTFFMkRcXHUwMjY4XFx1MDEzMScgfSxcbiAgeyBiYXNlOiAnaicsIGxldHRlcnM6ICdcXHUwMDZBXFx1MjREOVxcdUZGNEFcXHUwMTM1XFx1MDFGMFxcdTAyNDknIH0sXG4gIHsgYmFzZTogJ2snLCBsZXR0ZXJzOiAnXFx1MDA2QlxcdTI0REFcXHVGRjRCXFx1MUUzMVxcdTAxRTlcXHUxRTMzXFx1MDEzN1xcdTFFMzVcXHUwMTk5XFx1MkM2QVxcdUE3NDFcXHVBNzQzXFx1QTc0NVxcdUE3QTMnIH0sXG4gIHsgYmFzZTogJ2wnLCBsZXR0ZXJzOiAnXFx1MDA2Q1xcdTI0REJcXHVGRjRDXFx1MDE0MFxcdTAxM0FcXHUwMTNFXFx1MUUzN1xcdTFFMzlcXHUwMTNDXFx1MUUzRFxcdTFFM0JcXHUwMTdGXFx1MDE0MlxcdTAxOUFcXHUwMjZCXFx1MkM2MVxcdUE3NDlcXHVBNzgxXFx1QTc0NycgfSxcbiAgeyBiYXNlOiAnbGonLCBsZXR0ZXJzOiAnXFx1MDFDOScgfSxcbiAgeyBiYXNlOiAnbScsIGxldHRlcnM6ICdcXHUwMDZEXFx1MjREQ1xcdUZGNERcXHUxRTNGXFx1MUU0MVxcdTFFNDNcXHUwMjcxXFx1MDI2RicgfSxcbiAgeyBiYXNlOiAnbicsIGxldHRlcnM6ICdcXHUwMDZFXFx1MjRERFxcdUZGNEVcXHUwMUY5XFx1MDE0NFxcdTAwRjFcXHUxRTQ1XFx1MDE0OFxcdTFFNDdcXHUwMTQ2XFx1MUU0QlxcdTFFNDlcXHUwMTlFXFx1MDI3MlxcdTAxNDlcXHVBNzkxXFx1QTdBNScgfSxcbiAgeyBiYXNlOiAnbmonLCBsZXR0ZXJzOiAnXFx1MDFDQycgfSxcbiAgeyBiYXNlOiAnbycsIGxldHRlcnM6ICdcXHUwMDZGXFx1MjRERVxcdUZGNEZcXHUwMEYyXFx1MDBGM1xcdTAwRjRcXHUxRUQzXFx1MUVEMVxcdTFFRDdcXHUxRUQ1XFx1MDBGNVxcdTFFNERcXHUwMjJEXFx1MUU0RlxcdTAxNERcXHUxRTUxXFx1MUU1M1xcdTAxNEZcXHUwMjJGXFx1MDIzMVxcdTAwRjZcXHUwMjJCXFx1MUVDRlxcdTAxNTFcXHUwMUQyXFx1MDIwRFxcdTAyMEZcXHUwMUExXFx1MUVERFxcdTFFREJcXHUxRUUxXFx1MUVERlxcdTFFRTNcXHUxRUNEXFx1MUVEOVxcdTAxRUJcXHUwMUVEXFx1MDBGOFxcdTAxRkZcXHUwMjU0XFx1QTc0QlxcdUE3NERcXHUwMjc1JyB9LFxuICB7IGJhc2U6ICdvaScsIGxldHRlcnM6ICdcXHUwMUEzJyB9LFxuICB7IGJhc2U6ICdvdScsIGxldHRlcnM6ICdcXHUwMjIzJyB9LFxuICB7IGJhc2U6ICdvbycsIGxldHRlcnM6ICdcXHVBNzRGJyB9LFxuICB7IGJhc2U6ICdwJywgbGV0dGVyczogJ1xcdTAwNzBcXHUyNERGXFx1RkY1MFxcdTFFNTVcXHUxRTU3XFx1MDFBNVxcdTFEN0RcXHVBNzUxXFx1QTc1M1xcdUE3NTUnIH0sXG4gIHsgYmFzZTogJ3EnLCBsZXR0ZXJzOiAnXFx1MDA3MVxcdTI0RTBcXHVGRjUxXFx1MDI0QlxcdUE3NTdcXHVBNzU5JyB9LFxuICB7IGJhc2U6ICdyJywgbGV0dGVyczogJ1xcdTAwNzJcXHUyNEUxXFx1RkY1MlxcdTAxNTVcXHUxRTU5XFx1MDE1OVxcdTAyMTFcXHUwMjEzXFx1MUU1QlxcdTFFNURcXHUwMTU3XFx1MUU1RlxcdTAyNERcXHUwMjdEXFx1QTc1QlxcdUE3QTdcXHVBNzgzJyB9LFxuICB7IGJhc2U6ICdzJywgbGV0dGVyczogJ1xcdTAwNzNcXHUyNEUyXFx1RkY1M1xcdTAwREZcXHUwMTVCXFx1MUU2NVxcdTAxNURcXHUxRTYxXFx1MDE2MVxcdTFFNjdcXHUxRTYzXFx1MUU2OVxcdTAyMTlcXHUwMTVGXFx1MDIzRlxcdUE3QTlcXHVBNzg1XFx1MUU5QicgfSxcbiAgeyBiYXNlOiAndCcsIGxldHRlcnM6ICdcXHUwMDc0XFx1MjRFM1xcdUZGNTRcXHUxRTZCXFx1MUU5N1xcdTAxNjVcXHUxRTZEXFx1MDIxQlxcdTAxNjNcXHUxRTcxXFx1MUU2RlxcdTAxNjdcXHUwMUFEXFx1MDI4OFxcdTJDNjZcXHVBNzg3JyB9LFxuICB7IGJhc2U6ICd0eicsIGxldHRlcnM6ICdcXHVBNzI5JyB9LFxuICB7IGJhc2U6ICd1JywgbGV0dGVyczogJ1xcdTAwNzVcXHUyNEU0XFx1RkY1NVxcdTAwRjlcXHUwMEZBXFx1MDBGQlxcdTAxNjlcXHUxRTc5XFx1MDE2QlxcdTFFN0JcXHUwMTZEXFx1MDBGQ1xcdTAxRENcXHUwMUQ4XFx1MDFENlxcdTAxREFcXHUxRUU3XFx1MDE2RlxcdTAxNzFcXHUwMUQ0XFx1MDIxNVxcdTAyMTdcXHUwMUIwXFx1MUVFQlxcdTFFRTlcXHUxRUVGXFx1MUVFRFxcdTFFRjFcXHUxRUU1XFx1MUU3M1xcdTAxNzNcXHUxRTc3XFx1MUU3NVxcdTAyODknIH0sXG4gIHsgYmFzZTogJ3YnLCBsZXR0ZXJzOiAnXFx1MDA3NlxcdTI0RTVcXHVGRjU2XFx1MUU3RFxcdTFFN0ZcXHUwMjhCXFx1QTc1RlxcdTAyOEMnIH0sXG4gIHsgYmFzZTogJ3Z5JywgbGV0dGVyczogJ1xcdUE3NjEnIH0sXG4gIHsgYmFzZTogJ3cnLCBsZXR0ZXJzOiAnXFx1MDA3N1xcdTI0RTZcXHVGRjU3XFx1MUU4MVxcdTFFODNcXHUwMTc1XFx1MUU4N1xcdTFFODVcXHUxRTk4XFx1MUU4OVxcdTJDNzMnIH0sXG4gIHsgYmFzZTogJ3gnLCBsZXR0ZXJzOiAnXFx1MDA3OFxcdTI0RTdcXHVGRjU4XFx1MUU4QlxcdTFFOEQnIH0sXG4gIHsgYmFzZTogJ3knLCBsZXR0ZXJzOiAnXFx1MDA3OVxcdTI0RThcXHVGRjU5XFx1MUVGM1xcdTAwRkRcXHUwMTc3XFx1MUVGOVxcdTAyMzNcXHUxRThGXFx1MDBGRlxcdTFFRjdcXHUxRTk5XFx1MUVGNVxcdTAxQjRcXHUwMjRGXFx1MUVGRicgfSxcbiAgeyBiYXNlOiAneicsIGxldHRlcnM6ICdcXHUwMDdBXFx1MjRFOVxcdUZGNUFcXHUwMTdBXFx1MUU5MVxcdTAxN0NcXHUwMTdFXFx1MUU5M1xcdTFFOTVcXHUwMUI2XFx1MDIyNVxcdTAyNDBcXHUyQzZDXFx1QTc2MycgfSxcbl07XG5cbmNvbnN0IGRpYWNyaXRpY3NNYXAgPSB7fTtcbmZvciAobGV0IGkgPSAwOyBpIDwgZGVmYXVsdERpYWNyaXRpY3NSZW1vdmFsYXAubGVuZ3RoOyBpICs9IDEpIHtcbiAgY29uc3QgbGV0dGVycyA9IGRlZmF1bHREaWFjcml0aWNzUmVtb3ZhbGFwW2ldLmxldHRlcnM7XG4gIGZvciAobGV0IGogPSAwOyBqIDwgbGV0dGVycy5sZW5ndGg7IGogKz0gMSkge1xuICAgIGRpYWNyaXRpY3NNYXBbbGV0dGVyc1tqXV0gPSBkZWZhdWx0RGlhY3JpdGljc1JlbW92YWxhcFtpXS5iYXNlO1xuICB9XG59XG5cbmNvbnN0IFV0aWxzID0ge1xuICBkZWxldGVQcm9wcyhvYmopIHtcbiAgICBjb25zdCBvYmplY3QgPSBvYmo7XG4gICAgT2JqZWN0LmtleXMob2JqZWN0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG9iamVjdFtrZXldID0gbnVsbDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gbm8gZ2V0dGVyIGZvciBvYmplY3RcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIGRlbGV0ZSBvYmplY3Rba2V5XTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gc29tZXRoaW5nIGdvdCB3cm9uZ1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBiZXppZXIoLi4uYXJncykge1xuICAgIHJldHVybiBiZXppZXIoLi4uYXJncyk7XG4gIH0sXG4gIG5leHRUaWNrKGNhbGxiYWNrLCBkZWxheSA9IDApIHtcbiAgICByZXR1cm4gc2V0VGltZW91dChjYWxsYmFjaywgZGVsYXkpO1xuICB9LFxuICBuZXh0RnJhbWUoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gVXRpbHMucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKTtcbiAgfSxcbiAgbm93KCkge1xuICAgIHJldHVybiBEYXRlLm5vdygpO1xuICB9LFxuICBwcm9taXNlKGhhbmRsZXIpIHtcbiAgICBsZXQgcmVzb2x2ZWQgPSBmYWxzZTtcbiAgICBsZXQgcmVqZWN0ZWQgPSBmYWxzZTtcbiAgICBsZXQgcmVzb2x2ZUFyZ3M7XG4gICAgbGV0IHJlamVjdEFyZ3M7XG4gICAgY29uc3QgcHJvbWlzZUhhbmRsZXJzID0ge1xuICAgICAgdGhlbjogdW5kZWZpbmVkLFxuICAgICAgY2F0Y2g6IHVuZGVmaW5lZCxcbiAgICB9O1xuICAgIGNvbnN0IHByb21pc2UgPSB7XG4gICAgICB0aGVuKHRoZW5IYW5kbGVyKSB7XG4gICAgICAgIGlmIChyZXNvbHZlZCkge1xuICAgICAgICAgIHRoZW5IYW5kbGVyKC4uLnJlc29sdmVBcmdzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9taXNlSGFuZGxlcnMudGhlbiA9IHRoZW5IYW5kbGVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgfSxcbiAgICAgIGNhdGNoKGNhdGNoSGFuZGxlcikge1xuICAgICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgICBjYXRjaEhhbmRsZXIoLi4ucmVqZWN0QXJncyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvbWlzZUhhbmRsZXJzLmNhdGNoID0gY2F0Y2hIYW5kbGVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgfSxcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZSguLi5hcmdzKSB7XG4gICAgICByZXNvbHZlZCA9IHRydWU7XG4gICAgICBpZiAocHJvbWlzZUhhbmRsZXJzLnRoZW4pIHByb21pc2VIYW5kbGVycy50aGVuKC4uLmFyZ3MpO1xuICAgICAgZWxzZSByZXNvbHZlQXJncyA9IGFyZ3M7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlamVjdCguLi5hcmdzKSB7XG4gICAgICByZWplY3RlZCA9IHRydWU7XG4gICAgICBpZiAocHJvbWlzZUhhbmRsZXJzLmNhdGNoKSBwcm9taXNlSGFuZGxlcnMuY2F0Y2goLi4uYXJncyk7XG4gICAgICBlbHNlIHJlamVjdEFyZ3MgPSBhcmdzO1xuICAgIH1cbiAgICBoYW5kbGVyKHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfSxcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKSB7XG4gICAgaWYgKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHJldHVybiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKTtcbiAgICBlbHNlIGlmICh3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lKSByZXR1cm4gd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjayk7XG4gICAgcmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNjApO1xuICB9LFxuICBjYW5jZWxBbmltYXRpb25GcmFtZShpZCkge1xuICAgIGlmICh3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUpIHJldHVybiB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpO1xuICAgIGVsc2UgaWYgKHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSkgcmV0dXJuIHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZShpZCk7XG4gICAgcmV0dXJuIHdpbmRvdy5jbGVhclRpbWVvdXQoaWQpO1xuICB9LFxuICByZW1vdmVEaWFjcml0aWNzKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvW15cXHUwMDAwLVxcdTAwN0VdL2csIGEgPT4gZGlhY3JpdGljc01hcFthXSB8fCBhKTtcbiAgfSxcbiAgcGFyc2VVcmxRdWVyeSh1cmwpIHtcbiAgICBjb25zdCBxdWVyeSA9IHt9O1xuICAgIGxldCB1cmxUb1BhcnNlID0gdXJsIHx8IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgIGxldCBpO1xuICAgIGxldCBwYXJhbXM7XG4gICAgbGV0IHBhcmFtO1xuICAgIGxldCBsZW5ndGg7XG4gICAgaWYgKHR5cGVvZiB1cmxUb1BhcnNlID09PSAnc3RyaW5nJyAmJiB1cmxUb1BhcnNlLmxlbmd0aCkge1xuICAgICAgdXJsVG9QYXJzZSA9IHVybFRvUGFyc2UuaW5kZXhPZignPycpID4gLTEgPyB1cmxUb1BhcnNlLnJlcGxhY2UoL1xcUypcXD8vLCAnJykgOiAnJztcbiAgICAgIHBhcmFtcyA9IHVybFRvUGFyc2Uuc3BsaXQoJyYnKS5maWx0ZXIocGFyYW1zUGFydCA9PiBwYXJhbXNQYXJ0ICE9PSAnJyk7XG4gICAgICBsZW5ndGggPSBwYXJhbXMubGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgcGFyYW0gPSBwYXJhbXNbaV0ucmVwbGFjZSgvI1xcUysvZywgJycpLnNwbGl0KCc9Jyk7XG4gICAgICAgIHF1ZXJ5W2RlY29kZVVSSUNvbXBvbmVudChwYXJhbVswXSldID0gdHlwZW9mIHBhcmFtWzFdID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IGRlY29kZVVSSUNvbXBvbmVudChwYXJhbVsxXSkgfHwgJyc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBxdWVyeTtcbiAgfSxcbiAgZ2V0VHJhbnNsYXRlKGVsLCBheGlzID0gJ3gnKSB7XG4gICAgbGV0IG1hdHJpeDtcbiAgICBsZXQgY3VyVHJhbnNmb3JtO1xuICAgIGxldCB0cmFuc2Zvcm1NYXRyaXg7XG5cbiAgICBjb25zdCBjdXJTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKTtcblxuICAgIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSB7XG4gICAgICBjdXJUcmFuc2Zvcm0gPSBjdXJTdHlsZS50cmFuc2Zvcm0gfHwgY3VyU3R5bGUud2Via2l0VHJhbnNmb3JtO1xuICAgICAgaWYgKGN1clRyYW5zZm9ybS5zcGxpdCgnLCcpLmxlbmd0aCA+IDYpIHtcbiAgICAgICAgY3VyVHJhbnNmb3JtID0gY3VyVHJhbnNmb3JtLnNwbGl0KCcsICcpLm1hcChhID0+IGEucmVwbGFjZSgnLCcsICcuJykpLmpvaW4oJywgJyk7XG4gICAgICB9XG4gICAgICAvLyBTb21lIG9sZCB2ZXJzaW9ucyBvZiBXZWJraXQgY2hva2Ugd2hlbiAnbm9uZScgaXMgcGFzc2VkOyBwYXNzXG4gICAgICAvLyBlbXB0eSBzdHJpbmcgaW5zdGVhZCBpbiB0aGlzIGNhc2VcbiAgICAgIHRyYW5zZm9ybU1hdHJpeCA9IG5ldyB3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KGN1clRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBjdXJUcmFuc2Zvcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2Zvcm1NYXRyaXggPSBjdXJTdHlsZS5Nb3pUcmFuc2Zvcm0gfHwgY3VyU3R5bGUuT1RyYW5zZm9ybSB8fCBjdXJTdHlsZS5Nc1RyYW5zZm9ybSB8fCBjdXJTdHlsZS5tc1RyYW5zZm9ybSB8fCBjdXJTdHlsZS50cmFuc2Zvcm0gfHwgY3VyU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgndHJhbnNmb3JtJykucmVwbGFjZSgndHJhbnNsYXRlKCcsICdtYXRyaXgoMSwgMCwgMCwgMSwnKTtcbiAgICAgIG1hdHJpeCA9IHRyYW5zZm9ybU1hdHJpeC50b1N0cmluZygpLnNwbGl0KCcsJyk7XG4gICAgfVxuXG4gICAgaWYgKGF4aXMgPT09ICd4Jykge1xuICAgICAgLy8gTGF0ZXN0IENocm9tZSBhbmQgd2Via2l0cyBGaXhcbiAgICAgIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSBjdXJUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1NYXRyaXgubTQxO1xuICAgICAgLy8gQ3JhenkgSUUxMCBNYXRyaXhcbiAgICAgIGVsc2UgaWYgKG1hdHJpeC5sZW5ndGggPT09IDE2KSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFsxMl0pO1xuICAgICAgLy8gTm9ybWFsIEJyb3dzZXJzXG4gICAgICBlbHNlIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzRdKTtcbiAgICB9XG4gICAgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgICAgLy8gTGF0ZXN0IENocm9tZSBhbmQgd2Via2l0cyBGaXhcbiAgICAgIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSBjdXJUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1NYXRyaXgubTQyO1xuICAgICAgLy8gQ3JhenkgSUUxMCBNYXRyaXhcbiAgICAgIGVsc2UgaWYgKG1hdHJpeC5sZW5ndGggPT09IDE2KSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFsxM10pO1xuICAgICAgLy8gTm9ybWFsIEJyb3dzZXJzXG4gICAgICBlbHNlIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzVdKTtcbiAgICB9XG4gICAgcmV0dXJuIGN1clRyYW5zZm9ybSB8fCAwO1xuICB9LFxuICBpc09iamVjdChvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBvICE9PSBudWxsICYmIG8uY29uc3RydWN0b3IgJiYgby5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xuICB9LFxuICBleHRlbmQoLi4uYXJncykge1xuICAgIGxldCBkZWVwID0gdHJ1ZTtcbiAgICBsZXQgdG87XG4gICAgbGV0IGZyb207XG4gICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnYm9vbGVhbicpIHtcbiAgICAgIGRlZXAgPSBhcmdzWzBdO1xuICAgICAgdG8gPSBhcmdzWzFdO1xuICAgICAgYXJncy5zcGxpY2UoMCwgMik7XG4gICAgICBmcm9tID0gYXJncztcbiAgICB9IGVsc2Uge1xuICAgICAgdG8gPSBhcmdzWzBdO1xuICAgICAgYXJncy5zcGxpY2UoMCwgMSk7XG4gICAgICBmcm9tID0gYXJncztcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmcm9tLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBuZXh0U291cmNlID0gYXJnc1tpXTtcbiAgICAgIGlmIChuZXh0U291cmNlICE9PSB1bmRlZmluZWQgJiYgbmV4dFNvdXJjZSAhPT0gbnVsbCkge1xuICAgICAgICBjb25zdCBrZXlzQXJyYXkgPSBPYmplY3Qua2V5cyhPYmplY3QobmV4dFNvdXJjZSkpO1xuICAgICAgICBmb3IgKGxldCBuZXh0SW5kZXggPSAwLCBsZW4gPSBrZXlzQXJyYXkubGVuZ3RoOyBuZXh0SW5kZXggPCBsZW47IG5leHRJbmRleCArPSAxKSB7XG4gICAgICAgICAgY29uc3QgbmV4dEtleSA9IGtleXNBcnJheVtuZXh0SW5kZXhdO1xuICAgICAgICAgIGNvbnN0IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG5leHRTb3VyY2UsIG5leHRLZXkpO1xuICAgICAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQgJiYgZGVzYy5lbnVtZXJhYmxlKSB7XG4gICAgICAgICAgICBpZiAoIWRlZXApIHtcbiAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChVdGlscy5pc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgVXRpbHMuaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHtcbiAgICAgICAgICAgICAgVXRpbHMuZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIVV0aWxzLmlzT2JqZWN0KHRvW25leHRLZXldKSAmJiBVdGlscy5pc09iamVjdChuZXh0U291cmNlW25leHRLZXldKSkge1xuICAgICAgICAgICAgICB0b1tuZXh0S2V5XSA9IHt9O1xuICAgICAgICAgICAgICBVdGlscy5leHRlbmQodG9bbmV4dEtleV0sIG5leHRTb3VyY2VbbmV4dEtleV0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdG87XG4gIH0sXG59O1xuXG5mdW5jdGlvbiBEZXZpY2UoKSB7XG4gIGNvbnN0IHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbiAgY29uc3QgZGV2aWNlID0ge1xuICAgIGlvczogZmFsc2UsXG4gICAgYW5kcm9pZDogZmFsc2UsXG4gICAgYW5kcm9pZENocm9tZTogZmFsc2UsXG4gICAgZGVza3RvcDogZmFsc2UsXG4gICAgd2luZG93czogZmFsc2UsXG4gICAgaXBob25lOiBmYWxzZSxcbiAgICBpcG9kOiBmYWxzZSxcbiAgICBpcGFkOiBmYWxzZSxcbiAgICBjb3Jkb3ZhOiB3aW5kb3cuY29yZG92YSB8fCB3aW5kb3cucGhvbmVnYXAsXG4gICAgcGhvbmVnYXA6IHdpbmRvdy5jb3Jkb3ZhIHx8IHdpbmRvdy5waG9uZWdhcCxcbiAgfTtcblxuICBjb25zdCB3aW5kb3dzID0gdWEubWF0Y2goLyhXaW5kb3dzIFBob25lKTs/W1xcc1xcL10rKFtcXGQuXSspPy8pO1xuICBjb25zdCBhbmRyb2lkID0gdWEubWF0Y2goLyhBbmRyb2lkKTs/W1xcc1xcL10rKFtcXGQuXSspPy8pO1xuICBjb25zdCBpcGFkID0gdWEubWF0Y2goLyhpUGFkKS4qT1NcXHMoW1xcZF9dKykvKTtcbiAgY29uc3QgaXBvZCA9IHVhLm1hdGNoKC8oaVBvZCkoLipPU1xccyhbXFxkX10rKSk/Lyk7XG4gIGNvbnN0IGlwaG9uZSA9ICFpcGFkICYmIHVhLm1hdGNoKC8oaVBob25lXFxzT1N8aU9TKVxccyhbXFxkX10rKS8pO1xuXG5cbiAgLy8gV2luZG93c1xuICBpZiAod2luZG93cykge1xuICAgIGRldmljZS5vcyA9ICd3aW5kb3dzJztcbiAgICBkZXZpY2Uub3NWZXJzaW9uID0gd2luZG93c1syXTtcbiAgICBkZXZpY2Uud2luZG93cyA9IHRydWU7XG4gIH1cbiAgLy8gQW5kcm9pZFxuICBpZiAoYW5kcm9pZCAmJiAhd2luZG93cykge1xuICAgIGRldmljZS5vcyA9ICdhbmRyb2lkJztcbiAgICBkZXZpY2Uub3NWZXJzaW9uID0gYW5kcm9pZFsyXTtcbiAgICBkZXZpY2UuYW5kcm9pZCA9IHRydWU7XG4gICAgZGV2aWNlLmFuZHJvaWRDaHJvbWUgPSB1YS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ2Nocm9tZScpID49IDA7XG4gIH1cbiAgaWYgKGlwYWQgfHwgaXBob25lIHx8IGlwb2QpIHtcbiAgICBkZXZpY2Uub3MgPSAnaW9zJztcbiAgICBkZXZpY2UuaW9zID0gdHJ1ZTtcbiAgfVxuICAvLyBpT1NcbiAgaWYgKGlwaG9uZSAmJiAhaXBvZCkge1xuICAgIGRldmljZS5vc1ZlcnNpb24gPSBpcGhvbmVbMl0ucmVwbGFjZSgvXy9nLCAnLicpO1xuICAgIGRldmljZS5pcGhvbmUgPSB0cnVlO1xuICB9XG4gIGlmIChpcGFkKSB7XG4gICAgZGV2aWNlLm9zVmVyc2lvbiA9IGlwYWRbMl0ucmVwbGFjZSgvXy9nLCAnLicpO1xuICAgIGRldmljZS5pcGFkID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXBvZCkge1xuICAgIGRldmljZS5vc1ZlcnNpb24gPSBpcG9kWzNdID8gaXBvZFszXS5yZXBsYWNlKC9fL2csICcuJykgOiBudWxsO1xuICAgIGRldmljZS5pcGhvbmUgPSB0cnVlO1xuICB9XG4gIC8vIGlPUyA4KyBjaGFuZ2VkIFVBXG4gIGlmIChkZXZpY2UuaW9zICYmIGRldmljZS5vc1ZlcnNpb24gJiYgdWEuaW5kZXhPZignVmVyc2lvbi8nKSA+PSAwKSB7XG4gICAgaWYgKGRldmljZS5vc1ZlcnNpb24uc3BsaXQoJy4nKVswXSA9PT0gJzEwJykge1xuICAgICAgZGV2aWNlLm9zVmVyc2lvbiA9IHVhLnRvTG93ZXJDYXNlKCkuc3BsaXQoJ3ZlcnNpb24vJylbMV0uc3BsaXQoJyAnKVswXTtcbiAgICB9XG4gIH1cblxuICAvLyBEZXNrdG9wXG4gIGRldmljZS5kZXNrdG9wID0gIShkZXZpY2Uub3MgfHwgZGV2aWNlLmFuZHJvaWQgfHwgZGV2aWNlLndlYlZpZXcpO1xuXG4gIC8vIFdlYnZpZXdcbiAgZGV2aWNlLndlYlZpZXcgPSAoaXBob25lIHx8IGlwYWQgfHwgaXBvZCkgJiYgdWEubWF0Y2goLy4qQXBwbGVXZWJLaXQoPyEuKlNhZmFyaSkvaSk7XG5cbiAgLy8gTWluaW1hbCBVSVxuICBpZiAoZGV2aWNlLm9zICYmIGRldmljZS5vcyA9PT0gJ2lvcycpIHtcbiAgICBjb25zdCBvc1ZlcnNpb25BcnIgPSBkZXZpY2Uub3NWZXJzaW9uLnNwbGl0KCcuJyk7XG4gICAgY29uc3QgbWV0YVZpZXdwb3J0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWV0YVtuYW1lPVwidmlld3BvcnRcIl0nKTtcbiAgICBkZXZpY2UubWluaW1hbFVpID1cbiAgICAgICFkZXZpY2Uud2ViVmlldyAmJlxuICAgICAgKGlwb2QgfHwgaXBob25lKSAmJlxuICAgICAgKG9zVmVyc2lvbkFyclswXSAqIDEgPT09IDcgPyBvc1ZlcnNpb25BcnJbMV0gKiAxID49IDEgOiBvc1ZlcnNpb25BcnJbMF0gKiAxID4gNykgJiZcbiAgICAgIG1ldGFWaWV3cG9ydCAmJiBtZXRhVmlld3BvcnQuZ2V0QXR0cmlidXRlKCdjb250ZW50JykuaW5kZXhPZignbWluaW1hbC11aScpID49IDA7XG4gIH1cblxuICAvLyBDaGVjayBmb3Igc3RhdHVzIGJhciBhbmQgZnVsbHNjcmVlbiBhcHAgbW9kZVxuICBkZXZpY2UubmVlZHNTdGF0dXNiYXIgPSBmdW5jdGlvbiBuZWVkc1N0YXR1c2JhcigpIHtcbiAgICBpZiAoZGV2aWNlLndlYlZpZXcgJiYgKHdpbmRvdy5pbm5lcldpZHRoICogd2luZG93LmlubmVySGVpZ2h0ID09PSB3aW5kb3cuc2NyZWVuLndpZHRoICogd2luZG93LnNjcmVlbi5oZWlnaHQpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuICBkZXZpY2Uuc3RhdHVzYmFyID0gZGV2aWNlLm5lZWRzU3RhdHVzYmFyKCk7XG5cbiAgLy8gUGl4ZWwgUmF0aW9cbiAgZGV2aWNlLnBpeGVsUmF0aW8gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuXG4gIC8vIEV4cG9ydCBvYmplY3RcbiAgcmV0dXJuIGRldmljZTtcbn1cblxudmFyIERldmljZSQxID0gRGV2aWNlKCk7XG5cbmNsYXNzIEZyYW1ld29yazdDbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtcyA9IHt9LCBwYXJlbnRzID0gW10pIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBzZWxmLnBhcmFtcyA9IHBhcmFtcztcblxuICAgIC8vIEV2ZW50c1xuICAgIHNlbGYuZXZlbnRzUGFyZW50cyA9IHBhcmVudHM7XG4gICAgc2VsZi5ldmVudHNMaXN0ZW5lcnMgPSB7fTtcblxuICAgIGlmIChzZWxmLnBhcmFtcyAmJiBzZWxmLnBhcmFtcy5vbikge1xuICAgICAgT2JqZWN0LmtleXMoc2VsZi5wYXJhbXMub24pLmZvckVhY2goKGV2ZW50TmFtZSkgPT4ge1xuICAgICAgICBzZWxmLm9uKGV2ZW50TmFtZSwgc2VsZi5wYXJhbXMub25bZXZlbnROYW1lXSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgb24oZXZlbnRzLCBoYW5kbGVyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjtcbiAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKChldmVudCkgPT4ge1xuICAgICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLnB1c2goaGFuZGxlcik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH1cbiAgb25jZShldmVudHMsIGhhbmRsZXIpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIGZ1bmN0aW9uIG9uY2VIYW5kbGVyKC4uLmFyZ3MpIHtcbiAgICAgIGhhbmRsZXIuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgICBzZWxmLm9mZihldmVudHMsIG9uY2VIYW5kbGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGYub24oZXZlbnRzLCBvbmNlSGFuZGxlcik7XG4gIH1cbiAgb2ZmKGV2ZW50cywgaGFuZGxlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goKGV2ZW50KSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLmZvckVhY2goKGV2ZW50SGFuZGxlciwgaW5kZXgpID0+IHtcbiAgICAgICAgICBpZiAoZXZlbnRIYW5kbGVyID09PSBoYW5kbGVyKSB7XG4gICAgICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9XG4gIGVtaXQoLi4uYXJncykge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBldmVudHM7XG4gICAgbGV0IGRhdGE7XG4gICAgbGV0IGNvbnRleHQ7XG4gICAgbGV0IGV2ZW50c1BhcmVudHM7XG4gICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyB8fCBBcnJheS5pc0FycmF5KGFyZ3NbMF0pKSB7XG4gICAgICBldmVudHMgPSBhcmdzWzBdO1xuICAgICAgZGF0YSA9IGFyZ3Muc2xpY2UoMSwgYXJncy5sZW5ndGgpO1xuICAgICAgY29udGV4dCA9IHNlbGY7XG4gICAgICBldmVudHNQYXJlbnRzID0gc2VsZi5ldmVudHNQYXJlbnRzO1xuICAgIH0gZWxzZSB7XG4gICAgICBldmVudHMgPSBhcmdzWzBdLmV2ZW50cztcbiAgICAgIGRhdGEgPSBhcmdzWzBdLmRhdGE7XG4gICAgICBjb250ZXh0ID0gYXJnc1swXS5jb250ZXh0IHx8IHNlbGY7XG4gICAgICBldmVudHNQYXJlbnRzID0gYXJnc1swXS5sb2NhbCA/IFtdIDogYXJnc1swXS5wYXJlbnRzIHx8IHNlbGYuZXZlbnRzUGFyZW50cztcbiAgICB9XG4gICAgY29uc3QgZXZlbnRzQXJyYXkgPSBBcnJheS5pc0FycmF5KGV2ZW50cykgPyBldmVudHMgOiBldmVudHMuc3BsaXQoJyAnKTtcbiAgICBjb25zdCBsb2NhbEV2ZW50cyA9IGV2ZW50c0FycmF5Lm1hcChldmVudE5hbWUgPT4gZXZlbnROYW1lLnJlcGxhY2UoJ2xvY2FsOjonLCAnJykpO1xuICAgIGNvbnN0IHBhcmVudEV2ZW50cyA9IGV2ZW50c0FycmF5LmZpbHRlcihldmVudE5hbWUgPT4gZXZlbnROYW1lLmluZGV4T2YoJ2xvY2FsOjonKSA8IDApO1xuICAgIGxvY2FsRXZlbnRzLmZvckVhY2goKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKChldmVudEhhbmRsZXIpID0+IHtcbiAgICAgICAgICBldmVudEhhbmRsZXIuYXBwbHkoY29udGV4dCwgZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChldmVudHNQYXJlbnRzICYmIGV2ZW50c1BhcmVudHMubGVuZ3RoID4gMCkge1xuICAgICAgZXZlbnRzUGFyZW50cy5mb3JFYWNoKChldmVudHNQYXJlbnQpID0+IHtcbiAgICAgICAgZXZlbnRzUGFyZW50LmVtaXQocGFyZW50RXZlbnRzLCAuLi5kYXRhKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gc2VsZjtcbiAgfVxuICB1c2VJbnN0YW5jZU1vZHVsZXNQYXJhbXMoaW5zdGFuY2VQYXJhbXMpIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IHRoaXM7XG4gICAgaWYgKCFpbnN0YW5jZS5tb2R1bGVzKSByZXR1cm47XG4gICAgT2JqZWN0LmtleXMoaW5zdGFuY2UubW9kdWxlcykuZm9yRWFjaCgobW9kdWxlTmFtZSkgPT4ge1xuICAgICAgY29uc3QgbW9kdWxlID0gaW5zdGFuY2UubW9kdWxlc1ttb2R1bGVOYW1lXTtcbiAgICAgIC8vIEV4dGVuZCBwYXJhbXNcbiAgICAgIGlmIChtb2R1bGUucGFyYW1zKSB7XG4gICAgICAgIFV0aWxzLmV4dGVuZChpbnN0YW5jZVBhcmFtcywgbW9kdWxlLnBhcmFtcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgdXNlSW5zdGFuY2VNb2R1bGVzKG1vZHVsZXNQYXJhbXMgPSB7fSkge1xuICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcztcbiAgICBpZiAoIWluc3RhbmNlLm1vZHVsZXMpIHJldHVybjtcbiAgICBPYmplY3Qua2V5cyhpbnN0YW5jZS5tb2R1bGVzKS5mb3JFYWNoKChtb2R1bGVOYW1lKSA9PiB7XG4gICAgICBjb25zdCBtb2R1bGUgPSBpbnN0YW5jZS5tb2R1bGVzW21vZHVsZU5hbWVdO1xuICAgICAgY29uc3QgbW9kdWxlUGFyYW1zID0gbW9kdWxlc1BhcmFtc1ttb2R1bGVOYW1lXSB8fCB7fTtcbiAgICAgIC8vIEV4dGVuZCBpbnN0YW5jZSBtZXRob2RzIGFuZCBwcm9wc1xuICAgICAgaWYgKG1vZHVsZS5pbnN0YW5jZSkge1xuICAgICAgICBPYmplY3Qua2V5cyhtb2R1bGUuaW5zdGFuY2UpLmZvckVhY2goKG1vZHVsZVByb3BOYW1lKSA9PiB7XG4gICAgICAgICAgY29uc3QgbW9kdWxlUHJvcCA9IG1vZHVsZS5pbnN0YW5jZVttb2R1bGVQcm9wTmFtZV07XG4gICAgICAgICAgaWYgKHR5cGVvZiBtb2R1bGVQcm9wID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBpbnN0YW5jZVttb2R1bGVQcm9wTmFtZV0gPSBtb2R1bGVQcm9wLmJpbmQoaW5zdGFuY2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnN0YW5jZVttb2R1bGVQcm9wTmFtZV0gPSBtb2R1bGVQcm9wO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvLyBBZGQgZXZlbnQgbGlzdGVuZXJzXG4gICAgICBpZiAobW9kdWxlLm9uICYmIGluc3RhbmNlLm9uKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKG1vZHVsZS5vbikuZm9yRWFjaCgobW9kdWxlRXZlbnROYW1lKSA9PiB7XG4gICAgICAgICAgaW5zdGFuY2Uub24obW9kdWxlRXZlbnROYW1lLCBtb2R1bGUub25bbW9kdWxlRXZlbnROYW1lXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBNb2R1bGUgY3JlYXRlIGNhbGxiYWNrXG4gICAgICBpZiAobW9kdWxlLmNyZWF0ZSkge1xuICAgICAgICBtb2R1bGUuY3JlYXRlLmJpbmQoaW5zdGFuY2UpKG1vZHVsZVBhcmFtcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgc3RhdGljIGluc3RhbGxNb2R1bGUobW9kdWxlLCAuLi5wYXJhbXMpIHtcbiAgICBjb25zdCBDbGFzcyA9IHRoaXM7XG4gICAgaWYgKCFDbGFzcy5wcm90b3R5cGUubW9kdWxlcykgQ2xhc3MucHJvdG90eXBlLm1vZHVsZXMgPSB7fTtcbiAgICBjb25zdCBuYW1lID0gbW9kdWxlLm5hbWUgfHwgKGAke09iamVjdC5rZXlzKENsYXNzLnByb3RvdHlwZS5tb2R1bGVzKS5sZW5ndGh9XyR7VXRpbHMubm93KCl9YCk7XG4gICAgQ2xhc3MucHJvdG90eXBlLm1vZHVsZXNbbmFtZV0gPSBtb2R1bGU7XG4gICAgLy8gUHJvdG90eXBlXG4gICAgaWYgKG1vZHVsZS5wcm90bykge1xuICAgICAgT2JqZWN0LmtleXMobW9kdWxlLnByb3RvKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgQ2xhc3MucHJvdG90eXBlW2tleV0gPSBtb2R1bGUucHJvdG9ba2V5XTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBDbGFzc1xuICAgIGlmIChtb2R1bGUuc3RhdGljKSB7XG4gICAgICBPYmplY3Qua2V5cyhtb2R1bGUuc3RhdGljKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgQ2xhc3Nba2V5XSA9IG1vZHVsZS5zdGF0aWNba2V5XTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBDYWxsYmFja1xuICAgIGlmIChtb2R1bGUuaW5zdGFsbCkge1xuICAgICAgbW9kdWxlLmluc3RhbGwuYXBwbHkoQ2xhc3MsIHBhcmFtcyk7XG4gICAgfVxuICAgIHJldHVybiBDbGFzcztcbiAgfVxuICBzdGF0aWMgdXNlKG1vZHVsZSwgLi4ucGFyYW1zKSB7XG4gICAgY29uc3QgQ2xhc3MgPSB0aGlzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KG1vZHVsZSkpIHtcbiAgICAgIG1vZHVsZS5mb3JFYWNoKG0gPT4gQ2xhc3MuaW5zdGFsbE1vZHVsZShtKSk7XG4gICAgfVxuICAgIHJldHVybiBDbGFzcy5pbnN0YWxsTW9kdWxlKG1vZHVsZSwgLi4ucGFyYW1zKTtcbiAgfVxufVxuXG5jbGFzcyBGcmFtZXdvcms3IGV4dGVuZHMgRnJhbWV3b3JrN0NsYXNzIHtcbiAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgc3VwZXIocGFyYW1zKTtcblxuICAgIC8vIEFwcCBJbnN0YW5jZVxuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG5cbiAgICAvLyBEZWZhdWx0XG4gICAgY29uc3QgZGVmYXVsdHMgPSB7XG4gICAgICByb290OiAnYm9keScsXG4gICAgICB0aGVtZTogJ2F1dG8nLFxuICAgICAgaW5pdDogdHJ1ZSxcbiAgICAgIHJvdXRlczogW10sXG4gICAgfTtcblxuICAgIC8vIEV4dGVuZCBkZWZhdWx0cyB3aXRoIG1vZHVsZXMgcGFyYW1zXG4gICAgYXBwLnVzZUluc3RhbmNlTW9kdWxlc1BhcmFtcyhkZWZhdWx0cyk7XG5cbiAgICAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBwYXNzZWQgcGFyYW1zXG4gICAgYXBwLnBhcmFtcyA9IFV0aWxzLmV4dGVuZChkZWZhdWx0cywgcGFyYW1zKTtcblxuICAgIC8vIFJvdXRlc1xuICAgIGFwcC5yb3V0ZXMgPSBhcHAucGFyYW1zLnJvdXRlcztcblxuICAgIC8vIFJvb3RcbiAgICBhcHAucm9vdCA9ICQoYXBwLnBhcmFtcy5yb290KTtcbiAgICBhcHAucm9vdFswXS5mNyA9IGFwcDtcblxuICAgIC8vIExpbmsgdG8gbG9jYWwgc3RvcmFnZVxuICAgIGFwcC5scyA9IHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG5cbiAgICAvLyBSVExcbiAgICBhcHAucnRsID0gYXBwLnJvb3QuY3NzKCdkaXJlY3Rpb24nKSA9PT0gJ3J0bCc7XG5cbiAgICAvLyBUaGVtZVxuICAgIGlmIChhcHAucGFyYW1zLnRoZW1lID09PSAnYXV0bycpIHtcbiAgICAgIGFwcC50aGVtZSA9IERldmljZSQxLmlvcyA/ICdpb3MnIDogJ21kJztcbiAgICB9IGVsc2Uge1xuICAgICAgYXBwLnRoZW1lID0gYXBwLnBhcmFtcy50aGVtZTtcbiAgICB9XG5cbiAgICAvLyBJbnN0YWxsIE1vZHVsZXNcbiAgICBhcHAudXNlSW5zdGFuY2VNb2R1bGVzKCk7XG5cbiAgICAvLyBJbml0XG4gICAgaWYgKGFwcC5wYXJhbXMuaW5pdCkge1xuICAgICAgYXBwLmluaXQoKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYXBwIGluc3RhbmNlXG4gICAgcmV0dXJuIGFwcDtcbiAgfVxuICBpbml0KCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgaWYgKGFwcC5pbml0aWFsaXplZCkgcmV0dXJuO1xuXG4gICAgYXBwLnJvb3QuYWRkQ2xhc3MoJ2ZyYW1ld29yazctaW5pdGlhbGl6aW5nJyk7XG5cbiAgICAvLyBSVEwgYXR0clxuICAgIGlmIChhcHAucnRsKSB7XG4gICAgICAkKCdodG1sJykuYXR0cignZGlyJywgJ3J0bCcpO1xuICAgIH1cblxuICAgIC8vIFJvb3QgY2xhc3NcbiAgICBhcHAucm9vdC5hZGRDbGFzcygnZnJhbWV3b3JrNy1yb290Jyk7XG5cbiAgICAvLyBUaGVtZSBjbGFzc1xuICAgICQoJ2h0bWwnKS5yZW1vdmVDbGFzcygnaW9zIG1kJykuYWRkQ2xhc3MoYXBwLnRoZW1lKTtcblxuICAgIC8vIERhdGFcbiAgICBhcHAuZGF0YSA9IHt9O1xuICAgIGlmIChhcHAucGFyYW1zLmRhdGEgJiYgdHlwZW9mIGFwcC5wYXJhbXMuZGF0YSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgVXRpbHMuZXh0ZW5kKGFwcC5kYXRhLCBhcHAucGFyYW1zLmRhdGEuYmluZChhcHApKCkpO1xuICAgIH0gZWxzZSBpZiAoYXBwLnBhcmFtcy5kYXRhKSB7XG4gICAgICBVdGlscy5leHRlbmQoYXBwLmRhdGEsIGFwcC5wYXJhbXMuZGF0YSk7XG4gICAgfVxuICAgIC8vIE1ldGhvZHNcbiAgICBhcHAubWV0aG9kcyA9IHt9O1xuICAgIGlmIChhcHAucGFyYW1zLm1ldGhvZHMpIHtcbiAgICAgIFV0aWxzLmV4dGVuZChhcHAubWV0aG9kcywgYXBwLnBhcmFtcy5tZXRob2RzKTtcbiAgICB9XG4gICAgLy8gSW5pdCBjbGFzc1xuICAgIFV0aWxzLm5leHRGcmFtZSgoKSA9PiB7XG4gICAgICBhcHAucm9vdC5yZW1vdmVDbGFzcygnZnJhbWV3b3JrNy1pbml0aWFsaXppbmcnKTtcbiAgICB9KTtcbiAgICAvLyBFbWl0LCBpbml0IG90aGVyIG1vZHVsZXNcbiAgICBhcHAuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIGFwcC5lbWl0KCdpbml0Jyk7XG4gIH1cbiAgc3RhdGljIENsYXNzKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gbmV3IEZyYW1ld29yazdDbGFzcyguLi5hcmdzKTtcbiAgfVxufVxuXG5GcmFtZXdvcms3LkNsYXNzID0gRnJhbWV3b3JrN0NsYXNzO1xuXG52YXIgVXRpbHMkMiA9IHtcbiAgbmFtZTogJ3V0aWxzJyxcbiAgcHJvdG86IHtcbiAgICB1dGlsczogVXRpbHMsXG4gIH0sXG4gIHN0YXRpYzoge1xuICAgIFV0aWxzLFxuICB9LFxufTtcblxuY29uc3Qga2V5UHJlZml4ID0gJ2Y3c3RvcmFnZS0nO1xuY29uc3QgU3RvcmFnZSA9IHtcbiAgZ2V0KGtleSkge1xuICAgIHJldHVybiBVdGlscy5wcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gSlNPTi5wYXJzZSh3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oYCR7a2V5UHJlZml4fSR7a2V5fWApKTtcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gVXRpbHMucHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oYCR7a2V5UHJlZml4fSR7a2V5fWAsIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICByZW1vdmUoa2V5KSB7XG4gICAgcmV0dXJuIFV0aWxzLnByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGAke2tleVByZWZpeH0ke2tleX1gKTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIGNsZWFyKCkge1xuXG4gIH0sXG4gIGxlbmd0aCgpIHtcblxuICB9LFxuICBrZXlzKCkge1xuICAgIHJldHVybiBVdGlscy5wcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh3aW5kb3cubG9jYWxTdG9yYWdlKVxuICAgICAgICAgIC5maWx0ZXIoa2V5TmFtZSA9PiBrZXlOYW1lLmluZGV4T2Yoa2V5UHJlZml4KSA9PT0gMClcbiAgICAgICAgICAubWFwKGtleU5hbWUgPT4ga2V5TmFtZS5yZXBsYWNlKGtleVByZWZpeCwgJycpKTtcbiAgICAgICAgcmVzb2x2ZShrZXlzKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBmb3JFYWNoKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIFV0aWxzLnByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgT2JqZWN0LmtleXMod2luZG93LmxvY2FsU3RvcmFnZSlcbiAgICAgICAgICAuZmlsdGVyKGtleU5hbWUgPT4ga2V5TmFtZS5pbmRleE9mKGtleVByZWZpeCkgPT09IDApXG4gICAgICAgICAgLmZvckVhY2goKGtleU5hbWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBrZXlOYW1lLnJlcGxhY2Uoa2V5UHJlZml4LCAnJyk7XG4gICAgICAgICAgICBTdG9yYWdlLmdldChrZXkpLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrKGtleSwgdmFsdWUsIGluZGV4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbn07XG5cbnZhciBTdG9yYWdlJDEgPSB7XG4gIG5hbWU6ICdzdG9yYWdlJyxcbiAgc3RhdGljOiB7XG4gICAgU3RvcmFnZSxcbiAgfSxcbn07XG5cbnZhciBSZXNpemUgPSB7XG4gIG5hbWU6ICdyZXNpemUnLFxuICBpbnN0YW5jZToge1xuICAgIGdldFNpemUoKSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgY29uc3Qgb2Zmc2V0ID0gYXBwLnJvb3Qub2Zmc2V0KCk7XG4gICAgICBjb25zdCBbd2lkdGgsIGhlaWdodCwgbGVmdCwgdG9wXSA9IFthcHAucm9vdFswXS5vZmZzZXRXaWR0aCwgYXBwLnJvb3RbMF0ub2Zmc2V0SGVpZ2h0LCBvZmZzZXQubGVmdCwgb2Zmc2V0LnRvcF07XG4gICAgICBhcHAud2lkdGggPSB3aWR0aDtcbiAgICAgIGFwcC5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICBhcHAubGVmdCA9IGxlZnQ7XG4gICAgICBhcHAudG9wID0gdG9wO1xuICAgICAgcmV0dXJuIHsgd2lkdGgsIGhlaWdodCwgbGVmdCwgdG9wIH07XG4gICAgfSxcbiAgfSxcbiAgb246IHtcbiAgICBpbml0KCkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcblxuICAgICAgLy8gR2V0IFNpemVcbiAgICAgIGFwcC5nZXRTaXplKCk7XG5cbiAgICAgIC8vIEVtaXQgcmVzaXplXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgKCkgPT4ge1xuICAgICAgICBhcHAuZW1pdCgncmVzaXplJyk7XG4gICAgICB9LCBmYWxzZSk7XG5cbiAgICAgIC8vIEVtaXQgb3JpZW50YXRpb25jaGFuZ2VcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsICgpID0+IHtcbiAgICAgICAgYXBwLmVtaXQoJ29yaWVudGF0aW9uY2hhbmdlJyk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9yaWVudGF0aW9uY2hhbmdlKCkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGlmIChhcHAuZGV2aWNlICYmIGFwcC5kZXZpY2UubWluaW1hbFVpKSB7XG4gICAgICAgIGlmICh3aW5kb3cub3JpZW50YXRpb24gPT09IDkwIHx8IHdpbmRvdy5vcmllbnRhdGlvbiA9PT0gLTkwKSB7XG4gICAgICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBGaXggaVBhZCB3ZWlyZCBib2R5IHNjcm9sbFxuICAgICAgaWYgKGFwcC5kZXZpY2UuaXBhZCkge1xuICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQgPSAwO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQgPSAwO1xuICAgICAgICB9LCAwKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlc2l6ZSgpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBhcHAuZ2V0U2l6ZSgpO1xuICAgIH0sXG4gIH0sXG59O1xuXG52YXIgRGV2aWNlJDIgPSB7XG4gIG5hbWU6ICdkZXZpY2UnLFxuICBwcm90bzoge1xuICAgIGRldmljZTogRGV2aWNlJDEsXG4gIH0sXG4gIHN0YXRpYzoge1xuICAgIERldmljZTogRGV2aWNlJDEsXG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdCgpIHtcbiAgICAgIGNvbnN0IGNsYXNzTmFtZXMgPSBbXTtcbiAgICAgIGNvbnN0IGh0bWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdodG1sJyk7XG4gICAgICAvLyBQaXhlbCBSYXRpb1xuICAgICAgY2xhc3NOYW1lcy5wdXNoKGBkZXZpY2UtcGl4ZWwtcmF0aW8tJHtNYXRoLmZsb29yKERldmljZSQxLnBpeGVsUmF0aW8pfWApO1xuICAgICAgaWYgKERldmljZSQxLnBpeGVsUmF0aW8gPj0gMikge1xuICAgICAgICBjbGFzc05hbWVzLnB1c2goJ2RldmljZS1yZXRpbmEnKTtcbiAgICAgIH1cbiAgICAgIC8vIE9TIGNsYXNzZXNcbiAgICAgIGlmIChEZXZpY2UkMS5vcykge1xuICAgICAgICBjbGFzc05hbWVzLnB1c2goYGRldmljZS0ke0RldmljZSQxLm9zfWAsIGBkZXZpY2UtJHtEZXZpY2UkMS5vc30tJHtEZXZpY2UkMS5vc1ZlcnNpb24uc3BsaXQoJy4nKVswXX1gLCBgZGV2aWNlLSR7RGV2aWNlJDEub3N9LSR7RGV2aWNlJDEub3NWZXJzaW9uLnJlcGxhY2UoL1xcLi9nLCAnLScpfWApO1xuICAgICAgICBpZiAoRGV2aWNlJDEub3MgPT09ICdpb3MnKSB7XG4gICAgICAgICAgY29uc3QgbWFqb3IgPSBwYXJzZUludChEZXZpY2UkMS5vc1ZlcnNpb24uc3BsaXQoJy4nKVswXSwgMTApO1xuICAgICAgICAgIGZvciAobGV0IGkgPSBtYWpvciAtIDE7IGkgPj0gNjsgaSAtPSAxKSB7XG4gICAgICAgICAgICBjbGFzc05hbWVzLnB1c2goYGRldmljZS1pb3MtZ3QtJHtpfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChEZXZpY2UkMS5kZXNrdG9wKSB7XG4gICAgICAgIGNsYXNzTmFtZXMucHVzaCgnZGV2aWNlLWRlc2t0b3AnKTtcbiAgICAgIH1cbiAgICAgIC8vIFN0YXR1cyBiYXIgY2xhc3Nlc1xuICAgICAgaWYgKERldmljZSQxLnN0YXR1c0Jhcikge1xuICAgICAgICBjbGFzc05hbWVzLnB1c2goJ3dpdGgtc3RhdHVzYmFyLW92ZXJsYXknKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGh0bWwuY2xhc3NMaXN0LnJlbW92ZSgnd2l0aC1zdGF0dXNiYXItb3ZlcmxheScpO1xuICAgICAgfVxuXG4gICAgICAvLyBBZGQgaHRtbCBjbGFzc2VzXG4gICAgICBjbGFzc05hbWVzLmZvckVhY2goKGNsYXNzTmFtZSkgPT4ge1xuICAgICAgICBodG1sLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH0sXG59O1xuXG5mdW5jdGlvbiBzdXBwb3J0c1Bhc3NpdmVMaXN0ZW5lcigpIHtcbiAgbGV0IHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIGNvbnN0IG9wdHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywge1xuICAgICAgZ2V0KCkge1xuICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgfSxcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdFBhc3NpdmVMaXN0ZW5lcicsIG51bGwsIG9wdHMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHN1cHBvcnRzUGFzc2l2ZTtcbn1cbmZ1bmN0aW9uIHN1cHBvcnRUb3VjaCgpIHtcbiAgcmV0dXJuICEhKCgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cpIHx8ICh3aW5kb3cuRG9jdW1lbnRUb3VjaCAmJiBkb2N1bWVudCBpbnN0YW5jZW9mIHdpbmRvdy5Eb2N1bWVudFRvdWNoKSk7XG59XG5cbmxldCBwb3NpdGlvblN0aWNreSA9IGZhbHNlO1xuZnVuY3Rpb24gc3VwcG9ydFBvc2l0aW9uU3RpY2t5KCkge1xuICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgKCdzdGlja3kgLXdlYmtpdC1zdGlja3kgLW1vei1zdGlja3knKS5zcGxpdCgnICcpLmZvckVhY2goKHByb3ApID0+IHtcbiAgICBpZiAocG9zaXRpb25TdGlja3kpIHJldHVybjtcbiAgICBkaXYuc3R5bGUucG9zaXRpb24gPSBwcm9wO1xuICAgIGlmIChkaXYuc3R5bGUucG9zaXRpb24gPT09IHByb3ApIHBvc2l0aW9uU3RpY2t5ID0gcHJvcDtcbiAgfSk7XG59XG5zdXBwb3J0UG9zaXRpb25TdGlja3koKTtcbmZ1bmN0aW9uIHBvc2l0aW9uU3RpY2t5RmFsc3koKSB7XG4gIGxldCBmYWxzeSA9IGZhbHNlO1xuICBpZiAoIXBvc2l0aW9uU3RpY2t5KSByZXR1cm4gZmFsc3k7XG4gIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuaW5uZXJIVE1MID0gYFxuICAgIDxkaXYgaWQ9XCJwb3NpdGlvbi1zdGlja3ktdGVzdFwiIHN0eWxlPVwib3ZlcmZsb3c6c2Nyb2xsOyBoZWlnaHQ6IDEwMHB4OyB3aWR0aDoxMDBweDsgcG9zaXRpb246IGFic29sdXRlOyBsZWZ0OjBweDsgdG9wOjBweDsgcGFkZGluZy10b3A6NTBweDsgdmlzaWJpbGl0eTogaGlkZGVuO1wiPlxuICAgICAgPGRpdiBpZD1cInBvc2l0aW9uLXN0aWNreS10ZXN0LWVsZW1lbnRcIiBzdHlsZT1cIm1hcmdpbjowOyBwYWRkaW5nOjA7IGhlaWdodDoxMHB4OyB3aWR0aDoxMDAlOyBwb3NpdGlvbjoke3Bvc2l0aW9uU3RpY2t5fTsgdG9wOjBcIj48L2Rpdj5cbiAgICAgIDxkaXYgc3R5bGU9XCJoZWlnaHQ6IDEwMDBweFwiPjwvZGl2PlxuICAgIDwvZGl2PmA7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bvc2l0aW9uLXN0aWNreS10ZXN0Jykuc2Nyb2xsVG9wID0gNTA7XG4gIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9zaXRpb24tc3RpY2t5LXRlc3QtZWxlbWVudCcpLm9mZnNldFRvcCA9PT0gNTApIHtcbiAgICBmYWxzeSA9IHRydWU7XG4gIH1cbiAgZGl2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZGl2KTtcbiAgcmV0dXJuIGZhbHN5O1xufVxuY29uc3QgU3VwcG9ydCQxID0ge1xuICB0b3VjaDogc3VwcG9ydFRvdWNoKCksXG4gIC8vIFBhc3NpdmUgTGlzdGVuZXJzXG4gIHBhc3NpdmVMaXN0ZW5lcjogc3VwcG9ydHNQYXNzaXZlTGlzdGVuZXIoKSxcbiAgcG9zaXRpb25TdGlja3ksXG4gIHBvc2l0aW9uU3RpY2t5RmFsc3k6IHBvc2l0aW9uU3RpY2t5RmFsc3koKSxcbn07XG5cbnZhciBTdXBwb3J0ID0ge1xuICBuYW1lOiAnc3VwcG9ydCcsXG4gIHByb3RvOiB7XG4gICAgc3VwcG9ydDogU3VwcG9ydCQxLFxuICB9LFxuICBzdGF0aWM6IHtcbiAgICBTdXBwb3J0OiBTdXBwb3J0JDEsXG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdCgpIHtcbiAgICAgIGNvbnN0IGh0bWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdodG1sJyk7XG4gICAgICBjb25zdCBjbGFzc05hbWVzID0gW107XG4gICAgICBpZiAoU3VwcG9ydCQxLnBvc2l0aW9uU3RpY2t5KSB7XG4gICAgICAgIGNsYXNzTmFtZXMucHVzaCgnc3VwcG9ydC1wb3NpdGlvbi1zdGlja3knKTtcbiAgICAgICAgaWYgKFN1cHBvcnQkMS5wb3NpdGlvblN0aWNreUZhbHN5KSB7XG4gICAgICAgICAgY2xhc3NOYW1lcy5wdXNoKCdzdXBwb3J0LXBvc2l0aW9uLXN0aWNreS1mYWxzeScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBBZGQgaHRtbCBjbGFzc2VzXG4gICAgICBjbGFzc05hbWVzLmZvckVhY2goKGNsYXNzTmFtZSkgPT4ge1xuICAgICAgICBodG1sLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH0sXG59O1xuXG5mdW5jdGlvbiBpbml0VG91Y2goKSB7XG4gIGNvbnN0IGFwcCA9IHRoaXM7XG4gIGNvbnN0IHBhcmFtcyA9IGFwcC5wYXJhbXMudG91Y2g7XG4gIGNvbnN0IHVzZVJpcHBsZSA9IGFwcC50aGVtZSA9PT0gJ21kJyAmJiBwYXJhbXMubWF0ZXJpYWxSaXBwbGU7XG5cbiAgaWYgKERldmljZSQxLmlvcyAmJiBEZXZpY2UkMS53ZWJWaWV3KSB7XG4gICAgLy8gU3RyYW5nZSBoYWNrIHJlcXVpcmVkIGZvciBpT1MgOCB3ZWJ2aWV3IHRvIHdvcmsgb24gaW5wdXRzXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCAoKSA9PiB7fSk7XG4gIH1cblxuICBsZXQgdG91Y2hTdGFydFg7XG4gIGxldCB0b3VjaFN0YXJ0WTtcbiAgbGV0IHRvdWNoU3RhcnRUaW1lO1xuICBsZXQgdGFyZ2V0RWxlbWVudDtcbiAgbGV0IHRyYWNrQ2xpY2s7XG4gIGxldCBhY3RpdmVTZWxlY3Rpb247XG4gIGxldCBzY3JvbGxQYXJlbnQ7XG4gIGxldCBsYXN0Q2xpY2tUaW1lO1xuICBsZXQgaXNNb3ZlZDtcbiAgbGV0IHRhcEhvbGRGaXJlZDtcbiAgbGV0IHRhcEhvbGRUaW1lb3V0O1xuXG4gIGxldCBhY3RpdmFibGVFbGVtZW50O1xuICBsZXQgYWN0aXZlVGltZW91dDtcblxuICBsZXQgbmVlZHNGYXN0Q2xpY2s7XG4gIGxldCBuZWVkc0Zhc3RDbGlja1RpbWVPdXQ7XG5cbiAgbGV0IHJpcHBsZVdhdmU7XG4gIGxldCByaXBwbGVUYXJnZXQ7XG4gIGxldCByaXBwbGVUaW1lb3V0O1xuXG4gIGZ1bmN0aW9uIGZpbmRBY3RpdmFibGVFbGVtZW50KGVsKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gJChlbCk7XG4gICAgY29uc3QgcGFyZW50cyA9IHRhcmdldC5wYXJlbnRzKHBhcmFtcy5hY3RpdmVTdGF0ZUVsZW1lbnRzKTtcbiAgICBsZXQgYWN0aXZhYmxlO1xuICAgIGlmICh0YXJnZXQuaXMocGFyYW1zLmFjdGl2ZVN0YXRlRWxlbWVudHMpKSB7XG4gICAgICBhY3RpdmFibGUgPSB0YXJnZXQ7XG4gICAgfVxuICAgIGlmIChwYXJlbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGFjdGl2YWJsZSA9IGFjdGl2YWJsZSA/IGFjdGl2YWJsZS5hZGQocGFyZW50cykgOiBwYXJlbnRzO1xuICAgIH1cbiAgICByZXR1cm4gYWN0aXZhYmxlIHx8IHRhcmdldDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzSW5zaWRlU2Nyb2xsYWJsZVZpZXcoZWwpIHtcbiAgICBjb25zdCBwYWdlQ29udGVudCA9IGVsLnBhcmVudHMoJy5wYWdlLWNvbnRlbnQsIC5wYW5lbCcpO1xuXG4gICAgaWYgKHBhZ2VDb250ZW50Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFRoaXMgZXZlbnQgaGFuZGxlciBjb3ZlcnMgdGhlIFwidGFwIHRvIHN0b3Agc2Nyb2xsaW5nXCIuXG4gICAgaWYgKHBhZ2VDb250ZW50LnByb3AoJ3Njcm9sbEhhbmRsZXJTZXQnKSAhPT0gJ3llcycpIHtcbiAgICAgIHBhZ2VDb250ZW50Lm9uKCdzY3JvbGwnLCAoKSA9PiB7XG4gICAgICAgIGNsZWFyVGltZW91dChhY3RpdmVUaW1lb3V0KTtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHJpcHBsZVRpbWVvdXQpO1xuICAgICAgfSk7XG4gICAgICBwYWdlQ29udGVudC5wcm9wKCdzY3JvbGxIYW5kbGVyU2V0JywgJ3llcycpO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGZ1bmN0aW9uIGFkZEFjdGl2ZSgpIHtcbiAgICBpZiAoIWFjdGl2YWJsZUVsZW1lbnQpIHJldHVybjtcbiAgICBhY3RpdmFibGVFbGVtZW50LmFkZENsYXNzKCdhY3RpdmUtc3RhdGUnKTtcbiAgfVxuICBmdW5jdGlvbiByZW1vdmVBY3RpdmUoKSB7XG4gICAgaWYgKCFhY3RpdmFibGVFbGVtZW50KSByZXR1cm47XG4gICAgYWN0aXZhYmxlRWxlbWVudC5yZW1vdmVDbGFzcygnYWN0aXZlLXN0YXRlJyk7XG4gICAgYWN0aXZhYmxlRWxlbWVudCA9IG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gaXNGb3JtRWxlbWVudChlbCkge1xuICAgIGNvbnN0IG5vZGVzID0gKCdpbnB1dCBzZWxlY3QgdGV4dGFyZWEgbGFiZWwnKS5zcGxpdCgnICcpO1xuICAgIGlmIChlbC5ub2RlTmFtZSAmJiBub2Rlcy5pbmRleE9mKGVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpID49IDApIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmdW5jdGlvbiBhbmRyb2lkTmVlZHNCbHVyKGVsKSB7XG4gICAgY29uc3Qgbm9CbHVyID0gKCdidXR0b24gaW5wdXQgdGV4dGFyZWEgc2VsZWN0Jykuc3BsaXQoJyAnKTtcbiAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiBlbCAhPT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICBpZiAobm9CbHVyLmluZGV4T2YoZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkgPj0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZ1bmN0aW9uIHRhcmdldE5lZWRzRmFzdENsaWNrKGVsKSB7XG4gICAgLypcbiAgICBpZiAoXG4gICAgICBEZXZpY2UuaW9zXG4gICAgICAmJlxuICAgICAgKFxuICAgICAgICBEZXZpY2Uub3NWZXJzaW9uLnNwbGl0KCcuJylbMF0gPiA5XG4gICAgICAgIHx8XG4gICAgICAgIChEZXZpY2Uub3NWZXJzaW9uLnNwbGl0KCcuJylbMF0gKiAxID09PSA5ICYmIERldmljZS5vc1ZlcnNpb24uc3BsaXQoJy4nKVsxXSA+PSAxKVxuICAgICAgKVxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAqL1xuICAgIGNvbnN0ICRlbCA9ICQoZWwpO1xuICAgIGlmIChlbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnICYmIChlbC50eXBlID09PSAnZmlsZScgfHwgZWwudHlwZSA9PT0gJ3JhbmdlJykpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3NlbGVjdCcgJiYgRGV2aWNlJDEuYW5kcm9pZCkgcmV0dXJuIGZhbHNlO1xuICAgIGlmICgkZWwuaGFzQ2xhc3MoJ25vLWZhc3RjbGljaycpIHx8ICRlbC5wYXJlbnRzKCcubm8tZmFzdGNsaWNrJykubGVuZ3RoID4gMCkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChwYXJhbXMuZmFzdENsaWNrc0V4Y2x1ZGUgJiYgJGVsLmlzKHBhcmFtcy5mYXN0Q2xpY2tzRXhjbHVkZSkpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiB0YXJnZXROZWVkc0ZvY3VzKGVsKSB7XG4gICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGVsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHRhZyA9IGVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3Qgc2tpcElucHV0cyA9ICgnYnV0dG9uIGNoZWNrYm94IGZpbGUgaW1hZ2UgcmFkaW8gc3VibWl0Jykuc3BsaXQoJyAnKTtcbiAgICBpZiAoZWwuZGlzYWJsZWQgfHwgZWwucmVhZE9ubHkpIHJldHVybiBmYWxzZTtcbiAgICBpZiAodGFnID09PSAndGV4dGFyZWEnKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAodGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgaWYgKERldmljZSQxLmFuZHJvaWQpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodGFnID09PSAnaW5wdXQnICYmIHNraXBJbnB1dHMuaW5kZXhPZihlbC50eXBlKSA8IDApIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmdW5jdGlvbiB0YXJnZXROZWVkc1ByZXZlbnQoZWwpIHtcbiAgICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgICBsZXQgcHJldmVudCA9IHRydWU7XG4gICAgaWYgKCRlbC5pcygnbGFiZWwnKSB8fCAkZWwucGFyZW50cygnbGFiZWwnKS5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAoRGV2aWNlJDEuYW5kcm9pZCkge1xuICAgICAgICBwcmV2ZW50ID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKERldmljZSQxLmlvcyAmJiAkZWwuaXMoJ2lucHV0JykpIHtcbiAgICAgICAgcHJldmVudCA9IHRydWU7XG4gICAgICB9IGVsc2UgcHJldmVudCA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gcHJldmVudDtcbiAgfVxuXG4gIC8vIFJpcHBsZSBoYW5kbGVyc1xuICBmdW5jdGlvbiBmaW5kUmlwcGxlRWxlbWVudChlbCkge1xuICAgIGNvbnN0IHJpcHBsZUVsZW1lbnRzID0gcGFyYW1zLm1hdGVyaWFsUmlwcGxlRWxlbWVudHM7XG4gICAgY29uc3QgJGVsID0gJChlbCk7XG4gICAgaWYgKCRlbC5pcyhyaXBwbGVFbGVtZW50cykpIHtcbiAgICAgIGlmICgkZWwuaGFzQ2xhc3MoJ25vLXJpcHBsZScpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAkZWw7XG4gICAgfSBlbHNlIGlmICgkZWwucGFyZW50cyhyaXBwbGVFbGVtZW50cykubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgcmlwcGxlUGFyZW50ID0gJGVsLnBhcmVudHMocmlwcGxlRWxlbWVudHMpLmVxKDApO1xuICAgICAgaWYgKHJpcHBsZVBhcmVudC5oYXNDbGFzcygnbm8tcmlwcGxlJykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJpcHBsZVBhcmVudDtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZVJpcHBsZSgkZWwsIHgsIHkpIHtcbiAgICBpZiAoISRlbCkgcmV0dXJuO1xuICAgIHJpcHBsZVdhdmUgPSBhcHAudG91Y2hSaXBwbGUuY3JlYXRlKCRlbCwgeCwgeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVSaXBwbGUoKSB7XG4gICAgaWYgKCFyaXBwbGVXYXZlKSByZXR1cm47XG4gICAgcmlwcGxlV2F2ZS5yZW1vdmUoKTtcbiAgICByaXBwbGVXYXZlID0gdW5kZWZpbmVkO1xuICAgIHJpcHBsZVRhcmdldCA9IHVuZGVmaW5lZDtcbiAgfVxuICBmdW5jdGlvbiByaXBwbGVUb3VjaFN0YXJ0KGVsKSB7XG4gICAgcmlwcGxlVGFyZ2V0ID0gZmluZFJpcHBsZUVsZW1lbnQoZWwpO1xuICAgIGlmICghcmlwcGxlVGFyZ2V0IHx8IHJpcHBsZVRhcmdldC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJpcHBsZVRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFpc0luc2lkZVNjcm9sbGFibGVWaWV3KHJpcHBsZVRhcmdldCkpIHtcbiAgICAgIGNyZWF0ZVJpcHBsZShyaXBwbGVUYXJnZXQsIHRvdWNoU3RhcnRYLCB0b3VjaFN0YXJ0WSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJpcHBsZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY3JlYXRlUmlwcGxlKHJpcHBsZVRhcmdldCwgdG91Y2hTdGFydFgsIHRvdWNoU3RhcnRZKTtcbiAgICAgIH0sIDgwKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gcmlwcGxlVG91Y2hNb3ZlKCkge1xuICAgIGNsZWFyVGltZW91dChyaXBwbGVUaW1lb3V0KTtcbiAgICByZW1vdmVSaXBwbGUoKTtcbiAgfVxuICBmdW5jdGlvbiByaXBwbGVUb3VjaEVuZCgpIHtcbiAgICBpZiAocmlwcGxlV2F2ZSkge1xuICAgICAgcmVtb3ZlUmlwcGxlKCk7XG4gICAgfSBlbHNlIGlmIChyaXBwbGVUYXJnZXQgJiYgIWlzTW92ZWQpIHtcbiAgICAgIGNsZWFyVGltZW91dChyaXBwbGVUaW1lb3V0KTtcbiAgICAgIGNyZWF0ZVJpcHBsZShyaXBwbGVUYXJnZXQsIHRvdWNoU3RhcnRYLCB0b3VjaFN0YXJ0WSk7XG4gICAgICBzZXRUaW1lb3V0KHJlbW92ZVJpcHBsZSwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZVJpcHBsZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIE1vdXNlIEhhbmRsZXJzXG4gIGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93bihlKSB7XG4gICAgZmluZEFjdGl2YWJsZUVsZW1lbnQoZS50YXJnZXQpLmFkZENsYXNzKCdhY3RpdmUtc3RhdGUnKTtcbiAgICBpZiAoJ3doaWNoJyBpbiBlICYmIGUud2hpY2ggPT09IDMpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAkKCcuYWN0aXZlLXN0YXRlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZS1zdGF0ZScpO1xuICAgICAgfSwgMCk7XG4gICAgfVxuICAgIGlmICh1c2VSaXBwbGUpIHtcbiAgICAgIHRvdWNoU3RhcnRYID0gZS5wYWdlWDtcbiAgICAgIHRvdWNoU3RhcnRZID0gZS5wYWdlWTtcbiAgICAgIHJpcHBsZVRvdWNoU3RhcnQoZS50YXJnZXQsIGUucGFnZVgsIGUucGFnZVkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVNb3VzZU1vdmUoKSB7XG4gICAgJCgnLmFjdGl2ZS1zdGF0ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUtc3RhdGUnKTtcbiAgICBpZiAodXNlUmlwcGxlKSB7XG4gICAgICByaXBwbGVUb3VjaE1vdmUoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gaGFuZGxlTW91c2VVcCgpIHtcbiAgICAkKCcuYWN0aXZlLXN0YXRlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZS1zdGF0ZScpO1xuICAgIGlmICh1c2VSaXBwbGUpIHtcbiAgICAgIHJpcHBsZVRvdWNoRW5kKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gU2VuZCBDbGlja1xuICBmdW5jdGlvbiBzZW5kQ2xpY2soZSkge1xuICAgIGNvbnN0IHRvdWNoID0gZS5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgICBjb25zdCBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnTW91c2VFdmVudHMnKTtcbiAgICBsZXQgZXZlbnRUeXBlID0gJ2NsaWNrJztcbiAgICBpZiAoRGV2aWNlJDEuYW5kcm9pZCAmJiB0YXJnZXRFbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdzZWxlY3QnKSB7XG4gICAgICBldmVudFR5cGUgPSAnbW91c2Vkb3duJztcbiAgICB9XG4gICAgZXZ0LmluaXRNb3VzZUV2ZW50KGV2ZW50VHlwZSwgdHJ1ZSwgdHJ1ZSwgd2luZG93LCAxLCB0b3VjaC5zY3JlZW5YLCB0b3VjaC5zY3JlZW5ZLCB0b3VjaC5jbGllbnRYLCB0b3VjaC5jbGllbnRZLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMCwgbnVsbCk7XG4gICAgZXZ0LmZvcndhcmRlZFRvdWNoRXZlbnQgPSB0cnVlO1xuXG4gICAgaWYgKGFwcC5kZXZpY2UuaW9zICYmIG5hdmlnYXRvci5zdGFuZGFsb25lKSB7XG4gICAgICAvL0ZpeCB0aGUgaXNzdWUgaGFwcGVucyBpbiBpT1MgaG9tZSBzY3JlZW4gYXBwcyB3aGVyZSB0aGUgd3JvbmcgZWxlbWVudCBpcyBzZWxlY3RlZCBkdXJpbmcgYSBtb21lbnR1bSBzY3JvbGwuXG4gICAgICAvL1Vwb24gdGFwcGluZywgd2UgZ2l2ZSB0aGUgc2Nyb2xsaW5nIHRpbWUgdG8gc3RvcCwgdGhlbiB3ZSBncmFiIHRoZSBlbGVtZW50IGJhc2VkIHdoZXJlIHRoZSB1c2VyIHRhcHBlZC5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRhcmdldEVsZW1lbnQgPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCwgZS5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZKTtcbiAgICAgICAgICB0YXJnZXRFbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICAgIH0sIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRFbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICB9XG4gIH1cblxuICAvLyBUb3VjaCBIYW5kbGVyc1xuICBmdW5jdGlvbiBoYW5kbGVUb3VjaFN0YXJ0KGUpIHtcbiAgICBpc01vdmVkID0gZmFsc2U7XG4gICAgdGFwSG9sZEZpcmVkID0gZmFsc2U7XG4gICAgaWYgKGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPiAxKSB7XG4gICAgICBpZiAoYWN0aXZhYmxlRWxlbWVudCkgcmVtb3ZlQWN0aXZlKCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGUudG91Y2hlcy5sZW5ndGggPiAxICYmIGFjdGl2YWJsZUVsZW1lbnQpIHtcbiAgICAgIHJlbW92ZUFjdGl2ZSgpO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLnRhcEhvbGQpIHtcbiAgICAgIGlmICh0YXBIb2xkVGltZW91dCkgY2xlYXJUaW1lb3V0KHRhcEhvbGRUaW1lb3V0KTtcbiAgICAgIHRhcEhvbGRUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmIChlICYmIGUudG91Y2hlcyAmJiBlLnRvdWNoZXMubGVuZ3RoID4gMSkgcmV0dXJuO1xuICAgICAgICB0YXBIb2xkRmlyZWQgPSB0cnVlO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICQoZS50YXJnZXQpLnRyaWdnZXIoJ3RhcGhvbGQnKTtcbiAgICAgIH0sIHBhcmFtcy50YXBIb2xkRGVsYXkpO1xuICAgIH1cbiAgICBpZiAobmVlZHNGYXN0Q2xpY2tUaW1lT3V0KSBjbGVhclRpbWVvdXQobmVlZHNGYXN0Q2xpY2tUaW1lT3V0KTtcbiAgICBuZWVkc0Zhc3RDbGljayA9IHRhcmdldE5lZWRzRmFzdENsaWNrKGUudGFyZ2V0KTtcblxuICAgIGlmICghbmVlZHNGYXN0Q2xpY2spIHtcbiAgICAgIHRyYWNrQ2xpY2sgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoRGV2aWNlJDEuaW9zIHx8IChEZXZpY2UkMS5hbmRyb2lkICYmICdnZXRTZWxlY3Rpb24nIGluIHdpbmRvdykpIHtcbiAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgICAgIGlmIChcbiAgICAgICAgc2VsZWN0aW9uLnJhbmdlQ291bnQgJiZcbiAgICAgICAgc2VsZWN0aW9uLmZvY3VzTm9kZSAhPT0gZG9jdW1lbnQuYm9keSAmJlxuICAgICAgICAoIXNlbGVjdGlvbi5pc0NvbGxhcHNlZCB8fCBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBzZWxlY3Rpb24uZm9jdXNOb2RlKVxuICAgICAgKSB7XG4gICAgICAgIGFjdGl2ZVNlbGVjdGlvbiA9IHRydWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBhY3RpdmVTZWxlY3Rpb24gPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKERldmljZSQxLmFuZHJvaWQpIHtcbiAgICAgIGlmIChhbmRyb2lkTmVlZHNCbHVyKGUudGFyZ2V0KSkge1xuICAgICAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0cmFja0NsaWNrID0gdHJ1ZTtcbiAgICB0YXJnZXRFbGVtZW50ID0gZS50YXJnZXQ7XG4gICAgdG91Y2hTdGFydFRpbWUgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xuICAgIHRvdWNoU3RhcnRYID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYO1xuICAgIHRvdWNoU3RhcnRZID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZO1xuXG4gICAgICAvLyBEZXRlY3Qgc2Nyb2xsIHBhcmVudFxuICAgIGlmIChEZXZpY2UkMS5pb3MpIHtcbiAgICAgIHNjcm9sbFBhcmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICQodGFyZ2V0RWxlbWVudCkucGFyZW50cygpLmVhY2goKCkgPT4ge1xuICAgICAgICBjb25zdCBwYXJlbnQgPSB0aGlzO1xuICAgICAgICBpZiAocGFyZW50LnNjcm9sbEhlaWdodCA+IHBhcmVudC5vZmZzZXRIZWlnaHQgJiYgIXNjcm9sbFBhcmVudCkge1xuICAgICAgICAgIHNjcm9sbFBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgICBzY3JvbGxQYXJlbnQuZjdTY3JvbGxUb3AgPSBzY3JvbGxQYXJlbnQuc2Nyb2xsVG9wO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKChlLnRpbWVTdGFtcCAtIGxhc3RDbGlja1RpbWUpIDwgcGFyYW1zLmZhc3RDbGlja3NEZWxheUJldHdlZW5DbGlja3MpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmFjdGl2ZVN0YXRlKSB7XG4gICAgICBhY3RpdmFibGVFbGVtZW50ID0gZmluZEFjdGl2YWJsZUVsZW1lbnQodGFyZ2V0RWxlbWVudCk7XG4gICAgICAvLyBJZiBpdCdzIGluc2lkZSBhIHNjcm9sbGFibGUgdmlldywgd2UgZG9uJ3QgdHJpZ2dlciBhY3RpdmUtc3RhdGUgeWV0LFxuICAgICAgLy8gYmVjYXVzZSBpdCBjYW4gYmUgYSBzY3JvbGwgaW5zdGVhZC4gQmFzZWQgb24gdGhlIGxpbms6XG4gICAgICAvLyBodHRwOi8vbGFibm90ZS5iZWVkZXNrLmNvbS9jbGljay1zY3JvbGwtYW5kLXBzZXVkby1hY3RpdmUtb24tbW9iaWxlLXdlYmtcbiAgICAgIGlmICghaXNJbnNpZGVTY3JvbGxhYmxlVmlldyhhY3RpdmFibGVFbGVtZW50KSkge1xuICAgICAgICBhZGRBY3RpdmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2ZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGFkZEFjdGl2ZSwgODApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodXNlUmlwcGxlKSB7XG4gICAgICByaXBwbGVUb3VjaFN0YXJ0KHRhcmdldEVsZW1lbnQsIHRvdWNoU3RhcnRYLCB0b3VjaFN0YXJ0WSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZVRvdWNoTW92ZShlKSB7XG4gICAgaWYgKCF0cmFja0NsaWNrKSByZXR1cm47XG4gICAgY29uc3QgZGlzdGFuY2UgPSBwYXJhbXMuZmFzdENsaWNrc0Rpc3RhbmNlVGhyZXNob2xkO1xuICAgIGlmIChkaXN0YW5jZSkge1xuICAgICAgY29uc3QgcGFnZVggPSBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVg7XG4gICAgICBjb25zdCBwYWdlWSA9IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWTtcbiAgICAgIGlmIChNYXRoLmFicyhwYWdlWCAtIHRvdWNoU3RhcnRYKSA+IGRpc3RhbmNlIHx8IE1hdGguYWJzKHBhZ2VZIC0gdG91Y2hTdGFydFkpID4gZGlzdGFuY2UpIHtcbiAgICAgICAgaXNNb3ZlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlzTW92ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoaXNNb3ZlZCkge1xuICAgICAgdHJhY2tDbGljayA9IGZhbHNlO1xuICAgICAgdGFyZ2V0RWxlbWVudCA9IG51bGw7XG4gICAgICBpc01vdmVkID0gdHJ1ZTtcbiAgICAgIGlmIChwYXJhbXMudGFwSG9sZCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGFwSG9sZFRpbWVvdXQpO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5hY3RpdmVTdGF0ZSkge1xuICAgICAgICBjbGVhclRpbWVvdXQoYWN0aXZlVGltZW91dCk7XG4gICAgICAgIHJlbW92ZUFjdGl2ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKHVzZVJpcHBsZSkge1xuICAgICAgICByaXBwbGVUb3VjaE1vdmUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gaGFuZGxlVG91Y2hFbmQoZSkge1xuICAgIGNsZWFyVGltZW91dChhY3RpdmVUaW1lb3V0KTtcbiAgICBjbGVhclRpbWVvdXQodGFwSG9sZFRpbWVvdXQpO1xuXG4gICAgaWYgKCF0cmFja0NsaWNrKSB7XG4gICAgICBpZiAoIWFjdGl2ZVNlbGVjdGlvbiAmJiBuZWVkc0Zhc3RDbGljaykge1xuICAgICAgICBpZiAoIShEZXZpY2UkMS5hbmRyb2lkICYmICFlLmNhbmNlbGFibGUpICYmIGUuY2FuY2VsYWJsZSkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGUudGFyZ2V0KSB7XG4gICAgICBpZiAocGFyYW1zLmFjdGl2ZVN0YXRlKSByZW1vdmVBY3RpdmUoKTtcbiAgICAgIGlmICh1c2VSaXBwbGUpIHtcbiAgICAgICAgcmlwcGxlVG91Y2hFbmQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmICghYWN0aXZlU2VsZWN0aW9uKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKChlLnRpbWVTdGFtcCAtIGxhc3RDbGlja1RpbWUpIDwgcGFyYW1zLmZhc3RDbGlja3NEZWxheUJldHdlZW5DbGlja3MpIHtcbiAgICAgIHNldFRpbWVvdXQocmVtb3ZlQWN0aXZlLCAwKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGxhc3RDbGlja1RpbWUgPSBlLnRpbWVTdGFtcDtcblxuICAgIHRyYWNrQ2xpY2sgPSBmYWxzZTtcblxuICAgIGlmIChEZXZpY2UkMS5pb3MgJiYgc2Nyb2xsUGFyZW50KSB7XG4gICAgICBpZiAoc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCAhPT0gc2Nyb2xsUGFyZW50LmY3U2Nyb2xsVG9wKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgYWN0aXZlLXN0YXRlIGhlcmUgYmVjYXVzZSwgaW4gYSB2ZXJ5IGZhc3QgdGFwLCB0aGUgdGltZW91dCBkaWRuJ3RcbiAgICAvLyBoYXZlIHRoZSBjaGFuY2UgdG8gZXhlY3V0ZS4gUmVtb3ZpbmcgYWN0aXZlLXN0YXRlIGluIGEgdGltZW91dCBnaXZlc1xuICAgIC8vIHRoZSBjaGFuY2UgdG8gdGhlIGFuaW1hdGlvbiBleGVjdXRlLlxuICAgIGlmIChwYXJhbXMuYWN0aXZlU3RhdGUpIHtcbiAgICAgIGFkZEFjdGl2ZSgpO1xuICAgICAgc2V0VGltZW91dChyZW1vdmVBY3RpdmUsIDApO1xuICAgIH1cbiAgICAvLyBSZW1vdmUgUmlwcGxlXG4gICAgaWYgKHVzZVJpcHBsZSkge1xuICAgICAgcmlwcGxlVG91Y2hFbmQoKTtcbiAgICB9XG5cbiAgICAgIC8vIFRyaWdnZXIgZm9jdXMgd2hlbiByZXF1aXJlZFxuICAgIGlmICh0YXJnZXROZWVkc0ZvY3VzKHRhcmdldEVsZW1lbnQpKSB7XG4gICAgICBpZiAoRGV2aWNlJDEuaW9zICYmIERldmljZSQxLndlYlZpZXcpIHtcbiAgICAgICAgaWYgKChlLnRpbWVTdGFtcCAtIHRvdWNoU3RhcnRUaW1lKSA+IDE1OSkge1xuICAgICAgICAgIHRhcmdldEVsZW1lbnQgPSBudWxsO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0YXJnZXRFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0RWxlbWVudC5mb2N1cygpO1xuICAgIH1cblxuICAgICAgLy8gQmx1ciBhY3RpdmUgZWxlbWVudHNcbiAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiB0YXJnZXRFbGVtZW50ICE9PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGRvY3VtZW50LmJvZHkgJiYgdGFyZ2V0RWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnbGFiZWwnKSB7XG4gICAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgICB9XG5cbiAgICAgIC8vIFNlbmQgY2xpY2tcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgc2VuZENsaWNrKGUpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVUb3VjaENhbmNlbCgpIHtcbiAgICB0cmFja0NsaWNrID0gZmFsc2U7XG4gICAgdGFyZ2V0RWxlbWVudCA9IG51bGw7XG5cbiAgICAgIC8vIFJlbW92ZSBBY3RpdmUgU3RhdGVcbiAgICBjbGVhclRpbWVvdXQoYWN0aXZlVGltZW91dCk7XG4gICAgY2xlYXJUaW1lb3V0KHRhcEhvbGRUaW1lb3V0KTtcbiAgICBpZiAocGFyYW1zLmFjdGl2ZVN0YXRlKSB7XG4gICAgICByZW1vdmVBY3RpdmUoKTtcbiAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSBSaXBwbGVcbiAgICBpZiAodXNlUmlwcGxlKSB7XG4gICAgICByaXBwbGVUb3VjaEVuZCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGUpIHtcbiAgICBsZXQgYWxsb3dDbGljayA9IGZhbHNlO1xuXG4gICAgaWYgKHRyYWNrQ2xpY2spIHtcbiAgICAgIHRhcmdldEVsZW1lbnQgPSBudWxsO1xuICAgICAgdHJhY2tDbGljayA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICgoZS50YXJnZXQudHlwZSA9PT0gJ3N1Ym1pdCcgJiYgZS5kZXRhaWwgPT09IDApIHx8IGUudGFyZ2V0LnR5cGUgPT09ICdmaWxlJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICghdGFyZ2V0RWxlbWVudCkge1xuICAgICAgaWYgKCFpc0Zvcm1FbGVtZW50KGUudGFyZ2V0KSkge1xuICAgICAgICBhbGxvd0NsaWNrID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFuZWVkc0Zhc3RDbGljaykge1xuICAgICAgYWxsb3dDbGljayA9IHRydWU7XG4gICAgfVxuICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSB0YXJnZXRFbGVtZW50KSB7XG4gICAgICBhbGxvd0NsaWNrID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGUuZm9yd2FyZGVkVG91Y2hFdmVudCkge1xuICAgICAgYWxsb3dDbGljayA9IHRydWU7XG4gICAgfVxuICAgIGlmICghZS5jYW5jZWxhYmxlKSB7XG4gICAgICBhbGxvd0NsaWNrID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy50YXBIb2xkICYmIHBhcmFtcy50YXBIb2xkUHJldmVudENsaWNrcyAmJiB0YXBIb2xkRmlyZWQpIHtcbiAgICAgIGFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFhbGxvd0NsaWNrKSB7XG4gICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGlmICh0YXJnZXRFbGVtZW50KSB7XG4gICAgICAgIGlmICh0YXJnZXROZWVkc1ByZXZlbnQodGFyZ2V0RWxlbWVudCkgfHwgaXNNb3ZlZCkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgICAgdGFyZ2V0RWxlbWVudCA9IG51bGw7XG4gICAgfVxuICAgIG5lZWRzRmFzdENsaWNrVGltZU91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgbmVlZHNGYXN0Q2xpY2sgPSBmYWxzZTtcbiAgICB9LCAoRGV2aWNlJDEuaW9zIHx8IERldmljZSQxLmFuZHJvaWRDaHJvbWUgPyAxMDAgOiA0MDApKTtcblxuICAgIGlmIChwYXJhbXMudGFwSG9sZCkge1xuICAgICAgdGFwSG9sZFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGFwSG9sZEZpcmVkID0gZmFsc2U7XG4gICAgICB9LCAoRGV2aWNlJDEuaW9zIHx8IERldmljZSQxLmFuZHJvaWRDaHJvbWUgPyAxMDAgOiA0MDApKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWxsb3dDbGljaztcbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXRBcHBUb3VjaEV2ZW50KG5hbWUsIGNvbnRleHQsIGUpIHtcbiAgICBhcHAuZW1pdCh7XG4gICAgICBldmVudHM6IG5hbWUsXG4gICAgICBkYXRhOiBbZV0sXG4gICAgICBjb250ZXh0LFxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGFwcENsaWNrKGUpIHtcbiAgICBlbWl0QXBwVG91Y2hFdmVudCgnY2xpY2snLCB0aGlzLCBlKTtcbiAgfVxuICBmdW5jdGlvbiBhcHBUb3VjaFN0YXJ0QWN0aXZlKGUpIHtcbiAgICBlbWl0QXBwVG91Y2hFdmVudCgndG91Y2hzdGFydCcsIHRoaXMsIGUpO1xuICB9XG4gIGZ1bmN0aW9uIGFwcFRvdWNoTW92ZUFjdGl2ZShlKSB7XG4gICAgZW1pdEFwcFRvdWNoRXZlbnQoJ3RvdWNobW92ZScsIHRoaXMsIGUpO1xuICB9XG4gIGZ1bmN0aW9uIGFwcFRvdWNoRW5kQWN0aXZlKGUpIHtcbiAgICBlbWl0QXBwVG91Y2hFdmVudCgndG91Y2hlbmQnLCB0aGlzLCBlKTtcbiAgfVxuICBmdW5jdGlvbiBhcHBUb3VjaFN0YXJ0UGFzc2l2ZShlKSB7XG4gICAgZW1pdEFwcFRvdWNoRXZlbnQoJ3RvdWNoc3RhcnQ6cGFzc2l2ZScsIHRoaXMsIGUpO1xuICB9XG4gIGZ1bmN0aW9uIGFwcFRvdWNoTW92ZVBhc3NpdmUoZSkge1xuICAgIGVtaXRBcHBUb3VjaEV2ZW50KCd0b3VjaG1vdmU6cGFzc2l2ZScsIHRoaXMsIGUpO1xuICB9XG4gIGZ1bmN0aW9uIGFwcFRvdWNoRW5kUGFzc2l2ZShlKSB7XG4gICAgZW1pdEFwcFRvdWNoRXZlbnQoJ3RvdWNoZW5kOnBhc3NpdmUnLCB0aGlzLCBlKTtcbiAgfVxuXG4gIGNvbnN0IHBhc3NpdmVMaXN0ZW5lciA9IFN1cHBvcnQkMS5wYXNzaXZlTGlzdGVuZXIgPyB7IHBhc3NpdmU6IHRydWUgfSA6IGZhbHNlO1xuICBjb25zdCBhY3RpdmVMaXN0ZW5lciA9IFN1cHBvcnQkMS5wYXNzaXZlTGlzdGVuZXIgPyB7IHBhc3NpdmU6IGZhbHNlIH0gOiBmYWxzZTtcblxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFwcENsaWNrLCB0cnVlKTtcblxuICBpZiAoU3VwcG9ydCQxLnBhc3NpdmVMaXN0ZW5lcikge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoYXBwLnRvdWNoRXZlbnRzLnN0YXJ0LCBhcHBUb3VjaFN0YXJ0QWN0aXZlLCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihhcHAudG91Y2hFdmVudHMubW92ZSwgYXBwVG91Y2hNb3ZlQWN0aXZlLCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihhcHAudG91Y2hFdmVudHMuZW5kLCBhcHBUb3VjaEVuZEFjdGl2ZSwgYWN0aXZlTGlzdGVuZXIpO1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihhcHAudG91Y2hFdmVudHMuc3RhcnQsIGFwcFRvdWNoU3RhcnRQYXNzaXZlLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoYXBwLnRvdWNoRXZlbnRzLm1vdmUsIGFwcFRvdWNoTW92ZVBhc3NpdmUsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihhcHAudG91Y2hFdmVudHMuZW5kLCBhcHBUb3VjaEVuZFBhc3NpdmUsIHBhc3NpdmVMaXN0ZW5lcik7XG4gIH0gZWxzZSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihhcHAudG91Y2hFdmVudHMuc3RhcnQsIGZ1bmN0aW9uIGhhbmRsZXIoZSkge1xuICAgICAgYXBwVG91Y2hTdGFydEFjdGl2ZS5jYWxsKHRoaXMsIGUpO1xuICAgICAgYXBwVG91Y2hTdGFydFBhc3NpdmUuY2FsbCh0aGlzLCBlKTtcbiAgICB9LCBmYWxzZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihhcHAudG91Y2hFdmVudHMubW92ZSwgZnVuY3Rpb24gaGFuZGxlcihlKSB7XG4gICAgICBhcHBUb3VjaE1vdmVBY3RpdmUuY2FsbCh0aGlzLCBlKTtcbiAgICAgIGFwcFRvdWNoTW92ZVBhc3NpdmUuY2FsbCh0aGlzLCBlKTtcbiAgICB9LCBmYWxzZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihhcHAudG91Y2hFdmVudHMuZW5kLCBmdW5jdGlvbiBoYW5kbGVyKGUpIHtcbiAgICAgIGFwcFRvdWNoRW5kQWN0aXZlLmNhbGwodGhpcywgZSk7XG4gICAgICBhcHBUb3VjaEVuZFBhc3NpdmUuY2FsbCh0aGlzLCBlKTtcbiAgICB9LCBmYWxzZSk7XG4gIH1cblxuICBpZiAoU3VwcG9ydCQxLnRvdWNoKSB7XG4gICAgYXBwLm9uKCdjbGljaycsIGhhbmRsZUNsaWNrKTtcbiAgICBhcHAub24oJ3RvdWNoc3RhcnQnLCBoYW5kbGVUb3VjaFN0YXJ0KTtcbiAgICBhcHAub24oJ3RvdWNobW92ZScsIGhhbmRsZVRvdWNoTW92ZSk7XG4gICAgYXBwLm9uKCd0b3VjaGVuZCcsIGhhbmRsZVRvdWNoRW5kKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGNhbmNlbCcsIGhhbmRsZVRvdWNoQ2FuY2VsLCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gIH0gZWxzZSBpZiAocGFyYW1zLmFjdGl2ZVN0YXRlKSB7XG4gICAgYXBwLm9uKCd0b3VjaHN0YXJ0JywgaGFuZGxlTW91c2VEb3duKTtcbiAgICBhcHAub24oJ3RvdWNobW92ZScsIGhhbmRsZU1vdXNlTW92ZSk7XG4gICAgYXBwLm9uKCd0b3VjaGVuZCcsIGhhbmRsZU1vdXNlVXApO1xuICB9XG5cbiAgaWYgKHVzZVJpcHBsZSkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51JywgKCkgPT4ge1xuICAgICAgaWYgKGFjdGl2YWJsZUVsZW1lbnQpIHJlbW92ZUFjdGl2ZSgpO1xuICAgICAgcmlwcGxlVG91Y2hFbmQoKTtcbiAgICB9KTtcbiAgfVxufVxuXG52YXIgVG91Y2ggPSB7XG4gIG5hbWU6ICd0b3VjaCcsXG4gIHBhcmFtczoge1xuICAgIHRvdWNoOiB7XG4gICAgICAvLyBGYXN0IGNsaWNrc1xuICAgICAgZmFzdENsaWNrczogdHJ1ZSxcbiAgICAgIGZhc3RDbGlja3NEaXN0YW5jZVRocmVzaG9sZDogMTAsXG4gICAgICBmYXN0Q2xpY2tzRGVsYXlCZXR3ZWVuQ2xpY2tzOiA1MCxcbiAgICAgIGZhc3RDbGlja3NFeGNsdWRlOiAnJywgLy8gQ1NTIHNlbGVjdG9yXG4gICAgICAvLyBUYXAgSG9sZFxuICAgICAgdGFwSG9sZDogZmFsc2UsXG4gICAgICB0YXBIb2xkRGVsYXk6IDc1MCxcbiAgICAgIHRhcEhvbGRQcmV2ZW50Q2xpY2tzOiB0cnVlLFxuICAgICAgLy8gQWN0aXZlIFN0YXRlXG4gICAgICBhY3RpdmVTdGF0ZTogdHJ1ZSxcbiAgICAgIGFjdGl2ZVN0YXRlRWxlbWVudHM6ICdhLCBidXR0b24sIGxhYmVsLCBzcGFuLCAuYWN0aW9ucy1idXR0b24nLFxuICAgICAgbWF0ZXJpYWxSaXBwbGU6IHRydWUsXG4gICAgICBtYXRlcmlhbFJpcHBsZUVsZW1lbnRzOiAnLnJpcHBsZSwgLmxpbmssIC5pdGVtLWxpbmssIC5saW5rcy1saXN0IGEsIC5idXR0b24sIGJ1dHRvbiwgLmlucHV0LWNsZWFyLWJ1dHRvbiwgLmRpYWxvZy1idXR0b24sIC50YWItbGluaywgLml0ZW0tcmFkaW8sIC5pdGVtLWNoZWNrYm94LCAuYWN0aW9ucy1idXR0b24sIC5zZWFyY2hiYXItZGlzYWJsZS1idXR0b24sIC5mYWIgYSwgLmNoZWNrYm94LCAucmFkaW8sIC5kYXRhLXRhYmxlIC5zb3J0YWJsZS1jZWxsJyxcbiAgICB9LFxuICB9LFxuICBpbnN0YW5jZToge1xuICAgIHRvdWNoRXZlbnRzOiB7XG4gICAgICBzdGFydDogU3VwcG9ydCQxLnRvdWNoID8gJ3RvdWNoc3RhcnQnIDogJ21vdXNlZG93bicsXG4gICAgICBtb3ZlOiBTdXBwb3J0JDEudG91Y2ggPyAndG91Y2htb3ZlJyA6ICdtb3VzZW1vdmUnLFxuICAgICAgZW5kOiBTdXBwb3J0JDEudG91Y2ggPyAndG91Y2hlbmQnIDogJ21vdXNldXAnLFxuICAgIH0sXG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdDogaW5pdFRvdWNoLFxuICB9LFxufTtcblxuY29uc3QgdGVtcERvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG5jbGFzcyBGcmFtZXdvcms3Q29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoYywgZXh0ZW5kID0ge30pIHtcbiAgICBjb25zdCBjb250ZXh0ID0gVXRpbHMuZXh0ZW5kKHt9LCBleHRlbmQpO1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IFV0aWxzLmV4dGVuZCh0aGlzLCBjLCB7IGNvbnRleHQgfSk7XG5cbiAgICAvLyBBcHBseSBjb250ZXh0XG4gICAgKCdiZWZvcmVDcmVhdGUgY3JlYXRlZCBiZWZvcmVNb3VudCBtb3VudGVkIGJlZm9yZURlc3Ryb3kgZGVzdHJveWVkJykuc3BsaXQoJyAnKS5mb3JFYWNoKChjeWNsZUtleSkgPT4ge1xuICAgICAgaWYgKGNvbXBvbmVudFtjeWNsZUtleV0pIGNvbXBvbmVudFtjeWNsZUtleV0gPSBjb21wb25lbnRbY3ljbGVLZXldLmJpbmQoY29udGV4dCk7XG4gICAgfSk7XG5cbiAgICBpZiAoY29tcG9uZW50LmRhdGEpIHtcbiAgICAgIGNvbXBvbmVudC5kYXRhID0gY29tcG9uZW50LmRhdGEuYmluZChjb250ZXh0KTtcbiAgICAgIC8vIERhdGFcbiAgICAgIFV0aWxzLmV4dGVuZChjb250ZXh0LCBjb21wb25lbnQuZGF0YSgpKTtcbiAgICB9XG4gICAgaWYgKGNvbXBvbmVudC5yZW5kZXIpIGNvbXBvbmVudC5yZW5kZXIgPSBjb21wb25lbnQucmVuZGVyLmJpbmQoY29udGV4dCk7XG4gICAgaWYgKGNvbXBvbmVudC5tZXRob2RzKSB7XG4gICAgICBPYmplY3Qua2V5cyhjb21wb25lbnQubWV0aG9kcykuZm9yRWFjaCgobWV0aG9kTmFtZSkgPT4ge1xuICAgICAgICBjb250ZXh0W21ldGhvZE5hbWVdID0gY29tcG9uZW50Lm1ldGhvZHNbbWV0aG9kTmFtZV0uYmluZChjb250ZXh0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoY29tcG9uZW50Lm9uKSB7XG4gICAgICBPYmplY3Qua2V5cyhjb21wb25lbnQub24pLmZvckVhY2goKGV2ZW50TmFtZSkgPT4ge1xuICAgICAgICBjb21wb25lbnQub25bZXZlbnROYW1lXSA9IGNvbXBvbmVudC5vbltldmVudE5hbWVdLmJpbmQoY29udGV4dCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoY29tcG9uZW50LmJlZm9yZUNyZWF0ZSkgY29tcG9uZW50LmJlZm9yZUNyZWF0ZSgpO1xuXG4gICAgLy8gV2F0Y2hlcnNcbiAgICBpZiAoY29tcG9uZW50LndhdGNoKSB7XG4gICAgICBPYmplY3Qua2V5cyhjb21wb25lbnQud2F0Y2gpLmZvckVhY2goKHdhdGNoS2V5KSA9PiB7XG4gICAgICAgIGxldCBkYXRhS2V5VmFsdWUgPSBjb21wb25lbnQuY29udGV4dFt3YXRjaEtleV07XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb21wb25lbnQuY29udGV4dCwgd2F0Y2hLZXksIHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBzZXQobmV3VmFsdWUpIHtcbiAgICAgICAgICAgIGRhdGFLZXlWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgY29tcG9uZW50LndhdGNoW3dhdGNoS2V5XS5jYWxsKGNvbnRleHQsIGRhdGFLZXlWYWx1ZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YUtleVZhbHVlO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUmVuZGVyIHRlbXBsYXRlXG4gICAgbGV0IGh0bWwgPSAnJztcbiAgICBpZiAoY29tcG9uZW50LnJlbmRlcikge1xuICAgICAgaHRtbCA9IGNvbXBvbmVudC5yZW5kZXIoKTtcbiAgICB9IGVsc2UgaWYgKGNvbXBvbmVudC50ZW1wbGF0ZSkge1xuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnQudGVtcGxhdGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGh0bWwgPSB0Ny5jb21waWxlKGNvbXBvbmVudC50ZW1wbGF0ZSkoY29udGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTdXBwb3NlZCB0byBiZSBmdW5jdGlvblxuICAgICAgICBodG1sID0gY29tcG9uZW50LnRlbXBsYXRlKGNvbnRleHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1ha2UgRG9tXG4gICAgaWYgKGh0bWwgJiYgdHlwZW9mIGh0bWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBodG1sID0gaHRtbC50cmltKCk7XG4gICAgICB0ZW1wRG9tLmlubmVySFRNTCA9IGh0bWw7XG4gICAgfSBlbHNlIGlmIChodG1sKSB7XG4gICAgICB0ZW1wRG9tLmlubmVySFRNTCA9ICcnO1xuICAgICAgdGVtcERvbS5hcHBlbmRDaGlsZChodG1sKTtcbiAgICB9XG5cbiAgICAvLyBFeHRlbmQgY29udGV4dCB3aXRoICRlbFxuICAgIGNvbnN0IGVsID0gdGVtcERvbS5jaGlsZHJlblswXTtcbiAgICBjb250ZXh0LiRlbCA9ICQoZWwpO1xuICAgIGNvbXBvbmVudC5lbCA9IGVsO1xuXG4gICAgLy8gRmluZCBFdmVudHNcbiAgICBjb25zdCBldmVudHMgPSBbXTtcbiAgICAkKHRlbXBEb20pLmZpbmQoJyonKS5lYWNoKChpbmRleCwgZWxlbWVudCkgPT4ge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50LmF0dHJpYnV0ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgYXR0ciA9IGVsZW1lbnQuYXR0cmlidXRlc1tpXTtcbiAgICAgICAgaWYgKGF0dHIubmFtZS5pbmRleE9mKCdAJykgPT09IDApIHtcbiAgICAgICAgICBjb25zdCBldmVudCA9IGF0dHIubmFtZS5yZXBsYWNlKCdAJywgJycpO1xuICAgICAgICAgIGxldCBuYW1lID0gZXZlbnQ7XG4gICAgICAgICAgbGV0IHN0b3AgPSBmYWxzZTtcbiAgICAgICAgICBsZXQgcHJldmVudCA9IGZhbHNlO1xuICAgICAgICAgIGxldCBvbmNlID0gZmFsc2U7XG4gICAgICAgICAgaWYgKGV2ZW50LmluZGV4T2YoJy4nKSA+PSAwKSB7XG4gICAgICAgICAgICBldmVudC5zcGxpdCgnLicpLmZvckVhY2goKGV2ZW50TmFtZVBhcnQsIGV2ZW50TmFtZUluZGV4KSA9PiB7XG4gICAgICAgICAgICAgIGlmIChldmVudE5hbWVJbmRleCA9PT0gMCkgbmFtZSA9IGV2ZW50TmFtZVBhcnQ7XG4gICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChldmVudE5hbWVQYXJ0ID09PSAnc3RvcCcpIHN0b3AgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChldmVudE5hbWVQYXJ0ID09PSAncHJldmVudCcpIHByZXZlbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChldmVudE5hbWVQYXJ0ID09PSAnb25jZScpIG9uY2UgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IGF0dHIudmFsdWU7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0ci5uYW1lKTtcbiAgICAgICAgICBldmVudHMucHVzaCh7XG4gICAgICAgICAgICBlbDogZWxlbWVudCxcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBvbmNlLFxuICAgICAgICAgICAgaGFuZGxlcjogKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgZSA9IGFyZ3NbMF07XG4gICAgICAgICAgICAgIGlmIChzdG9wKSBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICBpZiAocHJldmVudCkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICBsZXQgbWV0aG9kTmFtZTtcbiAgICAgICAgICAgICAgbGV0IG1ldGhvZDtcbiAgICAgICAgICAgICAgbGV0IGN1c3RvbUFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgaWYgKHZhbHVlLmluZGV4T2YoJygnKSA8IDApIHtcbiAgICAgICAgICAgICAgICBjdXN0b21BcmdzID0gYXJncztcbiAgICAgICAgICAgICAgICBtZXRob2ROYW1lID0gdmFsdWU7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWV0aG9kTmFtZSA9IHZhbHVlLnNwbGl0KCcoJylbMF07XG4gICAgICAgICAgICAgICAgdmFsdWUuc3BsaXQoJygnKVsxXS5zcGxpdCgnKScpWzBdLnNwbGl0KCcsJykuZm9yRWFjaCgoYXJndW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgIGxldCBhcmcgPSBhcmd1bWVudC50cmltKCk7XG5cbiAgICAgICAgICAgICAgICAgIGlmICghaXNOYU4oYXJnKSkgYXJnID0gcGFyc2VGbG9hdChhcmcpO1xuICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYXJnID09PSAndHJ1ZScpIGFyZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICBlbHNlIGlmIChhcmcgPT09ICdmYWxzZScpIGFyZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYXJnID09PSAnbnVsbCcpIGFyZyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICBlbHNlIGlmIChhcmcgPT09ICd1bmRlZmluZWQnKSBhcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICBlbHNlIGlmIChhcmdbMF0gPT09ICdcIicpIGFyZyA9IGFyZy5yZXBsYWNlKC9cIi9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICBlbHNlIGlmIChhcmdbMF0gPT09ICdcXCcnKSBhcmcgPSBhcmcucmVwbGFjZSgvJy9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICBlbHNlIGlmIChhcmcuaW5kZXhPZignLicpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZGVlcEFyZztcbiAgICAgICAgICAgICAgICAgICAgYXJnLnNwbGl0KCcuJykuZm9yRWFjaCgocGF0aCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGlmICghZGVlcEFyZykgZGVlcEFyZyA9IGNvbnRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgZGVlcEFyZyA9IGRlZXBBcmdbcGF0aF07XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBhcmcgPSBkZWVwQXJnO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gY29udGV4dFthcmddO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgY3VzdG9tQXJncy5wdXNoKGFyZyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKG1ldGhvZE5hbWUuaW5kZXhPZignLicpID49IDApIHtcbiAgICAgICAgICAgICAgICBtZXRob2ROYW1lLnNwbGl0KCcuJykuZm9yRWFjaCgocGF0aCwgcGF0aEluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAoIW1ldGhvZCkgbWV0aG9kID0gY29udGV4dDtcbiAgICAgICAgICAgICAgICAgIGlmIChtZXRob2RbcGF0aF0pIG1ldGhvZCA9IG1ldGhvZFtwYXRoXTtcbiAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvbXBvbmVudCBkb2Vzbid0IGhhdmUgbWV0aG9kIFwiJHttZXRob2ROYW1lLnNwbGl0KCcuJykuc2xpY2UoMCwgcGF0aEluZGV4ICsgMSkuam9pbignLicpfVwiYCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjb250ZXh0W21ldGhvZE5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvbXBvbmVudCBkb2Vzbid0IGhhdmUgbWV0aG9kIFwiJHttZXRob2ROYW1lfVwiYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1ldGhvZCA9IGNvbnRleHRbbWV0aG9kTmFtZV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbWV0aG9kKC4uLmN1c3RvbUFyZ3MpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gU2V0IHN0eWxlcyBzY29wZSBJRFxuICAgIGxldCBzdHlsZUVsO1xuICAgIGlmIChjb21wb25lbnQuc3R5bGUpIHtcbiAgICAgIHN0eWxlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgc3R5bGVFbC5pbm5lckhUTUwgPSBjb21wb25lbnQuc3R5bGU7XG4gICAgfVxuICAgIGlmIChjb21wb25lbnQuc3R5bGVTY29wZUlkKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2NvcGUnLCBjb21wb25lbnQuc3R5bGVTY29wZUlkKTtcbiAgICB9XG5cbiAgICAvLyBBdHRhY2ggZXZlbnRzXG4gICAgZnVuY3Rpb24gYXR0YWNoRXZlbnRzKCkge1xuICAgICAgZXZlbnRzLmZvckVhY2goKGV2ZW50KSA9PiB7XG4gICAgICAgICQoZXZlbnQuZWwpW2V2ZW50Lm9uY2UgPyAnb25jZScgOiAnb24nXShldmVudC5uYW1lLCBldmVudC5oYW5kbGVyKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRldGFjaEV2ZW50cygpIHtcbiAgICAgIGV2ZW50cy5mb3JFYWNoKChldmVudCkgPT4ge1xuICAgICAgICAkKGV2ZW50LmVsKS5vZmYoZXZlbnQubmFtZSwgZXZlbnQuaGFuZGxlcik7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBhdHRhY2hFdmVudHMoKTtcblxuICAgIC8vIENyZWF0ZWQgY2FsbGJhY2tcbiAgICBpZiAoY29tcG9uZW50LmNyZWF0ZWQpIGNvbXBvbmVudC5jcmVhdGVkKCk7XG5cbiAgICAvLyBNb3VudFxuICAgIGNvbXBvbmVudC5tb3VudCA9IGZ1bmN0aW9uIG1vdW50KG1vdW50TWV0aG9kKSB7XG4gICAgICBpZiAoY29tcG9uZW50LmJlZm9yZU1vdW50KSBjb21wb25lbnQuYmVmb3JlTW91bnQoKTtcbiAgICAgIGlmIChzdHlsZUVsKSAkKCdoZWFkJykuYXBwZW5kKHN0eWxlRWwpO1xuICAgICAgaWYgKG1vdW50TWV0aG9kKSBtb3VudE1ldGhvZChlbCk7XG4gICAgICBpZiAoY29tcG9uZW50Lm1vdW50ZWQpIGNvbXBvbmVudC5tb3VudGVkKCk7XG4gICAgfTtcblxuICAgIC8vIERlc3Ryb3lcbiAgICBjb21wb25lbnQuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICBpZiAoY29tcG9uZW50LmJlZm9yZURlc3Ryb3kpIGNvbXBvbmVudC5iZWZvcmVEZXN0cm95KCk7XG4gICAgICBpZiAoc3R5bGVFbCkgJChzdHlsZUVsKS5yZW1vdmUoKTtcbiAgICAgIGRldGFjaEV2ZW50cygpO1xuICAgICAgaWYgKGNvbXBvbmVudC5kZXN0cm95ZWQpIGNvbXBvbmVudC5kZXN0cm95ZWQoKTtcbiAgICB9O1xuXG4gICAgLy8gU3RvcmUgY29tcG9uZW50IGluc3RhbmNlXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZW1wRG9tLmNoaWxkcmVuLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB0ZW1wRG9tLmNoaWxkcmVuW2ldLmY3Q29tcG9uZW50ID0gY29tcG9uZW50O1xuICAgIH1cblxuICAgIHJldHVybiBjb21wb25lbnQ7XG4gIH1cbn1cblxuXG5jb25zdCBDb21wb25lbnQgPSB7XG4gIHBhcnNlKGNvbXBvbmVudFN0cmluZykge1xuICAgIGNvbnN0IGNhbGxiYWNrTmFtZSA9IGBmN19jb21wb25lbnRfY2FsbGJhY2tfJHtuZXcgRGF0ZSgpLmdldFRpbWUoKX1gO1xuXG4gICAgLy8gVGVtcGxhdGVcbiAgICBsZXQgdGVtcGxhdGU7XG4gICAgaWYgKGNvbXBvbmVudFN0cmluZy5pbmRleE9mKCc8dGVtcGxhdGU+JykgPj0gMCkge1xuICAgICAgdGVtcGxhdGUgPSBjb21wb25lbnRTdHJpbmcuc3BsaXQoJzx0ZW1wbGF0ZT4nKVsxXS5zcGxpdCgnPC90ZW1wbGF0ZT4nKVswXS50cmltKCk7XG4gICAgfVxuXG4gICAgLy8gU3R5bGVzXG4gICAgbGV0IHN0eWxlO1xuICAgIGNvbnN0IHN0eWxlU2NvcGVJZCA9IFV0aWxzLm5vdygpO1xuICAgIGlmIChjb21wb25lbnRTdHJpbmcuaW5kZXhPZignPHN0eWxlPicpID49IDApIHtcbiAgICAgIHN0eWxlID0gY29tcG9uZW50U3RyaW5nLnNwbGl0KCc8c3R5bGU+JylbMV0uc3BsaXQoJzwvc3R5bGU+JylbMF07XG4gICAgfSBlbHNlIGlmIChjb21wb25lbnRTdHJpbmcuaW5kZXhPZignPHN0eWxlIHNjb3BlZD4nKSA+PSAwKSB7XG4gICAgICBzdHlsZSA9IGNvbXBvbmVudFN0cmluZy5zcGxpdCgnPHN0eWxlIHNjb3BlZD4nKVsxXS5zcGxpdCgnPC9zdHlsZT4nKVswXTtcbiAgICAgIHN0eWxlID0gc3R5bGUuc3BsaXQoJ1xcbicpLm1hcCgobGluZSkgPT4ge1xuICAgICAgICBpZiAobGluZS5pbmRleE9mKCd7JykgPj0gMCkge1xuICAgICAgICAgIGlmIChsaW5lLmluZGV4T2YoJ3t7dGhpc319JykgPj0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGxpbmUucmVwbGFjZSgne3t0aGlzfX0nLCBgW2RhdGEtc2NvcGU9XCIke3N0eWxlU2NvcGVJZH1cIl1gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGBbZGF0YS1zY29wZT1cIiR7c3R5bGVTY29wZUlkfVwiXSAke2xpbmUudHJpbSgpfWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpbmU7XG4gICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICB9XG5cbiAgICBsZXQgc2NyaXB0Q29udGVudDtcbiAgICBpZiAoY29tcG9uZW50U3RyaW5nLmluZGV4T2YoJzxzY3JpcHQ+JykgPj0gMCkge1xuICAgICAgc2NyaXB0Q29udGVudCA9IGNvbXBvbmVudFN0cmluZy5zcGxpdCgnPHNjcmlwdD4nKVsxXS5zcGxpdCgnPC9zY3JpcHQ+JylbMF0udHJpbSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY3JpcHRDb250ZW50ID0gJ3JldHVybiB7fSc7XG4gICAgfVxuICAgIHNjcmlwdENvbnRlbnQgPSBgd2luZG93LiR7Y2FsbGJhY2tOYW1lfSA9IGZ1bmN0aW9uICgpIHske3NjcmlwdENvbnRlbnR9fWA7XG5cbiAgICAvLyBJbnNlcnQgU2NyaXB0IEVsXG4gICAgY29uc3Qgc2NyaXB0RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICBzY3JpcHRFbC5pbm5lckhUTUwgPSBzY3JpcHRDb250ZW50O1xuICAgICQoJ2hlYWQnKS5hcHBlbmQoc2NyaXB0RWwpO1xuXG4gICAgY29uc3QgY29tcG9uZW50ID0gd2luZG93W2NhbGxiYWNrTmFtZV0oKTtcblxuICAgIC8vIFJlbW92ZSBTY3JpcHQgRWxcbiAgICAkKHNjcmlwdEVsKS5yZW1vdmUoKTtcblxuICAgIGlmICghY29tcG9uZW50LnRlbXBsYXRlICYmICFjb21wb25lbnQucmVuZGVyKSB7XG4gICAgICBjb21wb25lbnQudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICB9XG4gICAgaWYgKHN0eWxlKSB7XG4gICAgICBjb21wb25lbnQuc3R5bGUgPSBzdHlsZTtcbiAgICAgIGNvbXBvbmVudC5zdHlsZVNjb3BlSWQgPSBzdHlsZVNjb3BlSWQ7XG4gICAgfVxuICAgIHJldHVybiBjb21wb25lbnQ7XG4gIH0sXG4gIGNyZWF0ZShjLCBleHRlbmRDb250ZXh0ID0ge30pIHtcbiAgICByZXR1cm4gbmV3IEZyYW1ld29yazdDb21wb25lbnQoYywgZXh0ZW5kQ29udGV4dCk7XG4gIH0sXG59O1xuXG5jb25zdCBIaXN0b3J5ID0ge1xuICBxdWV1ZTogW10sXG4gIGNsZWFyUXVldWUoKSB7XG4gICAgaWYgKEhpc3RvcnkucXVldWUubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgY29uc3QgY3VycmVudFF1ZXVlID0gSGlzdG9yeS5xdWV1ZS5zaGlmdCgpO1xuICAgIGN1cnJlbnRRdWV1ZSgpO1xuICB9LFxuICByb3V0ZXJRdWV1ZTogW10sXG4gIGNsZWFyUm91dGVyUXVldWUoKSB7XG4gICAgaWYgKEhpc3Rvcnkucm91dGVyUXVldWUubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgY29uc3QgY3VycmVudFF1ZXVlID0gSGlzdG9yeS5yb3V0ZXJRdWV1ZS5wb3AoKTtcbiAgICBjb25zdCByb3V0ZXIgPSBjdXJyZW50UXVldWUucm91dGVyO1xuXG4gICAgbGV0IGFuaW1hdGUgPSByb3V0ZXIucGFyYW1zLmFuaW1hdGU7XG4gICAgaWYgKHJvdXRlci5wYXJhbXMucHVzaFN0YXRlQW5pbWF0ZSA9PT0gZmFsc2UpIGFuaW1hdGUgPSBmYWxzZTtcblxuICAgIGlmIChjdXJyZW50UXVldWUuYWN0aW9uID09PSAnYmFjaycpIHtcbiAgICAgIHJvdXRlci5iYWNrKHsgYW5pbWF0ZSwgcHVzaFN0YXRlOiBmYWxzZSB9KTtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5hY3Rpb24gPT09ICdsb2FkJykge1xuICAgICAgcm91dGVyLm5hdmlnYXRlKGN1cnJlbnRRdWV1ZS5zdGF0ZVVybCwgeyBhbmltYXRlLCBwdXNoU3RhdGU6IGZhbHNlIH0pO1xuICAgIH1cbiAgfSxcbiAgaGFuZGxlKGUpIHtcbiAgICBpZiAoSGlzdG9yeS5ibG9ja1BvcHN0YXRlKSByZXR1cm47XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBjb25zdCBtYWluVmlldyA9IGFwcC52aWV3cy5tYWluO1xuICAgIGxldCBzdGF0ZSA9IGUuc3RhdGU7XG4gICAgSGlzdG9yeS5wcmV2aW91c1N0YXRlID0gSGlzdG9yeS5zdGF0ZTtcbiAgICBIaXN0b3J5LnN0YXRlID0gc3RhdGU7XG5cbiAgICBIaXN0b3J5LmFsbG93Q2hhbmdlID0gdHJ1ZTtcbiAgICBIaXN0b3J5LmNsZWFyUXVldWUoKTtcblxuICAgIHN0YXRlID0gSGlzdG9yeS5zdGF0ZTtcblxuICAgIGlmICghc3RhdGUgJiYgbWFpblZpZXcpIHtcbiAgICAgIHN0YXRlID0ge1xuICAgICAgICB2aWV3SW5kZXg6IG1haW5WaWV3LmluZGV4LFxuICAgICAgICB1cmw6IG1haW5WaWV3LnJvdXRlci5oaXN0b3J5WzBdLFxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHN0YXRlLnZpZXdJbmRleCA8IDApIHJldHVybjtcbiAgICBjb25zdCB2aWV3ID0gYXBwLnZpZXdzW3N0YXRlLnZpZXdJbmRleF07XG4gICAgY29uc3Qgcm91dGVyID0gdmlldy5yb3V0ZXI7XG4gICAgY29uc3Qgc3RhdGVVcmwgPSAoc3RhdGUgJiYgc3RhdGUudXJsKSB8fCB1bmRlZmluZWQ7XG5cbiAgICBsZXQgYW5pbWF0ZSA9IHJvdXRlci5wYXJhbXMuYW5pbWF0ZTtcbiAgICBpZiAocm91dGVyLnBhcmFtcy5wdXNoU3RhdGVBbmltYXRlID09PSBmYWxzZSkgYW5pbWF0ZSA9IGZhbHNlO1xuXG4gICAgaWYgKHN0YXRlVXJsICE9PSByb3V0ZXIudXJsKSB7XG4gICAgICBpZiAocm91dGVyLmhpc3RvcnkuaW5kZXhPZihzdGF0ZVVybCkgPj0gMCkge1xuICAgICAgICAvLyBHbyBCYWNrXG4gICAgICAgIGlmIChyb3V0ZXIuYWxsb3dQYWdlQ2hhbmdlKSB7XG4gICAgICAgICAgcm91dGVyLmJhY2soeyBhbmltYXRlLCBwdXNoU3RhdGU6IGZhbHNlIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEhpc3Rvcnkucm91dGVyUXVldWUucHVzaCh7XG4gICAgICAgICAgICBhY3Rpb246ICdiYWNrJyxcbiAgICAgICAgICAgIHJvdXRlcixcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyb3V0ZXIuYWxsb3dQYWdlQ2hhbmdlKSB7XG4gICAgICAgIC8vIExvYWQgcGFnZVxuICAgICAgICByb3V0ZXIubmF2aWdhdGUoc3RhdGVVcmwsIHsgYW5pbWF0ZSwgcHVzaFN0YXRlOiBmYWxzZSB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIEhpc3Rvcnkucm91dGVyUXVldWUudW5zaGlmdCh7XG4gICAgICAgICAgYWN0aW9uOiAnbG9hZCcsXG4gICAgICAgICAgc3RhdGVVcmwsXG4gICAgICAgICAgcm91dGVyLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHB1c2goc3RhdGUsIHVybCkge1xuICAgIGlmICghSGlzdG9yeS5hbGxvd0NoYW5nZSkge1xuICAgICAgSGlzdG9yeS5xdWV1ZS5wdXNoKCgpID0+IHtcbiAgICAgICAgSGlzdG9yeS5wdXNoKHN0YXRlLCB1cmwpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIEhpc3RvcnkucHJldmlvdXNTdGF0ZSA9IEhpc3Rvcnkuc3RhdGU7XG4gICAgSGlzdG9yeS5zdGF0ZSA9IHN0YXRlO1xuICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShzdGF0ZSwgJycsIHVybCk7XG4gIH0sXG4gIHJlcGxhY2Uoc3RhdGUsIHVybCkge1xuICAgIGlmICghSGlzdG9yeS5hbGxvd0NoYW5nZSkge1xuICAgICAgSGlzdG9yeS5xdWV1ZS5wdXNoKCgpID0+IHtcbiAgICAgICAgSGlzdG9yeS5yZXBsYWNlKHN0YXRlLCB1cmwpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIEhpc3RvcnkucHJldmlvdXNTdGF0ZSA9IEhpc3Rvcnkuc3RhdGU7XG4gICAgSGlzdG9yeS5zdGF0ZSA9IHN0YXRlO1xuICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZShzdGF0ZSwgJycsIHVybCk7XG4gIH0sXG4gIGdvKGluZGV4KSB7XG4gICAgSGlzdG9yeS5hbGxvd0NoYW5nZSA9IGZhbHNlO1xuICAgIHdpbmRvdy5oaXN0b3J5LmdvKGluZGV4KTtcbiAgfSxcbiAgYmFjaygpIHtcbiAgICBIaXN0b3J5LmFsbG93Q2hhbmdlID0gZmFsc2U7XG4gICAgd2luZG93Lmhpc3RvcnkuYmFjaygpO1xuICB9LFxuICBhbGxvd0NoYW5nZTogdHJ1ZSxcbiAgcHJldmlvdXNTdGF0ZToge30sXG4gIHN0YXRlOiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSxcbiAgYmxvY2tQb3BzdGF0ZTogdHJ1ZSxcbiAgaW5pdChhcHApIHtcbiAgICAkKHdpbmRvdykub24oJ2xvYWQnLCAoKSA9PiB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgSGlzdG9yeS5ibG9ja1BvcHN0YXRlID0gZmFsc2U7XG4gICAgICB9LCAwKTtcbiAgICB9KTtcblxuICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlICYmIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgIEhpc3RvcnkuYmxvY2tQb3BzdGF0ZSA9IGZhbHNlO1xuICAgIH1cblxuICAgICQod2luZG93KS5vbigncG9wc3RhdGUnLCBIaXN0b3J5LmhhbmRsZS5iaW5kKGFwcCkpO1xuICB9LFxufTtcblxuZnVuY3Rpb24gU3dpcGVCYWNrKHIpIHtcbiAgY29uc3Qgcm91dGVyID0gcjtcbiAgY29uc3QgeyAkZWwsICRuYXZiYXJFbCwgYXBwIH0gPSByb3V0ZXI7XG4gIGxldCBpc1RvdWNoZWQgPSBmYWxzZTtcbiAgbGV0IGlzTW92ZWQgPSBmYWxzZTtcbiAgY29uc3QgdG91Y2hlc1N0YXJ0ID0ge307XG4gIGxldCBpc1Njcm9sbGluZztcbiAgbGV0IGN1cnJlbnRQYWdlID0gW107XG4gIGxldCBwcmV2aW91c1BhZ2UgPSBbXTtcbiAgbGV0IHZpZXdDb250YWluZXJXaWR0aDtcbiAgbGV0IHRvdWNoZXNEaWZmO1xuICBsZXQgYWxsb3dWaWV3VG91Y2hNb3ZlID0gdHJ1ZTtcbiAgbGV0IHRvdWNoU3RhcnRUaW1lO1xuICBsZXQgY3VycmVudE5hdmJhciA9IFtdO1xuICBsZXQgcHJldmlvdXNOYXZiYXIgPSBbXTtcbiAgbGV0IGN1cnJlbnROYXZFbGVtZW50cztcbiAgbGV0IHByZXZpb3VzTmF2RWxlbWVudHM7XG4gIGxldCBhY3RpdmVOYXZCYWNrSWNvbjtcbiAgbGV0IGFjdGl2ZU5hdkJhY2tJY29uVGV4dDtcbiAgbGV0IHByZXZpb3VzTmF2QmFja0ljb247XG4gIGxldCBwcmV2aW91c05hdkJhY2tJY29uVGV4dDtcbiAgbGV0IGR5bmFtaWNOYXZiYXI7XG4gIGxldCBzZXBhcmF0ZU5hdmJhcjtcbiAgbGV0IHBhZ2VTaGFkb3c7XG4gIGxldCBwYWdlT3BhY2l0eTtcbiAgbGV0IG5hdmJhcldpZHRoO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVRvdWNoU3RhcnQoZSkge1xuICAgIGlmICghYWxsb3dWaWV3VG91Y2hNb3ZlIHx8ICFyb3V0ZXIucGFyYW1zLmlvc1N3aXBlQmFjayB8fCBpc1RvdWNoZWQgfHwgYXBwLnN3aXBlb3V0LmVsIHx8ICFyb3V0ZXIuYWxsb3dQYWdlQ2hhbmdlKSByZXR1cm47XG4gICAgaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGlzVG91Y2hlZCA9IHRydWU7XG4gICAgaXNTY3JvbGxpbmcgPSB1bmRlZmluZWQ7XG4gICAgdG91Y2hlc1N0YXJ0LnggPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgdG91Y2hlc1N0YXJ0LnkgPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gICAgdG91Y2hTdGFydFRpbWUgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xuICAgIGR5bmFtaWNOYXZiYXIgPSByb3V0ZXIuZHluYW1pY05hdmJhcjtcbiAgICBzZXBhcmF0ZU5hdmJhciA9IHJvdXRlci5zZXBhcmF0ZU5hdmJhcjtcbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVUb3VjaE1vdmUoZSkge1xuICAgIGlmICghaXNUb3VjaGVkKSByZXR1cm47XG4gICAgY29uc3QgcGFnZVggPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICBjb25zdCBwYWdlWSA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICAgIGlmICh0eXBlb2YgaXNTY3JvbGxpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpc1Njcm9sbGluZyA9ICEhKGlzU2Nyb2xsaW5nIHx8IE1hdGguYWJzKHBhZ2VZIC0gdG91Y2hlc1N0YXJ0LnkpID4gTWF0aC5hYnMocGFnZVggLSB0b3VjaGVzU3RhcnQueCkpO1xuICAgIH1cbiAgICBpZiAoaXNTY3JvbGxpbmcgfHwgZS5mN1ByZXZlbnRTd2lwZUJhY2sgfHwgYXBwLnByZXZlbnRTd2lwZUJhY2spIHtcbiAgICAgIGlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWlzTW92ZWQpIHtcbiAgICAgIC8vIENhbGMgdmFsdWVzIGR1cmluZyBmaXJzdCBtb3ZlIGZpcmVkXG4gICAgICBsZXQgY2FuY2VsID0gZmFsc2U7XG4gICAgICBjb25zdCB0YXJnZXQgPSAkKGUudGFyZ2V0KTtcblxuICAgICAgY29uc3Qgc3dpcGVvdXQgPSB0YXJnZXQuY2xvc2VzdCgnLnN3aXBlb3V0Jyk7XG4gICAgICBpZiAoc3dpcGVvdXQubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAoIWFwcC5ydGwgJiYgc3dpcGVvdXQuZmluZCgnLnN3aXBlb3V0LWFjdGlvbnMtbGVmdCcpLmxlbmd0aCA+IDApIGNhbmNlbCA9IHRydWU7XG4gICAgICAgIGlmIChhcHAucnRsICYmIHN3aXBlb3V0LmZpbmQoJy5zd2lwZW91dC1hY3Rpb25zLXJpZ2h0JykubGVuZ3RoID4gMCkgY2FuY2VsID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgY3VycmVudFBhZ2UgPSB0YXJnZXQuY2xvc2VzdCgnLnBhZ2UnKTtcbiAgICAgIGlmIChjdXJyZW50UGFnZS5oYXNDbGFzcygnbm8tc3dpcGViYWNrJykpIGNhbmNlbCA9IHRydWU7XG4gICAgICBwcmV2aW91c1BhZ2UgPSAkZWwuZmluZCgnLnBhZ2UtcHJldmlvdXM6bm90KC5zdGFja2VkKScpO1xuXG4gICAgICBsZXQgbm90RnJvbUJvcmRlciA9IHRvdWNoZXNTdGFydC54IC0gJGVsLm9mZnNldCgpLmxlZnQgPiByb3V0ZXIucGFyYW1zLmlvc1N3aXBlQmFja0FjdGl2ZUFyZWE7XG4gICAgICB2aWV3Q29udGFpbmVyV2lkdGggPSAkZWwud2lkdGgoKTtcbiAgICAgIGlmIChhcHAucnRsKSB7XG4gICAgICAgIG5vdEZyb21Cb3JkZXIgPSB0b3VjaGVzU3RhcnQueCA8ICgkZWwub2Zmc2V0KCkubGVmdCAtICRlbFswXS5zY3JvbGxMZWZ0KSArICh2aWV3Q29udGFpbmVyV2lkdGggLSByb3V0ZXIucGFyYW1zLmlvc1N3aXBlQmFja0FjdGl2ZUFyZWEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm90RnJvbUJvcmRlciA9IHRvdWNoZXNTdGFydC54IC0gJGVsLm9mZnNldCgpLmxlZnQgPiByb3V0ZXIucGFyYW1zLmlvc1N3aXBlQmFja0FjdGl2ZUFyZWE7XG4gICAgICB9XG4gICAgICBpZiAobm90RnJvbUJvcmRlcikgY2FuY2VsID0gdHJ1ZTtcbiAgICAgIGlmIChwcmV2aW91c1BhZ2UubGVuZ3RoID09PSAwIHx8IGN1cnJlbnRQYWdlLmxlbmd0aCA9PT0gMCkgY2FuY2VsID0gdHJ1ZTtcbiAgICAgIGlmIChjYW5jZWwpIHtcbiAgICAgICAgaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHJvdXRlci5wYXJhbXMuaW9zU3dpcGVCYWNrQW5pbWF0ZVNoYWRvdykge1xuICAgICAgICBwYWdlU2hhZG93ID0gY3VycmVudFBhZ2UuZmluZCgnLnBhZ2Utc2hhZG93LWVmZmVjdCcpO1xuICAgICAgICBpZiAocGFnZVNoYWRvdy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBwYWdlU2hhZG93ID0gJCgnPGRpdiBjbGFzcz1cInBhZ2Utc2hhZG93LWVmZmVjdFwiPjwvZGl2PicpO1xuICAgICAgICAgIGN1cnJlbnRQYWdlLmFwcGVuZChwYWdlU2hhZG93KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHJvdXRlci5wYXJhbXMuaW9zU3dpcGVCYWNrQW5pbWF0ZU9wYWNpdHkpIHtcbiAgICAgICAgcGFnZU9wYWNpdHkgPSBwcmV2aW91c1BhZ2UuZmluZCgnLnBhZ2Utb3BhY2l0eS1lZmZlY3QnKTtcbiAgICAgICAgaWYgKHBhZ2VPcGFjaXR5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHBhZ2VPcGFjaXR5ID0gJCgnPGRpdiBjbGFzcz1cInBhZ2Utb3BhY2l0eS1lZmZlY3RcIj48L2Rpdj4nKTtcbiAgICAgICAgICBwcmV2aW91c1BhZ2UuYXBwZW5kKHBhZ2VPcGFjaXR5KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZHluYW1pY05hdmJhcikge1xuICAgICAgICBpZiAoc2VwYXJhdGVOYXZiYXIpIHtcbiAgICAgICAgICBjdXJyZW50TmF2YmFyID0gJG5hdmJhckVsLmZpbmQoJy5uYXZiYXItY3VycmVudDpub3QoLnN0YWNrZWQpJyk7XG4gICAgICAgICAgcHJldmlvdXNOYXZiYXIgPSAkbmF2YmFyRWwuZmluZCgnLm5hdmJhci1wcmV2aW91czpub3QoLnN0YWNrZWQpJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VycmVudE5hdmJhciA9IGN1cnJlbnRQYWdlLmNoaWxkcmVuKCcubmF2YmFyJykuY2hpbGRyZW4oJy5uYXZiYXItaW5uZXInKTtcbiAgICAgICAgICBwcmV2aW91c05hdmJhciA9IHByZXZpb3VzUGFnZS5jaGlsZHJlbignLm5hdmJhcicpLmNoaWxkcmVuKCcubmF2YmFyLWlubmVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgbmF2YmFyV2lkdGggPSAkbmF2YmFyRWxbMF0ub2Zmc2V0V2lkdGg7XG4gICAgICAgIGN1cnJlbnROYXZFbGVtZW50cyA9IGN1cnJlbnROYXZiYXIuY2hpbGRyZW4oJy5sZWZ0LCAudGl0bGUsIC5yaWdodCwgLnN1Ym5hdmJhciwgLmZhZGluZycpO1xuICAgICAgICBwcmV2aW91c05hdkVsZW1lbnRzID0gcHJldmlvdXNOYXZiYXIuY2hpbGRyZW4oJy5sZWZ0LCAudGl0bGUsIC5yaWdodCwgLnN1Ym5hdmJhciwgLmZhZGluZycpO1xuICAgICAgICBpZiAocm91dGVyLnBhcmFtcy5pb3NBbmltYXRlTmF2YmFyQmFja0ljb24pIHtcbiAgICAgICAgICBpZiAoY3VycmVudE5hdmJhci5oYXNDbGFzcygnc2xpZGluZycpKSB7XG4gICAgICAgICAgICBhY3RpdmVOYXZCYWNrSWNvbiA9IGN1cnJlbnROYXZiYXIuY2hpbGRyZW4oJy5sZWZ0JykuZmluZCgnLmJhY2sgLmljb24nKTtcbiAgICAgICAgICAgIGFjdGl2ZU5hdkJhY2tJY29uVGV4dCA9IGN1cnJlbnROYXZiYXIuY2hpbGRyZW4oJy5sZWZ0JykuZmluZCgnLmJhY2sgc3BhbicpLmVxKDApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY3RpdmVOYXZCYWNrSWNvbiA9IGN1cnJlbnROYXZiYXIuY2hpbGRyZW4oJy5sZWZ0LnNsaWRpbmcnKS5maW5kKCcuYmFjayAuaWNvbicpO1xuICAgICAgICAgICAgYWN0aXZlTmF2QmFja0ljb25UZXh0ID0gY3VycmVudE5hdmJhci5jaGlsZHJlbignLmxlZnQuc2xpZGluZycpLmZpbmQoJy5iYWNrIHNwYW4nKS5lcSgwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHByZXZpb3VzTmF2YmFyLmhhc0NsYXNzKCdzbGlkaW5nJykpIHtcbiAgICAgICAgICAgIHByZXZpb3VzTmF2QmFja0ljb24gPSBwcmV2aW91c05hdmJhci5jaGlsZHJlbignLmxlZnQnKS5maW5kKCcuYmFjayAuaWNvbicpO1xuICAgICAgICAgICAgcHJldmlvdXNOYXZCYWNrSWNvblRleHQgPSBwcmV2aW91c05hdmJhci5jaGlsZHJlbignbGVmdCcpLmZpbmQoJy5iYWNrIHNwYW4nKS5lcSgwKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJldmlvdXNOYXZCYWNrSWNvbiA9IHByZXZpb3VzTmF2YmFyLmNoaWxkcmVuKCcubGVmdC5zbGlkaW5nJykuZmluZCgnLmJhY2sgLmljb24nKTtcbiAgICAgICAgICAgIHByZXZpb3VzTmF2QmFja0ljb25UZXh0ID0gcHJldmlvdXNOYXZiYXIuY2hpbGRyZW4oJy5sZWZ0LnNsaWRpbmcnKS5maW5kKCcuYmFjayBzcGFuJykuZXEoMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIENsb3NlL0hpZGUgQW55IFBpY2tlclxuICAgICAgaWYgKCQoJy5waWNrZXIubW9kYWwtaW4nKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGFwcC5jbG9zZU1vZGFsKCQoJy5waWNrZXIubW9kYWwtaW4nKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGUuZjdQcmV2ZW50UGFuZWxTd2lwZSA9IHRydWU7XG4gICAgaXNNb3ZlZCA9IHRydWU7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgLy8gUlRMIGludmVydGVyXG4gICAgY29uc3QgaW52ZXJ0ZXIgPSBhcHAucnRsID8gLTEgOiAxO1xuXG4gICAgLy8gVG91Y2hlcyBkaWZmXG4gICAgdG91Y2hlc0RpZmYgPSAocGFnZVggLSB0b3VjaGVzU3RhcnQueCAtIHJvdXRlci5wYXJhbXMuaW9zU3dpcGVCYWNrVGhyZXNob2xkKSAqIGludmVydGVyO1xuICAgIGlmICh0b3VjaGVzRGlmZiA8IDApIHRvdWNoZXNEaWZmID0gMDtcbiAgICBjb25zdCBwZXJjZW50YWdlID0gdG91Y2hlc0RpZmYgLyB2aWV3Q29udGFpbmVyV2lkdGg7XG5cbiAgICAvLyBTd2lwZSBCYWNrIENhbGxiYWNrXG4gICAgY29uc3QgY2FsbGJhY2tEYXRhID0ge1xuICAgICAgcGVyY2VudGFnZSxcbiAgICAgIGN1cnJlbnRQYWdlRWw6IGN1cnJlbnRQYWdlWzBdLFxuICAgICAgcHJldmlvdXNQYWdlRWw6IHByZXZpb3VzUGFnZVswXSxcbiAgICAgIGN1cnJlbnROYXZiYXJFbDogY3VycmVudE5hdmJhclswXSxcbiAgICAgIHByZXZpb3VzTmF2YmFyRWw6IHByZXZpb3VzTmF2YmFyWzBdLFxuICAgIH07XG4gICAgJGVsLnRyaWdnZXIoJ3N3aXBlYmFjazptb3ZlJywgY2FsbGJhY2tEYXRhKTtcbiAgICByb3V0ZXIuZW1pdCgnc3dpcGVCYWNrTW92ZScsIGNhbGxiYWNrRGF0YSk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcGFnZXNcbiAgICBsZXQgY3VycmVudFBhZ2VUcmFuc2xhdGUgPSB0b3VjaGVzRGlmZiAqIGludmVydGVyO1xuICAgIGxldCBwcmV2aW91c1BhZ2VUcmFuc2xhdGUgPSAoKHRvdWNoZXNEaWZmIC8gNSkgLSAodmlld0NvbnRhaW5lcldpZHRoIC8gNSkpICogaW52ZXJ0ZXI7XG4gICAgaWYgKERldmljZSQxLnBpeGVsUmF0aW8gPT09IDEpIHtcbiAgICAgIGN1cnJlbnRQYWdlVHJhbnNsYXRlID0gTWF0aC5yb3VuZChjdXJyZW50UGFnZVRyYW5zbGF0ZSk7XG4gICAgICBwcmV2aW91c1BhZ2VUcmFuc2xhdGUgPSBNYXRoLnJvdW5kKHByZXZpb3VzUGFnZVRyYW5zbGF0ZSk7XG4gICAgfVxuXG4gICAgY3VycmVudFBhZ2UudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke2N1cnJlbnRQYWdlVHJhbnNsYXRlfXB4LDAsMClgKTtcbiAgICBpZiAocm91dGVyLnBhcmFtcy5pb3NTd2lwZUJhY2tBbmltYXRlU2hhZG93KSBwYWdlU2hhZG93WzBdLnN0eWxlLm9wYWNpdHkgPSAxIC0gKDEgKiBwZXJjZW50YWdlKTtcblxuICAgIHByZXZpb3VzUGFnZS50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7cHJldmlvdXNQYWdlVHJhbnNsYXRlfXB4LDAsMClgKTtcbiAgICBpZiAocm91dGVyLnBhcmFtcy5pb3NTd2lwZUJhY2tBbmltYXRlT3BhY2l0eSkgcGFnZU9wYWNpdHlbMF0uc3R5bGUub3BhY2l0eSA9IDEgLSAoMSAqIHBlcmNlbnRhZ2UpO1xuXG4gICAgLy8gRHluYW1pYyBOYXZiYXJzIEFuaW1hdGlvblxuICAgIGlmIChkeW5hbWljTmF2YmFyKSB7XG4gICAgICBjdXJyZW50TmF2RWxlbWVudHMuZWFjaCgoaW5kZXgsIG5hdkVsKSA9PiB7XG4gICAgICAgIGNvbnN0ICRuYXZFbCA9ICQobmF2RWwpO1xuICAgICAgICBpZiAoISRuYXZFbC5pcygnLnN1Ym5hdmJhcicpKSAkbmF2RWxbMF0uc3R5bGUub3BhY2l0eSA9ICgxIC0gKHBlcmNlbnRhZ2UgKiAxLjMpKTtcbiAgICAgICAgaWYgKCRuYXZFbFswXS5jbGFzc05hbWUuaW5kZXhPZignc2xpZGluZycpID49IDAgfHwgY3VycmVudE5hdmJhci5oYXNDbGFzcygnc2xpZGluZycpKSB7XG4gICAgICAgICAgbGV0IGFjdGl2ZU5hdlRyYW5zbGF0ZSA9IHBlcmNlbnRhZ2UgKiAkbmF2RWxbMF0uZjdOYXZiYXJSaWdodE9mZnNldDtcbiAgICAgICAgICBpZiAoRGV2aWNlJDEucGl4ZWxSYXRpbyA9PT0gMSkgYWN0aXZlTmF2VHJhbnNsYXRlID0gTWF0aC5yb3VuZChhY3RpdmVOYXZUcmFuc2xhdGUpO1xuICAgICAgICAgICRuYXZFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7YWN0aXZlTmF2VHJhbnNsYXRlfXB4LDAsMClgKTtcbiAgICAgICAgICBpZiAocm91dGVyLnBhcmFtcy5pb3NBbmltYXRlTmF2YmFyQmFja0ljb24pIHtcbiAgICAgICAgICAgIGlmICgkbmF2RWxbMF0uY2xhc3NOYW1lLmluZGV4T2YoJ2xlZnQnKSA+PSAwICYmIGFjdGl2ZU5hdkJhY2tJY29uLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgbGV0IGljb25UcmFuc2xhdGUgPSAtYWN0aXZlTmF2VHJhbnNsYXRlO1xuICAgICAgICAgICAgICBpZiAoIXNlcGFyYXRlTmF2YmFyKSB7XG4gICAgICAgICAgICAgICAgaWNvblRyYW5zbGF0ZSAtPSBuYXZiYXJXaWR0aCAqIHBlcmNlbnRhZ2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYWN0aXZlTmF2QmFja0ljb24udHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke2ljb25UcmFuc2xhdGV9cHgsMCwwKWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBwcmV2aW91c05hdkVsZW1lbnRzLmVhY2goKGluZGV4LCBuYXZFbCkgPT4ge1xuICAgICAgICBjb25zdCAkbmF2RWwgPSAkKG5hdkVsKTtcbiAgICAgICAgaWYgKCEkbmF2RWwuaXMoJy5zdWJuYXZiYXInKSkgJG5hdkVsWzBdLnN0eWxlLm9wYWNpdHkgPSAocGVyY2VudGFnZSAqIDEuMykgLSAwLjM7XG4gICAgICAgIGlmICgkbmF2RWxbMF0uY2xhc3NOYW1lLmluZGV4T2YoJ3NsaWRpbmcnKSA+PSAwIHx8IHByZXZpb3VzTmF2YmFyLmhhc0NsYXNzKCdzbGlkaW5nJykpIHtcbiAgICAgICAgICBsZXQgcHJldmlvdXNOYXZUcmFuc2xhdGUgPSAkbmF2RWxbMF0uZjdOYXZiYXJMZWZ0T2Zmc2V0ICogKDEgLSBwZXJjZW50YWdlKTtcbiAgICAgICAgICBpZiAoJG5hdkVsWzBdLmNsYXNzTmFtZS5pbmRleE9mKCd0aXRsZScpID49IDAgJiYgYWN0aXZlTmF2QmFja0ljb24gJiYgYWN0aXZlTmF2QmFja0ljb24ubGVuZ3RoICYmIGFjdGl2ZU5hdkJhY2tJY29uVGV4dC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHByZXZpb3VzTmF2VHJhbnNsYXRlID0gKCRuYXZFbFswXS5mN05hdmJhckxlZnRPZmZzZXQgKyBhY3RpdmVOYXZCYWNrSWNvblRleHRbMF0ub2Zmc2V0TGVmdCkgKiAoMSAtIHBlcmNlbnRhZ2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcmV2aW91c05hdlRyYW5zbGF0ZSA9ICRuYXZFbFswXS5mN05hdmJhckxlZnRPZmZzZXQgKiAoMSAtIHBlcmNlbnRhZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoRGV2aWNlJDEucGl4ZWxSYXRpbyA9PT0gMSkgcHJldmlvdXNOYXZUcmFuc2xhdGUgPSBNYXRoLnJvdW5kKHByZXZpb3VzTmF2VHJhbnNsYXRlKTtcbiAgICAgICAgICAkbmF2RWwudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke3ByZXZpb3VzTmF2VHJhbnNsYXRlfXB4LDAsMClgKTtcbiAgICAgICAgICBpZiAocm91dGVyLnBhcmFtcy5pb3NBbmltYXRlTmF2YmFyQmFja0ljb24pIHtcbiAgICAgICAgICAgIGlmICgkbmF2RWxbMF0uY2xhc3NOYW1lLmluZGV4T2YoJ2xlZnQnKSA+PSAwICYmIHByZXZpb3VzTmF2QmFja0ljb24ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICBsZXQgaWNvblRyYW5zbGF0ZSA9IC1wcmV2aW91c05hdlRyYW5zbGF0ZTtcbiAgICAgICAgICAgICAgaWYgKCFzZXBhcmF0ZU5hdmJhcikge1xuICAgICAgICAgICAgICAgIGljb25UcmFuc2xhdGUgKz0gKG5hdmJhcldpZHRoIC8gNSkgKiAoMSAtIHBlcmNlbnRhZ2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHByZXZpb3VzTmF2QmFja0ljb24udHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke2ljb25UcmFuc2xhdGV9cHgsMCwwKWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZVRvdWNoRW5kKCkge1xuICAgIGlmICghaXNUb3VjaGVkIHx8ICFpc01vdmVkKSB7XG4gICAgICBpc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgIGlzTW92ZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGlmICh0b3VjaGVzRGlmZiA9PT0gMCkge1xuICAgICAgJChbY3VycmVudFBhZ2VbMF0sIHByZXZpb3VzUGFnZVswXV0pLnRyYW5zZm9ybSgnJyk7XG4gICAgICBpZiAoZHluYW1pY05hdmJhcikge1xuICAgICAgICBjdXJyZW50TmF2RWxlbWVudHMudHJhbnNmb3JtKCcnKS5jc3MoeyBvcGFjaXR5OiAnJyB9KTtcbiAgICAgICAgcHJldmlvdXNOYXZFbGVtZW50cy50cmFuc2Zvcm0oJycpLmNzcyh7IG9wYWNpdHk6ICcnIH0pO1xuICAgICAgICBpZiAoYWN0aXZlTmF2QmFja0ljb24gJiYgYWN0aXZlTmF2QmFja0ljb24ubGVuZ3RoID4gMCkgYWN0aXZlTmF2QmFja0ljb24udHJhbnNmb3JtKCcnKTtcbiAgICAgICAgaWYgKHByZXZpb3VzTmF2QmFja0ljb24gJiYgYWN0aXZlTmF2QmFja0ljb24ubGVuZ3RoID4gMCkgcHJldmlvdXNOYXZCYWNrSWNvbi50cmFuc2Zvcm0oJycpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0aW1lRGlmZiA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLSB0b3VjaFN0YXJ0VGltZTtcbiAgICBsZXQgcGFnZUNoYW5nZWQgPSBmYWxzZTtcbiAgICAvLyBTd2lwZSBiYWNrIHRvIHByZXZpb3VzIHBhZ2VcbiAgICBpZiAoXG4gICAgICAgICh0aW1lRGlmZiA8IDMwMCAmJiB0b3VjaGVzRGlmZiA+IDEwKSB8fFxuICAgICAgICAodGltZURpZmYgPj0gMzAwICYmIHRvdWNoZXNEaWZmID4gdmlld0NvbnRhaW5lcldpZHRoIC8gMilcbiAgICAgICkge1xuICAgICAgY3VycmVudFBhZ2UucmVtb3ZlQ2xhc3MoJ3BhZ2UtY3VycmVudCcpLmFkZENsYXNzKCdwYWdlLW5leHQnKTtcbiAgICAgIHByZXZpb3VzUGFnZS5yZW1vdmVDbGFzcygncGFnZS1wcmV2aW91cycpLmFkZENsYXNzKCdwYWdlLWN1cnJlbnQnKTtcbiAgICAgIGlmIChwYWdlU2hhZG93KSBwYWdlU2hhZG93WzBdLnN0eWxlLm9wYWNpdHkgPSAnJztcbiAgICAgIGlmIChwYWdlT3BhY2l0eSkgcGFnZU9wYWNpdHlbMF0uc3R5bGUub3BhY2l0eSA9ICcnO1xuICAgICAgaWYgKGR5bmFtaWNOYXZiYXIpIHtcbiAgICAgICAgY3VycmVudE5hdmJhci5yZW1vdmVDbGFzcygnbmF2YmFyLWN1cnJlbnQnKS5hZGRDbGFzcygnbmF2YmFyLW5leHQnKTtcbiAgICAgICAgcHJldmlvdXNOYXZiYXIucmVtb3ZlQ2xhc3MoJ25hdmJhci1wcmV2aW91cycpLmFkZENsYXNzKCduYXZiYXItY3VycmVudCcpO1xuICAgICAgfVxuICAgICAgcGFnZUNoYW5nZWQgPSB0cnVlO1xuICAgIH1cbiAgICAvLyBSZXNldCBjdXN0b20gc3R5bGVzXG4gICAgLy8gQWRkIHRyYW5zaXRpb25pbmcgY2xhc3MgZm9yIHRyYW5zaXRpb24tZHVyYXRpb25cbiAgICAkKFtjdXJyZW50UGFnZVswXSwgcHJldmlvdXNQYWdlWzBdXSkuYWRkQ2xhc3MoJ3BhZ2UtdHJhbnNpdGlvbmluZycpLnRyYW5zZm9ybSgnJyk7XG4gICAgaWYgKGR5bmFtaWNOYXZiYXIpIHtcbiAgICAgIGN1cnJlbnROYXZFbGVtZW50cy5jc3MoeyBvcGFjaXR5OiAnJyB9KVxuICAgICAgICAuZWFjaCgobmF2RWxJbmRleCwgbmF2RWwpID0+IHtcbiAgICAgICAgICBjb25zdCB0cmFuc2xhdGUgPSBwYWdlQ2hhbmdlZCA/IG5hdkVsLmY3TmF2YmFyUmlnaHRPZmZzZXQgOiAwO1xuICAgICAgICAgIGNvbnN0IHNsaWRpbmcgPSAkKG5hdkVsKTtcbiAgICAgICAgICBsZXQgaWNvblRyYW5zbGF0ZSA9IHBhZ2VDaGFuZ2VkID8gLXRyYW5zbGF0ZSA6IDA7XG4gICAgICAgICAgaWYgKCFzZXBhcmF0ZU5hdmJhciAmJiBwYWdlQ2hhbmdlZCkgaWNvblRyYW5zbGF0ZSAtPSBuYXZiYXJXaWR0aDtcbiAgICAgICAgICBzbGlkaW5nLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHt0cmFuc2xhdGV9cHgsMCwwKWApO1xuICAgICAgICAgIGlmIChyb3V0ZXIucGFyYW1zLmlvc0FuaW1hdGVOYXZiYXJCYWNrSWNvbikge1xuICAgICAgICAgICAgaWYgKHNsaWRpbmcuaGFzQ2xhc3MoJ2xlZnQnKSAmJiBhY3RpdmVOYXZCYWNrSWNvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIGFjdGl2ZU5hdkJhY2tJY29uLmFkZENsYXNzKCduYXZiYXItdHJhbnNpdGlvbmluZycpLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHtpY29uVHJhbnNsYXRlfXB4LDAsMClgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pLmFkZENsYXNzKCduYXZiYXItdHJhbnNpdGlvbmluZycpO1xuXG4gICAgICBwcmV2aW91c05hdkVsZW1lbnRzLnRyYW5zZm9ybSgnJykuY3NzKHsgb3BhY2l0eTogJycgfSkuZWFjaCgobmF2RWxJbmRleCwgbmF2RWwpID0+IHtcbiAgICAgICAgY29uc3QgdHJhbnNsYXRlID0gcGFnZUNoYW5nZWQgPyAwIDogbmF2RWwuZjdOYXZiYXJMZWZ0T2Zmc2V0O1xuICAgICAgICBjb25zdCBzbGlkaW5nID0gJChuYXZFbCk7XG4gICAgICAgIGxldCBpY29uVHJhbnNsYXRlID0gcGFnZUNoYW5nZWQgPyAwIDogLXRyYW5zbGF0ZTtcbiAgICAgICAgaWYgKCFzZXBhcmF0ZU5hdmJhciAmJiAhcGFnZUNoYW5nZWQpIGljb25UcmFuc2xhdGUgKz0gbmF2YmFyV2lkdGggLyA1O1xuICAgICAgICBzbGlkaW5nLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHt0cmFuc2xhdGV9cHgsMCwwKWApO1xuICAgICAgICBpZiAocm91dGVyLnBhcmFtcy5pb3NBbmltYXRlTmF2YmFyQmFja0ljb24pIHtcbiAgICAgICAgICBpZiAoc2xpZGluZy5oYXNDbGFzcygnbGVmdCcpICYmIHByZXZpb3VzTmF2QmFja0ljb24ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcHJldmlvdXNOYXZCYWNrSWNvbi5hZGRDbGFzcygnbmF2YmFyLXRyYW5zaXRpb25pbmcnKS50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7aWNvblRyYW5zbGF0ZX1weCwwLDApYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS5hZGRDbGFzcygnbmF2YmFyLXRyYW5zaXRpb25pbmcnKTtcbiAgICB9XG4gICAgYWxsb3dWaWV3VG91Y2hNb3ZlID0gZmFsc2U7XG4gICAgcm91dGVyLmFsbG93UGFnZUNoYW5nZSA9IGZhbHNlO1xuXG4gICAgLy8gU3dpcGUgQmFjayBDYWxsYmFja1xuICAgIGNvbnN0IGNhbGxiYWNrRGF0YSA9IHtcbiAgICAgIGN1cnJlbnRQYWdlOiBjdXJyZW50UGFnZVswXSxcbiAgICAgIHByZXZpb3VzUGFnZTogcHJldmlvdXNQYWdlWzBdLFxuICAgICAgY3VycmVudE5hdmJhcjogY3VycmVudE5hdmJhclswXSxcbiAgICAgIHByZXZpb3VzTmF2YmFyOiBwcmV2aW91c05hdmJhclswXSxcbiAgICB9O1xuXG4gICAgaWYgKHBhZ2VDaGFuZ2VkKSB7XG4gICAgICAvLyBVcGRhdGUgUm91dGVcbiAgICAgIHJvdXRlci5jdXJyZW50Um91dGUgPSBwcmV2aW91c1BhZ2VbMF0uZjdQYWdlLnJvdXRlO1xuICAgICAgcm91dGVyLmN1cnJlbnRQYWdlID0gcHJldmlvdXNQYWdlWzBdO1xuXG4gICAgICAvLyBQYWdlIGJlZm9yZSBhbmltYXRpb24gY2FsbGJhY2tcbiAgICAgIHJvdXRlci5wYWdlQ2FsbGJhY2soJ2JlZm9yZU91dCcsIGN1cnJlbnRQYWdlLCBjdXJyZW50TmF2YmFyLCAnY3VycmVudCcsICduZXh0JywgeyByb3V0ZTogY3VycmVudFBhZ2VbMF0uZjdQYWdlLnJvdXRlIH0pO1xuICAgICAgcm91dGVyLnBhZ2VDYWxsYmFjaygnYmVmb3JlSW4nLCBwcmV2aW91c1BhZ2UsIHByZXZpb3VzTmF2YmFyLCAncHJldmlvdXMnLCAnY3VycmVudCcsIHsgcm91dGU6IHByZXZpb3VzUGFnZVswXS5mN1BhZ2Uucm91dGUgfSk7XG5cbiAgICAgICRlbC50cmlnZ2VyKCdzd2lwZWJhY2s6YmVmb3JlY2hhbmdlJywgY2FsbGJhY2tEYXRhKTtcbiAgICAgIHJvdXRlci5lbWl0KCdzd2lwZUJhY2tCZWZvcmVDaGFuZ2UnLCBjYWxsYmFja0RhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkZWwudHJpZ2dlcignc3dpcGViYWNrOmJlZm9yZXJlc2V0JywgY2FsbGJhY2tEYXRhKTtcbiAgICAgIHJvdXRlci5lbWl0KCdzd2lwZUJhY2tCZWZvcmVSZXNldCcsIGNhbGxiYWNrRGF0YSk7XG4gICAgfVxuXG4gICAgY3VycmVudFBhZ2UudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAkKFtjdXJyZW50UGFnZVswXSwgcHJldmlvdXNQYWdlWzBdXSkucmVtb3ZlQ2xhc3MoJ3BhZ2UtdHJhbnNpdGlvbmluZycpO1xuICAgICAgaWYgKGR5bmFtaWNOYXZiYXIpIHtcbiAgICAgICAgY3VycmVudE5hdkVsZW1lbnRzLnJlbW92ZUNsYXNzKCduYXZiYXItdHJhbnNpdGlvbmluZycpLmNzcyh7IG9wYWNpdHk6ICcnIH0pLnRyYW5zZm9ybSgnJyk7XG4gICAgICAgIHByZXZpb3VzTmF2RWxlbWVudHMucmVtb3ZlQ2xhc3MoJ25hdmJhci10cmFuc2l0aW9uaW5nJykuY3NzKHsgb3BhY2l0eTogJycgfSkudHJhbnNmb3JtKCcnKTtcbiAgICAgICAgaWYgKGFjdGl2ZU5hdkJhY2tJY29uICYmIGFjdGl2ZU5hdkJhY2tJY29uLmxlbmd0aCA+IDApIGFjdGl2ZU5hdkJhY2tJY29uLnJlbW92ZUNsYXNzKCduYXZiYXItdHJhbnNpdGlvbmluZycpO1xuICAgICAgICBpZiAocHJldmlvdXNOYXZCYWNrSWNvbiAmJiBwcmV2aW91c05hdkJhY2tJY29uLmxlbmd0aCA+IDApIHByZXZpb3VzTmF2QmFja0ljb24ucmVtb3ZlQ2xhc3MoJ25hdmJhci10cmFuc2l0aW9uaW5nJyk7XG4gICAgICB9XG4gICAgICBhbGxvd1ZpZXdUb3VjaE1vdmUgPSB0cnVlO1xuICAgICAgcm91dGVyLmFsbG93UGFnZUNoYW5nZSA9IHRydWU7XG4gICAgICBpZiAocGFnZUNoYW5nZWQpIHtcbiAgICAgICAgLy8gVXBkYXRlIEhpc3RvcnlcbiAgICAgICAgaWYgKHJvdXRlci5oaXN0b3J5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIHJvdXRlci5oaXN0b3J5LnVuc2hpZnQocm91dGVyLnVybCk7XG4gICAgICAgIH1cbiAgICAgICAgcm91dGVyLmhpc3RvcnkucG9wKCk7XG4gICAgICAgIHJvdXRlci5zYXZlSGlzdG9yeSgpO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBwdXNoIHN0YXRlXG4gICAgICAgIGlmIChyb3V0ZXIucGFyYW1zLnB1c2hTdGF0ZSkge1xuICAgICAgICAgIEhpc3RvcnkuYmFjaygpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUGFnZSBhZnRlciBhbmltYXRpb24gY2FsbGJhY2tcbiAgICAgICAgcm91dGVyLnBhZ2VDYWxsYmFjaygnYWZ0ZXJPdXQnLCBjdXJyZW50UGFnZSwgY3VycmVudE5hdmJhciwgJ2N1cnJlbnQnLCAnbmV4dCcsIHsgcm91dGU6IGN1cnJlbnRQYWdlWzBdLmY3UGFnZS5yb3V0ZSB9KTtcbiAgICAgICAgcm91dGVyLnBhZ2VDYWxsYmFjaygnYWZ0ZXJJbicsIHByZXZpb3VzUGFnZSwgcHJldmlvdXNOYXZiYXIsICdwcmV2aW91cycsICdjdXJyZW50JywgeyByb3V0ZTogcHJldmlvdXNQYWdlWzBdLmY3UGFnZS5yb3V0ZSB9KTtcblxuICAgICAgICAvLyBSZW1vdmUgT2xkIFBhZ2VcbiAgICAgICAgaWYgKHJvdXRlci5wYXJhbXMuc3RhY2tQYWdlcyAmJiByb3V0ZXIuaW5pdGlhbFBhZ2VzLmluZGV4T2YoY3VycmVudFBhZ2VbMF0pID49IDApIHtcbiAgICAgICAgICBjdXJyZW50UGFnZS5hZGRDbGFzcygnc3RhY2tlZCcpO1xuICAgICAgICAgIGlmIChzZXBhcmF0ZU5hdmJhcikge1xuICAgICAgICAgICAgY3VycmVudE5hdmJhci5hZGRDbGFzcygnc3RhY2tlZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByb3V0ZXIucGFnZUNhbGxiYWNrKCdiZWZvcmVSZW1vdmUnLCBjdXJyZW50UGFnZSwgY3VycmVudE5hdmJhciwgJ25leHQnKTtcbiAgICAgICAgICByb3V0ZXIucmVtb3ZlRWwoY3VycmVudFBhZ2UpO1xuICAgICAgICAgIGlmIChzZXBhcmF0ZU5hdmJhcikge1xuICAgICAgICAgICAgcm91dGVyLnJlbW92ZUVsKGN1cnJlbnROYXZiYXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgICRlbC50cmlnZ2VyKCdzd2lwZWJhY2s6YWZ0ZXJjaGFuZ2UnLCBjYWxsYmFja0RhdGEpO1xuICAgICAgICByb3V0ZXIuZW1pdCgnc3dpcGVCYWNrQWZ0ZXJDaGFuZ2UnLCBjYWxsYmFja0RhdGEpO1xuXG4gICAgICAgIHJvdXRlci5lbWl0KCdyb3V0ZUNoYW5nZWQnLCByb3V0ZXIuY3VycmVudFJvdXRlLCByb3V0ZXIucHJldmlvdXNSb3V0ZSwgcm91dGVyKTtcblxuICAgICAgICBpZiAocm91dGVyLnBhcmFtcy5wcmVsb2FkUHJldmlvdXNQYWdlKSB7XG4gICAgICAgICAgcm91dGVyLmJhY2socm91dGVyLmhpc3Rvcnlbcm91dGVyLmhpc3RvcnkubGVuZ3RoIC0gMl0sIHsgcHJlbG9hZDogdHJ1ZSB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGVsLnRyaWdnZXIoJ3N3aXBlYmFjazphZnRlcnJlc2V0JywgY2FsbGJhY2tEYXRhKTtcbiAgICAgICAgcm91dGVyLmVtaXQoJ3N3aXBlQmFja0FmdGVyUmVzZXQnLCBjYWxsYmFja0RhdGEpO1xuICAgICAgfVxuICAgICAgaWYgKHBhZ2VTaGFkb3cgJiYgcGFnZVNoYWRvdy5sZW5ndGggPiAwKSBwYWdlU2hhZG93LnJlbW92ZSgpO1xuICAgICAgaWYgKHBhZ2VPcGFjaXR5ICYmIHBhZ2VPcGFjaXR5Lmxlbmd0aCA+IDApIHBhZ2VPcGFjaXR5LnJlbW92ZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYXR0YWNoRXZlbnRzKCkge1xuICAgIGNvbnN0IHBhc3NpdmVMaXN0ZW5lciA9IChhcHAudG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0JyAmJiBTdXBwb3J0JDEucGFzc2l2ZUxpc3RlbmVyKSA/IHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogZmFsc2UgfSA6IGZhbHNlO1xuICAgIGNvbnN0IGFjdGl2ZUxpc3RlbmVyID0gU3VwcG9ydCQxLnBhc3NpdmVMaXN0ZW5lciA/IHsgcGFzc2l2ZTogZmFsc2UsIGNhcHR1cmU6IGZhbHNlIH0gOiBmYWxzZTtcbiAgICAkZWwub24oYXBwLnRvdWNoRXZlbnRzLnN0YXJ0LCBoYW5kbGVUb3VjaFN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICRlbC5vbihhcHAudG91Y2hFdmVudHMubW92ZSwgaGFuZGxlVG91Y2hNb3ZlLCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgJGVsLm9uKGFwcC50b3VjaEV2ZW50cy5lbmQsIGhhbmRsZVRvdWNoRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICB9XG4gIGZ1bmN0aW9uIGRldGFjaEV2ZW50cygpIHtcbiAgICBjb25zdCBwYXNzaXZlTGlzdGVuZXIgPSAoYXBwLnRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcgJiYgU3VwcG9ydCQxLnBhc3NpdmVMaXN0ZW5lcikgPyB7IHBhc3NpdmU6IHRydWUsIGNhcHR1cmU6IGZhbHNlIH0gOiBmYWxzZTtcbiAgICBjb25zdCBhY3RpdmVMaXN0ZW5lciA9IFN1cHBvcnQkMS5wYXNzaXZlTGlzdGVuZXIgPyB7IHBhc3NpdmU6IGZhbHNlLCBjYXB0dXJlOiBmYWxzZSB9IDogZmFsc2U7XG4gICAgJGVsLm9mZihhcHAudG91Y2hFdmVudHMuc3RhcnQsIGhhbmRsZVRvdWNoU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgJGVsLm9mZihhcHAudG91Y2hFdmVudHMubW92ZSwgaGFuZGxlVG91Y2hNb3ZlLCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgJGVsLm9mZihhcHAudG91Y2hFdmVudHMuZW5kLCBoYW5kbGVUb3VjaEVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgfVxuXG4gIGF0dGFjaEV2ZW50cygpO1xuXG4gIHJvdXRlci5vbigncm91dGVyRGVzdHJveScsIGRldGFjaEV2ZW50cyk7XG59XG5cbmZ1bmN0aW9uIGZvcndhcmQoZWwsIGZvcndhcmRPcHRpb25zID0ge30pIHtcbiAgY29uc3Qgcm91dGVyID0gdGhpcztcbiAgY29uc3QgYXBwID0gcm91dGVyLmFwcDtcbiAgY29uc3QgdmlldyA9IHJvdXRlci52aWV3O1xuXG4gIGNvbnN0IG9wdGlvbnMgPSBVdGlscy5leHRlbmQoe1xuICAgIGFuaW1hdGU6IHJvdXRlci5wYXJhbXMuYW5pbWF0ZSxcbiAgICBwdXNoU3RhdGU6IHRydWUsXG4gICAgaGlzdG9yeTogdHJ1ZSxcbiAgICByZWxvYWRDdXJyZW50OiByb3V0ZXIucGFyYW1zLnJlbG9hZFBhZ2VzLFxuICAgIHJlbG9hZFByZXZpb3VzOiBmYWxzZSxcbiAgICByZWxvYWRBbGw6IGZhbHNlLFxuICAgIHBhZ2VFdmVudHM6IHt9LFxuICAgIG9uOiB7fSxcbiAgfSwgZm9yd2FyZE9wdGlvbnMpO1xuXG4gIGNvbnN0IGR5bmFtaWNOYXZiYXIgPSByb3V0ZXIuZHluYW1pY05hdmJhcjtcbiAgY29uc3Qgc2VwYXJhdGVOYXZiYXIgPSByb3V0ZXIuc2VwYXJhdGVOYXZiYXI7XG5cbiAgY29uc3QgJHZpZXdFbCA9IHJvdXRlci4kZWw7XG4gIGNvbnN0ICRuZXdQYWdlID0gJChlbCk7XG4gIGNvbnN0IHJlbG9hZCA9IG9wdGlvbnMucmVsb2FkUHJldmlvdXMgfHwgb3B0aW9ucy5yZWxvYWRDdXJyZW50IHx8IG9wdGlvbnMucmVsb2FkQWxsO1xuICBsZXQgJG9sZFBhZ2U7XG5cbiAgbGV0ICRuYXZiYXJFbDtcbiAgbGV0ICRuZXdOYXZiYXJJbm5lcjtcbiAgbGV0ICRvbGROYXZiYXJJbm5lcjtcblxuICBpZiAoJG5ld1BhZ2UubGVuZ3RoKSB7XG4gICAgLy8gUmVtb3ZlIHRoZW1lIGVsZW1lbnRzXG4gICAgcm91dGVyLnJlbW92ZVRoZW1lRWxlbWVudHMoJG5ld1BhZ2UpO1xuICB9XG5cbiAgaWYgKGR5bmFtaWNOYXZiYXIpIHtcbiAgICAkbmV3TmF2YmFySW5uZXIgPSAkbmV3UGFnZS5jaGlsZHJlbignLm5hdmJhcicpLmNoaWxkcmVuKCcubmF2YmFyLWlubmVyJyk7XG4gICAgaWYgKHNlcGFyYXRlTmF2YmFyKSB7XG4gICAgICAkbmF2YmFyRWwgPSByb3V0ZXIuJG5hdmJhckVsO1xuICAgICAgaWYgKCRuZXdOYXZiYXJJbm5lci5sZW5ndGggPiAwKSB7XG4gICAgICAgICRuZXdQYWdlLmNoaWxkcmVuKCcubmF2YmFyJykucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgICBpZiAoJG5ld05hdmJhcklubmVyLmxlbmd0aCA9PT0gMCAmJiAkbmV3UGFnZVswXS5mN1BhZ2UpIHtcbiAgICAgICAgLy8gVHJ5IGZyb20gcGFnZURhdGFcbiAgICAgICAgJG5ld05hdmJhcklubmVyID0gJG5ld1BhZ2VbMF0uZjdQYWdlLiRuYXZiYXJFbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByb3V0ZXIuYWxsb3dQYWdlQ2hhbmdlID0gZmFsc2U7XG4gIGlmICgkbmV3UGFnZS5sZW5ndGggPT09IDApIHtcbiAgICByb3V0ZXIuYWxsb3dQYWdlQ2hhbmdlID0gdHJ1ZTtcbiAgICByZXR1cm4gcm91dGVyO1xuICB9XG5cbiAgLy8gUGFnZXMgSW4gVmlld1xuICBjb25zdCAkcGFnZXNJblZpZXcgPSAkdmlld0VsXG4gICAgLmNoaWxkcmVuKCcucGFnZTpub3QoLnN0YWNrZWQpJylcbiAgICAuZmlsdGVyKChpbmRleCwgcGFnZUluVmlldykgPT4gcGFnZUluVmlldyAhPT0gJG5ld1BhZ2VbMF0pO1xuXG4gIC8vIE5hdmJhcnMgSW4gVmlld1xuICBsZXQgJG5hdmJhcnNJblZpZXc7XG4gIGlmIChzZXBhcmF0ZU5hdmJhcikge1xuICAgICRuYXZiYXJzSW5WaWV3ID0gJG5hdmJhckVsXG4gICAgICAuY2hpbGRyZW4oJy5uYXZiYXItaW5uZXI6bm90KC5zdGFja2VkKScpXG4gICAgICAuZmlsdGVyKChpbmRleCwgbmF2YmFySW5WaWV3KSA9PiBuYXZiYXJJblZpZXcgIT09ICRuZXdOYXZiYXJJbm5lclswXSk7XG4gIH1cblxuICAvLyBFeGl0IHdoZW4gcmVsb2FkIHByZXZpb3VzIGFuZCBvbmx5IDEgcGFnZSBpbiB2aWV3IHNvIG5vdGhpbmcgcm8gcmVsb2FkXG4gIGlmIChvcHRpb25zLnJlbG9hZFByZXZpb3VzICYmICRwYWdlc0luVmlldy5sZW5ndGggPCAyKSB7XG4gICAgcm91dGVyLmFsbG93UGFnZUNoYW5nZSA9IHRydWU7XG4gICAgcmV0dXJuIHJvdXRlcjtcbiAgfVxuXG4gIC8vIE5ldyBQYWdlXG4gIGxldCBuZXdQYWdlUG9zaXRpb24gPSAnbmV4dCc7XG4gIGlmIChvcHRpb25zLnJlbG9hZEN1cnJlbnQgfHwgb3B0aW9ucy5yZWxvYWRBbGwpIHtcbiAgICBuZXdQYWdlUG9zaXRpb24gPSAnY3VycmVudCc7XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5yZWxvYWRQcmV2aW91cykge1xuICAgIG5ld1BhZ2VQb3NpdGlvbiA9ICdwcmV2aW91cyc7XG4gIH1cbiAgJG5ld1BhZ2VcbiAgICAuYWRkQ2xhc3MoYHBhZ2UtJHtuZXdQYWdlUG9zaXRpb259YClcbiAgICAucmVtb3ZlQ2xhc3MoJ3N0YWNrZWQnKTtcblxuICBpZiAoZHluYW1pY05hdmJhciAmJiAkbmV3TmF2YmFySW5uZXIubGVuZ3RoKSB7XG4gICAgJG5ld05hdmJhcklubmVyXG4gICAgICAuYWRkQ2xhc3MoYG5hdmJhci0ke25ld1BhZ2VQb3NpdGlvbn1gKVxuICAgICAgLnJlbW92ZUNsYXNzKCdzdGFja2VkJyk7XG4gIH1cblxuICAvLyBGaW5kIE9sZCBQYWdlXG4gIGlmIChvcHRpb25zLnJlbG9hZEN1cnJlbnQpIHtcbiAgICAkb2xkUGFnZSA9ICRwYWdlc0luVmlldy5lcSgkcGFnZXNJblZpZXcubGVuZ3RoIC0gMSk7XG4gICAgaWYgKHNlcGFyYXRlTmF2YmFyKSB7XG4gICAgICAvLyAkb2xkTmF2YmFySW5uZXIgPSAkbmF2YmFyc0luVmlldy5lcSgkcGFnZXNJblZpZXcubGVuZ3RoIC0gMSk7XG4gICAgICAkb2xkTmF2YmFySW5uZXIgPSBhcHAubmF2YmFyLmdldEVsQnlQYWdlKCRvbGRQYWdlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5yZWxvYWRQcmV2aW91cykge1xuICAgICRvbGRQYWdlID0gJHBhZ2VzSW5WaWV3LmVxKCRwYWdlc0luVmlldy5sZW5ndGggLSAyKTtcbiAgICBpZiAoc2VwYXJhdGVOYXZiYXIpIHtcbiAgICAgIC8vICRvbGROYXZiYXJJbm5lciA9ICRuYXZiYXJzSW5WaWV3LmVxKCRwYWdlc0luVmlldy5sZW5ndGggLSAyKTtcbiAgICAgICRvbGROYXZiYXJJbm5lciA9IGFwcC5uYXZiYXIuZ2V0RWxCeVBhZ2UoJG9sZFBhZ2UpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChvcHRpb25zLnJlbG9hZEFsbCkge1xuICAgICRvbGRQYWdlID0gJHBhZ2VzSW5WaWV3LmZpbHRlcigoaW5kZXgsIHBhZ2VFbCkgPT4gcGFnZUVsICE9PSAkbmV3UGFnZVswXSk7XG4gICAgaWYgKHNlcGFyYXRlTmF2YmFyKSB7XG4gICAgICAkb2xkTmF2YmFySW5uZXIgPSAkbmF2YmFyc0luVmlldy5maWx0ZXIoKGluZGV4LCBuYXZiYXJFbCkgPT4gbmF2YmFyRWwgIT09ICRuZXdOYXZiYXJJbm5lclswXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICgkcGFnZXNJblZpZXcubGVuZ3RoID4gMSkge1xuICAgICAgbGV0IGkgPSAwO1xuICAgICAgZm9yIChpID0gMDsgaSA8ICRwYWdlc0luVmlldy5sZW5ndGggLSAxOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgb2xkTmF2YmFySW5uZXJFbCA9IGFwcC5uYXZiYXIuZ2V0RWxCeVBhZ2UoJHBhZ2VzSW5WaWV3LmVxKGkpKTtcbiAgICAgICAgaWYgKHJvdXRlci5wYXJhbXMuc3RhY2tQYWdlcykge1xuICAgICAgICAgICRwYWdlc0luVmlldy5lcShpKS5hZGRDbGFzcygnc3RhY2tlZCcpO1xuICAgICAgICAgIGlmIChzZXBhcmF0ZU5hdmJhcikge1xuICAgICAgICAgICAgLy8gJG5hdmJhcnNJblZpZXcuZXEoaSkuYWRkQ2xhc3MoJ3N0YWNrZWQnKTtcbiAgICAgICAgICAgICQob2xkTmF2YmFySW5uZXJFbCkuYWRkQ2xhc3MoJ3N0YWNrZWQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gUGFnZSByZW1vdmUgZXZlbnRcbiAgICAgICAgICByb3V0ZXIucGFnZUNhbGxiYWNrKCdiZWZvcmVSZW1vdmUnLCAkcGFnZXNJblZpZXdbaV0sICRuYXZiYXJzSW5WaWV3ICYmICRuYXZiYXJzSW5WaWV3W2ldLCAncHJldmlvdXMnLCB1bmRlZmluZWQsIG9wdGlvbnMpO1xuICAgICAgICAgIHJvdXRlci5yZW1vdmVFbCgkcGFnZXNJblZpZXdbaV0pO1xuICAgICAgICAgIGlmIChzZXBhcmF0ZU5hdmJhciAmJiBvbGROYXZiYXJJbm5lckVsKSB7XG4gICAgICAgICAgICAvLyByb3V0ZXIucmVtb3ZlRWwoJG5hdmJhcnNJblZpZXdbaV0pO1xuICAgICAgICAgICAgcm91dGVyLnJlbW92ZUVsKG9sZE5hdmJhcklubmVyRWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAkb2xkUGFnZSA9ICR2aWV3RWxcbiAgICAgIC5jaGlsZHJlbignLnBhZ2U6bm90KC5zdGFja2VkKScpXG4gICAgICAuZmlsdGVyKChpbmRleCwgcGFnZSkgPT4gcGFnZSAhPT0gJG5ld1BhZ2VbMF0pO1xuICAgIGlmIChzZXBhcmF0ZU5hdmJhcikge1xuICAgICAgJG9sZE5hdmJhcklubmVyID0gJG5hdmJhckVsXG4gICAgICAgIC5jaGlsZHJlbignLm5hdmJhci1pbm5lcjpub3QoLnN0YWNrZWQpJylcbiAgICAgICAgLmZpbHRlcigoaW5kZXgsIG5hdmJhcklubmVyKSA9PiBuYXZiYXJJbm5lciAhPT0gJG5ld05hdmJhcklubmVyWzBdKTtcbiAgICB9XG4gIH1cbiAgaWYgKGR5bmFtaWNOYXZiYXIgJiYgIXNlcGFyYXRlTmF2YmFyKSB7XG4gICAgJG9sZE5hdmJhcklubmVyID0gJG9sZFBhZ2UuY2hpbGRyZW4oJy5uYXZiYXInKS5jaGlsZHJlbignLm5hdmJhci1pbm5lcicpO1xuICB9XG5cbiAgLy8gUHVzaCBTdGF0ZVxuICBpZiAocm91dGVyLnBhcmFtcy5wdXNoU3RhdGUgJiYgb3B0aW9ucy5wdXNoU3RhdGUgJiYgIW9wdGlvbnMucmVsb2FkUHJldmlvdXMpIHtcbiAgICBjb25zdCBwdXNoU3RhdGVSb290ID0gcm91dGVyLnBhcmFtcy5wdXNoU3RhdGVSb290IHx8ICcnO1xuICAgIEhpc3Rvcnlbb3B0aW9ucy5yZWxvYWRDdXJyZW50IHx8IG9wdGlvbnMucmVsb2FkQWxsID8gJ3JlcGxhY2UnIDogJ3B1c2gnXShcbiAgICAgIHtcbiAgICAgICAgdXJsOiBvcHRpb25zLnJvdXRlLnVybCxcbiAgICAgICAgdmlld0luZGV4OiB2aWV3LmluZGV4LFxuICAgICAgfSxcbiAgICAgIHB1c2hTdGF0ZVJvb3QgKyByb3V0ZXIucGFyYW1zLnB1c2hTdGF0ZVNlcGFyYXRvciArIG9wdGlvbnMucm91dGUudXJsKTtcbiAgfVxuXG4gIC8vIEN1cnJlbnQgUm91dGVcbiAgcm91dGVyLmN1cnJlbnRSb3V0ZSA9IG9wdGlvbnMucm91dGU7XG5cbiAgLy8gVXBkYXRlIHJvdXRlciBoaXN0b3J5XG4gIGNvbnN0IHVybCA9IG9wdGlvbnMucm91dGUudXJsO1xuICBpZiAob3B0aW9ucy5oaXN0b3J5KSB7XG4gICAgaWYgKG9wdGlvbnMucmVsb2FkQ3VycmVudCAmJiByb3V0ZXIuaGlzdG9yeS5sZW5ndGggPiAwKSB7XG4gICAgICByb3V0ZXIuaGlzdG9yeVtyb3V0ZXIuaGlzdG9yeS5sZW5ndGggLSAob3B0aW9ucy5yZWxvYWRQcmV2aW91cyA/IDIgOiAxKV0gPSB1cmw7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLnJlbG9hZEFsbCkge1xuICAgICAgcm91dGVyLmhpc3RvcnkgPSBbdXJsXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm91dGVyLmhpc3RvcnkucHVzaCh1cmwpO1xuICAgIH1cbiAgfVxuICByb3V0ZXIuc2F2ZUhpc3RvcnkoKTtcblxuICAvLyBJbnNlcnQgbmV3IHBhZ2UgYW5kIG5hdmJhclxuICBjb25zdCBuZXdQYWdlSW5Eb20gPSAkbmV3UGFnZS5wYXJlbnRzKGRvY3VtZW50KS5sZW5ndGggPiAwO1xuICBjb25zdCBmN0NvbXBvbmVudCA9ICRuZXdQYWdlWzBdLmY3Q29tcG9uZW50O1xuICAvLyBjb25zb2xlLmxvZyhtc2cpXG4gIGlmIChvcHRpb25zLnJlbG9hZFByZXZpb3VzKSB7XG4gICAgaWYgKGY3Q29tcG9uZW50ICYmICFuZXdQYWdlSW5Eb20pIHtcbiAgICAgIGY3Q29tcG9uZW50Lm1vdW50KChjb21wb25lbnRFbCkgPT4ge1xuICAgICAgICAkKGNvbXBvbmVudEVsKS5pbnNlcnRCZWZvcmUoJG9sZFBhZ2UpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICRuZXdQYWdlLmluc2VydEJlZm9yZSgkb2xkUGFnZSk7XG4gICAgfVxuICAgIGlmIChzZXBhcmF0ZU5hdmJhciAmJiAkbmV3TmF2YmFySW5uZXIubGVuZ3RoKSB7XG4gICAgICBpZiAoJG9sZE5hdmJhcklubmVyLmxlbmd0aCkge1xuICAgICAgICAkbmV3TmF2YmFySW5uZXIuaW5zZXJ0QmVmb3JlKCRvbGROYXZiYXJJbm5lcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkbmF2YmFyRWwuYXBwZW5kKCRuZXdOYXZiYXJJbm5lcik7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKCRvbGRQYWdlLm5leHQoJy5wYWdlJylbMF0gIT09ICRuZXdQYWdlWzBdKSB7XG4gICAgaWYgKGY3Q29tcG9uZW50ICYmICFuZXdQYWdlSW5Eb20pIHtcbiAgICAgIGY3Q29tcG9uZW50Lm1vdW50KChjb21wb25lbnRFbCkgPT4ge1xuICAgICAgICAkdmlld0VsLmFwcGVuZChjb21wb25lbnRFbCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHZpZXdFbC5hcHBlbmQoJG5ld1BhZ2VbMF0pO1xuICAgIH1cbiAgICBpZiAoc2VwYXJhdGVOYXZiYXIgJiYgJG5ld05hdmJhcklubmVyLmxlbmd0aCkge1xuICAgICAgJG5hdmJhckVsLmFwcGVuZCgkbmV3TmF2YmFySW5uZXJbMF0pO1xuICAgIH1cbiAgfVxuICBpZiAoIW5ld1BhZ2VJbkRvbSkge1xuICAgIHJvdXRlci5wYWdlQ2FsbGJhY2soJ21vdW50ZWQnLCAkbmV3UGFnZSwgJG5ld05hdmJhcklubmVyLCBuZXdQYWdlUG9zaXRpb24sIHJlbG9hZCA/IG5ld1BhZ2VQb3NpdGlvbiA6ICdjdXJyZW50Jywgb3B0aW9ucywgJG9sZFBhZ2UpO1xuICB9XG5cbiAgLy8gUmVtb3ZlIG9sZCBwYWdlXG4gIGlmIChvcHRpb25zLnJlbG9hZEN1cnJlbnQgJiYgJG9sZFBhZ2UubGVuZ3RoID4gMCkge1xuICAgIGlmIChyb3V0ZXIucGFyYW1zLnN0YWNrUGFnZXMgJiYgcm91dGVyLmluaXRpYWxQYWdlcy5pbmRleE9mKCRvbGRQYWdlWzBdKSA+PSAwKSB7XG4gICAgICAkb2xkUGFnZS5hZGRDbGFzcygnc3RhY2tlZCcpO1xuICAgICAgaWYgKHNlcGFyYXRlTmF2YmFyKSB7XG4gICAgICAgICRvbGROYXZiYXJJbm5lci5hZGRDbGFzcygnc3RhY2tlZCcpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBQYWdlIHJlbW92ZSBldmVudFxuICAgICAgcm91dGVyLnBhZ2VDYWxsYmFjaygnYmVmb3JlUmVtb3ZlJywgJG9sZFBhZ2UsICRuZXdOYXZiYXJJbm5lciwgJ3ByZXZpb3VzJywgdW5kZWZpbmVkLCBvcHRpb25zKTtcbiAgICAgIHJvdXRlci5yZW1vdmVFbCgkb2xkUGFnZSk7XG4gICAgICBpZiAoc2VwYXJhdGVOYXZiYXIgJiYgJG9sZE5hdmJhcklubmVyLmxlbmd0aCkge1xuICAgICAgICByb3V0ZXIucmVtb3ZlRWwoJG9sZE5hdmJhcklubmVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5yZWxvYWRBbGwpIHtcbiAgICAkb2xkUGFnZS5lYWNoKChpbmRleCwgcGFnZUVsKSA9PiB7XG4gICAgICBjb25zdCAkb2xkUGFnZUVsID0gJChwYWdlRWwpO1xuICAgICAgY29uc3QgJG9sZE5hdmJhcklubmVyRWwgPSAkKGFwcC5uYXZiYXIuZ2V0RWxCeVBhZ2UoJG9sZFBhZ2VFbCkpO1xuICAgICAgaWYgKHJvdXRlci5wYXJhbXMuc3RhY2tQYWdlcyAmJiByb3V0ZXIuaW5pdGlhbFBhZ2VzLmluZGV4T2YoJG9sZFBhZ2VFbFswXSkgPj0gMCkge1xuICAgICAgICAkb2xkUGFnZUVsLmFkZENsYXNzKCdzdGFja2VkJyk7XG4gICAgICAgIGlmIChzZXBhcmF0ZU5hdmJhcikge1xuICAgICAgICAgIC8vICRvbGROYXZiYXJJbm5lci5lcShpbmRleCkuYWRkQ2xhc3MoJ3N0YWNrZWQnKTtcbiAgICAgICAgICAkb2xkTmF2YmFySW5uZXJFbC5hZGRDbGFzcygnc3RhY2tlZCcpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBQYWdlIHJlbW92ZSBldmVudFxuICAgICAgICByb3V0ZXIucGFnZUNhbGxiYWNrKCdiZWZvcmVSZW1vdmUnLCAkb2xkUGFnZUVsLCAkb2xkTmF2YmFySW5uZXIgJiYgJG9sZE5hdmJhcklubmVyLmVxKGluZGV4KSwgJ3ByZXZpb3VzJywgdW5kZWZpbmVkLCBvcHRpb25zKTtcbiAgICAgICAgcm91dGVyLnJlbW92ZUVsKCRvbGRQYWdlRWwpO1xuICAgICAgICBpZiAoc2VwYXJhdGVOYXZiYXIgJiYgJG9sZE5hdmJhcklubmVyRWwubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gcm91dGVyLnJlbW92ZUVsKCRvbGROYXZiYXJJbm5lci5lcShpbmRleCkpO1xuICAgICAgICAgIHJvdXRlci5yZW1vdmVFbCgkb2xkTmF2YmFySW5uZXJFbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8vIExvYWQgVGFiXG4gIGlmIChvcHRpb25zLnJvdXRlLnJvdXRlLnRhYikge1xuICAgIHJvdXRlci50YWJMb2FkKG9wdGlvbnMucm91dGUucm91dGUudGFiLCBVdGlscy5leHRlbmQoe30sIG9wdGlvbnMsIHtcbiAgICAgIGhpc3Rvcnk6IGZhbHNlLFxuICAgICAgcHVzaFN0YXRlOiBmYWxzZSxcbiAgICB9KSk7XG4gIH1cblxuICAvLyBQYWdlIGluaXQgYW5kIGJlZm9yZSBpbml0IGV2ZW50c1xuICByb3V0ZXIucGFnZUNhbGxiYWNrKCdpbml0JywgJG5ld1BhZ2UsICRuZXdOYXZiYXJJbm5lciwgbmV3UGFnZVBvc2l0aW9uLCByZWxvYWQgPyBuZXdQYWdlUG9zaXRpb24gOiAnY3VycmVudCcsIG9wdGlvbnMsICRvbGRQYWdlKTtcblxuICBpZiAob3B0aW9ucy5yZWxvYWRDdXJyZW50IHx8IG9wdGlvbnMucmVsb2FkQWxsKSB7XG4gICAgcm91dGVyLmFsbG93UGFnZUNoYW5nZSA9IHRydWU7XG4gICAgcmV0dXJuIHJvdXRlcjtcbiAgfVxuXG4gIC8vIEJlZm9yZSBhbmltYXRpb24gZXZlbnRcbiAgcm91dGVyLnBhZ2VDYWxsYmFjaygnYmVmb3JlSW4nLCAkbmV3UGFnZSwgJG5ld05hdmJhcklubmVyLCAnbmV4dCcsICdjdXJyZW50Jywgb3B0aW9ucyk7XG4gIHJvdXRlci5wYWdlQ2FsbGJhY2soJ2JlZm9yZU91dCcsICRvbGRQYWdlLCAkb2xkTmF2YmFySW5uZXIsICdjdXJyZW50JywgJ3ByZXZpb3VzJywgb3B0aW9ucyk7XG5cbiAgLy8gQW5pbWF0aW9uXG4gIGZ1bmN0aW9uIGFmdGVyQW5pbWF0aW9uKCkge1xuICAgIGNvbnN0IHBhZ2VDbGFzc2VzID0gJ3BhZ2UtcHJldmlvdXMgcGFnZS1jdXJyZW50IHBhZ2UtbmV4dCc7XG4gICAgY29uc3QgbmF2YmFyQ2xhc3NlcyA9ICduYXZiYXItcHJldmlvdXMgbmF2YmFyLWN1cnJlbnQgbmF2YmFyLW5leHQnO1xuICAgICRuZXdQYWdlLnJlbW92ZUNsYXNzKHBhZ2VDbGFzc2VzKS5hZGRDbGFzcygncGFnZS1jdXJyZW50Jyk7XG4gICAgJG9sZFBhZ2UucmVtb3ZlQ2xhc3MocGFnZUNsYXNzZXMpLmFkZENsYXNzKCdwYWdlLXByZXZpb3VzJyk7XG4gICAgaWYgKGR5bmFtaWNOYXZiYXIpIHtcbiAgICAgICRuZXdOYXZiYXJJbm5lci5yZW1vdmVDbGFzcyhuYXZiYXJDbGFzc2VzKS5hZGRDbGFzcygnbmF2YmFyLWN1cnJlbnQnKTtcbiAgICAgICRvbGROYXZiYXJJbm5lci5yZW1vdmVDbGFzcyhuYXZiYXJDbGFzc2VzKS5hZGRDbGFzcygnbmF2YmFyLXByZXZpb3VzJyk7XG4gICAgfVxuICAgIC8vIEFmdGVyIGFuaW1hdGlvbiBldmVudFxuICAgIHJvdXRlci5hbGxvd1BhZ2VDaGFuZ2UgPSB0cnVlO1xuICAgIHJvdXRlci5wYWdlQ2FsbGJhY2soJ2FmdGVySW4nLCAkbmV3UGFnZSwgJG5ld05hdmJhcklubmVyLCAnbmV4dCcsICdjdXJyZW50Jywgb3B0aW9ucyk7XG4gICAgcm91dGVyLnBhZ2VDYWxsYmFjaygnYWZ0ZXJPdXQnLCAkb2xkUGFnZSwgJG9sZE5hdmJhcklubmVyLCAnY3VycmVudCcsICdwcmV2aW91cycsIG9wdGlvbnMpO1xuXG4gICAgbGV0IGtlZXBPbGRQYWdlID0gYXBwLnRoZW1lID09PSAnaW9zJyA/IChyb3V0ZXIucGFyYW1zLnByZWxvYWRQcmV2aW91c1BhZ2UgfHwgcm91dGVyLnBhcmFtcy5pb3NTd2lwZUJhY2spIDogcm91dGVyLnBhcmFtcy5wcmVsb2FkUHJldmlvdXNQYWdlO1xuICAgIGlmICgha2VlcE9sZFBhZ2UpIHtcbiAgICAgIGlmICgkbmV3UGFnZS5oYXNDbGFzcygnc21hcnQtc2VsZWN0LXBhZ2UnKSB8fCAkbmV3UGFnZS5oYXNDbGFzcygncGhvdG8tYnJvd3Nlci1wYWdlJykgfHwgJG5ld1BhZ2UuaGFzQ2xhc3MoJ2F1dG9jb21wbGV0ZS1wYWdlJykpIHtcbiAgICAgICAga2VlcE9sZFBhZ2UgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWtlZXBPbGRQYWdlKSB7XG4gICAgICBpZiAocm91dGVyLnBhcmFtcy5zdGFja1BhZ2VzKSB7XG4gICAgICAgICRvbGRQYWdlLmFkZENsYXNzKCdzdGFja2VkJyk7XG4gICAgICAgIGlmIChzZXBhcmF0ZU5hdmJhcikge1xuICAgICAgICAgICRvbGROYXZiYXJJbm5lci5hZGRDbGFzcygnc3RhY2tlZCcpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCEoJG5ld1BhZ2UuYXR0cignZGF0YS1uYW1lJykgJiYgJG5ld1BhZ2UuYXR0cignZGF0YS1uYW1lJykgPT09ICdzbWFydC1zZWxlY3QtcGFnZScpKSB7XG4gICAgICAgIC8vIFJlbW92ZSBldmVudFxuICAgICAgICByb3V0ZXIucGFnZUNhbGxiYWNrKCdiZWZvcmVSZW1vdmUnLCAkb2xkUGFnZSwgJG9sZE5hdmJhcklubmVyLCAncHJldmlvdXMnLCB1bmRlZmluZWQsIG9wdGlvbnMpO1xuICAgICAgICByb3V0ZXIucmVtb3ZlRWwoJG9sZFBhZ2UpO1xuICAgICAgICBpZiAoc2VwYXJhdGVOYXZiYXIgJiYgJG9sZE5hdmJhcklubmVyLmxlbmd0aCkge1xuICAgICAgICAgIHJvdXRlci5yZW1vdmVFbCgkb2xkTmF2YmFySW5uZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJvdXRlci5lbWl0KCdyb3V0ZUNoYW5nZWQnLCByb3V0ZXIuY3VycmVudFJvdXRlLCByb3V0ZXIucHJldmlvdXNSb3V0ZSwgcm91dGVyKTtcblxuICAgIGlmIChyb3V0ZXIucGFyYW1zLnB1c2hTdGF0ZSkge1xuICAgICAgSGlzdG9yeS5jbGVhclJvdXRlclF1ZXVlKCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHNldFBvc2l0aW9uQ2xhc3NlcygpIHtcbiAgICBjb25zdCBwYWdlQ2xhc3NlcyA9ICdwYWdlLXByZXZpb3VzIHBhZ2UtY3VycmVudCBwYWdlLW5leHQnO1xuICAgIGNvbnN0IG5hdmJhckNsYXNzZXMgPSAnbmF2YmFyLXByZXZpb3VzIG5hdmJhci1jdXJyZW50IG5hdmJhci1uZXh0JztcbiAgICAkb2xkUGFnZS5yZW1vdmVDbGFzcyhwYWdlQ2xhc3NlcykuYWRkQ2xhc3MoJ3BhZ2UtY3VycmVudCcpO1xuICAgICRuZXdQYWdlLnJlbW92ZUNsYXNzKHBhZ2VDbGFzc2VzKS5hZGRDbGFzcygncGFnZS1uZXh0Jyk7XG4gICAgaWYgKGR5bmFtaWNOYXZiYXIpIHtcbiAgICAgICRvbGROYXZiYXJJbm5lci5yZW1vdmVDbGFzcyhuYXZiYXJDbGFzc2VzKS5hZGRDbGFzcygnbmF2YmFyLWN1cnJlbnQnKTtcbiAgICAgICRuZXdOYXZiYXJJbm5lci5yZW1vdmVDbGFzcyhuYXZiYXJDbGFzc2VzKS5hZGRDbGFzcygnbmF2YmFyLW5leHQnKTtcbiAgICB9XG4gIH1cbiAgaWYgKG9wdGlvbnMuYW5pbWF0ZSkge1xuICAgIGlmIChyb3V0ZXIuYXBwLnRoZW1lID09PSAnbWQnICYmIHJvdXRlci5wYXJhbXMubWF0ZXJpYWxQYWdlTG9hZERlbGF5KSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgc2V0UG9zaXRpb25DbGFzc2VzKCk7XG4gICAgICAgIHJvdXRlci5hbmltYXRlKCRvbGRQYWdlLCAkbmV3UGFnZSwgJG9sZE5hdmJhcklubmVyLCAkbmV3TmF2YmFySW5uZXIsICdmb3J3YXJkJywgKCkgPT4ge1xuICAgICAgICAgIGFmdGVyQW5pbWF0aW9uKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSwgcm91dGVyLnBhcmFtcy5tYXRlcmlhbFBhZ2VMb2FkRGVsYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRQb3NpdGlvbkNsYXNzZXMoKTtcbiAgICAgIHJvdXRlci5hbmltYXRlKCRvbGRQYWdlLCAkbmV3UGFnZSwgJG9sZE5hdmJhcklubmVyLCAkbmV3TmF2YmFySW5uZXIsICdmb3J3YXJkJywgKCkgPT4ge1xuICAgICAgICBhZnRlckFuaW1hdGlvbigpO1xuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFmdGVyQW5pbWF0aW9uKCk7XG4gIH1cbiAgcmV0dXJuIHJvdXRlcjtcbn1cbmZ1bmN0aW9uIGxvYWQobG9hZFBhcmFtcyA9IHt9LCBsb2FkT3B0aW9ucyA9IHt9LCBpZ25vcmVQYWdlQ2hhbmdlKSB7XG4gIGNvbnN0IHJvdXRlciA9IHRoaXM7XG5cbiAgaWYgKCFyb3V0ZXIuYWxsb3dQYWdlQ2hhbmdlICYmICFpZ25vcmVQYWdlQ2hhbmdlKSByZXR1cm4gcm91dGVyO1xuICBjb25zdCBwYXJhbXMgPSBsb2FkUGFyYW1zO1xuICBjb25zdCBvcHRpb25zID0gbG9hZE9wdGlvbnM7XG4gIGNvbnN0IHsgdXJsLCBjb250ZW50LCBlbCwgbmFtZSwgdGVtcGxhdGUsIHRlbXBsYXRlVXJsLCBjb21wb25lbnQsIGNvbXBvbmVudFVybCB9ID0gcGFyYW1zO1xuICBjb25zdCB7IGlnbm9yZUNhY2hlIH0gPSBvcHRpb25zO1xuXG4gIGlmIChvcHRpb25zLnJvdXRlICYmXG4gICAgb3B0aW9ucy5yb3V0ZS5yb3V0ZSAmJlxuICAgIG9wdGlvbnMucm91dGUucm91dGUucGFyZW50UGF0aCAmJlxuICAgIHJvdXRlci5jdXJyZW50Um91dGUucm91dGUucGFyZW50UGF0aCAmJlxuICAgIG9wdGlvbnMucm91dGUucm91dGUucGFyZW50UGF0aCA9PT0gcm91dGVyLmN1cnJlbnRSb3V0ZS5yb3V0ZS5wYXJlbnRQYXRoKSB7XG4gICAgLy8gRG8gc29tZXRoaW5nIG5lc3RlZFxuICAgIGlmIChvcHRpb25zLnJvdXRlLnVybCA9PT0gcm91dGVyLnVybCkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChvcHRpb25zLnJvdXRlLnJvdXRlLnRhYikge1xuICAgICAgcmV0dXJuIHJvdXRlci50YWJMb2FkKG9wdGlvbnMucm91dGUucm91dGUudGFiLCBvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKFxuICAgIG9wdGlvbnMucm91dGUgJiZcbiAgICBvcHRpb25zLnJvdXRlLnVybCAmJlxuICAgIHJvdXRlci51cmwgPT09IG9wdGlvbnMucm91dGUudXJsICYmXG4gICAgIShvcHRpb25zLnJlbG9hZEN1cnJlbnQgfHwgb3B0aW9ucy5yZWxvYWRQcmV2aW91cykgJiZcbiAgICAhcm91dGVyLnBhcmFtcy5hbGxvd0R1cGxpY2F0ZVVybHNcbiAgICApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoIW9wdGlvbnMucm91dGUgJiYgdXJsKSB7XG4gICAgb3B0aW9ucy5yb3V0ZSA9IHJvdXRlci5maW5kTWF0Y2hpbmdSb3V0ZSh1cmwsIHRydWUpO1xuICAgIFV0aWxzLmV4dGVuZChvcHRpb25zLnJvdXRlLCB7IHJvdXRlOiB7IHVybCwgcGF0aDogdXJsIH0gfSk7XG4gIH1cblxuICAvLyBDb21wb25lbnQgQ2FsbGJhY2tzXG4gIGZ1bmN0aW9uIHJlc29sdmUocGFnZUVsLCBuZXdPcHRpb25zKSB7XG4gICAgcmV0dXJuIHJvdXRlci5mb3J3YXJkKHBhZ2VFbCwgVXRpbHMuZXh0ZW5kKG9wdGlvbnMsIG5ld09wdGlvbnMpKTtcbiAgfVxuICBmdW5jdGlvbiByZWplY3QoKSB7XG4gICAgcm91dGVyLmFsbG93UGFnZUNoYW5nZSA9IHRydWU7XG4gICAgcmV0dXJuIHJvdXRlcjtcbiAgfVxuXG4gIC8vIFByb2NlZWRcbiAgaWYgKGNvbnRlbnQpIHtcbiAgICByb3V0ZXIuZm9yd2FyZChyb3V0ZXIuZ2V0UGFnZUVsKGNvbnRlbnQpLCBvcHRpb25zKTtcbiAgfSBlbHNlIGlmICh0ZW1wbGF0ZSB8fCB0ZW1wbGF0ZVVybCkge1xuICAgIC8vIFBhcnNlIHRlbXBsYXRlIGFuZCBzZW5kIHBhZ2UgZWxlbWVudFxuICAgIHRyeSB7XG4gICAgICByb3V0ZXIucGFnZVRlbXBsYXRlTG9hZGVyKHRlbXBsYXRlLCB0ZW1wbGF0ZVVybCwgb3B0aW9ucywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJvdXRlci5hbGxvd1BhZ2VDaGFuZ2UgPSB0cnVlO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfSBlbHNlIGlmIChlbCkge1xuICAgIC8vIExvYWQgcGFnZSBmcm9tIHNwZWNpZmllZCBIVE1MRWxlbWVudCBvciBieSBwYWdlIG5hbWUgaW4gcGFnZXMgY29udGFpbmVyXG4gICAgcm91dGVyLmZvcndhcmQocm91dGVyLmdldFBhZ2VFbChlbCksIG9wdGlvbnMpO1xuICB9IGVsc2UgaWYgKG5hbWUpIHtcbiAgICAvLyBMb2FkIHBhZ2UgYnkgcGFnZSBuYW1lIGluIHBhZ2VzIGNvbnRhaW5lclxuICAgIHJvdXRlci5mb3J3YXJkKHJvdXRlci4kZWwuY2hpbGRyZW4oYC5wYWdlW2RhdGEtbmFtZT1cIiR7bmFtZX1cIl1gKS5lcSgwKSwgb3B0aW9ucyk7XG4gIH0gZWxzZSBpZiAoY29tcG9uZW50IHx8IGNvbXBvbmVudFVybCkge1xuICAgIC8vIExvYWQgZnJvbSBjb21wb25lbnQgKEY3L1Z1ZS9SZWFjdC8uLi4pXG4gICAgdHJ5IHtcbiAgICAgIHJvdXRlci5wYWdlQ29tcG9uZW50TG9hZGVyKHJvdXRlci5lbCwgY29tcG9uZW50LCBjb21wb25lbnRVcmwsIG9wdGlvbnMsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByb3V0ZXIuYWxsb3dQYWdlQ2hhbmdlID0gdHJ1ZTtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH0gZWxzZSBpZiAodXJsKSB7XG4gICAgLy8gTG9hZCB1c2luZyBYSFJcbiAgICBpZiAocm91dGVyLnhocikge1xuICAgICAgcm91dGVyLnhoci5hYm9ydCgpO1xuICAgICAgcm91dGVyLnhociA9IGZhbHNlO1xuICAgIH1cbiAgICByb3V0ZXIueGhyUmVxdWVzdCh1cmwsIGlnbm9yZUNhY2hlKVxuICAgICAgLnRoZW4oKHBhZ2VDb250ZW50KSA9PiB7XG4gICAgICAgIHJvdXRlci5mb3J3YXJkKHJvdXRlci5nZXRQYWdlRWwocGFnZUNvbnRlbnQpLCBvcHRpb25zKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKCkgPT4ge1xuICAgICAgICByb3V0ZXIuYWxsb3dQYWdlQ2hhbmdlID0gdHJ1ZTtcbiAgICAgIH0pO1xuICB9XG4gIHJldHVybiByb3V0ZXI7XG59XG5mdW5jdGlvbiBuYXZpZ2F0ZSh1cmwsIG5hdmlnYXRlT3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHJvdXRlciA9IHRoaXM7XG4gIGNvbnN0IGFwcCA9IHJvdXRlci5hcHA7XG4gIGlmICghcm91dGVyLnZpZXcpIHtcbiAgICBhcHAudmlld3MubWFpbi5yb3V0ZXIubmF2aWdhdGUodXJsLCBuYXZpZ2F0ZU9wdGlvbnMpO1xuICAgIHJldHVybiByb3V0ZXI7XG4gIH1cbiAgaWYgKHVybCA9PT0gJyMnIHx8IHVybCA9PT0gJycpIHtcbiAgICByZXR1cm4gcm91dGVyO1xuICB9XG5cbiAgbGV0IG5hdmlnYXRlVXJsID0gdXJsLnJlcGxhY2UoJy4vJywgJycpO1xuICBpZiAobmF2aWdhdGVVcmxbMF0gIT09ICcvJyAmJiBuYXZpZ2F0ZVVybC5pbmRleE9mKCcjJykgIT09IDApIHtcbiAgICBjb25zdCBjdXJyZW50UGF0aCA9IHJvdXRlci5jdXJyZW50Um91dGUucm91dGUucGFyZW50UGF0aCB8fCByb3V0ZXIuY3VycmVudFJvdXRlLnBhdGg7XG4gICAgbmF2aWdhdGVVcmwgPSAoKGN1cnJlbnRQYXRoIHx8ICcvJykgKyBuYXZpZ2F0ZVVybCkucmVwbGFjZSgnLy8nLCAnLycpO1xuICB9XG4gIGxldCByb3V0ZTtcbiAgaWYgKG5hdmlnYXRlT3B0aW9ucy5jcmVhdGVSb3V0ZSkge1xuICAgIHJvdXRlID0gVXRpbHMuZXh0ZW5kKHJvdXRlci5maW5kTWF0Y2hpbmdSb3V0ZShuYXZpZ2F0ZVVybCwgdHJ1ZSksIHtcbiAgICAgIHJvdXRlOiBVdGlscy5leHRlbmQoe30sIG5hdmlnYXRlT3B0aW9ucy5jcmVhdGVSb3V0ZSksXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcm91dGUgPSByb3V0ZXIuZmluZE1hdGNoaW5nUm91dGUobmF2aWdhdGVVcmwpO1xuICB9XG5cbiAgaWYgKCFyb3V0ZSkge1xuICAgIHJldHVybiByb3V0ZXI7XG4gIH1cbiAgY29uc3Qgb3B0aW9ucyA9IHt9O1xuICBpZiAocm91dGUucm91dGUub3B0aW9ucykge1xuICAgIFV0aWxzLmV4dGVuZChvcHRpb25zLCByb3V0ZS5yb3V0ZS5vcHRpb25zLCBuYXZpZ2F0ZU9wdGlvbnMsIHsgcm91dGUgfSk7XG4gIH0gZWxzZSB7XG4gICAgVXRpbHMuZXh0ZW5kKG9wdGlvbnMsIG5hdmlnYXRlT3B0aW9ucywgeyByb3V0ZSB9KTtcbiAgfVxuICAoJ3BvcHVwIHBvcG92ZXIgc2hlZXQgbG9naW5TY3JlZW4gYWN0aW9ucycpLnNwbGl0KCcgJykuZm9yRWFjaCgobW9kYWxMb2FkUHJvcCkgPT4ge1xuICAgIGlmIChyb3V0ZS5yb3V0ZVttb2RhbExvYWRQcm9wXSkge1xuICAgICAgcm91dGVyLm1vZGFsTG9hZChtb2RhbExvYWRQcm9wLCByb3V0ZSwgb3B0aW9ucyk7XG4gICAgfVxuICB9KTtcbiAgKCd1cmwgY29udGVudCBuYW1lIGVsIGNvbXBvbmVudCBjb21wb25lbnRVcmwgdGVtcGxhdGUgdGVtcGxhdGVVcmwnKS5zcGxpdCgnICcpLmZvckVhY2goKHBhZ2VMb2FkUHJvcCkgPT4ge1xuICAgIGlmIChyb3V0ZS5yb3V0ZVtwYWdlTG9hZFByb3BdKSB7XG4gICAgICByb3V0ZXIubG9hZCh7IFtwYWdlTG9hZFByb3BdOiByb3V0ZS5yb3V0ZVtwYWdlTG9hZFByb3BdIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgfSk7XG4gIC8vIEFzeW5jXG4gIGZ1bmN0aW9uIGFzeW5jUmVzb2x2ZShyZXNvbHZlUGFyYW1zLCByZXNvbHZlT3B0aW9ucykge1xuICAgIHJvdXRlci5hbGxvd1BhZ2VDaGFuZ2UgPSBmYWxzZTtcbiAgICBsZXQgcmVzb2x2ZWRBc01vZGFsID0gZmFsc2U7XG4gICAgKCdwb3B1cCBwb3BvdmVyIHNoZWV0IGxvZ2luU2NyZWVuIGFjdGlvbnMnKS5zcGxpdCgnICcpLmZvckVhY2goKG1vZGFsTG9hZFByb3ApID0+IHtcbiAgICAgIGlmIChyZXNvbHZlUGFyYW1zW21vZGFsTG9hZFByb3BdKSB7XG4gICAgICAgIHJlc29sdmVkQXNNb2RhbCA9IHRydWU7XG4gICAgICAgIGNvbnN0IG1vZGFsUm91dGUgPSBVdGlscy5leHRlbmQoe30sIHJvdXRlLCB7IHJvdXRlOiByZXNvbHZlUGFyYW1zIH0pO1xuICAgICAgICByb3V0ZXIuYWxsb3dQYWdlQ2hhbmdlID0gdHJ1ZTtcbiAgICAgICAgcm91dGVyLm1vZGFsTG9hZChtb2RhbExvYWRQcm9wLCBtb2RhbFJvdXRlLCBVdGlscy5leHRlbmQob3B0aW9ucywgcmVzb2x2ZU9wdGlvbnMpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAocmVzb2x2ZWRBc01vZGFsKSByZXR1cm47XG4gICAgcm91dGVyLmxvYWQocmVzb2x2ZVBhcmFtcywgVXRpbHMuZXh0ZW5kKG9wdGlvbnMsIHJlc29sdmVPcHRpb25zKSwgdHJ1ZSk7XG4gIH1cbiAgZnVuY3Rpb24gYXN5bmNSZWplY3QoKSB7XG4gICAgcm91dGVyLmFsbG93UGFnZUNoYW5nZSA9IHRydWU7XG4gIH1cbiAgaWYgKHJvdXRlLnJvdXRlLmFzeW5jKSB7XG4gICAgcm91dGVyLmFsbG93UGFnZUNoYW5nZSA9IGZhbHNlO1xuXG4gICAgcm91dGUucm91dGUuYXN5bmMuY2FsbChyb3V0ZXIsIGFzeW5jUmVzb2x2ZSwgYXN5bmNSZWplY3QpO1xuICB9XG4gIC8vIFJldHVyIFJvdXRlclxuICByZXR1cm4gcm91dGVyO1xufVxuXG5mdW5jdGlvbiB0YWJMb2FkKHRhYlJvdXRlLCBsb2FkT3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHJvdXRlciA9IHRoaXM7XG4gIGNvbnN0IG9wdGlvbnMgPSBVdGlscy5leHRlbmQoe1xuICAgIGFuaW1hdGU6IHJvdXRlci5wYXJhbXMuYW5pbWF0ZSxcbiAgICBwdXNoU3RhdGU6IHRydWUsXG4gICAgaGlzdG9yeTogdHJ1ZSxcbiAgICBvbjoge30sXG4gIH0sIGxvYWRPcHRpb25zKTtcblxuICBjb25zdCB7IGlnbm9yZUNhY2hlIH0gPSBvcHRpb25zO1xuICBpZiAob3B0aW9ucy5yb3V0ZSkge1xuICAgIC8vIFNldCBSb3V0ZVxuICAgIGlmIChvcHRpb25zLnJvdXRlICE9PSByb3V0ZXIuY3VycmVudFJvdXRlKSB7XG4gICAgICByb3V0ZXIuY3VycmVudFJvdXRlID0gb3B0aW9ucy5yb3V0ZTtcbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgQnJvd3NlciBIaXN0b3J5XG4gICAgaWYgKHJvdXRlci5wYXJhbXMucHVzaFN0YXRlICYmIG9wdGlvbnMucHVzaFN0YXRlICYmICFvcHRpb25zLnJlbG9hZFByZXZpb3VzKSB7XG4gICAgICBIaXN0b3J5LnJlcGxhY2UoXG4gICAgICAgIHtcbiAgICAgICAgICB1cmw6IG9wdGlvbnMucm91dGUudXJsLFxuICAgICAgICAgIHZpZXdJbmRleDogcm91dGVyLnZpZXcuaW5kZXgsXG4gICAgICAgIH0sXG4gICAgICAgIChyb3V0ZXIucGFyYW1zLnB1c2hTdGF0ZVJvb3QgfHwgJycpICsgcm91dGVyLnBhcmFtcy5wdXNoU3RhdGVTZXBhcmF0b3IgKyBvcHRpb25zLnJvdXRlLnVybCk7XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIFJvdXRlciBIaXN0b3J5XG4gICAgaWYgKG9wdGlvbnMuaGlzdG9yeSkge1xuICAgICAgcm91dGVyLmhpc3Rvcnlbcm91dGVyLmhpc3RvcnkubGVuZ3RoIC0gMV0gPSBvcHRpb25zLnJvdXRlLnVybDtcbiAgICAgIHJvdXRlci5zYXZlSGlzdG9yeSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFNob3cgVGFiXG4gIGNvbnN0IHsgJG5ld1RhYkVsLCAkb2xkVGFiRWwgfSA9IHJvdXRlci5hcHAudGFiLnNob3coYCMke3RhYlJvdXRlLmlkfWAsIG9wdGlvbnMuYW5pbWF0ZSwgb3B0aW9ucy5yb3V0ZSk7XG5cbiAgLy8gTG9hZCBUYWIgQ29udGVudFxuICBjb25zdCB7IHVybCwgY29udGVudCwgZWwsIHRlbXBsYXRlLCB0ZW1wbGF0ZVVybCwgY29tcG9uZW50LCBjb21wb25lbnRVcmwgfSA9IHRhYlJvdXRlO1xuXG4gIGZ1bmN0aW9uIG9uVGFiTG9hZGVkKCkge1xuICAgIC8vIFJlbW92ZSB0aGVtZSBlbGVtZW50c1xuICAgIHJvdXRlci5yZW1vdmVUaGVtZUVsZW1lbnRzKCRuZXdUYWJFbCk7XG5cbiAgICAkbmV3VGFiRWwudHJpZ2dlcigndGFiOmluaXQgdGFiOm1vdW50ZWQnLCB0YWJSb3V0ZSk7XG4gICAgcm91dGVyLmVtaXQoJ3RhYkluaXQgdGFiTW91bnRlZCcsICRuZXdUYWJFbFswXSwgdGFiUm91dGUpO1xuICAgIGlmICgkb2xkVGFiRWwpIHtcbiAgICAgIHJvdXRlci50YWJSZW1vdmUoJG9sZFRhYkVsLCAkbmV3VGFiRWwsIHRhYlJvdXRlKTtcbiAgICB9XG4gIH1cblxuICAvLyBDb21wb25lbnQvVGVtcGxhdGUgQ2FsbGJhY2tzXG4gIGZ1bmN0aW9uIHJlc29sdmUoY29udGVudEVsKSB7XG4gICAgaWYgKGNvbnRlbnRFbCkge1xuICAgICAgaWYgKHR5cGVvZiBjb250ZW50RWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICRuZXdUYWJFbC5odG1sKGNvbnRlbnRFbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkbmV3VGFiRWwuaHRtbCgnJyk7XG4gICAgICAgIGlmIChjb250ZW50RWwuZjdDb21wb25lbnQpIHtcbiAgICAgICAgICBjb250ZW50RWwuZjdDb21wb25lbnQubW91bnQoKGNvbXBvbmVudEVsKSA9PiB7XG4gICAgICAgICAgICAkbmV3VGFiRWwuYXBwZW5kKGNvbXBvbmVudEVsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkbmV3VGFiRWwuYXBwZW5kKGNvbnRlbnRFbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG9uVGFiTG9hZGVkKCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHJlamVjdCgpIHtcbiAgICByb3V0ZXIuYWxsb3dQYWdlQ2hhbmdlID0gdHJ1ZTtcbiAgICByZXR1cm4gcm91dGVyO1xuICB9XG5cbiAgaWYgKGNvbnRlbnQpIHtcbiAgICAkbmV3VGFiRWwuaHRtbChjb250ZW50KTtcbiAgICBvblRhYkxvYWRlZCgpO1xuICB9IGVsc2UgaWYgKHRlbXBsYXRlIHx8IHRlbXBsYXRlVXJsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJvdXRlci50YWJUZW1wbGF0ZUxvYWRlcih0ZW1wbGF0ZSwgdGVtcGxhdGVVcmwsIG9wdGlvbnMsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByb3V0ZXIuYWxsb3dQYWdlQ2hhbmdlID0gdHJ1ZTtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZWwpIHtcbiAgICAkbmV3VGFiRWwuaHRtbCgnJyk7XG4gICAgJG5ld1RhYkVsLmFwcGVuZChlbCk7XG4gICAgb25UYWJMb2FkZWQoKTtcbiAgfSBlbHNlIGlmIChjb21wb25lbnQgfHwgY29tcG9uZW50VXJsKSB7XG4gICAgLy8gTG9hZCBmcm9tIGNvbXBvbmVudCAoRjcvVnVlL1JlYWN0Ly4uLilcbiAgICB0cnkge1xuICAgICAgcm91dGVyLnRhYkNvbXBvbmVudExvYWRlcigkbmV3VGFiRWxbMF0sIGNvbXBvbmVudCwgY29tcG9uZW50VXJsLCBvcHRpb25zLCByZXNvbHZlLCByZWplY3QpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcm91dGVyLmFsbG93UGFnZUNoYW5nZSA9IHRydWU7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHVybCkge1xuICAgIC8vIExvYWQgdXNpbmcgWEhSXG4gICAgaWYgKHJvdXRlci54aHIpIHtcbiAgICAgIHJvdXRlci54aHIuYWJvcnQoKTtcbiAgICAgIHJvdXRlci54aHIgPSBmYWxzZTtcbiAgICB9XG4gICAgcm91dGVyLnhoclJlcXVlc3QodXJsLCBpZ25vcmVDYWNoZSlcbiAgICAgIC50aGVuKCh0YWJDb250ZW50KSA9PiB7XG4gICAgICAgICRuZXdUYWJFbC5odG1sKHRhYkNvbnRlbnQpO1xuICAgICAgICBvblRhYkxvYWRlZCgpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgIHJvdXRlci5hbGxvd1BhZ2VDaGFuZ2UgPSB0cnVlO1xuICAgICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHRhYlJlbW92ZSgkb2xkVGFiRWwsICRuZXdUYWJFbCwgdGFiUm91dGUpIHtcbiAgY29uc3Qgcm91dGVyID0gdGhpcztcbiAgJG9sZFRhYkVsLnRyaWdnZXIoJ3RhYjpiZWZvcmVyZW1vdmUnLCB0YWJSb3V0ZSk7XG4gIHJvdXRlci5lbWl0KCd0YWJCZWZvcmVSZW1vdmUnLCAkb2xkVGFiRWxbMF0sICRuZXdUYWJFbFswXSwgdGFiUm91dGUpO1xuICAkb2xkVGFiRWwuY2hpbGRyZW4oKS5lYWNoKChpbmRleCwgdGFiQ2hpbGQpID0+IHtcbiAgICBpZiAodGFiQ2hpbGQuZjdDb21wb25lbnQpIHtcbiAgICAgIHRhYkNoaWxkLmY3Q29tcG9uZW50LmRlc3Ryb3koKTtcbiAgICB9XG4gIH0pO1xuICAkb2xkVGFiRWwuaHRtbCgnJyk7XG59XG5cbmZ1bmN0aW9uIG1vZGFsTG9hZChtb2RhbFR5cGUsIHJvdXRlLCBsb2FkT3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHJvdXRlciA9IHRoaXM7XG4gIGNvbnN0IGFwcCA9IHJvdXRlci5hcHA7XG4gIGNvbnN0IG9wdGlvbnMgPSBVdGlscy5leHRlbmQoe1xuICAgIGFuaW1hdGU6IHJvdXRlci5wYXJhbXMuYW5pbWF0ZSxcbiAgICBwdXNoU3RhdGU6IHRydWUsXG4gICAgaGlzdG9yeTogdHJ1ZSxcbiAgICBvbjoge30sXG4gIH0sIGxvYWRPcHRpb25zKTtcblxuICBjb25zdCBtb2RhbFBhcmFtcyA9IHJvdXRlLnJvdXRlW21vZGFsVHlwZV07XG4gIGNvbnN0IG1vZGFsUm91dGUgPSByb3V0ZS5yb3V0ZTtcblxuICBjb25zdCB7IGlnbm9yZUNhY2hlIH0gPSBvcHRpb25zO1xuXG4gIC8vIExvYWQgTW9kYWwgUHJvcHNcbiAgY29uc3QgeyB1cmwsIHRlbXBsYXRlLCB0ZW1wbGF0ZVVybCwgY29tcG9uZW50LCBjb21wb25lbnRVcmwgfSA9IG1vZGFsUGFyYW1zO1xuXG4gIGZ1bmN0aW9uIG9uTW9kYWxMb2FkZWQoKSB7XG4gICAgLy8gQ3JlYXRlIE1vZGFsXG4gICAgY29uc3QgbW9kYWwgPSBhcHBbbW9kYWxUeXBlXS5jcmVhdGUobW9kYWxQYXJhbXMpO1xuICAgIG1vZGFsUm91dGUubW9kYWxJbnN0YW5jZSA9IG1vZGFsO1xuXG4gICAgZnVuY3Rpb24gY2xvc2VPblN3aXBlQmFjaygpIHtcbiAgICAgIG1vZGFsLmNsb3NlKCk7XG4gICAgfVxuICAgIG1vZGFsLm9uKCdtb2RhbE9wZW4nLCAoKSA9PiB7XG4gICAgICByb3V0ZXIub25jZSgnc3dpcGVCYWNrTW92ZScsIGNsb3NlT25Td2lwZUJhY2spO1xuICAgIH0pO1xuICAgIG1vZGFsLm9uKCdtb2RhbENsb3NlJywgKCkgPT4ge1xuICAgICAgcm91dGVyLm9mZignc3dpcGVCYWNrTW92ZScsIGNsb3NlT25Td2lwZUJhY2spO1xuICAgICAgaWYgKCFtb2RhbC5jbG9zZUJ5Um91dGVyKSB7XG4gICAgICAgIHJvdXRlci5iYWNrKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBtb2RhbC5vbignbW9kYWxDbG9zZWQnLCAoKSA9PiB7XG4gICAgICBtb2RhbC4kZWwudHJpZ2dlcihgJHttb2RhbFR5cGUudG9Mb3dlckNhc2UoKX06YmVmb3JlcmVtb3ZlYCwgcm91dGUsIG1vZGFsKTtcbiAgICAgIG1vZGFsLmVtaXQoYCR7bW9kYWxUeXBlfUJlZm9yZVJlbW92ZWAsIG1vZGFsLmVsLCByb3V0ZSwgbW9kYWwpO1xuICAgICAgaWYgKG1vZGFsLmVsLmY3Q29tcG9uZW50KSB7XG4gICAgICAgIG1vZGFsLmVsLmY3Q29tcG9uZW50LmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICAgIFV0aWxzLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgbW9kYWwuZGVzdHJveSgpO1xuICAgICAgICBkZWxldGUgbW9kYWxSb3V0ZS5tb2RhbEluc3RhbmNlO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpZiAob3B0aW9ucy5yb3V0ZSkge1xuICAgICAgLy8gVXBkYXRlIEJyb3dzZXIgSGlzdG9yeVxuICAgICAgaWYgKHJvdXRlci5wYXJhbXMucHVzaFN0YXRlICYmIG9wdGlvbnMucHVzaFN0YXRlKSB7XG4gICAgICAgIEhpc3RvcnkucHVzaChcbiAgICAgICAgICB7XG4gICAgICAgICAgICB1cmw6IG9wdGlvbnMucm91dGUudXJsLFxuICAgICAgICAgICAgdmlld0luZGV4OiByb3V0ZXIudmlldy5pbmRleCxcbiAgICAgICAgICAgIG1vZGFsOiBtb2RhbFR5cGUsXG4gICAgICAgICAgfSxcbiAgICAgICAgICAocm91dGVyLnBhcmFtcy5wdXNoU3RhdGVSb290IHx8ICcnKSArIHJvdXRlci5wYXJhbXMucHVzaFN0YXRlU2VwYXJhdG9yICsgb3B0aW9ucy5yb3V0ZS51cmwpO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXQgUm91dGVcbiAgICAgIGlmIChvcHRpb25zLnJvdXRlICE9PSByb3V0ZXIuY3VycmVudFJvdXRlKSB7XG4gICAgICAgIHJvdXRlci5jdXJyZW50Um91dGUgPSBVdGlscy5leHRlbmQob3B0aW9ucy5yb3V0ZSwgeyBtb2RhbCB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gVXBkYXRlIFJvdXRlciBIaXN0b3J5XG4gICAgICBpZiAob3B0aW9ucy5oaXN0b3J5KSB7XG4gICAgICAgIHJvdXRlci5oaXN0b3J5LnB1c2gob3B0aW9ucy5yb3V0ZS51cmwpO1xuICAgICAgICByb3V0ZXIuc2F2ZUhpc3RvcnkoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgdGhlbWUgZWxlbWVudHNcbiAgICByb3V0ZXIucmVtb3ZlVGhlbWVFbGVtZW50cyhtb2RhbC5lbCk7XG5cbiAgICAvLyBFbWl0IGV2ZW50c1xuICAgIG1vZGFsLiRlbC50cmlnZ2VyKGAke21vZGFsVHlwZS50b0xvd2VyQ2FzZSgpfTppbml0ICR7bW9kYWxUeXBlLnRvTG93ZXJDYXNlKCl9Om1vdW50ZWRgLCByb3V0ZSwgbW9kYWwpO1xuICAgIHJvdXRlci5lbWl0KGAke21vZGFsVHlwZX1Jbml0ICR7bW9kYWxUeXBlfU1vdW50ZWRgLCBtb2RhbC5lbCwgcm91dGUsIG1vZGFsKTtcbiAgICAvLyBPcGVuXG4gICAgbW9kYWwub3BlbigpO1xuICB9XG5cbiAgLy8gQ29tcG9uZW50L1RlbXBsYXRlIENhbGxiYWNrc1xuICBmdW5jdGlvbiByZXNvbHZlKGNvbnRlbnRFbCkge1xuICAgIGlmIChjb250ZW50RWwpIHtcbiAgICAgIGlmICh0eXBlb2YgY29udGVudEVsID09PSAnc3RyaW5nJykge1xuICAgICAgICBtb2RhbFBhcmFtcy5jb250ZW50ID0gY29udGVudEVsO1xuICAgICAgfSBlbHNlIGlmIChjb250ZW50RWwuZjdDb21wb25lbnQpIHtcbiAgICAgICAgY29udGVudEVsLmY3Q29tcG9uZW50Lm1vdW50KChjb21wb25lbnRFbCkgPT4ge1xuICAgICAgICAgIG1vZGFsUGFyYW1zLmVsID0gY29tcG9uZW50RWw7XG4gICAgICAgICAgYXBwLnJvb3QuYXBwZW5kKGNvbXBvbmVudEVsKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtb2RhbFBhcmFtcy5lbCA9IGNvbnRlbnRFbDtcbiAgICAgIH1cbiAgICAgIG9uTW9kYWxMb2FkZWQoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gcmVqZWN0KCkge1xuICAgIHJvdXRlci5hbGxvd1BhZ2VDaGFuZ2UgPSB0cnVlO1xuICAgIHJldHVybiByb3V0ZXI7XG4gIH1cblxuICBpZiAodGVtcGxhdGUgfHwgdGVtcGxhdGVVcmwpIHtcbiAgICB0cnkge1xuICAgICAgcm91dGVyLm1vZGFsVGVtcGxhdGVMb2FkZXIodGVtcGxhdGUsIHRlbXBsYXRlVXJsLCBvcHRpb25zLCByZXNvbHZlLCByZWplY3QpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcm91dGVyLmFsbG93UGFnZUNoYW5nZSA9IHRydWU7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9IGVsc2UgaWYgKGNvbXBvbmVudCB8fCBjb21wb25lbnRVcmwpIHtcbiAgICAvLyBMb2FkIGZyb20gY29tcG9uZW50IChGNy9WdWUvUmVhY3QvLi4uKVxuICAgIHRyeSB7XG4gICAgICByb3V0ZXIubW9kYWxDb21wb25lbnRMb2FkZXIoYXBwLnJvb3RbMF0sIGNvbXBvbmVudCwgY29tcG9uZW50VXJsLCBvcHRpb25zLCByZXNvbHZlLCByZWplY3QpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcm91dGVyLmFsbG93UGFnZUNoYW5nZSA9IHRydWU7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHVybCkge1xuICAgIC8vIExvYWQgdXNpbmcgWEhSXG4gICAgaWYgKHJvdXRlci54aHIpIHtcbiAgICAgIHJvdXRlci54aHIuYWJvcnQoKTtcbiAgICAgIHJvdXRlci54aHIgPSBmYWxzZTtcbiAgICB9XG4gICAgcm91dGVyLnhoclJlcXVlc3QodXJsLCBpZ25vcmVDYWNoZSlcbiAgICAgIC50aGVuKChtb2RhbENvbnRlbnQpID0+IHtcbiAgICAgICAgbW9kYWxQYXJhbXMuY29udGVudCA9IG1vZGFsQ29udGVudDtcbiAgICAgICAgb25Nb2RhbExvYWRlZCgpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgIHJvdXRlci5hbGxvd1BhZ2VDaGFuZ2UgPSB0cnVlO1xuICAgICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb25Nb2RhbExvYWRlZCgpO1xuICB9XG59XG5mdW5jdGlvbiBtb2RhbFJlbW92ZShtb2RhbCkge1xuICBVdGlscy5leHRlbmQobW9kYWwsIHsgY2xvc2VCeVJvdXRlcjogdHJ1ZSB9KTtcbiAgbW9kYWwuY2xvc2UoKTtcbn1cblxuZnVuY3Rpb24gYmFja3dhcmQoZWwsIGJhY2t3YXJkT3B0aW9ucykge1xuICBjb25zdCByb3V0ZXIgPSB0aGlzO1xuICBjb25zdCBhcHAgPSByb3V0ZXIuYXBwO1xuICBjb25zdCB2aWV3ID0gcm91dGVyLnZpZXc7XG5cbiAgY29uc3Qgb3B0aW9ucyA9IFV0aWxzLmV4dGVuZCh7XG4gICAgYW5pbWF0ZTogcm91dGVyLnBhcmFtcy5hbmltYXRlLFxuICAgIHB1c2hTdGF0ZTogdHJ1ZSxcbiAgfSwgYmFja3dhcmRPcHRpb25zKTtcblxuICBjb25zdCBkeW5hbWljTmF2YmFyID0gcm91dGVyLmR5bmFtaWNOYXZiYXI7XG4gIGNvbnN0IHNlcGFyYXRlTmF2YmFyID0gcm91dGVyLnNlcGFyYXRlTmF2YmFyO1xuXG4gIGNvbnN0ICRuZXdQYWdlID0gJChlbCk7XG4gIGNvbnN0ICRvbGRQYWdlID0gcm91dGVyLiRlbC5jaGlsZHJlbignLnBhZ2UtY3VycmVudCcpO1xuXG4gIGlmICgkbmV3UGFnZS5sZW5ndGgpIHtcbiAgICAvLyBSZW1vdmUgdGhlbWUgZWxlbWVudHNcbiAgICByb3V0ZXIucmVtb3ZlVGhlbWVFbGVtZW50cygkbmV3UGFnZSk7XG4gIH1cblxuICBsZXQgJG5hdmJhckVsO1xuICBsZXQgJG5ld05hdmJhcklubmVyO1xuICBsZXQgJG9sZE5hdmJhcklubmVyO1xuXG4gIGlmIChkeW5hbWljTmF2YmFyKSB7XG4gICAgJG5ld05hdmJhcklubmVyID0gJG5ld1BhZ2UuY2hpbGRyZW4oJy5uYXZiYXInKS5jaGlsZHJlbignLm5hdmJhci1pbm5lcicpO1xuICAgIGlmIChzZXBhcmF0ZU5hdmJhcikge1xuICAgICAgJG5hdmJhckVsID0gcm91dGVyLiRuYXZiYXJFbDtcbiAgICAgIGlmICgkbmV3TmF2YmFySW5uZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAkbmV3UGFnZS5jaGlsZHJlbignLm5hdmJhcicpLnJlbW92ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKCRuZXdOYXZiYXJJbm5lci5sZW5ndGggPT09IDAgJiYgJG5ld1BhZ2VbMF0uZjdQYWdlKSB7XG4gICAgICAgIC8vIFRyeSBmcm9tIHBhZ2VEYXRhXG4gICAgICAgICRuZXdOYXZiYXJJbm5lciA9ICRuZXdQYWdlWzBdLmY3UGFnZS4kbmF2YmFyRWw7XG4gICAgICB9XG4gICAgICAkb2xkTmF2YmFySW5uZXIgPSAkbmF2YmFyRWwuZmluZCgnLm5hdmJhci1jdXJyZW50Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICRvbGROYXZiYXJJbm5lciA9ICRvbGRQYWdlLmNoaWxkcmVuKCcubmF2YmFyJykuY2hpbGRyZW4oJy5uYXZiYXItaW5uZXInKTtcbiAgICB9XG4gIH1cblxuICByb3V0ZXIuYWxsb3dQYWdlQ2hhbmdlID0gZmFsc2U7XG4gIGlmICgkbmV3UGFnZS5sZW5ndGggPT09IDAgfHwgJG9sZFBhZ2UubGVuZ3RoID09PSAwKSB7XG4gICAgcm91dGVyLmFsbG93UGFnZUNoYW5nZSA9IHRydWU7XG4gICAgcmV0dXJuIHJvdXRlcjtcbiAgfVxuXG4gIC8vIFJlbW92ZSB0aGVtZSBlbGVtZW50c1xuICByb3V0ZXIucmVtb3ZlVGhlbWVFbGVtZW50cygkbmV3UGFnZSk7XG5cbiAgLy8gTmV3IFBhZ2VcbiAgJG5ld1BhZ2VcbiAgICAuYWRkQ2xhc3MoJ3BhZ2UtcHJldmlvdXMnKVxuICAgIC5yZW1vdmVDbGFzcygnc3RhY2tlZCcpO1xuXG4gIGlmIChkeW5hbWljTmF2YmFyICYmICRuZXdOYXZiYXJJbm5lci5sZW5ndGggPiAwKSB7XG4gICAgJG5ld05hdmJhcklubmVyXG4gICAgICAuYWRkQ2xhc3MoJ25hdmJhci1wcmV2aW91cycpXG4gICAgICAucmVtb3ZlQ2xhc3MoJ3N0YWNrZWQnKTtcbiAgfVxuXG5cbiAgLy8gUmVtb3ZlIHByZXZpb3VzIHBhZ2UgaW4gY2FzZSBvZiBcImZvcmNlZFwiXG4gIGxldCBiYWNrSW5kZXg7XG4gIGlmIChvcHRpb25zLmZvcmNlKSB7XG4gICAgaWYgKCRvbGRQYWdlLnByZXYoJy5wYWdlLXByZXZpb3VzOm5vdCguc3RhY2tlZCknKS5sZW5ndGggPiAwIHx8ICRvbGRQYWdlLnByZXYoJy5wYWdlLXByZXZpb3VzJykubGVuZ3RoID09PSAwKSB7XG4gICAgICBpZiAocm91dGVyLmhpc3RvcnkuaW5kZXhPZihvcHRpb25zLnJvdXRlLnVybCkgPj0gMCkge1xuICAgICAgICBiYWNrSW5kZXggPSByb3V0ZXIuaGlzdG9yeS5sZW5ndGggLSByb3V0ZXIuaGlzdG9yeS5pbmRleE9mKG9wdGlvbnMucm91dGUudXJsKSAtIDE7XG4gICAgICAgIHJvdXRlci5oaXN0b3J5ID0gcm91dGVyLmhpc3Rvcnkuc2xpY2UoMCwgcm91dGVyLmhpc3RvcnkuaW5kZXhPZihvcHRpb25zLnJvdXRlLnVybCkgKyAyKTtcbiAgICAgICAgdmlldy5oaXN0b3J5ID0gcm91dGVyLmhpc3Rvcnk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocm91dGVyLmhpc3RvcnlbW3JvdXRlci5oaXN0b3J5Lmxlbmd0aCAtIDJdXSkge1xuICAgICAgICAgIHJvdXRlci5oaXN0b3J5W3JvdXRlci5oaXN0b3J5Lmxlbmd0aCAtIDJdID0gb3B0aW9ucy5yb3V0ZS51cmw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm91dGVyLmhpc3RvcnkudW5zaGlmdChyb3V0ZXIudXJsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYmFja0luZGV4ICYmIHJvdXRlci5wYXJhbXMuc3RhY2tQYWdlcykge1xuICAgICAgICAkb2xkUGFnZS5wcmV2QWxsKCcucGFnZS1wcmV2aW91cycpLmVhY2goKGluZGV4LCBwYWdlVG9SZW1vdmUpID0+IHtcbiAgICAgICAgICBjb25zdCAkcGFnZVRvUmVtb3ZlID0gJChwYWdlVG9SZW1vdmUpO1xuICAgICAgICAgIGxldCAkbmF2YmFyVG9SZW1vdmU7XG4gICAgICAgICAgaWYgKHNlcGFyYXRlTmF2YmFyKSB7XG4gICAgICAgICAgICAvLyAkbmF2YmFyVG9SZW1vdmUgPSAkb2xkTmF2YmFySW5uZXIucHJldkFsbCgnLm5hdmJhci1wcmV2aW91cycpLmVxKGluZGV4KTtcbiAgICAgICAgICAgICRuYXZiYXJUb1JlbW92ZSA9ICQoYXBwLm5hdmJhci5nZXRFbEJ5UGFnZSgkcGFnZVRvUmVtb3ZlKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgkcGFnZVRvUmVtb3ZlWzBdICE9PSAkbmV3UGFnZVswXSAmJiAkcGFnZVRvUmVtb3ZlLmluZGV4KCkgPiAkbmV3UGFnZS5pbmRleCgpKSB7XG4gICAgICAgICAgICBpZiAocm91dGVyLmluaXRpYWxQYWdlcy5pbmRleE9mKCRwYWdlVG9SZW1vdmVbMF0pID49IDApIHtcbiAgICAgICAgICAgICAgJHBhZ2VUb1JlbW92ZS5hZGRDbGFzcygnc3RhY2tlZCcpO1xuICAgICAgICAgICAgICBpZiAoc2VwYXJhdGVOYXZiYXIpIHtcbiAgICAgICAgICAgICAgICAkbmF2YmFyVG9SZW1vdmUuYWRkQ2xhc3MoJ3N0YWNrZWQnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcm91dGVyLnBhZ2VDYWxsYmFjaygnYmVmb3JlUmVtb3ZlJywgJHBhZ2VUb1JlbW92ZSwgJG5hdmJhclRvUmVtb3ZlLCAncHJldmlvdXMnLCB1bmRlZmluZWQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICByb3V0ZXIucmVtb3ZlRWwoJHBhZ2VUb1JlbW92ZSk7XG4gICAgICAgICAgICAgIGlmIChzZXBhcmF0ZU5hdmJhciAmJiAkbmF2YmFyVG9SZW1vdmUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHJvdXRlci5yZW1vdmVFbCgkbmF2YmFyVG9SZW1vdmUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0ICRwYWdlVG9SZW1vdmUgPSAkb2xkUGFnZS5wcmV2KCcucGFnZS1wcmV2aW91czpub3QoLnN0YWNrZWQpJyk7XG4gICAgICAgIGxldCAkbmF2YmFyVG9SZW1vdmU7XG4gICAgICAgIGlmIChzZXBhcmF0ZU5hdmJhcikge1xuICAgICAgICAgIC8vICRuYXZiYXJUb1JlbW92ZSA9ICRvbGROYXZiYXJJbm5lci5wcmV2KCcubmF2YmFyLWlubmVyOm5vdCguc3RhY2tlZCknKTtcbiAgICAgICAgICAkbmF2YmFyVG9SZW1vdmUgPSAkKGFwcC5uYXZiYXIuZ2V0RWxCeVBhZ2UoJHBhZ2VUb1JlbW92ZSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyb3V0ZXIucGFyYW1zLnN0YWNrUGFnZXMgJiYgcm91dGVyLmluaXRpYWxQYWdlcy5pbmRleE9mKCRwYWdlVG9SZW1vdmVbMF0pID49IDApIHtcbiAgICAgICAgICAkcGFnZVRvUmVtb3ZlLmFkZENsYXNzKCdzdGFja2VkJyk7XG4gICAgICAgICAgJG5hdmJhclRvUmVtb3ZlLmFkZENsYXNzKCdzdGFja2VkJyk7XG4gICAgICAgIH0gZWxzZSBpZiAoJHBhZ2VUb1JlbW92ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcm91dGVyLnBhZ2VDYWxsYmFjaygnYmVmb3JlUmVtb3ZlJywgJHBhZ2VUb1JlbW92ZSwgJG5hdmJhclRvUmVtb3ZlLCAncHJldmlvdXMnLCB1bmRlZmluZWQsIG9wdGlvbnMpO1xuICAgICAgICAgIHJvdXRlci5yZW1vdmVFbCgkcGFnZVRvUmVtb3ZlKTtcbiAgICAgICAgICBpZiAoc2VwYXJhdGVOYXZiYXIgJiYgJG5hdmJhclRvUmVtb3ZlLmxlbmd0aCkge1xuICAgICAgICAgICAgcm91dGVyLnJlbW92ZUVsKCRuYXZiYXJUb1JlbW92ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gSW5zZXJ0IG5ldyBwYWdlXG4gIGNvbnN0IG5ld1BhZ2VJbkRvbSA9ICRuZXdQYWdlLnBhcmVudHMoZG9jdW1lbnQpLmxlbmd0aCA+IDA7XG4gIGNvbnN0IGY3Q29tcG9uZW50ID0gJG5ld1BhZ2VbMF0uZjdDb21wb25lbnQ7XG5cbiAgZnVuY3Rpb24gaW5zZXJ0UGFnZSgpIHtcbiAgICBpZiAoJG5ld1BhZ2UubmV4dCgkb2xkUGFnZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICBpZiAoIW5ld1BhZ2VJbkRvbSAmJiBmN0NvbXBvbmVudCkge1xuICAgICAgICBmN0NvbXBvbmVudC5tb3VudCgoY29tcG9uZW50RWwpID0+IHtcbiAgICAgICAgICAkKGNvbXBvbmVudEVsKS5pbnNlcnRCZWZvcmUoJG9sZFBhZ2UpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRuZXdQYWdlLmluc2VydEJlZm9yZSgkb2xkUGFnZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzZXBhcmF0ZU5hdmJhciAmJiAkbmV3TmF2YmFySW5uZXIubGVuZ3RoKSB7XG4gICAgICAkbmV3TmF2YmFySW5uZXIuaW5zZXJ0QmVmb3JlKCRvbGROYXZiYXJJbm5lcik7XG4gICAgICBpZiAoJG9sZE5hdmJhcklubmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgJG5ld05hdmJhcklubmVyLmluc2VydEJlZm9yZSgkb2xkTmF2YmFySW5uZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJG5hdmJhckVsLmFwcGVuZCgkbmV3TmF2YmFySW5uZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIW5ld1BhZ2VJbkRvbSkge1xuICAgICAgcm91dGVyLnBhZ2VDYWxsYmFjaygnbW91bnRlZCcsICRuZXdQYWdlLCAkbmV3TmF2YmFySW5uZXIsICdwcmV2aW91cycsICdjdXJyZW50Jywgb3B0aW9ucywgJG9sZFBhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChvcHRpb25zLnByZWxvYWQpIHtcbiAgICAvLyBJbnNlcnQgUGFnZVxuICAgIGluc2VydFBhZ2UoKTtcbiAgICAvLyBQYWdlIGluaXQgYW5kIGJlZm9yZSBpbml0IGV2ZW50c1xuICAgIHJvdXRlci5wYWdlQ2FsbGJhY2soJ2luaXQnLCAkbmV3UGFnZSwgJG5ld05hdmJhcklubmVyLCAncHJldmlvdXMnLCAnY3VycmVudCcsIG9wdGlvbnMsICRvbGRQYWdlKTtcbiAgICBpZiAoJG5ld1BhZ2UucHJldkFsbCgnLnBhZ2UtcHJldmlvdXM6bm90KC5zdGFja2VkKScpLmxlbmd0aCA+IDApIHtcbiAgICAgICRuZXdQYWdlLnByZXZBbGwoJy5wYWdlLXByZXZpb3VzOm5vdCguc3RhY2tlZCknKS5lYWNoKChpbmRleCwgcGFnZVRvUmVtb3ZlKSA9PiB7XG4gICAgICAgIGNvbnN0ICRwYWdlVG9SZW1vdmUgPSAkKHBhZ2VUb1JlbW92ZSk7XG4gICAgICAgIGxldCAkbmF2YmFyVG9SZW1vdmU7XG4gICAgICAgIGlmIChzZXBhcmF0ZU5hdmJhcikge1xuICAgICAgICAgIC8vICRuYXZiYXJUb1JlbW92ZSA9ICRuZXdOYXZiYXJJbm5lci5wcmV2QWxsKCcubmF2YmFyLXByZXZpb3VzOm5vdCguc3RhY2tlZCknKS5lcShpbmRleCk7XG4gICAgICAgICAgJG5hdmJhclRvUmVtb3ZlID0gJChhcHAubmF2YmFyLmdldEVsQnlQYWdlKCRwYWdlVG9SZW1vdmUpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocm91dGVyLnBhcmFtcy5zdGFja1BhZ2VzICYmIHJvdXRlci5pbml0aWFsUGFnZXMuaW5kZXhPZihwYWdlVG9SZW1vdmUpID49IDApIHtcbiAgICAgICAgICAkcGFnZVRvUmVtb3ZlLmFkZENsYXNzKCdzdGFja2VkJyk7XG4gICAgICAgICAgaWYgKHNlcGFyYXRlTmF2YmFyKSB7XG4gICAgICAgICAgICAkbmF2YmFyVG9SZW1vdmUuYWRkQ2xhc3MoJ3N0YWNrZWQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm91dGVyLnBhZ2VDYWxsYmFjaygnYmVmb3JlUmVtb3ZlJywgJHBhZ2VUb1JlbW92ZSwgJG5hdmJhclRvUmVtb3ZlLCAncHJldmlvdXMnLCB1bmRlZmluZWQpO1xuICAgICAgICAgIHJvdXRlci5yZW1vdmVFbCgkcGFnZVRvUmVtb3ZlKTtcbiAgICAgICAgICBpZiAoc2VwYXJhdGVOYXZiYXIgJiYgJG5hdmJhclRvUmVtb3ZlLmxlbmd0aCkge1xuICAgICAgICAgICAgcm91dGVyLnJlbW92ZUVsKCRuYXZiYXJUb1JlbW92ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcm91dGVyLmFsbG93UGFnZUNoYW5nZSA9IHRydWU7XG4gICAgcmV0dXJuIHJvdXRlcjtcbiAgfVxuXG4gIC8vIEhpc3RvcnkgU3RhdGVcbiAgaWYgKHJvdXRlci5wYXJhbXMucHVzaFN0YXRlICYmIG9wdGlvbnMucHVzaFN0YXRlKSB7XG4gICAgaWYgKGJhY2tJbmRleCkgSGlzdG9yeS5nbygtYmFja0luZGV4KTtcbiAgICBlbHNlIEhpc3RvcnkuYmFjaygpO1xuICB9XG5cbiAgLy8gVXBkYXRlIEhpc3RvcnlcbiAgaWYgKHJvdXRlci5oaXN0b3J5Lmxlbmd0aCA9PT0gMSkge1xuICAgIHJvdXRlci5oaXN0b3J5LnVuc2hpZnQocm91dGVyLnVybCk7XG4gIH1cbiAgcm91dGVyLmhpc3RvcnkucG9wKCk7XG4gIHJvdXRlci5zYXZlSGlzdG9yeSgpO1xuXG4gIC8vIEN1cnJlbnQgUm91dGVcbiAgcm91dGVyLmN1cnJlbnRSb3V0ZSA9IG9wdGlvbnMucm91dGU7XG5cbiAgLy8gSW5zZXJ0IFBhZ2VcbiAgaW5zZXJ0UGFnZSgpO1xuXG4gIC8vIExvYWQgVGFiXG4gIGlmIChvcHRpb25zLnJvdXRlLnJvdXRlLnRhYikge1xuICAgIHJvdXRlci50YWJMb2FkKG9wdGlvbnMucm91dGUucm91dGUudGFiLCBVdGlscy5leHRlbmQoe30sIG9wdGlvbnMsIHtcbiAgICAgIGhpc3Rvcnk6IGZhbHNlLFxuICAgICAgcHVzaFN0YXRlOiBmYWxzZSxcbiAgICB9KSk7XG4gIH1cblxuICAvLyBQYWdlIGluaXQgYW5kIGJlZm9yZSBpbml0IGV2ZW50c1xuICByb3V0ZXIucGFnZUNhbGxiYWNrKCdpbml0JywgJG5ld1BhZ2UsICRuZXdOYXZiYXJJbm5lciwgJ3ByZXZpb3VzJywgJ2N1cnJlbnQnLCBvcHRpb25zLCAkb2xkUGFnZSk7XG5cbiAgLy8gQmVmb3JlIGFuaW1hdGlvbiBjYWxsYmFja1xuICByb3V0ZXIucGFnZUNhbGxiYWNrKCdiZWZvcmVJbicsICRuZXdQYWdlLCAkbmV3TmF2YmFySW5uZXIsICdwcmV2aW91cycsICdjdXJyZW50Jywgb3B0aW9ucyk7XG4gIHJvdXRlci5wYWdlQ2FsbGJhY2soJ2JlZm9yZU91dCcsICRvbGRQYWdlLCAkb2xkTmF2YmFySW5uZXIsICdjdXJyZW50JywgJ25leHQnLCBvcHRpb25zKTtcblxuICAvLyBBbmltYXRpb25cbiAgZnVuY3Rpb24gYWZ0ZXJBbmltYXRpb24oKSB7XG4gICAgLy8gU2V0IGNsYXNzZXNcbiAgICBjb25zdCBwYWdlQ2xhc3NlcyA9ICdwYWdlLXByZXZpb3VzIHBhZ2UtY3VycmVudCBwYWdlLW5leHQnO1xuICAgIGNvbnN0IG5hdmJhckNsYXNzZXMgPSAnbmF2YmFyLXByZXZpb3VzIG5hdmJhci1jdXJyZW50IG5hdmJhci1uZXh0JztcbiAgICAkbmV3UGFnZS5yZW1vdmVDbGFzcyhwYWdlQ2xhc3NlcykuYWRkQ2xhc3MoJ3BhZ2UtY3VycmVudCcpO1xuICAgICRvbGRQYWdlLnJlbW92ZUNsYXNzKHBhZ2VDbGFzc2VzKS5hZGRDbGFzcygncGFnZS1uZXh0Jyk7XG4gICAgaWYgKGR5bmFtaWNOYXZiYXIpIHtcbiAgICAgICRuZXdOYXZiYXJJbm5lci5yZW1vdmVDbGFzcyhuYXZiYXJDbGFzc2VzKS5hZGRDbGFzcygnbmF2YmFyLWN1cnJlbnQnKTtcbiAgICAgICRvbGROYXZiYXJJbm5lci5yZW1vdmVDbGFzcyhuYXZiYXJDbGFzc2VzKS5hZGRDbGFzcygnbmF2YmFyLW5leHQnKTtcbiAgICB9XG5cbiAgICAvLyBBZnRlciBhbmltYXRpb24gZXZlbnRcbiAgICByb3V0ZXIucGFnZUNhbGxiYWNrKCdhZnRlckluJywgJG5ld1BhZ2UsICRuZXdOYXZiYXJJbm5lciwgJ3ByZXZpb3VzJywgJ2N1cnJlbnQnLCBvcHRpb25zKTtcbiAgICByb3V0ZXIucGFnZUNhbGxiYWNrKCdhZnRlck91dCcsICRvbGRQYWdlLCAkb2xkTmF2YmFySW5uZXIsICdjdXJyZW50JywgJ25leHQnLCBvcHRpb25zKTtcblxuICAgIC8vIFJlbW92ZSBPbGQgUGFnZVxuICAgIGlmIChyb3V0ZXIucGFyYW1zLnN0YWNrUGFnZXMgJiYgcm91dGVyLmluaXRpYWxQYWdlcy5pbmRleE9mKCRvbGRQYWdlWzBdKSA+PSAwKSB7XG4gICAgICAkb2xkUGFnZS5hZGRDbGFzcygnc3RhY2tlZCcpO1xuICAgICAgaWYgKHNlcGFyYXRlTmF2YmFyKSB7XG4gICAgICAgICRvbGROYXZiYXJJbm5lci5hZGRDbGFzcygnc3RhY2tlZCcpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByb3V0ZXIucGFnZUNhbGxiYWNrKCdiZWZvcmVSZW1vdmUnLCAkb2xkUGFnZSwgJG9sZE5hdmJhcklubmVyLCAnbmV4dCcsIHVuZGVmaW5lZCwgb3B0aW9ucyk7XG4gICAgICByb3V0ZXIucmVtb3ZlRWwoJG9sZFBhZ2UpO1xuICAgICAgaWYgKHNlcGFyYXRlTmF2YmFyICYmICRvbGROYXZiYXJJbm5lci5sZW5ndGgpIHtcbiAgICAgICAgcm91dGVyLnJlbW92ZUVsKCRvbGROYXZiYXJJbm5lcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcm91dGVyLmFsbG93UGFnZUNoYW5nZSA9IHRydWU7XG4gICAgcm91dGVyLmVtaXQoJ3JvdXRlQ2hhbmdlZCcsIHJvdXRlci5jdXJyZW50Um91dGUsIHJvdXRlci5wcmV2aW91c1JvdXRlLCByb3V0ZXIpO1xuXG4gICAgLy8gUHJlbG9hZCBwcmV2aW91cyBwYWdlXG4gICAgY29uc3QgcHJlbG9hZFByZXZpb3VzUGFnZSA9IGFwcC50aGVtZSA9PT0gJ2lvcycgPyAocm91dGVyLnBhcmFtcy5wcmVsb2FkUHJldmlvdXNQYWdlIHx8IHJvdXRlci5wYXJhbXMuaW9zU3dpcGVCYWNrKSA6IHJvdXRlci5wYXJhbXMucHJlbG9hZFByZXZpb3VzUGFnZTtcbiAgICBpZiAocHJlbG9hZFByZXZpb3VzUGFnZSkge1xuICAgICAgcm91dGVyLmJhY2socm91dGVyLmhpc3Rvcnlbcm91dGVyLmhpc3RvcnkubGVuZ3RoIC0gMl0sIHsgcHJlbG9hZDogdHJ1ZSB9KTtcbiAgICB9XG4gICAgaWYgKHJvdXRlci5wYXJhbXMucHVzaFN0YXRlKSB7XG4gICAgICBIaXN0b3J5LmNsZWFyUm91dGVyUXVldWUoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRQb3NpdGlvbkNsYXNzZXMoKSB7XG4gICAgY29uc3QgcGFnZUNsYXNzZXMgPSAncGFnZS1wcmV2aW91cyBwYWdlLWN1cnJlbnQgcGFnZS1uZXh0JztcbiAgICBjb25zdCBuYXZiYXJDbGFzc2VzID0gJ25hdmJhci1wcmV2aW91cyBuYXZiYXItY3VycmVudCBuYXZiYXItbmV4dCc7XG4gICAgJG9sZFBhZ2UucmVtb3ZlQ2xhc3MocGFnZUNsYXNzZXMpLmFkZENsYXNzKCdwYWdlLWN1cnJlbnQnKTtcbiAgICAkbmV3UGFnZS5yZW1vdmVDbGFzcyhwYWdlQ2xhc3NlcykuYWRkQ2xhc3MoJ3BhZ2UtcHJldmlvdXMnKTtcbiAgICBpZiAoZHluYW1pY05hdmJhcikge1xuICAgICAgJG9sZE5hdmJhcklubmVyLnJlbW92ZUNsYXNzKG5hdmJhckNsYXNzZXMpLmFkZENsYXNzKCduYXZiYXItY3VycmVudCcpO1xuICAgICAgJG5ld05hdmJhcklubmVyLnJlbW92ZUNsYXNzKG5hdmJhckNsYXNzZXMpLmFkZENsYXNzKCduYXZiYXItcHJldmlvdXMnKTtcbiAgICB9XG4gIH1cblxuICBpZiAob3B0aW9ucy5hbmltYXRlKSB7XG4gICAgc2V0UG9zaXRpb25DbGFzc2VzKCk7XG4gICAgcm91dGVyLmFuaW1hdGUoJG9sZFBhZ2UsICRuZXdQYWdlLCAkb2xkTmF2YmFySW5uZXIsICRuZXdOYXZiYXJJbm5lciwgJ2JhY2t3YXJkJywgKCkgPT4ge1xuICAgICAgYWZ0ZXJBbmltYXRpb24oKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBhZnRlckFuaW1hdGlvbigpO1xuICB9XG5cbiAgcmV0dXJuIHJvdXRlcjtcbn1cbmZ1bmN0aW9uIGxvYWRCYWNrKGJhY2tQYXJhbXMsIGJhY2tPcHRpb25zLCBpZ25vcmVQYWdlQ2hhbmdlKSB7XG4gIGNvbnN0IHJvdXRlciA9IHRoaXM7XG5cbiAgaWYgKCFyb3V0ZXIuYWxsb3dQYWdlQ2hhbmdlICYmICFpZ25vcmVQYWdlQ2hhbmdlKSByZXR1cm4gcm91dGVyO1xuICBjb25zdCBwYXJhbXMgPSBiYWNrUGFyYW1zO1xuICBjb25zdCBvcHRpb25zID0gYmFja09wdGlvbnM7XG4gIGNvbnN0IHsgdXJsLCBjb250ZW50LCBlbCwgbmFtZSwgdGVtcGxhdGUsIHRlbXBsYXRlVXJsLCBjb21wb25lbnQsIGNvbXBvbmVudFVybCB9ID0gcGFyYW1zO1xuICBjb25zdCB7IGlnbm9yZUNhY2hlIH0gPSBvcHRpb25zO1xuXG4gIGlmIChcbiAgICBvcHRpb25zLnJvdXRlLnVybCAmJlxuICAgIHJvdXRlci51cmwgPT09IG9wdGlvbnMucm91dGUudXJsICYmXG4gICAgIShvcHRpb25zLnJlbG9hZEN1cnJlbnQgfHwgb3B0aW9ucy5yZWxvYWRQcmV2aW91cykgJiZcbiAgICAhcm91dGVyLnBhcmFtcy5hbGxvd0R1cGxpY2F0ZVVybHNcbiAgICApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoIW9wdGlvbnMucm91dGUgJiYgdXJsKSB7XG4gICAgb3B0aW9ucy5yb3V0ZSA9IHJvdXRlci5maW5kTWF0Y2hpbmdSb3V0ZSh1cmwsIHRydWUpO1xuICB9XG5cbiAgLy8gQ29tcG9uZW50IENhbGxiYWNrc1xuICBmdW5jdGlvbiByZXNvbHZlKHBhZ2VFbCwgbmV3T3B0aW9ucykge1xuICAgIHJldHVybiByb3V0ZXIuYmFja3dhcmQocGFnZUVsLCBVdGlscy5leHRlbmQob3B0aW9ucywgbmV3T3B0aW9ucykpO1xuICB9XG4gIGZ1bmN0aW9uIHJlamVjdCgpIHtcbiAgICByb3V0ZXIuYWxsb3dQYWdlQ2hhbmdlID0gdHJ1ZTtcbiAgICByZXR1cm4gcm91dGVyO1xuICB9XG5cbiAgLy8gUHJvY2VlZFxuICBpZiAoY29udGVudCkge1xuICAgIHJvdXRlci5iYWNrd2FyZChyb3V0ZXIuZ2V0UGFnZUVsKGNvbnRlbnQpLCBvcHRpb25zKTtcbiAgfSBlbHNlIGlmICh0ZW1wbGF0ZSB8fCB0ZW1wbGF0ZVVybCkge1xuICAgIC8vIFBhcnNlIHRlbXBsYXRlIGFuZCBzZW5kIHBhZ2UgZWxlbWVudFxuICAgIHRyeSB7XG4gICAgICByb3V0ZXIucGFnZVRlbXBsYXRlTG9hZGVyKHRlbXBsYXRlLCB0ZW1wbGF0ZVVybCwgb3B0aW9ucywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJvdXRlci5hbGxvd1BhZ2VDaGFuZ2UgPSB0cnVlO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfSBlbHNlIGlmIChlbCkge1xuICAgIC8vIExvYWQgcGFnZSBmcm9tIHNwZWNpZmllZCBIVE1MRWxlbWVudCBvciBieSBwYWdlIG5hbWUgaW4gcGFnZXMgY29udGFpbmVyXG4gICAgcm91dGVyLmJhY2t3YXJkKHJvdXRlci5nZXRQYWdlRWwoZWwpLCBvcHRpb25zKTtcbiAgfSBlbHNlIGlmIChuYW1lKSB7XG4gICAgLy8gTG9hZCBwYWdlIGJ5IHBhZ2UgbmFtZSBpbiBwYWdlcyBjb250YWluZXJcbiAgICByb3V0ZXIuYmFja3dhcmQocm91dGVyLiRlbC5jaGlsZHJlbihgLnBhZ2VbZGF0YS1uYW1lPVwiJHtuYW1lfVwiXWApLmVxKDApLCBvcHRpb25zKTtcbiAgfSBlbHNlIGlmIChjb21wb25lbnQgfHwgY29tcG9uZW50VXJsKSB7XG4gICAgLy8gTG9hZCBmcm9tIGNvbXBvbmVudCAoRjcvVnVlL1JlYWN0Ly4uLilcbiAgICB0cnkge1xuICAgICAgcm91dGVyLnBhZ2VDb21wb25lbnRMb2FkZXIocm91dGVyLmVsLCBjb21wb25lbnQsIGNvbXBvbmVudFVybCwgb3B0aW9ucywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJvdXRlci5hbGxvd1BhZ2VDaGFuZ2UgPSB0cnVlO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfSBlbHNlIGlmICh1cmwpIHtcbiAgICAvLyBMb2FkIHVzaW5nIFhIUlxuICAgIGlmIChyb3V0ZXIueGhyKSB7XG4gICAgICByb3V0ZXIueGhyLmFib3J0KCk7XG4gICAgICByb3V0ZXIueGhyID0gZmFsc2U7XG4gICAgfVxuICAgIHJvdXRlci54aHJSZXF1ZXN0KHVybCwgaWdub3JlQ2FjaGUpXG4gICAgICAudGhlbigocGFnZUNvbnRlbnQpID0+IHtcbiAgICAgICAgcm91dGVyLmJhY2t3YXJkKHJvdXRlci5nZXRQYWdlRWwocGFnZUNvbnRlbnQpLCBvcHRpb25zKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKCkgPT4ge1xuICAgICAgICByb3V0ZXIuYWxsb3dQYWdlQ2hhbmdlID0gdHJ1ZTtcbiAgICAgIH0pO1xuICB9XG4gIHJldHVybiByb3V0ZXI7XG59XG5mdW5jdGlvbiBiYWNrKC4uLmFyZ3MpIHtcbiAgbGV0IG5hdmlnYXRlVXJsO1xuICBsZXQgbmF2aWdhdGVPcHRpb25zO1xuICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdvYmplY3QnKSB7XG4gICAgbmF2aWdhdGVPcHRpb25zID0gYXJnc1swXSB8fCB7fTtcbiAgfSBlbHNlIHtcbiAgICBuYXZpZ2F0ZVVybCA9IGFyZ3NbMF07XG4gICAgbmF2aWdhdGVPcHRpb25zID0gYXJnc1sxXSB8fCB7fTtcbiAgfVxuXG4gIGNvbnN0IHJvdXRlciA9IHRoaXM7XG4gIGNvbnN0IGFwcCA9IHJvdXRlci5hcHA7XG4gIGlmICghcm91dGVyLnZpZXcpIHtcbiAgICBhcHAudmlld3MubWFpbi5yb3V0ZXIuYmFjayhuYXZpZ2F0ZVVybCwgbmF2aWdhdGVPcHRpb25zKTtcbiAgICByZXR1cm4gcm91dGVyO1xuICB9XG5cbiAgbGV0IGN1cnJlbnRSb3V0ZUlzTW9kYWwgPSByb3V0ZXIuY3VycmVudFJvdXRlLm1vZGFsO1xuICBsZXQgbW9kYWxUeXBlO1xuICBpZiAoIWN1cnJlbnRSb3V0ZUlzTW9kYWwpIHtcbiAgICAoJ3BvcHVwIHBvcG92ZXIgc2hlZXQgbG9naW5TY3JlZW4gYWN0aW9ucycpLnNwbGl0KCcgJykuZm9yRWFjaCgobW9kYWxMb2FkUHJvcCkgPT4ge1xuICAgICAgaWYgKHJvdXRlci5jdXJyZW50Um91dGUucm91dGVbbW9kYWxMb2FkUHJvcF0pIHtcbiAgICAgICAgY3VycmVudFJvdXRlSXNNb2RhbCA9IHRydWU7XG4gICAgICAgIG1vZGFsVHlwZSA9IG1vZGFsTG9hZFByb3A7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgaWYgKGN1cnJlbnRSb3V0ZUlzTW9kYWwpIHtcbiAgICBjb25zdCBtb2RhbFRvQ2xvc2UgPSByb3V0ZXIuY3VycmVudFJvdXRlLm1vZGFsIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVyLmN1cnJlbnRSb3V0ZS5yb3V0ZS5tb2RhbEluc3RhbmNlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgYXBwW21vZGFsVHlwZV0uZ2V0KCk7XG4gICAgY29uc3QgcHJldmlvdXNVcmwgPSByb3V0ZXIuaGlzdG9yeVtyb3V0ZXIuaGlzdG9yeS5sZW5ndGggLSAyXTtcbiAgICBsZXQgcHJldmlvdXNSb3V0ZSA9IHJvdXRlci5maW5kTWF0Y2hpbmdSb3V0ZShwcmV2aW91c1VybCk7XG4gICAgaWYgKCFwcmV2aW91c1JvdXRlICYmIHByZXZpb3VzVXJsKSB7XG4gICAgICBwcmV2aW91c1JvdXRlID0ge1xuICAgICAgICB1cmw6IHByZXZpb3VzVXJsLFxuICAgICAgICBwYXRoOiBwcmV2aW91c1VybC5zcGxpdCgnPycpWzBdLFxuICAgICAgICBxdWVyeTogVXRpbHMucGFyc2VVcmxRdWVyeShwcmV2aW91c1VybCksXG4gICAgICAgIHJvdXRlOiB7XG4gICAgICAgICAgcGF0aDogcHJldmlvdXNVcmwuc3BsaXQoJz8nKVswXSxcbiAgICAgICAgICB1cmw6IHByZXZpb3VzVXJsLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKCFwcmV2aW91c1JvdXRlIHx8ICFtb2RhbFRvQ2xvc2UpIHtcbiAgICAgIHJldHVybiByb3V0ZXI7XG4gICAgfVxuICAgIGlmIChyb3V0ZXIucGFyYW1zLnB1c2hTdGF0ZSAmJiBuYXZpZ2F0ZU9wdGlvbnMucHVzaFN0YXRlICE9PSBmYWxzZSkge1xuICAgICAgSGlzdG9yeS5iYWNrKCk7XG4gICAgfVxuICAgIHJvdXRlci5jdXJyZW50Um91dGUgPSBwcmV2aW91c1JvdXRlO1xuICAgIHJvdXRlci5oaXN0b3J5LnBvcCgpO1xuICAgIHJvdXRlci5zYXZlSGlzdG9yeSgpO1xuICAgIHJvdXRlci5tb2RhbFJlbW92ZShtb2RhbFRvQ2xvc2UpO1xuICAgIHJldHVybiByb3V0ZXI7XG4gIH1cbiAgY29uc3QgJHByZXZpb3VzUGFnZSA9IHJvdXRlci4kZWwuY2hpbGRyZW4oJy5wYWdlLWN1cnJlbnQnKS5wcmV2QWxsKCcucGFnZS1wcmV2aW91cycpLmVxKDApO1xuICBpZiAoIW5hdmlnYXRlT3B0aW9ucy5mb3JjZSAmJiAkcHJldmlvdXNQYWdlLmxlbmd0aCA+IDApIHtcbiAgICBpZiAocm91dGVyLnBhcmFtcy5wdXNoU3RhdGUgJiYgJHByZXZpb3VzUGFnZVswXS5mN1BhZ2UgJiYgcm91dGVyLmhpc3Rvcnlbcm91dGVyLmhpc3RvcnkubGVuZ3RoIC0gMl0gIT09ICRwcmV2aW91c1BhZ2VbMF0uZjdQYWdlLnJvdXRlLnVybCkge1xuICAgICAgcm91dGVyLmJhY2socm91dGVyLmhpc3Rvcnlbcm91dGVyLmhpc3RvcnkubGVuZ3RoIC0gMl0sIFV0aWxzLmV4dGVuZChuYXZpZ2F0ZU9wdGlvbnMsIHsgZm9yY2U6IHRydWUgfSkpO1xuICAgICAgcmV0dXJuIHJvdXRlcjtcbiAgICB9XG4gICAgcm91dGVyLmxvYWRCYWNrKHsgZWw6ICRwcmV2aW91c1BhZ2UgfSwgVXRpbHMuZXh0ZW5kKG5hdmlnYXRlT3B0aW9ucywge1xuICAgICAgcm91dGU6ICRwcmV2aW91c1BhZ2VbMF0uZjdQYWdlLnJvdXRlLFxuICAgIH0pKTtcbiAgICByZXR1cm4gcm91dGVyO1xuICB9XG5cbiAgLy8gTmF2aWdhdGUgVVJMXG4gIGlmIChuYXZpZ2F0ZVVybCA9PT0gJyMnKSB7XG4gICAgbmF2aWdhdGVVcmwgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKG5hdmlnYXRlVXJsICYmIG5hdmlnYXRlVXJsWzBdICE9PSAnLycgJiYgbmF2aWdhdGVVcmwuaW5kZXhPZignIycpICE9PSAwKSB7XG4gICAgbmF2aWdhdGVVcmwgPSAoKHJvdXRlci5wYXRoIHx8ICcvJykgKyBuYXZpZ2F0ZVVybCkucmVwbGFjZSgnLy8nLCAnLycpO1xuICB9XG4gIGlmICghbmF2aWdhdGVVcmwgJiYgcm91dGVyLmhpc3RvcnkubGVuZ3RoID4gMSkge1xuICAgIG5hdmlnYXRlVXJsID0gcm91dGVyLmhpc3Rvcnlbcm91dGVyLmhpc3RvcnkubGVuZ3RoIC0gMl07XG4gIH1cblxuICAvLyBGaW5kIHJvdXRlIHRvIGxvYWRcbiAgbGV0IHJvdXRlID0gcm91dGVyLmZpbmRNYXRjaGluZ1JvdXRlKG5hdmlnYXRlVXJsKTtcbiAgaWYgKCFyb3V0ZSkge1xuICAgIGlmIChuYXZpZ2F0ZVVybCkge1xuICAgICAgcm91dGUgPSB7XG4gICAgICAgIHVybDogbmF2aWdhdGVVcmwsXG4gICAgICAgIHBhdGg6IG5hdmlnYXRlVXJsLnNwbGl0KCc/JylbMF0sXG4gICAgICAgIHF1ZXJ5OiBVdGlscy5wYXJzZVVybFF1ZXJ5KG5hdmlnYXRlVXJsKSxcbiAgICAgICAgcm91dGU6IHtcbiAgICAgICAgICBwYXRoOiBuYXZpZ2F0ZVVybC5zcGxpdCgnPycpWzBdLFxuICAgICAgICAgIHVybDogbmF2aWdhdGVVcmwsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICBpZiAoIXJvdXRlKSB7XG4gICAgcmV0dXJuIHJvdXRlcjtcbiAgfVxuICBjb25zdCBvcHRpb25zID0ge307XG4gIGlmIChyb3V0ZS5yb3V0ZS5vcHRpb25zKSB7XG4gICAgVXRpbHMuZXh0ZW5kKG9wdGlvbnMsIHJvdXRlLnJvdXRlLm9wdGlvbnMsIG5hdmlnYXRlT3B0aW9ucywgeyByb3V0ZSB9KTtcbiAgfSBlbHNlIHtcbiAgICBVdGlscy5leHRlbmQob3B0aW9ucywgbmF2aWdhdGVPcHRpb25zLCB7IHJvdXRlIH0pO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuZm9yY2UgJiYgcm91dGVyLnBhcmFtcy5zdGFja1BhZ2VzKSB7XG4gICAgcm91dGVyLiRlbC5jaGlsZHJlbignLnBhZ2UtcHJldmlvdXMuc3RhY2tlZCcpLmVhY2goKGluZGV4LCBwYWdlRWwpID0+IHtcbiAgICAgIGlmIChwYWdlRWwuZjdQYWdlICYmIHBhZ2VFbC5mN1BhZ2Uucm91dGUgJiYgcGFnZUVsLmY3UGFnZS5yb3V0ZS51cmwgPT09IHJvdXRlLnVybCkge1xuICAgICAgICByb3V0ZXIubG9hZEJhY2soeyBlbDogcGFnZUVsIH0sIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgKCd1cmwgY29udGVudCBuYW1lIGVsIGNvbXBvbmVudCBjb21wb25lbnRVcmwgdGVtcGxhdGUgdGVtcGxhdGVVcmwnKS5zcGxpdCgnICcpLmZvckVhY2goKHBhZ2VMb2FkUHJvcCkgPT4ge1xuICAgIGlmIChyb3V0ZS5yb3V0ZVtwYWdlTG9hZFByb3BdKSB7XG4gICAgICByb3V0ZXIubG9hZEJhY2soeyBbcGFnZUxvYWRQcm9wXTogcm91dGUucm91dGVbcGFnZUxvYWRQcm9wXSB9LCBvcHRpb25zKTtcbiAgICB9XG4gIH0pO1xuICAvLyBBc3luY1xuICBmdW5jdGlvbiBhc3luY1Jlc29sdmUocmVzb2x2ZVBhcmFtcywgcmVzb2x2ZU9wdGlvbnMpIHtcbiAgICByb3V0ZXIuYWxsb3dQYWdlQ2hhbmdlID0gZmFsc2U7XG4gICAgcm91dGVyLmxvYWRCYWNrKHJlc29sdmVQYXJhbXMsIFV0aWxzLmV4dGVuZChvcHRpb25zLCByZXNvbHZlT3B0aW9ucyksIHRydWUpO1xuICB9XG4gIGZ1bmN0aW9uIGFzeW5jUmVqZWN0KCkge1xuICAgIHJvdXRlci5hbGxvd1BhZ2VDaGFuZ2UgPSB0cnVlO1xuICB9XG4gIGlmIChyb3V0ZS5yb3V0ZS5hc3luYykge1xuICAgIHJvdXRlci5hbGxvd1BhZ2VDaGFuZ2UgPSBmYWxzZTtcblxuICAgIHJvdXRlLnJvdXRlLmFzeW5jLmNhbGwocm91dGVyLCBhc3luY1Jlc29sdmUsIGFzeW5jUmVqZWN0KTtcbiAgfVxuICAvLyBSZXR1cm4gUm91dGVyXG4gIHJldHVybiByb3V0ZXI7XG59XG5cbmNsYXNzIFJvdXRlciQxIGV4dGVuZHMgRnJhbWV3b3JrN0NsYXNzIHtcbiAgY29uc3RydWN0b3IoYXBwLCB2aWV3KSB7XG4gICAgc3VwZXIoe30sIFt0eXBlb2YgdmlldyA9PT0gJ3VuZGVmaW5lZCcgPyBhcHAgOiB2aWV3XSk7XG4gICAgY29uc3Qgcm91dGVyID0gdGhpcztcblxuICAgIC8vIElzIEFwcCBSb3V0ZXJcbiAgICByb3V0ZXIuaXNBcHBSb3V0ZXIgPSB0eXBlb2YgdmlldyA9PT0gJ3VuZGVmaW5lZCc7XG5cbiAgICBpZiAocm91dGVyLmlzQXBwUm91dGVyKSB7XG4gICAgICAvLyBBcHAgUm91dGVyXG4gICAgICBVdGlscy5leHRlbmQoZmFsc2UsIHJvdXRlciwge1xuICAgICAgICBhcHAsXG4gICAgICAgIHBhcmFtczogYXBwLnBhcmFtcy52aWV3LFxuICAgICAgICByb3V0ZXM6IGFwcC5yb3V0ZXMgfHwgW10sXG4gICAgICAgIGNhY2hlOiBhcHAuY2FjaGUsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVmlldyBSb3V0ZXJcbiAgICAgIFV0aWxzLmV4dGVuZChmYWxzZSwgcm91dGVyLCB7XG4gICAgICAgIGFwcCxcbiAgICAgICAgdmlldyxcbiAgICAgICAgcGFyYW1zOiB2aWV3LnBhcmFtcyxcbiAgICAgICAgcm91dGVzOiB2aWV3LnJvdXRlcyxcbiAgICAgICAgJGVsOiB2aWV3LiRlbCxcbiAgICAgICAgJG5hdmJhckVsOiB2aWV3LiRuYXZiYXJFbCxcbiAgICAgICAgbmF2YmFyRWw6IHZpZXcubmF2YmFyRWwsXG4gICAgICAgIGhpc3Rvcnk6IHZpZXcuaGlzdG9yeSxcbiAgICAgICAgc2Nyb2xsSGlzdG9yeTogdmlldy5zY3JvbGxIaXN0b3J5LFxuICAgICAgICBjYWNoZTogYXBwLmNhY2hlLFxuICAgICAgICBkeW5hbWljTmF2YmFyOiBhcHAudGhlbWUgPT09ICdpb3MnICYmIHZpZXcucGFyYW1zLmlvc0R5bmFtaWNOYXZiYXIsXG4gICAgICAgIHNlcGFyYXRlTmF2YmFyOiBhcHAudGhlbWUgPT09ICdpb3MnICYmIHZpZXcucGFyYW1zLmlvc0R5bmFtaWNOYXZiYXIgJiYgdmlldy5wYXJhbXMuaW9zU2VwYXJhdGVEeW5hbWljTmF2YmFyLFxuICAgICAgICBpbml0aWFsUGFnZXM6IFtdLFxuICAgICAgICBpbml0aWFsTmF2YmFyczogW10sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBJbnN0YWxsIE1vZHVsZXNcbiAgICByb3V0ZXIudXNlSW5zdGFuY2VNb2R1bGVzKCk7XG5cbiAgICAvLyBUZW1wb3JhcnkgRG9tXG4gICAgcm91dGVyLnRlbXBEb20gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIC8vIEFsbG93UGFnZUNoYWdlXG4gICAgcm91dGVyLmFsbG93UGFnZUNoYW5nZSA9IHRydWU7XG5cbiAgICAvLyBDdXJyZW50IFJvdXRlXG4gICAgbGV0IGN1cnJlbnRSb3V0ZSA9IHt9O1xuICAgIGxldCBwcmV2aW91c1JvdXRlID0ge307XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJvdXRlciwgJ2N1cnJlbnRSb3V0ZScsIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBzZXQobmV3Um91dGUgPSB7fSkge1xuICAgICAgICBwcmV2aW91c1JvdXRlID0gVXRpbHMuZXh0ZW5kKHt9LCBjdXJyZW50Um91dGUpO1xuICAgICAgICBjdXJyZW50Um91dGUgPSBuZXdSb3V0ZTtcbiAgICAgICAgaWYgKCFjdXJyZW50Um91dGUpIHJldHVybjtcbiAgICAgICAgcm91dGVyLnVybCA9IGN1cnJlbnRSb3V0ZS51cmw7XG4gICAgICAgIHJvdXRlci5lbWl0KCdyb3V0ZUNoYW5nZScsIG5ld1JvdXRlLCBwcmV2aW91c1JvdXRlLCByb3V0ZXIpO1xuICAgICAgfSxcbiAgICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRSb3V0ZTtcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJvdXRlciwgJ3ByZXZpb3VzUm91dGUnLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gcHJldmlvdXNSb3V0ZTtcbiAgICAgIH0sXG4gICAgICBzZXQobmV3Um91dGUpIHtcbiAgICAgICAgcHJldmlvdXNSb3V0ZSA9IG5ld1JvdXRlO1xuICAgICAgfSxcbiAgICB9KTtcbiAgICBVdGlscy5leHRlbmQocm91dGVyLCB7XG4gICAgICAvLyBMb2FkXG4gICAgICBmb3J3YXJkLFxuICAgICAgbG9hZCxcbiAgICAgIG5hdmlnYXRlLFxuICAgICAgLy8gVGFiXG4gICAgICB0YWJMb2FkLFxuICAgICAgdGFiUmVtb3ZlLFxuICAgICAgLy8gTW9kYWxcbiAgICAgIG1vZGFsTG9hZCxcbiAgICAgIG1vZGFsUmVtb3ZlLFxuICAgICAgLy8gQmFja1xuICAgICAgYmFja3dhcmQsXG4gICAgICBsb2FkQmFjayxcbiAgICAgIGJhY2ssXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcm91dGVyO1xuICB9XG4gIGFuaW1hdGVXaXRoQ1NTKG9sZFBhZ2UsIG5ld1BhZ2UsIG9sZE5hdmJhcklubmVyLCBuZXdOYXZiYXJJbm5lciwgZGlyZWN0aW9uLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHJvdXRlciA9IHRoaXM7XG4gICAgLy8gUm91dGVyIEFuaW1hdGlvbiBjbGFzc1xuICAgIGNvbnN0IHJvdXRlclRyYW5zaXRpb25DbGFzcyA9IGByb3V0ZXItdHJhbnNpdGlvbi0ke2RpcmVjdGlvbn0gcm91dGVyLXRyYW5zaXRpb24tY3NzLSR7ZGlyZWN0aW9ufWA7XG5cbiAgICAvLyBBbmltYXRpb25FbmQgQ2FsbGJhY2tcbiAgICAoZGlyZWN0aW9uID09PSAnZm9yd2FyZCcgPyBuZXdQYWdlIDogb2xkUGFnZSkuYW5pbWF0aW9uRW5kKCgpID0+IHtcbiAgICAgIGlmIChyb3V0ZXIuZHluYW1pY05hdmJhcikge1xuICAgICAgICBpZiAobmV3TmF2YmFySW5uZXIuaGFzQ2xhc3MoJ3NsaWRpbmcnKSkge1xuICAgICAgICAgIG5ld05hdmJhcklubmVyLmZpbmQoJy50aXRsZSwgLmxlZnQsIC5yaWdodCwgLmxlZnQgLmljb24sIC5zdWJuYXZiYXInKS50cmFuc2Zvcm0oJycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld05hdmJhcklubmVyLmZpbmQoJy5zbGlkaW5nJykudHJhbnNmb3JtKCcnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2xkTmF2YmFySW5uZXIuaGFzQ2xhc3MoJ3NsaWRpbmcnKSkge1xuICAgICAgICAgIG9sZE5hdmJhcklubmVyLmZpbmQoJy50aXRsZSwgLmxlZnQsIC5yaWdodCwgLmxlZnQgLmljb24sIC5zdWJuYXZiYXInKS50cmFuc2Zvcm0oJycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9sZE5hdmJhcklubmVyLmZpbmQoJy5zbGlkaW5nJykudHJhbnNmb3JtKCcnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcm91dGVyLiRlbC5yZW1vdmVDbGFzcyhyb3V0ZXJUcmFuc2l0aW9uQ2xhc3MpO1xuICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gcHJlcGFyZU5hdmJhcnMoKSB7XG4gICAgICBsZXQgc2xpZGluZ0VscztcbiAgICAgIGlmIChuZXdOYXZiYXJJbm5lci5oYXNDbGFzcygnc2xpZGluZycpKSB7XG4gICAgICAgIHNsaWRpbmdFbHMgPSBuZXdOYXZiYXJJbm5lci5jaGlsZHJlbignLmxlZnQsIC5yaWdodCwgLnRpdGxlLCAuc3VibmF2YmFyJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkaW5nRWxzID0gbmV3TmF2YmFySW5uZXIuZmluZCgnLnNsaWRpbmcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc2xpZGluZ0VscykgcmV0dXJuO1xuICAgICAgbGV0IG5hdmJhcldpZHRoO1xuICAgICAgaWYgKCFyb3V0ZXIuc2VwYXJhdGVOYXZiYXIpIHtcbiAgICAgICAgbmF2YmFyV2lkdGggPSBuZXdOYXZiYXJJbm5lclswXS5vZmZzZXRXaWR0aDtcbiAgICAgIH1cblxuICAgICAgbGV0IG9sZE5hdmJhclRpdGxlRWw7XG4gICAgICBpZiAob2xkTmF2YmFySW5uZXIuY2hpbGRyZW4oJy50aXRsZS5zbGlkaW5nJykubGVuZ3RoID4gMCkge1xuICAgICAgICBvbGROYXZiYXJUaXRsZUVsID0gb2xkTmF2YmFySW5uZXIuY2hpbGRyZW4oJy50aXRsZS5zbGlkaW5nJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbGROYXZiYXJUaXRsZUVsID0gb2xkTmF2YmFySW5uZXIuaGFzQ2xhc3MoJ3NsaWRpbmcnKSAmJiBvbGROYXZiYXJJbm5lci5jaGlsZHJlbignLnRpdGxlJyk7XG4gICAgICB9XG5cbiAgICAgIHNsaWRpbmdFbHMuZWFjaCgoaW5kZXgsIHNsaWRpbmdFbCkgPT4ge1xuICAgICAgICBjb25zdCAkc2xpZGluZ0VsID0gJChzbGlkaW5nRWwpO1xuICAgICAgICBjb25zdCBzbGlkaW5nT2Zmc2V0ID0gZGlyZWN0aW9uID09PSAnZm9yd2FyZCcgPyBzbGlkaW5nRWwuZjdOYXZiYXJSaWdodE9mZnNldCA6IHNsaWRpbmdFbC5mN05hdmJhckxlZnRPZmZzZXQ7XG4gICAgICAgIGlmIChyb3V0ZXIucGFyYW1zLmlvc0FuaW1hdGVOYXZiYXJCYWNrSWNvbiAmJiAkc2xpZGluZ0VsLmhhc0NsYXNzKCdsZWZ0JykgJiYgJHNsaWRpbmdFbC5maW5kKCcuYmFjayAuaWNvbicpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBsZXQgaWNvblNsaWRpbmdPZmZzZXQgPSAtc2xpZGluZ09mZnNldDtcbiAgICAgICAgICBjb25zdCBpY29uVGV4dEVsID0gJHNsaWRpbmdFbC5maW5kKCcuYmFjayBzcGFuJykuZXEoMCk7XG4gICAgICAgICAgaWYgKCFyb3V0ZXIuc2VwYXJhdGVOYXZiYXIpIHtcbiAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdmb3J3YXJkJykge1xuICAgICAgICAgICAgICBpY29uU2xpZGluZ09mZnNldCAtPSBuYXZiYXJXaWR0aDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGljb25TbGlkaW5nT2Zmc2V0ICs9IG5hdmJhcldpZHRoIC8gNTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgJHNsaWRpbmdFbC5maW5kKCcuYmFjayAuaWNvbicpLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHtpY29uU2xpZGluZ09mZnNldH1weCwwLDApYCk7XG4gICAgICAgICAgaWYgKG9sZE5hdmJhclRpdGxlRWwgJiYgaWNvblRleHRFbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBvbGROYXZiYXJUaXRsZUVsWzBdLmY3TmF2YmFyTGVmdE9mZnNldCArPSBpY29uVGV4dEVsWzBdLm9mZnNldExlZnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICRzbGlkaW5nRWwudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke3NsaWRpbmdPZmZzZXR9cHgsMCwwKWApO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFuaW1hdGVOYXZiYXJzKCkge1xuICAgICAgY29uc3QgYW5pbWF0ZUljb24gPSByb3V0ZXIucGFyYW1zLmlvc0FuaW1hdGVOYXZiYXJCYWNrSWNvbjtcblxuICAgICAgbGV0IG5hdmJhckljb25PZmZzZXQgPSAwO1xuICAgICAgbGV0IG9sZE5hdmJhcldpZHRoO1xuICAgICAgaWYgKCFyb3V0ZXIuc2VwYXJhdGVOYXZiYXIgJiYgYW5pbWF0ZUljb24pIHtcbiAgICAgICAgb2xkTmF2YmFyV2lkdGggPSBvbGROYXZiYXJJbm5lclswXS5vZmZzZXRXaWR0aDtcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2ZvcndhcmQnKSB7XG4gICAgICAgICAgbmF2YmFySWNvbk9mZnNldCA9IG9sZE5hdmJhcldpZHRoIC8gNTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuYXZiYXJJY29uT2Zmc2V0ID0gLW9sZE5hdmJhcldpZHRoO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE9sZCBOYXZiYXIgU2xpZGluZ1xuICAgICAgbGV0IG9sZE5hdmJhclNsaWRpbmdFbHM7XG4gICAgICBpZiAob2xkTmF2YmFySW5uZXIuaGFzQ2xhc3MoJ3NsaWRpbmcnKSkge1xuICAgICAgICBvbGROYXZiYXJTbGlkaW5nRWxzID0gb2xkTmF2YmFySW5uZXIuY2hpbGRyZW4oJy5sZWZ0LCAucmlnaHQsIC50aXRsZSwgLnN1Ym5hdmJhcicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2xkTmF2YmFyU2xpZGluZ0VscyA9IG9sZE5hdmJhcklubmVyLmZpbmQoJy5zbGlkaW5nJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvbGROYXZiYXJTbGlkaW5nRWxzKSB7XG4gICAgICAgIG9sZE5hdmJhclNsaWRpbmdFbHMuZWFjaCgoaW5kZXgsIHNsaWRpbmdFbCkgPT4ge1xuICAgICAgICAgIGNvbnN0ICRzbGlkaW5nRWwgPSAkKHNsaWRpbmdFbCk7XG4gICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gZGlyZWN0aW9uID09PSAnZm9yd2FyZCcgPyBzbGlkaW5nRWwuZjdOYXZiYXJMZWZ0T2Zmc2V0IDogc2xpZGluZ0VsLmY3TmF2YmFyUmlnaHRPZmZzZXQ7XG4gICAgICAgICAgJHNsaWRpbmdFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7b2Zmc2V0fXB4LDAsMClgKTtcbiAgICAgICAgICBpZiAoYW5pbWF0ZUljb24pIHtcbiAgICAgICAgICAgIGlmICgkc2xpZGluZ0VsLmhhc0NsYXNzKCdsZWZ0JykgJiYgJHNsaWRpbmdFbC5maW5kKCcuYmFjayAuaWNvbicpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgJHNsaWRpbmdFbC5maW5kKCcuYmFjayAuaWNvbicpLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHstb2Zmc2V0ICsgbmF2YmFySWNvbk9mZnNldH1weCwwLDApYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJvdXRlci5keW5hbWljTmF2YmFyKSB7XG4gICAgICAvLyBQcmVwYXJlIE5hdmJhcnNcbiAgICAgIHByZXBhcmVOYXZiYXJzKCk7XG4gICAgICBVdGlscy5uZXh0VGljaygoKSA9PiB7XG4gICAgICAgIC8vIEFkZCBjbGFzcywgc3RhcnQgYW5pbWF0aW9uXG4gICAgICAgIGFuaW1hdGVOYXZiYXJzKCk7XG4gICAgICAgIHJvdXRlci4kZWwuYWRkQ2xhc3Mocm91dGVyVHJhbnNpdGlvbkNsYXNzKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBBZGQgY2xhc3MsIHN0YXJ0IGFuaW1hdGlvblxuICAgICAgcm91dGVyLiRlbC5hZGRDbGFzcyhyb3V0ZXJUcmFuc2l0aW9uQ2xhc3MpO1xuICAgIH1cbiAgfVxuICBhbmltYXRlV2l0aEpTKG9sZFBhZ2UsIG5ld1BhZ2UsIG9sZE5hdmJhcklubmVyLCBuZXdOYXZiYXJJbm5lciwgZGlyZWN0aW9uLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHJvdXRlciA9IHRoaXM7XG4gICAgY29uc3QgZHluYW1pY05hdmJhciA9IHJvdXRlci5keW5hbWljTmF2YmFyO1xuICAgIGNvbnN0IHNlcGFyYXRlTmF2YmFyID0gcm91dGVyLnNlcGFyYXRlTmF2YmFyO1xuICAgIGNvbnN0IGFuaW1hdGVJY29uID0gcm91dGVyLnBhcmFtcy5pb3NBbmltYXRlTmF2YmFyQmFja0ljb247XG4gICAgY29uc3QgaW9zID0gcm91dGVyLmFwcC50aGVtZSA9PT0gJ2lvcyc7XG4gICAgY29uc3QgZHVyYXRpb24gPSBpb3MgPyA0MDAgOiAyNTA7XG4gICAgY29uc3Qgcm91dGVyVHJhbnNpdGlvbkNsYXNzID0gYHJvdXRlci10cmFuc2l0aW9uLSR7ZGlyZWN0aW9ufSByb3V0ZXItdHJhbnNpdGlvbi1qcy0ke2RpcmVjdGlvbn1gO1xuXG4gICAgbGV0IHN0YXJ0VGltZSA9IG51bGw7XG4gICAgbGV0IGRvbmUgPSBmYWxzZTtcblxuICAgIGxldCBuZXdOYXZFbHM7XG4gICAgbGV0IG9sZE5hdkVscztcbiAgICBsZXQgbmF2YmFyV2lkdGggPSAwO1xuXG4gICAgZnVuY3Rpb24gYW5pbWF0YWJsZU5hdkVsKGVsLCBuYXZiYXJJbm5lcikge1xuICAgICAgY29uc3QgJGVsID0gJChlbCk7XG4gICAgICBjb25zdCBpc1NsaWRpbmcgPSAkZWwuaGFzQ2xhc3MoJ3NsaWRpbmcnKSB8fCBuYXZiYXJJbm5lci5oYXNDbGFzcygnc2xpZGluZycpO1xuICAgICAgY29uc3QgaXNTdWJuYXZiYXIgPSAkZWwuaGFzQ2xhc3MoJ3N1Ym5hdmJhcicpO1xuICAgICAgY29uc3QgbmVlZHNPcGFjaXR5VHJhbnNpdGlvbiA9IGlzU2xpZGluZyA/ICFpc1N1Ym5hdmJhciA6IHRydWU7XG4gICAgICBjb25zdCBoYXNJY29uID0gaXNTbGlkaW5nICYmIGFuaW1hdGVJY29uICYmICRlbC5oYXNDbGFzcygnbGVmdCcpICYmICRlbC5maW5kKCcuYmFjayAuaWNvbicpLmxlbmd0aCA+IDA7XG4gICAgICBsZXQgJGljb25FbDtcbiAgICAgIGlmIChoYXNJY29uKSAkaWNvbkVsID0gJGVsLmZpbmQoJy5iYWNrIC5pY29uJyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAkZWwsXG4gICAgICAgICRpY29uRWwsXG4gICAgICAgIGhhc0ljb24sXG4gICAgICAgIGxlZnRPZmZzZXQ6ICRlbFswXS5mN05hdmJhckxlZnRPZmZzZXQsXG4gICAgICAgIHJpZ2h0T2Zmc2V0OiAkZWxbMF0uZjdOYXZiYXJSaWdodE9mZnNldCxcbiAgICAgICAgaXNTbGlkaW5nLFxuICAgICAgICBpc1N1Ym5hdmJhcixcbiAgICAgICAgbmVlZHNPcGFjaXR5VHJhbnNpdGlvbixcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChkeW5hbWljTmF2YmFyKSB7XG4gICAgICBuZXdOYXZFbHMgPSBbXTtcbiAgICAgIG9sZE5hdkVscyA9IFtdO1xuICAgICAgbmV3TmF2YmFySW5uZXIuY2hpbGRyZW4oJy5sZWZ0LCAucmlnaHQsIC50aXRsZSwgLnN1Ym5hdmJhcicpLmVhY2goKGluZGV4LCBuYXZFbCkgPT4ge1xuICAgICAgICBuZXdOYXZFbHMucHVzaChhbmltYXRhYmxlTmF2RWwobmF2RWwsIG5ld05hdmJhcklubmVyKSk7XG4gICAgICB9KTtcbiAgICAgIG9sZE5hdmJhcklubmVyLmNoaWxkcmVuKCcubGVmdCwgLnJpZ2h0LCAudGl0bGUsIC5zdWJuYXZiYXInKS5lYWNoKChpbmRleCwgbmF2RWwpID0+IHtcbiAgICAgICAgb2xkTmF2RWxzLnB1c2goYW5pbWF0YWJsZU5hdkVsKG5hdkVsLCBvbGROYXZiYXJJbm5lcikpO1xuICAgICAgfSk7XG4gICAgICBpZiAoIXNlcGFyYXRlTmF2YmFyKSB7XG4gICAgICAgIG5hdmJhcldpZHRoID0gbmV3TmF2YmFySW5uZXJbMF0ub2Zmc2V0V2lkdGg7XG4gICAgICB9XG4gICAgICBbb2xkTmF2RWxzLCBuZXdOYXZFbHNdLmZvckVhY2goKG5hdkVscykgPT4ge1xuICAgICAgICBuYXZFbHMuZm9yRWFjaCgobmF2RWwpID0+IHtcbiAgICAgICAgICBjb25zdCBuID0gbmF2RWw7XG4gICAgICAgICAgY29uc3QgeyBpc1NsaWRpbmcsICRlbCB9ID0gbmF2RWw7XG4gICAgICAgICAgY29uc3Qgb3RoZXJFbHMgPSBuYXZFbHMgPT09IG9sZE5hdkVscyA/IG5ld05hdkVscyA6IG9sZE5hdkVscztcbiAgICAgICAgICBpZiAoIShpc1NsaWRpbmcgJiYgJGVsLmhhc0NsYXNzKCd0aXRsZScpICYmIG90aGVyRWxzKSkgcmV0dXJuO1xuICAgICAgICAgIG90aGVyRWxzLmZvckVhY2goKG90aGVyTmF2RWwpID0+IHtcbiAgICAgICAgICAgIGlmIChvdGhlck5hdkVsLiRlbC5oYXNDbGFzcygnbGVmdCcpICYmIG90aGVyTmF2RWwuaGFzSWNvbikge1xuICAgICAgICAgICAgICBjb25zdCBpY29uVGV4dEVsID0gb3RoZXJOYXZFbC4kZWwuZmluZCgnLmJhY2sgc3BhbicpWzBdO1xuICAgICAgICAgICAgICBuLmxlZnRPZmZzZXQgKz0gaWNvblRleHRFbCA/IGljb25UZXh0RWwub2Zmc2V0TGVmdCA6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGV0ICRzaGFkb3dFbDtcbiAgICBsZXQgJG9wYWNpdHlFbDtcblxuICAgIGlmIChpb3MpIHtcbiAgICAgICRzaGFkb3dFbCA9ICQoJzxkaXYgY2xhc3M9XCJwYWdlLXNoYWRvdy1lZmZlY3RcIj48L2Rpdj4nKTtcbiAgICAgICRvcGFjaXR5RWwgPSAkKCc8ZGl2IGNsYXNzPVwicGFnZS1vcGFjaXR5LWVmZmVjdFwiPjwvZGl2PicpO1xuXG4gICAgICBpZiAoZGlyZWN0aW9uID09PSAnZm9yd2FyZCcpIHtcbiAgICAgICAgbmV3UGFnZS5hcHBlbmQoJHNoYWRvd0VsKTtcbiAgICAgICAgb2xkUGFnZS5hcHBlbmQoJG9wYWNpdHlFbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdQYWdlLmFwcGVuZCgkb3BhY2l0eUVsKTtcbiAgICAgICAgb2xkUGFnZS5hcHBlbmQoJHNoYWRvd0VsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZWFzaW5nID0gVXRpbHMuYmV6aWVyKDAuMjUsIDAuMSwgMC4yNSwgMSk7XG5cbiAgICBmdW5jdGlvbiBvbkRvbmUoKSB7XG4gICAgICBuZXdQYWdlLnRyYW5zZm9ybSgnJykuY3NzKCdvcGFjaXR5JywgJycpO1xuICAgICAgb2xkUGFnZS50cmFuc2Zvcm0oJycpLmNzcygnb3BhY2l0eScsICcnKTtcbiAgICAgIGlmIChpb3MpIHtcbiAgICAgICAgJHNoYWRvd0VsLnJlbW92ZSgpO1xuICAgICAgICAkb3BhY2l0eUVsLnJlbW92ZSgpO1xuICAgICAgICBpZiAoZHluYW1pY05hdmJhcikge1xuICAgICAgICAgIG5ld05hdkVscy5mb3JFYWNoKChuYXZFbCkgPT4ge1xuICAgICAgICAgICAgbmF2RWwuJGVsLnRyYW5zZm9ybSgnJyk7XG4gICAgICAgICAgICBuYXZFbC4kZWwuY3NzKCdvcGFjaXR5JywgJycpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIG9sZE5hdkVscy5mb3JFYWNoKChuYXZFbCkgPT4ge1xuICAgICAgICAgICAgbmF2RWwuJGVsLnRyYW5zZm9ybSgnJyk7XG4gICAgICAgICAgICBuYXZFbC4kZWwuY3NzKCdvcGFjaXR5JywgJycpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIG5ld05hdkVscyA9IFtdO1xuICAgICAgICAgIG9sZE5hdkVscyA9IFtdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJvdXRlci4kZWwucmVtb3ZlQ2xhc3Mocm91dGVyVHJhbnNpdGlvbkNsYXNzKTtcblxuICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIGNvbnN0IHRpbWUgPSBVdGlscy5ub3coKTtcbiAgICAgIGlmICghc3RhcnRUaW1lKSBzdGFydFRpbWUgPSB0aW1lO1xuICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBkdXJhdGlvbiwgMSksIDApO1xuICAgICAgY29uc3QgZWFzZVByb2dyZXNzID0gZWFzaW5nKHByb2dyZXNzKTtcblxuICAgICAgaWYgKHByb2dyZXNzID49IDEpIHtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaW9zKSB7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdmb3J3YXJkJykge1xuICAgICAgICAgIG5ld1BhZ2UudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgkeygxIC0gZWFzZVByb2dyZXNzKSAqIDEwMH0lLDAsMClgKTtcbiAgICAgICAgICBvbGRQYWdlLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHstZWFzZVByb2dyZXNzICogMjB9JSwwLDApYCk7XG4gICAgICAgICAgJHNoYWRvd0VsWzBdLnN0eWxlLm9wYWNpdHkgPSBlYXNlUHJvZ3Jlc3M7XG4gICAgICAgICAgJG9wYWNpdHlFbFswXS5zdHlsZS5vcGFjaXR5ID0gZWFzZVByb2dyZXNzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1BhZ2UudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgkey0oMSAtIGVhc2VQcm9ncmVzcykgKiAyMH0lLDAsMClgKTtcbiAgICAgICAgICBvbGRQYWdlLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHtlYXNlUHJvZ3Jlc3MgKiAxMDB9JSwwLDApYCk7XG4gICAgICAgICAgJHNoYWRvd0VsWzBdLnN0eWxlLm9wYWNpdHkgPSAxIC0gZWFzZVByb2dyZXNzO1xuICAgICAgICAgICRvcGFjaXR5RWxbMF0uc3R5bGUub3BhY2l0eSA9IDEgLSBlYXNlUHJvZ3Jlc3M7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGR5bmFtaWNOYXZiYXIpIHtcbiAgICAgICAgICBuZXdOYXZFbHMuZm9yRWFjaCgobmF2RWwpID0+IHtcbiAgICAgICAgICAgIGNvbnN0ICRlbCA9IG5hdkVsLiRlbDtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IGRpcmVjdGlvbiA9PT0gJ2ZvcndhcmQnID8gbmF2RWwucmlnaHRPZmZzZXQgOiBuYXZFbC5sZWZ0T2Zmc2V0O1xuICAgICAgICAgICAgaWYgKG5hdkVsLm5lZWRzT3BhY2l0eVRyYW5zaXRpb24pIHtcbiAgICAgICAgICAgICAgJGVsWzBdLnN0eWxlLm9wYWNpdHkgPSBlYXNlUHJvZ3Jlc3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmF2RWwuaXNTbGlkaW5nKSB7XG4gICAgICAgICAgICAgICRlbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7b2Zmc2V0ICogKDEgLSBlYXNlUHJvZ3Jlc3MpfXB4LDAsMClgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuYXZFbC5oYXNJY29uKSB7XG4gICAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdmb3J3YXJkJykge1xuICAgICAgICAgICAgICAgIG5hdkVsLiRpY29uRWwudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgkeygtb2Zmc2V0IC0gbmF2YmFyV2lkdGgpICogKDEgLSBlYXNlUHJvZ3Jlc3MpfXB4LDAsMClgKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuYXZFbC4kaWNvbkVsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHsoLW9mZnNldCArIChuYXZiYXJXaWR0aCAvIDUpKSAqICgxIC0gZWFzZVByb2dyZXNzKX1weCwwLDApYCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBvbGROYXZFbHMuZm9yRWFjaCgobmF2RWwpID0+IHtcbiAgICAgICAgICAgIGNvbnN0ICRlbCA9IG5hdkVsLiRlbDtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IGRpcmVjdGlvbiA9PT0gJ2ZvcndhcmQnID8gbmF2RWwubGVmdE9mZnNldCA6IG5hdkVsLnJpZ2h0T2Zmc2V0O1xuICAgICAgICAgICAgaWYgKG5hdkVsLm5lZWRzT3BhY2l0eVRyYW5zaXRpb24pIHtcbiAgICAgICAgICAgICAgJGVsWzBdLnN0eWxlLm9wYWNpdHkgPSAoMSAtIGVhc2VQcm9ncmVzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmF2RWwuaXNTbGlkaW5nKSB7XG4gICAgICAgICAgICAgICRlbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7b2Zmc2V0ICogKGVhc2VQcm9ncmVzcyl9cHgsMCwwKWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5hdkVsLmhhc0ljb24pIHtcbiAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2ZvcndhcmQnKSB7XG4gICAgICAgICAgICAgICAgbmF2RWwuJGljb25FbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7KC1vZmZzZXQgKyAobmF2YmFyV2lkdGggLyA1KSkgKiAoZWFzZVByb2dyZXNzKX1weCwwLDApYCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmF2RWwuJGljb25FbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7KC1vZmZzZXQgLSBuYXZiYXJXaWR0aCkgKiAoZWFzZVByb2dyZXNzKX1weCwwLDApYCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2ZvcndhcmQnKSB7XG4gICAgICAgICAgbmV3UGFnZS50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKDAsICR7KDEgLSBlYXNlUHJvZ3Jlc3MpICogNTZ9cHgsMClgKTtcbiAgICAgICAgICBuZXdQYWdlLmNzcygnb3BhY2l0eScsIGVhc2VQcm9ncmVzcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2xkUGFnZS50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKDAsICR7ZWFzZVByb2dyZXNzICogNTZ9cHgsMClgKTtcbiAgICAgICAgICBvbGRQYWdlLmNzcygnb3BhY2l0eScsIDEgLSBlYXNlUHJvZ3Jlc3MpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChkb25lKSB7XG4gICAgICAgIG9uRG9uZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBVdGlscy5uZXh0RnJhbWUocmVuZGVyKTtcbiAgICB9XG5cbiAgICByb3V0ZXIuJGVsLmFkZENsYXNzKHJvdXRlclRyYW5zaXRpb25DbGFzcyk7XG5cbiAgICBVdGlscy5uZXh0RnJhbWUocmVuZGVyKTtcbiAgfVxuICBhbmltYXRlKC4uLmFyZ3MpIHtcbiAgICAvLyBBcmdzOiBvbGRQYWdlLCBuZXdQYWdlLCBvbGROYXZiYXJJbm5lciwgbmV3TmF2YmFySW5uZXIsIGRpcmVjdGlvbiwgY2FsbGJhY2tcbiAgICBjb25zdCByb3V0ZXIgPSB0aGlzO1xuICAgIGlmIChyb3V0ZXIucGFyYW1zLmFuaW1hdGVDdXN0b20pIHtcbiAgICAgIHJvdXRlci5wYXJhbXMuYW5pbWF0ZUN1c3RvbS5hcHBseShyb3V0ZXIsIGFyZ3MpO1xuICAgIH0gZWxzZSBpZiAocm91dGVyLnBhcmFtcy5hbmltYXRlV2l0aEpTKSB7XG4gICAgICByb3V0ZXIuYW5pbWF0ZVdpdGhKUyguLi5hcmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm91dGVyLmFuaW1hdGVXaXRoQ1NTKC4uLmFyZ3MpO1xuICAgIH1cbiAgfVxuICByZW1vdmVFbChlbCkge1xuICAgIGlmICghZWwpIHJldHVybjtcbiAgICBjb25zdCByb3V0ZXIgPSB0aGlzO1xuICAgIGNvbnN0ICRlbCA9ICQoZWwpO1xuICAgIGlmICgkZWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgaWYgKCRlbFswXS5mN0NvbXBvbmVudCAmJiAkZWxbMF0uZjdDb21wb25lbnQuZGVzdHJveSkge1xuICAgICAgJGVsWzBdLmY3Q29tcG9uZW50LmRlc3Ryb3koKTtcbiAgICB9XG4gICAgaWYgKCFyb3V0ZXIucGFyYW1zLnJlbW92ZUVsZW1lbnRzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChyb3V0ZXIucGFyYW1zLnJlbW92ZUVsZW1lbnRzV2l0aFRpbWVvdXQpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAkZWwucmVtb3ZlKCk7XG4gICAgICB9LCByb3V0ZXIucGFyYW1zLnJlbW92ZUVsZW1lbnRzVGltZW91dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICRlbC5yZW1vdmUoKTtcbiAgICB9XG4gIH1cbiAgZ2V0UGFnZUVsKGNvbnRlbnQpIHtcbiAgICBjb25zdCByb3V0ZXIgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlci50ZW1wRG9tLmlubmVySFRNTCA9IGNvbnRlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICgkKGNvbnRlbnQpLmhhc0NsYXNzKCdwYWdlJykpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICB9XG4gICAgICByb3V0ZXIudGVtcERvbS5pbm5lckhUTUwgPSAnJztcbiAgICAgICQocm91dGVyLnRlbXBEb20pLmFwcGVuZChjb250ZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm91dGVyLmZpbmRFbGVtZW50KCcucGFnZScsIHJvdXRlci50ZW1wRG9tKTtcbiAgfVxuICBmaW5kRWxlbWVudChzdHJpbmdTZWxlY3RvciwgY29udGFpbmVyLCBub3RTdGFja2VkKSB7XG4gICAgY29uc3Qgcm91dGVyID0gdGhpcztcbiAgICBjb25zdCB2aWV3ID0gcm91dGVyLnZpZXc7XG4gICAgY29uc3QgYXBwID0gcm91dGVyLmFwcDtcblxuICAgIC8vIE1vZGFscyBTZWxlY3RvclxuICAgIGNvbnN0IG1vZGFsc1NlbGVjdG9yID0gJy5wb3B1cCwgLmRpYWxvZywgLnBvcG92ZXIsIC5hY3Rpb25zLW1vZGFsLCAuc2hlZXQtbW9kYWwsIC5sb2dpbi1zY3JlZW4sIC5wYWdlJztcblxuICAgIGNvbnN0ICRjb250YWluZXIgPSAkKGNvbnRhaW5lcik7XG4gICAgbGV0IHNlbGVjdG9yID0gc3RyaW5nU2VsZWN0b3I7XG4gICAgaWYgKG5vdFN0YWNrZWQpIHNlbGVjdG9yICs9ICc6bm90KC5zdGFja2VkKSc7XG5cbiAgICBsZXQgZm91bmQgPSAkY29udGFpbmVyXG4gICAgICAuZmluZChzZWxlY3RvcilcbiAgICAgIC5maWx0ZXIoKGluZGV4LCBlbCkgPT4gJChlbCkucGFyZW50cyhtb2RhbHNTZWxlY3RvcikubGVuZ3RoID09PSAwKTtcblxuICAgIGlmIChmb3VuZC5sZW5ndGggPiAxKSB7XG4gICAgICBpZiAodHlwZW9mIHZpZXcuc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIFNlYXJjaCBpbiByZWxhdGVkIHZpZXdcbiAgICAgICAgZm91bmQgPSAkY29udGFpbmVyLmZpbmQoYCR7dmlldy5zZWxlY3Rvcn0gJHtzZWxlY3Rvcn1gKTtcbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZC5sZW5ndGggPiAxKSB7XG4gICAgICAgIC8vIFNlYXJjaCBpbiBtYWluIHZpZXdcbiAgICAgICAgZm91bmQgPSAkY29udGFpbmVyLmZpbmQoYC4ke2FwcC5wYXJhbXMudmlld01haW5DbGFzc30gJHtzZWxlY3Rvcn1gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGZvdW5kLmxlbmd0aCA9PT0gMSkgcmV0dXJuIGZvdW5kO1xuXG4gICAgLy8gVHJ5IHRvIGZpbmQgbm90IHN0YWNrZWRcbiAgICBpZiAoIW5vdFN0YWNrZWQpIGZvdW5kID0gcm91dGVyLmZpbmRFbGVtZW50KHNlbGVjdG9yLCAkY29udGFpbmVyLCB0cnVlKTtcbiAgICBpZiAoZm91bmQgJiYgZm91bmQubGVuZ3RoID09PSAxKSByZXR1cm4gZm91bmQ7XG4gICAgaWYgKGZvdW5kICYmIGZvdW5kLmxlbmd0aCA+IDEpIHJldHVybiAkKGZvdW5kWzBdKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGZsYXR0ZW5Sb3V0ZXMocm91dGVzID0gdGhpcy5yb3V0ZXMpIHtcbiAgICBsZXQgZmxhdHRlbmVkUm91dGVzID0gW107XG4gICAgcm91dGVzLmZvckVhY2goKHJvdXRlKSA9PiB7XG4gICAgICBpZiAoJ3JvdXRlcycgaW4gcm91dGUpIHtcbiAgICAgICAgY29uc3QgbWVyZ2VkUGF0aHNSb3V0ZXMgPSByb3V0ZS5yb3V0ZXMubWFwKChjaGlsZFJvdXRlKSA9PiB7XG4gICAgICAgICAgY29uc3QgY1JvdXRlID0gVXRpbHMuZXh0ZW5kKHt9LCBjaGlsZFJvdXRlKTtcbiAgICAgICAgICBjUm91dGUucGF0aCA9IChgJHtyb3V0ZS5wYXRofS8ke2NSb3V0ZS5wYXRofWApLnJlcGxhY2UoJy8vLycsICcvJykucmVwbGFjZSgnLy8nLCAnLycpO1xuICAgICAgICAgIHJldHVybiBjUm91dGU7XG4gICAgICAgIH0pO1xuICAgICAgICBmbGF0dGVuZWRSb3V0ZXMgPSBmbGF0dGVuZWRSb3V0ZXMuY29uY2F0KHJvdXRlLCB0aGlzLmZsYXR0ZW5Sb3V0ZXMobWVyZ2VkUGF0aHNSb3V0ZXMpKTtcbiAgICAgIH0gZWxzZSBpZiAoJ3RhYnMnIGluIHJvdXRlICYmIHJvdXRlLnRhYnMpIHtcbiAgICAgICAgY29uc3QgbWVyZ2VkUGF0aHNSb3V0ZXMgPSByb3V0ZS50YWJzLm1hcCgodGFiUm91dGUpID0+IHtcbiAgICAgICAgICBjb25zdCB0Um91dGUgPSBVdGlscy5leHRlbmQoe30sIHJvdXRlLCB7XG4gICAgICAgICAgICBwYXRoOiAoYCR7cm91dGUucGF0aH0vJHt0YWJSb3V0ZS5wYXRofWApLnJlcGxhY2UoJy8vLycsICcvJykucmVwbGFjZSgnLy8nLCAnLycpLFxuICAgICAgICAgICAgcGFyZW50UGF0aDogcm91dGUucGF0aCxcbiAgICAgICAgICAgIHRhYjogdGFiUm91dGUsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZGVsZXRlIHRSb3V0ZS50YWJzO1xuICAgICAgICAgIHJldHVybiB0Um91dGU7XG4gICAgICAgIH0pO1xuICAgICAgICBmbGF0dGVuZWRSb3V0ZXMgPSBmbGF0dGVuZWRSb3V0ZXMuY29uY2F0KHRoaXMuZmxhdHRlblJvdXRlcyhtZXJnZWRQYXRoc1JvdXRlcykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmxhdHRlbmVkUm91dGVzLnB1c2gocm91dGUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBmbGF0dGVuZWRSb3V0ZXM7XG4gIH1cbiAgZmluZE1hdGNoaW5nUm91dGUodXJsLCBwYXJzZU9ubHkpIHtcbiAgICBpZiAoIXVybCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBjb25zdCByb3V0ZXIgPSB0aGlzO1xuICAgIGNvbnN0IHJvdXRlcyA9IHJvdXRlci5yb3V0ZXM7XG4gICAgY29uc3QgZmxhdHRlbmVkUm91dGVzID0gcm91dGVyLmZsYXR0ZW5Sb3V0ZXMocm91dGVzKTtcbiAgICBjb25zdCBxdWVyeSA9IFV0aWxzLnBhcnNlVXJsUXVlcnkodXJsKTtcbiAgICBjb25zdCBoYXNoID0gdXJsLnNwbGl0KCcjJylbMV07XG4gICAgY29uc3QgcGFyYW1zID0ge307XG4gICAgY29uc3QgcGF0aCA9IHVybC5zcGxpdCgnIycpWzBdLnNwbGl0KCc/JylbMF07XG4gICAgY29uc3QgdXJsUGFydHMgPSBwYXRoLnNwbGl0KCcvJykuZmlsdGVyKHBhcnQgPT4gcGFydCAhPT0gJycpO1xuICAgIGlmIChwYXJzZU9ubHkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHF1ZXJ5LFxuICAgICAgICBoYXNoLFxuICAgICAgICBwYXJhbXMsXG4gICAgICAgIHVybCxcbiAgICAgICAgcGF0aCxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgbGV0IG1hdGNoaW5nUm91dGU7XG4gICAgZnVuY3Rpb24gcGFyc2VSb3V0ZShzdHIgPSAnJykge1xuICAgICAgY29uc3QgcGFydHMgPSBbXTtcbiAgICAgIHN0ci5zcGxpdCgnLycpLmZvckVhY2goKHBhcnQpID0+IHtcbiAgICAgICAgaWYgKHBhcnQgIT09ICcnKSB7XG4gICAgICAgICAgaWYgKHBhcnQuaW5kZXhPZignOicpID09PSAwKSB7XG4gICAgICAgICAgICBwYXJ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgbmFtZTogcGFydC5yZXBsYWNlKCc6JywgJycpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHBhcnRzLnB1c2gocGFydCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHBhcnRzO1xuICAgIH1cbiAgICBmbGF0dGVuZWRSb3V0ZXMuZm9yRWFjaCgocm91dGUpID0+IHtcbiAgICAgIGlmIChtYXRjaGluZ1JvdXRlKSByZXR1cm47XG4gICAgICBjb25zdCBwYXJzZWRSb3V0ZSA9IHBhcnNlUm91dGUocm91dGUucGF0aCk7XG4gICAgICBpZiAocGFyc2VkUm91dGUubGVuZ3RoICE9PSB1cmxQYXJ0cy5sZW5ndGgpIHJldHVybjtcbiAgICAgIGxldCBtYXRjaGVkUGFydHMgPSAwO1xuICAgICAgcGFyc2VkUm91dGUuZm9yRWFjaCgocm91dGVQYXJ0LCBpbmRleCkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHJvdXRlUGFydCA9PT0gJ3N0cmluZycgJiYgdXJsUGFydHNbaW5kZXhdID09PSByb3V0ZVBhcnQpIHtcbiAgICAgICAgICBtYXRjaGVkUGFydHMgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHJvdXRlUGFydCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBwYXJhbXNbcm91dGVQYXJ0Lm5hbWVdID0gdXJsUGFydHNbaW5kZXhdO1xuICAgICAgICAgIG1hdGNoZWRQYXJ0cyArPSAxO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChtYXRjaGVkUGFydHMgPT09IHVybFBhcnRzLmxlbmd0aCkge1xuICAgICAgICBtYXRjaGluZ1JvdXRlID0ge1xuICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgIGhhc2gsXG4gICAgICAgICAgcGFyYW1zLFxuICAgICAgICAgIHVybCxcbiAgICAgICAgICBwYXRoLFxuICAgICAgICAgIHJvdXRlLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBtYXRjaGluZ1JvdXRlO1xuICB9XG4gIHJlbW92ZUZyb21YaHJDYWNoZSh1cmwpIHtcbiAgICBjb25zdCByb3V0ZXIgPSB0aGlzO1xuICAgIGNvbnN0IHhockNhY2hlID0gcm91dGVyLmNhY2hlLnhocjtcbiAgICBsZXQgaW5kZXggPSBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHhockNhY2hlLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoeGhyQ2FjaGVbaV0udXJsID09PSB1cmwpIGluZGV4ID0gaTtcbiAgICB9XG4gICAgaWYgKGluZGV4ICE9PSBmYWxzZSkgeGhyQ2FjaGUuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuICB4aHJSZXF1ZXN0KHJlcXVlc3RVcmwsIGlnbm9yZUNhY2hlKSB7XG4gICAgY29uc3Qgcm91dGVyID0gdGhpcztcbiAgICBjb25zdCBwYXJhbXMgPSByb3V0ZXIucGFyYW1zO1xuICAgIGxldCB1cmwgPSByZXF1ZXN0VXJsO1xuICAgIC8vIHNob3VsZCB3ZSBpZ25vcmUgZ2V0IHBhcmFtcyBvciBub3RcbiAgICBpZiAocGFyYW1zLnhockNhY2hlSWdub3JlR2V0UGFyYW1ldGVycyAmJiB1cmwuaW5kZXhPZignPycpID49IDApIHtcbiAgICAgIHVybCA9IHVybC5zcGxpdCgnPycpWzBdO1xuICAgIH1cblxuICAgIHJldHVybiBVdGlscy5wcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmIChwYXJhbXMueGhyQ2FjaGUgJiYgIWlnbm9yZUNhY2hlICYmIHVybC5pbmRleE9mKCdub2NhY2hlJykgPCAwICYmIHBhcmFtcy54aHJDYWNoZUlnbm9yZS5pbmRleE9mKHVybCkgPCAwKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm91dGVyLmNhY2hlLnhoci5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGNvbnN0IGNhY2hlZFVybCA9IHJvdXRlci5jYWNoZS54aHJbaV07XG4gICAgICAgICAgaWYgKGNhY2hlZFVybC51cmwgPT09IHVybCkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgZXhwaXJhdGlvblxuICAgICAgICAgICAgaWYgKFV0aWxzLm5vdygpIC0gY2FjaGVkVXJsLnRpbWUgPCBwYXJhbXMueGhyQ2FjaGVEdXJhdGlvbikge1xuICAgICAgICAgICAgICAvLyBMb2FkIGZyb20gY2FjaGVcbiAgICAgICAgICAgICAgcmVzb2x2ZShjYWNoZWRVcmwuY29udGVudCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJvdXRlci54aHIgPSAkLmFqYXgoe1xuICAgICAgICB1cmwsXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIGJlZm9yZVNlbmQoKSB7XG4gICAgICAgICAgcm91dGVyLmVtaXQoJ3JvdXRlckFqYXhTdGFydCcsIHJvdXRlci54aHIpO1xuICAgICAgICB9LFxuICAgICAgICBjb21wbGV0ZSh4aHIsIHN0YXR1cykge1xuICAgICAgICAgIHJvdXRlci5lbWl0KCdyb3V0ZXJBamF4Q29tcGxldGUnLCB4aHIpO1xuICAgICAgICAgIGlmICgoc3RhdHVzICE9PSAnZXJyb3InICYmIHN0YXR1cyAhPT0gJ3RpbWVvdXQnICYmICh4aHIuc3RhdHVzID49IDIwMCAmJiB4aHIuc3RhdHVzIDwgMzAwKSkgfHwgeGhyLnN0YXR1cyA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHBhcmFtcy54aHJDYWNoZSAmJiB4aHIucmVzcG9uc2VUZXh0ICE9PSAnJykge1xuICAgICAgICAgICAgICByb3V0ZXIucmVtb3ZlRnJvbVhockNhY2hlKHVybCk7XG4gICAgICAgICAgICAgIHJvdXRlci5jYWNoZS54aHIucHVzaCh7XG4gICAgICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgICAgIHRpbWU6IFV0aWxzLm5vdygpLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHhoci5yZXNwb25zZVRleHQsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcm91dGVyLmVtaXQoJ3JvdXRlckFqYXhTdWNjZXNzJywgeGhyKTtcbiAgICAgICAgICAgIHJlc29sdmUoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJvdXRlci5lbWl0KCdyb3V0ZXJBamF4RXJyb3InLCB4aHIpO1xuICAgICAgICAgICAgcmVqZWN0KHhocik7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcih4aHIpIHtcbiAgICAgICAgICByb3V0ZXIuZW1pdCgncm91dGVyQWpheEVycm9yJywgeGhyKTtcbiAgICAgICAgICByZWplY3QoeGhyKTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIC8vIFJlbW92ZSB0aGVtZSBlbGVtZW50c1xuICByZW1vdmVUaGVtZUVsZW1lbnRzKGVsKSB7XG4gICAgY29uc3Qgcm91dGVyID0gdGhpcztcbiAgICBjb25zdCB0aGVtZSA9IHJvdXRlci5hcHAudGhlbWU7XG4gICAgJChlbCkuZmluZChgLiR7dGhlbWUgPT09ICdtZCcgPyAnaW9zJyA6ICdtZCd9LW9ubHksIC5pZi0ke3RoZW1lID09PSAnbWQnID8gJ2lvcycgOiAnbWQnfWApLnJlbW92ZSgpO1xuICB9XG4gIHRlbXBsYXRlTG9hZGVyKHRlbXBsYXRlLCB0ZW1wbGF0ZVVybCwgb3B0aW9ucywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgY29uc3Qgcm91dGVyID0gdGhpcztcbiAgICBmdW5jdGlvbiBjb21waWxlKHQpIHtcbiAgICAgIGxldCBjb21waWxlZEh0bWw7XG4gICAgICBsZXQgY29udGV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnRleHQgPSBvcHRpb25zLmNvbnRleHQgfHwge307XG4gICAgICAgIGlmICh0eXBlb2YgY29udGV4dCA9PT0gJ2Z1bmN0aW9uJykgY29udGV4dCA9IGNvbnRleHQuY2FsbChyb3V0ZXIpO1xuICAgICAgICBlbHNlIGlmICh0eXBlb2YgY29udGV4dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29udGV4dCA9IEpTT04ucGFyc2UoY29udGV4dCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgICAgIHRocm93IChlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjb21waWxlZEh0bWwgPSB0KGNvbnRleHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbXBpbGVkSHRtbCA9IHQ3LmNvbXBpbGUodCkoVXRpbHMuZXh0ZW5kKHt9LCBjb250ZXh0IHx8IHt9LCB7XG4gICAgICAgICAgICAkYXBwOiByb3V0ZXIuYXBwLFxuICAgICAgICAgICAgJHJvb3Q6IFV0aWxzLmV4dGVuZCh7fSwgcm91dGVyLmFwcC5kYXRhLCByb3V0ZXIuYXBwLm1ldGhvZHMpLFxuICAgICAgICAgICAgJHJvdXRlOiBvcHRpb25zLnJvdXRlLFxuICAgICAgICAgICAgJHJvdXRlcjogcm91dGVyLFxuICAgICAgICAgICAgJHRoZW1lOiB7XG4gICAgICAgICAgICAgIGlvczogcm91dGVyLmFwcC50aGVtZSA9PT0gJ2lvcycsXG4gICAgICAgICAgICAgIG1kOiByb3V0ZXIuYXBwLnRoZW1lID09PSAnbWQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICByZWplY3QoKTtcbiAgICAgICAgdGhyb3cgKGVycik7XG4gICAgICB9XG4gICAgICByZXNvbHZlKGNvbXBpbGVkSHRtbCwgeyBjb250ZXh0IH0pO1xuICAgIH1cbiAgICBpZiAodGVtcGxhdGVVcmwpIHtcbiAgICAgIC8vIExvYWQgdmlhIFhIUlxuICAgICAgaWYgKHJvdXRlci54aHIpIHtcbiAgICAgICAgcm91dGVyLnhoci5hYm9ydCgpO1xuICAgICAgICByb3V0ZXIueGhyID0gZmFsc2U7XG4gICAgICB9XG4gICAgICByb3V0ZXJcbiAgICAgICAgLnhoclJlcXVlc3QodGVtcGxhdGVVcmwpXG4gICAgICAgIC50aGVuKCh0ZW1wbGF0ZUNvbnRlbnQpID0+IHtcbiAgICAgICAgICBjb21waWxlKHRlbXBsYXRlQ29udGVudCk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21waWxlKHRlbXBsYXRlKTtcbiAgICB9XG4gIH1cbiAgbW9kYWxUZW1wbGF0ZUxvYWRlcih0ZW1wbGF0ZSwgdGVtcGxhdGVVcmwsIG9wdGlvbnMsIHJlc29sdmUsIHJlamVjdCkge1xuICAgIGNvbnN0IHJvdXRlciA9IHRoaXM7XG4gICAgcmV0dXJuIHJvdXRlci50ZW1wbGF0ZUxvYWRlcih0ZW1wbGF0ZSwgdGVtcGxhdGVVcmwsIG9wdGlvbnMsIChodG1sKSA9PiB7XG4gICAgICByZXNvbHZlKGh0bWwpO1xuICAgIH0sIHJlamVjdCk7XG4gIH1cbiAgdGFiVGVtcGxhdGVMb2FkZXIodGVtcGxhdGUsIHRlbXBsYXRlVXJsLCBvcHRpb25zLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICBjb25zdCByb3V0ZXIgPSB0aGlzO1xuICAgIHJldHVybiByb3V0ZXIudGVtcGxhdGVMb2FkZXIodGVtcGxhdGUsIHRlbXBsYXRlVXJsLCBvcHRpb25zLCAoaHRtbCkgPT4ge1xuICAgICAgcmVzb2x2ZShodG1sKTtcbiAgICB9LCByZWplY3QpO1xuICB9XG4gIHBhZ2VUZW1wbGF0ZUxvYWRlcih0ZW1wbGF0ZSwgdGVtcGxhdGVVcmwsIG9wdGlvbnMsIHJlc29sdmUsIHJlamVjdCkge1xuICAgIGNvbnN0IHJvdXRlciA9IHRoaXM7XG4gICAgcmV0dXJuIHJvdXRlci50ZW1wbGF0ZUxvYWRlcih0ZW1wbGF0ZSwgdGVtcGxhdGVVcmwsIG9wdGlvbnMsIChodG1sLCBuZXdPcHRpb25zID0ge30pID0+IHtcbiAgICAgIHJlc29sdmUocm91dGVyLmdldFBhZ2VFbChodG1sKSwgbmV3T3B0aW9ucyk7XG4gICAgfSwgcmVqZWN0KTtcbiAgfVxuICBjb21wb25lbnRMb2FkZXIoY29tcG9uZW50LCBjb21wb25lbnRVcmwsIG9wdGlvbnMsIHJlc29sdmUsIHJlamVjdCkge1xuICAgIGNvbnN0IHJvdXRlciA9IHRoaXM7XG4gICAgY29uc3QgdXJsID0gdHlwZW9mIGNvbXBvbmVudCA9PT0gJ3N0cmluZycgPyBjb21wb25lbnQgOiBjb21wb25lbnRVcmw7XG4gICAgZnVuY3Rpb24gY29tcGlsZShjKSB7XG4gICAgICBjb25zdCBjcmVhdGVkQ29tcG9uZW50ID0gQ29tcG9uZW50LmNyZWF0ZShjLCB7XG4gICAgICAgICQsXG4gICAgICAgICQkOiAkLFxuICAgICAgICAkYXBwOiByb3V0ZXIuYXBwLFxuICAgICAgICAkcm9vdDogVXRpbHMuZXh0ZW5kKHt9LCByb3V0ZXIuYXBwLmRhdGEsIHJvdXRlci5hcHAubWV0aG9kcyksXG4gICAgICAgICRyb3V0ZTogb3B0aW9ucy5yb3V0ZSxcbiAgICAgICAgJHJvdXRlcjogcm91dGVyLFxuICAgICAgICAkZG9tNzogJCxcbiAgICAgICAgJHRoZW1lOiB7XG4gICAgICAgICAgaW9zOiByb3V0ZXIuYXBwLnRoZW1lID09PSAnaW9zJyxcbiAgICAgICAgICBtZDogcm91dGVyLmFwcC50aGVtZSA9PT0gJ21kJyxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgICAgcmVzb2x2ZShjcmVhdGVkQ29tcG9uZW50LmVsLCB7IHBhZ2VFdmVudHM6IGNyZWF0ZWRDb21wb25lbnQub24gfSk7XG4gICAgfVxuICAgIGlmICh1cmwpIHtcbiAgICAgIC8vIExvYWQgdmlhIFhIUlxuICAgICAgaWYgKHJvdXRlci54aHIpIHtcbiAgICAgICAgcm91dGVyLnhoci5hYm9ydCgpO1xuICAgICAgICByb3V0ZXIueGhyID0gZmFsc2U7XG4gICAgICB9XG4gICAgICByb3V0ZXJcbiAgICAgICAgLnhoclJlcXVlc3QodXJsKVxuICAgICAgICAudGhlbigobG9hZGVkQ29tcG9uZW50KSA9PiB7XG4gICAgICAgICAgY29tcGlsZShDb21wb25lbnQucGFyc2UobG9hZGVkQ29tcG9uZW50KSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21waWxlKGNvbXBvbmVudCk7XG4gICAgfVxuICB9XG4gIG1vZGFsQ29tcG9uZW50TG9hZGVyKHJvb3RFbCwgY29tcG9uZW50LCBjb21wb25lbnRVcmwsIG9wdGlvbnMsIHJlc29sdmUsIHJlamVjdCkge1xuICAgIGNvbnN0IHJvdXRlciA9IHRoaXM7XG4gICAgcm91dGVyLmNvbXBvbmVudExvYWRlcihjb21wb25lbnQsIGNvbXBvbmVudFVybCwgb3B0aW9ucywgKGVsKSA9PiB7XG4gICAgICByZXNvbHZlKGVsKTtcbiAgICB9LCByZWplY3QpO1xuICB9XG4gIHRhYkNvbXBvbmVudExvYWRlcih0YWJFbCwgY29tcG9uZW50LCBjb21wb25lbnRVcmwsIG9wdGlvbnMsIHJlc29sdmUsIHJlamVjdCkge1xuICAgIGNvbnN0IHJvdXRlciA9IHRoaXM7XG4gICAgcm91dGVyLmNvbXBvbmVudExvYWRlcihjb21wb25lbnQsIGNvbXBvbmVudFVybCwgb3B0aW9ucywgKGVsKSA9PiB7XG4gICAgICByZXNvbHZlKGVsKTtcbiAgICB9LCByZWplY3QpO1xuICB9XG4gIHBhZ2VDb21wb25lbnRMb2FkZXIocm91dGVyRWwsIGNvbXBvbmVudCwgY29tcG9uZW50VXJsLCBvcHRpb25zLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICBjb25zdCByb3V0ZXIgPSB0aGlzO1xuICAgIHJvdXRlci5jb21wb25lbnRMb2FkZXIoY29tcG9uZW50LCBjb21wb25lbnRVcmwsIG9wdGlvbnMsIChlbCwgbmV3T3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgICByZXNvbHZlKGVsLCBuZXdPcHRpb25zKTtcbiAgICB9LCByZWplY3QpO1xuICB9XG4gIGdldFBhZ2VEYXRhKHBhZ2VFbCwgbmF2YmFyRWwsIGZyb20sIHRvLCByb3V0ZSA9IHt9LCBwYWdlRnJvbUVsKSB7XG4gICAgY29uc3Qgcm91dGVyID0gdGhpcztcbiAgICBjb25zdCAkcGFnZUVsID0gJChwYWdlRWwpO1xuICAgIGNvbnN0ICRuYXZiYXJFbCA9ICQobmF2YmFyRWwpO1xuICAgIGNvbnN0IGN1cnJlbnRQYWdlID0gJHBhZ2VFbFswXS5mN1BhZ2UgfHwge307XG4gICAgbGV0IGRpcmVjdGlvbjtcbiAgICBsZXQgcGFnZUZyb207XG4gICAgaWYgKChmcm9tID09PSAnbmV4dCcgJiYgdG8gPT09ICdjdXJyZW50JykgfHwgKGZyb20gPT09ICdjdXJyZW50JyAmJiB0byA9PT0gJ3ByZXZpb3VzJykpIGRpcmVjdGlvbiA9ICdmb3J3YXJkJztcbiAgICBpZiAoKGZyb20gPT09ICdjdXJyZW50JyAmJiB0byA9PT0gJ25leHQnKSB8fCAoZnJvbSA9PT0gJ3ByZXZpb3VzJyAmJiB0byA9PT0gJ2N1cnJlbnQnKSkgZGlyZWN0aW9uID0gJ2JhY2t3YXJkJztcbiAgICBpZiAoY3VycmVudFBhZ2UgJiYgIWN1cnJlbnRQYWdlLmZyb21QYWdlKSB7XG4gICAgICBjb25zdCAkcGFnZUZyb21FbCA9ICQocGFnZUZyb21FbCk7XG4gICAgICBpZiAoJHBhZ2VGcm9tRWwubGVuZ3RoKSB7XG4gICAgICAgIHBhZ2VGcm9tID0gJHBhZ2VGcm9tRWxbMF0uZjdQYWdlO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBwYWdlID0ge1xuICAgICAgYXBwOiByb3V0ZXIuYXBwLFxuICAgICAgdmlldzogcm91dGVyLnZpZXcsXG4gICAgICAkZWw6ICRwYWdlRWwsXG4gICAgICBlbDogJHBhZ2VFbFswXSxcbiAgICAgICRwYWdlRWwsXG4gICAgICBwYWdlRWw6ICRwYWdlRWxbMF0sXG4gICAgICAkbmF2YmFyRWwsXG4gICAgICBuYXZiYXJFbDogJG5hdmJhckVsWzBdLFxuICAgICAgbmFtZTogJHBhZ2VFbC5hdHRyKCdkYXRhLW5hbWUnKSxcbiAgICAgIHBvc2l0aW9uOiBmcm9tLFxuICAgICAgZnJvbSxcbiAgICAgIHRvLFxuICAgICAgZGlyZWN0aW9uLFxuICAgICAgcm91dGU6IGN1cnJlbnRQYWdlLnJvdXRlID8gY3VycmVudFBhZ2Uucm91dGUgOiByb3V0ZSxcbiAgICAgIHBhZ2VGcm9tOiBjdXJyZW50UGFnZS5wYWdlRnJvbSB8fCBwYWdlRnJvbSxcbiAgICB9O1xuXG4gICAgaWYgKCRuYXZiYXJFbCAmJiAkbmF2YmFyRWxbMF0pIHtcbiAgICAgICRuYXZiYXJFbFswXS5mN1BhZ2UgPSBwYWdlO1xuICAgIH1cbiAgICAkcGFnZUVsWzBdLmY3UGFnZSA9IHBhZ2U7XG4gICAgcmV0dXJuIHBhZ2U7XG4gIH1cbiAgLy8gQ2FsbGJhY2tzXG4gIHBhZ2VDYWxsYmFjayhjYWxsYmFjaywgcGFnZUVsLCBuYXZiYXJFbCwgZnJvbSwgdG8sIG9wdGlvbnMgPSB7fSwgcGFnZUZyb21FbCkge1xuICAgIGlmICghcGFnZUVsKSByZXR1cm47XG4gICAgY29uc3Qgcm91dGVyID0gdGhpcztcbiAgICBjb25zdCAkcGFnZUVsID0gJChwYWdlRWwpO1xuICAgIGlmICghJHBhZ2VFbC5sZW5ndGgpIHJldHVybjtcbiAgICBjb25zdCB7IHJvdXRlLCBvbiA9IHt9IH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IHJlc3RvcmVTY3JvbGxUb3BPbkJhY2sgPSByb3V0ZXIucGFyYW1zLnJlc3RvcmVTY3JvbGxUb3BPbkJhY2s7XG5cbiAgICBjb25zdCBjYW1lbE5hbWUgPSBgcGFnZSR7Y2FsbGJhY2tbMF0udG9VcHBlckNhc2UoKSArIGNhbGxiYWNrLnNsaWNlKDEsIGNhbGxiYWNrLmxlbmd0aCl9YDtcbiAgICBjb25zdCBjb2xvbk5hbWUgPSBgcGFnZToke2NhbGxiYWNrLnRvTG93ZXJDYXNlKCl9YDtcblxuICAgIGxldCBwYWdlID0ge307XG4gICAgaWYgKGNhbGxiYWNrID09PSAnYmVmb3JlUmVtb3ZlJyAmJiAkcGFnZUVsWzBdLmY3UGFnZSkge1xuICAgICAgcGFnZSA9IFV0aWxzLmV4dGVuZCgkcGFnZUVsWzBdLmY3UGFnZSwgeyBmcm9tLCB0bywgcG9zaXRpb246IGZyb20gfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhZ2UgPSByb3V0ZXIuZ2V0UGFnZURhdGEocGFnZUVsLCBuYXZiYXJFbCwgZnJvbSwgdG8sIHJvdXRlLCBwYWdlRnJvbUVsKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhdHRhY2hFdmVudHMoKSB7XG4gICAgICBpZiAoJHBhZ2VFbFswXS5mN1BhZ2VFdmVudHNBdHRhY2hlZCkgcmV0dXJuO1xuICAgICAgJHBhZ2VFbFswXS5mN1BhZ2VFdmVudHNBdHRhY2hlZCA9IHRydWU7XG4gICAgICBpZiAob3B0aW9ucy5wYWdlRXZlbnRzICYmIE9iamVjdC5rZXlzKG9wdGlvbnMucGFnZUV2ZW50cykubGVuZ3RoID4gMCkge1xuICAgICAgICAkcGFnZUVsWzBdLmY3UGFnZUV2ZW50cyA9IG9wdGlvbnMucGFnZUV2ZW50cztcbiAgICAgICAgT2JqZWN0LmtleXMob3B0aW9ucy5wYWdlRXZlbnRzKS5mb3JFYWNoKChldmVudE5hbWUpID0+IHtcbiAgICAgICAgICAkcGFnZUVsLm9uKGBwYWdlOiR7ZXZlbnROYW1lLnNwbGl0KCdwYWdlJylbMV0udG9Mb3dlckNhc2UoKX1gLCBvcHRpb25zLnBhZ2VFdmVudHNbZXZlbnROYW1lXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY2FsbGJhY2sgPT09ICdtb3VudGVkJykge1xuICAgICAgYXR0YWNoRXZlbnRzKCk7XG4gICAgfVxuICAgIGlmIChjYWxsYmFjayA9PT0gJ2luaXQnKSB7XG4gICAgICBpZiAocmVzdG9yZVNjcm9sbFRvcE9uQmFjayAmJiAoZnJvbSA9PT0gJ3ByZXZpb3VzJyB8fCAhZnJvbSkgJiYgdG8gPT09ICdjdXJyZW50JyAmJiByb3V0ZXIuc2Nyb2xsSGlzdG9yeVtwYWdlLnJvdXRlLnVybF0pIHtcbiAgICAgICAgJHBhZ2VFbC5maW5kKCcucGFnZS1jb250ZW50Jykuc2Nyb2xsVG9wKHJvdXRlci5zY3JvbGxIaXN0b3J5W3BhZ2Uucm91dGUudXJsXSk7XG4gICAgICB9XG4gICAgICBhdHRhY2hFdmVudHMoKTtcbiAgICAgIGlmICgkcGFnZUVsWzBdLmY3UGFnZUluaXRpYWxpemVkKSB7XG4gICAgICAgIGlmIChvbi5wYWdlUmVpbml0KSBvbi5wYWdlUmVpbml0KHBhZ2UpO1xuICAgICAgICAkcGFnZUVsLnRyaWdnZXIoJ3BhZ2U6cmVpbml0JywgcGFnZSk7XG4gICAgICAgIHJvdXRlci5lbWl0KCdwYWdlUmVpbml0JywgcGFnZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgICRwYWdlRWxbMF0uZjdQYWdlSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAocmVzdG9yZVNjcm9sbFRvcE9uQmFjayAmJiBjYWxsYmFjayA9PT0gJ2JlZm9yZU91dCcgJiYgZnJvbSA9PT0gJ2N1cnJlbnQnICYmIHRvID09PSAncHJldmlvdXMnKSB7XG4gICAgICAvLyBTYXZlIHNjcm9sbCBwb3NpdGlvblxuICAgICAgcm91dGVyLnNjcm9sbEhpc3RvcnlbcGFnZS5yb3V0ZS51cmxdID0gJHBhZ2VFbC5maW5kKCcucGFnZS1jb250ZW50Jykuc2Nyb2xsVG9wKCk7XG4gICAgfVxuICAgIGlmIChyZXN0b3JlU2Nyb2xsVG9wT25CYWNrICYmIGNhbGxiYWNrID09PSAnYmVmb3JlT3V0JyAmJiBmcm9tID09PSAnY3VycmVudCcgJiYgdG8gPT09ICduZXh0Jykge1xuICAgICAgLy8gRGVsZXRlIHNjcm9sbCBwb3NpdGlvblxuICAgICAgZGVsZXRlIHJvdXRlci5zY3JvbGxIaXN0b3J5W3BhZ2Uucm91dGUudXJsXTtcbiAgICB9XG5cbiAgICBpZiAob25bY2FtZWxOYW1lXSkgb25bY2FtZWxOYW1lXShwYWdlKTtcbiAgICAkcGFnZUVsLnRyaWdnZXIoY29sb25OYW1lLCBwYWdlKTtcbiAgICByb3V0ZXIuZW1pdChjYW1lbE5hbWUsIHBhZ2UpO1xuXG4gICAgaWYgKGNhbGxiYWNrID09PSAnYmVmb3JlUmVtb3ZlJykge1xuICAgICAgaWYgKCRwYWdlRWxbMF0uZjdQYWdlRXZlbnRzQXR0YWNoZWQgJiYgJHBhZ2VFbFswXS5mN1BhZ2VFdmVudHMpIHtcbiAgICAgICAgT2JqZWN0LmtleXMoJHBhZ2VFbFswXS5mN1BhZ2VFdmVudHMpLmZvckVhY2goKGV2ZW50TmFtZSkgPT4ge1xuICAgICAgICAgICRwYWdlRWwub2ZmKGBwYWdlOiR7ZXZlbnROYW1lLnNwbGl0KCdwYWdlJylbMV0udG9Mb3dlckNhc2UoKX1gLCAkcGFnZUVsWzBdLmY3UGFnZUV2ZW50c1tldmVudE5hbWVdKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNhbGxiYWNrID09PSAnYmVmb3JlUmVtb3ZlJykge1xuICAgICAgJHBhZ2VFbFswXS5mN1BhZ2UgPSBudWxsO1xuICAgICAgcGFnZSA9IG51bGw7XG4gICAgfVxuICB9XG4gIHNhdmVIaXN0b3J5KCkge1xuICAgIGNvbnN0IHJvdXRlciA9IHRoaXM7XG4gICAgcm91dGVyLnZpZXcuaGlzdG9yeSA9IHJvdXRlci5oaXN0b3J5O1xuICAgIGlmIChyb3V0ZXIucGFyYW1zLnB1c2hTdGF0ZSkge1xuICAgICAgd2luZG93LmxvY2FsU3RvcmFnZVtgZjdyb3V0ZXItdmlldyR7cm91dGVyLnZpZXcuaW5kZXh9LWhpc3RvcnlgXSA9IEpTT04uc3RyaW5naWZ5KHJvdXRlci5oaXN0b3J5KTtcbiAgICB9XG4gIH1cbiAgcmVzdG9yZUhpc3RvcnkoKSB7XG4gICAgY29uc3Qgcm91dGVyID0gdGhpcztcbiAgICBpZiAocm91dGVyLnBhcmFtcy5wdXNoU3RhdGUgJiYgd2luZG93LmxvY2FsU3RvcmFnZVtgZjdyb3V0ZXItdmlldyR7cm91dGVyLnZpZXcuaW5kZXh9LWhpc3RvcnlgXSkge1xuICAgICAgcm91dGVyLmhpc3RvcnkgPSBKU09OLnBhcnNlKHdpbmRvdy5sb2NhbFN0b3JhZ2VbYGY3cm91dGVyLXZpZXcke3JvdXRlci52aWV3LmluZGV4fS1oaXN0b3J5YF0pO1xuICAgICAgcm91dGVyLnZpZXcuaGlzdG9yeSA9IHJvdXRlci5oaXN0b3J5O1xuICAgIH1cbiAgfVxuICBjbGVhckhpc3RvcnkoKSB7XG4gICAgY29uc3Qgcm91dGVyID0gdGhpcztcbiAgICByb3V0ZXIuaGlzdG9yeSA9IFtdO1xuICAgIHJvdXRlci5zYXZlSGlzdG9yeSgpO1xuICB9XG4gIGluaXQoKSB7XG4gICAgY29uc3Qgcm91dGVyID0gdGhpcztcbiAgICBjb25zdCBhcHAgPSByb3V0ZXIuYXBwO1xuXG4gICAgLy8gSW5pdCBTd2lwZWJhY2tcbiAgICBpZiAocm91dGVyLnZpZXcgJiYgcm91dGVyLnBhcmFtcy5pb3NTd2lwZUJhY2sgJiYgYXBwLnRoZW1lID09PSAnaW9zJykge1xuICAgICAgU3dpcGVCYWNrKHJvdXRlcik7XG4gICAgfVxuXG4gICAgLy8gRHluYW1pYyBub3Qgc2VwYXJhdGVkIG5hdmJiYXJcbiAgICBpZiAocm91dGVyLmR5bmFtaWNOYXZiYXIgJiYgIXJvdXRlci5zZXBhcmF0ZU5hdmJhcikge1xuICAgICAgcm91dGVyLiRlbC5hZGRDbGFzcygncm91dGVyLWR5bmFtaWMtbmF2YmFyLWluc2lkZScpO1xuICAgIH1cblxuICAgIGxldCBpbml0VXJsID0gcm91dGVyLnBhcmFtcy51cmw7XG4gICAgbGV0IGRvY3VtZW50VXJsID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZi5zcGxpdChkb2N1bWVudC5sb2NhdGlvbi5vcmlnaW4pWzFdO1xuICAgIGxldCBoaXN0b3J5UmVzdG9yZWQ7XG4gICAgaWYgKCFyb3V0ZXIucGFyYW1zLnB1c2hTdGF0ZSkge1xuICAgICAgaWYgKCFpbml0VXJsKSB7XG4gICAgICAgIGluaXRVcmwgPSBkb2N1bWVudFVybDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHJvdXRlci5wYXJhbXMucHVzaFN0YXRlUm9vdCAmJiBkb2N1bWVudFVybC5pbmRleE9mKHJvdXRlci5wYXJhbXMucHVzaFN0YXRlUm9vdCkgPj0gMCkge1xuICAgICAgICBkb2N1bWVudFVybCA9IGRvY3VtZW50VXJsLnNwbGl0KHJvdXRlci5wYXJhbXMucHVzaFN0YXRlUm9vdClbMV07XG4gICAgICAgIGlmIChkb2N1bWVudFVybCA9PT0gJycpIGRvY3VtZW50VXJsID0gJy8nO1xuICAgICAgfVxuICAgICAgaWYgKGRvY3VtZW50VXJsLmluZGV4T2Yocm91dGVyLnBhcmFtcy5wdXNoU3RhdGVTZXBhcmF0b3IpID49IDApIHtcbiAgICAgICAgaW5pdFVybCA9IGRvY3VtZW50VXJsLnNwbGl0KHJvdXRlci5wYXJhbXMucHVzaFN0YXRlU2VwYXJhdG9yKVsxXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRVcmwgPSBkb2N1bWVudFVybDtcbiAgICAgIH1cbiAgICAgIHJvdXRlci5yZXN0b3JlSGlzdG9yeSgpO1xuICAgICAgaWYgKHJvdXRlci5oaXN0b3J5LmluZGV4T2YoaW5pdFVybCkgPj0gMCkge1xuICAgICAgICByb3V0ZXIuaGlzdG9yeSA9IHJvdXRlci5oaXN0b3J5LnNsaWNlKDAsIHJvdXRlci5oaXN0b3J5LmluZGV4T2YoaW5pdFVybCkgKyAxKTtcbiAgICAgIH0gZWxzZSBpZiAocm91dGVyLnBhcmFtcy51cmwgPT09IGluaXRVcmwpIHtcbiAgICAgICAgcm91dGVyLmhpc3RvcnkgPSBbaW5pdFVybF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb3V0ZXIuaGlzdG9yeSA9IFtkb2N1bWVudFVybC5zcGxpdChyb3V0ZXIucGFyYW1zLnB1c2hTdGF0ZVNlcGFyYXRvcilbMF0gfHwgJy8nLCBpbml0VXJsXTtcbiAgICAgIH1cbiAgICAgIGlmIChyb3V0ZXIuaGlzdG9yeS5sZW5ndGggPiAxKSB7XG4gICAgICAgIGhpc3RvcnlSZXN0b3JlZCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb3V0ZXIuaGlzdG9yeSA9IFtdO1xuICAgICAgfVxuICAgICAgcm91dGVyLnNhdmVIaXN0b3J5KCk7XG4gICAgfVxuICAgIGxldCBjdXJyZW50Um91dGU7XG4gICAgaWYgKHJvdXRlci5oaXN0b3J5Lmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIFdpbGwgbG9hZCBwYWdlXG4gICAgICBjdXJyZW50Um91dGUgPSByb3V0ZXIuZmluZE1hdGNoaW5nUm91dGUocm91dGVyLmhpc3RvcnlbMF0pO1xuICAgICAgaWYgKCFjdXJyZW50Um91dGUpIHtcbiAgICAgICAgY3VycmVudFJvdXRlID0gVXRpbHMuZXh0ZW5kKHJvdXRlci5maW5kTWF0Y2hpbmdSb3V0ZShyb3V0ZXIuaGlzdG9yeVswXSwgdHJ1ZSksIHtcbiAgICAgICAgICByb3V0ZToge1xuICAgICAgICAgICAgdXJsOiByb3V0ZXIuaGlzdG9yeVswXSxcbiAgICAgICAgICAgIHBhdGg6IHJvdXRlci5oaXN0b3J5WzBdLnNwbGl0KCc/JylbMF0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIERvbid0IGxvYWQgcGFnZVxuICAgICAgY3VycmVudFJvdXRlID0gcm91dGVyLmZpbmRNYXRjaGluZ1JvdXRlKGluaXRVcmwpO1xuICAgICAgaWYgKCFjdXJyZW50Um91dGUpIHtcbiAgICAgICAgY3VycmVudFJvdXRlID0gVXRpbHMuZXh0ZW5kKHJvdXRlci5maW5kTWF0Y2hpbmdSb3V0ZShpbml0VXJsLCB0cnVlKSwge1xuICAgICAgICAgIHJvdXRlOiB7XG4gICAgICAgICAgICB1cmw6IGluaXRVcmwsXG4gICAgICAgICAgICBwYXRoOiBpbml0VXJsLnNwbGl0KCc/JylbMF0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJvdXRlci5wYXJhbXMuc3RhY2tQYWdlcykge1xuICAgICAgcm91dGVyLiRlbC5jaGlsZHJlbignLnBhZ2UnKS5lYWNoKChpbmRleCwgcGFnZUVsKSA9PiB7XG4gICAgICAgIGNvbnN0ICRwYWdlRWwgPSAkKHBhZ2VFbCk7XG4gICAgICAgIHJvdXRlci5pbml0aWFsUGFnZXMucHVzaCgkcGFnZUVsWzBdKTtcbiAgICAgICAgaWYgKHJvdXRlci5zZXBhcmF0ZU5hdmJhciAmJiAkcGFnZUVsLmNoaWxkcmVuKCcubmF2YmFyJykubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJvdXRlci5pbml0aWFsTmF2YmFycy5wdXNoKCRwYWdlRWwuY2hpbGRyZW4oJy5uYXZiYXInKS5maW5kKCcubmF2YmFyLWlubmVyJylbMF0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocm91dGVyLiRlbC5jaGlsZHJlbignLnBhZ2U6bm90KC5zdGFja2VkKScpLmxlbmd0aCA9PT0gMCAmJiBpbml0VXJsKSB7XG4gICAgICAvLyBObyBwYWdlcyBwcmVzZW50ZWQgaW4gRE9NLCByZWxvYWQgbmV3IHBhZ2VcbiAgICAgIHJvdXRlci5uYXZpZ2F0ZShpbml0VXJsLCB7XG4gICAgICAgIHJlbG9hZEN1cnJlbnQ6IHRydWUsXG4gICAgICAgIHB1c2hTdGF0ZTogZmFsc2UsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSW5pdCBjdXJyZW50IERPTSBwYWdlXG4gICAgICByb3V0ZXIuY3VycmVudFJvdXRlID0gY3VycmVudFJvdXRlO1xuICAgICAgcm91dGVyLiRlbC5jaGlsZHJlbignLnBhZ2U6bm90KC5zdGFja2VkKScpLmVhY2goKGluZGV4LCBwYWdlRWwpID0+IHtcbiAgICAgICAgY29uc3QgJHBhZ2VFbCA9ICQocGFnZUVsKTtcbiAgICAgICAgbGV0ICRuYXZiYXJJbm5lckVsO1xuICAgICAgICAkcGFnZUVsLmFkZENsYXNzKCdwYWdlLWN1cnJlbnQnKTtcbiAgICAgICAgaWYgKHJvdXRlci5zZXBhcmF0ZU5hdmJhcikge1xuICAgICAgICAgICRuYXZiYXJJbm5lckVsID0gJHBhZ2VFbC5jaGlsZHJlbignLm5hdmJhcicpLmNoaWxkcmVuKCcubmF2YmFyLWlubmVyJyk7XG4gICAgICAgICAgaWYgKCRuYXZiYXJJbm5lckVsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJvdXRlci4kbmF2YmFyRWwuYXBwZW5kKCRuYXZiYXJJbm5lckVsKTtcbiAgICAgICAgICAgICRwYWdlRWwuY2hpbGRyZW4oJy5uYXZiYXInKS5yZW1vdmUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcm91dGVyLiRuYXZiYXJFbC5hZGRDbGFzcygnbmF2YmFyLWhpZGRlbicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByb3V0ZXIucGFnZUNhbGxiYWNrKCdpbml0JywgJHBhZ2VFbCwgJG5hdmJhcklubmVyRWwsICdjdXJyZW50JywgdW5kZWZpbmVkLCB7IHJvdXRlOiByb3V0ZXIuY3VycmVudFJvdXRlIH0pO1xuICAgICAgfSk7XG4gICAgICBpZiAoaGlzdG9yeVJlc3RvcmVkKSB7XG4gICAgICAgIHJvdXRlci5uYXZpZ2F0ZShpbml0VXJsLCB7XG4gICAgICAgICAgcHVzaFN0YXRlOiBmYWxzZSxcbiAgICAgICAgICBoaXN0b3J5OiBmYWxzZSxcbiAgICAgICAgICBhbmltYXRlOiByb3V0ZXIucGFyYW1zLnB1c2hTdGF0ZUFuaW1hdGVPbkxvYWQsXG4gICAgICAgICAgb246IHtcbiAgICAgICAgICAgIHBhZ2VBZnRlckluKCkge1xuICAgICAgICAgICAgICBpZiAocm91dGVyLmhpc3RvcnkubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgIHJvdXRlci5iYWNrKHsgcHJlbG9hZDogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvdXRlci5oaXN0b3J5LnB1c2goaW5pdFVybCk7XG4gICAgICAgIHJvdXRlci5zYXZlSGlzdG9yeSgpO1xuICAgICAgfVxuICAgIH1cbiAgICByb3V0ZXIuZW1pdCgncm91dGVySW5pdCcsIHJvdXRlcik7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICBsZXQgcm91dGVyID0gdGhpcztcblxuICAgIHJvdXRlci5lbWl0KCdyb3V0ZXJEZXN0cm95Jywgcm91dGVyKTtcblxuICAgIC8vIERlbGV0ZSBwcm9wcyAmIG1ldGhvZHNcbiAgICBPYmplY3Qua2V5cyhyb3V0ZXIpLmZvckVhY2goKHJvdXRlclByb3ApID0+IHtcbiAgICAgIHJvdXRlcltyb3V0ZXJQcm9wXSA9IG51bGw7XG4gICAgICBkZWxldGUgcm91dGVyW3JvdXRlclByb3BdO1xuICAgIH0pO1xuXG4gICAgcm91dGVyID0gbnVsbDtcbiAgfVxufVxuXG52YXIgUm91dGVyID0ge1xuICBuYW1lOiAncm91dGVyJyxcbiAgc3RhdGljOiB7XG4gICAgUm91dGVyOiBSb3V0ZXIkMSxcbiAgfSxcbiAgaW5zdGFuY2U6IHtcbiAgICBjYWNoZToge1xuICAgICAgeGhyOiBbXSxcbiAgICAgIHRlbXBsYXRlczogW10sXG4gICAgICBjb21wb25lbnRzOiBbXSxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSB0aGlzO1xuICAgIGlmIChpbnN0YW5jZS5hcHApIHtcbiAgICAgIC8vIFZpZXcgUm91dGVyXG4gICAgICBpbnN0YW5jZS5yb3V0ZXIgPSBuZXcgUm91dGVyJDEoaW5zdGFuY2UuYXBwLCBpbnN0YW5jZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEFwcCBSb3V0ZXJcbiAgICAgIGluc3RhbmNlLnJvdXRlciA9IG5ldyBSb3V0ZXIkMShpbnN0YW5jZSk7XG4gICAgfVxuICB9LFxufTtcblxudmFyIEhpc3RvcnkkMiA9IHtcbiAgbmFtZTogJ2hpc3RvcnknLFxuICBvbjoge1xuICAgIGluaXQoKSB7XG4gICAgICBIaXN0b3J5LmluaXQodGhpcyk7XG4gICAgfSxcbiAgfSxcbn07XG5cbmNsYXNzIFZpZXcgZXh0ZW5kcyBGcmFtZXdvcms3Q2xhc3Mge1xuICBjb25zdHJ1Y3RvcihhcHBJbnN0YW5jZSwgZWwsIHZpZXdQYXJhbXMgPSB7fSkge1xuICAgIHN1cGVyKHZpZXdQYXJhbXMsIFthcHBJbnN0YW5jZV0pO1xuXG4gICAgY29uc3QgYXBwID0gYXBwSW5zdGFuY2U7XG4gICAgY29uc3QgJGVsID0gJChlbCk7XG4gICAgY29uc3QgdmlldyA9IHRoaXM7XG5cbiAgICBjb25zdCBkZWZhdWx0cyA9IHtcbiAgICAgIG5hbWU6IHVuZGVmaW5lZCxcbiAgICAgIG1haW46IGZhbHNlLFxuICAgICAgcm91dGVzOiBbXSxcbiAgICAgIHJvdXRlc0FkZDogW10sXG4gICAgICBsaW5rc1ZpZXc6IHVuZGVmaW5lZCxcbiAgICB9O1xuXG4gICAgLy8gRGVmYXVsdCBWaWV3IHBhcmFtc1xuICAgIHZpZXcucGFyYW1zID0gVXRpbHMuZXh0ZW5kKGRlZmF1bHRzLCBhcHAucGFyYW1zLnZpZXcsIHZpZXdQYXJhbXMpO1xuXG4gICAgLy8gUm91dGVzXG4gICAgaWYgKHZpZXcucGFyYW1zLnJvdXRlcy5sZW5ndGggPiAwKSB7XG4gICAgICB2aWV3LnJvdXRlcyA9IHZpZXcucGFyYW1zLnJvdXRlcztcbiAgICB9IGVsc2Uge1xuICAgICAgdmlldy5yb3V0ZXMgPSBbXS5jb25jYXQoYXBwLnJvdXRlcywgdmlldy5wYXJhbXMucm91dGVzQWRkKTtcbiAgICB9XG5cbiAgICAvLyBTZWxlY3RvclxuICAgIGxldCBzZWxlY3RvcjtcbiAgICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykgc2VsZWN0b3IgPSBlbDtcbiAgICBlbHNlIHtcbiAgICAgIC8vIFN1cHBvc2VkIHRvIGJlIEhUTUxFbGVtZW50IG9yIERvbTdcbiAgICAgIHNlbGVjdG9yID0gKCRlbC5hdHRyKCdpZCcpID8gYCMkeyRlbC5hdHRyKCdpZCcpfWAgOiAnJykgKyAoJGVsLmF0dHIoJ2NsYXNzJykgPyBgLiR7JGVsLmF0dHIoJ2NsYXNzJykucmVwbGFjZSgvIC9nLCAnLicpLnJlcGxhY2UoJy5hY3RpdmUnLCAnJyl9YCA6ICcnKTtcbiAgICB9XG5cbiAgICAvLyBEeW5hbWljTmF2YmFyXG4gICAgbGV0ICRuYXZiYXJFbDtcbiAgICBpZiAoYXBwLnRoZW1lID09PSAnaW9zJyAmJiB2aWV3LnBhcmFtcy5pb3NEeW5hbWljTmF2YmFyICYmIHZpZXcucGFyYW1zLmlvc1NlcGFyYXRlRHluYW1pY05hdmJhcikge1xuICAgICAgJG5hdmJhckVsID0gJGVsLmNoaWxkcmVuKCcubmF2YmFyJykuZXEoMCk7XG4gICAgICBpZiAoJG5hdmJhckVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAkbmF2YmFyRWwgPSAkKCc8ZGl2IGNsYXNzPVwibmF2YmFyXCI+PC9kaXY+Jyk7XG4gICAgICAgICRlbC5wcmVwZW5kKCRuYXZiYXJFbCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVmlldyBQcm9wc1xuICAgIFV0aWxzLmV4dGVuZChmYWxzZSwgdmlldywge1xuICAgICAgYXBwLFxuICAgICAgJGVsLFxuICAgICAgZWw6ICRlbFswXSxcbiAgICAgIG5hbWU6IHZpZXcucGFyYW1zLm5hbWUsXG4gICAgICBtYWluOiB2aWV3LnBhcmFtcy5tYWluIHx8ICRlbC5oYXNDbGFzcygndmlldy1tYWluJyksXG4gICAgICAkbmF2YmFyRWwsXG4gICAgICBuYXZiYXJFbDogJG5hdmJhckVsID8gJG5hdmJhckVsWzBdIDogdW5kZWZpbmVkLFxuICAgICAgc2VsZWN0b3IsXG4gICAgICBoaXN0b3J5OiBbXSxcbiAgICAgIHNjcm9sbEhpc3Rvcnk6IHt9LFxuICAgIH0pO1xuXG4gICAgJGVsWzBdLmY3VmlldyA9IHZpZXc7XG5cbiAgICAvLyBJbnN0YWxsIE1vZHVsZXNcbiAgICB2aWV3LnVzZUluc3RhbmNlTW9kdWxlcygpO1xuXG4gICAgLy8gQWRkIHRvIGFwcFxuICAgIGFwcC52aWV3cy5wdXNoKHZpZXcpO1xuICAgIGlmICh2aWV3Lm1haW4pIHtcbiAgICAgIGFwcC52aWV3cy5tYWluID0gdmlldztcbiAgICB9IGVsc2UgaWYgKHZpZXcubmFtZSkge1xuICAgICAgYXBwLnZpZXdzW3ZpZXcubmFtZV0gPSB2aWV3O1xuICAgIH1cblxuICAgIHZpZXcuaW5kZXggPSBhcHAudmlld3MuaW5kZXhPZih2aWV3KTtcblxuICAgIC8vIEluaXQgVmlld1xuICAgIGlmIChhcHAuaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHZpZXcuaW5pdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcHAub24oJ2luaXQnLCB2aWV3LmluaXQpO1xuICAgIH1cblxuICAgIHJldHVybiB2aWV3O1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgbGV0IHZpZXcgPSB0aGlzO1xuICAgIGNvbnN0IGFwcCA9IHZpZXcuYXBwO1xuXG4gICAgdmlldy4kZWwudHJpZ2dlcigndmlldzpiZWZvcmVkZXN0cm95Jywgdmlldyk7XG4gICAgdmlldy5lbWl0KCdsb2NhbDo6YmVmb3JlRGVzdHJveSB2aWV3QmVmb3JlRGVzdHJveScsIHZpZXcpO1xuXG4gICAgaWYgKHZpZXcubWFpbikge1xuICAgICAgYXBwLnZpZXdzLm1haW4gPSBudWxsO1xuICAgICAgZGVsZXRlIGFwcC52aWV3cy5tYWluO1xuICAgIH0gZWxzZSBpZiAodmlldy5uYW1lKSB7XG4gICAgICBhcHAudmlld3Nbdmlldy5uYW1lXSA9IG51bGw7XG4gICAgICBkZWxldGUgYXBwLnZpZXdzW3ZpZXcubmFtZV07XG4gICAgfVxuICAgIHZpZXcuJGVsWzBdLmY3VmlldyA9IG51bGw7XG4gICAgZGVsZXRlIHZpZXcuJGVsWzBdLmY3VmlldztcblxuICAgIGFwcC52aWV3cy5zcGxpY2UoYXBwLnZpZXdzLmluZGV4T2YodmlldyksIDEpO1xuXG4gICAgLy8gRGVzdHJveSBSb3V0ZXJcbiAgICB2aWV3LnJvdXRlci5kZXN0cm95KCk7XG5cbiAgICB2aWV3LmVtaXQoJ2xvY2FsOjpkZXN0cm95IHZpZXdEZXN0cm95Jywgdmlldyk7XG5cbiAgICAvLyBEZWxldGUgcHJvcHMgJiBtZXRob2RzXG4gICAgT2JqZWN0LmtleXModmlldykuZm9yRWFjaCgodmlld1Byb3ApID0+IHtcbiAgICAgIHZpZXdbdmlld1Byb3BdID0gbnVsbDtcbiAgICAgIGRlbGV0ZSB2aWV3W3ZpZXdQcm9wXTtcbiAgICB9KTtcblxuICAgIHZpZXcgPSBudWxsO1xuICB9XG4gIGluaXQoKSB7XG4gICAgY29uc3QgdmlldyA9IHRoaXM7XG4gICAgdmlldy5yb3V0ZXIuaW5pdCgpO1xuICB9XG59XG5cbi8vIFVzZSBSb3V0ZXJcblZpZXcudXNlKFJvdXRlcik7XG5cbmZ1bmN0aW9uIGluaXRDbGlja3MoYXBwKSB7XG4gIGZ1bmN0aW9uIGhhbmRsZUNsaWNrcyhlKSB7XG4gICAgY29uc3QgY2xpY2tlZCA9ICQoZS50YXJnZXQpO1xuICAgIGNvbnN0IGNsaWNrZWRMaW5rID0gY2xpY2tlZC5jbG9zZXN0KCdhJyk7XG4gICAgY29uc3QgaXNMaW5rID0gY2xpY2tlZExpbmsubGVuZ3RoID4gMDtcbiAgICBjb25zdCB1cmwgPSBpc0xpbmsgJiYgY2xpY2tlZExpbmsuYXR0cignaHJlZicpO1xuICAgIGNvbnN0IGlzVGFiTGluayA9IGlzTGluayAmJiBjbGlja2VkTGluay5oYXNDbGFzcygndGFiLWxpbmsnKSAmJiAoY2xpY2tlZExpbmsuYXR0cignZGF0YS10YWInKSB8fCAodXJsICYmIHVybC5pbmRleE9mKCcjJykgPT09IDApKTtcblxuICAgIC8vIENoZWNrIGlmIGxpbmsgaXMgZXh0ZXJuYWxcbiAgICBpZiAoaXNMaW5rKSB7XG4gICAgICBpZiAoY2xpY2tlZExpbmsuaXMoYXBwLnBhcmFtcy5jbGlja3MuZXh0ZXJuYWxMaW5rcykgfHwgKHVybCAmJiB1cmwuaW5kZXhPZignamF2YXNjcmlwdDonKSA+PSAwKSkge1xuICAgICAgICBpZiAodXJsICYmIGNsaWNrZWRMaW5rLmF0dHIoJ3RhcmdldCcpID09PSAnX3N5c3RlbScpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgd2luZG93Lm9wZW4odXJsLCAnX3N5c3RlbScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNb2R1bGVzIENsaWNrc1xuICAgIE9iamVjdC5rZXlzKGFwcC5tb2R1bGVzKS5mb3JFYWNoKChtb2R1bGVOYW1lKSA9PiB7XG4gICAgICBjb25zdCBtb2R1bGVDbGlja3MgPSBhcHAubW9kdWxlc1ttb2R1bGVOYW1lXS5jbGlja3M7XG4gICAgICBpZiAoIW1vZHVsZUNsaWNrcykgcmV0dXJuO1xuICAgICAgT2JqZWN0LmtleXMobW9kdWxlQ2xpY2tzKS5mb3JFYWNoKChjbGlja1NlbGVjdG9yKSA9PiB7XG4gICAgICAgIGNvbnN0IG1hdGNoaW5nQ2xpY2tlZEVsZW1lbnQgPSBjbGlja2VkLmNsb3Nlc3QoY2xpY2tTZWxlY3RvcikuZXEoMCk7XG4gICAgICAgIGlmIChtYXRjaGluZ0NsaWNrZWRFbGVtZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBtb2R1bGVDbGlja3NbY2xpY2tTZWxlY3Rvcl0uY2FsbChhcHAsIG1hdGNoaW5nQ2xpY2tlZEVsZW1lbnQsIG1hdGNoaW5nQ2xpY2tlZEVsZW1lbnQuZGF0YXNldCgpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBMb2FkIFBhZ2VcbiAgICBsZXQgY2xpY2tlZExpbmtEYXRhID0ge307XG4gICAgaWYgKGlzTGluaykge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgY2xpY2tlZExpbmtEYXRhID0gY2xpY2tlZExpbmsuZGF0YXNldCgpO1xuICAgIH1cbiAgICBjb25zdCB2YWxpZFVybCA9IHVybCAmJiB1cmwubGVuZ3RoID4gMCAmJiB1cmwgIT09ICcjJyAmJiAhaXNUYWJMaW5rO1xuICAgIGNvbnN0IHRlbXBsYXRlID0gY2xpY2tlZExpbmtEYXRhLnRlbXBsYXRlO1xuICAgIGlmICh2YWxpZFVybCB8fCBjbGlja2VkTGluay5oYXNDbGFzcygnYmFjaycpIHx8IHRlbXBsYXRlKSB7XG4gICAgICBsZXQgdmlldztcbiAgICAgIGlmIChjbGlja2VkTGlua0RhdGEudmlldykge1xuICAgICAgICB2aWV3ID0gJChjbGlja2VkTGlua0RhdGEudmlldylbMF0uZjdWaWV3O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmlldyA9IGNsaWNrZWQucGFyZW50cygnLnZpZXcnKVswXSAmJiBjbGlja2VkLnBhcmVudHMoJy52aWV3JylbMF0uZjdWaWV3O1xuICAgICAgICBpZiAodmlldyAmJiB2aWV3LnBhcmFtcy5saW5rc1ZpZXcpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHZpZXcucGFyYW1zLmxpbmtzVmlldyA9PT0gJ3N0cmluZycpIHZpZXcgPSAkKHZpZXcucGFyYW1zLmxpbmtzVmlldylbMF0uZjdWaWV3O1xuICAgICAgICAgIGVsc2UgaWYgKHZpZXcucGFyYW1zLmxpbmtzVmlldyBpbnN0YW5jZW9mIFZpZXcpIHZpZXcgPSB2aWV3LnBhcmFtcy5saW5rc1ZpZXc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghdmlldykge1xuICAgICAgICBpZiAoYXBwLnZpZXdzLm1haW4pIHZpZXcgPSBhcHAudmlld3MubWFpbjtcbiAgICAgIH1cbiAgICAgIGlmICghdmlldykgcmV0dXJuO1xuICAgICAgaWYgKGNsaWNrZWRMaW5rLmhhc0NsYXNzKCdiYWNrJykpIHZpZXcucm91dGVyLmJhY2sodXJsLCBjbGlja2VkTGlua0RhdGEpO1xuICAgICAgZWxzZSB2aWV3LnJvdXRlci5uYXZpZ2F0ZSh1cmwsIGNsaWNrZWRMaW5rRGF0YSk7XG4gICAgfVxuICB9XG5cbiAgYXBwLm9uKCdjbGljaycsIGhhbmRsZUNsaWNrcyk7XG5cbiAgLy8gUHJldmVudCBzY3JvbGxpbmcgb24gb3ZlcmxheXNcbiAgZnVuY3Rpb24gcHJldmVudFNjcm9sbGluZyhlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG4gIGlmIChTdXBwb3J0JDEudG91Y2ggJiYgIURldmljZSQxLmFuZHJvaWQpIHtcbiAgICBjb25zdCBhY3RpdmVMaXN0ZW5lciA9IFN1cHBvcnQkMS5wYXNzaXZlTGlzdGVuZXIgPyB7IHBhc3NpdmU6IGZhbHNlLCBjYXB0dXJlOiBmYWxzZSB9IDogZmFsc2U7XG4gICAgJChkb2N1bWVudCkub24oKGFwcC5wYXJhbXMuZmFzdENsaWNrcyA/ICd0b3VjaHN0YXJ0JyA6ICd0b3VjaG1vdmUnKSwgJy5wYW5lbC1iYWNrZHJvcCwgLmRpYWxvZy1iYWNrZHJvcCwgLnByZWxvYWRlci1pbmRpY2F0b3Itb3ZlcmxheSwgLnBvcHVwLWJhY2tkcm9wLCAuc2VhcmNoYmFyLWJhY2tkcm9wJywgcHJldmVudFNjcm9sbGluZywgYWN0aXZlTGlzdGVuZXIpO1xuICB9XG59XG52YXIgQ2xpY2tzID0ge1xuICBuYW1lOiAnY2xpY2tzJyxcbiAgcGFyYW1zOiB7XG4gICAgY2xpY2tzOiB7XG4gICAgICAvLyBFeHRlcm5hbCBMaW5rc1xuICAgICAgZXh0ZXJuYWxMaW5rczogJy5leHRlcm5hbCcsXG4gICAgfSxcbiAgfSxcbiAgb246IHtcbiAgICBpbml0KCkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGluaXRDbGlja3MoYXBwKTtcbiAgICB9LFxuICB9LFxufTtcblxuY29uc3QgU3RhdHVzYmFyID0ge1xuICBoaWRlKCkge1xuICAgICQoJ2h0bWwnKS5yZW1vdmVDbGFzcygnd2l0aC1zdGF0dXNiYXInKTtcbiAgICBpZiAoRGV2aWNlJDEuY29yZG92YSAmJiB3aW5kb3cuU3RhdHVzQmFyKSB7XG4gICAgICB3aW5kb3cuU3RhdHVzQmFyLmhpZGUoKTtcbiAgICB9XG4gIH0sXG4gIHNob3coKSB7XG4gICAgJCgnaHRtbCcpLmFkZENsYXNzKCd3aXRoLXN0YXR1c2JhcicpO1xuICAgIGlmIChEZXZpY2UkMS5jb3Jkb3ZhICYmIHdpbmRvdy5TdGF0dXNCYXIpIHtcbiAgICAgIHdpbmRvdy5TdGF0dXNCYXIuc2hvdygpO1xuICAgIH1cbiAgfSxcbiAgb25DbGljaygpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIGxldCBwYWdlQ29udGVudDtcbiAgICBpZiAoJCgnLnBvcHVwLm1vZGFsLWluJykubGVuZ3RoID4gMCkge1xuICAgICAgLy8gQ2hlY2sgZm9yIG9wZW5lZCBwb3B1cFxuICAgICAgcGFnZUNvbnRlbnQgPSAkKCcucG9wdXAubW9kYWwtaW4nKS5maW5kKCcucGFnZTpub3QoLnBhZ2UtcHJldmlvdXMpOm5vdCgucGFnZS1uZXh0KTpub3QoLmNhY2hlZCknKS5maW5kKCcucGFnZS1jb250ZW50Jyk7XG4gICAgfSBlbHNlIGlmICgkKCcucGFuZWwucGFuZWwtYWN0aXZlJykubGVuZ3RoID4gMCkge1xuICAgICAgLy8gQ2hlY2sgZm9yIG9wZW5lZCBwYW5lbFxuICAgICAgcGFnZUNvbnRlbnQgPSAkKCcucGFuZWwucGFuZWwtYWN0aXZlJykuZmluZCgnLnBhZ2U6bm90KC5wYWdlLXByZXZpb3VzKTpub3QoLnBhZ2UtbmV4dCk6bm90KC5jYWNoZWQpJykuZmluZCgnLnBhZ2UtY29udGVudCcpO1xuICAgIH0gZWxzZSBpZiAoJCgnLnZpZXdzID4gLnZpZXcudGFiLWFjdGl2ZScpLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIFZpZXcgaW4gdGFiIGJhciBhcHAgbGF5b3V0XG4gICAgICBwYWdlQ29udGVudCA9ICQoJy52aWV3cyA+IC52aWV3LnRhYi1hY3RpdmUnKS5maW5kKCcucGFnZTpub3QoLnBhZ2UtcHJldmlvdXMpOm5vdCgucGFnZS1uZXh0KTpub3QoLmNhY2hlZCknKS5maW5kKCcucGFnZS1jb250ZW50Jyk7XG4gICAgfSBlbHNlIGlmICgkKCcudmlld3MnKS5sZW5ndGggPiAwKSB7XG4gICAgICBwYWdlQ29udGVudCA9ICQoJy52aWV3cycpLmZpbmQoJy5wYWdlOm5vdCgucGFnZS1wcmV2aW91cyk6bm90KC5wYWdlLW5leHQpOm5vdCguY2FjaGVkKScpLmZpbmQoJy5wYWdlLWNvbnRlbnQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFnZUNvbnRlbnQgPSBhcHAucm9vdC5jaGlsZHJlbignLnZpZXcnKS5maW5kKCcucGFnZTpub3QoLnBhZ2UtcHJldmlvdXMpOm5vdCgucGFnZS1uZXh0KTpub3QoLmNhY2hlZCknKS5maW5kKCcucGFnZS1jb250ZW50Jyk7XG4gICAgfVxuXG4gICAgaWYgKHBhZ2VDb250ZW50ICYmIHBhZ2VDb250ZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIENoZWNrIGZvciB0YWJcbiAgICAgIGlmIChwYWdlQ29udGVudC5oYXNDbGFzcygndGFiJykpIHtcbiAgICAgICAgcGFnZUNvbnRlbnQgPSBwYWdlQ29udGVudC5wYXJlbnQoJy50YWJzJykuY2hpbGRyZW4oJy5wYWdlLWNvbnRlbnQudGFiLWFjdGl2ZScpO1xuICAgICAgfVxuICAgICAgaWYgKHBhZ2VDb250ZW50Lmxlbmd0aCA+IDApIHBhZ2VDb250ZW50LnNjcm9sbFRvcCgwLCAzMDApO1xuICAgIH1cbiAgfSxcbiAgc2V0SW9zVGV4dENvbG9yKGNvbG9yKSB7XG4gICAgaWYgKERldmljZSQxLmNvcmRvdmEgJiYgd2luZG93LlN0YXR1c0Jhcikge1xuICAgICAgaWYgKGNvbG9yID09PSAnd2hpdGUnKSB7XG4gICAgICAgIHdpbmRvdy5TdGF0dXNCYXIuc3R5bGVMaWdodENvbnRlbnQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5TdGF0dXNCYXIuc3R5bGVEZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBzZXRCYWNrZ3JvdW5kQ29sb3IoY29sb3IpIHtcbiAgICBpZiAoRGV2aWNlJDEuY29yZG92YSAmJiB3aW5kb3cuU3RhdHVzQmFyKSB7XG4gICAgICBpZiAoRGV2aWNlJDEubmVlZHNTdGF0dXNiYXIoKSkge1xuICAgICAgICAvLyBDaGFuZ2UgT3ZlcmxheSBDb2xvcjtcbiAgICAgICAgJCgnLnN0YXR1c2JhcicpLmNzcygnYmFja2dyb3VuZC1jb2xvcicsIGNvbG9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIENoYW5nZSBSZWFsIFN0YXR1cyBiYXIgY29sb3JcbiAgICAgICAgd2luZG93LlN0YXR1c0Jhci5iYWNrZ3JvdW5kQ29sb3JCeUhleFN0cmluZyhjb2xvcik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICQoJy5zdGF0dXNiYXInKS5jc3MoJ2JhY2tncm91bmQtY29sb3InLCBjb2xvcik7XG4gICAgfVxuICB9LFxuICBpc1Zpc2libGUoKSB7XG4gICAgaWYgKERldmljZSQxLmNvcmRvdmEgJiYgd2luZG93LlN0YXR1c0Jhcikge1xuICAgICAgcmV0dXJuIHdpbmRvdy5TdGF0dXNCYXIuaXNWaXNpYmxlO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9LFxuICBpbml0KCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gYXBwLnBhcmFtcy5zdGF0dXNiYXI7XG5cbiAgICBpZiAocGFyYW1zLm92ZXJsYXkgPT09ICdhdXRvJykge1xuICAgICAgaWYgKERldmljZSQxLm5lZWRzU3RhdHVzYmFyKCkpIHtcbiAgICAgICAgJCgnaHRtbCcpLmFkZENsYXNzKCd3aXRoLXN0YXR1c2JhcicpO1xuICAgICAgfVxuICAgICAgaWYgKERldmljZSQxLmNvcmRvdmEpIHtcbiAgICAgICAgJChkb2N1bWVudCkub24oJ3Jlc3VtZScsICgpID0+IHtcbiAgICAgICAgICBpZiAoRGV2aWNlJDEubmVlZHNTdGF0dXNiYXIoKSkge1xuICAgICAgICAgICAgJCgnaHRtbCcpLmFkZENsYXNzKCd3aXRoLXN0YXR1c2JhcicpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkKCdodG1sJykucmVtb3ZlQ2xhc3MoJ3dpdGgtc3RhdHVzYmFyJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJhbXMub3ZlcmxheSA9PT0gdHJ1ZSkge1xuICAgICAgJCgnaHRtbCcpLmFkZENsYXNzKCd3aXRoLXN0YXR1c2JhcicpO1xuICAgIH0gZWxzZSBpZiAocGFyYW1zLm92ZXJsYXkgPT09IGZhbHNlKSB7XG4gICAgICAkKCdodG1sJykucmVtb3ZlQ2xhc3MoJ3dpdGgtc3RhdHVzYmFyJyk7XG4gICAgfVxuXG4gICAgaWYgKERldmljZSQxLmNvcmRvdmEgJiYgd2luZG93LlN0YXR1c0Jhcikge1xuICAgICAgaWYgKHBhcmFtcy5zY3JvbGxUb3BPbkNsaWNrKSB7XG4gICAgICAgICQod2luZG93KS5vbignc3RhdHVzVGFwJywgU3RhdHVzYmFyLm9uQ2xpY2suYmluZChhcHApKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMuaW9zT3ZlcmxheXNXZWJWaWV3KSB7XG4gICAgICAgIHdpbmRvdy5TdGF0dXNCYXIub3ZlcmxheXNXZWJWaWV3KHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LlN0YXR1c0Jhci5vdmVybGF5c1dlYlZpZXcoZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLmlvc1RleHRDb2xvciA9PT0gJ3doaXRlJykge1xuICAgICAgICB3aW5kb3cuU3RhdHVzQmFyLnN0eWxlTGlnaHRDb250ZW50KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuU3RhdHVzQmFyLnN0eWxlRGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMuc2V0QmFja2dyb3VuZENvbG9yKSB7XG4gICAgICBTdGF0dXNiYXIuc2V0QmFja2dyb3VuZENvbG9yKGFwcC50aGVtZSA9PT0gJ2lvcycgPyBwYXJhbXMuaW9zQmFja2dyb3VuZENvbG9yIDogcGFyYW1zLm1hdGVyaWFsQmFja2dyb3VuZENvbG9yKTtcbiAgICB9XG4gIH0sXG59O1xuXG52YXIgU3RhdHVzYmFyJDEgPSB7XG4gIG5hbWU6ICdzdGF0dXNiYXInLFxuICBwYXJhbXM6IHtcbiAgICBzdGF0dXNiYXI6IHtcbiAgICAgIG92ZXJsYXk6ICdhdXRvJyxcbiAgICAgIHNjcm9sbFRvcE9uQ2xpY2s6IHRydWUsXG4gICAgICBpb3NPdmVybGF5c1dlYlZpZXc6IHRydWUsXG4gICAgICBpb3NUZXh0Q29sb3I6ICdibGFjaycsXG4gICAgICBzZXRCYWNrZ3JvdW5kQ29sb3I6IHRydWUsXG4gICAgICBpb3NCYWNrZ3JvdW5kQ29sb3I6ICcjRjdGN0Y4JyxcbiAgICAgIG1hdGVyaWFsQmFja2dyb3VuZENvbG9yOiAnIzBENDdBMScsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKGFwcCwge1xuICAgICAgc3RhdHVzYmFyOiB7XG4gICAgICAgIGhpZGU6IFN0YXR1c2Jhci5oaWRlLFxuICAgICAgICBzaG93OiBTdGF0dXNiYXIuc2hvdyxcbiAgICAgICAgc2V0SW9zVGV4dENvbG9yOiBTdGF0dXNiYXIuc2V0SW9zVGV4dENvbG9yLFxuICAgICAgICBzZXRCYWNrZ3JvdW5kQ29sb3I6IFN0YXR1c2Jhci5zZXRCYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgIGlzVmlzaWJsZTogU3RhdHVzYmFyLmlzVmlzaWJsZSxcbiAgICAgICAgaW5pdDogU3RhdHVzYmFyLmluaXQuYmluZChhcHApLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0KCkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIFN0YXR1c2Jhci5pbml0LmNhbGwoYXBwKTtcbiAgICB9LFxuICB9LFxuICBjbGlja3M6IHtcbiAgICAnLnN0YXR1c2Jhcic6IGZ1bmN0aW9uIG9uU3RhdHVzYmFyQ2xpY2soKSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgaWYgKCFhcHAucGFyYW1zLnN0YXR1c2Jhci5zY3JvbGxUb3BPbkNsaWNrKSByZXR1cm47XG4gICAgICBTdGF0dXNiYXIub25DbGljay5jYWxsKGFwcCk7XG4gICAgfSxcbiAgfSxcbn07XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRWaWV3KGFwcCkge1xuICBjb25zdCBwb3BvdmVyVmlldyA9ICQoJy5wb3BvdmVyLm1vZGFsLWluIC52aWV3Jyk7XG4gIGNvbnN0IHBvcHVwVmlldyA9ICQoJy5wb3B1cC5tb2RhbC1pbiAudmlldycpO1xuICBjb25zdCBwYW5lbFZpZXcgPSAkKCcucGFuZWwucGFuZWwtYWN0aXZlIC52aWV3Jyk7XG4gIGxldCBhcHBWaWV3cyA9ICQoJy52aWV3cycpO1xuICBpZiAoYXBwVmlld3MubGVuZ3RoID09PSAwKSBhcHBWaWV3cyA9IGFwcC5yb290O1xuICAvLyBGaW5kIGFjdGl2ZSB2aWV3IGFzIHRhYlxuICBsZXQgYXBwVmlldyA9IGFwcFZpZXdzLmNoaWxkcmVuKCcudmlldycpO1xuICAvLyBQcm9wYWJseSBpbiB0YWJzIG9yIHNwbGl0IHZpZXdcbiAgaWYgKGFwcFZpZXcubGVuZ3RoID4gMSkge1xuICAgIGlmIChhcHBWaWV3Lmhhc0NsYXNzKCd0YWInKSkge1xuICAgICAgLy8gVGFic1xuICAgICAgYXBwVmlldyA9IGFwcFZpZXdzLmNoaWxkcmVuKCcudmlldy50YWItYWN0aXZlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNwbGl0IFZpZXcsIGxlYXZlIGFwcFZpZXcgaW50YWN0XG4gICAgfVxuICB9XG4gIGlmIChwb3BvdmVyVmlldy5sZW5ndGggPiAwICYmIHBvcG92ZXJWaWV3WzBdLmY3VmlldykgcmV0dXJuIHBvcG92ZXJWaWV3WzBdLmY3VmlldztcbiAgaWYgKHBvcHVwVmlldy5sZW5ndGggPiAwICYmIHBvcHVwVmlld1swXS5mN1ZpZXcpIHJldHVybiBwb3B1cFZpZXdbMF0uZjdWaWV3O1xuICBpZiAocGFuZWxWaWV3Lmxlbmd0aCA+IDAgJiYgcGFuZWxWaWV3WzBdLmY3VmlldykgcmV0dXJuIHBhbmVsVmlld1swXS5mN1ZpZXc7XG4gIGlmIChhcHBWaWV3Lmxlbmd0aCA+IDApIHtcbiAgICBpZiAoYXBwVmlldy5sZW5ndGggPT09IDEgJiYgYXBwVmlld1swXS5mN1ZpZXcpIHJldHVybiBhcHBWaWV3WzBdLmY3VmlldztcbiAgICBpZiAoYXBwVmlldy5sZW5ndGggPiAxKSB7XG4gICAgICByZXR1cm4gYXBwLnZpZXdzLm1haW47XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbnZhciBWaWV3JDIgPSB7XG4gIG5hbWU6ICd2aWV3JyxcbiAgcGFyYW1zOiB7XG4gICAgdmlldzoge1xuICAgICAgc3RhY2tQYWdlczogZmFsc2UsXG4gICAgICB4aHJDYWNoZTogdHJ1ZSxcbiAgICAgIHhockNhY2hlSWdub3JlOiBbXSxcbiAgICAgIHhockNhY2hlSWdub3JlR2V0UGFyYW1ldGVyczogZmFsc2UsXG4gICAgICB4aHJDYWNoZUR1cmF0aW9uOiAxMDAwICogNjAgKiAxMCwgLy8gVGVuIG1pbnV0ZXNcbiAgICAgIHByZWxvYWRQcmV2aW91c1BhZ2U6IHRydWUsXG4gICAgICB1bmlxdWVIaXN0b3J5OiBmYWxzZSxcbiAgICAgIHVuaXF1ZUhpc3RvcnlJZ25vcmVHZXRQYXJhbWV0ZXJzOiBmYWxzZSxcbiAgICAgIGFsbG93RHVwbGljYXRlVXJsczogZmFsc2UsXG4gICAgICByZWxvYWRQYWdlczogZmFsc2UsXG4gICAgICByZW1vdmVFbGVtZW50czogdHJ1ZSxcbiAgICAgIHJlbW92ZUVsZW1lbnRzV2l0aFRpbWVvdXQ6IGZhbHNlLFxuICAgICAgcmVtb3ZlRWxlbWVudHNUaW1lb3V0OiAwLFxuICAgICAgcmVzdG9yZVNjcm9sbFRvcE9uQmFjazogdHJ1ZSxcbiAgICAgIC8vIFN3aXBlIEJhY2tcbiAgICAgIGlvc1N3aXBlQmFjazogdHJ1ZSxcbiAgICAgIGlvc1N3aXBlQmFja0FuaW1hdGVTaGFkb3c6IHRydWUsXG4gICAgICBpb3NTd2lwZUJhY2tBbmltYXRlT3BhY2l0eTogdHJ1ZSxcbiAgICAgIGlvc1N3aXBlQmFja0FjdGl2ZUFyZWE6IDMwLFxuICAgICAgaW9zU3dpcGVCYWNrVGhyZXNob2xkOiAwLFxuICAgICAgLy8gUHVzaCBTdGF0ZVxuICAgICAgcHVzaFN0YXRlOiBmYWxzZSxcbiAgICAgIHB1c2hTdGF0ZVJvb3Q6IHVuZGVmaW5lZCxcbiAgICAgIHB1c2hTdGF0ZUFuaW1hdGU6IHRydWUsXG4gICAgICBwdXNoU3RhdGVBbmltYXRlT25Mb2FkOiBmYWxzZSxcbiAgICAgIHB1c2hTdGF0ZVNlcGFyYXRvcjogJyMhJyxcbiAgICAgIHB1c2hTdGF0ZU9uTG9hZDogdHJ1ZSxcbiAgICAgIC8vIEFuaW1hdGUgUGFnZXNcbiAgICAgIGFuaW1hdGU6IHRydWUsXG4gICAgICBhbmltYXRlV2l0aEpTOiB0cnVlLFxuICAgICAgLy8gaU9TIER5bmFtaWMgTmF2YmFyXG4gICAgICBpb3NEeW5hbWljTmF2YmFyOiB0cnVlLFxuICAgICAgaW9zU2VwYXJhdGVEeW5hbWljTmF2YmFyOiB0cnVlLFxuICAgICAgLy8gQW5pbWF0ZSBpT1MgTmF2YmFyIEJhY2sgSWNvblxuICAgICAgaW9zQW5pbWF0ZU5hdmJhckJhY2tJY29uOiB0cnVlLFxuICAgICAgLy8gTUQgVGhlbWUgZGVsYXlcbiAgICAgIG1hdGVyaWFsUGFnZUxvYWREZWxheTogMCxcbiAgICB9LFxuICB9LFxuICBzdGF0aWM6IHtcbiAgICBWaWV3LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoYXBwLCB7XG4gICAgICB2aWV3czogVXRpbHMuZXh0ZW5kKFtdLCB7XG4gICAgICAgIGNyZWF0ZShlbCwgcGFyYW1zKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBWaWV3KGFwcCwgZWwsIHBhcmFtcyk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCh2aWV3RWwpIHtcbiAgICAgICAgICBjb25zdCAkdmlld0VsID0gJCh2aWV3RWwpO1xuICAgICAgICAgIGlmICgkdmlld0VsLmxlbmd0aCAmJiAkdmlld0VsWzBdLmY3VmlldykgcmV0dXJuICR2aWV3RWxbMF0uZjdWaWV3O1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0sXG4gICAgICB9KSxcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXBwLnZpZXdzLCAnY3VycmVudCcsIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiBnZXRDdXJyZW50VmlldyhhcHApO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0KCkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgICQoJy52aWV3LWluaXQnKS5lYWNoKChpbmRleCwgdmlld0VsKSA9PiB7XG4gICAgICAgIGlmICh2aWV3RWwuZjdWaWV3KSByZXR1cm47XG4gICAgICAgIGNvbnN0IHZpZXdQYXJhbXMgPSAkKHZpZXdFbCkuZGF0YXNldCgpO1xuICAgICAgICBhcHAudmlld3MuY3JlYXRlKHZpZXdFbCwgdmlld1BhcmFtcyk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIG1vZGFsT3Blbihtb2RhbCkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIG1vZGFsLiRlbC5maW5kKCcudmlldy1pbml0JykuZWFjaCgoaW5kZXgsIHZpZXdFbCkgPT4ge1xuICAgICAgICBpZiAodmlld0VsLmY3VmlldykgcmV0dXJuO1xuICAgICAgICBjb25zdCB2aWV3UGFyYW1zID0gJCh2aWV3RWwpLmRhdGFzZXQoKTtcbiAgICAgICAgYXBwLnZpZXdzLmNyZWF0ZSh2aWV3RWwsIHZpZXdQYXJhbXMpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBtb2RhbEJlZm9yZURlc3Ryb3kobW9kYWwpIHtcbiAgICAgIGlmICghbW9kYWwgfHwgIW1vZGFsLiRlbCkgcmV0dXJuO1xuICAgICAgbW9kYWwuJGVsLmZpbmQoJy52aWV3LWluaXQnKS5lYWNoKChpbmRleCwgdmlld0VsKSA9PiB7XG4gICAgICAgIGNvbnN0IHZpZXcgPSB2aWV3RWwuZjdWaWV3O1xuICAgICAgICBpZiAoIXZpZXcpIHJldHVybjtcbiAgICAgICAgdmlldy5kZXN0cm95KCk7XG4gICAgICB9KTtcbiAgICB9LFxuICB9LFxufTtcblxuY29uc3QgTmF2YmFyID0ge1xuICBzaXplKGVsKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBpZiAoYXBwLnRoZW1lICE9PSAnaW9zJykgcmV0dXJuO1xuICAgIGxldCAkZWwgPSAkKGVsKTtcbiAgICBpZiAoJGVsLmhhc0NsYXNzKCduYXZiYXInKSkge1xuICAgICAgJGVsID0gJGVsLmNoaWxkcmVuKCcubmF2YmFyLWlubmVyJykuZWFjaCgoaW5kZXgsIG5hdmJhckVsKSA9PiB7XG4gICAgICAgIGFwcC5uYXZiYXIuc2l6ZShuYXZiYXJFbCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgJGVsLmhhc0NsYXNzKCdzdGFja2VkJykgfHxcbiAgICAgICRlbC5wYXJlbnRzKCcuc3RhY2tlZCcpLmxlbmd0aCA+IDAgfHxcbiAgICAgICRlbC5wYXJlbnRzKCcudGFiOm5vdCgudGFiLWFjdGl2ZSknKS5sZW5ndGggPiAwIHx8XG4gICAgICAkZWwucGFyZW50cygnLnBvcHVwOm5vdCgubW9kYWwtaW4pJykubGVuZ3RoID4gMFxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCAkdmlld0VsID0gJGVsLnBhcmVudHMoJy52aWV3JykuZXEoMCk7XG4gICAgY29uc3QgbGVmdCA9IGFwcC5ydGwgPyAkZWwuY2hpbGRyZW4oJy5yaWdodCcpIDogJGVsLmNoaWxkcmVuKCcubGVmdCcpO1xuICAgIGNvbnN0IHJpZ2h0ID0gYXBwLnJ0bCA/ICRlbC5jaGlsZHJlbignLmxlZnQnKSA6ICRlbC5jaGlsZHJlbignLnJpZ2h0Jyk7XG4gICAgY29uc3QgdGl0bGUgPSAkZWwuY2hpbGRyZW4oJy50aXRsZScpO1xuICAgIGNvbnN0IHN1Ym5hdmJhciA9ICRlbC5jaGlsZHJlbignLnN1Ym5hdmJhcicpO1xuICAgIGNvbnN0IG5vTGVmdCA9IGxlZnQubGVuZ3RoID09PSAwO1xuICAgIGNvbnN0IG5vUmlnaHQgPSByaWdodC5sZW5ndGggPT09IDA7XG4gICAgY29uc3QgbGVmdFdpZHRoID0gbm9MZWZ0ID8gMCA6IGxlZnQub3V0ZXJXaWR0aCh0cnVlKTtcbiAgICBjb25zdCByaWdodFdpZHRoID0gbm9SaWdodCA/IDAgOiByaWdodC5vdXRlcldpZHRoKHRydWUpO1xuICAgIGNvbnN0IHRpdGxlV2lkdGggPSB0aXRsZS5vdXRlcldpZHRoKHRydWUpO1xuICAgIGNvbnN0IG5hdmJhclN0eWxlcyA9ICRlbC5zdHlsZXMoKTtcbiAgICBjb25zdCBuYXZiYXJXaWR0aCA9ICRlbFswXS5vZmZzZXRXaWR0aDtcbiAgICBjb25zdCBuYXZiYXJJbm5lcldpZHRoID0gbmF2YmFyV2lkdGggLSBwYXJzZUludChuYXZiYXJTdHlsZXMucGFkZGluZ0xlZnQsIDEwKSAtIHBhcnNlSW50KG5hdmJhclN0eWxlcy5wYWRkaW5nUmlnaHQsIDEwKTtcbiAgICBjb25zdCBpc1ByZXZpb3VzID0gJGVsLmhhc0NsYXNzKCduYXZiYXItcHJldmlvdXMnKTtcbiAgICBjb25zdCBzbGlkaW5nID0gJGVsLmhhc0NsYXNzKCdzbGlkaW5nJyk7XG5cbiAgICBsZXQgcm91dGVyO1xuICAgIGxldCBkeW5hbWljTmF2YmFyO1xuICAgIGxldCBzZXBhcmF0ZU5hdmJhcjtcbiAgICBsZXQgc2VwYXJhdGVOYXZiYXJSaWdodE9mZnNldCA9IDA7XG4gICAgbGV0IHNlcGFyYXRlTmF2YmFyTGVmdE9mZnNldCA9IDA7XG5cbiAgICBpZiAoJHZpZXdFbC5sZW5ndGggPiAwICYmICR2aWV3RWxbMF0uZjdWaWV3KSB7XG4gICAgICByb3V0ZXIgPSAkdmlld0VsWzBdLmY3Vmlldy5yb3V0ZXI7XG4gICAgICBkeW5hbWljTmF2YmFyID0gcm91dGVyICYmIHJvdXRlci5keW5hbWljTmF2YmFyO1xuICAgICAgc2VwYXJhdGVOYXZiYXIgPSByb3V0ZXIgJiYgcm91dGVyLnNlcGFyYXRlTmF2YmFyO1xuICAgICAgaWYgKCFzZXBhcmF0ZU5hdmJhcikge1xuICAgICAgICBzZXBhcmF0ZU5hdmJhclJpZ2h0T2Zmc2V0ID0gbmF2YmFyV2lkdGg7XG4gICAgICAgIHNlcGFyYXRlTmF2YmFyTGVmdE9mZnNldCA9IG5hdmJhcldpZHRoIC8gNTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgY3VyckxlZnQ7XG4gICAgbGV0IGRpZmY7XG4gICAgaWYgKG5vUmlnaHQpIHtcbiAgICAgIGN1cnJMZWZ0ID0gbmF2YmFySW5uZXJXaWR0aCAtIHRpdGxlV2lkdGg7XG4gICAgfVxuICAgIGlmIChub0xlZnQpIHtcbiAgICAgIGN1cnJMZWZ0ID0gMDtcbiAgICB9XG4gICAgaWYgKCFub0xlZnQgJiYgIW5vUmlnaHQpIHtcbiAgICAgIGN1cnJMZWZ0ID0gKChuYXZiYXJJbm5lcldpZHRoIC0gcmlnaHRXaWR0aCAtIHRpdGxlV2lkdGgpICsgbGVmdFdpZHRoKSAvIDI7XG4gICAgfVxuICAgIGxldCByZXF1aXJlZExlZnQgPSAobmF2YmFySW5uZXJXaWR0aCAtIHRpdGxlV2lkdGgpIC8gMjtcbiAgICBpZiAobmF2YmFySW5uZXJXaWR0aCAtIGxlZnRXaWR0aCAtIHJpZ2h0V2lkdGggPiB0aXRsZVdpZHRoKSB7XG4gICAgICBpZiAocmVxdWlyZWRMZWZ0IDwgbGVmdFdpZHRoKSB7XG4gICAgICAgIHJlcXVpcmVkTGVmdCA9IGxlZnRXaWR0aDtcbiAgICAgIH1cbiAgICAgIGlmIChyZXF1aXJlZExlZnQgKyB0aXRsZVdpZHRoID4gbmF2YmFySW5uZXJXaWR0aCAtIHJpZ2h0V2lkdGgpIHtcbiAgICAgICAgcmVxdWlyZWRMZWZ0ID0gbmF2YmFySW5uZXJXaWR0aCAtIHJpZ2h0V2lkdGggLSB0aXRsZVdpZHRoO1xuICAgICAgfVxuICAgICAgZGlmZiA9IHJlcXVpcmVkTGVmdCAtIGN1cnJMZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkaWZmID0gMDtcbiAgICB9XG5cbiAgICAvLyBSVEwgaW52ZXJ0ZXJcbiAgICBjb25zdCBpbnZlcnRlciA9IGFwcC5ydGwgPyAtMSA6IDE7XG5cbiAgICBpZiAoZHluYW1pY05hdmJhcikge1xuICAgICAgaWYgKHRpdGxlLmhhc0NsYXNzKCdzbGlkaW5nJykgfHwgKHRpdGxlLmxlbmd0aCA+IDAgJiYgc2xpZGluZykpIHtcbiAgICAgICAgbGV0IHRpdGxlTGVmdE9mZnNldCA9ICgtKGN1cnJMZWZ0ICsgZGlmZikgKiBpbnZlcnRlcikgKyBzZXBhcmF0ZU5hdmJhckxlZnRPZmZzZXQ7XG4gICAgICAgIGxldCB0aXRsZVJpZ2h0T2Zmc2V0ID0gKChuYXZiYXJJbm5lcldpZHRoIC0gY3VyckxlZnQgLSBkaWZmIC0gdGl0bGVXaWR0aCkgKiBpbnZlcnRlcikgLSBzZXBhcmF0ZU5hdmJhclJpZ2h0T2Zmc2V0O1xuXG4gICAgICAgIGlmIChpc1ByZXZpb3VzKSB7XG4gICAgICAgICAgaWYgKHJvdXRlciAmJiByb3V0ZXIucGFyYW1zLmlvc0FuaW1hdGVOYXZiYXJCYWNrSWNvbikge1xuICAgICAgICAgICAgY29uc3QgYWN0aXZlTmF2YmFyQmFja0xpbmsgPSAkZWwucGFyZW50KCkuZmluZCgnLm5hdmJhci1jdXJyZW50JykuY2hpbGRyZW4oJy5sZWZ0LnNsaWRpbmcnKS5maW5kKCcuYmFjayAuaWNvbiB+IHNwYW4nKTtcbiAgICAgICAgICAgIGlmIChhY3RpdmVOYXZiYXJCYWNrTGluay5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIHRpdGxlTGVmdE9mZnNldCArPSBhY3RpdmVOYXZiYXJCYWNrTGlua1swXS5vZmZzZXRMZWZ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aXRsZVswXS5mN05hdmJhckxlZnRPZmZzZXQgPSB0aXRsZUxlZnRPZmZzZXQ7XG4gICAgICAgIHRpdGxlWzBdLmY3TmF2YmFyUmlnaHRPZmZzZXQgPSB0aXRsZVJpZ2h0T2Zmc2V0O1xuICAgICAgfVxuICAgICAgaWYgKCFub0xlZnQgJiYgKGxlZnQuaGFzQ2xhc3MoJ3NsaWRpbmcnKSB8fCBzbGlkaW5nKSkge1xuICAgICAgICBpZiAoYXBwLnJ0bCkge1xuICAgICAgICAgIGxlZnRbMF0uZjdOYXZiYXJMZWZ0T2Zmc2V0ID0gKC0obmF2YmFySW5uZXJXaWR0aCAtIGxlZnRbMF0ub2Zmc2V0V2lkdGgpIC8gMikgKiBpbnZlcnRlcjtcbiAgICAgICAgICBsZWZ0WzBdLmY3TmF2YmFyUmlnaHRPZmZzZXQgPSBsZWZ0V2lkdGggKiBpbnZlcnRlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZWZ0WzBdLmY3TmF2YmFyTGVmdE9mZnNldCA9IC1sZWZ0V2lkdGggKyBzZXBhcmF0ZU5hdmJhckxlZnRPZmZzZXQ7XG4gICAgICAgICAgbGVmdFswXS5mN05hdmJhclJpZ2h0T2Zmc2V0ID0gKChuYXZiYXJJbm5lcldpZHRoIC0gbGVmdFswXS5vZmZzZXRXaWR0aCkgLyAyKSAtIHNlcGFyYXRlTmF2YmFyUmlnaHRPZmZzZXQ7XG4gICAgICAgICAgaWYgKHJvdXRlciAmJiByb3V0ZXIucGFyYW1zLmlvc0FuaW1hdGVOYXZiYXJCYWNrSWNvbiAmJiBsZWZ0LmZpbmQoJy5iYWNrIC5pY29uJykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGVmdFswXS5mN05hdmJhclJpZ2h0T2Zmc2V0IC09IGxlZnQuZmluZCgnLmJhY2sgLmljb24nKVswXS5vZmZzZXRXaWR0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghbm9SaWdodCAmJiAocmlnaHQuaGFzQ2xhc3MoJ3NsaWRpbmcnKSB8fCBzbGlkaW5nKSkge1xuICAgICAgICBpZiAoYXBwLnJ0bCkge1xuICAgICAgICAgIHJpZ2h0WzBdLmY3TmF2YmFyTGVmdE9mZnNldCA9IC1yaWdodFdpZHRoICogaW52ZXJ0ZXI7XG4gICAgICAgICAgcmlnaHRbMF0uZjdOYXZiYXJSaWdodE9mZnNldCA9ICgobmF2YmFySW5uZXJXaWR0aCAtIHJpZ2h0WzBdLm9mZnNldFdpZHRoKSAvIDIpICogaW52ZXJ0ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmlnaHRbMF0uZjdOYXZiYXJMZWZ0T2Zmc2V0ID0gKC0obmF2YmFySW5uZXJXaWR0aCAtIHJpZ2h0WzBdLm9mZnNldFdpZHRoKSAvIDIpICsgc2VwYXJhdGVOYXZiYXJMZWZ0T2Zmc2V0O1xuICAgICAgICAgIHJpZ2h0WzBdLmY3TmF2YmFyUmlnaHRPZmZzZXQgPSByaWdodFdpZHRoIC0gc2VwYXJhdGVOYXZiYXJSaWdodE9mZnNldDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1Ym5hdmJhci5sZW5ndGggJiYgKHN1Ym5hdmJhci5oYXNDbGFzcygnc2xpZGluZycpIHx8IHNsaWRpbmcpKSB7XG4gICAgICAgIHN1Ym5hdmJhclswXS5mN05hdmJhckxlZnRPZmZzZXQgPSBhcHAucnRsID8gc3VibmF2YmFyWzBdLm9mZnNldFdpZHRoIDogKC1zdWJuYXZiYXJbMF0ub2Zmc2V0V2lkdGggKyBzZXBhcmF0ZU5hdmJhckxlZnRPZmZzZXQpO1xuICAgICAgICBzdWJuYXZiYXJbMF0uZjdOYXZiYXJSaWdodE9mZnNldCA9ICgtc3VibmF2YmFyWzBdLmY3TmF2YmFyTGVmdE9mZnNldCAtIHNlcGFyYXRlTmF2YmFyUmlnaHRPZmZzZXQpICsgc2VwYXJhdGVOYXZiYXJMZWZ0T2Zmc2V0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRpdGxlIGxlZnRcbiAgICBpZiAoYXBwLnBhcmFtcy5uYXZiYXIuaW9zQ2VudGVyVGl0bGUpIHtcbiAgICAgIGxldCB0aXRsZUxlZnQgPSBkaWZmO1xuICAgICAgaWYgKGFwcC5ydGwgJiYgbm9MZWZ0ICYmIG5vUmlnaHQgJiYgdGl0bGUubGVuZ3RoID4gMCkgdGl0bGVMZWZ0ID0gLXRpdGxlTGVmdDtcbiAgICAgIHRpdGxlLmNzcyh7IGxlZnQ6IGAke3RpdGxlTGVmdH1weGAgfSk7XG4gICAgfVxuICB9LFxuICBoaWRlKGVsLCBhbmltYXRlID0gdHJ1ZSkge1xuICAgIGxldCAkZWwgPSAkKGVsKTtcbiAgICBpZiAoJGVsLmhhc0NsYXNzKCduYXZiYXItaW5uZXInKSkgJGVsID0gJGVsLnBhcmVudHMoJy5uYXZiYXInKTtcbiAgICBpZiAoISRlbC5sZW5ndGgpIHJldHVybjtcbiAgICBpZiAoJGVsLmhhc0NsYXNzKCduYXZiYXItaGlkZGVuJykpIHJldHVybjtcbiAgICBjb25zdCBjbGFzc05hbWUgPSBgbmF2YmFyLWhpZGRlbiR7YW5pbWF0ZSA/ICcgbmF2YmFyLXRyYW5zaXRpb25pbmcnIDogJyd9YDtcbiAgICAkZWwudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAkZWwucmVtb3ZlQ2xhc3MoJ25hdmJhci10cmFuc2l0aW9uaW5nJyk7XG4gICAgfSk7XG4gICAgJGVsLmFkZENsYXNzKGNsYXNzTmFtZSk7XG4gIH0sXG4gIHNob3coZWwgPSAnLm5hdmJhci1oaWRkZW4nLCBhbmltYXRlID0gdHJ1ZSkge1xuICAgIGxldCAkZWwgPSAkKGVsKTtcbiAgICBpZiAoJGVsLmhhc0NsYXNzKCduYXZiYXItaW5uZXInKSkgJGVsID0gJGVsLnBhcmVudHMoJy5uYXZiYXInKTtcbiAgICBpZiAoISRlbC5sZW5ndGgpIHJldHVybjtcbiAgICBpZiAoISRlbC5oYXNDbGFzcygnbmF2YmFyLWhpZGRlbicpKSByZXR1cm47XG4gICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICRlbC5hZGRDbGFzcygnbmF2YmFyLXRyYW5zaXRpb25pbmcnKTtcbiAgICAgICRlbC50cmFuc2l0aW9uRW5kKCgpID0+IHtcbiAgICAgICAgJGVsLnJlbW92ZUNsYXNzKCduYXZiYXItdHJhbnNpdGlvbmluZycpO1xuICAgICAgfSk7XG4gICAgfVxuICAgICRlbC5yZW1vdmVDbGFzcygnbmF2YmFyLWhpZGRlbicpO1xuICB9LFxuICBnZXRFbEJ5UGFnZShwYWdlKSB7XG4gICAgbGV0ICRwYWdlRWw7XG4gICAgbGV0ICRuYXZiYXJFbDtcbiAgICBsZXQgcGFnZURhdGE7XG4gICAgaWYgKHBhZ2UuJG5hdmJhckVsIHx8IHBhZ2UuJGVsKSB7XG4gICAgICBwYWdlRGF0YSA9IHBhZ2U7XG4gICAgICAkcGFnZUVsID0gcGFnZS4kZWw7XG4gICAgfSBlbHNlIHtcbiAgICAgICRwYWdlRWwgPSAkKHBhZ2UpO1xuICAgICAgaWYgKCRwYWdlRWwubGVuZ3RoID4gMCkgcGFnZURhdGEgPSAkcGFnZUVsWzBdLmY3UGFnZTtcbiAgICB9XG4gICAgaWYgKHBhZ2VEYXRhICYmIHBhZ2VEYXRhLiRuYXZiYXJFbCAmJiBwYWdlRGF0YS4kbmF2YmFyRWwubGVuZ3RoID4gMCkge1xuICAgICAgJG5hdmJhckVsID0gcGFnZURhdGEuJG5hdmJhckVsO1xuICAgIH0gZWxzZSBpZiAoJHBhZ2VFbCkge1xuICAgICAgJG5hdmJhckVsID0gJHBhZ2VFbC5jaGlsZHJlbignLm5hdmJhcicpLmNoaWxkcmVuKCcubmF2YmFyLWlubmVyJyk7XG4gICAgfVxuICAgIGlmICghJG5hdmJhckVsIHx8ICgkbmF2YmFyRWwgJiYgJG5hdmJhckVsLmxlbmd0aCA9PT0gMCkpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuICRuYXZiYXJFbFswXTtcbiAgfSxcbiAgZ2V0UGFnZUJ5RWwobmF2YmFySW5uZXJFbCkge1xuICAgIGxldCAkbmF2YmFySW5uZXJFbCA9ICQobmF2YmFySW5uZXJFbCk7XG4gICAgaWYgKCRuYXZiYXJJbm5lckVsLmhhc0NsYXNzKCduYXZiYXInKSkge1xuICAgICAgJG5hdmJhcklubmVyRWwgPSAkbmF2YmFySW5uZXJFbC5maW5kKCcubmF2YmFyLWlubmVyJyk7XG4gICAgICBpZiAoJG5hdmJhcklubmVyRWwubGVuZ3RoID4gMSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuICRuYXZiYXJJbm5lckVsWzBdLmY3UGFnZTtcbiAgfSxcbiAgaW5pdEhpZGVOYXZiYXJPblNjcm9sbChwYWdlRWwsIG5hdmJhcklubmVyRWwpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIGNvbnN0ICRwYWdlRWwgPSAkKHBhZ2VFbCk7XG4gICAgY29uc3QgJG5hdmJhckVsID0gJChuYXZiYXJJbm5lckVsIHx8IGFwcC5uYXZiYXIuZ2V0RWxCeVBhZ2UocGFnZUVsKSkuY2xvc2VzdCgnLm5hdmJhcicpO1xuXG4gICAgbGV0IHByZXZpb3VzU2Nyb2xsVG9wO1xuICAgIGxldCBjdXJyZW50U2Nyb2xsVG9wO1xuXG4gICAgbGV0IHNjcm9sbEhlaWdodDtcbiAgICBsZXQgb2Zmc2V0SGVpZ2h0O1xuICAgIGxldCByZWFjaEVuZDtcbiAgICBsZXQgYWN0aW9uO1xuICAgIGxldCBuYXZiYXJIaWRkZW47XG4gICAgZnVuY3Rpb24gaGFuZGxlU2Nyb2xsKCkge1xuICAgICAgY29uc3Qgc2Nyb2xsQ29udGVudCA9IHRoaXM7XG4gICAgICBpZiAoJHBhZ2VFbC5oYXNDbGFzcygncGFnZS1wcmV2aW91cycpKSByZXR1cm47XG4gICAgICBjdXJyZW50U2Nyb2xsVG9wID0gc2Nyb2xsQ29udGVudC5zY3JvbGxUb3A7XG4gICAgICBzY3JvbGxIZWlnaHQgPSBzY3JvbGxDb250ZW50LnNjcm9sbEhlaWdodDtcbiAgICAgIG9mZnNldEhlaWdodCA9IHNjcm9sbENvbnRlbnQub2Zmc2V0SGVpZ2h0O1xuICAgICAgcmVhY2hFbmQgPSBjdXJyZW50U2Nyb2xsVG9wICsgb2Zmc2V0SGVpZ2h0ID49IHNjcm9sbEhlaWdodDtcbiAgICAgIG5hdmJhckhpZGRlbiA9ICRuYXZiYXJFbC5oYXNDbGFzcygnbmF2YmFyLWhpZGRlbicpO1xuXG4gICAgICBpZiAocmVhY2hFbmQpIHtcbiAgICAgICAgaWYgKGFwcC5wYXJhbXMubmF2YmFyLnNob3dPblBhZ2VTY3JvbGxFbmQpIHtcbiAgICAgICAgICBhY3Rpb24gPSAnc2hvdyc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocHJldmlvdXNTY3JvbGxUb3AgPiBjdXJyZW50U2Nyb2xsVG9wKSB7XG4gICAgICAgIGlmIChhcHAucGFyYW1zLm5hdmJhci5zaG93T25QYWdlU2Nyb2xsVG9wIHx8IGN1cnJlbnRTY3JvbGxUb3AgPD0gNDQpIHtcbiAgICAgICAgICBhY3Rpb24gPSAnc2hvdyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWN0aW9uID0gJ2hpZGUnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGN1cnJlbnRTY3JvbGxUb3AgPiA0NCkge1xuICAgICAgICBhY3Rpb24gPSAnaGlkZSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3Rpb24gPSAnc2hvdyc7XG4gICAgICB9XG5cbiAgICAgIGlmIChhY3Rpb24gPT09ICdzaG93JyAmJiBuYXZiYXJIaWRkZW4pIHtcbiAgICAgICAgYXBwLm5hdmJhci5zaG93KCRuYXZiYXJFbCk7XG4gICAgICAgIG5hdmJhckhpZGRlbiA9IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT09ICdoaWRlJyAmJiAhbmF2YmFySGlkZGVuKSB7XG4gICAgICAgIGFwcC5uYXZiYXIuaGlkZSgkbmF2YmFyRWwpO1xuICAgICAgICBuYXZiYXJIaWRkZW4gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBwcmV2aW91c1Njcm9sbFRvcCA9IGN1cnJlbnRTY3JvbGxUb3A7XG4gICAgfVxuICAgICRwYWdlRWwub24oJ3Njcm9sbCcsICcucGFnZS1jb250ZW50JywgaGFuZGxlU2Nyb2xsLCB0cnVlKTtcbiAgICAkcGFnZUVsWzBdLmY3U2Nyb2xsTmF2YmFySGFuZGxlciA9IGhhbmRsZVNjcm9sbDtcbiAgfSxcbn07XG52YXIgTmF2YmFyJDEgPSB7XG4gIG5hbWU6ICduYXZiYXInLFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoYXBwLCB7XG4gICAgICBuYXZiYXI6IHtcbiAgICAgICAgc2l6ZTogTmF2YmFyLnNpemUuYmluZChhcHApLFxuICAgICAgICBoaWRlOiBOYXZiYXIuaGlkZS5iaW5kKGFwcCksXG4gICAgICAgIHNob3c6IE5hdmJhci5zaG93LmJpbmQoYXBwKSxcbiAgICAgICAgZ2V0RWxCeVBhZ2U6IE5hdmJhci5nZXRFbEJ5UGFnZS5iaW5kKGFwcCksXG4gICAgICAgIGluaXRIaWRlTmF2YmFyT25TY3JvbGw6IE5hdmJhci5pbml0SGlkZU5hdmJhck9uU2Nyb2xsLmJpbmQoYXBwKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIHBhcmFtczoge1xuICAgIG5hdmJhcjoge1xuICAgICAgc2Nyb2xsVG9wT25UaXRsZUNsaWNrOiB0cnVlLFxuICAgICAgaW9zQ2VudGVyVGl0bGU6IHRydWUsXG4gICAgICBoaWRlT25QYWdlU2Nyb2xsOiBmYWxzZSxcbiAgICAgIHNob3dPblBhZ2VTY3JvbGxFbmQ6IHRydWUsXG4gICAgICBzaG93T25QYWdlU2Nyb2xsVG9wOiB0cnVlLFxuICAgIH0sXG4gIH0sXG4gIG9uOiB7XG4gICAgcmVzaXplKCkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGlmIChhcHAudGhlbWUgIT09ICdpb3MnKSByZXR1cm47XG4gICAgICAkKCcubmF2YmFyJykuZWFjaCgoaW5kZXgsIG5hdmJhckVsKSA9PiB7XG4gICAgICAgIGFwcC5uYXZiYXIuc2l6ZShuYXZiYXJFbCk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHBhZ2VCZWZvcmVSZW1vdmUocGFnZSkge1xuICAgICAgaWYgKHBhZ2UuJGVsWzBdLmY3U2Nyb2xsTmF2YmFySGFuZGxlcikge1xuICAgICAgICBwYWdlLiRlbC5vZmYoJ3Njcm9sbCcsICcucGFnZS1jb250ZW50JywgcGFnZS4kZWxbMF0uZjdTY3JvbGxOYXZiYXJIYW5kbGVyLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHBhZ2VCZWZvcmVJbihwYWdlKSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgaWYgKGFwcC50aGVtZSAhPT0gJ2lvcycpIHJldHVybjtcbiAgICAgIGxldCAkbmF2YmFyRWw7XG4gICAgICBjb25zdCB2aWV3ID0gcGFnZS4kZWwucGFyZW50cygnLnZpZXcnKVswXS5mN1ZpZXc7XG4gICAgICBjb25zdCBuYXZiYXJJbm5lckVsID0gYXBwLm5hdmJhci5nZXRFbEJ5UGFnZShwYWdlKTtcbiAgICAgIGlmICghbmF2YmFySW5uZXJFbCkge1xuICAgICAgICAkbmF2YmFyRWwgPSBwYWdlLiRlbC5wYXJlbnRzKCcudmlldycpLmNoaWxkcmVuKCcubmF2YmFyJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkbmF2YmFyRWwgPSAkKG5hdmJhcklubmVyRWwpLnBhcmVudHMoJy5uYXZiYXInKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYWdlLiRlbC5oYXNDbGFzcygnbm8tbmF2YmFyJykgfHwgKHZpZXcucm91dGVyLmR5bmFtaWNOYXZiYXIgJiYgIW5hdmJhcklubmVyRWwpKSB7XG4gICAgICAgIGFwcC5uYXZiYXIuaGlkZSgkbmF2YmFyRWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBwLm5hdmJhci5zaG93KCRuYXZiYXJFbCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBwYWdlUmVpbml0KHBhZ2UpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBpZiAoYXBwLnRoZW1lICE9PSAnaW9zJykgcmV0dXJuO1xuICAgICAgY29uc3QgJG5hdmJhckVsID0gJChhcHAubmF2YmFyLmdldEVsQnlQYWdlKHBhZ2UpKTtcbiAgICAgIGlmICghJG5hdmJhckVsIHx8ICRuYXZiYXJFbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgIGFwcC5uYXZiYXIuc2l6ZSgkbmF2YmFyRWwpO1xuICAgIH0sXG4gICAgcGFnZUluaXQocGFnZSkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGNvbnN0ICRuYXZiYXJFbCA9ICQoYXBwLm5hdmJhci5nZXRFbEJ5UGFnZShwYWdlKSk7XG4gICAgICBpZiAoISRuYXZiYXJFbCB8fCAkbmF2YmFyRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICBpZiAoYXBwLnRoZW1lID09PSAnaW9zJykge1xuICAgICAgICBhcHAubmF2YmFyLnNpemUoJG5hdmJhckVsKTtcbiAgICAgIH1cbiAgICAgIGlmIChhcHAucGFyYW1zLm5hdmJhci5oaWRlT25QYWdlU2Nyb2xsIHx8IHBhZ2UuJGVsLmZpbmQoJy5oaWRlLW5hdmJhci1vbi1zY3JvbGwnKS5sZW5ndGggfHwgcGFnZS4kZWwuaGFzQ2xhc3MoJ2hpZGUtbmF2YmFyLW9uLXNjcm9sbCcpIHx8IHBhZ2UuJGVsLmZpbmQoJy5oaWRlLWJhcnMtb24tc2Nyb2xsJykubGVuZ3RoKSB7XG4gICAgICAgIGlmIChwYWdlLiRlbC5maW5kKCcua2VlcC1uYXZiYXItb24tc2Nyb2xsJykubGVuZ3RoIHx8IHBhZ2UuJGVsLmZpbmQoJy5rZWVwLWJhcnMtb24tc2Nyb2xsJykubGVuZ3RoKSByZXR1cm47XG4gICAgICAgIGFwcC5uYXZiYXIuaW5pdEhpZGVOYXZiYXJPblNjcm9sbChwYWdlLmVsLCAkbmF2YmFyRWxbMF0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgbW9kYWxPcGVuKG1vZGFsKSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgaWYgKGFwcC50aGVtZSAhPT0gJ2lvcycpIHJldHVybjtcbiAgICAgIG1vZGFsLiRlbC5maW5kKCcubmF2YmFyOm5vdCgubmF2YmFyLXByZXZpb3VzKTpub3QoLnN0YWNrZWQpJykuZWFjaCgoaW5kZXgsIG5hdmJhckVsKSA9PiB7XG4gICAgICAgIGFwcC5uYXZiYXIuc2l6ZShuYXZiYXJFbCk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHBhbmVsT3BlbihwYW5lbCkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGlmIChhcHAudGhlbWUgIT09ICdpb3MnKSByZXR1cm47XG4gICAgICBwYW5lbC4kZWwuZmluZCgnLm5hdmJhcjpub3QoLm5hdmJhci1wcmV2aW91cyk6bm90KC5zdGFja2VkKScpLmVhY2goKGluZGV4LCBuYXZiYXJFbCkgPT4ge1xuICAgICAgICBhcHAubmF2YmFyLnNpemUobmF2YmFyRWwpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBwYW5lbFN3aXBlT3BlbihwYW5lbCkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGlmIChhcHAudGhlbWUgIT09ICdpb3MnKSByZXR1cm47XG4gICAgICBwYW5lbC4kZWwuZmluZCgnLm5hdmJhcjpub3QoLm5hdmJhci1wcmV2aW91cyk6bm90KC5zdGFja2VkKScpLmVhY2goKGluZGV4LCBuYXZiYXJFbCkgPT4ge1xuICAgICAgICBhcHAubmF2YmFyLnNpemUobmF2YmFyRWwpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICB0YWJTaG93KHRhYkVsKSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgJCh0YWJFbCkuZmluZCgnLm5hdmJhcjpub3QoLm5hdmJhci1wcmV2aW91cyk6bm90KC5zdGFja2VkKScpLmVhY2goKGluZGV4LCBuYXZiYXJFbCkgPT4ge1xuICAgICAgICBhcHAubmF2YmFyLnNpemUobmF2YmFyRWwpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgfSxcbiAgY2xpY2tzOiB7XG4gICAgJy5uYXZiYXIgLnRpdGxlJzogZnVuY3Rpb24gb25UaXRsZUNsaWNrKCRjbGlja2VkRWwpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBpZiAoIWFwcC5wYXJhbXMubmF2YmFyLnNjcm9sbFRvcE9uVGl0bGVDbGljaykgcmV0dXJuO1xuICAgICAgaWYgKCRjbGlja2VkRWwuY2xvc2VzdCgnYScpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbGV0IHBhZ2VDb250ZW50O1xuICAgICAgLy8gRmluZCBhY3RpdmUgcGFnZVxuICAgICAgY29uc3QgbmF2YmFyID0gJGNsaWNrZWRFbC5wYXJlbnRzKCcubmF2YmFyJyk7XG5cbiAgICAgIC8vIFN0YXRpYyBMYXlvdXRcbiAgICAgIHBhZ2VDb250ZW50ID0gbmF2YmFyLnBhcmVudHMoJy5wYWdlLWNvbnRlbnQnKTtcblxuICAgICAgaWYgKHBhZ2VDb250ZW50Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAvLyBGaXhlZCBMYXlvdXRcbiAgICAgICAgaWYgKG5hdmJhci5wYXJlbnRzKCcucGFnZScpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBwYWdlQ29udGVudCA9IG5hdmJhci5wYXJlbnRzKCcucGFnZScpLmZpbmQoJy5wYWdlLWNvbnRlbnQnKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaHJvdWdoIExheW91dFxuICAgICAgICBpZiAocGFnZUNvbnRlbnQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKG5hdmJhci5uZXh0QWxsKCcucGFnZS1jdXJyZW50Om5vdCguc3RhY2tlZCknKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBwYWdlQ29udGVudCA9IG5hdmJhci5uZXh0QWxsKCcucGFnZS1jdXJyZW50Om5vdCguc3RhY2tlZCknKS5maW5kKCcucGFnZS1jb250ZW50Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGFnZUNvbnRlbnQgJiYgcGFnZUNvbnRlbnQubGVuZ3RoID4gMCkge1xuICAgICAgICAvLyBDaGVjayBmb3IgdGFiXG4gICAgICAgIGlmIChwYWdlQ29udGVudC5oYXNDbGFzcygndGFiJykpIHtcbiAgICAgICAgICBwYWdlQ29udGVudCA9IHBhZ2VDb250ZW50LnBhcmVudCgnLnRhYnMnKS5jaGlsZHJlbignLnBhZ2UtY29udGVudC50YWItYWN0aXZlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhZ2VDb250ZW50Lmxlbmd0aCA+IDApIHBhZ2VDb250ZW50LnNjcm9sbFRvcCgwLCAzMDApO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBUb29sYmFyID0ge1xuICBzZXRIaWdobGlnaHQodGFiYmFyRWwpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIGlmIChhcHAudGhlbWUgIT09ICdtZCcpIHJldHVybjtcblxuICAgIGNvbnN0ICR0YWJiYXJFbCA9ICQodGFiYmFyRWwpO1xuXG4gICAgaWYgKCR0YWJiYXJFbC5sZW5ndGggPT09IDAgfHwgISgkdGFiYmFyRWwuaGFzQ2xhc3MoJ3RhYmJhcicpIHx8ICR0YWJiYXJFbC5oYXNDbGFzcygndGFiYmFyLWxhYmVscycpKSkgcmV0dXJuO1xuXG4gICAgaWYgKCR0YWJiYXJFbC5maW5kKCcudGFiLWxpbmstaGlnaGxpZ2h0JykubGVuZ3RoID09PSAwKSB7XG4gICAgICAkdGFiYmFyRWwuY2hpbGRyZW4oJy50b29sYmFyLWlubmVyJykuYXBwZW5kKCc8c3BhbiBjbGFzcz1cInRhYi1saW5rLWhpZ2hsaWdodFwiPjwvc3Bhbj4nKTtcbiAgICB9XG5cbiAgICBjb25zdCAkaGlnaGxpZ2h0RWwgPSAkdGFiYmFyRWwuZmluZCgnLnRhYi1saW5rLWhpZ2hsaWdodCcpO1xuICAgIGNvbnN0ICRhY3RpdmVMaW5rID0gJHRhYmJhckVsLmZpbmQoJy50YWItbGluay1hY3RpdmUnKTtcbiAgICBsZXQgaGlnaGxpZ2h0V2lkdGg7XG4gICAgbGV0IGhpZ2hsaWdodFRyYW5zbGF0ZTtcblxuICAgIGlmICgkdGFiYmFyRWwuaGFzQ2xhc3MoJ3RhYmJhci1zY3JvbGxhYmxlJykpIHtcbiAgICAgIGhpZ2hsaWdodFdpZHRoID0gYCR7JGFjdGl2ZUxpbmtbMF0ub2Zmc2V0V2lkdGh9cHhgO1xuICAgICAgaGlnaGxpZ2h0VHJhbnNsYXRlID0gYCR7JGFjdGl2ZUxpbmtbMF0ub2Zmc2V0TGVmdH1weGA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGFjdGl2ZUluZGV4ID0gJGFjdGl2ZUxpbmsuaW5kZXgoKTtcbiAgICAgIGNvbnN0IHRhYkxpbmtzQ291bnQgPSAkdGFiYmFyRWwuZmluZCgnLnRhYi1saW5rJykubGVuZ3RoO1xuICAgICAgaGlnaGxpZ2h0V2lkdGggPSBgJHsxMDAgLyB0YWJMaW5rc0NvdW50fSVgO1xuICAgICAgaGlnaGxpZ2h0VHJhbnNsYXRlID0gYCR7KGFwcC5ydGwgPyAtYWN0aXZlSW5kZXggOiBhY3RpdmVJbmRleCkgKiAxMDB9JWA7XG4gICAgfVxuXG4gICAgJGhpZ2hsaWdodEVsXG4gICAgICAuY3NzKCd3aWR0aCcsIGhpZ2hsaWdodFdpZHRoKVxuICAgICAgLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHtoaWdobGlnaHRUcmFuc2xhdGV9LDAsMClgKTtcbiAgfSxcbiAgaW5pdCh0YWJiYXJFbCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgYXBwLnRvb2xiYXIuc2V0SGlnaGxpZ2h0KHRhYmJhckVsKTtcbiAgfSxcbiAgaGlkZShlbCwgYW5pbWF0ZSA9IHRydWUpIHtcbiAgICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgICBpZiAoJGVsLmhhc0NsYXNzKCd0b29sYmFyLWhpZGRlbicpKSByZXR1cm47XG4gICAgY29uc3QgY2xhc3NOYW1lID0gYHRvb2xiYXItaGlkZGVuJHthbmltYXRlID8gJyB0b29sYmFyLXRyYW5zaXRpb25pbmcnIDogJyd9YDtcbiAgICAkZWwudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAkZWwucmVtb3ZlQ2xhc3MoJ3Rvb2xiYXItdHJhbnNpdGlvbmluZycpO1xuICAgIH0pO1xuICAgICRlbC5hZGRDbGFzcyhjbGFzc05hbWUpO1xuICB9LFxuICBzaG93KGVsLCBhbmltYXRlID0gdHJ1ZSkge1xuICAgIGNvbnN0ICRlbCA9ICQoZWwpO1xuICAgIGlmICghJGVsLmhhc0NsYXNzKCd0b29sYmFyLWhpZGRlbicpKSByZXR1cm47XG4gICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICRlbC5hZGRDbGFzcygndG9vbGJhci10cmFuc2l0aW9uaW5nJyk7XG4gICAgICAkZWwudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAgICRlbC5yZW1vdmVDbGFzcygndG9vbGJhci10cmFuc2l0aW9uaW5nJyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgJGVsLnJlbW92ZUNsYXNzKCd0b29sYmFyLWhpZGRlbicpO1xuICB9LFxuICBpbml0SGlkZVRvb2xiYXJPblNjcm9sbChwYWdlRWwpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIGNvbnN0ICRwYWdlRWwgPSAkKHBhZ2VFbCk7XG4gICAgbGV0ICR0b29sYmFyRWwgPSAkcGFnZUVsLnBhcmVudHMoJy52aWV3JykuY2hpbGRyZW4oJy50b29sYmFyJyk7XG4gICAgaWYgKCR0b29sYmFyRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAkdG9vbGJhckVsID0gJHBhZ2VFbC5maW5kKCcudG9vbGJhcicpO1xuICAgIH1cbiAgICBpZiAoJHRvb2xiYXJFbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgcHJldmlvdXNTY3JvbGxUb3A7XG4gICAgbGV0IGN1cnJlbnRTY3JvbGxUb3A7XG5cbiAgICBsZXQgc2Nyb2xsSGVpZ2h0O1xuICAgIGxldCBvZmZzZXRIZWlnaHQ7XG4gICAgbGV0IHJlYWNoRW5kO1xuICAgIGxldCBhY3Rpb247XG4gICAgbGV0IHRvb2xiYXJIaWRkZW47XG4gICAgZnVuY3Rpb24gaGFuZGxlU2Nyb2xsKCkge1xuICAgICAgY29uc3Qgc2Nyb2xsQ29udGVudCA9IHRoaXM7XG4gICAgICBpZiAoJHBhZ2VFbC5oYXNDbGFzcygncGFnZS1wcmV2aW91cycpKSByZXR1cm47XG4gICAgICBjdXJyZW50U2Nyb2xsVG9wID0gc2Nyb2xsQ29udGVudC5zY3JvbGxUb3A7XG4gICAgICBzY3JvbGxIZWlnaHQgPSBzY3JvbGxDb250ZW50LnNjcm9sbEhlaWdodDtcbiAgICAgIG9mZnNldEhlaWdodCA9IHNjcm9sbENvbnRlbnQub2Zmc2V0SGVpZ2h0O1xuICAgICAgcmVhY2hFbmQgPSBjdXJyZW50U2Nyb2xsVG9wICsgb2Zmc2V0SGVpZ2h0ID49IHNjcm9sbEhlaWdodDtcbiAgICAgIHRvb2xiYXJIaWRkZW4gPSAkdG9vbGJhckVsLmhhc0NsYXNzKCd0b29sYmFyLWhpZGRlbicpO1xuXG4gICAgICBpZiAocmVhY2hFbmQpIHtcbiAgICAgICAgaWYgKGFwcC5wYXJhbXMudG9vbGJhci5zaG93T25QYWdlU2Nyb2xsRW5kKSB7XG4gICAgICAgICAgYWN0aW9uID0gJ3Nob3cnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHByZXZpb3VzU2Nyb2xsVG9wID4gY3VycmVudFNjcm9sbFRvcCkge1xuICAgICAgICBpZiAoYXBwLnBhcmFtcy50b29sYmFyLnNob3dPblBhZ2VTY3JvbGxUb3AgfHwgY3VycmVudFNjcm9sbFRvcCA8PSA0NCkge1xuICAgICAgICAgIGFjdGlvbiA9ICdzaG93JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhY3Rpb24gPSAnaGlkZSc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudFNjcm9sbFRvcCA+IDQ0KSB7XG4gICAgICAgIGFjdGlvbiA9ICdoaWRlJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGlvbiA9ICdzaG93JztcbiAgICAgIH1cblxuICAgICAgaWYgKGFjdGlvbiA9PT0gJ3Nob3cnICYmIHRvb2xiYXJIaWRkZW4pIHtcbiAgICAgICAgYXBwLnRvb2xiYXIuc2hvdygkdG9vbGJhckVsKTtcbiAgICAgICAgdG9vbGJhckhpZGRlbiA9IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT09ICdoaWRlJyAmJiAhdG9vbGJhckhpZGRlbikge1xuICAgICAgICBhcHAudG9vbGJhci5oaWRlKCR0b29sYmFyRWwpO1xuICAgICAgICB0b29sYmFySGlkZGVuID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcHJldmlvdXNTY3JvbGxUb3AgPSBjdXJyZW50U2Nyb2xsVG9wO1xuICAgIH1cbiAgICAkcGFnZUVsLm9uKCdzY3JvbGwnLCAnLnBhZ2UtY29udGVudCcsIGhhbmRsZVNjcm9sbCwgdHJ1ZSk7XG4gICAgJHBhZ2VFbFswXS5mN1Njcm9sbFRvb2xiYXJIYW5kbGVyID0gaGFuZGxlU2Nyb2xsO1xuICB9LFxufTtcbnZhciBUb29sYmFyJDEgPSB7XG4gIG5hbWU6ICd0b29sYmFyJyxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKGFwcCwge1xuICAgICAgdG9vbGJhcjoge1xuICAgICAgICBoaWRlOiBUb29sYmFyLmhpZGUuYmluZChhcHApLFxuICAgICAgICBzaG93OiBUb29sYmFyLnNob3cuYmluZChhcHApLFxuICAgICAgICBzZXRIaWdobGlnaHQ6IFRvb2xiYXIuc2V0SGlnaGxpZ2h0LmJpbmQoYXBwKSxcbiAgICAgICAgaW5pdEhpZGVUb29sYmFyT25TY3JvbGw6IFRvb2xiYXIuaW5pdEhpZGVUb29sYmFyT25TY3JvbGwuYmluZChhcHApLFxuICAgICAgICBpbml0OiBUb29sYmFyLmluaXQuYmluZChhcHApLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgcGFyYW1zOiB7XG4gICAgdG9vbGJhcjoge1xuICAgICAgaGlkZU9uUGFnZVNjcm9sbDogZmFsc2UsXG4gICAgICBzaG93T25QYWdlU2Nyb2xsRW5kOiB0cnVlLFxuICAgICAgc2hvd09uUGFnZVNjcm9sbFRvcDogdHJ1ZSxcbiAgICB9LFxuICB9LFxuICBvbjoge1xuICAgIHBhZ2VCZWZvcmVSZW1vdmUocGFnZSkge1xuICAgICAgaWYgKHBhZ2UuJGVsWzBdLmY3U2Nyb2xsVG9vbGJhckhhbmRsZXIpIHtcbiAgICAgICAgcGFnZS4kZWwub2ZmKCdzY3JvbGwnLCAnLnBhZ2UtY29udGVudCcsIHBhZ2UuJGVsWzBdLmY3U2Nyb2xsVG9vbGJhckhhbmRsZXIsIHRydWUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcGFnZUJlZm9yZUluKHBhZ2UpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBpZiAoYXBwLnRoZW1lICE9PSAnaW9zJykgcmV0dXJuO1xuICAgICAgbGV0ICR0b29sYmFyRWwgPSBwYWdlLiRlbC5wYXJlbnRzKCcudmlldycpLmNoaWxkcmVuKCcudG9vbGJhcicpO1xuICAgICAgaWYgKCR0b29sYmFyRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICR0b29sYmFyRWwgPSBwYWdlLiRlbC5maW5kKCcudG9vbGJhcicpO1xuICAgICAgfVxuICAgICAgaWYgKCR0b29sYmFyRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChwYWdlLiRlbC5oYXNDbGFzcygnbm8tdG9vbGJhcicpKSB7XG4gICAgICAgIGFwcC50b29sYmFyLmhpZGUoJHRvb2xiYXJFbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcHAudG9vbGJhci5zaG93KCR0b29sYmFyRWwpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcGFnZUluaXQocGFnZSkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIHBhZ2UuJGVsLmZpbmQoJy50YWJiYXIsIC50YWJiYXItbGFiZWxzJykuZWFjaCgoaW5kZXgsIHRhYmJhckVsKSA9PiB7XG4gICAgICAgIGFwcC50b29sYmFyLmluaXQodGFiYmFyRWwpO1xuICAgICAgfSk7XG4gICAgICBpZiAoYXBwLnBhcmFtcy50b29sYmFyLmhpZGVPblBhZ2VTY3JvbGwgfHwgcGFnZS4kZWwuZmluZCgnLmhpZGUtdG9vbGJhci1vbi1zY3JvbGwnKS5sZW5ndGggfHwgcGFnZS4kZWwuaGFzQ2xhc3MoJ2hpZGUtdG9vbGJhci1vbi1zY3JvbGwnKSB8fCBwYWdlLiRlbC5maW5kKCcuaGlkZS1iYXJzLW9uLXNjcm9sbCcpLmxlbmd0aCkge1xuICAgICAgICBpZiAocGFnZS4kZWwuZmluZCgnLmtlZXAtdG9vbGJhci1vbi1zY3JvbGwnKS5sZW5ndGggfHwgcGFnZS4kZWwuZmluZCgnLmtlZXAtYmFycy1vbi1zY3JvbGwnKS5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgYXBwLnRvb2xiYXIuaW5pdEhpZGVUb29sYmFyT25TY3JvbGwocGFnZS5lbCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpbml0KCkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGFwcC5yb290LmZpbmQoJy50YWJiYXIsIC50YWJiYXItbGFiZWxzJykuZWFjaCgoaW5kZXgsIHRhYmJhckVsKSA9PiB7XG4gICAgICAgIGFwcC50b29sYmFyLmluaXQodGFiYmFyRWwpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgfSxcbn07XG5cbnZhciBTdWJuYXZiYXIgPSB7XG4gIG5hbWU6ICdzdWJuYXZiYXInLFxuICBvbjoge1xuICAgIHBhZ2VJbml0KHBhZ2UpIHtcbiAgICAgIGlmIChwYWdlLiRuYXZiYXJFbCAmJiBwYWdlLiRuYXZiYXJFbC5sZW5ndGggJiYgcGFnZS4kbmF2YmFyRWwuZmluZCgnLnN1Ym5hdmJhcicpLmxlbmd0aCkge1xuICAgICAgICBwYWdlLiRlbC5hZGRDbGFzcygncGFnZS13aXRoLXN1Ym5hdmJhcicpO1xuICAgICAgfVxuICAgICAgaWYgKHBhZ2UuJGVsLmZpbmQoJy5zdWJuYXZiYXInKS5sZW5ndGgpIHtcbiAgICAgICAgcGFnZS4kZWwuYWRkQ2xhc3MoJ3BhZ2Utd2l0aC1zdWJuYXZiYXInKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufTtcblxuY2xhc3MgVG91Y2hSaXBwbGUkMSB7XG4gIGNvbnN0cnVjdG9yKCRlbCwgeCwgeSkge1xuICAgIGNvbnN0IHJpcHBsZSA9IHRoaXM7XG4gICAgaWYgKCEkZWwpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgY29uc3QgYm94ID0gJGVsWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IGNlbnRlciA9IHtcbiAgICAgIHg6IHggLSBib3gubGVmdCxcbiAgICAgIHk6IHkgLSBib3gudG9wLFxuICAgIH07XG4gICAgY29uc3Qgd2lkdGggPSBib3gud2lkdGg7XG4gICAgY29uc3QgaGVpZ2h0ID0gYm94LmhlaWdodDtcbiAgICBjb25zdCBkaWFtZXRlciA9IE1hdGgubWF4KCgoKGhlaWdodCAqKiAyKSArICh3aWR0aCAqKiAyKSkgKiogMC41KSwgNDgpO1xuXG4gICAgcmlwcGxlLiRyaXBwbGVXYXZlRWwgPSAkKGA8ZGl2IGNsYXNzPVwicmlwcGxlLXdhdmVcIiBzdHlsZT1cIndpZHRoOiAke2RpYW1ldGVyfXB4OyBoZWlnaHQ6ICR7ZGlhbWV0ZXJ9cHg7IG1hcmdpbi10b3A6LSR7ZGlhbWV0ZXIgLyAyfXB4OyBtYXJnaW4tbGVmdDotJHtkaWFtZXRlciAvIDJ9cHg7IGxlZnQ6JHtjZW50ZXIueH1weDsgdG9wOiR7Y2VudGVyLnl9cHg7XCI+PC9kaXY+YCk7XG5cbiAgICAkZWwucHJlcGVuZChyaXBwbGUuJHJpcHBsZVdhdmVFbCk7XG5cbiAgICBjb25zdCBjbGllbnRMZWZ0ID0gcmlwcGxlLiRyaXBwbGVXYXZlRWxbMF0uY2xpZW50TGVmdDtcblxuICAgIHJpcHBsZS5yaXBwbGVUcmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHstY2VudGVyLnggKyAod2lkdGggLyAyKX1weCwgJHstY2VudGVyLnkgKyAoaGVpZ2h0IC8gMil9cHgsIDApIHNjYWxlKDEpYDtcblxuICAgIHJpcHBsZS4kcmlwcGxlV2F2ZUVsLnRyYW5zZm9ybShyaXBwbGUucmlwcGxlVHJhbnNmb3JtKTtcblxuICAgIHJldHVybiByaXBwbGU7XG4gIH1cbiAgb25SZW1vdmUoKSB7XG4gICAgbGV0IHJpcHBsZSA9IHRoaXM7XG4gICAgcmlwcGxlLiRyaXBwbGVXYXZlRWwucmVtb3ZlKCk7XG4gICAgT2JqZWN0LmtleXMocmlwcGxlKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIHJpcHBsZVtrZXldID0gbnVsbDtcbiAgICAgIGRlbGV0ZSByaXBwbGVba2V5XTtcbiAgICB9KTtcbiAgICByaXBwbGUgPSBudWxsO1xuICB9XG4gIHJlbW92ZSgpIHtcbiAgICBjb25zdCByaXBwbGUgPSB0aGlzO1xuICAgIGlmIChyaXBwbGUucmVtb3ZpbmcpIHJldHVybjtcbiAgICBjb25zdCAkcmlwcGxlV2F2ZUVsID0gdGhpcy4kcmlwcGxlV2F2ZUVsO1xuICAgIGNvbnN0IHJpcHBsZVRyYW5zZm9ybSA9IHRoaXMucmlwcGxlVHJhbnNmb3JtO1xuICAgIGxldCByZW1vdmVUaW1lb3V0ID0gVXRpbHMubmV4dFRpY2soKCkgPT4ge1xuICAgICAgcmlwcGxlLm9uUmVtb3ZlKCk7XG4gICAgfSwgNDAwKTtcbiAgICByaXBwbGUucmVtb3ZpbmcgPSB0cnVlO1xuICAgICRyaXBwbGVXYXZlRWxcbiAgICAgIC5hZGRDbGFzcygncmlwcGxlLXdhdmUtZmlsbCcpXG4gICAgICAudHJhbnNmb3JtKHJpcHBsZVRyYW5zZm9ybS5yZXBsYWNlKCdzY2FsZSgxKScsICdzY2FsZSgxLjAxKScpKVxuICAgICAgLnRyYW5zaXRpb25FbmQoKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQocmVtb3ZlVGltZW91dCk7XG4gICAgICAgIFV0aWxzLm5leHRGcmFtZSgoKSA9PiB7XG4gICAgICAgICAgJHJpcHBsZVdhdmVFbFxuICAgICAgICAgICAgLmFkZENsYXNzKCdyaXBwbGUtd2F2ZS1vdXQnKVxuICAgICAgICAgICAgLnRyYW5zZm9ybShyaXBwbGVUcmFuc2Zvcm0ucmVwbGFjZSgnc2NhbGUoMSknLCAnc2NhbGUoMS4wMSknKSk7XG5cbiAgICAgICAgICByZW1vdmVUaW1lb3V0ID0gVXRpbHMubmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgcmlwcGxlLm9uUmVtb3ZlKCk7XG4gICAgICAgICAgfSwgNzAwKTtcblxuICAgICAgICAgICRyaXBwbGVXYXZlRWwudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQocmVtb3ZlVGltZW91dCk7XG4gICAgICAgICAgICByaXBwbGUub25SZW1vdmUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgfVxufVxuXG52YXIgVG91Y2hSaXBwbGUgPSB7XG4gIG5hbWU6ICd0b3VjaC1yaXBwbGUnLFxuICBzdGF0aWM6IHtcbiAgICBUb3VjaFJpcHBsZTogVG91Y2hSaXBwbGUkMSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgYXBwLnRvdWNoUmlwcGxlID0ge1xuICAgICAgY3JlYXRlKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUb3VjaFJpcHBsZSQxKC4uLmFyZ3MpO1xuICAgICAgfSxcbiAgICB9O1xuICB9LFxufTtcblxuY29uc3Qgb3BlbmVkTW9kYWxzID0gW107XG5jb25zdCBkaWFsb2dzUXVldWUgPSBbXTtcbmZ1bmN0aW9uIGNsZWFyRGlhbG9nc1F1ZXVlKCkge1xuICBpZiAoZGlhbG9nc1F1ZXVlLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICBjb25zdCBkaWFsb2cgPSBkaWFsb2dzUXVldWUuc2hpZnQoKTtcbiAgZGlhbG9nLm9wZW4oKTtcbn1cbmNsYXNzIE1vZGFsIGV4dGVuZHMgRnJhbWV3b3JrN0NsYXNzIHtcbiAgY29uc3RydWN0b3IoYXBwLCBwYXJhbXMpIHtcbiAgICBzdXBlcihwYXJhbXMsIFthcHBdKTtcblxuICAgIGNvbnN0IG1vZGFsID0gdGhpcztcblxuICAgIGNvbnN0IGRlZmF1bHRzID0ge307XG5cbiAgICAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBtb2R1bGVzIHBhcmFtc1xuICAgIG1vZGFsLnVzZUluc3RhbmNlTW9kdWxlc1BhcmFtcyhkZWZhdWx0cyk7XG5cbiAgICBtb2RhbC5wYXJhbXMgPSBVdGlscy5leHRlbmQoZGVmYXVsdHMsIHBhcmFtcyk7XG5cbiAgICAvLyBJbnN0YWxsIE1vZHVsZXNcbiAgICBtb2RhbC51c2VJbnN0YW5jZU1vZHVsZXMoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG9uT3BlbigpIHtcbiAgICBjb25zdCBtb2RhbCA9IHRoaXM7XG4gICAgb3BlbmVkTW9kYWxzLnB1c2gobW9kYWwpO1xuICAgICQoJ2h0bWwnKS5hZGRDbGFzcyhgd2l0aC1tb2RhbC0ke21vZGFsLnR5cGUudG9Mb3dlckNhc2UoKX1gKTtcbiAgICBtb2RhbC4kZWwudHJpZ2dlcihgbW9kYWw6b3BlbiAke21vZGFsLnR5cGUudG9Mb3dlckNhc2UoKX06b3BlbmAsIG1vZGFsKTtcbiAgICBtb2RhbC5lbWl0KGBsb2NhbDo6b3BlbiBtb2RhbE9wZW4gJHttb2RhbC50eXBlfU9wZW5gLCBtb2RhbCk7XG4gIH1cbiAgb25PcGVuZWQoKSB7XG4gICAgY29uc3QgbW9kYWwgPSB0aGlzO1xuICAgIG1vZGFsLiRlbC50cmlnZ2VyKGBtb2RhbDpvcGVuZWQgJHttb2RhbC50eXBlLnRvTG93ZXJDYXNlKCl9Om9wZW5lZGAsIG1vZGFsKTtcbiAgICBtb2RhbC5lbWl0KGBsb2NhbDo6b3BlbmVkIG1vZGFsT3BlbmVkICR7bW9kYWwudHlwZX1PcGVuZWRgLCBtb2RhbCk7XG4gIH1cbiAgb25DbG9zZSgpIHtcbiAgICBjb25zdCBtb2RhbCA9IHRoaXM7XG4gICAgb3BlbmVkTW9kYWxzLnNwbGljZShvcGVuZWRNb2RhbHMuaW5kZXhPZihtb2RhbCksIDEpO1xuICAgICQoJ2h0bWwnKS5yZW1vdmVDbGFzcyhgd2l0aC1tb2RhbC0ke21vZGFsLnR5cGUudG9Mb3dlckNhc2UoKX1gKTtcbiAgICBtb2RhbC4kZWwudHJpZ2dlcihgbW9kYWw6Y2xvc2UgJHttb2RhbC50eXBlLnRvTG93ZXJDYXNlKCl9OmNsb3NlYCwgbW9kYWwpO1xuICAgIG1vZGFsLmVtaXQoYGxvY2FsOjpjbG9zZSBtb2RhbENsb3NlICR7bW9kYWwudHlwZX1DbG9zZWAsIG1vZGFsKTtcbiAgfVxuICBvbkNsb3NlZCgpIHtcbiAgICBjb25zdCBtb2RhbCA9IHRoaXM7XG4gICAgbW9kYWwuJGVsLnJlbW92ZUNsYXNzKCdtb2RhbC1vdXQnKTtcbiAgICBtb2RhbC4kZWwuaGlkZSgpO1xuICAgIG1vZGFsLiRlbC50cmlnZ2VyKGBtb2RhbDpjbG9zZWQgJHttb2RhbC50eXBlLnRvTG93ZXJDYXNlKCl9OmNsb3NlZGAsIG1vZGFsKTtcbiAgICBtb2RhbC5lbWl0KGBsb2NhbDo6Y2xvc2VkIG1vZGFsQ2xvc2VkICR7bW9kYWwudHlwZX1DbG9zZWRgLCBtb2RhbCk7XG4gIH1cbiAgb3BlbihhbmltYXRlTW9kYWwpIHtcbiAgICBjb25zdCBtb2RhbCA9IHRoaXM7XG4gICAgY29uc3QgYXBwID0gbW9kYWwuYXBwO1xuICAgIGNvbnN0ICRlbCA9IG1vZGFsLiRlbDtcbiAgICBjb25zdCAkYmFja2Ryb3BFbCA9IG1vZGFsLiRiYWNrZHJvcEVsO1xuICAgIGNvbnN0IHR5cGUgPSBtb2RhbC50eXBlO1xuICAgIGxldCBhbmltYXRlID0gdHJ1ZTtcbiAgICBpZiAodHlwZW9mIGFuaW1hdGVNb2RhbCAhPT0gJ3VuZGVmaW5lZCcpIGFuaW1hdGUgPSBhbmltYXRlTW9kYWw7XG4gICAgZWxzZSBpZiAodHlwZW9mIG1vZGFsLnBhcmFtcy5hbmltYXRlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgYW5pbWF0ZSA9IG1vZGFsLnBhcmFtcy5hbmltYXRlO1xuICAgIH1cblxuICAgIGlmICghJGVsIHx8ICRlbC5oYXNDbGFzcygnbW9kYWwtaW4nKSkge1xuICAgICAgcmV0dXJuIG1vZGFsO1xuICAgIH1cblxuICAgIGlmICh0eXBlID09PSAnZGlhbG9nJyAmJiBhcHAucGFyYW1zLm1vZGFscy5xdWV1ZURpYWxvZ3MpIHtcbiAgICAgIGxldCBwdXNoVG9RdWV1ZTtcbiAgICAgIGlmICgkKCcuZGlhbG9nLm1vZGFsLWluJykubGVuZ3RoID4gMCkge1xuICAgICAgICBwdXNoVG9RdWV1ZSA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKG9wZW5lZE1vZGFscy5sZW5ndGggPiAwKSB7XG4gICAgICAgIG9wZW5lZE1vZGFscy5mb3JFYWNoKChvcGVuZWRNb2RhbCkgPT4ge1xuICAgICAgICAgIGlmIChvcGVuZWRNb2RhbC50eXBlID09PSAnZGlhbG9nJykgcHVzaFRvUXVldWUgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChwdXNoVG9RdWV1ZSkge1xuICAgICAgICBkaWFsb2dzUXVldWUucHVzaChtb2RhbCk7XG4gICAgICAgIHJldHVybiBtb2RhbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCAkbW9kYWxQYXJlbnRFbCA9ICRlbC5wYXJlbnQoKTtcbiAgICBjb25zdCB3YXNJbkRvbSA9ICRlbC5wYXJlbnRzKGRvY3VtZW50KS5sZW5ndGggPiAwO1xuICAgIGlmIChhcHAucGFyYW1zLm1vZGFscy5tb3ZlVG9Sb290ICYmICEkbW9kYWxQYXJlbnRFbC5pcyhhcHAucm9vdCkpIHtcbiAgICAgIGFwcC5yb290LmFwcGVuZCgkZWwpO1xuICAgICAgbW9kYWwub25jZShgJHt0eXBlfUNsb3NlZGAsICgpID0+IHtcbiAgICAgICAgaWYgKHdhc0luRG9tKSB7XG4gICAgICAgICAgJG1vZGFsUGFyZW50RWwuYXBwZW5kKCRlbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGVsLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gU2hvdyBNb2RhbFxuICAgICRlbC5zaG93KCk7XG5cbiAgICAvLyBTZXQgRGlhbG9nIG9mZnNldFxuICAgIGlmICh0eXBlID09PSAnZGlhbG9nJykge1xuICAgICAgJGVsLmNzcyh7XG4gICAgICAgIG1hcmdpblRvcDogYCR7LU1hdGgucm91bmQoJGVsLm91dGVySGVpZ2h0KCkgLyAyKX1weGAsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBFbWl0IG9wZW5cbiAgICAvKiBlc2xpbnQgbm8tdW5kZXJzY29yZS1kYW5nbGU6IFtcImVycm9yXCIsIHsgXCJhbGxvd1wiOiBbXCJfY2xpZW50TGVmdFwiXSB9XSAqL1xuICAgIG1vZGFsLl9jbGllbnRMZWZ0ID0gJGVsWzBdLmNsaWVudExlZnQ7XG5cbiAgICAvLyBCYWNrZHJvcFxuICAgIGlmICgkYmFja2Ryb3BFbCkge1xuICAgICAgJGJhY2tkcm9wRWxbYW5pbWF0ZSA/ICdyZW1vdmVDbGFzcycgOiAnYWRkQ2xhc3MnXSgnbm90LWFuaW1hdGVkJyk7XG4gICAgICAkYmFja2Ryb3BFbC5hZGRDbGFzcygnYmFja2Ryb3AtaW4nKTtcbiAgICB9XG4gICAgLy8gTW9kYWxcbiAgICBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKCkge1xuICAgICAgaWYgKCRlbC5oYXNDbGFzcygnbW9kYWwtb3V0JykpIHtcbiAgICAgICAgbW9kYWwub25DbG9zZWQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1vZGFsLm9uT3BlbmVkKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChhbmltYXRlKSB7XG4gICAgICAkZWxcbiAgICAgICAgLmFuaW1hdGlvbkVuZCgoKSA9PiB7XG4gICAgICAgICAgdHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICB9KTtcbiAgICAgICRlbFxuICAgICAgICAudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAgICAgdHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICB9KTtcbiAgICAgICRlbFxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ21vZGFsLW91dCBub3QtYW5pbWF0ZWQnKVxuICAgICAgICAuYWRkQ2xhc3MoJ21vZGFsLWluJyk7XG4gICAgICBtb2RhbC5vbk9wZW4oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJGVsLnJlbW92ZUNsYXNzKCdtb2RhbC1vdXQnKS5hZGRDbGFzcygnbW9kYWwtaW4gbm90LWFuaW1hdGVkJyk7XG4gICAgICBtb2RhbC5vbk9wZW4oKTtcbiAgICAgIG1vZGFsLm9uT3BlbmVkKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vZGFsO1xuICB9XG4gIGNsb3NlKGFuaW1hdGVNb2RhbCkge1xuICAgIGNvbnN0IG1vZGFsID0gdGhpcztcbiAgICBjb25zdCAkZWwgPSBtb2RhbC4kZWw7XG4gICAgY29uc3QgJGJhY2tkcm9wRWwgPSBtb2RhbC4kYmFja2Ryb3BFbDtcblxuICAgIGxldCBhbmltYXRlID0gdHJ1ZTtcbiAgICBpZiAodHlwZW9mIGFuaW1hdGVNb2RhbCAhPT0gJ3VuZGVmaW5lZCcpIGFuaW1hdGUgPSBhbmltYXRlTW9kYWw7XG4gICAgZWxzZSBpZiAodHlwZW9mIG1vZGFsLnBhcmFtcy5hbmltYXRlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgYW5pbWF0ZSA9IG1vZGFsLnBhcmFtcy5hbmltYXRlO1xuICAgIH1cblxuICAgIGlmICghJGVsIHx8ICEkZWwuaGFzQ2xhc3MoJ21vZGFsLWluJykpIHtcbiAgICAgIHJldHVybiBtb2RhbDtcbiAgICB9XG5cbiAgICAvLyBiYWNrZHJvcFxuICAgIGlmICgkYmFja2Ryb3BFbCkge1xuICAgICAgJGJhY2tkcm9wRWxbYW5pbWF0ZSA/ICdyZW1vdmVDbGFzcycgOiAnYWRkQ2xhc3MnXSgnbm90LWFuaW1hdGVkJyk7XG4gICAgICAkYmFja2Ryb3BFbC5yZW1vdmVDbGFzcygnYmFja2Ryb3AtaW4nKTtcbiAgICB9XG5cbiAgICAvLyBNb2RhbFxuICAgICRlbFthbmltYXRlID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKCdub3QtYW5pbWF0ZWQnKTtcbiAgICBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKCkge1xuICAgICAgaWYgKCRlbC5oYXNDbGFzcygnbW9kYWwtb3V0JykpIHtcbiAgICAgICAgbW9kYWwub25DbG9zZWQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1vZGFsLm9uT3BlbmVkKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChhbmltYXRlKSB7XG4gICAgICAkZWxcbiAgICAgICAgLmFuaW1hdGlvbkVuZCgoKSA9PiB7XG4gICAgICAgICAgdHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICB9KTtcbiAgICAgICRlbFxuICAgICAgICAudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAgICAgdHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICB9KTtcbiAgICAgICRlbFxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ21vZGFsLWluJylcbiAgICAgICAgLmFkZENsYXNzKCdtb2RhbC1vdXQnKTtcbiAgICAgIC8vIEVtaXQgY2xvc2VcbiAgICAgIG1vZGFsLm9uQ2xvc2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJGVsXG4gICAgICAgIC5hZGRDbGFzcygnbm90LWFuaW1hdGVkJylcbiAgICAgICAgLnJlbW92ZUNsYXNzKCdtb2RhbC1pbicpXG4gICAgICAgIC5hZGRDbGFzcygnbW9kYWwtb3V0Jyk7XG4gICAgICAvLyBFbWl0IGNsb3NlXG4gICAgICBtb2RhbC5vbkNsb3NlKCk7XG4gICAgICBtb2RhbC5vbkNsb3NlZCgpO1xuICAgIH1cblxuICAgIGlmIChtb2RhbC50eXBlID09PSAnZGlhbG9nJykge1xuICAgICAgY2xlYXJEaWFsb2dzUXVldWUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbW9kYWw7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICBsZXQgbW9kYWwgPSB0aGlzO1xuICAgIG1vZGFsLmVtaXQoYGxvY2FsOjpiZWZvcmVEZXN0cm95IG1vZGFsQmVmb3JlRGVzdHJveSAke21vZGFsLnR5cGV9QmVmb3JlRGVzdHJveWAsIG1vZGFsKTtcbiAgICBpZiAobW9kYWwuJGVsKSB7XG4gICAgICBtb2RhbC4kZWwudHJpZ2dlcihgbW9kYWw6YmVmb3JlZGVzdHJveSAke21vZGFsLnR5cGUudG9Mb3dlckNhc2UoKX06YmVmb3JlZGVzdHJveWAsIG1vZGFsKTtcbiAgICAgIGlmIChtb2RhbC4kZWwubGVuZ3RoICYmIG1vZGFsLiRlbFswXS5mN01vZGFsKSB7XG4gICAgICAgIGRlbGV0ZSBtb2RhbC4kZWxbMF0uZjdNb2RhbDtcbiAgICAgIH1cbiAgICB9XG4gICAgVXRpbHMuZGVsZXRlUHJvcHMobW9kYWwpO1xuICAgIG1vZGFsID0gbnVsbDtcbiAgfVxufVxuXG52YXIgbW9kYWwgPSB7XG4gIG5hbWU6ICdtb2RhbCcsXG4gIHN0YXRpYzoge1xuICAgIE1vZGFsLFxuICB9LFxuICBwYXJhbXM6IHtcbiAgICBtb2RhbHM6IHtcbiAgICAgIG1vdmVUb1Jvb3Q6IHRydWUsXG5cbiAgICAgIHF1ZXVlRGlhbG9nczogdHJ1ZSxcbiAgICAgIGRpYWxvZ1RpdGxlOiAnRnJhbWV3b3JrNycsXG4gICAgICBkaWFsb2dCdXR0b25PazogJ09LJyxcbiAgICAgIGRpYWxvZ0J1dHRvbkNhbmNlbDogJ0NhbmNlbCcsXG4gICAgICBkaWFsb2dVc2VybmFtZVBsYWNlaG9sZGVyOiAnVXNlcm5hbWUnLFxuICAgICAgZGlhbG9nUGFzc3dvcmRQbGFjZWhvbGRlcjogJ1Bhc3N3b3JkJyxcbiAgICAgIGRpYWxvZ1ByZWxvYWRlclRpdGxlOiAnTG9hZGluZy4uLiAnLFxuICAgICAgZGlhbG9nUHJvZ3Jlc3NUaXRsZTogJ0xvYWRpbmcuLi4gJyxcbiAgICAgIGRpYWxvZ0Nsb3NlQnlCYWNrZHJvcENsaWNrOiBmYWxzZSxcblxuICAgICAgcG9wdXBDbG9zZUJ5QmFja2Ryb3BDbGljazogdHJ1ZSxcblxuICAgICAgcG9wb3ZlckNsb3NlQnlCYWNrZHJvcENsaWNrOiB0cnVlLFxuICAgICAgcG9wb3ZlckNsb3NlQnlPdXRzaWRlQ2xpY2s6IGZhbHNlLFxuXG4gICAgICBhY3Rpb25zVG9Qb3BvdmVyOiB0cnVlLFxuICAgICAgYWN0aW9uc0Nsb3NlQnlCYWNrZHJvcENsaWNrOiB0cnVlLFxuXG4gICAgICBzaGVldENsb3NlQnlCYWNrZHJvcENsaWNrOiB0cnVlLFxuICAgICAgc2hlZXRDbG9zZUJ5T3V0c2lkZUNsaWNrOiBmYWxzZSxcblxuICAgICAgdG9hc3RQb3NpdGlvbjogJ2JvdHRvbScsIC8vIG9yICd0b3AnIG9yICdjZW50ZXInXG4gICAgICB0b2FzdENsb3NlQnV0dG9uOiBmYWxzZSxcbiAgICAgIHRvYXN0Q2xvc2VCdXR0b25Db2xvcjogdW5kZWZpbmVkLFxuICAgICAgdG9hc3RDbG9zZUJ1dHRvblRleHQ6ICdPaycsXG4gICAgICB0b2FzdENsb3NlVGltZW91dDogdW5kZWZpbmVkLFxuICAgIH0sXG4gIH0sXG59O1xuXG5jbGFzcyBEaWFsb2cgZXh0ZW5kcyBNb2RhbCB7XG4gIGNvbnN0cnVjdG9yKGFwcCwgcGFyYW1zKSB7XG4gICAgY29uc3QgZXh0ZW5kZWRQYXJhbXMgPSBVdGlscy5leHRlbmQoe1xuICAgICAgdGl0bGU6IGFwcC5wYXJhbXMubW9kYWxzLmRpYWxvZ1RpdGxlLFxuICAgICAgdGV4dDogdW5kZWZpbmVkLFxuICAgICAgY29udGVudDogJycsXG4gICAgICBidXR0b25zOiBbXSxcbiAgICAgIHZlcnRpY2FsQnV0dG9uczogZmFsc2UsXG4gICAgICBvbkNsaWNrOiB1bmRlZmluZWQsXG4gICAgICBjc3NDbGFzczogdW5kZWZpbmVkLFxuICAgICAgb246IHt9LFxuICAgIH0sIHBhcmFtcyk7XG5cbiAgICAvLyBFeHRlbmRzIHdpdGggb3Blbi9jbG9zZSBNb2RhbCBtZXRob2RzO1xuICAgIHN1cGVyKGFwcCwgZXh0ZW5kZWRQYXJhbXMpO1xuXG4gICAgY29uc3QgZGlhbG9nID0gdGhpcztcblxuICAgIGNvbnN0IHsgdGl0bGUsIHRleHQsIGNvbnRlbnQsIGJ1dHRvbnMsIHZlcnRpY2FsQnV0dG9ucywgY3NzQ2xhc3MgfSA9IGV4dGVuZGVkUGFyYW1zO1xuXG4gICAgZGlhbG9nLnBhcmFtcyA9IGV4dGVuZGVkUGFyYW1zO1xuXG4gICAgLy8gRmluZCBFbGVtZW50XG4gICAgbGV0ICRlbDtcbiAgICBpZiAoIWRpYWxvZy5wYXJhbXMuZWwpIHtcbiAgICAgIGNvbnN0IGRpYWxvZ0NsYXNzZXMgPSBbJ2RpYWxvZyddO1xuICAgICAgaWYgKGJ1dHRvbnMubGVuZ3RoID09PSAwKSBkaWFsb2dDbGFzc2VzLnB1c2goJ2RpYWxvZy1uby1idXR0b25zJyk7XG4gICAgICBpZiAoYnV0dG9ucy5sZW5ndGggPiAwKSBkaWFsb2dDbGFzc2VzLnB1c2goYGRpYWxvZy1idXR0b25zLSR7YnV0dG9ucy5sZW5ndGh9YCk7XG4gICAgICBpZiAodmVydGljYWxCdXR0b25zKSBkaWFsb2dDbGFzc2VzLnB1c2goJ2RpYWxvZy1idXR0b25zLXZlcnRpY2FsJyk7XG4gICAgICBpZiAoY3NzQ2xhc3MpIGRpYWxvZ0NsYXNzZXMucHVzaChjc3NDbGFzcyk7XG5cbiAgICAgIGxldCBidXR0b25zSFRNTCA9ICcnO1xuICAgICAgaWYgKGJ1dHRvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBidXR0b25zSFRNTCA9IGBcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGlhbG9nLWJ1dHRvbnNcIj5cbiAgICAgICAgICAgICR7YnV0dG9ucy5tYXAoYnV0dG9uID0+IGBcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJkaWFsb2ctYnV0dG9uJHtidXR0b24uYm9sZCA/ICcgZGlhbG9nLWJ1dHRvbi1ib2xkJyA6ICcnfSR7YnV0dG9uLmNvbG9yID8gYCBjb2xvci0ke2J1dHRvbi5jb2xvcn1gIDogJyd9XCI+JHtidXR0b24udGV4dH08L3NwYW4+XG4gICAgICAgICAgICBgKS5qb2luKCcnKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZGlhbG9nSHRtbCA9IGBcbiAgICAgICAgPGRpdiBjbGFzcz1cIiR7ZGlhbG9nQ2xhc3Nlcy5qb2luKCcgJyl9XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImRpYWxvZy1pbm5lclwiPlxuICAgICAgICAgICAgJHt0aXRsZSA/IGA8ZGl2IGNsYXNzPVwiZGlhbG9nLXRpdGxlXCI+JHt0aXRsZX08L2Rpdj5gIDogJyd9XG4gICAgICAgICAgICAke3RleHQgPyBgPGRpdiBjbGFzcz1cImRpYWxvZy10ZXh0XCI+JHt0ZXh0fTwvZGl2PmAgOiAnJ31cbiAgICAgICAgICAgICR7Y29udGVudH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAke2J1dHRvbnNIVE1MfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIGA7XG4gICAgICAkZWwgPSAkKGRpYWxvZ0h0bWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkZWwgPSAkKGRpYWxvZy5wYXJhbXMuZWwpO1xuICAgIH1cblxuICAgIGlmICgkZWwgJiYgJGVsLmxlbmd0aCA+IDAgJiYgJGVsWzBdLmY3TW9kYWwpIHtcbiAgICAgIHJldHVybiAkZWxbMF0uZjdNb2RhbDtcbiAgICB9XG5cbiAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGRpYWxvZy5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgbGV0ICRiYWNrZHJvcEVsID0gYXBwLnJvb3QuY2hpbGRyZW4oJy5kaWFsb2ctYmFja2Ryb3AnKTtcbiAgICBpZiAoJGJhY2tkcm9wRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAkYmFja2Ryb3BFbCA9ICQoJzxkaXYgY2xhc3M9XCJkaWFsb2ctYmFja2Ryb3BcIj48L2Rpdj4nKTtcbiAgICAgIGFwcC5yb290LmFwcGVuZCgkYmFja2Ryb3BFbCk7XG4gICAgfVxuXG4gICAgLy8gQXNzaWduIGV2ZW50c1xuICAgIGZ1bmN0aW9uIGJ1dHRvbk9uQ2xpY2soZSkge1xuICAgICAgY29uc3QgYnV0dG9uRWwgPSB0aGlzO1xuICAgICAgY29uc3QgaW5kZXggPSAkKGJ1dHRvbkVsKS5pbmRleCgpO1xuICAgICAgY29uc3QgYnV0dG9uID0gYnV0dG9uc1tpbmRleF07XG4gICAgICBpZiAoYnV0dG9uLm9uQ2xpY2spIGJ1dHRvbi5vbkNsaWNrKGRpYWxvZywgZSk7XG4gICAgICBpZiAoZGlhbG9nLnBhcmFtcy5vbkNsaWNrKSBkaWFsb2cucGFyYW1zLm9uQ2xpY2soZGlhbG9nLCBpbmRleCk7XG4gICAgICBpZiAoYnV0dG9uLmNsb3NlICE9PSBmYWxzZSkgZGlhbG9nLmNsb3NlKCk7XG4gICAgfVxuICAgIGlmIChidXR0b25zICYmIGJ1dHRvbnMubGVuZ3RoID4gMCkge1xuICAgICAgJGVsLmZpbmQoJy5kaWFsb2ctYnV0dG9uJykuZWFjaCgoaW5kZXgsIGJ1dHRvbkVsKSA9PiB7XG4gICAgICAgICQoYnV0dG9uRWwpLm9uKCdjbGljaycsIGJ1dHRvbk9uQ2xpY2spO1xuICAgICAgfSk7XG4gICAgICBkaWFsb2cub24oJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgICAkZWwuZmluZCgnLmRpYWxvZy1idXR0b24nKS5lYWNoKChpbmRleCwgYnV0dG9uRWwpID0+IHtcbiAgICAgICAgICAkKGJ1dHRvbkVsKS5vZmYoJ2NsaWNrJywgYnV0dG9uT25DbGljayk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIFV0aWxzLmV4dGVuZChkaWFsb2csIHtcbiAgICAgIGFwcCxcbiAgICAgICRlbCxcbiAgICAgIGVsOiAkZWxbMF0sXG4gICAgICAkYmFja2Ryb3BFbCxcbiAgICAgIGJhY2tkcm9wRWw6ICRiYWNrZHJvcEVsWzBdLFxuICAgICAgdHlwZTogJ2RpYWxvZycsXG4gICAgICBzZXRQcm9ncmVzcyhwcm9ncmVzcywgZHVyYXRpb24pIHtcbiAgICAgICAgYXBwLnByb2dyZXNzYmFyLnNldCgkZWwuZmluZCgnLnByb2dyZXNzYmFyJyksIHByb2dyZXNzLCBkdXJhdGlvbik7XG4gICAgICAgIHJldHVybiBkaWFsb2c7XG4gICAgICB9LFxuICAgICAgc2V0VGV4dChuZXdUZXh0KSB7XG4gICAgICAgIGxldCAkdGV4dEVsID0gJGVsLmZpbmQoJy5kaWFsb2ctdGV4dCcpO1xuICAgICAgICBpZiAoJHRleHRFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAkdGV4dEVsID0gJCgnPGRpdiBjbGFzcz1cImRpYWxvZy10ZXh0XCI+PC9kaXY+Jyk7XG4gICAgICAgICAgaWYgKHR5cGVvZiB0aXRsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICR0ZXh0RWwuaW5zZXJ0QWZ0ZXIoJGVsLmZpbmQoJy5kaWFsb2ctdGl0bGUnKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRlbC5maW5kKCcuZGlhbG9nLWlubmVyJykucHJlcGVuZCgkdGV4dEVsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgJHRleHRFbC5odG1sKG5ld1RleHQpO1xuICAgICAgICBkaWFsb2cucGFyYW1zLnRleHQgPSBuZXdUZXh0O1xuICAgICAgICByZXR1cm4gZGlhbG9nO1xuICAgICAgfSxcbiAgICAgIHNldFRpdGxlKG5ld1RpdGxlKSB7XG4gICAgICAgIGxldCAkdGl0bGVFbCA9ICRlbC5maW5kKCcuZGlhbG9nLXRpdGxlJyk7XG4gICAgICAgIGlmICgkdGl0bGVFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAkdGl0bGVFbCA9ICQoJzxkaXYgY2xhc3M9XCJkaWFsb2ctdGl0bGVcIj48L2Rpdj4nKTtcbiAgICAgICAgICAkZWwuZmluZCgnLmRpYWxvZy1pbm5lcicpLnByZXBlbmQoJHRpdGxlRWwpO1xuICAgICAgICB9XG4gICAgICAgICR0aXRsZUVsLmh0bWwobmV3VGl0bGUpO1xuICAgICAgICBkaWFsb2cucGFyYW1zLnRpdGxlID0gbmV3VGl0bGU7XG4gICAgICAgIHJldHVybiBkaWFsb2c7XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgJGVsWzBdLmY3TW9kYWwgPSBkaWFsb2c7XG5cbiAgICByZXR1cm4gZGlhbG9nO1xuICB9XG59XG5cbnZhciBDb25zdHJ1Y3Rvck1ldGhvZHMgPSBmdW5jdGlvbiAocGFyYW1ldGVycyA9IHt9KSB7XG4gIGNvbnN0IHsgZGVmYXVsdFNlbGVjdG9yLCBjb25zdHJ1Y3RvciwgZG9tUHJvcCwgYXBwLCBhZGRNZXRob2RzIH0gPSBwYXJhbWV0ZXJzO1xuICBjb25zdCBtZXRob2RzID0ge1xuICAgIGNyZWF0ZShwYXJhbXMpIHtcbiAgICAgIHJldHVybiBuZXcgY29uc3RydWN0b3IoYXBwLCBwYXJhbXMpO1xuICAgIH0sXG4gICAgZ2V0KGVsID0gZGVmYXVsdFNlbGVjdG9yKSB7XG4gICAgICBpZiAoZWwgaW5zdGFuY2VvZiBjb25zdHJ1Y3RvcikgcmV0dXJuIGVsO1xuICAgICAgY29uc3QgJGVsID0gJChlbCk7XG4gICAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiAkZWxbMF1bZG9tUHJvcF07XG4gICAgfSxcbiAgICBkZXN0cm95KGVsKSB7XG4gICAgICBjb25zdCBpbnN0YW5jZSA9IG1ldGhvZHMuZ2V0KGVsKTtcbiAgICAgIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZS5kZXN0cm95KSByZXR1cm4gaW5zdGFuY2UuZGVzdHJveSgpO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9LFxuICB9O1xuICBpZiAoYWRkTWV0aG9kcyAmJiBBcnJheS5pc0FycmF5KGFkZE1ldGhvZHMpKSB7XG4gICAgYWRkTWV0aG9kcy5mb3JFYWNoKChtZXRob2ROYW1lKSA9PiB7XG4gICAgICBtZXRob2RzW21ldGhvZE5hbWVdID0gKGVsID0gZGVmYXVsdFNlbGVjdG9yLCAuLi5hcmdzKSA9PiB7XG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gbWV0aG9kcy5nZXQoZWwpO1xuICAgICAgICBpZiAoaW5zdGFuY2UgJiYgaW5zdGFuY2VbbWV0aG9kTmFtZV0pIHJldHVybiBpbnN0YW5jZVttZXRob2ROYW1lXSguLi5hcmdzKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuXG52YXIgTW9kYWxNZXRob2RzID0gZnVuY3Rpb24gKHBhcmFtZXRlcnMgPSB7fSkge1xuICBjb25zdCB7IGRlZmF1bHRTZWxlY3RvciwgY29uc3RydWN0b3IsIGFwcCB9ID0gcGFyYW1ldGVycztcbiAgY29uc3QgbWV0aG9kcyA9IFV0aWxzLmV4dGVuZChcbiAgICBDb25zdHJ1Y3Rvck1ldGhvZHMoe1xuICAgICAgZGVmYXVsdFNlbGVjdG9yLFxuICAgICAgY29uc3RydWN0b3IsXG4gICAgICBhcHAsXG4gICAgICBkb21Qcm9wOiAnZjdNb2RhbCcsXG4gICAgfSksXG4gICAge1xuICAgICAgb3BlbihlbCwgYW5pbWF0ZSkge1xuICAgICAgICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgICAgICAgbGV0IGluc3RhbmNlID0gJGVsWzBdLmY3TW9kYWw7XG4gICAgICAgIGlmICghaW5zdGFuY2UpIGluc3RhbmNlID0gbmV3IGNvbnN0cnVjdG9yKGFwcCwgeyBlbDogJGVsIH0pO1xuICAgICAgICByZXR1cm4gaW5zdGFuY2Uub3BlbihhbmltYXRlKTtcbiAgICAgIH0sXG4gICAgICBjbG9zZShlbCA9IGRlZmF1bHRTZWxlY3RvciwgYW5pbWF0ZSkge1xuICAgICAgICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgICAgICAgaWYgKCRlbC5sZW5ndGggPT09IDApIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIGxldCBpbnN0YW5jZSA9ICRlbFswXS5mN01vZGFsO1xuICAgICAgICBpZiAoIWluc3RhbmNlKSBpbnN0YW5jZSA9IG5ldyBjb25zdHJ1Y3RvcihhcHAsIHsgZWw6ICRlbCB9KTtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLmNsb3NlKGFuaW1hdGUpO1xuICAgICAgfSxcbiAgICB9XG4gICk7XG4gIHJldHVybiBtZXRob2RzO1xufTtcblxudmFyIGRpYWxvZyA9IHtcbiAgbmFtZTogJ2RpYWxvZycsXG4gIHN0YXRpYzoge1xuICAgIERpYWxvZyxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgYXBwLmRpYWxvZyA9IFV0aWxzLmV4dGVuZChcbiAgICAgIE1vZGFsTWV0aG9kcyh7XG4gICAgICAgIGFwcCxcbiAgICAgICAgY29uc3RydWN0b3I6IERpYWxvZyxcbiAgICAgICAgZGVmYXVsdFNlbGVjdG9yOiAnLmRpYWxvZy5tb2RhbC1pbicsXG4gICAgICB9KSxcbiAgICAgIHtcbiAgICAgICAgLy8gU2hvcnRjdXRzXG4gICAgICAgIGFsZXJ0KC4uLmFyZ3MpIHtcbiAgICAgICAgICBsZXQgW3RleHQsIHRpdGxlLCBjYWxsYmFja09rXSA9IGFyZ3M7XG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAyICYmIHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBbdGV4dCwgY2FsbGJhY2tPaywgdGl0bGVdID0gYXJncztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG5ldyBEaWFsb2coYXBwLCB7XG4gICAgICAgICAgICB0aXRsZTogdHlwZW9mIHRpdGxlID09PSAndW5kZWZpbmVkJyA/IGFwcC5wYXJhbXMubW9kYWxzLmRpYWxvZ1RpdGxlIDogdGl0bGUsXG4gICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgYnV0dG9uczogW3tcbiAgICAgICAgICAgICAgdGV4dDogYXBwLnBhcmFtcy5tb2RhbHMuZGlhbG9nQnV0dG9uT2ssXG4gICAgICAgICAgICAgIGJvbGQ6IHRydWUsXG4gICAgICAgICAgICAgIG9uQ2xpY2s6IGNhbGxiYWNrT2ssXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICB9KS5vcGVuKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHByb21wdCguLi5hcmdzKSB7XG4gICAgICAgICAgbGV0IFt0ZXh0LCB0aXRsZSwgY2FsbGJhY2tPaywgY2FsbGJhY2tDYW5jZWxdID0gYXJncztcbiAgICAgICAgICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIFt0ZXh0LCBjYWxsYmFja09rLCBjYWxsYmFja0NhbmNlbCwgdGl0bGVdID0gYXJncztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG5ldyBEaWFsb2coYXBwLCB7XG4gICAgICAgICAgICB0aXRsZTogdHlwZW9mIHRpdGxlID09PSAndW5kZWZpbmVkJyA/IGFwcC5wYXJhbXMubW9kYWxzLmRpYWxvZ1RpdGxlIDogdGl0bGUsXG4gICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgY29udGVudDogJzxkaXYgY2xhc3M9XCJkaWFsb2ctaW5wdXQtZmllbGQgaXRlbS1pbnB1dFwiPjxkaXYgY2xhc3M9XCJpdGVtLWlucHV0LXdyYXBcIj48aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImRpYWxvZy1pbnB1dFwiPjwvZGl2PjwvZGl2PicsXG4gICAgICAgICAgICBidXR0b25zOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBhcHAucGFyYW1zLm1vZGFscy5kaWFsb2dCdXR0b25DYW5jZWwsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBhcHAucGFyYW1zLm1vZGFscy5kaWFsb2dCdXR0b25PayxcbiAgICAgICAgICAgICAgICBib2xkOiB0cnVlLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIG9uQ2xpY2soZGlhbG9nLCBpbmRleCkge1xuICAgICAgICAgICAgICBjb25zdCBpbnB1dFZhbHVlID0gZGlhbG9nLiRlbC5maW5kKCcuZGlhbG9nLWlucHV0JykudmFsKCk7XG4gICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCAmJiBjYWxsYmFja0NhbmNlbCkgY2FsbGJhY2tDYW5jZWwoaW5wdXRWYWx1ZSk7XG4gICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMSAmJiBjYWxsYmFja09rKSBjYWxsYmFja09rKGlucHV0VmFsdWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KS5vcGVuKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbmZpcm0oLi4uYXJncykge1xuICAgICAgICAgIGxldCBbdGV4dCwgdGl0bGUsIGNhbGxiYWNrT2ssIGNhbGxiYWNrQ2FuY2VsXSA9IGFyZ3M7XG4gICAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBbdGV4dCwgY2FsbGJhY2tPaywgY2FsbGJhY2tDYW5jZWwsIHRpdGxlXSA9IGFyZ3M7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBuZXcgRGlhbG9nKGFwcCwge1xuICAgICAgICAgICAgdGl0bGU6IHR5cGVvZiB0aXRsZSA9PT0gJ3VuZGVmaW5lZCcgPyBhcHAucGFyYW1zLm1vZGFscy5kaWFsb2dUaXRsZSA6IHRpdGxlLFxuICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgIGJ1dHRvbnM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRleHQ6IGFwcC5wYXJhbXMubW9kYWxzLmRpYWxvZ0J1dHRvbkNhbmNlbCxcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiBjYWxsYmFja0NhbmNlbCxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRleHQ6IGFwcC5wYXJhbXMubW9kYWxzLmRpYWxvZ0J1dHRvbk9rLFxuICAgICAgICAgICAgICAgIGJvbGQ6IHRydWUsXG4gICAgICAgICAgICAgICAgb25DbGljazogY2FsbGJhY2tPayxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSkub3BlbigpO1xuICAgICAgICB9LFxuICAgICAgICBsb2dpbiguLi5hcmdzKSB7XG4gICAgICAgICAgbGV0IFt0ZXh0LCB0aXRsZSwgY2FsbGJhY2tPaywgY2FsbGJhY2tDYW5jZWxdID0gYXJncztcbiAgICAgICAgICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIFt0ZXh0LCBjYWxsYmFja09rLCBjYWxsYmFja0NhbmNlbCwgdGl0bGVdID0gYXJncztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG5ldyBEaWFsb2coYXBwLCB7XG4gICAgICAgICAgICB0aXRsZTogdHlwZW9mIHRpdGxlID09PSAndW5kZWZpbmVkJyA/IGFwcC5wYXJhbXMubW9kYWxzLmRpYWxvZ1RpdGxlIDogdGl0bGUsXG4gICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgY29udGVudDogYFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGlhbG9nLWlucHV0LWZpZWxkIGRpYWxvZy1pbnB1dC1kb3VibGUgaXRlbS1pbnB1dFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpdGVtLWlucHV0LXdyYXBcIj5cbiAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJkaWFsb2ctdXNlcm5hbWVcIiBwbGFjZWhvbGRlcj1cIiR7YXBwLnBhcmFtcy5tb2RhbHMuZGlhbG9nVXNlcm5hbWVQbGFjZWhvbGRlcn1cIiBjbGFzcz1cImRpYWxvZy1pbnB1dFwiPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpYWxvZy1pbnB1dC1maWVsZCBkaWFsb2ctaW5wdXQtZG91YmxlIGl0ZW0taW5wdXRcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaXRlbS1pbnB1dC13cmFwXCI+XG4gICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInBhc3N3b3JkXCIgbmFtZT1cImRpYWxvZy1wYXNzd29yZFwiIHBsYWNlaG9sZGVyPVwiJHthcHAucGFyYW1zLm1vZGFscy5kaWFsb2dQYXNzd29yZFBsYWNlaG9sZGVyfVwiIGNsYXNzPVwiZGlhbG9nLWlucHV0XCI+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PmAsXG4gICAgICAgICAgICBidXR0b25zOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBhcHAucGFyYW1zLm1vZGFscy5kaWFsb2dCdXR0b25DYW5jZWwsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBhcHAucGFyYW1zLm1vZGFscy5kaWFsb2dCdXR0b25PayxcbiAgICAgICAgICAgICAgICBib2xkOiB0cnVlLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIG9uQ2xpY2soZGlhbG9nLCBpbmRleCkge1xuICAgICAgICAgICAgICBjb25zdCB1c2VybmFtZSA9IGRpYWxvZy4kZWwuZmluZCgnW25hbWU9XCJkaWFsb2ctdXNlcm5hbWVcIl0nKS52YWwoKTtcbiAgICAgICAgICAgICAgY29uc3QgcGFzc3dvcmQgPSBkaWFsb2cuJGVsLmZpbmQoJ1tuYW1lPVwiZGlhbG9nLXBhc3N3b3JkXCJdJykudmFsKCk7XG4gICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCAmJiBjYWxsYmFja0NhbmNlbCkgY2FsbGJhY2tDYW5jZWwodXNlcm5hbWUsIHBhc3N3b3JkKTtcbiAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSAxICYmIGNhbGxiYWNrT2spIGNhbGxiYWNrT2sodXNlcm5hbWUsIHBhc3N3b3JkKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSkub3BlbigpO1xuICAgICAgICB9LFxuICAgICAgICBwYXNzd29yZCguLi5hcmdzKSB7XG4gICAgICAgICAgbGV0IFt0ZXh0LCB0aXRsZSwgY2FsbGJhY2tPaywgY2FsbGJhY2tDYW5jZWxdID0gYXJncztcbiAgICAgICAgICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIFt0ZXh0LCBjYWxsYmFja09rLCBjYWxsYmFja0NhbmNlbCwgdGl0bGVdID0gYXJncztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG5ldyBEaWFsb2coYXBwLCB7XG4gICAgICAgICAgICB0aXRsZTogdHlwZW9mIHRpdGxlID09PSAndW5kZWZpbmVkJyA/IGFwcC5wYXJhbXMubW9kYWxzLmRpYWxvZ1RpdGxlIDogdGl0bGUsXG4gICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgY29udGVudDogYFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGlhbG9nLWlucHV0LWZpZWxkIGl0ZW0taW5wdXRcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaXRlbS1pbnB1dC13cmFwXCI+XG4gICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInBhc3N3b3JkXCIgbmFtZT1cImRpYWxvZy1wYXNzd29yZFwiIHBsYWNlaG9sZGVyPVwiJHthcHAucGFyYW1zLm1vZGFscy5kaWFsb2dQYXNzd29yZFBsYWNlaG9sZGVyfVwiIGNsYXNzPVwiZGlhbG9nLWlucHV0XCI+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PmAsXG4gICAgICAgICAgICBidXR0b25zOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBhcHAucGFyYW1zLm1vZGFscy5kaWFsb2dCdXR0b25DYW5jZWwsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBhcHAucGFyYW1zLm1vZGFscy5kaWFsb2dCdXR0b25PayxcbiAgICAgICAgICAgICAgICBib2xkOiB0cnVlLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIG9uQ2xpY2soZGlhbG9nLCBpbmRleCkge1xuICAgICAgICAgICAgICBjb25zdCBwYXNzd29yZCA9IGRpYWxvZy4kZWwuZmluZCgnW25hbWU9XCJkaWFsb2ctcGFzc3dvcmRcIl0nKS52YWwoKTtcbiAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwICYmIGNhbGxiYWNrQ2FuY2VsKSBjYWxsYmFja0NhbmNlbChwYXNzd29yZCk7XG4gICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMSAmJiBjYWxsYmFja09rKSBjYWxsYmFja09rKHBhc3N3b3JkKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSkub3BlbigpO1xuICAgICAgICB9LFxuICAgICAgICBwcmVsb2FkZXIodGl0bGUpIHtcbiAgICAgICAgICBjb25zdCBwcmVsb2FkZXJJbm5lciA9IGFwcC50aGVtZSAhPT0gJ21kJyA/ICcnIDpcbiAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInByZWxvYWRlci1pbm5lclwiPicgK1xuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInByZWxvYWRlci1pbm5lci1nYXBcIj48L3NwYW4+JyArXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicHJlbG9hZGVyLWlubmVyLWxlZnRcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicHJlbG9hZGVyLWlubmVyLWhhbGYtY2lyY2xlXCI+PC9zcGFuPicgK1xuICAgICAgICAgICAgICAgICc8L3NwYW4+JyArXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicHJlbG9hZGVyLWlubmVyLXJpZ2h0XCI+JyArXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInByZWxvYWRlci1pbm5lci1oYWxmLWNpcmNsZVwiPjwvc3Bhbj4nICtcbiAgICAgICAgICAgICAgICAnPC9zcGFuPicgK1xuICAgICAgICAgICAgJzwvc3Bhbj4nO1xuICAgICAgICAgIHJldHVybiBuZXcgRGlhbG9nKGFwcCwge1xuICAgICAgICAgICAgdGl0bGU6IHR5cGVvZiB0aXRsZSA9PT0gJ3VuZGVmaW5lZCcgPyBhcHAucGFyYW1zLm1vZGFscy5kaWFsb2dQcmVsb2FkZXJUaXRsZSA6IHRpdGxlLFxuICAgICAgICAgICAgY29udGVudDogYDxkaXYgY2xhc3M9XCJwcmVsb2FkZXJcIj4ke3ByZWxvYWRlcklubmVyfTwvZGl2PmAsXG4gICAgICAgICAgICBjc3NDbGFzczogJ2RpYWxvZy1wcmVsb2FkZXInLFxuICAgICAgICAgIH0pLm9wZW4oKTtcbiAgICAgICAgfSxcbiAgICAgICAgcHJvZ3Jlc3MoLi4uYXJncykge1xuICAgICAgICAgIGxldCBbdGl0bGUsIHByb2dyZXNzLCBjb2xvcl0gPSBhcmdzO1xuICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICBbcHJvZ3Jlc3MsIGNvbG9yLCB0aXRsZV0gPSBhcmdzO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIGFyZ3NbMV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIFt0aXRsZSwgY29sb3IsIHByb2dyZXNzXSA9IGFyZ3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICBbcHJvZ3Jlc3MsIHRpdGxlLCBjb2xvcl0gPSBhcmdzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBpbmZpbml0ZSA9IHR5cGVvZiBwcm9ncmVzcyA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgICAgY29uc3QgZGlhbG9nID0gbmV3IERpYWxvZyhhcHAsIHtcbiAgICAgICAgICAgIHRpdGxlOiB0eXBlb2YgdGl0bGUgPT09ICd1bmRlZmluZWQnID8gYXBwLnBhcmFtcy5tb2RhbHMuZGlhbG9nUHJvZ3Jlc3NUaXRsZSA6IHRpdGxlLFxuICAgICAgICAgICAgY3NzQ2xhc3M6ICdkaWFsb2ctcHJvZ3Jlc3MnLFxuICAgICAgICAgICAgY29udGVudDogYFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3NiYXIke2luZmluaXRlID8gJy1pbmZpbml0ZScgOiAnJ30ke2NvbG9yID8gYCBjb2xvci0ke2NvbG9yfWAgOiAnJ31cIj5cbiAgICAgICAgICAgICAgICAkeyFpbmZpbml0ZSA/ICc8c3Bhbj48L3NwYW4+JyA6ICcnfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIGAsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKCFpbmZpbml0ZSkgZGlhbG9nLnNldFByb2dyZXNzKHByb2dyZXNzKTtcbiAgICAgICAgICByZXR1cm4gZGlhbG9nLm9wZW4oKTtcbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICApO1xuICB9LFxuICBjbGlja3M6IHtcbiAgICAnLmRpYWxvZy1iYWNrZHJvcCc6IGZ1bmN0aW9uIGNsb3NlRGlhbG9nKCkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGlmICghYXBwLnBhcmFtcy5tb2RhbHMuZGlhbG9nQ2xvc2VCeUJhY2tkcm9wQ2xpY2spIHJldHVybjtcbiAgICAgIGFwcC5kaWFsb2cuY2xvc2UoKTtcbiAgICB9LFxuICB9LFxufTtcblxuY2xhc3MgUG9wdXAgZXh0ZW5kcyBNb2RhbCB7XG4gIGNvbnN0cnVjdG9yKGFwcCwgcGFyYW1zKSB7XG4gICAgY29uc3QgZXh0ZW5kZWRQYXJhbXMgPSBVdGlscy5leHRlbmQoe1xuICAgICAgb246IHt9LFxuICAgIH0sIHBhcmFtcyk7XG5cbiAgICAvLyBFeHRlbmRzIHdpdGggb3Blbi9jbG9zZSBNb2RhbCBtZXRob2RzO1xuICAgIHN1cGVyKGFwcCwgZXh0ZW5kZWRQYXJhbXMpO1xuXG4gICAgY29uc3QgcG9wdXAgPSB0aGlzO1xuXG4gICAgcG9wdXAucGFyYW1zID0gZXh0ZW5kZWRQYXJhbXM7XG5cbiAgICAvLyBGaW5kIEVsZW1lbnRcbiAgICBsZXQgJGVsO1xuICAgIGlmICghcG9wdXAucGFyYW1zLmVsKSB7XG4gICAgICAkZWwgPSAkKHBvcHVwLnBhcmFtcy5jb250ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgJGVsID0gJChwb3B1cC5wYXJhbXMuZWwpO1xuICAgIH1cblxuICAgIGlmICgkZWwgJiYgJGVsLmxlbmd0aCA+IDAgJiYgJGVsWzBdLmY3TW9kYWwpIHtcbiAgICAgIHJldHVybiAkZWxbMF0uZjdNb2RhbDtcbiAgICB9XG5cbiAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHBvcHVwLmRlc3Ryb3koKTtcbiAgICB9XG5cbiAgICBsZXQgJGJhY2tkcm9wRWw7XG4gICAgaWYgKHBvcHVwLnBhcmFtcy5iYWNrZHJvcCAhPT0gZmFsc2UpIHtcbiAgICAgICRiYWNrZHJvcEVsID0gYXBwLnJvb3QuY2hpbGRyZW4oJy5wb3B1cC1iYWNrZHJvcCcpO1xuICAgICAgaWYgKCRiYWNrZHJvcEVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAkYmFja2Ryb3BFbCA9ICQoJzxkaXYgY2xhc3M9XCJwb3B1cC1iYWNrZHJvcFwiPjwvZGl2PicpO1xuICAgICAgICBhcHAucm9vdC5hcHBlbmQoJGJhY2tkcm9wRWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIFV0aWxzLmV4dGVuZChwb3B1cCwge1xuICAgICAgYXBwLFxuICAgICAgJGVsLFxuICAgICAgZWw6ICRlbFswXSxcbiAgICAgICRiYWNrZHJvcEVsLFxuICAgICAgYmFja2Ryb3BFbDogJGJhY2tkcm9wRWwgJiYgJGJhY2tkcm9wRWxbMF0sXG4gICAgICB0eXBlOiAncG9wdXAnLFxuICAgIH0pO1xuXG4gICAgJGVsWzBdLmY3TW9kYWwgPSBwb3B1cDtcblxuICAgIHJldHVybiBwb3B1cDtcbiAgfVxufVxuXG52YXIgcG9wdXAgPSB7XG4gIG5hbWU6ICdwb3B1cCcsXG4gIHN0YXRpYzoge1xuICAgIFBvcHVwLFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBhcHAucG9wdXAgPSBNb2RhbE1ldGhvZHMoe1xuICAgICAgYXBwLFxuICAgICAgY29uc3RydWN0b3I6IFBvcHVwLFxuICAgICAgZGVmYXVsdFNlbGVjdG9yOiAnLnBvcHVwLm1vZGFsLWluJyxcbiAgICB9KTtcbiAgfSxcbiAgY2xpY2tzOiB7XG4gICAgJy5wb3B1cC1vcGVuJzogZnVuY3Rpb24gb3BlblBvcHVwKCRjbGlja2VkRWwsIGRhdGEgPSB7fSkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGFwcC5wb3B1cC5vcGVuKGRhdGEucG9wdXAsIGRhdGEuYW5pbWF0ZSk7XG4gICAgfSxcbiAgICAnLnBvcHVwLWNsb3NlJzogZnVuY3Rpb24gY2xvc2VQb3B1cCgkY2xpY2tlZEVsLCBkYXRhID0ge30pIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBhcHAucG9wdXAuY2xvc2UoZGF0YS5wb3B1cCwgZGF0YS5hbmltYXRlKTtcbiAgICB9LFxuICAgICcucG9wdXAtYmFja2Ryb3AnOiBmdW5jdGlvbiBjbG9zZVBvcHVwKCkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGlmICghYXBwLnBhcmFtcy5tb2RhbHMucG9wdXBDbG9zZUJ5QmFja2Ryb3BDbGljaykgcmV0dXJuO1xuICAgICAgYXBwLnBvcHVwLmNsb3NlKCk7XG4gICAgfSxcbiAgfSxcbn07XG5cbmNsYXNzIExvZ2luU2NyZWVuIGV4dGVuZHMgTW9kYWwge1xuICBjb25zdHJ1Y3RvcihhcHAsIHBhcmFtcykge1xuICAgIGNvbnN0IGV4dGVuZGVkUGFyYW1zID0gVXRpbHMuZXh0ZW5kKHtcbiAgICAgIG9uOiB7fSxcbiAgICB9LCBwYXJhbXMpO1xuXG4gICAgLy8gRXh0ZW5kcyB3aXRoIG9wZW4vY2xvc2UgTW9kYWwgbWV0aG9kcztcbiAgICBzdXBlcihhcHAsIGV4dGVuZGVkUGFyYW1zKTtcblxuICAgIGNvbnN0IGxvZ2luU2NyZWVuID0gdGhpcztcblxuICAgIGxvZ2luU2NyZWVuLnBhcmFtcyA9IGV4dGVuZGVkUGFyYW1zO1xuXG4gICAgLy8gRmluZCBFbGVtZW50XG4gICAgbGV0ICRlbDtcbiAgICBpZiAoIWxvZ2luU2NyZWVuLnBhcmFtcy5lbCkge1xuICAgICAgJGVsID0gJChsb2dpblNjcmVlbi5wYXJhbXMuY29udGVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICRlbCA9ICQobG9naW5TY3JlZW4ucGFyYW1zLmVsKTtcbiAgICB9XG5cbiAgICBpZiAoJGVsICYmICRlbC5sZW5ndGggPiAwICYmICRlbFswXS5mN01vZGFsKSB7XG4gICAgICByZXR1cm4gJGVsWzBdLmY3TW9kYWw7XG4gICAgfVxuXG4gICAgaWYgKCRlbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBsb2dpblNjcmVlbi5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgVXRpbHMuZXh0ZW5kKGxvZ2luU2NyZWVuLCB7XG4gICAgICBhcHAsXG4gICAgICAkZWwsXG4gICAgICBlbDogJGVsWzBdLFxuICAgICAgdHlwZTogJ2xvZ2luU2NyZWVuJyxcbiAgICB9KTtcblxuICAgICRlbFswXS5mN01vZGFsID0gbG9naW5TY3JlZW47XG5cbiAgICByZXR1cm4gbG9naW5TY3JlZW47XG4gIH1cbn1cblxudmFyIGxvZ2luU2NyZWVuID0ge1xuICBuYW1lOiAnbG9naW5TY3JlZW4nLFxuICBzdGF0aWM6IHtcbiAgICBMb2dpblNjcmVlbixcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgYXBwLmxvZ2luU2NyZWVuID0gTW9kYWxNZXRob2RzKHtcbiAgICAgIGFwcCxcbiAgICAgIGNvbnN0cnVjdG9yOiBMb2dpblNjcmVlbixcbiAgICAgIGRlZmF1bHRTZWxlY3RvcjogJy5sb2dpbi1zY3JlZW4ubW9kYWwtaW4nLFxuICAgIH0pO1xuICB9LFxuICBjbGlja3M6IHtcbiAgICAnLmxvZ2luLXNjcmVlbi1vcGVuJzogZnVuY3Rpb24gb3BlbkxvZ2luU2NyZWVuKCRjbGlja2VkRWwsIGRhdGEgPSB7fSkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGFwcC5sb2dpblNjcmVlbi5vcGVuKGRhdGEubG9naW5TY3JlZW4sIGRhdGEuYW5pbWF0ZSk7XG4gICAgfSxcbiAgICAnLmxvZ2luLXNjcmVlbi1jbG9zZSc6IGZ1bmN0aW9uIGNsb3NlTG9naW5TY3JlZW4oJGNsaWNrZWRFbCwgZGF0YSA9IHt9KSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgYXBwLmxvZ2luU2NyZWVuLmNsb3NlKGRhdGEubG9naW5TY3JlZW4sIGRhdGEuYW5pbWF0ZSk7XG4gICAgfSxcbiAgfSxcbn07XG5cbmNsYXNzIFBvcG92ZXIgZXh0ZW5kcyBNb2RhbCB7XG4gIGNvbnN0cnVjdG9yKGFwcCwgcGFyYW1zKSB7XG4gICAgY29uc3QgZXh0ZW5kZWRQYXJhbXMgPSBVdGlscy5leHRlbmQoe1xuICAgICAgYmFja2Ryb3A6IHRydWUsXG4gICAgICBjbG9zZUJ5T3V0c2lkZUNsaWNrOiBhcHAucGFyYW1zLm1vZGFscy5wb3BvdmVyQ2xvc2VCeU91dHNpZGVDbGljayxcbiAgICAgIG9uOiB7fSxcbiAgICB9LCBwYXJhbXMpO1xuXG4gICAgLy8gRXh0ZW5kcyB3aXRoIG9wZW4vY2xvc2UgTW9kYWwgbWV0aG9kcztcbiAgICBzdXBlcihhcHAsIGV4dGVuZGVkUGFyYW1zKTtcblxuICAgIGNvbnN0IHBvcG92ZXIgPSB0aGlzO1xuXG4gICAgcG9wb3Zlci5wYXJhbXMgPSBleHRlbmRlZFBhcmFtcztcblxuICAgIC8vIEZpbmQgRWxlbWVudFxuICAgIGxldCAkZWw7XG4gICAgaWYgKCFwb3BvdmVyLnBhcmFtcy5lbCkge1xuICAgICAgJGVsID0gJChwb3BvdmVyLnBhcmFtcy5jb250ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgJGVsID0gJChwb3BvdmVyLnBhcmFtcy5lbCk7XG4gICAgfVxuXG4gICAgaWYgKCRlbCAmJiAkZWwubGVuZ3RoID4gMCAmJiAkZWxbMF0uZjdNb2RhbCkge1xuICAgICAgcmV0dXJuICRlbFswXS5mN01vZGFsO1xuICAgIH1cblxuICAgIC8vIEZpbmQgVGFyZ2V0XG4gICAgY29uc3QgJHRhcmdldEVsID0gJChwb3BvdmVyLnBhcmFtcy50YXJnZXRFbCkuZXEoMCk7XG5cbiAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHBvcG92ZXIuZGVzdHJveSgpO1xuICAgIH1cblxuICAgIC8vIEJhY2tkcm9wXG4gICAgbGV0ICRiYWNrZHJvcEVsO1xuICAgIGlmIChwb3BvdmVyLnBhcmFtcy5iYWNrZHJvcCkge1xuICAgICAgJGJhY2tkcm9wRWwgPSBhcHAucm9vdC5jaGlsZHJlbignLnBvcG92ZXItYmFja2Ryb3AnKTtcbiAgICAgIGlmICgkYmFja2Ryb3BFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgJGJhY2tkcm9wRWwgPSAkKCc8ZGl2IGNsYXNzPVwicG9wb3Zlci1iYWNrZHJvcFwiPjwvZGl2PicpO1xuICAgICAgICBhcHAucm9vdC5hcHBlbmQoJGJhY2tkcm9wRWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpbmQgQW5nbGVcbiAgICBsZXQgJGFuZ2xlRWw7XG4gICAgaWYgKCRlbC5maW5kKCcucG9wb3Zlci1hbmdsZScpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgJGFuZ2xlRWwgPSAkKCc8ZGl2IGNsYXNzPVwicG9wb3Zlci1hbmdsZVwiPjwvZGl2PicpO1xuICAgICAgJGVsLnByZXBlbmQoJGFuZ2xlRWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkYW5nbGVFbCA9ICRlbC5maW5kKCcucG9wb3Zlci1hbmdsZScpO1xuICAgIH1cblxuICAgIC8vIE9wZW5cbiAgICBjb25zdCBvcmlnaW5hbE9wZW4gPSBwb3BvdmVyLm9wZW47XG5cbiAgICBVdGlscy5leHRlbmQocG9wb3Zlciwge1xuICAgICAgYXBwLFxuICAgICAgJGVsLFxuICAgICAgZWw6ICRlbFswXSxcbiAgICAgICR0YXJnZXRFbCxcbiAgICAgIHRhcmdldEVsOiAkdGFyZ2V0RWxbMF0sXG4gICAgICAkYW5nbGVFbCxcbiAgICAgIGFuZ2xlRWw6ICRhbmdsZUVsWzBdLFxuICAgICAgJGJhY2tkcm9wRWwsXG4gICAgICBiYWNrZHJvcEVsOiAkYmFja2Ryb3BFbCAmJiAkYmFja2Ryb3BFbFswXSxcbiAgICAgIHR5cGU6ICdwb3BvdmVyJyxcbiAgICAgIG9wZW4oLi4uYXJncykge1xuICAgICAgICBsZXQgW3RhcmdldEVsLCBhbmltYXRlXSA9IGFyZ3M7XG4gICAgICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ2Jvb2xlYW4nKSBbYW5pbWF0ZSwgdGFyZ2V0RWxdID0gYXJncztcbiAgICAgICAgaWYgKHRhcmdldEVsKSB7XG4gICAgICAgICAgcG9wb3Zlci4kdGFyZ2V0RWwgPSAkKHRhcmdldEVsKTtcbiAgICAgICAgICBwb3BvdmVyLnRhcmdldEVsID0gcG9wb3Zlci4kdGFyZ2V0RWxbMF07XG4gICAgICAgIH1cbiAgICAgICAgb3JpZ2luYWxPcGVuLmNhbGwocG9wb3ZlciwgYW5pbWF0ZSk7XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gaGFuZGxlUmVzaXplKCkge1xuICAgICAgcG9wb3Zlci5yZXNpemUoKTtcbiAgICB9XG4gICAgcG9wb3Zlci5vbigncG9wb3Zlck9wZW4nLCAoKSA9PiB7XG4gICAgICBwb3BvdmVyLnJlc2l6ZSgpO1xuICAgICAgYXBwLm9uKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgICAgcG9wb3Zlci5vbigncG9wb3ZlckNsb3NlJywgKCkgPT4ge1xuICAgICAgICBhcHAub2ZmKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVDbGljayhlKSB7XG4gICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgIGlmICgkKHRhcmdldCkuY2xvc2VzdChwb3BvdmVyLmVsKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcG9wb3Zlci5jbG9zZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHBvcG92ZXIub24oJ3BvcG92ZXJPcGVuZWQnLCAoKSA9PiB7XG4gICAgICBpZiAocG9wb3Zlci5wYXJhbXMuY2xvc2VCeU91dHNpZGVDbGljayAmJiAhcG9wb3Zlci5wYXJhbXMuYmFja2Ryb3ApIHtcbiAgICAgICAgYXBwLm9uKCdjbGljaycsIGhhbmRsZUNsaWNrKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBwb3BvdmVyLm9uKCdwb3BvdmVyQ2xvc2UnLCAoKSA9PiB7XG4gICAgICBpZiAocG9wb3Zlci5wYXJhbXMuY2xvc2VCeU91dHNpZGVDbGljayAmJiAhcG9wb3Zlci5wYXJhbXMuYmFja2Ryb3ApIHtcbiAgICAgICAgYXBwLm9mZignY2xpY2snLCBoYW5kbGVDbGljayk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAkZWxbMF0uZjdNb2RhbCA9IHBvcG92ZXI7XG5cbiAgICByZXR1cm4gcG9wb3ZlcjtcbiAgfVxuICByZXNpemUoKSB7XG4gICAgY29uc3QgcG9wb3ZlciA9IHRoaXM7XG4gICAgY29uc3QgeyBhcHAsICRlbCwgJHRhcmdldEVsLCAkYW5nbGVFbCB9ID0gcG9wb3ZlcjtcbiAgICAkZWwuY3NzKHsgbGVmdDogJycsIHRvcDogJycgfSk7XG4gICAgY29uc3QgW3dpZHRoLCBoZWlnaHRdID0gWyRlbC53aWR0aCgpLCAkZWwuaGVpZ2h0KCldO1xuICAgIGxldCBhbmdsZVNpemUgPSAwO1xuICAgIGxldCBhbmdsZUxlZnQ7XG4gICAgbGV0IGFuZ2xlVG9wO1xuICAgIGlmIChhcHAudGhlbWUgPT09ICdpb3MnKSB7XG4gICAgICAkYW5nbGVFbC5yZW1vdmVDbGFzcygnb24tbGVmdCBvbi1yaWdodCBvbi10b3Agb24tYm90dG9tJykuY3NzKHsgbGVmdDogJycsIHRvcDogJycgfSk7XG4gICAgICBhbmdsZVNpemUgPSAkYW5nbGVFbC53aWR0aCgpIC8gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgJGVsLnJlbW92ZUNsYXNzKCdwb3BvdmVyLW9uLWxlZnQgcG9wb3Zlci1vbi1yaWdodCBwb3BvdmVyLW9uLXRvcCBwb3BvdmVyLW9uLWJvdHRvbScpLmNzcyh7IGxlZnQ6ICcnLCB0b3A6ICcnIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHRhcmdldFdpZHRoID0gJHRhcmdldEVsLm91dGVyV2lkdGgoKTtcbiAgICBjb25zdCB0YXJnZXRIZWlnaHQgPSAkdGFyZ2V0RWwub3V0ZXJIZWlnaHQoKTtcbiAgICBjb25zdCB0YXJnZXRPZmZzZXQgPSAkdGFyZ2V0RWwub2Zmc2V0KCk7XG4gICAgY29uc3QgdGFyZ2V0T2Zmc2V0TGVmdCA9IHRhcmdldE9mZnNldC5sZWZ0IC0gYXBwLmxlZnQ7XG4gICAgbGV0IHRhcmdldE9mZnNldFRvcCA9IHRhcmdldE9mZnNldC50b3AgLSBhcHAudG9wO1xuICAgIGNvbnN0IHRhcmdldFBhcmVudFBhZ2UgPSAkdGFyZ2V0RWwucGFyZW50cygnLnBhZ2UnKTtcbiAgICBpZiAodGFyZ2V0UGFyZW50UGFnZS5sZW5ndGggPiAwKSB7XG4gICAgICB0YXJnZXRPZmZzZXRUb3AgLT0gdGFyZ2V0UGFyZW50UGFnZVswXS5zY3JvbGxUb3A7XG4gICAgfVxuXG4gICAgbGV0IFtsZWZ0LCB0b3AsIGRpZmZdID0gWzAsIDAsIDBdO1xuICAgIC8vIFRvcCBQb3NpdGlvblxuICAgIGxldCBwb3NpdGlvbiA9IGFwcC50aGVtZSA9PT0gJ21kJyA/ICdib3R0b20nIDogJ3RvcCc7XG4gICAgaWYgKGFwcC50aGVtZSA9PT0gJ21kJykge1xuICAgICAgaWYgKGhlaWdodCA8IGFwcC5oZWlnaHQgLSB0YXJnZXRPZmZzZXRUb3AgLSB0YXJnZXRIZWlnaHQpIHtcbiAgICAgICAgLy8gT24gYm90dG9tXG4gICAgICAgIHBvc2l0aW9uID0gJ2JvdHRvbSc7XG4gICAgICAgIHRvcCA9IHRhcmdldE9mZnNldFRvcDtcbiAgICAgIH0gZWxzZSBpZiAoaGVpZ2h0IDwgdGFyZ2V0T2Zmc2V0VG9wKSB7XG4gICAgICAgIC8vIE9uIHRvcFxuICAgICAgICB0b3AgPSAodGFyZ2V0T2Zmc2V0VG9wIC0gaGVpZ2h0KSArIHRhcmdldEhlaWdodDtcbiAgICAgICAgcG9zaXRpb24gPSAndG9wJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE9uIG1pZGRsZVxuICAgICAgICBwb3NpdGlvbiA9ICdib3R0b20nO1xuICAgICAgICB0b3AgPSB0YXJnZXRPZmZzZXRUb3A7XG4gICAgICB9XG5cbiAgICAgIGlmICh0b3AgPD0gMCkge1xuICAgICAgICB0b3AgPSA4O1xuICAgICAgfSBlbHNlIGlmICh0b3AgKyBoZWlnaHQgPj0gYXBwLmhlaWdodCkge1xuICAgICAgICB0b3AgPSBhcHAuaGVpZ2h0IC0gaGVpZ2h0IC0gODtcbiAgICAgIH1cblxuICAgICAgLy8gSG9yaXpvbnRhbCBQb3NpdGlvblxuICAgICAgbGVmdCA9ICh0YXJnZXRPZmZzZXRMZWZ0ICsgdGFyZ2V0V2lkdGgpIC0gd2lkdGggLSA4O1xuICAgICAgaWYgKGxlZnQgKyB3aWR0aCA+PSBhcHAud2lkdGggLSA4KSB7XG4gICAgICAgIGxlZnQgPSAodGFyZ2V0T2Zmc2V0TGVmdCArIHRhcmdldFdpZHRoKSAtIHdpZHRoIC0gODtcbiAgICAgIH1cbiAgICAgIGlmIChsZWZ0IDwgOCkge1xuICAgICAgICBsZWZ0ID0gODtcbiAgICAgIH1cbiAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgJGVsLmFkZENsYXNzKCdwb3BvdmVyLW9uLXRvcCcpO1xuICAgICAgfVxuICAgICAgaWYgKHBvc2l0aW9uID09PSAnYm90dG9tJykge1xuICAgICAgICAkZWwuYWRkQ2xhc3MoJ3BvcG92ZXItb24tYm90dG9tJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICgoaGVpZ2h0ICsgYW5nbGVTaXplKSA8IHRhcmdldE9mZnNldFRvcCkge1xuICAgICAgICAvLyBPbiB0b3BcbiAgICAgICAgdG9wID0gdGFyZ2V0T2Zmc2V0VG9wIC0gaGVpZ2h0IC0gYW5nbGVTaXplO1xuICAgICAgfSBlbHNlIGlmICgoaGVpZ2h0ICsgYW5nbGVTaXplKSA8IGFwcC5oZWlnaHQgLSB0YXJnZXRPZmZzZXRUb3AgLSB0YXJnZXRIZWlnaHQpIHtcbiAgICAgICAgLy8gT24gYm90dG9tXG4gICAgICAgIHBvc2l0aW9uID0gJ2JvdHRvbSc7XG4gICAgICAgIHRvcCA9IHRhcmdldE9mZnNldFRvcCArIHRhcmdldEhlaWdodCArIGFuZ2xlU2l6ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE9uIG1pZGRsZVxuICAgICAgICBwb3NpdGlvbiA9ICdtaWRkbGUnO1xuICAgICAgICB0b3AgPSAoKHRhcmdldEhlaWdodCAvIDIpICsgdGFyZ2V0T2Zmc2V0VG9wKSAtIChoZWlnaHQgLyAyKTtcbiAgICAgICAgZGlmZiA9IHRvcDtcbiAgICAgICAgaWYgKHRvcCA8PSAwKSB7XG4gICAgICAgICAgdG9wID0gNTtcbiAgICAgICAgfSBlbHNlIGlmICh0b3AgKyBoZWlnaHQgPj0gYXBwLmhlaWdodCkge1xuICAgICAgICAgIHRvcCA9IGFwcC5oZWlnaHQgLSBoZWlnaHQgLSA1O1xuICAgICAgICB9XG4gICAgICAgIGRpZmYgLT0gdG9wO1xuICAgICAgfVxuXG4gICAgICAvLyBIb3Jpem9udGFsIFBvc2l0aW9uXG4gICAgICBpZiAocG9zaXRpb24gPT09ICd0b3AnIHx8IHBvc2l0aW9uID09PSAnYm90dG9tJykge1xuICAgICAgICBsZWZ0ID0gKCh0YXJnZXRXaWR0aCAvIDIpICsgdGFyZ2V0T2Zmc2V0TGVmdCkgLSAod2lkdGggLyAyKTtcbiAgICAgICAgZGlmZiA9IGxlZnQ7XG4gICAgICAgIGlmIChsZWZ0IDwgNSkgbGVmdCA9IDU7XG4gICAgICAgIGlmIChsZWZ0ICsgd2lkdGggPiBhcHAud2lkdGgpIGxlZnQgPSBhcHAud2lkdGggLSB3aWR0aCAtIDU7XG4gICAgICAgIGlmIChsZWZ0IDwgMCkgbGVmdCA9IDA7XG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAkYW5nbGVFbC5hZGRDbGFzcygnb24tYm90dG9tJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAnYm90dG9tJykge1xuICAgICAgICAgICRhbmdsZUVsLmFkZENsYXNzKCdvbi10b3AnKTtcbiAgICAgICAgfVxuICAgICAgICBkaWZmIC09IGxlZnQ7XG4gICAgICAgIGFuZ2xlTGVmdCA9ICgod2lkdGggLyAyKSAtIGFuZ2xlU2l6ZSkgKyBkaWZmO1xuICAgICAgICBhbmdsZUxlZnQgPSBNYXRoLm1heChNYXRoLm1pbihhbmdsZUxlZnQsIHdpZHRoIC0gKGFuZ2xlU2l6ZSAqIDIpIC0gMTMpLCAxMyk7XG4gICAgICAgICRhbmdsZUVsLmNzcyh7IGxlZnQ6IGAke2FuZ2xlTGVmdH1weGAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnbWlkZGxlJykge1xuICAgICAgICBsZWZ0ID0gdGFyZ2V0T2Zmc2V0TGVmdCAtIHdpZHRoIC0gYW5nbGVTaXplO1xuICAgICAgICAkYW5nbGVFbC5hZGRDbGFzcygnb24tcmlnaHQnKTtcbiAgICAgICAgaWYgKGxlZnQgPCA1IHx8IChsZWZ0ICsgd2lkdGggPiBhcHAud2lkdGgpKSB7XG4gICAgICAgICAgaWYgKGxlZnQgPCA1KSBsZWZ0ID0gdGFyZ2V0T2Zmc2V0TGVmdCArIHRhcmdldFdpZHRoICsgYW5nbGVTaXplO1xuICAgICAgICAgIGlmIChsZWZ0ICsgd2lkdGggPiBhcHAud2lkdGgpIGxlZnQgPSBhcHAud2lkdGggLSB3aWR0aCAtIDU7XG4gICAgICAgICAgJGFuZ2xlRWwucmVtb3ZlQ2xhc3MoJ29uLXJpZ2h0JykuYWRkQ2xhc3MoJ29uLWxlZnQnKTtcbiAgICAgICAgfVxuICAgICAgICBhbmdsZVRvcCA9ICgoaGVpZ2h0IC8gMikgLSBhbmdsZVNpemUpICsgZGlmZjtcbiAgICAgICAgYW5nbGVUb3AgPSBNYXRoLm1heChNYXRoLm1pbihhbmdsZVRvcCwgaGVpZ2h0IC0gKGFuZ2xlU2l6ZSAqIDIpIC0gMTMpLCAxMyk7XG4gICAgICAgICRhbmdsZUVsLmNzcyh7IHRvcDogYCR7YW5nbGVUb3B9cHhgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFwcGx5IFN0eWxlc1xuICAgICRlbC5jc3MoeyB0b3A6IGAke3RvcH1weGAsIGxlZnQ6IGAke2xlZnR9cHhgIH0pO1xuICB9XG59XG5cbnZhciBwb3BvdmVyID0ge1xuICBuYW1lOiAncG9wb3ZlcicsXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIGFwcC5wb3BvdmVyID0gVXRpbHMuZXh0ZW5kKFxuICAgICAgTW9kYWxNZXRob2RzKHtcbiAgICAgICAgYXBwLFxuICAgICAgICBjb25zdHJ1Y3RvcjogUG9wb3ZlcixcbiAgICAgICAgZGVmYXVsdFNlbGVjdG9yOiAnLnBvcG92ZXIubW9kYWwtaW4nLFxuICAgICAgfSksXG4gICAgICB7XG4gICAgICAgIG9wZW4ocG9wb3ZlckVsLCB0YXJnZXRFbCwgYW5pbWF0ZSkge1xuICAgICAgICAgIGNvbnN0ICRwb3BvdmVyRWwgPSAkKHBvcG92ZXJFbCk7XG4gICAgICAgICAgbGV0IHBvcG92ZXIgPSAkcG9wb3ZlckVsWzBdLmY3TW9kYWw7XG4gICAgICAgICAgaWYgKCFwb3BvdmVyKSBwb3BvdmVyID0gbmV3IFBvcG92ZXIoYXBwLCB7IGVsOiAkcG9wb3ZlckVsLCB0YXJnZXRFbCB9KTtcbiAgICAgICAgICByZXR1cm4gcG9wb3Zlci5vcGVuKHRhcmdldEVsLCBhbmltYXRlKTtcbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICApO1xuICB9LFxuICBjbGlja3M6IHtcbiAgICAnLnBvcG92ZXItb3Blbic6IGZ1bmN0aW9uIG9wZW5Qb3BvdmVyKCRjbGlja2VkRWwsIGRhdGEgPSB7fSkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGFwcC5wb3BvdmVyLm9wZW4oZGF0YS5wb3BvdmVyLCAkY2xpY2tlZEVsLCBkYXRhLmFuaW1hdGUpO1xuICAgIH0sXG4gICAgJy5wb3BvdmVyLWNsb3NlJzogZnVuY3Rpb24gY2xvc2VQb3BvdmVyKCRjbGlja2VkRWwsIGRhdGEgPSB7fSkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGFwcC5wb3BvdmVyLmNsb3NlKGRhdGEucG9wb3ZlciwgZGF0YS5hbmltYXRlKTtcbiAgICB9LFxuICAgICcucG9wb3Zlci1iYWNrZHJvcCc6IGZ1bmN0aW9uIGNsb3NlUG9wb3ZlcigpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBpZiAoIWFwcC5wYXJhbXMubW9kYWxzLnBvcG92ZXJDbG9zZUJ5QmFja2Ryb3BDbGljaykgcmV0dXJuO1xuICAgICAgYXBwLnBvcG92ZXIuY2xvc2UoKTtcbiAgICB9LFxuICB9LFxufTtcblxuY2xhc3MgQWN0aW9ucyBleHRlbmRzIE1vZGFsIHtcbiAgY29uc3RydWN0b3IoYXBwLCBwYXJhbXMpIHtcbiAgICBjb25zdCBleHRlbmRlZFBhcmFtcyA9IFV0aWxzLmV4dGVuZCh7XG4gICAgICB0b1BvcG92ZXI6IGFwcC5wYXJhbXMubW9kYWxzLmFjdGlvbnNUb1BvcG92ZXIsXG4gICAgICBvbjoge30sXG4gICAgfSwgcGFyYW1zKTtcblxuICAgIC8vIEV4dGVuZHMgd2l0aCBvcGVuL2Nsb3NlIE1vZGFsIG1ldGhvZHM7XG4gICAgc3VwZXIoYXBwLCBleHRlbmRlZFBhcmFtcyk7XG5cbiAgICBjb25zdCBhY3Rpb25zID0gdGhpcztcblxuICAgIGFjdGlvbnMucGFyYW1zID0gZXh0ZW5kZWRQYXJhbXM7XG5cbiAgICAvLyBCdXR0b25zXG4gICAgbGV0IGdyb3VwcztcbiAgICBpZiAoYWN0aW9ucy5wYXJhbXMuYnV0dG9ucykge1xuICAgICAgZ3JvdXBzID0gYWN0aW9ucy5wYXJhbXMuYnV0dG9ucztcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShncm91cHNbMF0pKSBncm91cHMgPSBbZ3JvdXBzXTtcbiAgICB9XG5cbiAgICAvLyBGaW5kIEVsZW1lbnRcbiAgICBsZXQgJGVsO1xuICAgIGlmIChhY3Rpb25zLnBhcmFtcy5lbCkge1xuICAgICAgJGVsID0gJChhY3Rpb25zLnBhcmFtcy5lbCk7XG4gICAgfSBlbHNlIGlmIChhY3Rpb25zLnBhcmFtcy5jb250ZW50KSB7XG4gICAgICAkZWwgPSAkKGFjdGlvbnMucGFyYW1zLmNvbnRlbnQpO1xuICAgIH0gZWxzZSBpZiAoYWN0aW9ucy5wYXJhbXMuYnV0dG9ucykge1xuICAgICAgaWYgKGFjdGlvbnMucGFyYW1zLnRvUG9wb3Zlcikge1xuICAgICAgICBhY3Rpb25zLnBvcG92ZXJIdG1sID0gYFxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJwb3BvdmVyIHBvcG92ZXItZnJvbS1hY3Rpb25zXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicG9wb3Zlci1pbm5lclwiPlxuICAgICAgICAgICAgICAke2dyb3Vwcy5tYXAoZ3JvdXAgPT4gYFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsaXN0XCI+XG4gICAgICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgICAgICR7Z3JvdXAubWFwKChidXR0b24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtQ2xhc3NlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24uY29sb3IpIGl0ZW1DbGFzc2VzLnB1c2goYGNvbG9yLSR7YnV0dG9uLmNvbG9yfWApO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24uYmcpIGl0ZW1DbGFzc2VzLnB1c2goYGJnLSR7YnV0dG9uLmJnfWApO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24uYm9sZCkgaXRlbUNsYXNzZXMucHVzaCgncG9wb3Zlci1mcm9tLWFjdGlvbnMtYm9sZCcpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24uZGlzYWJsZWQpIGl0ZW1DbGFzc2VzLnB1c2goJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbUNsYXNzZXMucHVzaCgncG9wb3Zlci1mcm9tLWFjdGlvbnMtbGFiZWwnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgPGxpIGNsYXNzPVwiJHtpdGVtQ2xhc3Nlcy5qb2luKCcgJyl9XCI+JHtidXR0b24udGV4dH08L2xpPmA7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGl0ZW1DbGFzc2VzLnB1c2goJ2l0ZW0tbGluaycpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24uaWNvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbUNsYXNzZXMucHVzaCgnaXRlbS1jb250ZW50Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCIke2l0ZW1DbGFzc2VzLmpvaW4oJyAnKX1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpdGVtLW1lZGlhXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR7YnV0dG9uLmljb259XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpdGVtLWlubmVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpdGVtLXRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHtidXR0b24udGV4dH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICBgO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBpdGVtQ2xhc3Nlcy5wdXNoKCdsaXN0LWJ1dHRvbicpO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIjXCIgY2xhc3M9XCIke2l0ZW1DbGFzc2VzLmpvaW4oJyAnKX1cIj4ke2J1dHRvbi50ZXh0fTwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgYDtcbiAgICAgICAgICAgICAgICAgICAgfSkuam9pbignJyl9XG4gICAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICBgKS5qb2luKCcnKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuICAgICAgfVxuICAgICAgYWN0aW9ucy5hY3Rpb25zSHRtbCA9IGBcbiAgICAgICAgPGRpdiBjbGFzcz1cImFjdGlvbnMtbW9kYWwke2FjdGlvbnMucGFyYW1zLmdyaWQgPyAnIGFjdGlvbnMtZ3JpZCcgOiAnJ31cIj5cbiAgICAgICAgICAke2dyb3Vwcy5tYXAoZ3JvdXAgPT5cbiAgICAgICAgICAgIGA8ZGl2IGNsYXNzPVwiYWN0aW9ucy1ncm91cFwiPlxuICAgICAgICAgICAgICAke2dyb3VwLm1hcCgoYnV0dG9uKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYnV0dG9uQ2xhc3NlcyA9IFtgYWN0aW9ucy0ke2J1dHRvbi5sYWJlbCA/ICdsYWJlbCcgOiAnYnV0dG9uJ31gXTtcbiAgICAgICAgICAgICAgICBpZiAoYnV0dG9uLmNvbG9yKSBidXR0b25DbGFzc2VzLnB1c2goYGNvbG9yLSR7YnV0dG9uLmNvbG9yfWApO1xuICAgICAgICAgICAgICAgIGlmIChidXR0b24uYmcpIGJ1dHRvbkNsYXNzZXMucHVzaChgYmctJHtidXR0b24uY29sb3J9YCk7XG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5ib2xkKSBidXR0b25DbGFzc2VzLnB1c2goJ2FjdGlvbnMtYnV0dG9uLWJvbGQnKTtcbiAgICAgICAgICAgICAgICBpZiAoYnV0dG9uLmRpc2FibGVkKSBidXR0b25DbGFzc2VzLnB1c2goJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGA8ZGl2IGNsYXNzPVwiJHtidXR0b25DbGFzc2VzLmpvaW4oJyAnKX1cIj4ke2J1dHRvbi50ZXh0fTwvZGl2PmA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBgPGRpdiBjbGFzcz1cIiR7YnV0dG9uQ2xhc3Nlcy5qb2luKCcgJyl9XCI+JHtidXR0b24uaWNvbiA/IGA8ZGl2IGNsYXNzPVwiYWN0aW9ucy1idXR0b24tbWVkaWFcIj4ke2J1dHRvbi5pY29ufTwvZGl2PmAgOiAnJ308ZGl2IGNsYXNzPVwiYWN0aW9ucy1idXR0b24tdGV4dFwiPiR7YnV0dG9uLnRleHR9PC9kaXY+PC9kaXY+YDtcbiAgICAgICAgICAgICAgfSkuam9pbignJyl9XG4gICAgICAgICAgICA8L2Rpdj5gKS5qb2luKCcnKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICBgO1xuICAgIH1cblxuICAgIGlmICgkZWwgJiYgJGVsLmxlbmd0aCA+IDAgJiYgJGVsWzBdLmY3TW9kYWwpIHtcbiAgICAgIHJldHVybiAkZWxbMF0uZjdNb2RhbDtcbiAgICB9XG5cbiAgICBpZiAoJGVsICYmICRlbC5sZW5ndGggPT09IDAgJiYgIShhY3Rpb25zLmFjdGlvbnNIdG1sIHx8IGFjdGlvbnMucG9wb3Zlckh0bWwpKSB7XG4gICAgICByZXR1cm4gYWN0aW9ucy5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgLy8gQmFja2Ryb3BcbiAgICBsZXQgJGJhY2tkcm9wRWwgPSBhcHAucm9vdC5jaGlsZHJlbignLmFjdGlvbnMtYmFja2Ryb3AnKTtcbiAgICBpZiAoJGJhY2tkcm9wRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAkYmFja2Ryb3BFbCA9ICQoJzxkaXYgY2xhc3M9XCJhY3Rpb25zLWJhY2tkcm9wXCI+PC9kaXY+Jyk7XG4gICAgICBhcHAucm9vdC5hcHBlbmQoJGJhY2tkcm9wRWwpO1xuICAgIH1cblxuICAgIGNvbnN0IG9yaWdpbmFsT3BlbiA9IGFjdGlvbnMub3BlbjtcbiAgICBjb25zdCBvcmlnaW5hbENsb3NlID0gYWN0aW9ucy5jbG9zZTtcblxuICAgIGxldCBwb3BvdmVyO1xuICAgIGZ1bmN0aW9uIGJ1dHRvbk9uQ2xpY2soZSkge1xuICAgICAgY29uc3QgYnV0dG9uRWwgPSB0aGlzO1xuICAgICAgbGV0IGJ1dHRvbkluZGV4O1xuICAgICAgbGV0IGdyb3VwSW5kZXg7XG4gICAgICBpZiAoJChidXR0b25FbCkuaGFzQ2xhc3MoJ2l0ZW0tbGluaycpKSB7XG4gICAgICAgIGJ1dHRvbkluZGV4ID0gJChidXR0b25FbCkucGFyZW50cygnbGknKS5pbmRleCgpO1xuICAgICAgICBncm91cEluZGV4ID0gJChidXR0b25FbCkucGFyZW50cygnLmxpc3QnKS5pbmRleCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnV0dG9uSW5kZXggPSAkKGJ1dHRvbkVsKS5pbmRleCgpO1xuICAgICAgICBncm91cEluZGV4ID0gJChidXR0b25FbCkucGFyZW50cygnLmFjdGlvbnMtZ3JvdXAnKS5pbmRleCgpO1xuICAgICAgfVxuICAgICAgY29uc3QgYnV0dG9uID0gZ3JvdXBzW2dyb3VwSW5kZXhdW2J1dHRvbkluZGV4XTtcbiAgICAgIGlmIChidXR0b24ub25DbGljaykgYnV0dG9uLm9uQ2xpY2soYWN0aW9ucywgZSk7XG4gICAgICBpZiAoYWN0aW9ucy5wYXJhbXMub25DbGljaykgYWN0aW9ucy5wYXJhbXMub25DbGljayhhY3Rpb25zLCBlKTtcbiAgICAgIGlmIChidXR0b24uY2xvc2UgIT09IGZhbHNlKSBhY3Rpb25zLmNsb3NlKCk7XG4gICAgfVxuICAgIGFjdGlvbnMub3BlbiA9IGZ1bmN0aW9uIG9wZW4oYW5pbWF0ZSkge1xuICAgICAgbGV0IGNvbnZlcnRUb1BvcG92ZXIgPSBmYWxzZTtcbiAgICAgIGlmIChhY3Rpb25zLnBhcmFtcy50b1BvcG92ZXIgJiYgYWN0aW9ucy5wYXJhbXMudGFyZ2V0RWwpIHtcbiAgICAgICAgLy8gUG9wb3ZlclxuICAgICAgICBpZiAoYXBwLmRldmljZS5pb3MgJiYgYXBwLmRldmljZS5pcGFkKSB7XG4gICAgICAgICAgY29udmVydFRvUG9wb3ZlciA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoYXBwLndpZHRoID49IDc2OCkge1xuICAgICAgICAgIGNvbnZlcnRUb1BvcG92ZXIgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY29udmVydFRvUG9wb3Zlcikge1xuICAgICAgICBwb3BvdmVyID0gYXBwLnBvcG92ZXIuY3JlYXRlKHtcbiAgICAgICAgICBjb250ZW50OiBhY3Rpb25zLnBvcG92ZXJIdG1sLFxuICAgICAgICAgIHRhcmdldEVsOiBhY3Rpb25zLnBhcmFtcy50YXJnZXRFbCxcbiAgICAgICAgfSk7XG4gICAgICAgIHBvcG92ZXIub3BlbihhbmltYXRlKTtcbiAgICAgICAgcG9wb3Zlci5vbmNlKCdwb3BvdmVyT3BlbmVkJywgKCkgPT4ge1xuICAgICAgICAgIHBvcG92ZXIuJGVsLmZpbmQoJy5pdGVtLWxpbmsnKS5lYWNoKChncm91cEluZGV4LCBidXR0b25FbCkgPT4ge1xuICAgICAgICAgICAgJChidXR0b25FbCkub24oJ2NsaWNrJywgYnV0dG9uT25DbGljayk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBwb3BvdmVyLm9uY2UoJ3BvcG92ZXJDbG9zZWQnLCAoKSA9PiB7XG4gICAgICAgICAgcG9wb3Zlci4kZWwuZmluZCgnLml0ZW0tbGluaycpLmVhY2goKGdyb3VwSW5kZXgsIGJ1dHRvbkVsKSA9PiB7XG4gICAgICAgICAgICAkKGJ1dHRvbkVsKS5vbignY2xpY2snLCBidXR0b25PbkNsaWNrKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3Rpb25zLiRlbCA9ICQoYWN0aW9ucy5hY3Rpb25zSHRtbCk7XG4gICAgICAgIGFjdGlvbnMuJGVsWzBdLmY3TW9kYWwgPSBhY3Rpb25zO1xuICAgICAgICBhY3Rpb25zLiRlbC5maW5kKCcuYWN0aW9ucy1idXR0b24nKS5lYWNoKChncm91cEluZGV4LCBidXR0b25FbCkgPT4ge1xuICAgICAgICAgICQoYnV0dG9uRWwpLm9uKCdjbGljaycsIGJ1dHRvbk9uQ2xpY2spO1xuICAgICAgICB9KTtcbiAgICAgICAgYWN0aW9ucy5vbmNlKCdhY3Rpb25zQ2xvc2VkJywgKCkgPT4ge1xuICAgICAgICAgIGFjdGlvbnMuJGVsLmZpbmQoJy5saXN0LWJ1dHRvbicpLmVhY2goKGdyb3VwSW5kZXgsIGJ1dHRvbkVsKSA9PiB7XG4gICAgICAgICAgICAkKGJ1dHRvbkVsKS5vZmYoJ2NsaWNrJywgYnV0dG9uT25DbGljayk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBvcmlnaW5hbE9wZW4uY2FsbChhY3Rpb25zLCBhbmltYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgYWN0aW9ucy5jbG9zZSA9IGZ1bmN0aW9uIGNsb3NlKGFuaW1hdGUpIHtcbiAgICAgIGlmIChwb3BvdmVyKSB7XG4gICAgICAgIHBvcG92ZXIuY2xvc2UoYW5pbWF0ZSkub25jZSgncG9wb3ZlckNsb3NlJywgKCkgPT4ge1xuICAgICAgICAgIHBvcG92ZXIuZGVzdHJveSgpO1xuICAgICAgICAgIHBvcG92ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3JpZ2luYWxDbG9zZS5jYWxsKGFjdGlvbnMsIGFuaW1hdGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBVdGlscy5leHRlbmQoYWN0aW9ucywge1xuICAgICAgYXBwLFxuICAgICAgJGVsLFxuICAgICAgZWw6ICRlbCA/ICRlbFswXSA6IHVuZGVmaW5lZCxcbiAgICAgICRiYWNrZHJvcEVsLFxuICAgICAgYmFja2Ryb3BFbDogJGJhY2tkcm9wRWxbMF0sXG4gICAgICB0eXBlOiAnYWN0aW9ucycsXG4gICAgfSk7XG5cbiAgICBpZiAoJGVsKSB7XG4gICAgICAkZWxbMF0uZjdNb2RhbCA9IGFjdGlvbnM7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbnM7XG4gIH1cbn1cblxudmFyIGFjdGlvbnMgPSB7XG4gIG5hbWU6ICdhY3Rpb25zJyxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgYXBwLmFjdGlvbnMgPSBNb2RhbE1ldGhvZHMoe1xuICAgICAgYXBwLFxuICAgICAgY29uc3RydWN0b3I6IEFjdGlvbnMsXG4gICAgICBkZWZhdWx0U2VsZWN0b3I6ICcuYWN0aW9ucy1tb2RhbC5tb2RhbC1pbicsXG4gICAgfSk7XG4gIH0sXG4gIGNsaWNrczoge1xuICAgICcuYWN0aW9ucy1vcGVuJzogZnVuY3Rpb24gb3BlbkFjdGlvbnMoJGNsaWNrZWRFbCwgZGF0YSA9IHt9KSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgYXBwLmFjdGlvbnMub3BlbihkYXRhLmFjdGlvbnMsIGRhdGEuYW5pbWF0ZSk7XG4gICAgfSxcbiAgICAnLmFjdGlvbnMtY2xvc2UnOiBmdW5jdGlvbiBjbG9zZUFjdGlvbnMoJGNsaWNrZWRFbCwgZGF0YSA9IHt9KSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgYXBwLmFjdGlvbnMuY2xvc2UoZGF0YS5hY3Rpb25zLCBkYXRhLmFuaW1hdGUpO1xuICAgIH0sXG4gICAgJy5hY3Rpb25zLWJhY2tkcm9wJzogZnVuY3Rpb24gY2xvc2VBY3Rpb25zKCkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGlmICghYXBwLnBhcmFtcy5tb2RhbHMuYWN0aW9uc0Nsb3NlQnlCYWNrZHJvcENsaWNrKSByZXR1cm47XG4gICAgICBhcHAuYWN0aW9ucy5jbG9zZSgpO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jbGFzcyBTaGVldCBleHRlbmRzIE1vZGFsIHtcbiAgY29uc3RydWN0b3IoYXBwLCBwYXJhbXMpIHtcbiAgICBjb25zdCBleHRlbmRlZFBhcmFtcyA9IFV0aWxzLmV4dGVuZCh7XG4gICAgICBiYWNrZHJvcDogYXBwLnRoZW1lID09PSAnbWQnLFxuICAgICAgY2xvc2VCeU91dHNpZGVDbGljazogYXBwLnBhcmFtcy5tb2RhbHMuc2hlZXRDbG9zZUJ5T3V0c2lkZUNsaWNrLFxuICAgICAgb246IHt9LFxuICAgIH0sIHBhcmFtcyk7XG5cbiAgICAvLyBFeHRlbmRzIHdpdGggb3Blbi9jbG9zZSBNb2RhbCBtZXRob2RzO1xuICAgIHN1cGVyKGFwcCwgZXh0ZW5kZWRQYXJhbXMpO1xuXG4gICAgY29uc3Qgc2hlZXQgPSB0aGlzO1xuXG4gICAgc2hlZXQucGFyYW1zID0gZXh0ZW5kZWRQYXJhbXM7XG5cbiAgICAvLyBGaW5kIEVsZW1lbnRcbiAgICBsZXQgJGVsO1xuICAgIGlmICghc2hlZXQucGFyYW1zLmVsKSB7XG4gICAgICAkZWwgPSAkKHNoZWV0LnBhcmFtcy5jb250ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgJGVsID0gJChzaGVldC5wYXJhbXMuZWwpO1xuICAgIH1cblxuICAgIGlmICgkZWwgJiYgJGVsLmxlbmd0aCA+IDAgJiYgJGVsWzBdLmY3TW9kYWwpIHtcbiAgICAgIHJldHVybiAkZWxbMF0uZjdNb2RhbDtcbiAgICB9XG5cbiAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHNoZWV0LmRlc3Ryb3koKTtcbiAgICB9XG4gICAgbGV0ICRiYWNrZHJvcEVsO1xuICAgIGlmIChzaGVldC5wYXJhbXMuYmFja2Ryb3ApIHtcbiAgICAgICRiYWNrZHJvcEVsID0gYXBwLnJvb3QuY2hpbGRyZW4oJy5zaGVldC1iYWNrZHJvcCcpO1xuICAgICAgaWYgKCRiYWNrZHJvcEVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAkYmFja2Ryb3BFbCA9ICQoJzxkaXYgY2xhc3M9XCJzaGVldC1iYWNrZHJvcFwiPjwvZGl2PicpO1xuICAgICAgICBhcHAucm9vdC5hcHBlbmQoJGJhY2tkcm9wRWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCAkcGFnZUNvbnRlbnRFbDtcbiAgICBmdW5jdGlvbiBzY3JvbGxUb09wZW4oKSB7XG4gICAgICBjb25zdCAkc2Nyb2xsRWwgPSAkKHNoZWV0LnBhcmFtcy5zY3JvbGxUb0VsKS5lcSgwKTtcbiAgICAgIGlmICgkc2Nyb2xsRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICAkcGFnZUNvbnRlbnRFbCA9ICRzY3JvbGxFbC5wYXJlbnRzKCcucGFnZS1jb250ZW50Jyk7XG4gICAgICBpZiAoJHBhZ2VDb250ZW50RWwubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICAgIGNvbnN0IHBhZGRpbmdUb3AgPSBwYXJzZUludCgkcGFnZUNvbnRlbnRFbC5jc3MoJ3BhZGRpbmctdG9wJyksIDEwKTtcbiAgICAgIGNvbnN0IHBhZGRpbmdCb3R0b20gPSBwYXJzZUludCgkcGFnZUNvbnRlbnRFbC5jc3MoJ3BhZGRpbmctYm90dG9tJyksIDEwKTtcbiAgICAgIGNvbnN0IHBhZ2VIZWlnaHQgPSAkcGFnZUNvbnRlbnRFbFswXS5vZmZzZXRIZWlnaHQgLSBwYWRkaW5nVG9wIC0gJGVsLmhlaWdodCgpO1xuICAgICAgY29uc3QgcGFnZVNjcm9sbEhlaWdodCA9ICRwYWdlQ29udGVudEVsWzBdLnNjcm9sbEhlaWdodCAtIHBhZGRpbmdUb3AgLSAkZWwuaGVpZ2h0KCk7XG4gICAgICBjb25zdCBwYWdlU2Nyb2xsID0gJHBhZ2VDb250ZW50RWwuc2Nyb2xsVG9wKCk7XG5cbiAgICAgIGxldCBuZXdQYWRkaW5nQm90dG9tO1xuXG4gICAgICBjb25zdCBzY3JvbGxFbFRvcCA9ICgkc2Nyb2xsRWwub2Zmc2V0KCkudG9wIC0gcGFkZGluZ1RvcCkgKyAkc2Nyb2xsRWxbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgaWYgKHNjcm9sbEVsVG9wID4gcGFnZUhlaWdodCkge1xuICAgICAgICBjb25zdCBzY3JvbGxUb3AgPSAocGFnZVNjcm9sbCArIHNjcm9sbEVsVG9wKSAtIHBhZ2VIZWlnaHQ7XG4gICAgICAgIGlmIChzY3JvbGxUb3AgKyBwYWdlSGVpZ2h0ID4gcGFnZVNjcm9sbEhlaWdodCkge1xuICAgICAgICAgIG5ld1BhZGRpbmdCb3R0b20gPSAoKHNjcm9sbFRvcCArIHBhZ2VIZWlnaHQpIC0gcGFnZVNjcm9sbEhlaWdodCkgKyBwYWRkaW5nQm90dG9tO1xuICAgICAgICAgIGlmIChwYWdlSGVpZ2h0ID09PSBwYWdlU2Nyb2xsSGVpZ2h0KSB7XG4gICAgICAgICAgICBuZXdQYWRkaW5nQm90dG9tID0gJGVsLmhlaWdodCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAkcGFnZUNvbnRlbnRFbC5jc3Moe1xuICAgICAgICAgICAgJ3BhZGRpbmctYm90dG9tJzogYCR7bmV3UGFkZGluZ0JvdHRvbX1weGAsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgJHBhZ2VDb250ZW50RWwuc2Nyb2xsVG9wKHNjcm9sbFRvcCwgMzAwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY3JvbGxUb0Nsb3NlKCkge1xuICAgICAgaWYgKCRwYWdlQ29udGVudEVsICYmICRwYWdlQ29udGVudEVsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgJHBhZ2VDb250ZW50RWwuY3NzKHtcbiAgICAgICAgICAncGFkZGluZy1ib3R0b20nOiAnJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGUpIHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgaWYgKCQodGFyZ2V0KS5jbG9zZXN0KHNoZWV0LmVsKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgc2hlZXQuY2xvc2UoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzaGVldC5vbignc2hlZXRPcGVuJywgKCkgPT4ge1xuICAgICAgaWYgKHNoZWV0LnBhcmFtcy5zY3JvbGxUb0VsKSB7XG4gICAgICAgIHNjcm9sbFRvT3BlbigpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHNoZWV0Lm9uKCdzaGVldE9wZW5lZCcsICgpID0+IHtcbiAgICAgIGlmIChzaGVldC5wYXJhbXMuY2xvc2VCeU91dHNpZGVDbGljayAmJiAhc2hlZXQucGFyYW1zLmJhY2tkcm9wKSB7XG4gICAgICAgIGFwcC5vbignY2xpY2snLCBoYW5kbGVDbGljayk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgc2hlZXQub24oJ3NoZWV0Q2xvc2UnLCAoKSA9PiB7XG4gICAgICBpZiAoc2hlZXQucGFyYW1zLnNjcm9sbFRvRWwpIHtcbiAgICAgICAgc2Nyb2xsVG9DbG9zZSgpO1xuICAgICAgfVxuICAgICAgaWYgKHNoZWV0LnBhcmFtcy5jbG9zZUJ5T3V0c2lkZUNsaWNrICYmICFzaGVldC5wYXJhbXMuYmFja2Ryb3ApIHtcbiAgICAgICAgYXBwLm9mZignY2xpY2snLCBoYW5kbGVDbGljayk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBVdGlscy5leHRlbmQoc2hlZXQsIHtcbiAgICAgIGFwcCxcbiAgICAgICRlbCxcbiAgICAgIGVsOiAkZWxbMF0sXG4gICAgICAkYmFja2Ryb3BFbCxcbiAgICAgIGJhY2tkcm9wRWw6ICRiYWNrZHJvcEVsICYmICRiYWNrZHJvcEVsWzBdLFxuICAgICAgdHlwZTogJ3NoZWV0JyxcbiAgICB9KTtcblxuICAgICRlbFswXS5mN01vZGFsID0gc2hlZXQ7XG5cbiAgICByZXR1cm4gc2hlZXQ7XG4gIH1cbn1cblxudmFyIHNoZWV0ID0ge1xuICBuYW1lOiAnc2hlZXQnLFxuICBzdGF0aWM6IHtcbiAgICBTaGVldCxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgYXBwLnNoZWV0ID0gVXRpbHMuZXh0ZW5kKHt9LFxuICAgICAgTW9kYWxNZXRob2RzKHtcbiAgICAgICAgYXBwLFxuICAgICAgICBjb25zdHJ1Y3RvcjogU2hlZXQsXG4gICAgICAgIGRlZmF1bHRTZWxlY3RvcjogJy5zaGVldC1tb2RhbC5tb2RhbC1pbicsXG4gICAgICB9KVxuICAgICk7XG4gIH0sXG4gIGNsaWNrczoge1xuICAgICcuc2hlZXQtb3Blbic6IGZ1bmN0aW9uIG9wZW5TaGVldCgkY2xpY2tlZEVsLCBkYXRhID0ge30pIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBhcHAuc2hlZXQub3BlbihkYXRhLnNoZWV0LCBkYXRhLmFuaW1hdGUpO1xuICAgIH0sXG4gICAgJy5zaGVldC1jbG9zZSc6IGZ1bmN0aW9uIGNsb3NlU2hlZXQoJGNsaWNrZWRFbCwgZGF0YSA9IHt9KSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgYXBwLnNoZWV0LmNsb3NlKGRhdGEuc2hlZXQsIGRhdGEuYW5pbWF0ZSk7XG4gICAgfSxcbiAgICAnLnNoZWV0LWJhY2tkcm9wJzogZnVuY3Rpb24gY2xvc2VTaGVldCgpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBpZiAoIWFwcC5wYXJhbXMubW9kYWxzLnNoZWV0Q2xvc2VCeUJhY2tkcm9wQ2xpY2spIHJldHVybjtcbiAgICAgIGFwcC5zaGVldC5jbG9zZSgpO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jbGFzcyBUb2FzdCBleHRlbmRzIE1vZGFsIHtcbiAgY29uc3RydWN0b3IoYXBwLCBwYXJhbXMpIHtcbiAgICBjb25zdCBleHRlbmRlZFBhcmFtcyA9IFV0aWxzLmV4dGVuZCh7XG4gICAgICBtZXNzYWdlOiB1bmRlZmluZWQsXG4gICAgICBwb3NpdGlvbjogYXBwLnBhcmFtcy5tb2RhbHMudG9hc3RQb3NpdGlvbixcbiAgICAgIGNsb3NlQnV0dG9uOiBhcHAucGFyYW1zLm1vZGFscy50b2FzdENsb3NlQnV0dG9uLFxuICAgICAgY2xvc2VCdXR0b25Db2xvcjogYXBwLnBhcmFtcy5tb2RhbHMudG9hc3RDbG9zZUJ1dHRvbkNvbG9yLFxuICAgICAgY2xvc2VCdXR0b25UZXh0OiBhcHAucGFyYW1zLm1vZGFscy50b2FzdENsb3NlQnV0dG9uVGV4dCxcbiAgICAgIGNsb3NlVGltZW91dDogYXBwLnBhcmFtcy5tb2RhbHMudG9hc3RDbG9zZVRpbWVvdXQsXG4gICAgICBjc3NDbGFzczogdW5kZWZpbmVkLFxuICAgICAgb246IHt9LFxuICAgIH0sIHBhcmFtcyk7XG5cbiAgICAvLyBFeHRlbmRzIHdpdGggb3Blbi9jbG9zZSBNb2RhbCBtZXRob2RzO1xuICAgIHN1cGVyKGFwcCwgZXh0ZW5kZWRQYXJhbXMpO1xuXG4gICAgY29uc3QgdG9hc3QgPSB0aGlzO1xuXG4gICAgdG9hc3QucGFyYW1zID0gZXh0ZW5kZWRQYXJhbXM7XG5cbiAgICBjb25zdCB7IG1lc3NhZ2UsIHBvc2l0aW9uLCBjbG9zZUJ1dHRvbiwgY2xvc2VCdXR0b25Db2xvciwgY2xvc2VCdXR0b25UZXh0LCBjbG9zZVRpbWVvdXQsIGNzc0NsYXNzIH0gPSB0b2FzdC5wYXJhbXM7XG5cbiAgICBsZXQgJGVsO1xuICAgIGlmICghdG9hc3QucGFyYW1zLmVsKSB7XG4gICAgICAvLyBGaW5kIEVsZW1lbnRcbiAgICAgIGNvbnN0IHRvYXN0SHRtbCA9IGBcbiAgICAgICAgPGRpdiBjbGFzcz1cInRvYXN0IHRvYXN0LSR7cG9zaXRpb259ICR7Y3NzQ2xhc3MgfHwgJyd9XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInRvYXN0LWNvbnRlbnRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0b2FzdC1tZXNzYWdlXCI+JHttZXNzYWdlfTwvZGl2PlxuICAgICAgICAgICAgJHtjbG9zZUJ1dHRvbiA/IGBcbiAgICAgICAgICAgIDxhIGNsYXNzPVwidG9hc3QtYnV0dG9uICR7YXBwLnRoZW1lID09PSAnbWQnID8gJ2J1dHRvbicgOiAnbGluayd9ICR7Y2xvc2VCdXR0b25Db2xvciA/IGBjb2xvci0ke2Nsb3NlQnV0dG9uQ29sb3J9YCA6ICcnfVwiPiR7Y2xvc2VCdXR0b25UZXh0fTwvYT5cbiAgICAgICAgICAgIGAudHJpbSgpIDogJyd9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgYC50cmltKCk7XG5cbiAgICAgICRlbCA9ICQodG9hc3RIdG1sKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJGVsID0gJCh0b2FzdC5wYXJhbXMuZWwpO1xuICAgIH1cblxuICAgIGlmICgkZWwgJiYgJGVsLmxlbmd0aCA+IDAgJiYgJGVsWzBdLmY3TW9kYWwpIHtcbiAgICAgIHJldHVybiAkZWxbMF0uZjdNb2RhbDtcbiAgICB9XG5cbiAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRvYXN0LmRlc3Ryb3koKTtcbiAgICB9XG5cbiAgICBVdGlscy5leHRlbmQodG9hc3QsIHtcbiAgICAgIGFwcCxcbiAgICAgICRlbCxcbiAgICAgIGVsOiAkZWxbMF0sXG4gICAgICB0eXBlOiAndG9hc3QnLFxuICAgIH0pO1xuXG4gICAgJGVsWzBdLmY3TW9kYWwgPSB0b2FzdDtcblxuICAgIGlmIChjbG9zZUJ1dHRvbikge1xuICAgICAgJGVsLmZpbmQoJy50b2FzdC1idXR0b24nKS5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIHRvYXN0LmVtaXQoJ2xvY2FsOjpjbG9zZUJ1dHRvbkNsaWNrIHRvYXN0Q2xvc2VCdXR0b25DbGljaycsIHRvYXN0KTtcbiAgICAgICAgdG9hc3QuY2xvc2UoKTtcbiAgICAgIH0pO1xuXG4gICAgICB0b2FzdC5vbignYmVmb3JlRGVzdHJveScsICgpID0+IHtcbiAgICAgICAgJGVsLmZpbmQoJy50b2FzdC1idXR0b24nKS5vZmYoJ2NsaWNrJyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBsZXQgdGltZW91dElkO1xuICAgIHRvYXN0Lm9uKCdvcGVuJywgKCkgPT4ge1xuICAgICAgY29uc3Qgb3BlbmVkVG9hc3QgPSBhcHAudG9hc3QuZ2V0KCcudG9hc3QubW9kYWwtaW4nKTtcbiAgICAgIGlmIChvcGVuZWRUb2FzdCAmJiBvcGVuZWRUb2FzdC5lbCAmJiBvcGVuZWRUb2FzdC5lbCAhPT0gdG9hc3QuZWwpIHtcbiAgICAgICAgb3BlbmVkVG9hc3QuY2xvc2UoKTtcbiAgICAgIH1cbiAgICAgIGlmIChjbG9zZVRpbWVvdXQpIHtcbiAgICAgICAgdGltZW91dElkID0gVXRpbHMubmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgIHRvYXN0LmNsb3NlKCk7XG4gICAgICAgIH0sIGNsb3NlVGltZW91dCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdG9hc3Qub24oJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRvYXN0O1xuICB9XG59XG5cbnZhciB0b2FzdCA9IHtcbiAgbmFtZTogJ3RvYXN0JyxcbiAgc3RhdGljOiB7XG4gICAgVG9hc3QsXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIGFwcC50b2FzdCA9IFV0aWxzLmV4dGVuZCh7fSxcbiAgICAgIE1vZGFsTWV0aG9kcyh7XG4gICAgICAgIGFwcCxcbiAgICAgICAgY29uc3RydWN0b3I6IFRvYXN0LFxuICAgICAgICBkZWZhdWx0U2VsZWN0b3I6ICcudG9hc3QubW9kYWwtaW4nLFxuICAgICAgfSlcbiAgICApO1xuICB9LFxufTtcblxuY29uc3QgUHJlbG9hZGVyID0ge1xuICBpbml0KGVsKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBpZiAoYXBwLnRoZW1lICE9PSAnbWQnKSByZXR1cm47XG4gICAgY29uc3QgJGVsID0gJChlbCk7XG4gICAgaWYgKCRlbC5sZW5ndGggPT09IDAgfHwgJGVsLmNoaWxkcmVuKCcucHJlbG9hZGVyLWlubmVyJykubGVuZ3RoID4gMCkgcmV0dXJuO1xuICAgICRlbC5hcHBlbmQoXG4gICAgICAnPHNwYW4gY2xhc3M9XCJwcmVsb2FkZXItaW5uZXJcIj4nICtcbiAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwcmVsb2FkZXItaW5uZXItZ2FwXCI+PC9zcGFuPicgK1xuICAgICAgICAgICc8c3BhbiBjbGFzcz1cInByZWxvYWRlci1pbm5lci1sZWZ0XCI+JyArXG4gICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInByZWxvYWRlci1pbm5lci1oYWxmLWNpcmNsZVwiPjwvc3Bhbj4nICtcbiAgICAgICAgICAnPC9zcGFuPicgK1xuICAgICAgICAgICc8c3BhbiBjbGFzcz1cInByZWxvYWRlci1pbm5lci1yaWdodFwiPicgK1xuICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwcmVsb2FkZXItaW5uZXItaGFsZi1jaXJjbGVcIj48L3NwYW4+JyArXG4gICAgICAgICAgJzwvc3Bhbj4nICtcbiAgICAgICc8L3NwYW4+Jyk7XG4gIH0sXG4gIC8vIE1vZGFsXG4gIHZpc2libGU6IGZhbHNlLFxuICBzaG93KGNvbG9yID0gJ3doaXRlJykge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgaWYgKFByZWxvYWRlci52aXNpYmxlKSByZXR1cm47XG4gICAgY29uc3QgcHJlbG9hZGVySW5uZXIgPSBhcHAudGhlbWUgIT09ICdtZCcgPyAnJyA6XG4gICAgICAnPHNwYW4gY2xhc3M9XCJwcmVsb2FkZXItaW5uZXJcIj4nICtcbiAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwcmVsb2FkZXItaW5uZXItZ2FwXCI+PC9zcGFuPicgK1xuICAgICAgICAgICc8c3BhbiBjbGFzcz1cInByZWxvYWRlci1pbm5lci1sZWZ0XCI+JyArXG4gICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInByZWxvYWRlci1pbm5lci1oYWxmLWNpcmNsZVwiPjwvc3Bhbj4nICtcbiAgICAgICAgICAnPC9zcGFuPicgK1xuICAgICAgICAgICc8c3BhbiBjbGFzcz1cInByZWxvYWRlci1pbm5lci1yaWdodFwiPicgK1xuICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwcmVsb2FkZXItaW5uZXItaGFsZi1jaXJjbGVcIj48L3NwYW4+JyArXG4gICAgICAgICAgJzwvc3Bhbj4nICtcbiAgICAgICc8L3NwYW4+JztcbiAgICAkKCdodG1sJykuYWRkQ2xhc3MoJ3dpdGgtbW9kYWwtcHJlbG9hZGVyJyk7XG4gICAgYXBwLnJvb3QuYXBwZW5kKGBcbiAgICAgIDxkaXYgY2xhc3M9XCJwcmVsb2FkZXItYmFja2Ryb3BcIj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJwcmVsb2FkZXItbW9kYWxcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInByZWxvYWRlciBjb2xvci0ke2NvbG9yfVwiPiR7cHJlbG9hZGVySW5uZXJ9PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICBgKTtcbiAgICBQcmVsb2FkZXIudmlzaWJsZSA9IHRydWU7XG4gIH0sXG4gIGhpZGUoKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBpZiAoIVByZWxvYWRlci52aXNpYmxlKSByZXR1cm47XG4gICAgJCgnaHRtbCcpLnJlbW92ZUNsYXNzKCd3aXRoLW1vZGFsLXByZWxvYWRlcicpO1xuICAgIGFwcC5yb290LmZpbmQoJy5wcmVsb2FkZXItYmFja2Ryb3AsIC5wcmVsb2FkZXItbW9kYWwnKS5yZW1vdmUoKTtcbiAgICBQcmVsb2FkZXIudmlzaWJsZSA9IGZhbHNlO1xuICB9LFxufTtcbnZhciBwcmVsb2FkZXIgPSB7XG4gIG5hbWU6ICdwcmVsb2FkZXInLFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoYXBwLCB7XG4gICAgICBwcmVsb2FkZXI6IHtcbiAgICAgICAgaW5pdDogUHJlbG9hZGVyLmluaXQuYmluZChhcHApLFxuICAgICAgICBzaG93OiBQcmVsb2FkZXIuc2hvdy5iaW5kKGFwcCksXG4gICAgICAgIGhpZGU6IFByZWxvYWRlci5oaWRlLmJpbmQoYXBwKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgcGhvdG9Ccm93c2VyT3BlbihwYikge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGlmIChhcHAudGhlbWUgIT09ICdtZCcpIHJldHVybjtcbiAgICAgIHBiLiRjb250YWluZXJFbC5maW5kKCcucHJlbG9hZGVyJykuZWFjaCgoaW5kZXgsIHByZWxvYWRlckVsKSA9PiB7XG4gICAgICAgIGFwcC5wcmVsb2FkZXIuaW5pdChwcmVsb2FkZXJFbCk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHBhZ2VJbml0KHBhZ2UpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBpZiAoYXBwLnRoZW1lICE9PSAnbWQnKSByZXR1cm47XG4gICAgICBwYWdlLiRlbC5maW5kKCcucHJlbG9hZGVyJykuZWFjaCgoaW5kZXgsIHByZWxvYWRlckVsKSA9PiB7XG4gICAgICAgIGFwcC5wcmVsb2FkZXIuaW5pdChwcmVsb2FkZXJFbCk7XG4gICAgICB9KTtcbiAgICB9LFxuICB9LFxufTtcblxuY29uc3QgUHJvZ3Jlc3NiYXIgPSB7XG4gIHNldCguLi5hcmdzKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBsZXQgW2VsLCBwcm9ncmVzcywgZHVyYXRpb25dID0gYXJncztcbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdudW1iZXInKSB7XG4gICAgICBbcHJvZ3Jlc3MsIGR1cmF0aW9uXSA9IGFyZ3M7XG4gICAgICBlbCA9IGFwcC5yb290O1xuICAgIH1cbiAgICBpZiAoIXByb2dyZXNzKSBwcm9ncmVzcyA9IDA7XG5cbiAgICBjb25zdCAkZWwgPSAkKGVsIHx8IGFwcC5yb290KTtcbiAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGVsO1xuICAgIH1cbiAgICBjb25zdCBwcm9ncmVzc05vcm1hbGl6ZWQgPSBNYXRoLm1pbihNYXRoLm1heChwcm9ncmVzcywgMCksIDEwMCk7XG4gICAgbGV0ICRwcm9ncmVzc2JhckVsO1xuICAgIGlmICgkZWwuaGFzQ2xhc3MoJ3Byb2dyZXNzYmFyJykpICRwcm9ncmVzc2JhckVsID0gJGVsLmVxKDApO1xuICAgIGVsc2Uge1xuICAgICAgJHByb2dyZXNzYmFyRWwgPSAkZWwuY2hpbGRyZW4oJy5wcm9ncmVzc2JhcicpO1xuICAgIH1cbiAgICBpZiAoJHByb2dyZXNzYmFyRWwubGVuZ3RoID09PSAwIHx8ICRwcm9ncmVzc2JhckVsLmhhc0NsYXNzKCdwcm9ncmVzc2Jhci1pbmZpbml0ZScpKSB7XG4gICAgICByZXR1cm4gJHByb2dyZXNzYmFyRWw7XG4gICAgfVxuICAgIGxldCAkcHJvZ3Jlc3NiYXJMaW5lID0gJHByb2dyZXNzYmFyRWwuY2hpbGRyZW4oJ3NwYW4nKTtcbiAgICBpZiAoJHByb2dyZXNzYmFyTGluZS5sZW5ndGggPT09IDApIHtcbiAgICAgICRwcm9ncmVzc2JhckxpbmUgPSAkKCc8c3Bhbj48L3NwYW4+Jyk7XG4gICAgICAkcHJvZ3Jlc3NiYXJFbC5hcHBlbmQoJHByb2dyZXNzYmFyTGluZSk7XG4gICAgfVxuICAgICRwcm9ncmVzc2JhckxpbmVcbiAgICAgIC50cmFuc2l0aW9uKHR5cGVvZiBkdXJhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgPyBkdXJhdGlvbiA6ICcnKVxuICAgICAgLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHsoLTEwMCArIHByb2dyZXNzTm9ybWFsaXplZCl9JSwwLDApYCk7XG5cbiAgICByZXR1cm4gJHByb2dyZXNzYmFyRWxbMF07XG4gIH0sXG4gIHNob3coLi4uYXJncykge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG5cbiAgICAvLyAnLnBhZ2UnLCA1MCwgJ211bHRpJ1xuICAgIGxldCBbZWwsIHByb2dyZXNzLCBjb2xvcl0gPSBhcmdzO1xuICAgIGxldCB0eXBlID0gJ2RldGVybWluZWQnO1xuXG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAyKSB7XG4gICAgICBpZiAoKHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgYXJnc1swXSA9PT0gJ29iamVjdCcpICYmIHR5cGVvZiBhcmdzWzFdID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyAnLnBhZ2UnLCAnbXVsdGknXG4gICAgICAgIFtlbCwgY29sb3IsIHByb2dyZXNzXSA9IGFyZ3M7XG4gICAgICAgIHR5cGUgPSAnaW5maW5pdGUnO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGFyZ3NbMV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIDUwLCAnbXVsdGknXG4gICAgICAgIFtwcm9ncmVzcywgY29sb3JdID0gYXJncztcbiAgICAgICAgZWwgPSBhcHAucm9vdDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdudW1iZXInKSB7XG4gICAgICAgIGVsID0gYXBwLnJvb3Q7XG4gICAgICAgIHByb2dyZXNzID0gYXJnc1swXTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHR5cGUgPSAnaW5maW5pdGUnO1xuICAgICAgICBlbCA9IGFwcC5yb290O1xuICAgICAgICBjb2xvciA9IGFyZ3NbMF07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdHlwZSA9ICdpbmZpbml0ZSc7XG4gICAgICBlbCA9IGFwcC5yb290O1xuICAgIH1cblxuICAgIGNvbnN0ICRlbCA9ICQoZWwpO1xuICAgIGlmICgkZWwubGVuZ3RoID09PSAwKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgbGV0ICRwcm9ncmVzc2JhckVsO1xuICAgIGlmICgkZWwuaGFzQ2xhc3MoJ3Byb2dyZXNzYmFyJykgfHwgJGVsLmhhc0NsYXNzKCdwcm9ncmVzc2Jhci1pbmZpbml0ZScpKSB7XG4gICAgICAkcHJvZ3Jlc3NiYXJFbCA9ICRlbDtcbiAgICB9IGVsc2Uge1xuICAgICAgJHByb2dyZXNzYmFyRWwgPSAkZWwuY2hpbGRyZW4oJy5wcm9ncmVzc2Jhcjpub3QoLnByb2dyZXNzYmFyLW91dCksIC5wcm9ncmVzc2Jhci1pbmZpbml0ZTpub3QoLnByb2dyZXNzYmFyLW91dCknKTtcbiAgICAgIGlmICgkcHJvZ3Jlc3NiYXJFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgJHByb2dyZXNzYmFyRWwgPSAkKGBcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInByb2dyZXNzYmFyJHt0eXBlID09PSAnaW5maW5pdGUnID8gJy1pbmZpbml0ZScgOiAnJ30ke2NvbG9yID8gYCBjb2xvci0ke2NvbG9yfWAgOiAnJ30gcHJvZ3Jlc3NiYXItaW5cIj5cbiAgICAgICAgICAgICR7dHlwZSA9PT0gJ2luZmluaXRlJyA/ICcnIDogJzxzcGFuPjwvc3Bhbj4nfVxuICAgICAgICAgIDwvc3Bhbj5gKTtcbiAgICAgICAgJGVsLmFwcGVuZCgkcHJvZ3Jlc3NiYXJFbCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBwcm9ncmVzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGFwcC5wcm9ncmVzc2Jhci5zZXQoJHByb2dyZXNzYmFyRWwsIHByb2dyZXNzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gJHByb2dyZXNzYmFyRWxbMF07XG4gIH0sXG4gIGhpZGUoZWwsIHJlbW92ZUFmdGVySGlkZSA9IHRydWUpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIGNvbnN0ICRlbCA9ICQoZWwgfHwgYXBwLnJvb3QpO1xuICAgIGlmICgkZWwubGVuZ3RoID09PSAwKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIGxldCAkcHJvZ3Jlc3NiYXJFbDtcbiAgICBpZiAoJGVsLmhhc0NsYXNzKCdwcm9ncmVzc2JhcicpIHx8ICRlbC5oYXNDbGFzcygncHJvZ3Jlc3NiYXItaW5maW5pdGUnKSkge1xuICAgICAgJHByb2dyZXNzYmFyRWwgPSAkZWw7XG4gICAgfSBlbHNlIHtcbiAgICAgICRwcm9ncmVzc2JhckVsID0gJGVsLmNoaWxkcmVuKCcucHJvZ3Jlc3NiYXIsIC5wcm9ncmVzc2Jhci1pbmZpbml0ZScpO1xuICAgIH1cbiAgICBpZiAoJHByb2dyZXNzYmFyRWwubGVuZ3RoID09PSAwIHx8ICEkcHJvZ3Jlc3NiYXJFbC5oYXNDbGFzcygncHJvZ3Jlc3NiYXItaW4nKSB8fCAkcHJvZ3Jlc3NiYXJFbC5oYXNDbGFzcygncHJvZ3Jlc3NiYXItb3V0JykpIHtcbiAgICAgIHJldHVybiAkcHJvZ3Jlc3NiYXJFbDtcbiAgICB9XG4gICAgJHByb2dyZXNzYmFyRWxcbiAgICAgIC5yZW1vdmVDbGFzcygncHJvZ3Jlc3NiYXItaW4nKVxuICAgICAgLmFkZENsYXNzKCdwcm9ncmVzc2Jhci1vdXQnKVxuICAgICAgLmFuaW1hdGlvbkVuZCgoKSA9PiB7XG4gICAgICAgIGlmIChyZW1vdmVBZnRlckhpZGUpIHtcbiAgICAgICAgICAkcHJvZ3Jlc3NiYXJFbC5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgcmV0dXJuICRwcm9ncmVzc2JhckVsO1xuICB9LFxufTtcblxudmFyIHByb2dyZXNzYmFyID0ge1xuICBuYW1lOiAncHJvZ3Jlc3NiYXInLFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoYXBwLCB7XG4gICAgICBwcm9ncmVzc2Jhcjoge1xuICAgICAgICBzZXQ6IFByb2dyZXNzYmFyLnNldC5iaW5kKGFwcCksXG4gICAgICAgIHNob3c6IFByb2dyZXNzYmFyLnNob3cuYmluZChhcHApLFxuICAgICAgICBoaWRlOiBQcm9ncmVzc2Jhci5oaWRlLmJpbmQoYXBwKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgcGFnZUluaXQocGFnZSkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIHBhZ2UuJGVsLmZpbmQoJy5wcm9ncmVzc2JhcicpLmVhY2goKGluZGV4LCBwcm9ncmVzc2JhckVsKSA9PiB7XG4gICAgICAgIGNvbnN0ICRwcm9ncmVzc2JhckVsID0gJChwcm9ncmVzc2JhckVsKTtcbiAgICAgICAgYXBwLnByb2dyZXNzYmFyLnNldCgkcHJvZ3Jlc3NiYXJFbCwgJHByb2dyZXNzYmFyRWwuYXR0cignZGF0YS1wcm9ncmVzcycpKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBTb3J0YWJsZSA9IHtcbiAgaW5pdCgpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIGxldCBpc1RvdWNoZWQ7XG4gICAgbGV0IGlzTW92ZWQ7XG4gICAgbGV0IHRvdWNoU3RhcnRZO1xuICAgIGxldCB0b3VjaGVzRGlmZjtcbiAgICBsZXQgJHNvcnRpbmdFbDtcbiAgICBsZXQgJHNvcnRpbmdJdGVtcztcbiAgICBsZXQgJHNvcnRhYmxlQ29udGFpbmVyO1xuICAgIGxldCBzb3J0aW5nRWxIZWlnaHQ7XG4gICAgbGV0IG1pblRvcDtcbiAgICBsZXQgbWF4VG9wO1xuICAgIGxldCAkaW5zZXJ0QWZ0ZXJFbDtcbiAgICBsZXQgJGluc2VydEJlZm9yZUVsO1xuICAgIGxldCBpbmRleEZyb207XG4gICAgbGV0ICRwYWdlRWw7XG4gICAgbGV0ICRwYWdlQ29udGVudEVsO1xuICAgIGxldCBwYWdlSGVpZ2h0O1xuICAgIGxldCBwYWdlT2Zmc2V0O1xuICAgIGxldCBzb3J0aW5nRWxPZmZzZXRMb2NhbDtcbiAgICBsZXQgc29ydGluZ0VsT2Zmc2V0VG9wO1xuICAgIGxldCBpbml0aWFsU2Nyb2xsVG9wO1xuXG4gICAgZnVuY3Rpb24gaGFuZGxlVG91Y2hTdGFydChlKSB7XG4gICAgICBpc01vdmVkID0gZmFsc2U7XG4gICAgICBpc1RvdWNoZWQgPSB0cnVlO1xuICAgICAgdG91Y2hTdGFydFkgPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gICAgICAkc29ydGluZ0VsID0gJCh0aGlzKS5wYXJlbnQoJ2xpJyk7XG4gICAgICBpbmRleEZyb20gPSAkc29ydGluZ0VsLmluZGV4KCk7XG4gICAgICAkc29ydGFibGVDb250YWluZXIgPSAkc29ydGluZ0VsLnBhcmVudHMoJy5zb3J0YWJsZScpO1xuICAgICAgJHNvcnRpbmdJdGVtcyA9ICRzb3J0YWJsZUNvbnRhaW5lci5jaGlsZHJlbigndWwnKS5jaGlsZHJlbignbGknKTtcbiAgICAgIGFwcC5wYW5lbC5hbGxvd09wZW4gPSBmYWxzZTtcbiAgICAgIGFwcC5zd2lwZW91dC5hbGxvdyA9IGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVUb3VjaE1vdmUoZSkge1xuICAgICAgaWYgKCFpc1RvdWNoZWQgfHwgISRzb3J0aW5nRWwpIHJldHVybjtcbiAgICAgIGNvbnN0IHBhZ2VZID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gICAgICBpZiAoIWlzTW92ZWQpIHtcbiAgICAgICAgJHBhZ2VFbCA9ICRzb3J0aW5nRWwucGFyZW50cygnLnBhZ2UnKTtcbiAgICAgICAgJHBhZ2VDb250ZW50RWwgPSAkc29ydGluZ0VsLnBhcmVudHMoJy5wYWdlLWNvbnRlbnQnKTtcbiAgICAgICAgY29uc3QgcGFkZGluZ1RvcCA9IHBhcnNlSW50KCRwYWdlQ29udGVudEVsLmNzcygncGFkZGluZy10b3AnKSwgMTApO1xuICAgICAgICBjb25zdCBwYWRkaW5nQm90dG9tID0gcGFyc2VJbnQoJHBhZ2VDb250ZW50RWwuY3NzKCdwYWRkaW5nLWJvdHRvbScpLCAxMCk7XG4gICAgICAgIGluaXRpYWxTY3JvbGxUb3AgPSAkcGFnZUNvbnRlbnRFbFswXS5zY3JvbGxUb3A7XG4gICAgICAgIHBhZ2VPZmZzZXQgPSAkcGFnZUVsLm9mZnNldCgpLnRvcCArIHBhZGRpbmdUb3A7XG4gICAgICAgIHBhZ2VIZWlnaHQgPSAkcGFnZUVsLmhlaWdodCgpIC0gcGFkZGluZ1RvcCAtIHBhZGRpbmdCb3R0b207XG4gICAgICAgICRzb3J0aW5nRWwuYWRkQ2xhc3MoJ3NvcnRpbmcnKTtcbiAgICAgICAgJHNvcnRhYmxlQ29udGFpbmVyLmFkZENsYXNzKCdzb3J0YWJsZS1zb3J0aW5nJyk7XG4gICAgICAgIHNvcnRpbmdFbE9mZnNldExvY2FsID0gJHNvcnRpbmdFbFswXS5vZmZzZXRUb3A7XG4gICAgICAgIG1pblRvcCA9ICRzb3J0aW5nRWxbMF0ub2Zmc2V0VG9wO1xuICAgICAgICBtYXhUb3AgPSAkc29ydGluZ0VsLnBhcmVudCgpLmhlaWdodCgpIC0gc29ydGluZ0VsT2Zmc2V0TG9jYWwgLSAkc29ydGluZ0VsLmhlaWdodCgpO1xuICAgICAgICBzb3J0aW5nRWxIZWlnaHQgPSAkc29ydGluZ0VsWzBdLm9mZnNldEhlaWdodDtcbiAgICAgICAgc29ydGluZ0VsT2Zmc2V0VG9wID0gJHNvcnRpbmdFbC5vZmZzZXQoKS50b3A7XG4gICAgICB9XG4gICAgICBpc01vdmVkID0gdHJ1ZTtcblxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZS5mN1ByZXZlbnRQYW5lbFN3aXBlID0gdHJ1ZTtcblxuICAgICAgdG91Y2hlc0RpZmYgPSBwYWdlWSAtIHRvdWNoU3RhcnRZO1xuXG4gICAgICBjb25zdCB0cmFuc2xhdGVTY3JvbGxPZmZzZXQgPSAkcGFnZUNvbnRlbnRFbFswXS5zY3JvbGxUb3AgLSBpbml0aWFsU2Nyb2xsVG9wO1xuICAgICAgY29uc3QgdHJhbnNsYXRlID0gTWF0aC5taW4oTWF0aC5tYXgodG91Y2hlc0RpZmYgKyB0cmFuc2xhdGVTY3JvbGxPZmZzZXQsIC1taW5Ub3ApLCBtYXhUb3ApO1xuICAgICAgJHNvcnRpbmdFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKDAsJHt0cmFuc2xhdGV9cHgsMClgKTtcblxuICAgICAgY29uc3Qgc2Nyb2xsQWRkaXRpb24gPSA0NDtcbiAgICAgIGxldCBhbGxvd1Njcm9sbCA9IHRydWU7XG4gICAgICBpZiAoKHRvdWNoZXNEaWZmICsgdHJhbnNsYXRlU2Nyb2xsT2Zmc2V0KSArIHNjcm9sbEFkZGl0aW9uIDwgLW1pblRvcCkge1xuICAgICAgICBhbGxvd1Njcm9sbCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCh0b3VjaGVzRGlmZiArIHRyYW5zbGF0ZVNjcm9sbE9mZnNldCkgLSBzY3JvbGxBZGRpdGlvbiA+IG1heFRvcCkge1xuICAgICAgICBhbGxvd1Njcm9sbCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAkaW5zZXJ0QmVmb3JlRWwgPSB1bmRlZmluZWQ7XG4gICAgICAkaW5zZXJ0QWZ0ZXJFbCA9IHVuZGVmaW5lZDtcblxuICAgICAgbGV0IHNjcm9sbERpZmY7XG4gICAgICBpZiAoYWxsb3dTY3JvbGwpIHtcbiAgICAgICAgaWYgKHNvcnRpbmdFbE9mZnNldFRvcCArIHRvdWNoZXNEaWZmICsgc29ydGluZ0VsSGVpZ2h0ICsgc2Nyb2xsQWRkaXRpb24gPiBwYWdlT2Zmc2V0ICsgcGFnZUhlaWdodCkge1xuICAgICAgICAgIC8vIFRvIEJvdHRvbVxuICAgICAgICAgIHNjcm9sbERpZmYgPSAoc29ydGluZ0VsT2Zmc2V0VG9wICsgdG91Y2hlc0RpZmYgKyBzb3J0aW5nRWxIZWlnaHQgKyBzY3JvbGxBZGRpdGlvbikgLSAocGFnZU9mZnNldCArIHBhZ2VIZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzb3J0aW5nRWxPZmZzZXRUb3AgKyB0b3VjaGVzRGlmZiA8IHBhZ2VPZmZzZXQgKyBzY3JvbGxBZGRpdGlvbikge1xuICAgICAgICAgIC8vIFRvIFRvcFxuICAgICAgICAgIHNjcm9sbERpZmYgPSAoc29ydGluZ0VsT2Zmc2V0VG9wICsgdG91Y2hlc0RpZmYpIC0gcGFnZU9mZnNldCAtIHNjcm9sbEFkZGl0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzY3JvbGxEaWZmKSB7XG4gICAgICAgICAgJHBhZ2VDb250ZW50RWxbMF0uc2Nyb2xsVG9wICs9IHNjcm9sbERpZmY7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJHNvcnRpbmdJdGVtcy5lYWNoKChpbmRleCwgZWwpID0+IHtcbiAgICAgICAgY29uc3QgJGN1cnJlbnRFbCA9ICQoZWwpO1xuICAgICAgICBpZiAoJGN1cnJlbnRFbFswXSA9PT0gJHNvcnRpbmdFbFswXSkgcmV0dXJuO1xuICAgICAgICBjb25zdCBjdXJyZW50RWxPZmZzZXQgPSAkY3VycmVudEVsWzBdLm9mZnNldFRvcDtcbiAgICAgICAgY29uc3QgY3VycmVudEVsSGVpZ2h0ID0gJGN1cnJlbnRFbC5oZWlnaHQoKTtcbiAgICAgICAgY29uc3Qgc29ydGluZ0VsT2Zmc2V0ID0gc29ydGluZ0VsT2Zmc2V0TG9jYWwgKyB0cmFuc2xhdGU7XG5cbiAgICAgICAgaWYgKChzb3J0aW5nRWxPZmZzZXQgPj0gY3VycmVudEVsT2Zmc2V0IC0gKGN1cnJlbnRFbEhlaWdodCAvIDIpKSAmJiAkc29ydGluZ0VsLmluZGV4KCkgPCAkY3VycmVudEVsLmluZGV4KCkpIHtcbiAgICAgICAgICAkY3VycmVudEVsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoMCwgJHstc29ydGluZ0VsSGVpZ2h0fXB4LDApYCk7XG4gICAgICAgICAgJGluc2VydEFmdGVyRWwgPSAkY3VycmVudEVsO1xuICAgICAgICAgICRpbnNlcnRCZWZvcmVFbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfSBlbHNlIGlmICgoc29ydGluZ0VsT2Zmc2V0IDw9IGN1cnJlbnRFbE9mZnNldCArIChjdXJyZW50RWxIZWlnaHQgLyAyKSkgJiYgJHNvcnRpbmdFbC5pbmRleCgpID4gJGN1cnJlbnRFbC5pbmRleCgpKSB7XG4gICAgICAgICAgJGN1cnJlbnRFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKDAsICR7c29ydGluZ0VsSGVpZ2h0fXB4LDApYCk7XG4gICAgICAgICAgJGluc2VydEFmdGVyRWwgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKCEkaW5zZXJ0QmVmb3JlRWwpICRpbnNlcnRCZWZvcmVFbCA9ICRjdXJyZW50RWw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGN1cnJlbnRFbC50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKDAsIDAlLDApJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVUb3VjaEVuZCgpIHtcbiAgICAgIGlmICghaXNUb3VjaGVkIHx8ICFpc01vdmVkKSB7XG4gICAgICAgIGlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICBpc01vdmVkID0gZmFsc2U7XG4gICAgICAgIGlmIChpc1RvdWNoZWQgJiYgIWlzTW92ZWQpIHtcbiAgICAgICAgICBhcHAucGFuZWwuYWxsb3dPcGVuID0gdHJ1ZTtcbiAgICAgICAgICBhcHAuc3dpcGVvdXQuYWxsb3cgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwcC5wYW5lbC5hbGxvd09wZW4gPSB0cnVlO1xuICAgICAgYXBwLnN3aXBlb3V0LmFsbG93ID0gdHJ1ZTtcblxuICAgICAgJHNvcnRpbmdJdGVtcy50cmFuc2Zvcm0oJycpO1xuICAgICAgJHNvcnRpbmdFbC5yZW1vdmVDbGFzcygnc29ydGluZycpO1xuICAgICAgJHNvcnRhYmxlQ29udGFpbmVyLnJlbW92ZUNsYXNzKCdzb3J0YWJsZS1zb3J0aW5nJyk7XG5cbiAgICAgIGxldCB2aXJ0dWFsTGlzdDtcbiAgICAgIGxldCBvbGRJbmRleDtcbiAgICAgIGxldCBuZXdJbmRleDtcbiAgICAgIGlmICgkaW5zZXJ0QWZ0ZXJFbCkge1xuICAgICAgICAkc29ydGluZ0VsLmluc2VydEFmdGVyKCRpbnNlcnRBZnRlckVsKTtcbiAgICAgIH1cbiAgICAgIGlmICgkaW5zZXJ0QmVmb3JlRWwpIHtcbiAgICAgICAgJHNvcnRpbmdFbC5pbnNlcnRCZWZvcmUoJGluc2VydEJlZm9yZUVsKTtcbiAgICAgIH1cblxuICAgICAgJHNvcnRpbmdFbC50cmlnZ2VyKCdzb3J0YWJsZTpzb3J0JywgeyBmcm9tOiBpbmRleEZyb20sIHRvOiAkc29ydGluZ0VsLmluZGV4KCkgfSk7XG4gICAgICBhcHAuZW1pdCgnc29ydGFibGVTb3J0JywgJHNvcnRpbmdFbFswXSwgeyBmcm9tOiBpbmRleEZyb20sIHRvOiAkc29ydGluZ0VsLmluZGV4KCkgfSk7XG5cbiAgICAgIGlmICgoJGluc2VydEFmdGVyRWwgfHwgJGluc2VydEJlZm9yZUVsKSAmJiAkc29ydGFibGVDb250YWluZXIuaGFzQ2xhc3MoJ3ZpcnR1YWwtbGlzdCcpKSB7XG4gICAgICAgIHZpcnR1YWxMaXN0ID0gJHNvcnRhYmxlQ29udGFpbmVyWzBdLmY3VmlydHVhbExpc3Q7XG4gICAgICAgIG9sZEluZGV4ID0gJHNvcnRpbmdFbFswXS5mN1ZpcnR1YWxMaXN0SW5kZXg7XG4gICAgICAgIG5ld0luZGV4ID0gJGluc2VydEJlZm9yZUVsID8gJGluc2VydEJlZm9yZUVsWzBdLmY3VmlydHVhbExpc3RJbmRleCA6ICRpbnNlcnRBZnRlckVsWzBdLmY3VmlydHVhbExpc3RJbmRleDtcbiAgICAgICAgaWYgKHZpcnR1YWxMaXN0KSB2aXJ0dWFsTGlzdC5tb3ZlSXRlbShvbGRJbmRleCwgbmV3SW5kZXgpO1xuICAgICAgfVxuICAgICAgJGluc2VydEJlZm9yZUVsID0gdW5kZWZpbmVkO1xuICAgICAgJGluc2VydEFmdGVyRWwgPSB1bmRlZmluZWQ7XG4gICAgICBpc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgIGlzTW92ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBhY3RpdmVMaXN0ZW5lciA9IGFwcC5zdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciA/IHsgcGFzc2l2ZTogZmFsc2UsIGNhcHR1cmU6IGZhbHNlIH0gOiBmYWxzZTtcblxuICAgICQoZG9jdW1lbnQpLm9uKGFwcC50b3VjaEV2ZW50cy5zdGFydCwgJy5saXN0LnNvcnRhYmxlIC5zb3J0YWJsZS1oYW5kbGVyJywgaGFuZGxlVG91Y2hTdGFydCwgYWN0aXZlTGlzdGVuZXIpO1xuICAgIGFwcC5vbigndG91Y2htb3ZlJywgaGFuZGxlVG91Y2hNb3ZlKTtcbiAgICBhcHAub24oJ3RvdWNoZW5kOnBhc3NpdmUnLCBoYW5kbGVUb3VjaEVuZCk7XG4gIH0sXG4gIGVuYWJsZShlbCA9ICcubGlzdC5zb3J0YWJsZScpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIGNvbnN0ICRlbCA9ICQoZWwpO1xuICAgIGlmICgkZWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgJGVsLmFkZENsYXNzKCdzb3J0YWJsZS1lbmFibGVkJyk7XG4gICAgJGVsLnRyaWdnZXIoJ3NvcnRhYmxlOm9wZW4nKTtcbiAgICBhcHAuZW1pdCgnc29ydGFibGVPcGVuJywgJGVsWzBdKTtcbiAgfSxcbiAgZGlzYWJsZShlbCA9ICcubGlzdC5zb3J0YWJsZScpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIGNvbnN0ICRlbCA9ICQoZWwpO1xuICAgIGlmICgkZWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgJGVsLnJlbW92ZUNsYXNzKCdzb3J0YWJsZS1lbmFibGVkJyk7XG4gICAgJGVsLnRyaWdnZXIoJ3NvcnRhYmxlOmNsb3NlJyk7XG4gICAgYXBwLmVtaXQoJ3NvcnRhYmxlQ2xvc2UnLCAkZWxbMF0pO1xuICB9LFxuICB0b2dnbGUoZWwgPSAnLmxpc3Quc29ydGFibGUnKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGlmICgkZWwuaGFzQ2xhc3MoJ3NvcnRhYmxlLWVuYWJsZWQnKSkge1xuICAgICAgYXBwLnNvcnRhYmxlLmRpc2FibGUoJGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBwLnNvcnRhYmxlLmVuYWJsZSgkZWwpO1xuICAgIH1cbiAgfSxcbn07XG52YXIgc29ydGFibGUgPSB7XG4gIG5hbWU6ICdzb3J0YWJsZScsXG4gIHBhcmFtczoge1xuICAgIHNvcnRhYmxlOiB0cnVlLFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoYXBwLCB7XG4gICAgICBzb3J0YWJsZToge1xuICAgICAgICBpbml0OiBTb3J0YWJsZS5pbml0LmJpbmQoYXBwKSxcbiAgICAgICAgZW5hYmxlOiBTb3J0YWJsZS5lbmFibGUuYmluZChhcHApLFxuICAgICAgICBkaXNhYmxlOiBTb3J0YWJsZS5kaXNhYmxlLmJpbmQoYXBwKSxcbiAgICAgICAgdG9nZ2xlOiBTb3J0YWJsZS50b2dnbGUuYmluZChhcHApLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0KCkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGlmIChhcHAucGFyYW1zLnNvcnRhYmxlKSBhcHAuc29ydGFibGUuaW5pdCgpO1xuICAgIH0sXG4gIH0sXG4gIGNsaWNrczoge1xuICAgICcuc29ydGFibGUtZW5hYmxlJzogZnVuY3Rpb24gZW5hYmxlKCRjbGlja2VkRWwsIGRhdGEgPSB7fSkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGFwcC5zb3J0YWJsZS5lbmFibGUoZGF0YS5zb3J0YWJsZSk7XG4gICAgfSxcbiAgICAnLnNvcnRhYmxlLWRpc2FibGUnOiBmdW5jdGlvbiBkaXNhYmxlKCRjbGlja2VkRWwsIGRhdGEgPSB7fSkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGFwcC5zb3J0YWJsZS5kaXNhYmxlKGRhdGEuc29ydGFibGUpO1xuICAgIH0sXG4gICAgJy5zb3J0YWJsZS10b2dnbGUnOiBmdW5jdGlvbiB0b2dnbGUoJGNsaWNrZWRFbCwgZGF0YSA9IHt9KSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgYXBwLnNvcnRhYmxlLnRvZ2dsZShkYXRhLnNvcnRhYmxlKTtcbiAgICB9LFxuICB9LFxufTtcblxuY29uc3QgU3dpcGVvdXQgPSB7XG4gIGluaXQoKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBjb25zdCB0b3VjaGVzU3RhcnQgPSB7fTtcbiAgICBsZXQgaXNUb3VjaGVkO1xuICAgIGxldCBpc01vdmVkO1xuICAgIGxldCBpc1Njcm9sbGluZztcbiAgICBsZXQgdG91Y2hTdGFydFRpbWU7XG4gICAgbGV0IHRvdWNoZXNEaWZmO1xuICAgIGxldCAkc3dpcGVvdXRFbDtcbiAgICBsZXQgJHN3aXBlb3V0Q29udGVudDtcbiAgICBsZXQgJGFjdGlvbnNSaWdodDtcbiAgICBsZXQgJGFjdGlvbnNMZWZ0O1xuICAgIGxldCBhY3Rpb25zTGVmdFdpZHRoO1xuICAgIGxldCBhY3Rpb25zUmlnaHRXaWR0aDtcbiAgICBsZXQgdHJhbnNsYXRlO1xuICAgIGxldCBvcGVuZWQ7XG4gICAgbGV0IG9wZW5lZEFjdGlvbnNTaWRlO1xuICAgIGxldCAkbGVmdEJ1dHRvbnM7XG4gICAgbGV0ICRyaWdodEJ1dHRvbnM7XG4gICAgbGV0IGRpcmVjdGlvbjtcbiAgICBsZXQgJG92ZXJzd2lwZUxlZnRCdXR0b247XG4gICAgbGV0ICRvdmVyc3dpcGVSaWdodEJ1dHRvbjtcbiAgICBsZXQgb3ZlcnN3aXBlTGVmdDtcbiAgICBsZXQgb3ZlcnN3aXBlUmlnaHQ7XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVUb3VjaFN0YXJ0KGUpIHtcbiAgICAgIGlmICghU3dpcGVvdXQuYWxsb3cpIHJldHVybjtcbiAgICAgIGlzTW92ZWQgPSBmYWxzZTtcbiAgICAgIGlzVG91Y2hlZCA9IHRydWU7XG4gICAgICBpc1Njcm9sbGluZyA9IHVuZGVmaW5lZDtcbiAgICAgIHRvdWNoZXNTdGFydC54ID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICAgICAgdG91Y2hlc1N0YXJ0LnkgPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gICAgICB0b3VjaFN0YXJ0VGltZSA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZVRvdWNoTW92ZShlKSB7XG4gICAgICBpZiAoIWlzVG91Y2hlZCkgcmV0dXJuO1xuICAgICAgY29uc3QgcGFnZVggPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICAgIGNvbnN0IHBhZ2VZID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gICAgICBpZiAodHlwZW9mIGlzU2Nyb2xsaW5nID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpc1Njcm9sbGluZyA9ICEhKGlzU2Nyb2xsaW5nIHx8IE1hdGguYWJzKHBhZ2VZIC0gdG91Y2hlc1N0YXJ0LnkpID4gTWF0aC5hYnMocGFnZVggLSB0b3VjaGVzU3RhcnQueCkpO1xuICAgICAgfVxuICAgICAgaWYgKGlzU2Nyb2xsaW5nKSB7XG4gICAgICAgIGlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNNb3ZlZCkge1xuICAgICAgICBpZiAoJCgnLmxpc3Quc29ydGFibGUtb3BlbmVkJykubGVuZ3RoID4gMCkgcmV0dXJuO1xuICAgICAgICAkc3dpcGVvdXRFbCA9ICQodGhpcyk7XG4gICAgICAgICRzd2lwZW91dENvbnRlbnQgPSAkc3dpcGVvdXRFbC5maW5kKCcuc3dpcGVvdXQtY29udGVudCcpO1xuICAgICAgICAkYWN0aW9uc1JpZ2h0ID0gJHN3aXBlb3V0RWwuZmluZCgnLnN3aXBlb3V0LWFjdGlvbnMtcmlnaHQnKTtcbiAgICAgICAgJGFjdGlvbnNMZWZ0ID0gJHN3aXBlb3V0RWwuZmluZCgnLnN3aXBlb3V0LWFjdGlvbnMtbGVmdCcpO1xuICAgICAgICBhY3Rpb25zTGVmdFdpZHRoID0gbnVsbDtcbiAgICAgICAgYWN0aW9uc1JpZ2h0V2lkdGggPSBudWxsO1xuICAgICAgICAkbGVmdEJ1dHRvbnMgPSBudWxsO1xuICAgICAgICAkcmlnaHRCdXR0b25zID0gbnVsbDtcbiAgICAgICAgJG92ZXJzd2lwZVJpZ2h0QnV0dG9uID0gbnVsbDtcbiAgICAgICAgJG92ZXJzd2lwZUxlZnRCdXR0b24gPSBudWxsO1xuICAgICAgICBpZiAoJGFjdGlvbnNMZWZ0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBhY3Rpb25zTGVmdFdpZHRoID0gJGFjdGlvbnNMZWZ0Lm91dGVyV2lkdGgoKTtcbiAgICAgICAgICAkbGVmdEJ1dHRvbnMgPSAkYWN0aW9uc0xlZnQuY2hpbGRyZW4oJ2EnKTtcbiAgICAgICAgICAkb3ZlcnN3aXBlTGVmdEJ1dHRvbiA9ICRhY3Rpb25zTGVmdC5maW5kKCcuc3dpcGVvdXQtb3ZlcnN3aXBlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCRhY3Rpb25zUmlnaHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGFjdGlvbnNSaWdodFdpZHRoID0gJGFjdGlvbnNSaWdodC5vdXRlcldpZHRoKCk7XG4gICAgICAgICAgJHJpZ2h0QnV0dG9ucyA9ICRhY3Rpb25zUmlnaHQuY2hpbGRyZW4oJ2EnKTtcbiAgICAgICAgICAkb3ZlcnN3aXBlUmlnaHRCdXR0b24gPSAkYWN0aW9uc1JpZ2h0LmZpbmQoJy5zd2lwZW91dC1vdmVyc3dpcGUnKTtcbiAgICAgICAgfVxuICAgICAgICBvcGVuZWQgPSAkc3dpcGVvdXRFbC5oYXNDbGFzcygnc3dpcGVvdXQtb3BlbmVkJyk7XG4gICAgICAgIGlmIChvcGVuZWQpIHtcbiAgICAgICAgICBvcGVuZWRBY3Rpb25zU2lkZSA9ICRzd2lwZW91dEVsLmZpbmQoJy5zd2lwZW91dC1hY3Rpb25zLWxlZnQuc3dpcGVvdXQtYWN0aW9ucy1vcGVuZWQnKS5sZW5ndGggPiAwID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgICAgfVxuICAgICAgICAkc3dpcGVvdXRFbC5yZW1vdmVDbGFzcygnc3dpcGVvdXQtdHJhbnNpdGlvbmluZycpO1xuICAgICAgICBpZiAoIWFwcC5wYXJhbXMuc3dpcGVvdXROb0ZvbGxvdykge1xuICAgICAgICAgICRzd2lwZW91dEVsLmZpbmQoJy5zd2lwZW91dC1hY3Rpb25zLW9wZW5lZCcpLnJlbW92ZUNsYXNzKCdzd2lwZW91dC1hY3Rpb25zLW9wZW5lZCcpO1xuICAgICAgICAgICRzd2lwZW91dEVsLnJlbW92ZUNsYXNzKCdzd2lwZW91dC1vcGVuZWQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaXNNb3ZlZCA9IHRydWU7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIHRvdWNoZXNEaWZmID0gcGFnZVggLSB0b3VjaGVzU3RhcnQueDtcbiAgICAgIHRyYW5zbGF0ZSA9IHRvdWNoZXNEaWZmO1xuXG4gICAgICBpZiAob3BlbmVkKSB7XG4gICAgICAgIGlmIChvcGVuZWRBY3Rpb25zU2lkZSA9PT0gJ3JpZ2h0JykgdHJhbnNsYXRlIC09IGFjdGlvbnNSaWdodFdpZHRoO1xuICAgICAgICBlbHNlIHRyYW5zbGF0ZSArPSBhY3Rpb25zTGVmdFdpZHRoO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgICAgKHRyYW5zbGF0ZSA+IDAgJiYgJGFjdGlvbnNMZWZ0Lmxlbmd0aCA9PT0gMClcbiAgICAgICAgICB8fFxuICAgICAgICAgICh0cmFuc2xhdGUgPCAwICYmICRhY3Rpb25zUmlnaHQubGVuZ3RoID09PSAwKVxuICAgICAgKSB7XG4gICAgICAgIGlmICghb3BlbmVkKSB7XG4gICAgICAgICAgaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgICAgaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgICAgICRzd2lwZW91dENvbnRlbnQudHJhbnNmb3JtKCcnKTtcbiAgICAgICAgICBpZiAoJHJpZ2h0QnV0dG9ucyAmJiAkcmlnaHRCdXR0b25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICRyaWdodEJ1dHRvbnMudHJhbnNmb3JtKCcnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCRsZWZ0QnV0dG9ucyAmJiAkbGVmdEJ1dHRvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgJGxlZnRCdXR0b25zLnRyYW5zZm9ybSgnJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0cmFuc2xhdGUgPSAwO1xuICAgICAgfVxuXG4gICAgICBpZiAodHJhbnNsYXRlIDwgMCkgZGlyZWN0aW9uID0gJ3RvLWxlZnQnO1xuICAgICAgZWxzZSBpZiAodHJhbnNsYXRlID4gMCkgZGlyZWN0aW9uID0gJ3RvLXJpZ2h0JztcbiAgICAgIGVsc2UgaWYgKCFkaXJlY3Rpb24pIGRpcmVjdGlvbiA9ICd0by1sZWZ0JztcblxuICAgICAgbGV0IGJ1dHRvbk9mZnNldDtcbiAgICAgIGxldCBwcm9ncmVzcztcblxuICAgICAgZS5mN1ByZXZlbnRQYW5lbFN3aXBlID0gdHJ1ZTtcbiAgICAgIGlmIChhcHAucGFyYW1zLnN3aXBlb3V0Tm9Gb2xsb3cpIHtcbiAgICAgICAgaWYgKG9wZW5lZCkge1xuICAgICAgICAgIGlmIChvcGVuZWRBY3Rpb25zU2lkZSA9PT0gJ3JpZ2h0JyAmJiB0b3VjaGVzRGlmZiA+IDApIHtcbiAgICAgICAgICAgIGFwcC5zd2lwZW91dC5jbG9zZSgkc3dpcGVvdXRFbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvcGVuZWRBY3Rpb25zU2lkZSA9PT0gJ2xlZnQnICYmIHRvdWNoZXNEaWZmIDwgMCkge1xuICAgICAgICAgICAgYXBwLnN3aXBlb3V0LmNsb3NlKCRzd2lwZW91dEVsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHRvdWNoZXNEaWZmIDwgMCAmJiAkYWN0aW9uc1JpZ2h0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGFwcC5zd2lwZW91dC5vcGVuKCRzd2lwZW91dEVsLCAncmlnaHQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRvdWNoZXNEaWZmID4gMCAmJiAkYWN0aW9uc0xlZnQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgYXBwLnN3aXBlb3V0Lm9wZW4oJHN3aXBlb3V0RWwsICdsZWZ0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICBpc01vdmVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG92ZXJzd2lwZUxlZnQgPSBmYWxzZTtcbiAgICAgIG92ZXJzd2lwZVJpZ2h0ID0gZmFsc2U7XG4gICAgICBpZiAoJGFjdGlvbnNSaWdodC5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIFNob3cgcmlnaHQgYWN0aW9uc1xuICAgICAgICBsZXQgYnV0dG9uVHJhbnNsYXRlID0gdHJhbnNsYXRlO1xuICAgICAgICBwcm9ncmVzcyA9IGJ1dHRvblRyYW5zbGF0ZSAvIGFjdGlvbnNSaWdodFdpZHRoO1xuICAgICAgICBpZiAoYnV0dG9uVHJhbnNsYXRlIDwgLWFjdGlvbnNSaWdodFdpZHRoKSB7XG4gICAgICAgICAgYnV0dG9uVHJhbnNsYXRlID0gLWFjdGlvbnNSaWdodFdpZHRoIC0gKCgtYnV0dG9uVHJhbnNsYXRlIC0gYWN0aW9uc1JpZ2h0V2lkdGgpICoqIDAuOCk7XG4gICAgICAgICAgdHJhbnNsYXRlID0gYnV0dG9uVHJhbnNsYXRlO1xuICAgICAgICAgIGlmICgkb3ZlcnN3aXBlUmlnaHRCdXR0b24ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgb3ZlcnN3aXBlUmlnaHQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlyZWN0aW9uICE9PSAndG8tbGVmdCcpIHtcbiAgICAgICAgICBwcm9ncmVzcyA9IDA7XG4gICAgICAgICAgYnV0dG9uVHJhbnNsYXRlID0gMDtcbiAgICAgICAgfVxuICAgICAgICAkcmlnaHRCdXR0b25zLmVhY2goKGluZGV4LCBidXR0b25FbCkgPT4ge1xuICAgICAgICAgIGNvbnN0ICRidXR0b25FbCA9ICQoYnV0dG9uRWwpO1xuICAgICAgICAgIGlmICh0eXBlb2YgYnV0dG9uRWwuZjdTd2lwZW91dEJ1dHRvbk9mZnNldCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICRidXR0b25FbFswXS5mN1N3aXBlb3V0QnV0dG9uT2Zmc2V0ID0gYnV0dG9uRWwub2Zmc2V0TGVmdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnV0dG9uT2Zmc2V0ID0gYnV0dG9uRWwuZjdTd2lwZW91dEJ1dHRvbk9mZnNldDtcbiAgICAgICAgICBpZiAoJG92ZXJzd2lwZVJpZ2h0QnV0dG9uLmxlbmd0aCA+IDAgJiYgJGJ1dHRvbkVsLmhhc0NsYXNzKCdzd2lwZW91dC1vdmVyc3dpcGUnKSAmJiBkaXJlY3Rpb24gPT09ICd0by1sZWZ0Jykge1xuICAgICAgICAgICAgJGJ1dHRvbkVsLmNzcyh7IGxlZnQ6IGAke292ZXJzd2lwZVJpZ2h0ID8gLWJ1dHRvbk9mZnNldCA6IDB9cHhgIH0pO1xuICAgICAgICAgICAgaWYgKG92ZXJzd2lwZVJpZ2h0KSB7XG4gICAgICAgICAgICAgICRidXR0b25FbC5hZGRDbGFzcygnc3dpcGVvdXQtb3ZlcnN3aXBlLWFjdGl2ZScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgJGJ1dHRvbkVsLnJlbW92ZUNsYXNzKCdzd2lwZW91dC1vdmVyc3dpcGUtYWN0aXZlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgICRidXR0b25FbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7YnV0dG9uVHJhbnNsYXRlIC0gKGJ1dHRvbk9mZnNldCAqICgxICsgTWF0aC5tYXgocHJvZ3Jlc3MsIC0xKSkpfXB4LDAsMClgKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoJGFjdGlvbnNMZWZ0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gU2hvdyBsZWZ0IGFjdGlvbnNcbiAgICAgICAgbGV0IGJ1dHRvblRyYW5zbGF0ZSA9IHRyYW5zbGF0ZTtcbiAgICAgICAgcHJvZ3Jlc3MgPSBidXR0b25UcmFuc2xhdGUgLyBhY3Rpb25zTGVmdFdpZHRoO1xuICAgICAgICBpZiAoYnV0dG9uVHJhbnNsYXRlID4gYWN0aW9uc0xlZnRXaWR0aCkge1xuICAgICAgICAgIGJ1dHRvblRyYW5zbGF0ZSA9IGFjdGlvbnNMZWZ0V2lkdGggKyAoKGJ1dHRvblRyYW5zbGF0ZSAtIGFjdGlvbnNMZWZ0V2lkdGgpICoqIDAuOCk7XG4gICAgICAgICAgdHJhbnNsYXRlID0gYnV0dG9uVHJhbnNsYXRlO1xuICAgICAgICAgIGlmICgkb3ZlcnN3aXBlTGVmdEJ1dHRvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBvdmVyc3dpcGVMZWZ0ID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpcmVjdGlvbiAhPT0gJ3RvLXJpZ2h0Jykge1xuICAgICAgICAgIGJ1dHRvblRyYW5zbGF0ZSA9IDA7XG4gICAgICAgICAgcHJvZ3Jlc3MgPSAwO1xuICAgICAgICB9XG4gICAgICAgICRsZWZ0QnV0dG9ucy5lYWNoKChpbmRleCwgYnV0dG9uRWwpID0+IHtcbiAgICAgICAgICBjb25zdCAkYnV0dG9uRWwgPSAkKGJ1dHRvbkVsKTtcbiAgICAgICAgICBpZiAodHlwZW9mIGJ1dHRvbkVsLmY3U3dpcGVvdXRCdXR0b25PZmZzZXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAkYnV0dG9uRWxbMF0uZjdTd2lwZW91dEJ1dHRvbk9mZnNldCA9IGFjdGlvbnNMZWZ0V2lkdGggLSBidXR0b25FbC5vZmZzZXRMZWZ0IC0gYnV0dG9uRWwub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1dHRvbk9mZnNldCA9IGJ1dHRvbkVsLmY3U3dpcGVvdXRCdXR0b25PZmZzZXQ7XG4gICAgICAgICAgaWYgKCRvdmVyc3dpcGVMZWZ0QnV0dG9uLmxlbmd0aCA+IDAgJiYgJGJ1dHRvbkVsLmhhc0NsYXNzKCdzd2lwZW91dC1vdmVyc3dpcGUnKSAmJiBkaXJlY3Rpb24gPT09ICd0by1yaWdodCcpIHtcbiAgICAgICAgICAgICRidXR0b25FbC5jc3MoeyBsZWZ0OiBgJHtvdmVyc3dpcGVMZWZ0ID8gYnV0dG9uT2Zmc2V0IDogMH1weGAgfSk7XG4gICAgICAgICAgICBpZiAob3ZlcnN3aXBlTGVmdCkge1xuICAgICAgICAgICAgICAkYnV0dG9uRWwuYWRkQ2xhc3MoJ3N3aXBlb3V0LW92ZXJzd2lwZS1hY3RpdmUnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICRidXR0b25FbC5yZW1vdmVDbGFzcygnc3dpcGVvdXQtb3ZlcnN3aXBlLWFjdGl2ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJGxlZnRCdXR0b25zLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICRidXR0b25FbC5jc3MoJ3otaW5kZXgnLCAkbGVmdEJ1dHRvbnMubGVuZ3RoIC0gaW5kZXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAkYnV0dG9uRWwudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke2J1dHRvblRyYW5zbGF0ZSArIChidXR0b25PZmZzZXQgKiAoMSAtIE1hdGgubWluKHByb2dyZXNzLCAxKSkpfXB4LDAsMClgKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAkc3dpcGVvdXRFbC50cmlnZ2VyKCdzd2lwZW91dCcsIHByb2dyZXNzKTtcbiAgICAgIGFwcC5lbWl0KCdzd2lwZW91dCcsICRzd2lwZW91dEVsWzBdLCBwcm9ncmVzcyk7XG4gICAgICAkc3dpcGVvdXRDb250ZW50LnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHt0cmFuc2xhdGV9cHgsMCwwKWApO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVUb3VjaEVuZCgpIHtcbiAgICAgIGlmICghaXNUb3VjaGVkIHx8ICFpc01vdmVkKSB7XG4gICAgICAgIGlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICBpc01vdmVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICBpc01vdmVkID0gZmFsc2U7XG4gICAgICBjb25zdCB0aW1lRGlmZiA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLSB0b3VjaFN0YXJ0VGltZTtcbiAgICAgIGNvbnN0ICRhY3Rpb25zID0gZGlyZWN0aW9uID09PSAndG8tbGVmdCcgPyAkYWN0aW9uc1JpZ2h0IDogJGFjdGlvbnNMZWZ0O1xuICAgICAgY29uc3QgYWN0aW9uc1dpZHRoID0gZGlyZWN0aW9uID09PSAndG8tbGVmdCcgPyBhY3Rpb25zUmlnaHRXaWR0aCA6IGFjdGlvbnNMZWZ0V2lkdGg7XG4gICAgICBsZXQgYWN0aW9uO1xuICAgICAgbGV0ICRidXR0b25zO1xuICAgICAgbGV0IGk7XG5cbiAgICAgIGlmIChcbiAgICAgICAgKFxuICAgICAgICAgIHRpbWVEaWZmIDwgMzAwXG4gICAgICAgICAgJiZcbiAgICAgICAgICAoXG4gICAgICAgICAgICAodG91Y2hlc0RpZmYgPCAtMTAgJiYgZGlyZWN0aW9uID09PSAndG8tbGVmdCcpXG4gICAgICAgICAgICB8fFxuICAgICAgICAgICAgKHRvdWNoZXNEaWZmID4gMTAgJiYgZGlyZWN0aW9uID09PSAndG8tcmlnaHQnKVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgICB8fFxuICAgICAgICAoXG4gICAgICAgICAgdGltZURpZmYgPj0gMzAwXG4gICAgICAgICAgJiZcbiAgICAgICAgICAoTWF0aC5hYnModHJhbnNsYXRlKSA+IGFjdGlvbnNXaWR0aCAvIDIpXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICBhY3Rpb24gPSAnb3Blbic7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3Rpb24gPSAnY2xvc2UnO1xuICAgICAgfVxuICAgICAgaWYgKHRpbWVEaWZmIDwgMzAwKSB7XG4gICAgICAgIGlmIChNYXRoLmFicyh0cmFuc2xhdGUpID09PSAwKSBhY3Rpb24gPSAnY2xvc2UnO1xuICAgICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlKSA9PT0gYWN0aW9uc1dpZHRoKSBhY3Rpb24gPSAnb3Blbic7XG4gICAgICB9XG5cbiAgICAgIGlmIChhY3Rpb24gPT09ICdvcGVuJykge1xuICAgICAgICBTd2lwZW91dC5lbCA9ICRzd2lwZW91dEVsWzBdO1xuICAgICAgICAkc3dpcGVvdXRFbC50cmlnZ2VyKCdzd2lwZW91dDpvcGVuJyk7XG4gICAgICAgIGFwcC5lbWl0KCdzd2lwZW91dE9wZW4nLCAkc3dpcGVvdXRFbFswXSk7XG4gICAgICAgICRzd2lwZW91dEVsLmFkZENsYXNzKCdzd2lwZW91dC1vcGVuZWQgc3dpcGVvdXQtdHJhbnNpdGlvbmluZycpO1xuICAgICAgICBjb25zdCBuZXdUcmFuc2xhdGUgPSBkaXJlY3Rpb24gPT09ICd0by1sZWZ0JyA/IC1hY3Rpb25zV2lkdGggOiBhY3Rpb25zV2lkdGg7XG4gICAgICAgICRzd2lwZW91dENvbnRlbnQudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke25ld1RyYW5zbGF0ZX1weCwwLDApYCk7XG4gICAgICAgICRhY3Rpb25zLmFkZENsYXNzKCdzd2lwZW91dC1hY3Rpb25zLW9wZW5lZCcpO1xuICAgICAgICAkYnV0dG9ucyA9IGRpcmVjdGlvbiA9PT0gJ3RvLWxlZnQnID8gJHJpZ2h0QnV0dG9ucyA6ICRsZWZ0QnV0dG9ucztcbiAgICAgICAgaWYgKCRidXR0b25zKSB7XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8ICRidXR0b25zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAkKCRidXR0b25zW2ldKS50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7bmV3VHJhbnNsYXRlfXB4LDAsMClgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG92ZXJzd2lwZVJpZ2h0KSB7XG4gICAgICAgICAgJGFjdGlvbnNSaWdodC5maW5kKCcuc3dpcGVvdXQtb3ZlcnN3aXBlJylbMF0uY2xpY2soKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3ZlcnN3aXBlTGVmdCkge1xuICAgICAgICAgICRhY3Rpb25zTGVmdC5maW5kKCcuc3dpcGVvdXQtb3ZlcnN3aXBlJylbMF0uY2xpY2soKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHN3aXBlb3V0RWwudHJpZ2dlcignc3dpcGVvdXQ6Y2xvc2UnKTtcbiAgICAgICAgYXBwLmVtaXQoJ3N3aXBlb3V0Q2xvc2UnLCAkc3dpcGVvdXRFbFswXSk7XG4gICAgICAgIFN3aXBlb3V0LmVsID0gdW5kZWZpbmVkO1xuICAgICAgICAkc3dpcGVvdXRFbC5hZGRDbGFzcygnc3dpcGVvdXQtdHJhbnNpdGlvbmluZycpLnJlbW92ZUNsYXNzKCdzd2lwZW91dC1vcGVuZWQnKTtcbiAgICAgICAgJHN3aXBlb3V0Q29udGVudC50cmFuc2Zvcm0oJycpO1xuICAgICAgICAkYWN0aW9ucy5yZW1vdmVDbGFzcygnc3dpcGVvdXQtYWN0aW9ucy1vcGVuZWQnKTtcbiAgICAgIH1cblxuICAgICAgbGV0IGJ1dHRvbk9mZnNldDtcbiAgICAgIGlmICgkbGVmdEJ1dHRvbnMgJiYgJGxlZnRCdXR0b25zLmxlbmd0aCA+IDAgJiYgJGxlZnRCdXR0b25zICE9PSAkYnV0dG9ucykge1xuICAgICAgICAkbGVmdEJ1dHRvbnMuZWFjaCgoaW5kZXgsIGJ1dHRvbkVsKSA9PiB7XG4gICAgICAgICAgY29uc3QgJGJ1dHRvbkVsID0gJChidXR0b25FbCk7XG4gICAgICAgICAgYnV0dG9uT2Zmc2V0ID0gYnV0dG9uRWwuZjdTd2lwZW91dEJ1dHRvbk9mZnNldDtcbiAgICAgICAgICBpZiAodHlwZW9mIGJ1dHRvbk9mZnNldCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICRidXR0b25FbFswXS5mN1N3aXBlb3V0QnV0dG9uT2Zmc2V0ID0gYWN0aW9uc0xlZnRXaWR0aCAtIGJ1dHRvbkVsLm9mZnNldExlZnQgLSBidXR0b25FbC5vZmZzZXRXaWR0aDtcbiAgICAgICAgICB9XG4gICAgICAgICAgJGJ1dHRvbkVsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHtidXR0b25PZmZzZXR9cHgsMCwwKWApO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICgkcmlnaHRCdXR0b25zICYmICRyaWdodEJ1dHRvbnMubGVuZ3RoID4gMCAmJiAkcmlnaHRCdXR0b25zICE9PSAkYnV0dG9ucykge1xuICAgICAgICAkcmlnaHRCdXR0b25zLmVhY2goKGluZGV4LCBidXR0b25FbCkgPT4ge1xuICAgICAgICAgIGNvbnN0ICRidXR0b25FbCA9ICQoYnV0dG9uRWwpO1xuICAgICAgICAgIGJ1dHRvbk9mZnNldCA9IGJ1dHRvbkVsLmY3U3dpcGVvdXRCdXR0b25PZmZzZXQ7XG4gICAgICAgICAgaWYgKHR5cGVvZiBidXR0b25PZmZzZXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAkYnV0dG9uRWxbMF0uZjdTd2lwZW91dEJ1dHRvbk9mZnNldCA9IGJ1dHRvbkVsLm9mZnNldExlZnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgICRidXR0b25FbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7LWJ1dHRvbk9mZnNldH1weCwwLDApYCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgJHN3aXBlb3V0Q29udGVudC50cmFuc2l0aW9uRW5kKCgpID0+IHtcbiAgICAgICAgaWYgKChvcGVuZWQgJiYgYWN0aW9uID09PSAnb3BlbicpIHx8ICghb3BlbmVkICYmIGFjdGlvbiA9PT0gJ2Nsb3NlJykpIHJldHVybjtcbiAgICAgICAgJHN3aXBlb3V0RWwudHJpZ2dlcihhY3Rpb24gPT09ICdvcGVuJyA/ICdzd2lwZW91dDpvcGVuZWQnIDogJ3N3aXBlb3V0OmNsb3NlZCcpO1xuICAgICAgICBhcHAuZW1pdChhY3Rpb24gPT09ICdvcGVuJyA/ICdzd2lwZW91dE9wZW5lZCcgOiAnc3dpcGVvdXRDbG9zZWQnLCAkc3dpcGVvdXRFbFswXSk7XG4gICAgICAgICRzd2lwZW91dEVsLnJlbW92ZUNsYXNzKCdzd2lwZW91dC10cmFuc2l0aW9uaW5nJyk7XG4gICAgICAgIGlmIChvcGVuZWQgJiYgYWN0aW9uID09PSAnY2xvc2UnKSB7XG4gICAgICAgICAgaWYgKCRhY3Rpb25zUmlnaHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgJHJpZ2h0QnV0dG9ucy50cmFuc2Zvcm0oJycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJGFjdGlvbnNMZWZ0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICRsZWZ0QnV0dG9ucy50cmFuc2Zvcm0oJycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgYWN0aXZlTGlzdGVuZXIgPSBhcHAuc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgPyB7IHBhc3NpdmU6IGZhbHNlIH0gOiBmYWxzZTtcbiAgICBjb25zdCBwYXNzaXZlTGlzdGVuZXIgPSBhcHAuc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgPyB7IHBhc3NpdmU6IHRydWUgfSA6IGZhbHNlO1xuXG4gICAgYXBwLm9uKCd0b3VjaHN0YXJ0JywgKGUpID0+IHtcbiAgICAgIGlmIChTd2lwZW91dC5lbCkge1xuICAgICAgICBjb25zdCAkdGFyZ2V0RWwgPSAkKGUudGFyZ2V0KTtcbiAgICAgICAgaWYgKCEoXG4gICAgICAgICAgJChTd2lwZW91dC5lbCkuaXMoJHRhcmdldEVsWzBdKSB8fFxuICAgICAgICAgICR0YXJnZXRFbC5wYXJlbnRzKCcuc3dpcGVvdXQnKS5pcyhTd2lwZW91dC5lbCkgfHxcbiAgICAgICAgICAkdGFyZ2V0RWwuaGFzQ2xhc3MoJ21vZGFsLWluJykgfHxcbiAgICAgICAgICAkdGFyZ2V0RWxbMF0uY2xhc3NOYW1lLmluZGV4T2YoJy1iYWNrZHJvcCcpID4gMCB8fFxuICAgICAgICAgICR0YXJnZXRFbC5oYXNDbGFzcygnYWN0aW9ucy1tb2RhbCcpIHx8XG4gICAgICAgICAgJHRhcmdldEVsLnBhcmVudHMoJy5hY3Rpb25zLW1vZGFsLm1vZGFsLWluLCAuZGlhbG9nLm1vZGFsLWluJykubGVuZ3RoID4gMFxuICAgICAgICAgICkpIHtcbiAgICAgICAgICBhcHAuc3dpcGVvdXQuY2xvc2UoU3dpcGVvdXQuZWwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgJChkb2N1bWVudCkub24oYXBwLnRvdWNoRXZlbnRzLnN0YXJ0LCAnbGkuc3dpcGVvdXQnLCBoYW5kbGVUb3VjaFN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICQoZG9jdW1lbnQpLm9uKGFwcC50b3VjaEV2ZW50cy5tb3ZlLCAnbGkuc3dpcGVvdXQnLCBoYW5kbGVUb3VjaE1vdmUsIGFjdGl2ZUxpc3RlbmVyKTtcbiAgICAkKGRvY3VtZW50KS5vbihhcHAudG91Y2hFdmVudHMuZW5kLCAnbGkuc3dpcGVvdXQnLCBoYW5kbGVUb3VjaEVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgfSxcbiAgYWxsb3c6IHRydWUsXG4gIGVsOiB1bmRlZmluZWQsXG4gIG9wZW4oLi4uYXJncykge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgbGV0IFtlbCwgc2lkZSwgY2FsbGJhY2tdID0gYXJncztcbiAgICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIFtlbCwgY2FsbGJhY2ssIHNpZGVdID0gYXJncztcbiAgICB9XG4gICAgY29uc3QgJGVsID0gJChlbCkuZXEoMCk7XG5cbiAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGlmICghJGVsLmhhc0NsYXNzKCdzd2lwZW91dCcpIHx8ICRlbC5oYXNDbGFzcygnc3dpcGVvdXQtb3BlbmVkJykpIHJldHVybjtcbiAgICBpZiAoIXNpZGUpIHtcbiAgICAgIGlmICgkZWwuZmluZCgnLnN3aXBlb3V0LWFjdGlvbnMtcmlnaHQnKS5sZW5ndGggPiAwKSBzaWRlID0gJ3JpZ2h0JztcbiAgICAgIGVsc2Ugc2lkZSA9ICdsZWZ0JztcbiAgICB9XG4gICAgY29uc3QgJHN3aXBlb3V0QWN0aW9ucyA9ICRlbC5maW5kKGAuc3dpcGVvdXQtYWN0aW9ucy0ke3NpZGV9YCk7XG4gICAgY29uc3QgJHN3aXBlb3V0Q29udGVudCA9ICRlbC5maW5kKCcuc3dpcGVvdXQtY29udGVudCcpO1xuICAgIGlmICgkc3dpcGVvdXRBY3Rpb25zLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICRlbC50cmlnZ2VyKCdzd2lwZW91dDpvcGVuJykuYWRkQ2xhc3MoJ3N3aXBlb3V0LW9wZW5lZCcpLnJlbW92ZUNsYXNzKCdzd2lwZW91dC10cmFuc2l0aW9uaW5nJyk7XG4gICAgYXBwLmVtaXQoJ3N3aXBlb3V0T3BlbicsICRlbFswXSk7XG4gICAgJHN3aXBlb3V0QWN0aW9ucy5hZGRDbGFzcygnc3dpcGVvdXQtYWN0aW9ucy1vcGVuZWQnKTtcbiAgICBjb25zdCAkYnV0dG9ucyA9ICRzd2lwZW91dEFjdGlvbnMuY2hpbGRyZW4oJ2EnKTtcbiAgICBjb25zdCBzd2lwZW91dEFjdGlvbnNXaWR0aCA9ICRzd2lwZW91dEFjdGlvbnMub3V0ZXJXaWR0aCgpO1xuICAgIGNvbnN0IHRyYW5zbGF0ZSA9IHNpZGUgPT09ICdyaWdodCcgPyAtc3dpcGVvdXRBY3Rpb25zV2lkdGggOiBzd2lwZW91dEFjdGlvbnNXaWR0aDtcbiAgICBpZiAoJGJ1dHRvbnMubGVuZ3RoID4gMSkge1xuICAgICAgJGJ1dHRvbnMuZWFjaCgoYnV0dG9uSW5kZXgsIGJ1dHRvbkVsKSA9PiB7XG4gICAgICAgIGNvbnN0ICRidXR0b25FbCA9ICQoYnV0dG9uRWwpO1xuICAgICAgICBpZiAoc2lkZSA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICRidXR0b25FbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7LWJ1dHRvbkVsLm9mZnNldExlZnR9cHgsMCwwKWApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRidXR0b25FbC5jc3MoJ3otaW5kZXgnLCAkYnV0dG9ucy5sZW5ndGggLSBidXR0b25JbmRleCkudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke3N3aXBlb3V0QWN0aW9uc1dpZHRoIC0gYnV0dG9uRWwub2Zmc2V0V2lkdGggLSBidXR0b25FbC5vZmZzZXRMZWZ0fXB4LDAsMClgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgICRlbC5hZGRDbGFzcygnc3dpcGVvdXQtdHJhbnNpdGlvbmluZycpO1xuICAgICRzd2lwZW91dENvbnRlbnQudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAkZWwudHJpZ2dlcignc3dpcGVvdXQ6b3BlbmVkJyk7XG4gICAgICBhcHAuZW1pdCgnc3dpcGVvdXRPcGVuZWQnLCAkZWxbMF0pO1xuICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjay5jYWxsKCRlbFswXSk7XG4gICAgfSk7XG4gICAgVXRpbHMubmV4dEZyYW1lKCgpID0+IHtcbiAgICAgICRidXR0b25zLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHt0cmFuc2xhdGV9cHgsMCwwKWApO1xuICAgICAgJHN3aXBlb3V0Q29udGVudC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7dHJhbnNsYXRlfXB4LDAsMClgKTtcbiAgICB9KTtcbiAgICBTd2lwZW91dC5lbCA9ICRlbFswXTtcbiAgfSxcbiAgY2xvc2UoZWwsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBjb25zdCAkZWwgPSAkKGVsKS5lcSgwKTtcbiAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGlmICghJGVsLmhhc0NsYXNzKCdzd2lwZW91dC1vcGVuZWQnKSkgcmV0dXJuO1xuICAgIGNvbnN0IHNpZGUgPSAkZWwuZmluZCgnLnN3aXBlb3V0LWFjdGlvbnMtb3BlbmVkJykuaGFzQ2xhc3MoJ3N3aXBlb3V0LWFjdGlvbnMtcmlnaHQnKSA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgY29uc3QgJHN3aXBlb3V0QWN0aW9ucyA9ICRlbC5maW5kKCcuc3dpcGVvdXQtYWN0aW9ucy1vcGVuZWQnKS5yZW1vdmVDbGFzcygnc3dpcGVvdXQtYWN0aW9ucy1vcGVuZWQnKTtcbiAgICBjb25zdCAkYnV0dG9ucyA9ICRzd2lwZW91dEFjdGlvbnMuY2hpbGRyZW4oJ2EnKTtcbiAgICBjb25zdCBzd2lwZW91dEFjdGlvbnNXaWR0aCA9ICRzd2lwZW91dEFjdGlvbnMub3V0ZXJXaWR0aCgpO1xuICAgIFN3aXBlb3V0LmFsbG93ID0gZmFsc2U7XG4gICAgJGVsLnRyaWdnZXIoJ3N3aXBlb3V0OmNsb3NlJyk7XG4gICAgYXBwLmVtaXQoJ3N3aXBlb3V0Q2xvc2UnLCAkZWxbMF0pO1xuICAgICRlbC5yZW1vdmVDbGFzcygnc3dpcGVvdXQtb3BlbmVkJykuYWRkQ2xhc3MoJ3N3aXBlb3V0LXRyYW5zaXRpb25pbmcnKTtcblxuICAgIGxldCBjbG9zZVRpbWVvdXQ7XG4gICAgZnVuY3Rpb24gb25Td2lwZW91dENsb3NlKCkge1xuICAgICAgU3dpcGVvdXQuYWxsb3cgPSB0cnVlO1xuICAgICAgaWYgKCRlbC5oYXNDbGFzcygnc3dpcGVvdXQtb3BlbmVkJykpIHJldHVybjtcbiAgICAgICRlbC5yZW1vdmVDbGFzcygnc3dpcGVvdXQtdHJhbnNpdGlvbmluZycpO1xuICAgICAgJGJ1dHRvbnMudHJhbnNmb3JtKCcnKTtcbiAgICAgICRlbC50cmlnZ2VyKCdzd2lwZW91dDpjbG9zZWQnKTtcbiAgICAgIGFwcC5lbWl0KCdzd2lwZW91dENsb3NlZCcsICRlbFswXSk7XG4gICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrLmNhbGwoJGVsWzBdKTtcbiAgICAgIGlmIChjbG9zZVRpbWVvdXQpIGNsZWFyVGltZW91dChjbG9zZVRpbWVvdXQpO1xuICAgIH1cbiAgICAkZWwuZmluZCgnLnN3aXBlb3V0LWNvbnRlbnQnKS50cmFuc2Zvcm0oJycpLnRyYW5zaXRpb25FbmQob25Td2lwZW91dENsb3NlKTtcbiAgICBjbG9zZVRpbWVvdXQgPSBzZXRUaW1lb3V0KG9uU3dpcGVvdXRDbG9zZSwgNTAwKTtcblxuICAgICRidXR0b25zLmVhY2goKGluZGV4LCBidXR0b25FbCkgPT4ge1xuICAgICAgY29uc3QgJGJ1dHRvbkVsID0gJChidXR0b25FbCk7XG4gICAgICBpZiAoc2lkZSA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAkYnV0dG9uRWwudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgkey1idXR0b25FbC5vZmZzZXRMZWZ0fXB4LDAsMClgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRidXR0b25FbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7c3dpcGVvdXRBY3Rpb25zV2lkdGggLSBidXR0b25FbC5vZmZzZXRXaWR0aCAtIGJ1dHRvbkVsLm9mZnNldExlZnR9cHgsMCwwKWApO1xuICAgICAgfVxuICAgICAgJGJ1dHRvbkVsLmNzcyh7IGxlZnQ6ICcwcHgnIH0pLnJlbW92ZUNsYXNzKCdzd2lwZW91dC1vdmVyc3dpcGUtYWN0aXZlJyk7XG4gICAgfSk7XG4gICAgaWYgKFN3aXBlb3V0LmVsICYmIFN3aXBlb3V0LmVsID09PSAkZWxbMF0pIFN3aXBlb3V0LmVsID0gdW5kZWZpbmVkO1xuICB9LFxuICBkZWxldGUoZWwsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBjb25zdCAkZWwgPSAkKGVsKS5lcSgwKTtcbiAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIFN3aXBlb3V0LmVsID0gdW5kZWZpbmVkO1xuICAgICRlbC50cmlnZ2VyKCdzd2lwZW91dDpkZWxldGUnKTtcbiAgICBhcHAuZW1pdCgnc3dpcGVvdXREZWxldGUnLCAkZWxbMF0pO1xuICAgICRlbC5jc3MoeyBoZWlnaHQ6IGAkeyRlbC5vdXRlckhlaWdodCgpfXB4YCB9KTtcbiAgICAkZWwudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAkZWwudHJpZ2dlcignc3dpcGVvdXQ6ZGVsZXRlZCcpO1xuICAgICAgYXBwLmVtaXQoJ3N3aXBlb3V0RGVsZXRlZCcsICRlbFswXSk7XG4gICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrLmNhbGwoJGVsWzBdKTtcbiAgICAgIGlmICgkZWwucGFyZW50cygnLnZpcnR1YWwtbGlzdCcpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgdmlydHVhbExpc3QgPSAkZWwucGFyZW50cygnLnZpcnR1YWwtbGlzdCcpWzBdLmY3VmlydHVhbExpc3Q7XG4gICAgICAgIGNvbnN0IHZpcnR1YWxJbmRleCA9ICRlbFswXS5mN1ZpcnR1YWxMaXN0SW5kZXg7XG4gICAgICAgIGlmICh2aXJ0dWFsTGlzdCAmJiB0eXBlb2YgdmlydHVhbEluZGV4ICE9PSAndW5kZWZpbmVkJykgdmlydHVhbExpc3QuZGVsZXRlSXRlbSh2aXJ0dWFsSW5kZXgpO1xuICAgICAgfSBlbHNlIGlmIChhcHAucGFyYW1zLnN3aXBlb3V0LnJlbW92ZUVsZW1lbnRzKSB7XG4gICAgICAgIGlmIChhcHAucGFyYW1zLnN3aXBlb3V0LnJlbW92ZUVsZW1lbnRzV2l0aFRpbWVvdXQpIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICRlbC5yZW1vdmUoKTtcbiAgICAgICAgICB9LCBhcHAucGFyYW1zLnN3aXBlb3V0LnJlbW92ZUVsZW1lbnRzVGltZW91dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGVsLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkZWwucmVtb3ZlQ2xhc3MoJ3N3aXBlb3V0LWRlbGV0aW5nIHN3aXBlb3V0LXRyYW5zaXRpb25pbmcnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBVdGlscy5uZXh0RnJhbWUoKCkgPT4ge1xuICAgICAgJGVsXG4gICAgICAgIC5hZGRDbGFzcygnc3dpcGVvdXQtZGVsZXRpbmcgc3dpcGVvdXQtdHJhbnNpdGlvbmluZycpXG4gICAgICAgIC5jc3MoeyBoZWlnaHQ6ICcwcHgnIH0pXG4gICAgICAgIC5maW5kKCcuc3dpcGVvdXQtY29udGVudCcpXG4gICAgICAgIC50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKC0xMDAlLDAsMCknKTtcbiAgICB9KTtcbiAgfSxcbn07XG52YXIgc3dpcGVvdXQgPSB7XG4gIG5hbWU6ICdzd2lwZW91dCcsXG4gIHBhcmFtczoge1xuICAgIHN3aXBlb3V0OiB7XG4gICAgICBhY3Rpb25zTm9Gb2xkOiBmYWxzZSxcbiAgICAgIG5vRm9sbG93OiBmYWxzZSxcbiAgICAgIHJlbW92ZUVsZW1lbnRzOiB0cnVlLFxuICAgICAgcmVtb3ZlRWxlbWVudHNXaXRoVGltZW91dDogZmFsc2UsXG4gICAgICByZW1vdmVFbGVtZW50c1RpbWVvdXQ6IDAsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKGFwcCwge1xuICAgICAgc3dpcGVvdXQ6IHtcbiAgICAgICAgaW5pdDogU3dpcGVvdXQuaW5pdC5iaW5kKGFwcCksXG4gICAgICAgIG9wZW46IFN3aXBlb3V0Lm9wZW4uYmluZChhcHApLFxuICAgICAgICBjbG9zZTogU3dpcGVvdXQuY2xvc2UuYmluZChhcHApLFxuICAgICAgICBkZWxldGU6IFN3aXBlb3V0LmRlbGV0ZS5iaW5kKGFwcCksXG4gICAgICB9LFxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcHAuc3dpcGVvdXQsICdlbCcsIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6ICgpID0+IFN3aXBlb3V0LmVsLFxuICAgICAgc2V0KGVsKSB7XG4gICAgICAgIFN3aXBlb3V0LmVsID0gZWw7XG4gICAgICB9LFxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcHAuc3dpcGVvdXQsICdhbGxvdycsIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6ICgpID0+IFN3aXBlb3V0LmFsbG93LFxuICAgICAgc2V0KGFsbG93KSB7XG4gICAgICAgIFN3aXBlb3V0LmFsbG93ID0gYWxsb3c7XG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBjbGlja3M6IHtcbiAgICAnLnN3aXBlb3V0LW9wZW4nOiBmdW5jdGlvbiBvcGVuU3dpcGVvdXQoJGNsaWNrZWRFbCwgZGF0YSA9IHt9KSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgYXBwLnN3aXBlb3V0Lm9wZW4oZGF0YS5zd2lwZW91dCwgZGF0YS5zaWRlKTtcbiAgICB9LFxuICAgICcuc3dpcGVvdXQtY2xvc2UnOiBmdW5jdGlvbiBjbG9zZVN3aXBlb3V0KCRjbGlja2VkRWwpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBjb25zdCAkc3dpcGVvdXRFbCA9ICRjbGlja2VkRWwuY2xvc2VzdCgnLnN3aXBlb3V0Jyk7XG4gICAgICBpZiAoJHN3aXBlb3V0RWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICBhcHAuc3dpcGVvdXQuY2xvc2UoJHN3aXBlb3V0RWwpO1xuICAgIH0sXG4gICAgJy5zd2lwZW91dC1kZWxldGUnOiBmdW5jdGlvbiBkZWxldGVTd2lwZW91dCgkY2xpY2tlZEVsLCBkYXRhID0ge30pIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBjb25zdCAkc3dpcGVvdXRFbCA9ICRjbGlja2VkRWwuY2xvc2VzdCgnLnN3aXBlb3V0Jyk7XG4gICAgICBpZiAoJHN3aXBlb3V0RWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICBjb25zdCB7IGNvbmZpcm0sIGNvbmZpcm1UaXRsZSB9ID0gZGF0YTtcbiAgICAgIGlmIChkYXRhLmNvbmZpcm0pIHtcbiAgICAgICAgYXBwLmRpYWxvZy5jb25maXJtKGNvbmZpcm0sIGNvbmZpcm1UaXRsZSwgKCkgPT4ge1xuICAgICAgICAgIGFwcC5zd2lwZW91dC5kZWxldGUoJHN3aXBlb3V0RWwpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFwcC5zd2lwZW91dC5kZWxldGUoJHN3aXBlb3V0RWwpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdCgpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBhcHAuc3dpcGVvdXQuaW5pdCgpO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBBY2NvcmRpb24gPSB7XG4gIHRvZ2dsZUNsaWNrZWQoJGNsaWNrZWRFbCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgbGV0ICRhY2NvcmRpb25JdGVtRWwgPSAkY2xpY2tlZEVsLmNsb3Nlc3QoJy5hY2NvcmRpb24taXRlbScpLmVxKDApO1xuICAgIGlmICghJGFjY29yZGlvbkl0ZW1FbC5sZW5ndGgpICRhY2NvcmRpb25JdGVtRWwgPSAkY2xpY2tlZEVsLnBhcmVudHMoJ2xpJykuZXEoMCk7XG4gICAgYXBwLmFjY29yZGlvbi50b2dnbGUoJGFjY29yZGlvbkl0ZW1FbCk7XG4gIH0sXG4gIG9wZW4oZWwpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIGNvbnN0ICRlbCA9ICQoZWwpO1xuICAgIGNvbnN0ICRsaXN0ID0gJGVsLnBhcmVudHMoJy5hY2NvcmRpb24tbGlzdCcpLmVxKDApO1xuICAgIGxldCAkY29udGVudEVsID0gJGVsLmNoaWxkcmVuKCcuYWNjb3JkaW9uLWl0ZW0tY29udGVudCcpO1xuICAgIGlmICgkY29udGVudEVsLmxlbmd0aCA9PT0gMCkgJGNvbnRlbnRFbCA9ICRlbC5maW5kKCcuYWNjb3JkaW9uLWl0ZW0tY29udGVudCcpO1xuICAgIGlmICgkY29udGVudEVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGNvbnN0ICRvcGVuZWRJdGVtID0gJGxpc3QubGVuZ3RoID4gMCAmJiAkZWwucGFyZW50KCkuY2hpbGRyZW4oJy5hY2NvcmRpb24taXRlbS1vcGVuZWQnKTtcbiAgICBpZiAoJG9wZW5lZEl0ZW0ubGVuZ3RoID4gMCkge1xuICAgICAgYXBwLmFjY29yZGlvbi5jbG9zZSgkb3BlbmVkSXRlbSk7XG4gICAgfVxuICAgICRjb250ZW50RWwudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICBpZiAoJGVsLmhhc0NsYXNzKCdhY2NvcmRpb24taXRlbS1vcGVuZWQnKSkge1xuICAgICAgICAkY29udGVudEVsLmNzcygnaGVpZ2h0JywgJycpO1xuICAgICAgICAkY29udGVudEVsLnRyYW5zaXRpb24oJycpO1xuICAgICAgICAkZWwudHJpZ2dlcignYWNjb3JkaW9uOm9wZW5lZCcpO1xuICAgICAgICBhcHAuZW1pdCgnYWNjb3JkaW9uT3BlbmVkJywgJGVsWzBdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRjb250ZW50RWwuY3NzKCdoZWlnaHQnLCAnJyk7XG4gICAgICAgICRlbC50cmlnZ2VyKCdhY2NvcmRpb246Y2xvc2VkJyk7XG4gICAgICAgIGFwcC5lbWl0KCdhY2NvcmRpb25DbG9zZWQnLCAkZWxbMF0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgICRjb250ZW50RWwuY3NzKCdoZWlnaHQnLCBgJHskY29udGVudEVsWzBdLnNjcm9sbEhlaWdodH1weGApO1xuICAgICRlbC50cmlnZ2VyKCdhY2NvcmRpb246b3BlbicpO1xuICAgICRlbC5hZGRDbGFzcygnYWNjb3JkaW9uLWl0ZW0tb3BlbmVkJyk7XG4gICAgYXBwLmVtaXQoJ2FjY29yZGlvbk9wZW4nLCAkZWxbMF0pO1xuICB9LFxuICBjbG9zZShlbCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgY29uc3QgJGVsID0gJChlbCk7XG4gICAgbGV0ICRjb250ZW50RWwgPSAkZWwuY2hpbGRyZW4oJy5hY2NvcmRpb24taXRlbS1jb250ZW50Jyk7XG4gICAgaWYgKCRjb250ZW50RWwubGVuZ3RoID09PSAwKSAkY29udGVudEVsID0gJGVsLmZpbmQoJy5hY2NvcmRpb24taXRlbS1jb250ZW50Jyk7XG4gICAgJGVsLnJlbW92ZUNsYXNzKCdhY2NvcmRpb24taXRlbS1vcGVuZWQnKTtcbiAgICAkY29udGVudEVsLnRyYW5zaXRpb24oMCk7XG4gICAgJGNvbnRlbnRFbC5jc3MoJ2hlaWdodCcsIGAkeyRjb250ZW50RWxbMF0uc2Nyb2xsSGVpZ2h0fXB4YCk7XG4gICAgLy8gQ2xvc2VcbiAgICAkY29udGVudEVsLnRyYW5zaXRpb25FbmQoKCkgPT4ge1xuICAgICAgaWYgKCRlbC5oYXNDbGFzcygnYWNjb3JkaW9uLWl0ZW0tb3BlbmVkJykpIHtcbiAgICAgICAgJGNvbnRlbnRFbC5jc3MoJ2hlaWdodCcsICcnKTtcbiAgICAgICAgJGNvbnRlbnRFbC50cmFuc2l0aW9uKCcnKTtcbiAgICAgICAgJGVsLnRyaWdnZXIoJ2FjY29yZGlvbjpvcGVuZWQnKTtcbiAgICAgICAgYXBwLmVtaXQoJ2FjY29yZGlvbk9wZW5lZCcsICRlbFswXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkY29udGVudEVsLmNzcygnaGVpZ2h0JywgJycpO1xuICAgICAgICAkZWwudHJpZ2dlcignYWNjb3JkaW9uOmNsb3NlZCcpO1xuICAgICAgICBhcHAuZW1pdCgnYWNjb3JkaW9uQ2xvc2VkJywgJGVsWzBdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBVdGlscy5uZXh0RnJhbWUoKCkgPT4ge1xuICAgICAgJGNvbnRlbnRFbC50cmFuc2l0aW9uKCcnKTtcbiAgICAgICRjb250ZW50RWwuY3NzKCdoZWlnaHQnLCAnJyk7XG4gICAgICAkZWwudHJpZ2dlcignYWNjb3JkaW9uOmNsb3NlJyk7XG4gICAgICBhcHAuZW1pdCgnYWNjb3JkaW9uQ2xvc2UnKTtcbiAgICB9KTtcbiAgfSxcbiAgdG9nZ2xlKGVsKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGlmICgkZWwuaGFzQ2xhc3MoJ2FjY29yZGlvbi1pdGVtLW9wZW5lZCcpKSBhcHAuYWNjb3JkaW9uLmNsb3NlKGVsKTtcbiAgICBlbHNlIGFwcC5hY2NvcmRpb24ub3BlbihlbCk7XG4gIH0sXG59O1xuXG52YXIgYWNjb3JkaW9uID0ge1xuICBuYW1lOiAnYWNjb3JkaW9uJyxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKGFwcCwge1xuICAgICAgYWNjb3JkaW9uOiB7XG4gICAgICAgIG9wZW46IEFjY29yZGlvbi5vcGVuLmJpbmQoYXBwKSxcbiAgICAgICAgY2xvc2U6IEFjY29yZGlvbi5jbG9zZS5iaW5kKGFwcCksXG4gICAgICAgIHRvZ2dsZTogQWNjb3JkaW9uLnRvZ2dsZS5iaW5kKGFwcCksXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBjbGlja3M6IHtcbiAgICAnLmFjY29yZGlvbi1pdGVtIC5pdGVtLWxpbmssIC5hY2NvcmRpb24taXRlbS10b2dnbGUsIC5saW5rcy1saXN0LmFjY29yZGlvbi1saXN0ID4gdWwgPiBsaSA+IGEnOiBmdW5jdGlvbiBvcGVuKCRjbGlja2VkRWwpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBBY2NvcmRpb24udG9nZ2xlQ2xpY2tlZC5jYWxsKGFwcCwgJGNsaWNrZWRFbCk7XG4gICAgfSxcbiAgfSxcbn07XG5cbmNsYXNzIFZpcnR1YWxMaXN0IGV4dGVuZHMgRnJhbWV3b3JrN0NsYXNzIHtcbiAgY29uc3RydWN0b3IoYXBwLCBwYXJhbXMgPSB7fSkge1xuICAgIHN1cGVyKHBhcmFtcywgW2FwcF0pO1xuICAgIGNvbnN0IHZsID0gdGhpcztcblxuICAgIGNvbnN0IGRlZmF1bHRzID0ge1xuICAgICAgY29sczogMSxcbiAgICAgIGhlaWdodDogYXBwLnRoZW1lID09PSAnbWQnID8gNDggOiA0NCxcbiAgICAgIGNhY2hlOiB0cnVlLFxuICAgICAgZHluYW1pY0hlaWdodEJ1ZmZlclNpemU6IDEsXG4gICAgICBzaG93RmlsdGVyZWRJdGVtc09ubHk6IGZhbHNlLFxuICAgICAgcmVuZGVyRXh0ZXJuYWw6IHVuZGVmaW5lZCxcbiAgICAgIHNldExpc3RIZWlnaHQ6IHRydWUsXG4gICAgICBzZWFyY2hCeUl0ZW06IHVuZGVmaW5lZCxcbiAgICAgIHNlYXJjaEFsbDogdW5kZWZpbmVkLFxuICAgICAgcmVuZGVySXRlbTogdW5kZWZpbmVkLFxuICAgICAgaXRlbVRlbXBsYXRlOlxuICAgICAgICAnPGxpPicgK1xuICAgICAgICAgICc8ZGl2IGNsYXNzPVwiaXRlbS1jb250ZW50XCI+JyArXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cIml0ZW0taW5uZXJcIj4nICtcbiAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJpdGVtLXRpdGxlXCI+e3t0aGlzfX08L2Rpdj4nICtcbiAgICAgICAgICAgICc8L2Rpdj4nICtcbiAgICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICc8L2xpPicsXG4gICAgICBvbjoge30sXG4gICAgfTtcblxuICAgIC8vIEV4dGVuZCBkZWZhdWx0cyB3aXRoIG1vZHVsZXMgcGFyYW1zXG4gICAgdmwudXNlSW5zdGFuY2VNb2R1bGVzUGFyYW1zKGRlZmF1bHRzKTtcblxuICAgIHZsLnBhcmFtcyA9IFV0aWxzLmV4dGVuZChkZWZhdWx0cywgcGFyYW1zKTtcbiAgICBpZiAodmwucGFyYW1zLmhlaWdodCA9PT0gdW5kZWZpbmVkIHx8ICF2bC5wYXJhbXMuaGVpZ2h0KSB7XG4gICAgICB2bC5wYXJhbXMuaGVpZ2h0ID0gYXBwLnRoZW1lID09PSAnbWQnID8gNDggOiA0NDtcbiAgICB9XG5cbiAgICB2bC4kZWwgPSAkKHBhcmFtcy5lbCk7XG4gICAgdmwuZWwgPSB2bC4kZWxbMF07XG5cbiAgICBpZiAodmwuJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB2bC4kZWxbMF0uZjdWaXJ0dWFsTGlzdCA9IHZsO1xuXG4gICAgdmwuaXRlbXMgPSB2bC5wYXJhbXMuaXRlbXM7XG4gICAgaWYgKHZsLnBhcmFtcy5zaG93RmlsdGVyZWRJdGVtc09ubHkpIHtcbiAgICAgIHZsLmZpbHRlcmVkSXRlbXMgPSBbXTtcbiAgICB9XG4gICAgaWYgKHZsLnBhcmFtcy5pdGVtVGVtcGxhdGUgJiYgIXZsLnBhcmFtcy5yZW5kZXJJdGVtKSB7XG4gICAgICBpZiAodHlwZW9mIHZsLnBhcmFtcy5pdGVtVGVtcGxhdGUgPT09ICdzdHJpbmcnKSB2bC5pdGVtVGVtcGxhdGUgPSB0Ny5jb21waWxlKHZsLnBhcmFtcy50ZW1wbGF0ZSk7XG4gICAgICBlbHNlIGlmICh0eXBlb2YgdmwucGFyYW1zLml0ZW1UZW1wbGF0ZSA9PT0gJ2Z1bmN0aW9uJykgdmwuaXRlbVRlbXBsYXRlID0gdmwucGFyYW1zLml0ZW1UZW1wbGF0ZTtcbiAgICB9XG4gICAgdmwuJHBhZ2VDb250ZW50RWwgPSB2bC4kZWwucGFyZW50cygnLnBhZ2UtY29udGVudCcpO1xuXG4gICAgLy8gQmFkIHNjcm9sbFxuICAgIGlmICh0eXBlb2YgdmwucGFyYW1zLnVwZGF0YWJsZVNjcm9sbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZsLnVwZGF0YWJsZVNjcm9sbCA9IHZsLnBhcmFtcy51cGRhdGFibGVTY3JvbGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZsLnVwZGF0YWJsZVNjcm9sbCA9IHRydWU7XG4gICAgICBpZiAoRGV2aWNlJDEuaW9zICYmIERldmljZSQxLm9zVmVyc2lvbi5zcGxpdCgnLicpWzBdIDwgOCkge1xuICAgICAgICB2bC51cGRhdGFibGVTY3JvbGwgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBcHBlbmQgPHVsPlxuICAgIHZsLnVsID0gdmwucGFyYW1zLnVsID8gJCh2bC5wYXJhbXMudWwpIDogdmwuJGVsLmNoaWxkcmVuKCd1bCcpO1xuICAgIGlmICh2bC51bC5sZW5ndGggPT09IDApIHtcbiAgICAgIHZsLiRlbC5hcHBlbmQoJzx1bD48L3VsPicpO1xuICAgICAgdmwudWwgPSB2bC4kZWwuY2hpbGRyZW4oJ3VsJyk7XG4gICAgfVxuXG4gICAgVXRpbHMuZXh0ZW5kKHZsLCB7XG4gICAgICAvLyBET00gY2FjaGVkIGl0ZW1zXG4gICAgICBkb21DYWNoZToge30sXG4gICAgICBkaXNwbGF5RG9tQ2FjaGU6IHt9LFxuICAgICAgLy8gVGVtcG9yYXJ5IERPTSBFbGVtZW50XG4gICAgICB0ZW1wRG9tRWxlbWVudDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKSxcbiAgICAgIC8vIExhc3QgcmVwYWluIHBvc2l0aW9uXG4gICAgICBsYXN0UmVwYWludFk6IG51bGwsXG4gICAgICAvLyBGcmFnbWVudFxuICAgICAgZnJhZ21lbnQ6IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcbiAgICAgIC8vIFByb3BzXG4gICAgICBwYWdlSGVpZ2h0OiB1bmRlZmluZWQsXG4gICAgICByb3dzUGVyU2NyZWVuOiB1bmRlZmluZWQsXG4gICAgICByb3dzQmVmb3JlOiB1bmRlZmluZWQsXG4gICAgICByb3dzQWZ0ZXI6IHVuZGVmaW5lZCxcbiAgICAgIHJvd3NUb1JlbmRlcjogdW5kZWZpbmVkLFxuICAgICAgbWF4QnVmZmVySGVpZ2h0OiAwLFxuICAgICAgbGlzdEhlaWdodDogdW5kZWZpbmVkLFxuICAgICAgZHluYW1pY0hlaWdodDogdHlwZW9mIHZsLnBhcmFtcy5oZWlnaHQgPT09ICdmdW5jdGlvbicsXG4gICAgfSk7XG5cbiAgICAvLyBJbnN0YWxsIE1vZHVsZXNcbiAgICB2bC51c2VJbnN0YW5jZU1vZHVsZXMoKTtcblxuICAgIC8vIEF0dGFjaCBldmVudHNcbiAgICBjb25zdCBoYW5kbGVTY3JvbGxCb3VuZCA9IHZsLmhhbmRsZVNjcm9sbC5iaW5kKHZsKTtcbiAgICBjb25zdCBoYW5kbGVSZXNpemVCb3VuZCA9IHZsLmhhbmRsZVJlc2l6ZS5iaW5kKHZsKTtcbiAgICB2bC5hdHRhY2hFdmVudHMgPSBmdW5jdGlvbiBhdHRhY2hFdmVudHMoKSB7XG4gICAgICB2bC4kcGFnZUNvbnRlbnRFbC5vbignc2Nyb2xsJywgaGFuZGxlU2Nyb2xsQm91bmQpO1xuICAgICAgdmwuJGVsLnBhcmVudHMoJy5wYWdlJykuZXEoMCkub24oJ3BhZ2U6cmVpbml0JywgaGFuZGxlUmVzaXplQm91bmQpO1xuICAgICAgdmwuJGVsLnBhcmVudHMoJy50YWInKS5lcSgwKS5vbigndGFiOnNob3cnLCBoYW5kbGVSZXNpemVCb3VuZCk7XG4gICAgICB2bC4kZWwucGFyZW50cygnLnBhbmVsJykuZXEoMCkub24oJ3BhbmVsOm9wZW4nLCBoYW5kbGVSZXNpemVCb3VuZCk7XG4gICAgICB2bC4kZWwucGFyZW50cygnLnBvcHVwJykuZXEoMCkub24oJ3BvcHVwOm9wZW4nLCBoYW5kbGVSZXNpemVCb3VuZCk7XG4gICAgICBhcHAub24oJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZUJvdW5kKTtcbiAgICB9O1xuICAgIHZsLmRldGFjaEV2ZW50cyA9IGZ1bmN0aW9uIGF0dGFjaEV2ZW50cygpIHtcbiAgICAgIHZsLiRwYWdlQ29udGVudEVsLm9mZignc2Nyb2xsJywgaGFuZGxlU2Nyb2xsQm91bmQpO1xuICAgICAgdmwuJGVsLnBhcmVudHMoJy5wYWdlJykuZXEoMCkub2ZmKCdwYWdlOnJlaW5pdCcsIGhhbmRsZVJlc2l6ZUJvdW5kKTtcbiAgICAgIHZsLiRlbC5wYXJlbnRzKCcudGFiJykuZXEoMCkub2ZmKCd0YWI6c2hvdycsIGhhbmRsZVJlc2l6ZUJvdW5kKTtcbiAgICAgIHZsLiRlbC5wYXJlbnRzKCcucGFuZWwnKS5lcSgwKS5vZmYoJ3BhbmVsOm9wZW4nLCBoYW5kbGVSZXNpemVCb3VuZCk7XG4gICAgICB2bC4kZWwucGFyZW50cygnLnBvcHVwJykuZXEoMCkub2ZmKCdwb3B1cDpvcGVuJywgaGFuZGxlUmVzaXplQm91bmQpO1xuICAgICAgYXBwLm9mZigncmVzaXplJywgaGFuZGxlUmVzaXplQm91bmQpO1xuICAgIH07XG4gICAgLy8gSW5pdFxuICAgIHZsLmluaXQoKTtcblxuICAgIHJldHVybiB2bDtcbiAgfVxuICBzZXRMaXN0U2l6ZSgpIHtcbiAgICBjb25zdCB2bCA9IHRoaXM7XG4gICAgY29uc3QgaXRlbXMgPSB2bC5maWx0ZXJlZEl0ZW1zIHx8IHZsLml0ZW1zO1xuICAgIHZsLnBhZ2VIZWlnaHQgPSB2bC4kcGFnZUNvbnRlbnRFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgaWYgKHZsLmR5bmFtaWNIZWlnaHQpIHtcbiAgICAgIHZsLmxpc3RIZWlnaHQgPSAwO1xuICAgICAgdmwuaGVpZ2h0cyA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBpdGVtSGVpZ2h0ID0gdmwucGFyYW1zLmhlaWdodChpdGVtc1tpXSk7XG4gICAgICAgIHZsLmxpc3RIZWlnaHQgKz0gaXRlbUhlaWdodDtcbiAgICAgICAgdmwuaGVpZ2h0cy5wdXNoKGl0ZW1IZWlnaHQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2bC5saXN0SGVpZ2h0ID0gTWF0aC5jZWlsKGl0ZW1zLmxlbmd0aCAvIHZsLnBhcmFtcy5jb2xzKSAqIHZsLnBhcmFtcy5oZWlnaHQ7XG4gICAgICB2bC5yb3dzUGVyU2NyZWVuID0gTWF0aC5jZWlsKHZsLnBhZ2VIZWlnaHQgLyB2bC5wYXJhbXMuaGVpZ2h0KTtcbiAgICAgIHZsLnJvd3NCZWZvcmUgPSB2bC5wYXJhbXMucm93c0JlZm9yZSB8fCB2bC5yb3dzUGVyU2NyZWVuICogMjtcbiAgICAgIHZsLnJvd3NBZnRlciA9IHZsLnBhcmFtcy5yb3dzQWZ0ZXIgfHwgdmwucm93c1BlclNjcmVlbjtcbiAgICAgIHZsLnJvd3NUb1JlbmRlciA9ICh2bC5yb3dzUGVyU2NyZWVuICsgdmwucm93c0JlZm9yZSArIHZsLnJvd3NBZnRlcik7XG4gICAgICB2bC5tYXhCdWZmZXJIZWlnaHQgPSAodmwucm93c0JlZm9yZSAvIDIpICogdmwucGFyYW1zLmhlaWdodDtcbiAgICB9XG5cbiAgICBpZiAodmwudXBkYXRhYmxlU2Nyb2xsIHx8IHZsLnBhcmFtcy5zZXRMaXN0SGVpZ2h0KSB7XG4gICAgICB2bC51bC5jc3MoeyBoZWlnaHQ6IGAke3ZsLmxpc3RIZWlnaHR9cHhgIH0pO1xuICAgIH1cbiAgfVxuICByZW5kZXIoZm9yY2UsIGZvcmNlU2Nyb2xsVG9wKSB7XG4gICAgY29uc3QgdmwgPSB0aGlzO1xuICAgIGlmIChmb3JjZSkgdmwubGFzdFJlcGFpbnRZID0gbnVsbDtcblxuICAgIGxldCBzY3JvbGxUb3AgPSAtKHZsLiRlbFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgLSB2bC4kcGFnZUNvbnRlbnRFbFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3ApO1xuXG4gICAgaWYgKHR5cGVvZiBmb3JjZVNjcm9sbFRvcCAhPT0gJ3VuZGVmaW5lZCcpIHNjcm9sbFRvcCA9IGZvcmNlU2Nyb2xsVG9wO1xuICAgIGlmICh2bC5sYXN0UmVwYWludFkgPT09IG51bGwgfHwgTWF0aC5hYnMoc2Nyb2xsVG9wIC0gdmwubGFzdFJlcGFpbnRZKSA+IHZsLm1heEJ1ZmZlckhlaWdodCB8fCAoIXZsLnVwZGF0YWJsZVNjcm9sbCAmJiAodmwuJHBhZ2VDb250ZW50RWxbMF0uc2Nyb2xsVG9wICsgdmwucGFnZUhlaWdodCA+PSB2bC4kcGFnZUNvbnRlbnRFbFswXS5zY3JvbGxIZWlnaHQpKSkge1xuICAgICAgdmwubGFzdFJlcGFpbnRZID0gc2Nyb2xsVG9wO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaXRlbXMgPSB2bC5maWx0ZXJlZEl0ZW1zIHx8IHZsLml0ZW1zO1xuICAgIGxldCBmcm9tSW5kZXg7XG4gICAgbGV0IHRvSW5kZXg7XG4gICAgbGV0IGhlaWdodEJlZm9yZUZpcnN0SXRlbSA9IDA7XG4gICAgbGV0IGhlaWdodEJlZm9yZUxhc3RJdGVtID0gMDtcbiAgICBpZiAodmwuZHluYW1pY0hlaWdodCkge1xuICAgICAgbGV0IGl0ZW1Ub3AgPSAwO1xuICAgICAgbGV0IGl0ZW1IZWlnaHQ7XG4gICAgICB2bC5tYXhCdWZmZXJIZWlnaHQgPSB2bC5wYWdlSGVpZ2h0O1xuXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHZsLmhlaWdodHMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgaXRlbUhlaWdodCA9IHZsLmhlaWdodHNbal07XG4gICAgICAgIGlmICh0eXBlb2YgZnJvbUluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGlmIChpdGVtVG9wICsgaXRlbUhlaWdodCA+PSBzY3JvbGxUb3AgLSAodmwucGFnZUhlaWdodCAqIDIgKiB2bC5wYXJhbXMuZHluYW1pY0hlaWdodEJ1ZmZlclNpemUpKSBmcm9tSW5kZXggPSBqO1xuICAgICAgICAgIGVsc2UgaGVpZ2h0QmVmb3JlRmlyc3RJdGVtICs9IGl0ZW1IZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHRvSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgaWYgKGl0ZW1Ub3AgKyBpdGVtSGVpZ2h0ID49IHNjcm9sbFRvcCArICh2bC5wYWdlSGVpZ2h0ICogMiAqIHZsLnBhcmFtcy5keW5hbWljSGVpZ2h0QnVmZmVyU2l6ZSkgfHwgaiA9PT0gdmwuaGVpZ2h0cy5sZW5ndGggLSAxKSB0b0luZGV4ID0gaiArIDE7XG4gICAgICAgICAgaGVpZ2h0QmVmb3JlTGFzdEl0ZW0gKz0gaXRlbUhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBpdGVtVG9wICs9IGl0ZW1IZWlnaHQ7XG4gICAgICB9XG4gICAgICB0b0luZGV4ID0gTWF0aC5taW4odG9JbmRleCwgaXRlbXMubGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZnJvbUluZGV4ID0gKHBhcnNlSW50KHNjcm9sbFRvcCAvIHZsLnBhcmFtcy5oZWlnaHQsIDEwKSAtIHZsLnJvd3NCZWZvcmUpICogdmwucGFyYW1zLmNvbHM7XG4gICAgICBpZiAoZnJvbUluZGV4IDwgMCkge1xuICAgICAgICBmcm9tSW5kZXggPSAwO1xuICAgICAgfVxuICAgICAgdG9JbmRleCA9IE1hdGgubWluKGZyb21JbmRleCArICh2bC5yb3dzVG9SZW5kZXIgKiB2bC5wYXJhbXMuY29scyksIGl0ZW1zLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgbGV0IHRvcFBvc2l0aW9uO1xuICAgIGNvbnN0IHJlbmRlckV4dGVybmFsSXRlbXMgPSBbXTtcbiAgICB2bC5yZWFjaEVuZCA9IGZhbHNlO1xuICAgIGxldCBpO1xuICAgIGZvciAoaSA9IGZyb21JbmRleDsgaSA8IHRvSW5kZXg7IGkgKz0gMSkge1xuICAgICAgbGV0IGl0ZW1FbDtcbiAgICAgIC8vIERlZmluZSByZWFsIGl0ZW0gaW5kZXhcbiAgICAgIGNvbnN0IGluZGV4ID0gdmwuaXRlbXMuaW5kZXhPZihpdGVtc1tpXSk7XG5cbiAgICAgIGlmIChpID09PSBmcm9tSW5kZXgpIHZsLmN1cnJlbnRGcm9tSW5kZXggPSBpbmRleDtcbiAgICAgIGlmIChpID09PSB0b0luZGV4IC0gMSkgdmwuY3VycmVudFRvSW5kZXggPSBpbmRleDtcbiAgICAgIGlmICh2bC5maWx0ZXJlZEl0ZW1zKSB7XG4gICAgICAgIGlmICh2bC5pdGVtc1tpbmRleF0gPT09IHZsLmZpbHRlcmVkSXRlbXNbdmwuZmlsdGVyZWRJdGVtcy5sZW5ndGggLSAxXSkgdmwucmVhY2hFbmQgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChpbmRleCA9PT0gdmwuaXRlbXMubGVuZ3RoIC0gMSkgdmwucmVhY2hFbmQgPSB0cnVlO1xuXG4gICAgICAvLyBGaW5kIGl0ZW1zXG4gICAgICBpZiAodmwucGFyYW1zLnJlbmRlckV4dGVybmFsKSB7XG4gICAgICAgIHJlbmRlckV4dGVybmFsSXRlbXMucHVzaChpdGVtc1tpXSk7XG4gICAgICB9IGVsc2UgaWYgKHZsLmRvbUNhY2hlW2luZGV4XSkge1xuICAgICAgICBpdGVtRWwgPSB2bC5kb21DYWNoZVtpbmRleF07XG4gICAgICAgIGl0ZW1FbC5mN1ZpcnR1YWxMaXN0SW5kZXggPSBpbmRleDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh2bC5pdGVtVGVtcGxhdGUgJiYgIXZsLnBhcmFtcy5yZW5kZXJJdGVtKSB7XG4gICAgICAgICAgdmwudGVtcERvbUVsZW1lbnQuaW5uZXJIVE1MID0gdmwuaXRlbVRlbXBsYXRlKGl0ZW1zW2ldLCB7IGluZGV4IH0pLnRyaW0oKTtcbiAgICAgICAgfSBlbHNlIGlmICh2bC5wYXJhbXMucmVuZGVySXRlbSkge1xuICAgICAgICAgIHZsLnRlbXBEb21FbGVtZW50LmlubmVySFRNTCA9IHZsLnBhcmFtcy5yZW5kZXJJdGVtLmNhbGwodmwsIGl0ZW1zW2ldLCBpbmRleCkudHJpbSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZsLnRlbXBEb21FbGVtZW50LmlubmVySFRNTCA9IGl0ZW1zW2ldLnRvU3RyaW5nKCkudHJpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGl0ZW1FbCA9IHZsLnRlbXBEb21FbGVtZW50LmNoaWxkTm9kZXNbMF07XG4gICAgICAgIGlmICh2bC5wYXJhbXMuY2FjaGUpIHZsLmRvbUNhY2hlW2luZGV4XSA9IGl0ZW1FbDtcbiAgICAgICAgaXRlbUVsLmY3VmlydHVhbExpc3RJbmRleCA9IGluZGV4O1xuICAgICAgfVxuXG4gICAgICAvLyBTZXQgaXRlbSB0b3AgcG9zaXRpb25cbiAgICAgIGlmIChpID09PSBmcm9tSW5kZXgpIHtcbiAgICAgICAgaWYgKHZsLmR5bmFtaWNIZWlnaHQpIHtcbiAgICAgICAgICB0b3BQb3NpdGlvbiA9IGhlaWdodEJlZm9yZUZpcnN0SXRlbTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0b3BQb3NpdGlvbiA9ICgoaSAqIHZsLnBhcmFtcy5oZWlnaHQpIC8gdmwucGFyYW1zLmNvbHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIXZsLnBhcmFtcy5yZW5kZXJFeHRlcm5hbCkge1xuICAgICAgICBpdGVtRWwuc3R5bGUudG9wID0gYCR7dG9wUG9zaXRpb259cHhgO1xuXG4gICAgICAgIC8vIEJlZm9yZSBpdGVtIGluc2VydFxuICAgICAgICB2bC5lbWl0KHtcbiAgICAgICAgICBldmVudHM6ICdpdGVtQmVmb3JlSW5zZXJ0JyxcbiAgICAgICAgICBkYXRhOiBbaXRlbUVsLCBpdGVtc1tpXV0sXG4gICAgICAgICAgcGFyZW50czogW10sXG4gICAgICAgIH0pO1xuICAgICAgICB2bC5lbWl0KCd2bEl0ZW1CZWZvcmVJbnNlcnQnLCB2bCwgaXRlbUVsLCBpdGVtc1tpXSk7XG5cbiAgICAgICAgLy8gQXBwZW5kIGl0ZW0gdG8gZnJhZ21lbnRcbiAgICAgICAgdmwuZnJhZ21lbnQuYXBwZW5kQ2hpbGQoaXRlbUVsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgbGlzdCBoZWlnaHQgd2l0aCBub3QgdXBkYXRhYmxlIHNjcm9sbFxuICAgIGlmICghdmwudXBkYXRhYmxlU2Nyb2xsKSB7XG4gICAgICBpZiAodmwuZHluYW1pY0hlaWdodCkge1xuICAgICAgICB2bC51bFswXS5zdHlsZS5oZWlnaHQgPSBgJHtoZWlnaHRCZWZvcmVMYXN0SXRlbX1weGA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bC51bFswXS5zdHlsZS5oZWlnaHQgPSBgJHsoaSAqIHZsLnBhcmFtcy5oZWlnaHQpIC8gdmwucGFyYW1zLmNvbHN9cHhgO1xuICAgICAgfVxuICAgIH1cblxuICAgICAgLy8gVXBkYXRlIGxpc3QgaHRtbFxuICAgIGlmICh2bC5wYXJhbXMucmVuZGVyRXh0ZXJuYWwpIHtcbiAgICAgIGlmIChpdGVtcyAmJiBpdGVtcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmwucmVhY2hFbmQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2bC5lbWl0KHtcbiAgICAgICAgZXZlbnRzOiAnYmVmb3JlQ2xlYXInLFxuICAgICAgICBkYXRhOiBbdmwuZnJhZ21lbnRdLFxuICAgICAgICBwYXJlbnRzOiBbXSxcbiAgICAgIH0pO1xuICAgICAgdmwuZW1pdCgndmxCZWZvcmVDbGVhcicsIHZsLCB2bC5mcmFnbWVudCk7XG4gICAgICB2bC51bFswXS5pbm5lckhUTUwgPSAnJztcblxuICAgICAgdmwuZW1pdCh7XG4gICAgICAgIGV2ZW50czogJ2l0ZW1zQmVmb3JlSW5zZXJ0JyxcbiAgICAgICAgZGF0YTogW3ZsLmZyYWdtZW50XSxcbiAgICAgICAgcGFyZW50czogW10sXG4gICAgICB9KTtcbiAgICAgIHZsLmVtaXQoJ3ZsSXRlbXNCZWZvcmVJbnNlcnQnLCB2bCwgdmwuZnJhZ21lbnQpO1xuXG4gICAgICBpZiAoaXRlbXMgJiYgaXRlbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZsLnJlYWNoRW5kID0gdHJ1ZTtcbiAgICAgICAgaWYgKHZsLnBhcmFtcy5lbXB0eVRlbXBsYXRlKSB2bC51bFswXS5pbm5lckhUTUwgPSB2bC5wYXJhbXMuZW1wdHlUZW1wbGF0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZsLnVsWzBdLmFwcGVuZENoaWxkKHZsLmZyYWdtZW50KTtcbiAgICAgIH1cblxuICAgICAgdmwuZW1pdCh7XG4gICAgICAgIGV2ZW50czogJ2l0ZW1zQWZ0ZXJJbnNlcnQnLFxuICAgICAgICBkYXRhOiBbdmwuZnJhZ21lbnRdLFxuICAgICAgICBwYXJlbnRzOiBbXSxcbiAgICAgIH0pO1xuICAgICAgdmwuZW1pdCgndmxJdGVtc0FmdGVySW5zZXJ0JywgdmwsIHZsLmZyYWdtZW50KTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGZvcmNlU2Nyb2xsVG9wICE9PSAndW5kZWZpbmVkJyAmJiBmb3JjZSkge1xuICAgICAgdmwuJHBhZ2VDb250ZW50RWwuc2Nyb2xsVG9wKGZvcmNlU2Nyb2xsVG9wLCAwKTtcbiAgICB9XG4gICAgaWYgKHZsLnBhcmFtcy5yZW5kZXJFeHRlcm5hbCkge1xuICAgICAgdmwucGFyYW1zLnJlbmRlckV4dGVybmFsKHZsLCB7XG4gICAgICAgIGZyb21JbmRleCxcbiAgICAgICAgdG9JbmRleCxcbiAgICAgICAgbGlzdEhlaWdodDogdmwubGlzdEhlaWdodCxcbiAgICAgICAgdG9wUG9zaXRpb24sXG4gICAgICAgIGl0ZW1zOiByZW5kZXJFeHRlcm5hbEl0ZW1zLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIC8vIEZpbHRlclxuICBmaWx0ZXJJdGVtcyhpbmRleGVzLCByZXNldFNjcm9sbFRvcCA9IHRydWUpIHtcbiAgICBjb25zdCB2bCA9IHRoaXM7XG4gICAgdmwuZmlsdGVyZWRJdGVtcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5kZXhlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmwuZmlsdGVyZWRJdGVtcy5wdXNoKHZsLml0ZW1zW2luZGV4ZXNbaV1dKTtcbiAgICB9XG4gICAgaWYgKHJlc2V0U2Nyb2xsVG9wKSB7XG4gICAgICB2bC4kcGFnZUNvbnRlbnRFbFswXS5zY3JvbGxUb3AgPSAwO1xuICAgIH1cbiAgICB2bC51cGRhdGUoKTtcbiAgfVxuICByZXNldEZpbHRlcigpIHtcbiAgICBjb25zdCB2bCA9IHRoaXM7XG4gICAgaWYgKHZsLnBhcmFtcy5zaG93RmlsdGVyZWRJdGVtc09ubHkpIHtcbiAgICAgIHZsLmZpbHRlcmVkSXRlbXMgPSBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmwuZmlsdGVyZWRJdGVtcyA9IG51bGw7XG4gICAgICBkZWxldGUgdmwuZmlsdGVyZWRJdGVtcztcbiAgICB9XG4gICAgdmwudXBkYXRlKCk7XG4gIH1cbiAgc2Nyb2xsVG9JdGVtKGluZGV4KSB7XG4gICAgY29uc3QgdmwgPSB0aGlzO1xuICAgIGlmIChpbmRleCA+IHZsLml0ZW1zLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgIGxldCBpdGVtVG9wID0gMDtcbiAgICBpZiAodmwuZHluYW1pY0hlaWdodCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmRleDsgaSArPSAxKSB7XG4gICAgICAgIGl0ZW1Ub3AgKz0gdmwuaGVpZ2h0c1tpXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaXRlbVRvcCA9IGluZGV4ICogdmwucGFyYW1zLmhlaWdodDtcbiAgICB9XG4gICAgY29uc3QgbGlzdFRvcCA9IHZsLiRlbFswXS5vZmZzZXRUb3A7XG4gICAgdmwucmVuZGVyKHRydWUsIChsaXN0VG9wICsgaXRlbVRvcCkgLSBwYXJzZUludCh2bC4kcGFnZUNvbnRlbnRFbC5jc3MoJ3BhZGRpbmctdG9wJyksIDEwKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaGFuZGxlU2Nyb2xsKCkge1xuICAgIGNvbnN0IHZsID0gdGhpcztcbiAgICB2bC5yZW5kZXIoKTtcbiAgfVxuICAvLyBIYW5kbGUgcmVzaXplIGV2ZW50XG4gIGlzVmlzaWJsZSgpIHtcbiAgICBjb25zdCB2bCA9IHRoaXM7XG4gICAgcmV0dXJuICEhKHZsLmVsLm9mZnNldFdpZHRoIHx8IHZsLmVsLm9mZnNldEhlaWdodCB8fCB2bC5lbC5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCk7XG4gIH1cbiAgaGFuZGxlUmVzaXplKCkge1xuICAgIGNvbnN0IHZsID0gdGhpcztcbiAgICBpZiAodmwuaXNWaXNpYmxlKCkpIHtcbiAgICAgIHZsLnNldExpc3RTaXplKCk7XG4gICAgICB2bC5yZW5kZXIodHJ1ZSk7XG4gICAgfVxuICB9XG4gIC8vIEFwcGVuZFxuICBhcHBlbmRJdGVtcyhpdGVtcykge1xuICAgIGNvbnN0IHZsID0gdGhpcztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2bC5pdGVtcy5wdXNoKGl0ZW1zW2ldKTtcbiAgICB9XG4gICAgdmwudXBkYXRlKCk7XG4gIH1cbiAgYXBwZW5kSXRlbShpdGVtKSB7XG4gICAgY29uc3QgdmwgPSB0aGlzO1xuICAgIHZsLmFwcGVuZEl0ZW1zKFtpdGVtXSk7XG4gIH1cbiAgLy8gUmVwbGFjZVxuICByZXBsYWNlQWxsSXRlbXMoaXRlbXMpIHtcbiAgICBjb25zdCB2bCA9IHRoaXM7XG4gICAgdmwuaXRlbXMgPSBpdGVtcztcbiAgICBkZWxldGUgdmwuZmlsdGVyZWRJdGVtcztcbiAgICB2bC5kb21DYWNoZSA9IHt9O1xuICAgIHZsLnVwZGF0ZSgpO1xuICB9XG4gIHJlcGxhY2VJdGVtKGluZGV4LCBpdGVtKSB7XG4gICAgY29uc3QgdmwgPSB0aGlzO1xuICAgIHZsLml0ZW1zW2luZGV4XSA9IGl0ZW07XG4gICAgaWYgKHZsLnBhcmFtcy5jYWNoZSkgZGVsZXRlIHZsLmRvbUNhY2hlW2luZGV4XTtcbiAgICB2bC51cGRhdGUoKTtcbiAgfVxuICAvLyBQcmVwZW5kXG4gIHByZXBlbmRJdGVtcyhpdGVtcykge1xuICAgIGNvbnN0IHZsID0gdGhpcztcbiAgICBmb3IgKGxldCBpID0gaXRlbXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgIHZsLml0ZW1zLnVuc2hpZnQoaXRlbXNbaV0pO1xuICAgIH1cbiAgICBpZiAodmwucGFyYW1zLmNhY2hlKSB7XG4gICAgICBjb25zdCBuZXdDYWNoZSA9IHt9O1xuICAgICAgT2JqZWN0LmtleXModmwuZG9tQ2FjaGUpLmZvckVhY2goKGNhY2hlZCkgPT4ge1xuICAgICAgICBuZXdDYWNoZVtwYXJzZUludChjYWNoZWQsIDEwKSArIGl0ZW1zLmxlbmd0aF0gPSB2bC5kb21DYWNoZVtjYWNoZWRdO1xuICAgICAgfSk7XG4gICAgICB2bC5kb21DYWNoZSA9IG5ld0NhY2hlO1xuICAgIH1cbiAgICB2bC51cGRhdGUoKTtcbiAgfVxuICBwcmVwZW5kSXRlbShpdGVtKSB7XG4gICAgY29uc3QgdmwgPSB0aGlzO1xuICAgIHZsLnByZXBlbmRJdGVtcyhbaXRlbV0pO1xuICB9XG5cbiAgLy8gTW92ZVxuICBtb3ZlSXRlbShmcm9tLCB0bykge1xuICAgIGNvbnN0IHZsID0gdGhpcztcbiAgICBjb25zdCBmcm9tSW5kZXggPSBmcm9tO1xuICAgIGxldCB0b0luZGV4ID0gdG87XG4gICAgaWYgKGZyb21JbmRleCA9PT0gdG9JbmRleCkgcmV0dXJuO1xuICAgICAgLy8gcmVtb3ZlIGl0ZW0gZnJvbSBhcnJheVxuICAgIGNvbnN0IGl0ZW0gPSB2bC5pdGVtcy5zcGxpY2UoZnJvbUluZGV4LCAxKVswXTtcbiAgICBpZiAodG9JbmRleCA+PSB2bC5pdGVtcy5sZW5ndGgpIHtcbiAgICAgIC8vIEFkZCBpdGVtIHRvIHRoZSBlbmRcbiAgICAgIHZsLml0ZW1zLnB1c2goaXRlbSk7XG4gICAgICB0b0luZGV4ID0gdmwuaXRlbXMubGVuZ3RoIC0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQWRkIGl0ZW0gdG8gbmV3IGluZGV4XG4gICAgICB2bC5pdGVtcy5zcGxpY2UodG9JbmRleCwgMCwgaXRlbSk7XG4gICAgfVxuICAgICAgLy8gVXBkYXRlIGNhY2hlXG4gICAgaWYgKHZsLnBhcmFtcy5jYWNoZSkge1xuICAgICAgY29uc3QgbmV3Q2FjaGUgPSB7fTtcbiAgICAgIE9iamVjdC5rZXlzKHZsLmRvbUNhY2hlKS5mb3JFYWNoKChjYWNoZWQpID0+IHtcbiAgICAgICAgY29uc3QgY2FjaGVkSW5kZXggPSBwYXJzZUludChjYWNoZWQsIDEwKTtcbiAgICAgICAgY29uc3QgbGVmdEluZGV4ID0gZnJvbUluZGV4IDwgdG9JbmRleCA/IGZyb21JbmRleCA6IHRvSW5kZXg7XG4gICAgICAgIGNvbnN0IHJpZ2h0SW5kZXggPSBmcm9tSW5kZXggPCB0b0luZGV4ID8gdG9JbmRleCA6IGZyb21JbmRleDtcbiAgICAgICAgY29uc3QgaW5kZXhTaGlmdCA9IGZyb21JbmRleCA8IHRvSW5kZXggPyAtMSA6IDE7XG4gICAgICAgIGlmIChjYWNoZWRJbmRleCA8IGxlZnRJbmRleCB8fCBjYWNoZWRJbmRleCA+IHJpZ2h0SW5kZXgpIG5ld0NhY2hlW2NhY2hlZEluZGV4XSA9IHZsLmRvbUNhY2hlW2NhY2hlZEluZGV4XTtcbiAgICAgICAgaWYgKGNhY2hlZEluZGV4ID09PSBsZWZ0SW5kZXgpIG5ld0NhY2hlW3JpZ2h0SW5kZXhdID0gdmwuZG9tQ2FjaGVbY2FjaGVkSW5kZXhdO1xuICAgICAgICBpZiAoY2FjaGVkSW5kZXggPiBsZWZ0SW5kZXggJiYgY2FjaGVkSW5kZXggPD0gcmlnaHRJbmRleCkgbmV3Q2FjaGVbY2FjaGVkSW5kZXggKyBpbmRleFNoaWZ0XSA9IHZsLmRvbUNhY2hlW2NhY2hlZEluZGV4XTtcbiAgICAgIH0pO1xuICAgICAgdmwuZG9tQ2FjaGUgPSBuZXdDYWNoZTtcbiAgICB9XG4gICAgdmwudXBkYXRlKCk7XG4gIH1cbiAgLy8gSW5zZXJ0IGJlZm9yZVxuICBpbnNlcnRJdGVtQmVmb3JlKGluZGV4LCBpdGVtKSB7XG4gICAgY29uc3QgdmwgPSB0aGlzO1xuICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgdmwucHJlcGVuZEl0ZW0oaXRlbSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpbmRleCA+PSB2bC5pdGVtcy5sZW5ndGgpIHtcbiAgICAgIHZsLmFwcGVuZEl0ZW0oaXRlbSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZsLml0ZW1zLnNwbGljZShpbmRleCwgMCwgaXRlbSk7XG4gICAgICAvLyBVcGRhdGUgY2FjaGVcbiAgICBpZiAodmwucGFyYW1zLmNhY2hlKSB7XG4gICAgICBjb25zdCBuZXdDYWNoZSA9IHt9O1xuICAgICAgT2JqZWN0LmtleXModmwuZG9tQ2FjaGUpLmZvckVhY2goKGNhY2hlZCkgPT4ge1xuICAgICAgICBjb25zdCBjYWNoZWRJbmRleCA9IHBhcnNlSW50KGNhY2hlZCwgMTApO1xuICAgICAgICBpZiAoY2FjaGVkSW5kZXggPj0gaW5kZXgpIHtcbiAgICAgICAgICBuZXdDYWNoZVtjYWNoZWRJbmRleCArIDFdID0gdmwuZG9tQ2FjaGVbY2FjaGVkSW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHZsLmRvbUNhY2hlID0gbmV3Q2FjaGU7XG4gICAgfVxuICAgIHZsLnVwZGF0ZSgpO1xuICB9XG4gIC8vIERlbGV0ZVxuICBkZWxldGVJdGVtcyhpbmRleGVzKSB7XG4gICAgY29uc3QgdmwgPSB0aGlzO1xuICAgIGxldCBwcmV2SW5kZXg7XG4gICAgbGV0IGluZGV4U2hpZnQgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5kZXhlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgbGV0IGluZGV4ID0gaW5kZXhlc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgcHJldkluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAoaW5kZXggPiBwcmV2SW5kZXgpIHtcbiAgICAgICAgICBpbmRleFNoaWZ0ID0gLWk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGluZGV4ICs9IGluZGV4U2hpZnQ7XG4gICAgICBwcmV2SW5kZXggPSBpbmRleGVzW2ldO1xuICAgICAgLy8gRGVsZXRlIGl0ZW1cbiAgICAgIGNvbnN0IGRlbGV0ZWRJdGVtID0gdmwuaXRlbXMuc3BsaWNlKGluZGV4LCAxKVswXTtcblxuICAgICAgLy8gRGVsZXRlIGZyb20gZmlsdGVyZWRcbiAgICAgIGlmICh2bC5maWx0ZXJlZEl0ZW1zICYmIHZsLmZpbHRlcmVkSXRlbXMuaW5kZXhPZihkZWxldGVkSXRlbSkgPj0gMCkge1xuICAgICAgICB2bC5maWx0ZXJlZEl0ZW1zLnNwbGljZSh2bC5maWx0ZXJlZEl0ZW1zLmluZGV4T2YoZGVsZXRlZEl0ZW0pLCAxKTtcbiAgICAgIH1cbiAgICAgIC8vIFVwZGF0ZSBjYWNoZVxuICAgICAgaWYgKHZsLnBhcmFtcy5jYWNoZSkge1xuICAgICAgICBjb25zdCBuZXdDYWNoZSA9IHt9O1xuICAgICAgICBPYmplY3Qua2V5cyh2bC5kb21DYWNoZSkuZm9yRWFjaCgoY2FjaGVkKSA9PiB7XG4gICAgICAgICAgY29uc3QgY2FjaGVkSW5kZXggPSBwYXJzZUludChjYWNoZWQsIDEwKTtcbiAgICAgICAgICBpZiAoY2FjaGVkSW5kZXggPT09IGluZGV4KSB7XG4gICAgICAgICAgICBkZWxldGUgdmwuZG9tQ2FjaGVbaW5kZXhdO1xuICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VJbnQoY2FjaGVkLCAxMCkgPiBpbmRleCkge1xuICAgICAgICAgICAgbmV3Q2FjaGVbY2FjaGVkSW5kZXggLSAxXSA9IHZsLmRvbUNhY2hlW2NhY2hlZF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld0NhY2hlW2NhY2hlZEluZGV4XSA9IHZsLmRvbUNhY2hlW2NhY2hlZF07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdmwuZG9tQ2FjaGUgPSBuZXdDYWNoZTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmwudXBkYXRlKCk7XG4gIH1cbiAgZGVsZXRlQWxsSXRlbXMoKSB7XG4gICAgY29uc3QgdmwgPSB0aGlzO1xuICAgIHZsLml0ZW1zID0gW107XG4gICAgZGVsZXRlIHZsLmZpbHRlcmVkSXRlbXM7XG4gICAgaWYgKHZsLnBhcmFtcy5jYWNoZSkgdmwuZG9tQ2FjaGUgPSB7fTtcbiAgICB2bC51cGRhdGUoKTtcbiAgfVxuICBkZWxldGVJdGVtKGluZGV4KSB7XG4gICAgY29uc3QgdmwgPSB0aGlzO1xuICAgIHZsLmRlbGV0ZUl0ZW1zKFtpbmRleF0pO1xuICB9XG4gIC8vIENsZWFyIGNhY2hlXG4gIGNsZWFyQ2FjaGVmdW5jdGlvbigpIHtcbiAgICBjb25zdCB2bCA9IHRoaXM7XG4gICAgdmwuZG9tQ2FjaGUgPSB7fTtcbiAgfVxuICAvLyBVcGRhdGUgVmlydHVhbCBMaXN0XG4gIHVwZGF0ZSgpIHtcbiAgICBjb25zdCB2bCA9IHRoaXM7XG4gICAgdmwuc2V0TGlzdFNpemUoKTtcbiAgICB2bC5yZW5kZXIodHJ1ZSk7XG4gIH1cbiAgaW5pdCgpIHtcbiAgICBjb25zdCB2bCA9IHRoaXM7XG4gICAgdmwuYXR0YWNoRXZlbnRzKCk7XG4gICAgdmwuc2V0TGlzdFNpemUoKTtcbiAgICB2bC5yZW5kZXIoKTtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIGxldCB2bCA9IHRoaXM7XG4gICAgdmwuZGV0YWNoRXZlbnRzKCk7XG4gICAgdmwuJGVsWzBdLmY3VmlydHVhbExpc3QgPSBudWxsO1xuICAgIGRlbGV0ZSB2bC4kZWxbMF0uZjdWaXJ0dWFsTGlzdDtcbiAgICBVdGlscy5kZWxldGVQcm9wcyh2bCk7XG4gICAgdmwgPSBudWxsO1xuICB9XG59XG5cbnZhciB2aXJ0dWFsTGlzdCA9IHtcbiAgbmFtZTogJ3ZpcnR1YWxMaXN0JyxcbiAgc3RhdGljOiB7XG4gICAgVmlydHVhbExpc3QsXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIGFwcC52aXJ0dWFsTGlzdCA9IENvbnN0cnVjdG9yTWV0aG9kcyh7XG4gICAgICBkZWZhdWx0U2VsZWN0b3I6ICcudmlydHVhbC1saXN0JyxcbiAgICAgIGNvbnN0cnVjdG9yOiBWaXJ0dWFsTGlzdCxcbiAgICAgIGFwcCxcbiAgICAgIGRvbVByb3A6ICdmN1ZpcnR1YWxMaXN0JyxcbiAgICB9KTtcbiAgfSxcbn07XG5cbnZhciB0aW1lbGluZSA9IHtcbiAgbmFtZTogJ3RpbWVsaW5lJyxcbn07XG5cbmNvbnN0IFRhYiA9IHtcbiAgc2hvdyguLi5hcmdzKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBsZXQgW3RhYiwgdGFiTGluaywgYW5pbWF0ZSwgdGFiUm91dGVdID0gYXJncztcbiAgICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdib29sZWFuJykge1xuICAgICAgW3RhYiwgYW5pbWF0ZSwgdGFiTGluaywgdGFiUm91dGVdID0gYXJncztcbiAgICAgIGlmIChhcmdzLmxlbmd0aCA+IDIgJiYgdGFiTGluay5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICAgIFt0YWIsIGFuaW1hdGUsIHRhYlJvdXRlLCB0YWJMaW5rXSA9IGFyZ3M7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYW5pbWF0ZSA9PT0gJ3VuZGVmaW5lZCcpIGFuaW1hdGUgPSB0cnVlO1xuXG4gICAgY29uc3QgJG5ld1RhYkVsID0gJCh0YWIpO1xuXG4gICAgaWYgKCRuZXdUYWJFbC5sZW5ndGggPT09IDAgfHwgJG5ld1RhYkVsLmhhc0NsYXNzKCd0YWItYWN0aXZlJykpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICRuZXdUYWJFbCxcbiAgICAgICAgbmV3VGFiRWw6ICRuZXdUYWJFbFswXSxcbiAgICAgIH07XG4gICAgfVxuXG5cbiAgICBsZXQgJHRhYkxpbmtFbDtcbiAgICBpZiAodGFiTGluaykgJHRhYkxpbmtFbCA9ICQodGFiTGluayk7XG5cbiAgICBjb25zdCAkdGFic0VsID0gJG5ld1RhYkVsLnBhcmVudCgnLnRhYnMnKTtcbiAgICBpZiAoJHRhYnNFbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICRuZXdUYWJFbCxcbiAgICAgICAgbmV3VGFiRWw6ICRuZXdUYWJFbFswXSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gUmVsZWFzZSBzd2lwZW91dHMgaW4gaGlkZGVuIHRhYnNcbiAgICBpZiAoYXBwLnN3aXBlb3V0KSBhcHAuc3dpcGVvdXQuYWxsb3dPcGVuID0gdHJ1ZTtcblxuICAgIC8vIEFuaW1hdGVkIHRhYnNcbiAgICBjb25zdCBpc0FuaW1hdGVkVGFicyA9ICR0YWJzRWwucGFyZW50KCkuaGFzQ2xhc3MoJ3RhYnMtYW5pbWF0ZWQtd3JhcCcpO1xuICAgIGlmIChpc0FuaW1hdGVkVGFicykge1xuICAgICAgJHRhYnNFbC5wYXJlbnQoKVthbmltYXRlID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKCdub3QtYW5pbWF0ZWQnKTtcbiAgICAgIGNvbnN0IHRhYnNUcmFuc2xhdGUgPSAoYXBwLnJ0bCA/ICRuZXdUYWJFbC5pbmRleCgpIDogLSRuZXdUYWJFbC5pbmRleCgpKSAqIDEwMDtcbiAgICAgICR0YWJzRWwudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke3RhYnNUcmFuc2xhdGV9JSwwLDApYCk7XG4gICAgfVxuXG4gICAgLy8gU3dpcGVhYmxlIHRhYnNcbiAgICBjb25zdCBpc1N3aXBlYWJsZVRhYnMgPSAkdGFic0VsLnBhcmVudCgpLmhhc0NsYXNzKCd0YWJzLXN3aXBlYWJsZS13cmFwJyk7XG4gICAgbGV0IHN3aXBlcjtcbiAgICBpZiAoaXNTd2lwZWFibGVUYWJzICYmIGFwcC5zd2lwZXIpIHtcbiAgICAgIHN3aXBlciA9ICR0YWJzRWwucGFyZW50KClbMF0uc3dpcGVyO1xuICAgICAgaWYgKHN3aXBlci5hY3RpdmVJbmRleCAhPT0gJG5ld1RhYkVsLmluZGV4KCkpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oJG5ld1RhYkVsLmluZGV4KCksIGFuaW1hdGUgPyB1bmRlZmluZWQgOiAwLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGFjdGl2ZSBjbGFzcyBmcm9tIG9sZCB0YWJzXG4gICAgY29uc3QgJG9sZFRhYkVsID0gJHRhYnNFbC5jaGlsZHJlbignLnRhYi1hY3RpdmUnKTtcbiAgICAkb2xkVGFiRWxcbiAgICAgIC5yZW1vdmVDbGFzcygndGFiLWFjdGl2ZScpXG4gICAgICAudHJpZ2dlcigndGFiOmhpZGUnKTtcbiAgICBhcHAuZW1pdCgndGFiSGlkZScsICRvbGRUYWJFbFswXSk7XG5cbiAgICAvLyBUcmlnZ2VyICdzaG93JyBldmVudCBvbiBuZXcgdGFiXG4gICAgJG5ld1RhYkVsXG4gICAgICAuYWRkQ2xhc3MoJ3RhYi1hY3RpdmUnKVxuICAgICAgLnRyaWdnZXIoJ3RhYjpzaG93Jyk7XG4gICAgYXBwLmVtaXQoJ3RhYlNob3cnLCAkbmV3VGFiRWxbMF0pO1xuXG4gICAgLy8gRmluZCByZWxhdGVkIGxpbmsgZm9yIG5ldyB0YWJcbiAgICBpZiAoISR0YWJMaW5rRWwpIHtcbiAgICAgIC8vIFNlYXJjaCBieSBpZFxuICAgICAgaWYgKHR5cGVvZiB0YWIgPT09ICdzdHJpbmcnKSAkdGFiTGlua0VsID0gJChgLnRhYi1saW5rW2hyZWY9XCIke3RhYn1cIl1gKTtcbiAgICAgIGVsc2UgJHRhYkxpbmtFbCA9ICQoYC50YWItbGlua1tocmVmPVwiIyR7JG5ld1RhYkVsLmF0dHIoJ2lkJyl9XCJdYCk7XG4gICAgICAvLyBTZWFyY2ggYnkgZGF0YS10YWJcbiAgICAgIGlmICghJHRhYkxpbmtFbCB8fCAoJHRhYkxpbmtFbCAmJiAkdGFiTGlua0VsLmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgJCgnW2RhdGEtdGFiXScpLmVhY2goKGluZGV4LCBlbCkgPT4ge1xuICAgICAgICAgIGlmICgkbmV3VGFiRWwuaXMoJChlbCkuYXR0cignZGF0YS10YWInKSkpICR0YWJMaW5rRWwgPSAkKGVsKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAodGFiUm91dGUgJiYgKCEkdGFiTGlua0VsIHx8ICgkdGFiTGlua0VsICYmICR0YWJMaW5rRWwubGVuZ3RoID09PSAwKSkpIHtcbiAgICAgICAgJHRhYkxpbmtFbCA9ICQoYFtkYXRhLXJvdXRlLXRhYi1pZD1cIiR7dGFiUm91dGUucm91dGUudGFiLmlkfVwiXWApO1xuICAgICAgICBpZiAoJHRhYkxpbmtFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAkdGFiTGlua0VsID0gJChgLnRhYi1saW5rW2hyZWY9XCIke3RhYlJvdXRlLnVybH1cIl1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoJHRhYkxpbmtFbC5sZW5ndGggPiAwKSB7XG4gICAgICAvLyBGaW5kIHJlbGF0ZWQgbGluayBmb3Igb2xkIHRhYlxuICAgICAgbGV0ICRvbGRUYWJMaW5rRWw7XG4gICAgICBpZiAoJG9sZFRhYkVsICYmICRvbGRUYWJFbC5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIFNlYXJjaCBieSBpZFxuICAgICAgICBjb25zdCBvbGRUYWJJZCA9ICRvbGRUYWJFbC5hdHRyKCdpZCcpO1xuICAgICAgICBpZiAob2xkVGFiSWQpICRvbGRUYWJMaW5rRWwgPSAkKGAudGFiLWxpbmtbaHJlZj1cIiMke29sZFRhYklkfVwiXWApO1xuICAgICAgICAgIC8vIFNlYXJjaCBieSBkYXRhLXRhYlxuICAgICAgICBpZiAoISRvbGRUYWJMaW5rRWwgfHwgKCRvbGRUYWJMaW5rRWwgJiYgJG9sZFRhYkxpbmtFbC5sZW5ndGggPT09IDApKSB7XG4gICAgICAgICAgJCgnW2RhdGEtdGFiXScpLmVhY2goKGluZGV4LCB0YWJMaW5rRWwpID0+IHtcbiAgICAgICAgICAgIGlmICgkb2xkVGFiRWwuaXMoJCh0YWJMaW5rRWwpLmF0dHIoJ2RhdGEtdGFiJykpKSAkb2xkVGFiTGlua0VsID0gJCh0YWJMaW5rRWwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghJG9sZFRhYkxpbmtFbCB8fCAoJG9sZFRhYkxpbmtFbCAmJiAkb2xkVGFiTGlua0VsLmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgICAkb2xkVGFiTGlua0VsID0gJHRhYkxpbmtFbC5zaWJsaW5ncygnLnRhYi1saW5rLWFjdGl2ZScpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRhYlJvdXRlKSB7XG4gICAgICAgICRvbGRUYWJMaW5rRWwgPSAkdGFiTGlua0VsLnNpYmxpbmdzKCcudGFiLWxpbmstYWN0aXZlJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICgkb2xkVGFiTGlua0VsICYmICRvbGRUYWJMaW5rRWwubGVuZ3RoID4gMCkgJG9sZFRhYkxpbmtFbC5yZW1vdmVDbGFzcygndGFiLWxpbmstYWN0aXZlJyk7XG5cbiAgICAgIC8vIFVwZGF0ZSBsaW5rcycgY2xhc3Nlc1xuICAgICAgaWYgKCR0YWJMaW5rRWwgJiYgJHRhYkxpbmtFbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICR0YWJMaW5rRWwuYWRkQ2xhc3MoJ3RhYi1saW5rLWFjdGl2ZScpO1xuICAgICAgICAvLyBNYXRlcmlhbCBIaWdobGlnaHRcbiAgICAgICAgaWYgKGFwcC50aGVtZSA9PT0gJ21kJyAmJiBhcHAudG9vbGJhcikge1xuICAgICAgICAgIGNvbnN0ICR0YWJiYXJFbCA9ICR0YWJMaW5rRWwucGFyZW50cygnLnRhYmJhciwgLnRhYmJhci1sYWJlbHMnKTtcbiAgICAgICAgICBpZiAoJHRhYmJhckVsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGFwcC50b29sYmFyLnNldEhpZ2hsaWdodCgkdGFiYmFyRWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgJG5ld1RhYkVsLFxuICAgICAgbmV3VGFiRWw6ICRuZXdUYWJFbFswXSxcbiAgICAgICRvbGRUYWJFbCxcbiAgICAgIG9sZFRhYkVsOiAkb2xkVGFiRWxbMF0sXG4gICAgfTtcbiAgfSxcbn07XG52YXIgdGFicyA9IHtcbiAgbmFtZTogJ3RhYnMnLFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoYXBwLCB7XG4gICAgICB0YWI6IHtcbiAgICAgICAgc2hvdzogVGFiLnNob3cuYmluZChhcHApLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgY2xpY2tzOiB7XG4gICAgJy50YWItbGluayc6IGZ1bmN0aW9uIHRhYkxpbmtDbGljaygkY2xpY2tlZEVsLCBkYXRhID0ge30pIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBpZiAoKCRjbGlja2VkRWwuYXR0cignaHJlZicpICYmICRjbGlja2VkRWwuYXR0cignaHJlZicpLmluZGV4T2YoJyMnKSA9PT0gMCkgfHwgJGNsaWNrZWRFbC5hdHRyKCdkYXRhLXRhYicpKSB7XG4gICAgICAgIGFwcC50YWIuc2hvdyhkYXRhLnRhYiB8fCAkY2xpY2tlZEVsLmF0dHIoJ2hyZWYnKSwgJGNsaWNrZWRFbCwgZGF0YS5hbmltYXRlKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufTtcblxuZnVuY3Rpb24gc3dpcGVQYW5lbChwYW5lbCkge1xuICBjb25zdCBhcHAgPSBwYW5lbC5hcHA7XG4gIFV0aWxzLmV4dGVuZChwYW5lbCwge1xuICAgIHN3aXBlYWJsZTogdHJ1ZSxcbiAgICBzd2lwZUluaXRpYWxpemVkOiB0cnVlLFxuICB9KTtcbiAgY29uc3QgcGFyYW1zID0gYXBwLnBhcmFtcy5wYW5lbDtcbiAgY29uc3QgeyAkZWwsICRiYWNrZHJvcEVsLCBzaWRlLCBlZmZlY3QsICR2aWV3RWwgfSA9IHBhbmVsO1xuICBsZXQgb3RoZXJQYW5lbDtcblxuICBsZXQgaXNUb3VjaGVkO1xuICBsZXQgaXNNb3ZlZDtcbiAgbGV0IGlzU2Nyb2xsaW5nO1xuICBjb25zdCB0b3VjaGVzU3RhcnQgPSB7fTtcbiAgbGV0IHRvdWNoU3RhcnRUaW1lO1xuICBsZXQgdG91Y2hlc0RpZmY7XG4gIGxldCB0cmFuc2xhdGU7XG4gIGxldCBiYWNrZHJvcE9wYWNpdHk7XG4gIGxldCBwYW5lbFdpZHRoO1xuICBsZXQgZGlyZWN0aW9uO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVRvdWNoU3RhcnQoZSkge1xuICAgIGlmICghcGFuZWwuc3dpcGVhYmxlKSByZXR1cm47XG4gICAgaWYgKCFhcHAucGFuZWwuYWxsb3dPcGVuIHx8ICghcGFyYW1zLnN3aXBlICYmICFwYXJhbXMuc3dpcGVPbmx5Q2xvc2UpIHx8IGlzVG91Y2hlZCkgcmV0dXJuO1xuICAgIGlmICgkKCcubW9kYWwtaW4sIC5waG90by1icm93c2VyLWluJykubGVuZ3RoID4gMCkgcmV0dXJuO1xuICAgIG90aGVyUGFuZWwgPSBhcHAucGFuZWxbc2lkZSA9PT0gJ2xlZnQnID8gJ3JpZ2h0JyA6ICdsZWZ0J10gfHwge307XG4gICAgaWYgKCFwYW5lbC5vcGVuZWQgJiYgb3RoZXJQYW5lbC5vcGVuZWQpIHJldHVybjtcbiAgICBpZiAoIShwYXJhbXMuc3dpcGVDbG9zZU9wcG9zaXRlIHx8IHBhcmFtcy5zd2lwZU9ubHlDbG9zZSkpIHtcbiAgICAgIGlmIChvdGhlclBhbmVsLm9wZW5lZCkgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZS50YXJnZXQgJiYgZS50YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2lucHV0JyAmJiBlLnRhcmdldC50eXBlID09PSAncmFuZ2UnKSByZXR1cm47XG4gICAgaWYgKCQoZS50YXJnZXQpLmNsb3Nlc3QoJy5yYW5nZS1zbGlkZXInKS5sZW5ndGggPiAwKSByZXR1cm47XG4gICAgaWYgKCQoZS50YXJnZXQpLmNsb3Nlc3QoJy50YWJzLXN3aXBlYWJsZS13cmFwJykubGVuZ3RoID4gMCkgcmV0dXJuO1xuICAgIHRvdWNoZXNTdGFydC54ID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICAgIHRvdWNoZXNTdGFydC55ID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICAgIGlmIChwYXJhbXMuc3dpcGVPbmx5Q2xvc2UgJiYgIXBhbmVsLm9wZW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLnN3aXBlICE9PSAnYm90aCcgJiYgcGFyYW1zLnN3aXBlQ2xvc2VPcHBvc2l0ZSAmJiBwYXJhbXMuc3dpcGUgIT09IHNpZGUgJiYgIXBhbmVsLm9wZW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLnN3aXBlQWN0aXZlQXJlYSAmJiAhcGFuZWwub3BlbmVkKSB7XG4gICAgICBpZiAoc2lkZSA9PT0gJ2xlZnQnKSB7XG4gICAgICAgIGlmICh0b3VjaGVzU3RhcnQueCA+IHBhcmFtcy5zd2lwZUFjdGl2ZUFyZWEpIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChzaWRlID09PSAncmlnaHQnKSB7XG4gICAgICAgIGlmICh0b3VjaGVzU3RhcnQueCA8IGFwcC53aWR0aCAtIHBhcmFtcy5zd2lwZUFjdGl2ZUFyZWEpIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGlzVG91Y2hlZCA9IHRydWU7XG4gICAgaXNTY3JvbGxpbmcgPSB1bmRlZmluZWQ7XG5cbiAgICB0b3VjaFN0YXJ0VGltZSA9IFV0aWxzLm5vdygpO1xuICAgIGRpcmVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVUb3VjaE1vdmUoZSkge1xuICAgIGlmICghaXNUb3VjaGVkKSByZXR1cm47XG4gICAgaWYgKGUuZjdQcmV2ZW50UGFuZWxTd2lwZSkgcmV0dXJuO1xuICAgIGNvbnN0IHBhZ2VYID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgY29uc3QgcGFnZVkgPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgICBpZiAodHlwZW9mIGlzU2Nyb2xsaW5nID09PSAndW5kZWZpbmVkJykge1xuICAgICAgaXNTY3JvbGxpbmcgPSAhIShpc1Njcm9sbGluZyB8fCBNYXRoLmFicyhwYWdlWSAtIHRvdWNoZXNTdGFydC55KSA+IE1hdGguYWJzKHBhZ2VYIC0gdG91Y2hlc1N0YXJ0LngpKTtcbiAgICB9XG4gICAgaWYgKGlzU2Nyb2xsaW5nKSB7XG4gICAgICBpc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFkaXJlY3Rpb24pIHtcbiAgICAgIGlmIChwYWdlWCA+IHRvdWNoZXNTdGFydC54KSB7XG4gICAgICAgIGRpcmVjdGlvbiA9ICd0by1yaWdodCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaXJlY3Rpb24gPSAndG8tbGVmdCc7XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJhbXMuc3dpcGUgPT09ICdib3RoJykge1xuICAgICAgICBpZiAocGFyYW1zLnN3aXBlQWN0aXZlQXJlYSA+IDApIHtcbiAgICAgICAgICBpZiAoc2lkZSA9PT0gJ2xlZnQnICYmIHRvdWNoZXNTdGFydC54ID4gcGFyYW1zLnN3aXBlQWN0aXZlQXJlYSkge1xuICAgICAgICAgICAgaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzaWRlID09PSAncmlnaHQnICYmIHRvdWNoZXNTdGFydC54IDwgYXBwLndpZHRoIC0gcGFyYW1zLnN3aXBlQWN0aXZlQXJlYSkge1xuICAgICAgICAgICAgaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoJGVsLmhhc0NsYXNzKCdwYW5lbC12aXNpYmxlLWJ5LWJyZWFrcG9pbnQnKSkge1xuICAgICAgICBpc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIChzaWRlID09PSAnbGVmdCcgJiZcbiAgICAgICAgICAoXG4gICAgICAgICAgICBkaXJlY3Rpb24gPT09ICd0by1sZWZ0JyAmJiAhJGVsLmhhc0NsYXNzKCdwYW5lbC1hY3RpdmUnKVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgICB8fFxuICAgICAgICAoc2lkZSA9PT0gJ3JpZ2h0JyAmJlxuICAgICAgICAgIChcbiAgICAgICAgICAgIGRpcmVjdGlvbiA9PT0gJ3RvLXJpZ2h0JyAmJiAhJGVsLmhhc0NsYXNzKCdwYW5lbC1hY3RpdmUnKVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIGlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5zd2lwZU5vRm9sbG93KSB7XG4gICAgICBjb25zdCB0aW1lRGlmZiA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLSB0b3VjaFN0YXJ0VGltZTtcbiAgICAgIGlmICh0aW1lRGlmZiA8IDMwMCkge1xuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAndG8tbGVmdCcpIHtcbiAgICAgICAgICBpZiAoc2lkZSA9PT0gJ3JpZ2h0JykgYXBwLm9wZW5QYW5lbChzaWRlKTtcbiAgICAgICAgICBpZiAoc2lkZSA9PT0gJ2xlZnQnICYmICRlbC5oYXNDbGFzcygncGFuZWwtYWN0aXZlJykpIGFwcC5jbG9zZVBhbmVsKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3RvLXJpZ2h0Jykge1xuICAgICAgICAgIGlmIChzaWRlID09PSAnbGVmdCcpIGFwcC5vcGVuUGFuZWwoc2lkZSk7XG4gICAgICAgICAgaWYgKHNpZGUgPT09ICdyaWdodCcgJiYgJGVsLmhhc0NsYXNzKCdwYW5lbC1hY3RpdmUnKSkgYXBwLmNsb3NlUGFuZWwoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICBpc01vdmVkID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFpc01vdmVkKSB7XG4gICAgICBpZiAoIXBhbmVsLm9wZW5lZCkge1xuICAgICAgICAkZWwuc2hvdygpO1xuICAgICAgICAkYmFja2Ryb3BFbC5zaG93KCk7XG4gICAgICAgICRlbC50cmlnZ2VyKCdwYW5lbDpzd2lwZW9wZW4nLCBwYW5lbCk7XG4gICAgICAgIHBhbmVsLmVtaXQoJ2xvY2FsOjpzd2lwZU9wZW4gcGFuZWxTd2lwZU9wZW4nLCBwYW5lbCk7XG4gICAgICB9XG4gICAgICBwYW5lbFdpZHRoID0gJGVsWzBdLm9mZnNldFdpZHRoO1xuICAgICAgJGVsLnRyYW5zaXRpb24oMCk7XG4gICAgfVxuXG4gICAgaXNNb3ZlZCA9IHRydWU7XG5cbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgbGV0IHRocmVzaG9sZCA9IHBhbmVsLm9wZW5lZCA/IDAgOiAtcGFyYW1zLnN3aXBlVGhyZXNob2xkO1xuICAgIGlmIChzaWRlID09PSAncmlnaHQnKSB0aHJlc2hvbGQgPSAtdGhyZXNob2xkO1xuXG4gICAgdG91Y2hlc0RpZmYgPSAocGFnZVggLSB0b3VjaGVzU3RhcnQueCkgKyB0aHJlc2hvbGQ7XG5cbiAgICBpZiAoc2lkZSA9PT0gJ3JpZ2h0Jykge1xuICAgICAgaWYgKGVmZmVjdCA9PT0gJ2NvdmVyJykge1xuICAgICAgICB0cmFuc2xhdGUgPSB0b3VjaGVzRGlmZiArIChwYW5lbC5vcGVuZWQgPyAwIDogcGFuZWxXaWR0aCk7XG4gICAgICAgIGlmICh0cmFuc2xhdGUgPCAwKSB0cmFuc2xhdGUgPSAwO1xuICAgICAgICBpZiAodHJhbnNsYXRlID4gcGFuZWxXaWR0aCkge1xuICAgICAgICAgIHRyYW5zbGF0ZSA9IHBhbmVsV2lkdGg7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYW5zbGF0ZSA9IHRvdWNoZXNEaWZmIC0gKHBhbmVsLm9wZW5lZCA/IHBhbmVsV2lkdGggOiAwKTtcbiAgICAgICAgaWYgKHRyYW5zbGF0ZSA+IDApIHRyYW5zbGF0ZSA9IDA7XG4gICAgICAgIGlmICh0cmFuc2xhdGUgPCAtcGFuZWxXaWR0aCkge1xuICAgICAgICAgIHRyYW5zbGF0ZSA9IC1wYW5lbFdpZHRoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zbGF0ZSA9IHRvdWNoZXNEaWZmICsgKHBhbmVsLm9wZW5lZCA/IHBhbmVsV2lkdGggOiAwKTtcbiAgICAgIGlmICh0cmFuc2xhdGUgPCAwKSB0cmFuc2xhdGUgPSAwO1xuICAgICAgaWYgKHRyYW5zbGF0ZSA+IHBhbmVsV2lkdGgpIHtcbiAgICAgICAgdHJhbnNsYXRlID0gcGFuZWxXaWR0aDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVmZmVjdCA9PT0gJ3JldmVhbCcpIHtcbiAgICAgICR2aWV3RWwudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke3RyYW5zbGF0ZX1weCwwLDApYCkudHJhbnNpdGlvbigwKTtcbiAgICAgICRiYWNrZHJvcEVsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHt0cmFuc2xhdGV9cHgsMCwwKWApLnRyYW5zaXRpb24oMCk7XG5cbiAgICAgICRlbC50cmlnZ2VyKCdwYW5lbDpzd2lwZScsIHBhbmVsLCBNYXRoLmFicyh0cmFuc2xhdGUgLyBwYW5lbFdpZHRoKSk7XG4gICAgICBwYW5lbC5lbWl0KCdsb2NhbDo6c3dpcGUgcGFuZWxTd2lwZScsIHBhbmVsLCBNYXRoLmFicyh0cmFuc2xhdGUgLyBwYW5lbFdpZHRoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzaWRlID09PSAnbGVmdCcpIHRyYW5zbGF0ZSAtPSBwYW5lbFdpZHRoO1xuICAgICAgJGVsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHt0cmFuc2xhdGV9cHgsMCwwKWApLnRyYW5zaXRpb24oMCk7XG5cbiAgICAgICRiYWNrZHJvcEVsLnRyYW5zaXRpb24oMCk7XG4gICAgICBiYWNrZHJvcE9wYWNpdHkgPSAxIC0gTWF0aC5hYnModHJhbnNsYXRlIC8gcGFuZWxXaWR0aCk7XG4gICAgICAkYmFja2Ryb3BFbC5jc3MoeyBvcGFjaXR5OiBiYWNrZHJvcE9wYWNpdHkgfSk7XG5cbiAgICAgICRlbC50cmlnZ2VyKCdwYW5lbDpzd2lwZScsIHBhbmVsLCBNYXRoLmFicyh0cmFuc2xhdGUgLyBwYW5lbFdpZHRoKSk7XG4gICAgICBwYW5lbC5lbWl0KCdsb2NhbDo6c3dpcGUgcGFuZWxTd2lwZScsIHBhbmVsLCBNYXRoLmFicyh0cmFuc2xhdGUgLyBwYW5lbFdpZHRoKSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZVRvdWNoRW5kKCkge1xuICAgIGlmICghaXNUb3VjaGVkIHx8ICFpc01vdmVkKSB7XG4gICAgICBpc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgIGlzTW92ZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGNvbnN0IHRpbWVEaWZmID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKSAtIHRvdWNoU3RhcnRUaW1lO1xuICAgIGxldCBhY3Rpb247XG4gICAgY29uc3QgZWRnZSA9ICh0cmFuc2xhdGUgPT09IDAgfHwgTWF0aC5hYnModHJhbnNsYXRlKSA9PT0gcGFuZWxXaWR0aCk7XG5cbiAgICBpZiAoIXBhbmVsLm9wZW5lZCkge1xuICAgICAgaWYgKGVmZmVjdCA9PT0gJ2NvdmVyJykge1xuICAgICAgICBpZiAodHJhbnNsYXRlID09PSAwKSB7XG4gICAgICAgICAgYWN0aW9uID0gJ3N3YXAnOyAvLyBvcGVuXG4gICAgICAgIH0gZWxzZSBpZiAodGltZURpZmYgPCAzMDAgJiYgTWF0aC5hYnModHJhbnNsYXRlKSA+IDApIHtcbiAgICAgICAgICBhY3Rpb24gPSAnc3dhcCc7IC8vIG9wZW5cbiAgICAgICAgfSBlbHNlIGlmICh0aW1lRGlmZiA+PSAzMDAgJiYgTWF0aC5hYnModHJhbnNsYXRlKSA8IHBhbmVsV2lkdGggLyAyKSB7XG4gICAgICAgICAgYWN0aW9uID0gJ3N3YXAnOyAvLyBvcGVuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWN0aW9uID0gJ3Jlc2V0JzsgLy8gY2xvc2VcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPT09IDApIHtcbiAgICAgICAgYWN0aW9uID0gJ3Jlc2V0JztcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICh0aW1lRGlmZiA8IDMwMCAmJiBNYXRoLmFicyh0cmFuc2xhdGUpID4gMClcbiAgICAgICAgfHxcbiAgICAgICAgKHRpbWVEaWZmID49IDMwMCAmJiAoTWF0aC5hYnModHJhbnNsYXRlKSA+PSBwYW5lbFdpZHRoIC8gMikpXG4gICAgICApIHtcbiAgICAgICAgYWN0aW9uID0gJ3N3YXAnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aW9uID0gJ3Jlc2V0JztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVmZmVjdCA9PT0gJ2NvdmVyJykge1xuICAgICAgaWYgKHRyYW5zbGF0ZSA9PT0gMCkge1xuICAgICAgICBhY3Rpb24gPSAncmVzZXQnOyAvLyBvcGVuXG4gICAgICB9IGVsc2UgaWYgKHRpbWVEaWZmIDwgMzAwICYmIE1hdGguYWJzKHRyYW5zbGF0ZSkgPiAwKSB7XG4gICAgICAgIGFjdGlvbiA9ICdzd2FwJzsgLy8gb3BlblxuICAgICAgfSBlbHNlIGlmICh0aW1lRGlmZiA+PSAzMDAgJiYgTWF0aC5hYnModHJhbnNsYXRlKSA8IHBhbmVsV2lkdGggLyAyKSB7XG4gICAgICAgIGFjdGlvbiA9ICdyZXNldCc7IC8vIG9wZW5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGlvbiA9ICdzd2FwJzsgLy8gY2xvc2VcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRyYW5zbGF0ZSA9PT0gLXBhbmVsV2lkdGgpIHtcbiAgICAgIGFjdGlvbiA9ICdyZXNldCc7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgICAgKHRpbWVEaWZmIDwgMzAwICYmIE1hdGguYWJzKHRyYW5zbGF0ZSkgPj0gMClcbiAgICAgICAgfHxcbiAgICAgICAgKHRpbWVEaWZmID49IDMwMCAmJiAoTWF0aC5hYnModHJhbnNsYXRlKSA8PSBwYW5lbFdpZHRoIC8gMikpXG4gICAgICApIHtcbiAgICAgIGlmIChzaWRlID09PSAnbGVmdCcgJiYgdHJhbnNsYXRlID09PSBwYW5lbFdpZHRoKSBhY3Rpb24gPSAncmVzZXQnO1xuICAgICAgZWxzZSBhY3Rpb24gPSAnc3dhcCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGlvbiA9ICdyZXNldCc7XG4gICAgfVxuICAgIGlmIChhY3Rpb24gPT09ICdzd2FwJykge1xuICAgICAgaWYgKHBhbmVsLm9wZW5lZCkge1xuICAgICAgICBwYW5lbC5jbG9zZSghZWRnZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYW5lbC5vcGVuKCFlZGdlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGFjdGlvbiA9PT0gJ3Jlc2V0Jykge1xuICAgICAgaWYgKCFwYW5lbC5vcGVuZWQpIHtcbiAgICAgICAgaWYgKGVkZ2UpIHtcbiAgICAgICAgICAkZWwuY3NzKHsgZGlzcGxheTogJycgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZWZmZWN0ID09PSAncmV2ZWFsJyA/ICR2aWV3RWwgOiAkZWw7XG4gICAgICAgICAgJCgnaHRtbCcpLmFkZENsYXNzKCd3aXRoLXBhbmVsLXRyYW5zaXRpb25pbmcnKTtcbiAgICAgICAgICB0YXJnZXQudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoJGVsLmhhc0NsYXNzKCdwYW5lbC1hY3RpdmUnKSkgcmV0dXJuO1xuICAgICAgICAgICAgJGVsLmNzcyh7IGRpc3BsYXk6ICcnIH0pO1xuICAgICAgICAgICAgJCgnaHRtbCcpLnJlbW92ZUNsYXNzKCd3aXRoLXBhbmVsLXRyYW5zaXRpb25pbmcnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZWZmZWN0ID09PSAncmV2ZWFsJykge1xuICAgICAgVXRpbHMubmV4dEZyYW1lKCgpID0+IHtcbiAgICAgICAgJHZpZXdFbC50cmFuc2l0aW9uKCcnKTtcbiAgICAgICAgJHZpZXdFbC50cmFuc2Zvcm0oJycpO1xuICAgICAgfSk7XG4gICAgfVxuICAgICRlbC50cmFuc2l0aW9uKCcnKS50cmFuc2Zvcm0oJycpO1xuICAgICRiYWNrZHJvcEVsLmNzcyh7IGRpc3BsYXk6ICcnIH0pLnRyYW5zZm9ybSgnJykudHJhbnNpdGlvbignJykuY3NzKCdvcGFjaXR5JywgJycpO1xuICB9XG5cbiAgLy8gQWRkIEV2ZW50c1xuICBhcHAub24oJ3RvdWNoc3RhcnQ6cGFzc2l2ZScsIGhhbmRsZVRvdWNoU3RhcnQpO1xuICBhcHAub24oJ3RvdWNobW92ZScsIGhhbmRsZVRvdWNoTW92ZSk7XG4gIGFwcC5vbigndG91Y2hlbmQ6cGFzc2l2ZScsIGhhbmRsZVRvdWNoRW5kKTtcbiAgcGFuZWwub24oJ3BhbmVsRGVzdHJveScsICgpID0+IHtcbiAgICBhcHAub2ZmKCd0b3VjaHN0YXJ0OnBhc3NpdmUnLCBoYW5kbGVUb3VjaFN0YXJ0KTtcbiAgICBhcHAub2ZmKCd0b3VjaG1vdmUnLCBoYW5kbGVUb3VjaE1vdmUpO1xuICAgIGFwcC5vZmYoJ3RvdWNoZW5kOnBhc3NpdmUnLCBoYW5kbGVUb3VjaEVuZCk7XG4gIH0pO1xufVxuXG5jbGFzcyBQYW5lbCBleHRlbmRzIEZyYW1ld29yazdDbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGFwcCwgcGFyYW1zID0ge30pIHtcbiAgICBzdXBlcihwYXJhbXMsIFthcHBdKTtcbiAgICBjb25zdCBwYW5lbCA9IHRoaXM7XG5cbiAgICBjb25zdCBlbCA9IHBhcmFtcy5lbDtcbiAgICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHBhbmVsO1xuICAgIGlmICgkZWxbMF0uZjdQYW5lbCkgcmV0dXJuICRlbFswXS5mN1BhbmVsO1xuXG4gICAgJGVsWzBdLmY3UGFuZWwgPSBwYW5lbDtcblxuICAgIGxldCB7IG9wZW5lZCwgc2lkZSwgZWZmZWN0IH0gPSBwYXJhbXM7XG4gICAgaWYgKHR5cGVvZiBvcGVuZWQgPT09ICd1bmRlZmluZWQnKSBvcGVuZWQgPSAkZWwuaGFzQ2xhc3MoJ3BhbmVsLWFjdGl2ZScpO1xuICAgIGlmICh0eXBlb2Ygc2lkZSA9PT0gJ3VuZGVmaW5lZCcpIHNpZGUgPSAkZWwuaGFzQ2xhc3MoJ3BhbmVsLWxlZnQnKSA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgaWYgKHR5cGVvZiBlZmZlY3QgPT09ICd1bmRlZmluZWQnKSBlZmZlY3QgPSAkZWwuaGFzQ2xhc3MoJ3BhbmVsLWNvdmVyJykgPyAnY292ZXInIDogJ3JldmVhbCc7XG5cbiAgICBpZiAoIWFwcC5wYW5lbFtzaWRlXSkge1xuICAgICAgVXRpbHMuZXh0ZW5kKGFwcC5wYW5lbCwge1xuICAgICAgICBbc2lkZV06IHBhbmVsLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGV0ICRiYWNrZHJvcEVsID0gJCgnLnBhbmVsLWJhY2tkcm9wJyk7XG4gICAgaWYgKCRiYWNrZHJvcEVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgJGJhY2tkcm9wRWwgPSAkKCc8ZGl2IGNsYXNzPVwicGFuZWwtYmFja2Ryb3BcIj48L2Rpdj4nKTtcbiAgICAgICRiYWNrZHJvcEVsLmluc2VydEJlZm9yZSgkZWwpO1xuICAgIH1cblxuICAgIGxldCAkdmlld0VsO1xuICAgIGlmIChhcHAucm9vdC5jaGlsZHJlbignLnZpZXdzJykubGVuZ3RoID4gMCkge1xuICAgICAgJHZpZXdFbCA9IGFwcC5yb290LmNoaWxkcmVuKCcudmlld3MnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHZpZXdFbCA9IGFwcC5yb290LmNoaWxkcmVuKCcudmlldycpLmVxKDApO1xuICAgIH1cblxuICAgIFV0aWxzLmV4dGVuZChwYW5lbCwge1xuICAgICAgYXBwLFxuICAgICAgc2lkZSxcbiAgICAgIGVmZmVjdCxcbiAgICAgICRlbCxcbiAgICAgIGVsOiAkZWxbMF0sXG4gICAgICBvcGVuZWQsXG4gICAgICAkYmFja2Ryb3BFbCxcbiAgICAgIGJhY2tkcm9wRWw6ICRiYWNrZHJvcEVsWzBdLFxuICAgICAgJHZpZXdFbCxcbiAgICAgIHZpZXdFbDogJHZpZXdFbFswXSxcbiAgICB9KTtcblxuICAgIC8vIEluc3RhbGwgTW9kdWxlc1xuICAgIHBhbmVsLnVzZUluc3RhbmNlTW9kdWxlcygpO1xuXG4gICAgLy8gSW5pdFxuICAgIHBhbmVsLmluaXQoKTtcblxuICAgIHJldHVybiBwYW5lbDtcbiAgfVxuICBpbml0KCkge1xuICAgIGNvbnN0IHBhbmVsID0gdGhpcztcbiAgICBjb25zdCBhcHAgPSBwYW5lbC5hcHA7XG4gICAgaWYgKGFwcC5wYXJhbXMucGFuZWxbYCR7cGFuZWwuc2lkZX1CcmVha3BvaW50YF0pIHtcbiAgICAgIHBhbmVsLmluaXRCcmVha3BvaW50cygpO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAoYXBwLnBhcmFtcy5wYW5lbC5zd2lwZSA9PT0gcGFuZWwuc2lkZSlcbiAgICAgIHx8XG4gICAgICAoYXBwLnBhcmFtcy5wYW5lbC5zd2lwZSA9PT0gJ2JvdGgnKVxuICAgICAgfHxcbiAgICAgIChhcHAucGFyYW1zLnBhbmVsLnN3aXBlICYmIGFwcC5wYXJhbXMucGFuZWwuc3dpcGUgIT09IHBhbmVsLnNpZGUgJiYgYXBwLnBhcmFtcy5wYW5lbC5zd2lwZUNsb3NlT3Bwb3NpdGUpXG4gICAgICApIHtcbiAgICAgIHBhbmVsLmluaXRTd2lwZVBhbmVsKCk7XG4gICAgfVxuICB9XG4gIHNldEJyZWFrcG9pbnQoKSB7XG4gICAgY29uc3QgcGFuZWwgPSB0aGlzO1xuICAgIGNvbnN0IGFwcCA9IHBhbmVsLmFwcDtcbiAgICBjb25zdCB7IHNpZGUsICRlbCwgJHZpZXdFbCB9ID0gcGFuZWw7XG4gICAgY29uc3QgYnJlYWtwb2ludCA9IGFwcC5wYXJhbXMucGFuZWxbYCR7c2lkZX1CcmVha3BvaW50YF07XG4gICAgY29uc3Qgd2FzVmlzaWJsZSA9ICRlbC5oYXNDbGFzcygncGFuZWwtdmlzaWJsZS1ieS1icmVha3BvaW50Jyk7XG5cbiAgICBpZiAoYXBwLndpZHRoID49IGJyZWFrcG9pbnQpIHtcbiAgICAgIGlmICghd2FzVmlzaWJsZSkge1xuICAgICAgICAkKCdodG1sJykucmVtb3ZlQ2xhc3MoYHdpdGgtcGFuZWwtJHtzaWRlfS1yZXZlYWwgd2l0aC1wYW5lbC0ke3NpZGV9LWNvdmVyIHdpdGgtcGFuZWxgKTtcbiAgICAgICAgJGVsLmNzcygnZGlzcGxheScsICcnKS5hZGRDbGFzcygncGFuZWwtdmlzaWJsZS1ieS1icmVha3BvaW50JykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICBwYW5lbC5vbk9wZW4oKTtcbiAgICAgICAgcGFuZWwub25PcGVuZWQoKTtcbiAgICAgICAgJHZpZXdFbC5jc3Moe1xuICAgICAgICAgIFtgbWFyZ2luLSR7c2lkZX1gXTogYCR7JGVsLndpZHRoKCl9cHhgLFxuICAgICAgICB9KTtcbiAgICAgICAgYXBwLmFsbG93UGFuZWxPcGVuID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHdhc1Zpc2libGUpIHtcbiAgICAgICRlbC5jc3MoJ2Rpc3BsYXknLCAnJykucmVtb3ZlQ2xhc3MoJ3BhbmVsLXZpc2libGUtYnktYnJlYWtwb2ludCBhY3RpdmUnKTtcbiAgICAgIHBhbmVsLm9uQ2xvc2UoKTtcbiAgICAgIHBhbmVsLm9uQ2xvc2VkKCk7XG4gICAgICAkdmlld0VsLmNzcyh7XG4gICAgICAgIFtgbWFyZ2luLSR7c2lkZX1gXTogJycsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgaW5pdEJyZWFrcG9pbnRzKCkge1xuICAgIGNvbnN0IHBhbmVsID0gdGhpcztcbiAgICBjb25zdCBhcHAgPSBwYW5lbC5hcHA7XG4gICAgcGFuZWwucmVzaXplSGFuZGxlciA9IGZ1bmN0aW9uIHJlc2l6ZUhhbmRsZXIoKSB7XG4gICAgICBwYW5lbC5zZXRCcmVha3BvaW50KCk7XG4gICAgfTtcbiAgICBpZiAoYXBwLnBhcmFtcy5wYW5lbFtgJHtwYW5lbC5zaWRlfUJyZWFrcG9pbnRgXSkge1xuICAgICAgYXBwLm9uKCdyZXNpemUnLCBwYW5lbC5yZXNpemVIYW5kbGVyKTtcbiAgICB9XG4gICAgcGFuZWwuc2V0QnJlYWtwb2ludCgpO1xuICAgIHJldHVybiBwYW5lbDtcbiAgfVxuICBpbml0U3dpcGVQYW5lbCgpIHtcbiAgICBzd2lwZVBhbmVsKHRoaXMpO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgbGV0IHBhbmVsID0gdGhpcztcbiAgICBjb25zdCBhcHAgPSBwYW5lbC5hcHA7XG5cbiAgICBwYW5lbC5lbWl0KCdsb2NhbDo6YmVmb3JlRGVzdHJveSBwYW5lbEJlZm9yZURlc3Ryb3knLCBwYW5lbCk7XG4gICAgcGFuZWwuJGVsLnRyaWdnZXIoJ3BhbmVsOmJlZm9yZWRlc3Ryb3knLCBwYW5lbCk7XG5cbiAgICBpZiAocGFuZWwucmVzaXplSGFuZGxlcikge1xuICAgICAgYXBwLm9mZigncmVzaXplJywgcGFuZWwucmVzaXplSGFuZGxlcik7XG4gICAgfVxuICAgIHBhbmVsLiRlbC50cmlnZ2VyKCdwYW5lbDpkZXN0cm95JywgcGFuZWwpO1xuICAgIHBhbmVsLmVtaXQoJ2xvY2FsOjpkZXN0cm95IHBhbmVsRGVzdHJveScpO1xuICAgIGRlbGV0ZSBhcHAucGFuZWxbcGFuZWwuc2lkZV07XG4gICAgZGVsZXRlIHBhbmVsLmVsLmY3UGFuZWw7XG4gICAgT2JqZWN0LmtleXMocGFuZWwpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgZGVsZXRlIHBhbmVsW2tleV07XG4gICAgfSk7XG4gICAgcGFuZWwgPSBudWxsO1xuICB9XG4gIG9wZW4oYW5pbWF0ZSA9IHRydWUpIHtcbiAgICBjb25zdCBwYW5lbCA9IHRoaXM7XG4gICAgY29uc3QgYXBwID0gcGFuZWwuYXBwO1xuICAgIGlmICghYXBwLnBhbmVsLmFsbG93T3BlbikgcmV0dXJuIGZhbHNlO1xuXG4gICAgY29uc3QgeyBzaWRlLCBlZmZlY3QsICRlbCwgJGJhY2tkcm9wRWwgfSA9IHBhbmVsO1xuXG4gICAgLy8gQ2xvc2UgaWYgc29tZSBwYW5lbCBpcyBvcGVuZWRcbiAgICBhcHAucGFuZWwuY2xvc2Uoc2lkZSA9PT0gJ2xlZnQnID8gJ3JpZ2h0JyA6ICdsZWZ0JywgYW5pbWF0ZSk7XG5cbiAgICBhcHAucGFuZWwuYWxsb3dPcGVuID0gZmFsc2U7XG5cbiAgICAkZWxbYW5pbWF0ZSA/ICdyZW1vdmVDbGFzcycgOiAnYWRkQ2xhc3MnXSgnbm90LWFuaW1hdGVkJyk7XG4gICAgJGVsXG4gICAgICAuY3NzKHsgZGlzcGxheTogJ2Jsb2NrJyB9KVxuICAgICAgLmFkZENsYXNzKCdwYW5lbC1hY3RpdmUnKTtcblxuICAgICRiYWNrZHJvcEVsW2FuaW1hdGUgPyAncmVtb3ZlQ2xhc3MnIDogJ2FkZENsYXNzJ10oJ25vdC1hbmltYXRlZCcpO1xuICAgICRiYWNrZHJvcEVsLnNob3coKTtcblxuICAgIC8qIGVzbGludCBuby11bmRlcnNjb3JlLWRhbmdsZTogW1wiZXJyb3JcIiwgeyBcImFsbG93XCI6IFtcIl9jbGllbnRMZWZ0XCJdIH1dICovXG4gICAgcGFuZWwuX2NsaWVudExlZnQgPSAkZWxbMF0uY2xpZW50TGVmdDtcblxuICAgICQoJ2h0bWwnKS5hZGRDbGFzcyhgd2l0aC1wYW5lbCB3aXRoLXBhbmVsLSR7c2lkZX0tJHtlZmZlY3R9YCk7XG4gICAgcGFuZWwub25PcGVuKCk7XG5cbiAgICAvLyBUcmFuc2l0aW9uIEVuZDtcbiAgICBjb25zdCB0cmFuc2l0aW9uRW5kVGFyZ2V0ID0gZWZmZWN0ID09PSAncmV2ZWFsJyA/ICRlbC5uZXh0QWxsKCcudmlldywgLnZpZXdzJykuZXEoMCkgOiAkZWw7XG5cbiAgICBmdW5jdGlvbiBwYW5lbFRyYW5zaXRpb25FbmQoKSB7XG4gICAgICB0cmFuc2l0aW9uRW5kVGFyZ2V0LnRyYW5zaXRpb25FbmQoKGUpID0+IHtcbiAgICAgICAgaWYgKCQoZS50YXJnZXQpLmlzKHRyYW5zaXRpb25FbmRUYXJnZXQpKSB7XG4gICAgICAgICAgaWYgKCRlbC5oYXNDbGFzcygncGFuZWwtYWN0aXZlJykpIHtcbiAgICAgICAgICAgIHBhbmVsLm9uT3BlbmVkKCk7XG4gICAgICAgICAgICAkYmFja2Ryb3BFbC5jc3MoeyBkaXNwbGF5OiAnJyB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFuZWwub25DbG9zZWQoKTtcbiAgICAgICAgICAgICRiYWNrZHJvcEVsLmNzcyh7IGRpc3BsYXk6ICcnIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHBhbmVsVHJhbnNpdGlvbkVuZCgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChhbmltYXRlKSB7XG4gICAgICBwYW5lbFRyYW5zaXRpb25FbmQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFuZWwub25PcGVuZWQoKTtcbiAgICAgICRiYWNrZHJvcEVsLmNzcyh7IGRpc3BsYXk6ICcnIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNsb3NlKGFuaW1hdGUgPSB0cnVlKSB7XG4gICAgY29uc3QgcGFuZWwgPSB0aGlzO1xuICAgIGNvbnN0IGFwcCA9IHBhbmVsLmFwcDtcblxuICAgIGNvbnN0IHsgc2lkZSwgZWZmZWN0LCAkZWwsICRiYWNrZHJvcEVsIH0gPSBwYW5lbDtcblxuICAgIGlmICgkZWwuaGFzQ2xhc3MoJ3BhbmVsLXZpc2libGUtYnktYnJlYWtwb2ludCcpIHx8ICEkZWwuaGFzQ2xhc3MoJ3BhbmVsLWFjdGl2ZScpKSByZXR1cm4gZmFsc2U7XG5cbiAgICAkZWxbYW5pbWF0ZSA/ICdyZW1vdmVDbGFzcycgOiAnYWRkQ2xhc3MnXSgnbm90LWFuaW1hdGVkJyk7XG4gICAgJGVsLnJlbW92ZUNsYXNzKCdwYW5lbC1hY3RpdmUnKTtcblxuICAgICRiYWNrZHJvcEVsW2FuaW1hdGUgPyAncmVtb3ZlQ2xhc3MnIDogJ2FkZENsYXNzJ10oJ25vdC1hbmltYXRlZCcpO1xuXG4gICAgY29uc3QgdHJhbnNpdGlvbkVuZFRhcmdldCA9IGVmZmVjdCA9PT0gJ3JldmVhbCcgPyAkZWwubmV4dEFsbCgnLnZpZXcsIC52aWV3cycpLmVxKDApIDogJGVsO1xuXG4gICAgcGFuZWwub25DbG9zZSgpO1xuICAgIGFwcC5wYW5lbC5hbGxvd09wZW4gPSBmYWxzZTtcblxuICAgIGlmIChhbmltYXRlKSB7XG4gICAgICB0cmFuc2l0aW9uRW5kVGFyZ2V0LnRyYW5zaXRpb25FbmQoKCkgPT4ge1xuICAgICAgICBpZiAoJGVsLmhhc0NsYXNzKCdwYW5lbC1hY3RpdmUnKSkgcmV0dXJuO1xuICAgICAgICAkZWwuY3NzKHsgZGlzcGxheTogJycgfSk7XG4gICAgICAgICQoJ2h0bWwnKS5yZW1vdmVDbGFzcygnd2l0aC1wYW5lbC10cmFuc2l0aW9uaW5nJyk7XG4gICAgICAgIHBhbmVsLm9uQ2xvc2VkKCk7XG4gICAgICB9KTtcbiAgICAgICQoJ2h0bWwnKVxuICAgICAgICAucmVtb3ZlQ2xhc3MoYHdpdGgtcGFuZWwgd2l0aC1wYW5lbC0ke3NpZGV9LSR7ZWZmZWN0fWApXG4gICAgICAgIC5hZGRDbGFzcygnd2l0aC1wYW5lbC10cmFuc2l0aW9uaW5nJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICRlbC5jc3MoeyBkaXNwbGF5OiAnJyB9KTtcbiAgICAgICRlbC5yZW1vdmVDbGFzcygnbm90LWFuaW1hdGVkJyk7XG4gICAgICAkKCdodG1sJykucmVtb3ZlQ2xhc3MoYHdpdGgtcGFuZWwgd2l0aC1wYW5lbC10cmFuc2l0aW9uaW5nIHdpdGgtcGFuZWwtJHtzaWRlfS0ke2VmZmVjdH1gKTtcbiAgICAgIHBhbmVsLm9uQ2xvc2VkKCk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIG9uT3BlbigpIHtcbiAgICBjb25zdCBwYW5lbCA9IHRoaXM7XG4gICAgcGFuZWwub3BlbmVkID0gdHJ1ZTtcbiAgICBwYW5lbC4kZWwudHJpZ2dlcigncGFuZWw6b3BlbicsIHBhbmVsKTtcbiAgICBwYW5lbC5lbWl0KCdsb2NhbDo6b3BlbiBwYW5lbE9wZW4nLCBwYW5lbCk7XG4gIH1cbiAgb25PcGVuZWQoKSB7XG4gICAgY29uc3QgcGFuZWwgPSB0aGlzO1xuICAgIGNvbnN0IGFwcCA9IHBhbmVsLmFwcDtcbiAgICBhcHAucGFuZWwuYWxsb3dPcGVuID0gdHJ1ZTtcblxuICAgIHBhbmVsLiRlbC50cmlnZ2VyKCdwYW5lbDpvcGVuZWQnLCBwYW5lbCk7XG4gICAgcGFuZWwuZW1pdCgnbG9jYWw6Om9wZW5lZCBwYW5lbE9wZW5lZCcsIHBhbmVsKTtcbiAgfVxuICBvbkNsb3NlKCkge1xuICAgIGNvbnN0IHBhbmVsID0gdGhpcztcbiAgICBwYW5lbC5vcGVuZWQgPSBmYWxzZTtcbiAgICBwYW5lbC4kZWwuYWRkQ2xhc3MoJ3BhbmVsLWNsb3NpbmcnKTtcbiAgICBwYW5lbC4kZWwudHJpZ2dlcigncGFuZWw6Y2xvc2UnLCBwYW5lbCk7XG4gICAgcGFuZWwuZW1pdCgnbG9jYWw6OmNsb3NlIHBhbmVsQ2xvc2UnLCBwYW5lbCk7XG4gIH1cbiAgb25DbG9zZWQoKSB7XG4gICAgY29uc3QgcGFuZWwgPSB0aGlzO1xuICAgIGNvbnN0IGFwcCA9IHBhbmVsLmFwcDtcbiAgICBhcHAucGFuZWwuYWxsb3dPcGVuID0gdHJ1ZTtcbiAgICBwYW5lbC4kZWwucmVtb3ZlQ2xhc3MoJ3BhbmVsLWNsb3NpbmcnKTtcbiAgICBwYW5lbC4kZWwudHJpZ2dlcigncGFuZWw6Y2xvc2VkJywgcGFuZWwpO1xuICAgIHBhbmVsLmVtaXQoJ2xvY2FsOjpjbG9zZWQgcGFuZWxDbG9zZWQnLCBwYW5lbCk7XG4gIH1cbn1cblxudmFyIHBhbmVsID0ge1xuICBuYW1lOiAncGFuZWwnLFxuICBwYXJhbXM6IHtcbiAgICBwYW5lbDoge1xuICAgICAgbGVmdEJyZWFrcG9pbnQ6IDAsXG4gICAgICByaWdodEJyZWFrcG9pbnQ6IDAsXG4gICAgICBzd2lwZTogdW5kZWZpbmVkLCAvLyBvciAnbGVmdCcgb3IgJ3JpZ2h0JyBvciAnYm90aCdcbiAgICAgIHN3aXBlQWN0aXZlQXJlYTogMCxcbiAgICAgIHN3aXBlQ2xvc2VPcHBvc2l0ZTogdHJ1ZSxcbiAgICAgIHN3aXBlT25seUNsb3NlOiBmYWxzZSxcbiAgICAgIHN3aXBlTm9Gb2xsb3c6IGZhbHNlLFxuICAgICAgc3dpcGVUaHJlc2hvbGQ6IDAsXG4gICAgICBjbG9zZUJ5QmFja2Ryb3BDbGljazogdHJ1ZSxcbiAgICB9LFxuICB9LFxuICBzdGF0aWM6IHtcbiAgICBQYW5lbCxcbiAgfSxcbiAgaW5zdGFuY2U6IHtcbiAgICBwYW5lbDoge1xuICAgICAgYWxsb3dPcGVuOiB0cnVlLFxuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIFV0aWxzLmV4dGVuZChhcHAucGFuZWwsIHtcbiAgICAgIGRpc2FibGVTd2lwZShwYW5lbCA9ICdib3RoJykge1xuICAgICAgICBsZXQgc2lkZTtcbiAgICAgICAgbGV0IHBhbmVscyA9IFtdO1xuICAgICAgICBpZiAodHlwZW9mIHBhbmVsID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmIChwYW5lbCA9PT0gJ2JvdGgnKSB7XG4gICAgICAgICAgICBzaWRlID0gJ2JvdGgnO1xuICAgICAgICAgICAgcGFuZWxzID0gW2FwcC5wYW5lbC5sZWZ0LCBhcHAucGFuZWwucmlnaHRdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaWRlID0gcGFuZWw7XG4gICAgICAgICAgICBwYW5lbHMgPSBhcHAucGFuZWxbc2lkZV07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhbmVscyA9IFtwYW5lbF07XG4gICAgICAgIH1cbiAgICAgICAgcGFuZWxzLmZvckVhY2goKHBhbmVsSW5zdGFuY2UpID0+IHtcbiAgICAgICAgICBpZiAocGFuZWxJbnN0YW5jZSkgVXRpbHMuZXh0ZW5kKHBhbmVsSW5zdGFuY2UsIHsgc3dpcGVhYmxlOiBmYWxzZSB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgZW5hYmxlU3dpcGUocGFuZWwgPSAnYm90aCcpIHtcbiAgICAgICAgbGV0IHBhbmVscyA9IFtdO1xuICAgICAgICBsZXQgc2lkZTtcbiAgICAgICAgaWYgKHR5cGVvZiBwYW5lbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBzaWRlID0gcGFuZWw7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgKGFwcC5wYXJhbXMucGFuZWwuc3dpcGUgPT09ICdsZWZ0JyAmJiBzaWRlID09PSAncmlnaHQnKSB8fFxuICAgICAgICAgICAgKGFwcC5wYXJhbXMucGFuZWwuc3dpcGUgPT09ICdyaWdodCcgJiYgc2lkZSA9PT0gJ2xlZnQnKSB8fFxuICAgICAgICAgICAgc2lkZSA9PT0gJ2JvdGgnXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBzaWRlID0gJ2JvdGgnO1xuICAgICAgICAgICAgYXBwLnBhcmFtcy5wYW5lbC5zd2lwZSA9IHNpZGU7XG4gICAgICAgICAgICBwYW5lbHMgPSBbYXBwLnBhbmVsLmxlZnQsIGFwcC5wYW5lbC5yaWdodF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFwcC5wYXJhbXMucGFuZWwuc3dpcGUgPSBzaWRlO1xuICAgICAgICAgICAgcGFuZWxzLnB1c2goYXBwLnBhbmVsW3NpZGVdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocGFuZWwpIHtcbiAgICAgICAgICBwYW5lbHMucHVzaChwYW5lbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhbmVscy5sZW5ndGgpIHtcbiAgICAgICAgICBwYW5lbHMuZm9yRWFjaCgocGFuZWxJbnN0YW5jZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFwYW5lbEluc3RhbmNlKSByZXR1cm47XG4gICAgICAgICAgICBpZiAoIXBhbmVsSW5zdGFuY2Uuc3dpcGVJbml0aWFsaXplZCkge1xuICAgICAgICAgICAgICBwYW5lbEluc3RhbmNlLmluaXRTd2lwZVBhbmVsKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBVdGlscy5leHRlbmQocGFuZWxJbnN0YW5jZSwgeyBzd2lwZWFibGU6IHRydWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjcmVhdGUoZWwpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYW5lbChhcHAsIHsgZWwgfSk7XG4gICAgICB9LFxuXG4gICAgICBvcGVuKHNpZGUsIGFuaW1hdGUpIHtcbiAgICAgICAgbGV0IHBhbmVsU2lkZSA9IHNpZGU7XG4gICAgICAgIGlmICghcGFuZWxTaWRlKSB7XG4gICAgICAgICAgaWYgKCQoJy5wYW5lbCcpLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGFuZWxTaWRlID0gJCgnLnBhbmVsJykuaGFzQ2xhc3MoJ3BhbmVsLWxlZnQnKSA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwYW5lbFNpZGUpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGFwcC5wYW5lbFtwYW5lbFNpZGVdKSB7XG4gICAgICAgICAgcmV0dXJuIGFwcC5wYW5lbFtwYW5lbFNpZGVdLm9wZW4oYW5pbWF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgJHBhbmVsRWwgPSAkKGAucGFuZWwtJHtwYW5lbFNpZGV9YCk7XG4gICAgICAgIGlmICgkcGFuZWxFbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBQYW5lbChhcHAsIHsgZWw6ICRwYW5lbEVsIH0pLm9wZW4oYW5pbWF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSxcbiAgICAgIGNsb3NlKHNpZGUsIGFuaW1hdGUpIHtcbiAgICAgICAgbGV0ICRwYW5lbEVsO1xuICAgICAgICBsZXQgcGFuZWxTaWRlO1xuICAgICAgICBpZiAocGFuZWxTaWRlKSB7XG4gICAgICAgICAgcGFuZWxTaWRlID0gc2lkZTtcbiAgICAgICAgICAkcGFuZWxFbCA9ICQoYC5wYW5lbC0ke3BhbmVsU2lkZX1gKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkcGFuZWxFbCA9ICQoJy5wYW5lbC5wYW5lbC1hY3RpdmUnKTtcbiAgICAgICAgICBwYW5lbFNpZGUgPSAkcGFuZWxFbC5oYXNDbGFzcygncGFuZWwtbGVmdCcpID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXBhbmVsU2lkZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoYXBwLnBhbmVsW3BhbmVsU2lkZV0pIHtcbiAgICAgICAgICByZXR1cm4gYXBwLnBhbmVsW3BhbmVsU2lkZV0uY2xvc2UoYW5pbWF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCRwYW5lbEVsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXR1cm4gbmV3IFBhbmVsKGFwcCwgeyBlbDogJHBhbmVsRWwgfSkuY2xvc2UoYW5pbWF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSxcbiAgICAgIGdldChzaWRlKSB7XG4gICAgICAgIGxldCBwYW5lbFNpZGUgPSBzaWRlO1xuICAgICAgICBpZiAoIXBhbmVsU2lkZSkge1xuICAgICAgICAgIGlmICgkKCcucGFuZWwnKS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwYW5lbFNpZGUgPSAkKCcucGFuZWwnKS5oYXNDbGFzcygncGFuZWwtbGVmdCcpID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXBhbmVsU2lkZSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGFwcC5wYW5lbFtwYW5lbFNpZGVdKSB7XG4gICAgICAgICAgcmV0dXJuIGFwcC5wYW5lbFtwYW5lbFNpZGVdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0ICRwYW5lbEVsID0gJChgLnBhbmVsLSR7cGFuZWxTaWRlfWApO1xuICAgICAgICBpZiAoJHBhbmVsRWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJldHVybiBuZXcgUGFuZWwoYXBwLCB7IGVsOiAkcGFuZWxFbCB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0KCkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcblxuICAgICAgLy8gQ3JlYXRlIFBhbmVsc1xuICAgICAgJCgnLnBhbmVsJykuZWFjaCgoaW5kZXgsIHBhbmVsRWwpID0+IHtcbiAgICAgICAgY29uc3Qgc2lkZSA9ICQocGFuZWxFbCkuaGFzQ2xhc3MoJ3BhbmVsLWxlZnQnKSA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgICAgIGFwcC5wYW5lbFtzaWRlXSA9IG5ldyBQYW5lbChhcHAsIHsgZWw6IHBhbmVsRWwsIHNpZGUgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICB9LFxuICBjbGlja3M6IHtcbiAgICAnLnBhbmVsLW9wZW4nOiBmdW5jdGlvbiBvcGVuKGNsaWNrZWRFbCwgZGF0YSA9IHt9KSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgbGV0IHNpZGUgPSAnbGVmdCc7XG4gICAgICBpZiAoZGF0YS5wYW5lbCA9PT0gJ3JpZ2h0JyB8fCAoJCgnLnBhbmVsJykubGVuZ3RoID09PSAxICYmICQoJy5wYW5lbCcpLmhhc0NsYXNzKCdwYW5lbC1yaWdodCcpKSkge1xuICAgICAgICBzaWRlID0gJ3JpZ2h0JztcbiAgICAgIH1cbiAgICAgIGFwcC5wYW5lbC5vcGVuKHNpZGUsIGRhdGEuYW5pbWF0ZSk7XG4gICAgfSxcbiAgICAnLnBhbmVsLWNsb3NlJzogZnVuY3Rpb24gY2xvc2UoY2xpY2tlZEVsLCBkYXRhID0ge30pIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBjb25zdCBzaWRlID0gZGF0YS5wYW5lbDtcbiAgICAgIGFwcC5wYW5lbC5jbG9zZShzaWRlLCBkYXRhLmFuaW1hdGUpO1xuICAgIH0sXG4gICAgJy5wYW5lbC1iYWNrZHJvcCc6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgICQoJy5wYW5lbC1hY3RpdmUnKS50cmlnZ2VyKCdwYW5lbDpiYWNrZHJvcC1jbGljaycpO1xuICAgICAgYXBwLmVtaXQoJ3BhbmVsQmFja2Ryb3BDbGljaycsICQoJy5wYW5lbC1hY3RpdmUnKVswXSk7XG4gICAgICBpZiAoYXBwLnBhcmFtcy5wYW5lbC5jbG9zZUJ5QmFja2Ryb3BDbGljaykgYXBwLnBhbmVsLmNsb3NlKCk7XG4gICAgfSxcbiAgfSxcbn07XG5cbnZhciBjYXJkID0ge1xuICBuYW1lOiAnY2FyZCcsXG59O1xuXG52YXIgY2hpcCA9IHtcbiAgbmFtZTogJ2NoaXAnLFxufTtcblxuLy8gRm9ybSBEYXRhXG5jb25zdCBGb3JtRGF0YSA9IHtcbiAgc3RvcmUoZm9ybSwgZGF0YSkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgbGV0IGZvcm1JZCA9IGZvcm07XG5cbiAgICBjb25zdCAkZm9ybUVsID0gJChmb3JtKTtcbiAgICBpZiAoJGZvcm1FbC5sZW5ndGggJiYgJGZvcm1FbC5pcygnZm9ybScpICYmICRmb3JtRWwuYXR0cignaWQnKSkge1xuICAgICAgZm9ybUlkID0gJGZvcm1FbC5hdHRyKCdpZCcpO1xuICAgIH1cbiAgICAvLyBTdG9yZSBmb3JtIGRhdGEgaW4gYXBwLmZvcm1zRGF0YVxuICAgIGFwcC5mb3JtLmRhdGFbYGZvcm0tJHtmb3JtSWR9YF0gPSBkYXRhO1xuXG4gICAgLy8gU3RvcmUgZm9ybSBkYXRhIGluIGxvY2FsIHN0b3JhZ2UgYWxzb1xuICAgIHRyeSB7XG4gICAgICB3aW5kb3cubG9jYWxTdG9yYWdlW2BmN2Zvcm0tJHtmb3JtSWR9YF0gPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfSxcbiAgZ2V0KGZvcm0pIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIGxldCBmb3JtSWQgPSBmb3JtO1xuXG4gICAgY29uc3QgJGZvcm1FbCA9ICQoZm9ybSk7XG4gICAgaWYgKCRmb3JtRWwubGVuZ3RoICYmICRmb3JtRWwuaXMoJ2Zvcm0nKSAmJiAkZm9ybUVsLmF0dHIoJ2lkJykpIHtcbiAgICAgIGZvcm1JZCA9ICRmb3JtRWwuYXR0cignaWQnKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaWYgKHdpbmRvdy5sb2NhbFN0b3JhZ2VbYGY3Zm9ybS0ke2Zvcm1JZH1gXSkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh3aW5kb3cubG9jYWxTdG9yYWdlW2BmN2Zvcm0tJHtmb3JtSWR9YF0pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICAgIGlmIChhcHAuZm9ybS5kYXRhW2Bmb3JtLSR7Zm9ybUlkfWBdKSB7XG4gICAgICByZXR1cm4gYXBwLmZvcm0uZGF0YVtgZm9ybS0ke2Zvcm1JZH1gXTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSxcbiAgZGVsZXRlKGZvcm0pIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIGxldCBmb3JtSWQgPSBmb3JtO1xuXG4gICAgY29uc3QgJGZvcm1FbCA9ICQoZm9ybSk7XG4gICAgaWYgKCRmb3JtRWwubGVuZ3RoICYmICRmb3JtRWwuaXMoJ2Zvcm0nKSAmJiAkZm9ybUVsLmF0dHIoJ2lkJykpIHtcbiAgICAgIGZvcm1JZCA9ICRmb3JtRWwuYXR0cignaWQnKTtcbiAgICB9XG5cbiAgICAvLyBEZWxldGUgZm9ybSBkYXRhIGZyb20gYXBwLmZvcm1zRGF0YVxuICAgIGlmIChhcHAuZm9ybS5kYXRhW2Bmb3JtLSR7Zm9ybUlkfWBdKSB7XG4gICAgICBhcHAuZm9ybS5kYXRhW2Bmb3JtLSR7Zm9ybUlkfWBdID0gJyc7XG4gICAgICBkZWxldGUgYXBwLmZvcm0uZGF0YVtgZm9ybS0ke2Zvcm1JZH1gXTtcbiAgICB9XG5cbiAgICAvLyBEZWxldGUgZm9ybSBkYXRhIGZyb20gbG9jYWwgc3RvcmFnZSBhbHNvXG4gICAgdHJ5IHtcbiAgICAgIGlmICh3aW5kb3cubG9jYWxTdG9yYWdlW2BmN2Zvcm0tJHtmb3JtSWR9YF0pIHtcbiAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZVtgZjdmb3JtLSR7Zm9ybUlkfWBdID0gJyc7XG4gICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShgZjdmb3JtLSR7Zm9ybUlkfWApO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9LFxufTtcblxuLy8gRm9ybSBTdG9yYWdlXG5jb25zdCBGb3JtU3RvcmFnZSA9IHtcbiAgaW5pdChmb3JtRWwpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIGNvbnN0ICRmb3JtRWwgPSAkKGZvcm1FbCk7XG4gICAgY29uc3QgZm9ybUlkID0gJGZvcm1FbC5hdHRyKCdpZCcpO1xuICAgIGlmICghZm9ybUlkKSByZXR1cm47XG4gICAgY29uc3QgaW5pdGlhbERhdGEgPSBhcHAuZm9ybS5kYXRhLmdldChmb3JtSWQpO1xuICAgIGlmIChpbml0aWFsRGF0YSkge1xuICAgICAgYXBwLmZvcm0uZnJvbURhdGEoJGZvcm1FbCwgaW5pdGlhbERhdGEpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzdG9yZSgpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBhcHAuZm9ybS50b0RhdGEoJGZvcm1FbCk7XG4gICAgICBpZiAoIWRhdGEpIHJldHVybjtcbiAgICAgIGFwcC5mb3JtLmRhdGEuc3RvcmUoZm9ybUlkLCBkYXRhKTtcbiAgICAgICRmb3JtRWwudHJpZ2dlcignZm9ybTpzdG9yZWRhdGEnLCBkYXRhKTtcbiAgICAgIGFwcC5lbWl0KCdmb3JtU3RvcmVEYXRhJywgJGZvcm1FbFswXSwgZGF0YSk7XG4gICAgfVxuICAgICRmb3JtRWwub24oJ2NoYW5nZSBzdWJtaXQnLCBzdG9yZSk7XG4gIH0sXG4gIGRlc3Ryb3koZm9ybUVsKSB7XG4gICAgY29uc3QgJGZvcm1FbCA9ICQoZm9ybUVsKTtcbiAgICAkZm9ybUVsLm9mZignY2hhbmdlIHN1Ym1pdCcpO1xuICB9LFxufTtcblxuLy8gRm9ybSBUby9Gcm9tIERhdGFcbmZ1bmN0aW9uIGZvcm1Ub0RhdGEoZm9ybUVsKSB7XG4gIGNvbnN0IGFwcCA9IHRoaXM7XG4gIGNvbnN0ICRmb3JtRWwgPSAkKGZvcm1FbCkuZXEoMCk7XG4gIGlmICgkZm9ybUVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAvLyBGb3JtIGRhdGFcbiAgY29uc3QgZGF0YSA9IHt9O1xuXG4gIC8vIFNraXAgaW5wdXQgdHlwZXNcbiAgY29uc3Qgc2tpcFR5cGVzID0gWydzdWJtaXQnLCAnaW1hZ2UnLCAnYnV0dG9uJywgJ2ZpbGUnXTtcbiAgY29uc3Qgc2tpcE5hbWVzID0gW107XG4gICRmb3JtRWwuZmluZCgnaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEnKS5lYWNoKChpbnB1dEluZGV4LCBpbnB1dEVsKSA9PiB7XG4gICAgY29uc3QgJGlucHV0RWwgPSAkKGlucHV0RWwpO1xuICAgIGNvbnN0IG5hbWUgPSAkaW5wdXRFbC5hdHRyKCduYW1lJyk7XG4gICAgY29uc3QgdHlwZSA9ICRpbnB1dEVsLmF0dHIoJ3R5cGUnKTtcbiAgICBjb25zdCB0YWcgPSBpbnB1dEVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKHNraXBUeXBlcy5pbmRleE9mKHR5cGUpID49IDApIHJldHVybjtcbiAgICBpZiAoc2tpcE5hbWVzLmluZGV4T2YobmFtZSkgPj0gMCB8fCAhbmFtZSkgcmV0dXJuO1xuICAgIGlmICh0YWcgPT09ICdzZWxlY3QnICYmICRpbnB1dEVsLnByb3AoJ211bHRpcGxlJykpIHtcbiAgICAgIHNraXBOYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgZGF0YVtuYW1lXSA9IFtdO1xuICAgICAgJGZvcm1FbC5maW5kKGBzZWxlY3RbbmFtZT1cIiR7bmFtZX1cIl0gb3B0aW9uYCkuZWFjaCgoaW5kZXgsIGVsKSA9PiB7XG4gICAgICAgIGlmIChlbC5zZWxlY3RlZCkgZGF0YVtuYW1lXS5wdXNoKGVsLnZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnY2hlY2tib3gnIDpcbiAgICAgICAgICBza2lwTmFtZXMucHVzaChuYW1lKTtcbiAgICAgICAgICBkYXRhW25hbWVdID0gW107XG4gICAgICAgICAgJGZvcm1FbC5maW5kKGBpbnB1dFtuYW1lPVwiJHtuYW1lfVwiXWApLmVhY2goKGluZGV4LCBlbCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVsLmNoZWNrZWQpIGRhdGFbbmFtZV0ucHVzaChlbC52YWx1ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3JhZGlvJyA6XG4gICAgICAgICAgc2tpcE5hbWVzLnB1c2gobmFtZSk7XG4gICAgICAgICAgJGZvcm1FbC5maW5kKGBpbnB1dFtuYW1lPVwiJHtuYW1lfVwiXWApLmVhY2goKGluZGV4LCBlbCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVsLmNoZWNrZWQpIGRhdGFbbmFtZV0gPSBlbC52YWx1ZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdCA6XG4gICAgICAgICAgZGF0YVtuYW1lXSA9ICRpbnB1dEVsLnZhbCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gICRmb3JtRWwudHJpZ2dlcignZm9ybTp0b2RhdGEnLCBkYXRhKTtcbiAgYXBwLmVtaXQoJ2Zvcm1Ub0RhdGEnLCAkZm9ybUVsWzBdLCBkYXRhKTtcblxuICByZXR1cm4gZGF0YTtcbn1cbmZ1bmN0aW9uIGZvcm1Gcm9tRGF0YShmb3JtRWwsIGZvcm1EYXRhKSB7XG4gIGNvbnN0IGFwcCA9IHRoaXM7XG4gIGNvbnN0ICRmb3JtRWwgPSAkKGZvcm1FbCkuZXEoMCk7XG4gIGlmICghJGZvcm1FbC5sZW5ndGgpIHJldHVybjtcblxuICBsZXQgZGF0YSA9IGZvcm1EYXRhO1xuICBjb25zdCBmb3JtSWQgPSAkZm9ybUVsLmF0dHIoJ2lkJyk7XG5cbiAgaWYgKCFkYXRhICYmIGZvcm1JZCkge1xuICAgIGRhdGEgPSBhcHAuZm9ybS5kYXRhLmdldChmb3JtSWQpO1xuICB9XG5cbiAgaWYgKCFkYXRhKSByZXR1cm47XG5cbiAgLy8gU2tpcCBpbnB1dCB0eXBlc1xuICBjb25zdCBza2lwVHlwZXMgPSBbJ3N1Ym1pdCcsICdpbWFnZScsICdidXR0b24nLCAnZmlsZSddO1xuICBjb25zdCBza2lwTmFtZXMgPSBbXTtcblxuICAkZm9ybUVsLmZpbmQoJ2lucHV0LCBzZWxlY3QsIHRleHRhcmVhJykuZWFjaCgoaW5wdXRJbmRleCwgaW5wdXRFbCkgPT4ge1xuICAgIGNvbnN0ICRpbnB1dEVsID0gJChpbnB1dEVsKTtcbiAgICBjb25zdCBuYW1lID0gJGlucHV0RWwuYXR0cignbmFtZScpO1xuICAgIGNvbnN0IHR5cGUgPSAkaW5wdXRFbC5hdHRyKCd0eXBlJyk7XG4gICAgY29uc3QgdGFnID0gaW5wdXRFbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmICh0eXBlb2YgZGF0YVtuYW1lXSA9PT0gJ3VuZGVmaW5lZCcgfHwgZGF0YVtuYW1lXSA9PT0gbnVsbCkgcmV0dXJuO1xuICAgIGlmIChza2lwVHlwZXMuaW5kZXhPZih0eXBlKSA+PSAwKSByZXR1cm47XG4gICAgaWYgKHNraXBOYW1lcy5pbmRleE9mKG5hbWUpID49IDAgfHwgIW5hbWUpIHJldHVybjtcbiAgICBpZiAodGFnID09PSAnc2VsZWN0JyAmJiAkaW5wdXRFbC5wcm9wKCdtdWx0aXBsZScpKSB7XG4gICAgICBza2lwTmFtZXMucHVzaChuYW1lKTtcbiAgICAgICRmb3JtRWwuZmluZChgc2VsZWN0W25hbWU9XCIke25hbWV9XCJdIG9wdGlvbmApLmVhY2goKGluZGV4LCBlbCkgPT4ge1xuICAgICAgICBjb25zdCBzZWxlY3RFbCA9IGVsO1xuICAgICAgICBpZiAoZGF0YVtuYW1lXS5pbmRleE9mKGVsLnZhbHVlKSA+PSAwKSBzZWxlY3RFbC5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgIGVsc2Ugc2VsZWN0RWwuc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnY2hlY2tib3gnIDpcbiAgICAgICAgICBza2lwTmFtZXMucHVzaChuYW1lKTtcbiAgICAgICAgICAkZm9ybUVsLmZpbmQoYGlucHV0W25hbWU9XCIke25hbWV9XCJdYCkuZWFjaCgoaW5kZXgsIGVsKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjaGVja2JveEVsID0gZWw7XG4gICAgICAgICAgICBpZiAoZGF0YVtuYW1lXS5pbmRleE9mKGVsLnZhbHVlKSA+PSAwKSBjaGVja2JveEVsLmNoZWNrZWQgPSB0cnVlO1xuICAgICAgICAgICAgZWxzZSBjaGVja2JveEVsLmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncmFkaW8nIDpcbiAgICAgICAgICBza2lwTmFtZXMucHVzaChuYW1lKTtcbiAgICAgICAgICAkZm9ybUVsLmZpbmQoYGlucHV0W25hbWU9XCIke25hbWV9XCJdYCkuZWFjaCgoaW5kZXgsIGVsKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByYWRpb0VsID0gZWw7XG4gICAgICAgICAgICBpZiAoZGF0YVtuYW1lXSA9PT0gZWwudmFsdWUpIHJhZGlvRWwuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICBlbHNlIHJhZGlvRWwuY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0IDpcbiAgICAgICAgICAkaW5wdXRFbC52YWwoZGF0YVtuYW1lXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0YWcgPT09ICdzZWxlY3QnIHx8IHRhZyA9PT0gJ2lucHV0JyB8fCB0YWcgPT09ICd0ZXh0YXJlYScpIHtcbiAgICAgICRpbnB1dEVsLnRyaWdnZXIoJ2NoYW5nZScsICdmcm9tZGF0YScpO1xuICAgIH1cbiAgfSk7XG4gICRmb3JtRWwudHJpZ2dlcignZm9ybTpmcm9tZGF0YScsIGRhdGEpO1xuICBhcHAuZW1pdCgnZm9ybUZyb21EYXRhJywgJGZvcm1FbFswXSwgZGF0YSk7XG59XG5cbmZ1bmN0aW9uIGluaXRBamF4Rm9ybSgpIHtcbiAgY29uc3QgYXBwID0gdGhpcztcblxuICBmdW5jdGlvbiBvblN1Ym1pdENoYW5nZShlLCBmcm9tRGF0YSkge1xuICAgIGNvbnN0ICRmb3JtRWwgPSAkKHRoaXMpO1xuICAgIGlmIChlLnR5cGUgPT09ICdjaGFuZ2UnICYmICEkZm9ybUVsLmhhc0NsYXNzKCdmb3JtLWFqYXgtc3VibWl0LW9uY2hhbmdlJykpIHJldHVybjtcbiAgICBpZiAoZS50eXBlID09PSAnc3VibWl0JykgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgaWYgKGUudHlwZSA9PT0gJ2NoYW5nZScgJiYgZnJvbURhdGEgPT09ICdmcm9tZGF0YScpIHJldHVybjtcblxuICAgIGNvbnN0IG1ldGhvZCA9ICgkZm9ybUVsLmF0dHIoJ21ldGhvZCcpIHx8ICdHRVQnKS50b1VwcGVyQ2FzZSgpO1xuICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gJGZvcm1FbC5wcm9wKCdlbmN0eXBlJykgfHwgJGZvcm1FbC5hdHRyKCdlbmN0eXBlJyk7XG5cbiAgICBjb25zdCB1cmwgPSAkZm9ybUVsLmF0dHIoJ2FjdGlvbicpO1xuICAgIGlmICghdXJsKSByZXR1cm47XG5cbiAgICBsZXQgZGF0YTtcbiAgICBpZiAobWV0aG9kID09PSAnUE9TVCcpIGRhdGEgPSBuZXcgRm9ybURhdGEoJGZvcm1FbFswXSk7XG4gICAgZWxzZSBkYXRhID0gJC5zZXJpYWxpemVPYmplY3QoYXBwLmZvcm0udG9EYXRhKCRmb3JtRWxbMF0pKTtcblxuICAgIGNvbnN0IHhociA9ICQuYWpheCh7XG4gICAgICBtZXRob2QsXG4gICAgICB1cmwsXG4gICAgICBjb250ZW50VHlwZSxcbiAgICAgIGRhdGEsXG4gICAgICBiZWZvcmVTZW5kKCkge1xuICAgICAgICAkZm9ybUVsLnRyaWdnZXIoJ2Zvcm1hamF4OmJlZm9yZXNlbmQnLCBkYXRhLCB4aHIpO1xuICAgICAgICBhcHAuZW1pdCgnZm9ybUFqYXhCZWZvcmVTZW5kJywgJGZvcm1FbFswXSwgZGF0YSwgeGhyKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcigpIHtcbiAgICAgICAgJGZvcm1FbC50cmlnZ2VyKCdmb3JtYWpheDplcnJvcicsIGRhdGEsIHhocik7XG4gICAgICAgIGFwcC5lbWl0KCdmb3JtQWpheEVycm9yJywgJGZvcm1FbFswXSwgZGF0YSwgeGhyKTtcbiAgICAgIH0sXG4gICAgICBjb21wbGV0ZSgpIHtcbiAgICAgICAgJGZvcm1FbC50cmlnZ2VyKCdmb3JtYWpheDpjb21wbGV0ZScsIGRhdGEsIHhocik7XG4gICAgICAgIGFwcC5lbWl0KCdmb3JtQWpheENvbXBsZXRlJywgJGZvcm1FbFswXSwgZGF0YSwgeGhyKTtcbiAgICAgIH0sXG4gICAgICBzdWNjZXNzKCkge1xuICAgICAgICAkZm9ybUVsLnRyaWdnZXIoJ2Zvcm1hamF4OnN1Y2Nlc3MnLCBkYXRhLCB4aHIpO1xuICAgICAgICBhcHAuZW1pdCgnZm9ybUFqYXhTdWNjZXNzJywgJGZvcm1FbFswXSwgZGF0YSwgeGhyKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbiAgJChkb2N1bWVudCkub24oJ3N1Ym1pdCBjaGFuZ2UnLCAnZm9ybS5mb3JtLWFqYXgtc3VibWl0LCBmb3JtLmZvcm0tYWpheC1zdWJtaXQtb25jaGFuZ2UnLCBvblN1Ym1pdENoYW5nZSk7XG59XG5cbnZhciBmb3JtID0ge1xuICBuYW1lOiAnZm9ybScsXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIFV0aWxzLmV4dGVuZChhcHAsIHtcbiAgICAgIGZvcm06IHtcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHN0b3JlOiBGb3JtRGF0YS5zdG9yZS5iaW5kKGFwcCksXG4gICAgICAgICAgZ2V0OiBGb3JtRGF0YS5nZXQuYmluZChhcHApLFxuICAgICAgICAgIGRlbGV0ZTogRm9ybURhdGEuZGVsZXRlLmJpbmQoYXBwKSxcbiAgICAgICAgfSxcbiAgICAgICAgdG9EYXRhOiBmb3JtVG9EYXRhLmJpbmQoYXBwKSxcbiAgICAgICAgZnJvbURhdGE6IGZvcm1Gcm9tRGF0YS5iaW5kKGFwcCksXG4gICAgICAgIHN0b3JhZ2U6IHtcbiAgICAgICAgICBpbml0OiBGb3JtU3RvcmFnZS5pbml0LmJpbmQoYXBwKSxcbiAgICAgICAgICBkZXN0cm95OiBGb3JtU3RvcmFnZS5kZXN0cm95LmJpbmQoYXBwKSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdCgpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBpbml0QWpheEZvcm0uY2FsbChhcHApO1xuICAgIH0sXG4gICAgdGFiQmVmb3JlUmVtb3ZlKHRhYkVsKSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgJCh0YWJFbCkuZmluZCgnLmZvcm0tc3RvcmUtZGF0YScpLmVhY2goKGluZGV4LCBmb3JtRWwpID0+IHtcbiAgICAgICAgYXBwLmZvcm0uc3RvcmFnZS5kZXN0cm95KGZvcm1FbCk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHRhYk1vdW50ZWQodGFiRWwpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICAkKHRhYkVsKS5maW5kKCcuZm9ybS1zdG9yZS1kYXRhJykuZWFjaCgoaW5kZXgsIGZvcm1FbCkgPT4ge1xuICAgICAgICBhcHAuZm9ybS5zdG9yYWdlLmluaXQoZm9ybUVsKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcGFnZUJlZm9yZVJlbW92ZShwYWdlKSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgcGFnZS4kZWwuZmluZCgnLmZvcm0tc3RvcmUtZGF0YScpLmVhY2goKGluZGV4LCBmb3JtRWwpID0+IHtcbiAgICAgICAgYXBwLmZvcm0uc3RvcmFnZS5kZXN0cm95KGZvcm1FbCk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHBhZ2VJbml0KHBhZ2UpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBwYWdlLiRlbC5maW5kKCcuZm9ybS1zdG9yZS1kYXRhJykuZWFjaCgoaW5kZXgsIGZvcm1FbCkgPT4ge1xuICAgICAgICBhcHAuZm9ybS5zdG9yYWdlLmluaXQoZm9ybUVsKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBJbnB1dCA9IHtcbiAgaWdub3JlVHlwZXM6IFsnY2hlY2tib3gnLCAnYnV0dG9uJywgJ3N1Ym1pdCcsICdyYW5nZScsICdyYWRpbycsICdpbWFnZSddLFxuICBjcmVhdGVUZXh0YXJlYVJlc2l6YWJsZVNoYWRvdygpIHtcbiAgICBjb25zdCAkc2hhZG93RWwgPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJykpO1xuICAgICRzaGFkb3dFbC5hZGRDbGFzcygndGV4dGFyZWEtcmVzaXphYmxlLXNoYWRvdycpO1xuICAgICRzaGFkb3dFbC5wcm9wKHtcbiAgICAgIGRpc2FibGVkOiB0cnVlLFxuICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgfSk7XG4gICAgSW5wdXQudGV4dGFyZWFSZXNpemFibGVTaGFkb3cgPSAkc2hhZG93RWw7XG4gIH0sXG4gIHRleHRhcmVhUmVzaXphYmxlU2hhZG93OiB1bmRlZmluZWQsXG4gIHJlc2l6ZVRleHRhcmVhKHRleHRhcmVhRWwpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIGNvbnN0ICR0ZXh0YXJlYUVsID0gJCh0ZXh0YXJlYUVsKTtcbiAgICBpZiAoIUlucHV0LnRleHRhcmVhUmVzaXphYmxlU2hhZG93KSB7XG4gICAgICBJbnB1dC5jcmVhdGVUZXh0YXJlYVJlc2l6YWJsZVNoYWRvdygpO1xuICAgIH1cbiAgICBjb25zdCAkc2hhZG93RWwgPSBJbnB1dC50ZXh0YXJlYVJlc2l6YWJsZVNoYWRvdztcbiAgICBpZiAoISR0ZXh0YXJlYUVsLmxlbmd0aCkgcmV0dXJuO1xuICAgIGlmICghJHRleHRhcmVhRWwuaGFzQ2xhc3MoJ3Jlc2l6YWJsZScpKSByZXR1cm47XG4gICAgaWYgKElucHV0LnRleHRhcmVhUmVzaXphYmxlU2hhZG93LnBhcmVudHMoKS5sZW5ndGggPT09IDApIHtcbiAgICAgIGFwcC5yb290LmFwcGVuZCgkc2hhZG93RWwpO1xuICAgIH1cblxuICAgIGNvbnN0IHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCR0ZXh0YXJlYUVsWzBdKTtcbiAgICAoJ3BhZGRpbmcgbWFyZ2luIHdpZHRoIGZvbnQgYm9yZGVyIGJveC1zaXppbmcgZGlzcGxheScpLnNwbGl0KCcgJykuZm9yRWFjaCgoc3R5bGUpID0+IHtcbiAgICAgICRzaGFkb3dFbC5jc3Moc3R5bGUsIHN0eWxlc1tzdHlsZV0pO1xuICAgIH0pO1xuICAgIGNvbnN0IGN1cnJlbnRIZWlnaHQgPSAkdGV4dGFyZWFFbFswXS5jbGllbnRIZWlnaHQ7XG5cbiAgICAkc2hhZG93RWwudmFsKCcnKTtcbiAgICBjb25zdCBpbml0aWFsSGVpZ2h0ID0gJHNoYWRvd0VsWzBdLnNjcm9sbEhlaWdodDtcblxuICAgICRzaGFkb3dFbC52YWwoJHRleHRhcmVhRWwudmFsKCkpO1xuICAgICRzaGFkb3dFbC5jc3MoJ2hlaWdodCcsIDApO1xuICAgIGNvbnN0IHNjcm9sbEhlaWdodCA9ICRzaGFkb3dFbFswXS5zY3JvbGxIZWlnaHQ7XG4gICAgaWYgKGN1cnJlbnRIZWlnaHQgIT09IHNjcm9sbEhlaWdodCkge1xuICAgICAgaWYgKHNjcm9sbEhlaWdodCA+IGluaXRpYWxIZWlnaHQpIHtcbiAgICAgICAgJHRleHRhcmVhRWwuY3NzKCdoZWlnaHQnLCBgJHtzY3JvbGxIZWlnaHR9cHhgKTtcbiAgICAgICAgJHRleHRhcmVhRWwudHJpZ2dlcigndGV4dGFyZWE6cmVzaXplJywgaW5pdGlhbEhlaWdodCwgY3VycmVudEhlaWdodCwgc2Nyb2xsSGVpZ2h0KTtcbiAgICAgIH0gZWxzZSBpZiAoc2Nyb2xsSGVpZ2h0IDwgY3VycmVudEhlaWdodCkge1xuICAgICAgICAkdGV4dGFyZWFFbC5jc3MoJ2hlaWdodCcsICcnKTtcbiAgICAgICAgJHRleHRhcmVhRWwudHJpZ2dlcigndGV4dGFyZWE6cmVzaXplJywgaW5pdGlhbEhlaWdodCwgY3VycmVudEhlaWdodCwgaW5pdGlhbEhlaWdodCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICB2YWxpZGF0ZShpbnB1dEVsKSB7XG4gICAgY29uc3QgJGlucHV0RWwgPSAkKGlucHV0RWwpO1xuICAgIGlmICghJGlucHV0RWwubGVuZ3RoKSByZXR1cm47XG4gICAgY29uc3QgJGl0ZW1JbnB1dEVsID0gJGlucHV0RWwucGFyZW50cygnLml0ZW0taW5wdXQnKTtcbiAgICBjb25zdCB2YWxpZGl0eSA9ICRpbnB1dEVsWzBdLnZhbGlkaXR5O1xuICAgIGNvbnN0IHZhbGlkYXRpb25NZXNzYWdlID0gJGlucHV0RWwuZGF0YXNldCgpLmVycm9yTWVzc2FnZSB8fCAkaW5wdXRFbFswXS52YWxpZGF0aW9uTWVzc2FnZSB8fCAnJztcbiAgICBpZiAoIXZhbGlkaXR5KSByZXR1cm47XG4gICAgaWYgKCF2YWxpZGl0eS52YWxpZCkge1xuICAgICAgbGV0ICRlcnJvckVsID0gJGlucHV0RWwubmV4dEFsbCgnLml0ZW0taW5wdXQtZXJyb3ItbWVzc2FnZScpO1xuICAgICAgaWYgKHZhbGlkYXRpb25NZXNzYWdlKSB7XG4gICAgICAgIGlmICgkZXJyb3JFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAkZXJyb3JFbCA9ICQoJzxkaXYgY2xhc3M9XCJpdGVtLWlucHV0LWVycm9yLW1lc3NhZ2VcIj48L2Rpdj4nKTtcbiAgICAgICAgICAkZXJyb3JFbC5pbnNlcnRBZnRlcigkaW5wdXRFbCk7XG4gICAgICAgIH1cbiAgICAgICAgJGVycm9yRWwudGV4dCh2YWxpZGF0aW9uTWVzc2FnZSk7XG4gICAgICB9XG4gICAgICBpZiAoJGVycm9yRWwubGVuZ3RoID4gMCkge1xuICAgICAgICAkaXRlbUlucHV0RWwuYWRkQ2xhc3MoJ2l0ZW0taW5wdXQtd2l0aC1lcnJvci1tZXNzYWdlJyk7XG4gICAgICB9XG4gICAgICAkaXRlbUlucHV0RWwuYWRkQ2xhc3MoJ2l0ZW0taW5wdXQtaW52YWxpZCcpO1xuICAgICAgJGlucHV0RWwuYWRkQ2xhc3MoJ2lucHV0LWludmFsaWQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJGl0ZW1JbnB1dEVsLnJlbW92ZUNsYXNzKCdpdGVtLWlucHV0LWludmFsaWQgaXRlbS1pbnB1dC13aXRoLWVycm9yLW1lc3NhZ2UnKTtcbiAgICAgICRpbnB1dEVsLnJlbW92ZUNsYXNzKCdpbnB1dC1pbnZhbGlkJyk7XG4gICAgfVxuICB9LFxuICB2YWxpZGF0ZUlucHV0cyhlbCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgJChlbCkuZmluZCgnaW5wdXQsIHRleHRhcmVhLCBzZWxlY3QnKS5lYWNoKChpbmRleCwgaW5wdXRFbCkgPT4ge1xuICAgICAgYXBwLmlucHV0LnZhbGlkYXRlKGlucHV0RWwpO1xuICAgIH0pO1xuICB9LFxuICBmb2N1cyhpbnB1dEVsKSB7XG4gICAgY29uc3QgJGlucHV0RWwgPSAkKGlucHV0RWwpO1xuICAgIGNvbnN0IHR5cGUgPSAkaW5wdXRFbC5hdHRyKCd0eXBlJyk7XG4gICAgaWYgKElucHV0Lmlnbm9yZVR5cGVzLmluZGV4T2YodHlwZSkgPj0gMCkgcmV0dXJuO1xuICAgIGNvbnN0ICRpdGVtSW5wdXRFbCA9ICRpbnB1dEVsLnBhcmVudHMoJy5pdGVtLWlucHV0Jyk7XG4gICAgJGl0ZW1JbnB1dEVsLmFkZENsYXNzKCdpdGVtLWlucHV0LWZvY3VzZWQnKTtcbiAgICAkaW5wdXRFbC5hZGRDbGFzcygnaW5wdXQtZm9jdXNlZCcpO1xuICB9LFxuICBibHVyKGlucHV0RWwpIHtcbiAgICAkKGlucHV0RWwpLnBhcmVudHMoJy5pdGVtLWlucHV0JykucmVtb3ZlQ2xhc3MoJ2l0ZW0taW5wdXQtZm9jdXNlZCcpO1xuICAgICQoaW5wdXRFbCkucmVtb3ZlQ2xhc3MoJ2lucHV0LWZvY3VzZWQnKTtcbiAgfSxcbiAgY2hlY2tFbXB0eVN0YXRlKGlucHV0RWwpIHtcbiAgICBjb25zdCAkaW5wdXRFbCA9ICQoaW5wdXRFbCk7XG4gICAgY29uc3QgdmFsdWUgPSAkaW5wdXRFbC52YWwoKTtcbiAgICBjb25zdCAkaXRlbUlucHV0RWwgPSAkaW5wdXRFbC5wYXJlbnRzKCcuaXRlbS1pbnB1dCcpO1xuICAgIGlmICgodmFsdWUgJiYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUudHJpbSgpICE9PSAnJykpIHx8IChBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPiAwKSkge1xuICAgICAgJGl0ZW1JbnB1dEVsLmFkZENsYXNzKCdpdGVtLWlucHV0LXdpdGgtdmFsdWUnKTtcbiAgICAgICRpbnB1dEVsLmFkZENsYXNzKCdpbnB1dC13aXRoLXZhbHVlJyk7XG4gICAgICAkaW5wdXRFbC50cmlnZ2VyKCdpbnB1dDpub3RlbXB0eScpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkaXRlbUlucHV0RWwucmVtb3ZlQ2xhc3MoJ2l0ZW0taW5wdXQtd2l0aC12YWx1ZScpO1xuICAgICAgJGlucHV0RWwucmVtb3ZlQ2xhc3MoJ2lucHV0LXdpdGgtdmFsdWUnKTtcbiAgICAgICRpbnB1dEVsLnRyaWdnZXIoJ2lucHV0OmVtcHR5Jyk7XG4gICAgfVxuICB9LFxuICBpbml0KCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgSW5wdXQuY3JlYXRlVGV4dGFyZWFSZXNpemFibGVTaGFkb3coKTtcbiAgICBmdW5jdGlvbiBvbkZvY3VzKCkge1xuICAgICAgYXBwLmlucHV0LmZvY3VzKHRoaXMpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkJsdXIoKSB7XG4gICAgICBjb25zdCAkaW5wdXRFbCA9ICQodGhpcyk7XG4gICAgICBjb25zdCB0YWcgPSAkaW5wdXRFbFswXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgYXBwLmlucHV0LmJsdXIoJGlucHV0RWwpO1xuICAgICAgaWYgKCRpbnB1dEVsLmRhdGFzZXQoKS52YWxpZGF0ZSB8fCAkaW5wdXRFbC5hdHRyKCd2YWxpZGF0ZScpICE9PSBudWxsKSB7XG4gICAgICAgIGFwcC5pbnB1dC52YWxpZGF0ZSgkaW5wdXRFbCk7XG4gICAgICB9XG4gICAgICAvLyBSZXNpemUgdGV4dGFyZWFcbiAgICAgIGlmICh0YWcgPT09ICd0ZXh0YXJlYScgJiYgJGlucHV0RWwuaGFzQ2xhc3MoJ3Jlc2l6YWJsZScpKSB7XG4gICAgICAgIGlmIChJbnB1dC50ZXh0YXJlYVJlc2l6YWJsZVNoYWRvdykgSW5wdXQudGV4dGFyZWFSZXNpemFibGVTaGFkb3cucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uQ2hhbmdlKCkge1xuICAgICAgY29uc3QgJGlucHV0RWwgPSAkKHRoaXMpO1xuICAgICAgY29uc3QgdHlwZSA9ICRpbnB1dEVsLmF0dHIoJ3R5cGUnKTtcbiAgICAgIGNvbnN0IHRhZyA9ICRpbnB1dEVsWzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAoSW5wdXQuaWdub3JlVHlwZXMuaW5kZXhPZih0eXBlKSA+PSAwKSByZXR1cm47XG5cbiAgICAgIC8vIENoZWNrIEVtcHR5IFN0YXRlXG4gICAgICBhcHAuaW5wdXQuY2hlY2tFbXB0eVN0YXRlKCRpbnB1dEVsKTtcblxuICAgICAgLy8gQ2hlY2sgdmFsaWRhdGlvblxuICAgICAgaWYgKCRpbnB1dEVsLmRhdGFzZXQoKS52YWxpZGF0ZSB8fCAkaW5wdXRFbC5hdHRyKCd2YWxpZGF0ZScpICE9PSBudWxsKSB7XG4gICAgICAgIGFwcC5pbnB1dC52YWxpZGF0ZSgkaW5wdXRFbCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlc2l6ZSB0ZXh0YXJlYVxuICAgICAgaWYgKHRhZyA9PT0gJ3RleHRhcmVhJyAmJiAkaW5wdXRFbC5oYXNDbGFzcygncmVzaXphYmxlJykpIHtcbiAgICAgICAgYXBwLmlucHV0LnJlc2l6ZVRleHRhcmVhKCRpbnB1dEVsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gb25JbnZhbGlkKGUpIHtcbiAgICAgIGNvbnN0ICRpbnB1dEVsID0gJCh0aGlzKTtcbiAgICAgIGlmICgkaW5wdXRFbC5kYXRhc2V0KCkudmFsaWRhdGUgfHwgJGlucHV0RWwuYXR0cigndmFsaWRhdGUnKSAhPT0gbnVsbCkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGFwcC5pbnB1dC52YWxpZGF0ZSgkaW5wdXRFbCk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNsZWFySW5wdXQoKSB7XG4gICAgICBjb25zdCAkY2xpY2tlZCA9ICQodGhpcyk7XG4gICAgICBjb25zdCAkaW5wdXRFbCA9ICRjbGlja2VkLnNpYmxpbmdzKCdpbnB1dCwgdGV4dGFyZWEnKS5lcSgwKTtcbiAgICAgIGNvbnN0IHByZXZpb3VzVmFsdWUgPSAkaW5wdXRFbC52YWwoKTtcbiAgICAgICRpbnB1dEVsXG4gICAgICAgIC52YWwoJycpXG4gICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAuZm9jdXMoKVxuICAgICAgICAudHJpZ2dlcignaW5wdXQ6Y2xlYXInLCBwcmV2aW91c1ZhbHVlKTtcbiAgICB9XG4gICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5pbnB1dC1jbGVhci1idXR0b24nLCBjbGVhcklucHV0KTtcbiAgICAkKGRvY3VtZW50KS5vbignY2hhbmdlIGlucHV0JywgJ2lucHV0LCB0ZXh0YXJlYSwgc2VsZWN0Jywgb25DaGFuZ2UsIHRydWUpO1xuICAgICQoZG9jdW1lbnQpLm9uKCdmb2N1cycsICdpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCcsIG9uRm9jdXMsIHRydWUpO1xuICAgICQoZG9jdW1lbnQpLm9uKCdibHVyJywgJ2lucHV0LCB0ZXh0YXJlYSwgc2VsZWN0Jywgb25CbHVyLCB0cnVlKTtcbiAgICAkKGRvY3VtZW50KS5vbignaW52YWxpZCcsICdpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCcsIG9uSW52YWxpZCwgdHJ1ZSk7XG4gIH0sXG59O1xuXG52YXIgaW5wdXQgPSB7XG4gIG5hbWU6ICdpbnB1dCcsXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIFV0aWxzLmV4dGVuZChhcHAsIHtcbiAgICAgIGlucHV0OiB7XG4gICAgICAgIGZvY3VzOiBJbnB1dC5mb2N1cy5iaW5kKGFwcCksXG4gICAgICAgIGJsdXI6IElucHV0LmJsdXIuYmluZChhcHApLFxuICAgICAgICB2YWxpZGF0ZTogSW5wdXQudmFsaWRhdGUuYmluZChhcHApLFxuICAgICAgICB2YWxpZGF0ZUlucHV0czogSW5wdXQudmFsaWRhdGUuYmluZChhcHApLFxuICAgICAgICBjaGVja0VtcHR5U3RhdGU6IElucHV0LmNoZWNrRW1wdHlTdGF0ZS5iaW5kKGFwcCksXG4gICAgICAgIHJlc2l6ZVRleHRhcmVhOiBJbnB1dC5yZXNpemVUZXh0YXJlYS5iaW5kKGFwcCksXG4gICAgICAgIGluaXQ6IElucHV0LmluaXQuYmluZChhcHApLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0KCkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGFwcC5pbnB1dC5pbml0KCk7XG4gICAgfSxcbiAgICB0YWJNb3VudGVkKHRhYkVsKSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgY29uc3QgJHRhYkVsID0gJCh0YWJFbCk7XG4gICAgICAkdGFiRWwuZmluZCgnLml0ZW0taW5wdXQnKS5lYWNoKChpdGVtSW5wdXRJbmRleCwgaXRlbUlucHV0RWwpID0+IHtcbiAgICAgICAgY29uc3QgJGl0ZW1JbnB1dEVsID0gJChpdGVtSW5wdXRFbCk7XG4gICAgICAgICRpdGVtSW5wdXRFbC5maW5kKCdpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYScpLmVhY2goKGlucHV0SW5kZXgsIGlucHV0RWwpID0+IHtcbiAgICAgICAgICBjb25zdCAkaW5wdXRFbCA9ICQoaW5wdXRFbCk7XG4gICAgICAgICAgaWYgKElucHV0Lmlnbm9yZVR5cGVzLmluZGV4T2YoJGlucHV0RWwuYXR0cigndHlwZScpKSA+PSAwKSByZXR1cm47XG4gICAgICAgICAgYXBwLmlucHV0LmNoZWNrRW1wdHlTdGF0ZSgkaW5wdXRFbCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICAkdGFiRWwuZmluZCgndGV4dGFyZWEucmVzaXphYmxlJykuZWFjaCgodGV4dGFyZWFJbmRleCwgdGV4dGFyZWFFbCkgPT4ge1xuICAgICAgICBhcHAuaW5wdXQucmVzaXplVGV4dGFyZWEodGV4dGFyZWFFbCk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHBhZ2VJbml0KHBhZ2UpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBjb25zdCAkcGFnZUVsID0gcGFnZS4kZWw7XG4gICAgICAkcGFnZUVsLmZpbmQoJy5pdGVtLWlucHV0JykuZWFjaCgoaXRlbUlucHV0SW5kZXgsIGl0ZW1JbnB1dEVsKSA9PiB7XG4gICAgICAgIGNvbnN0ICRpdGVtSW5wdXRFbCA9ICQoaXRlbUlucHV0RWwpO1xuICAgICAgICAkaXRlbUlucHV0RWwuZmluZCgnaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEnKS5lYWNoKChpbnB1dEluZGV4LCBpbnB1dEVsKSA9PiB7XG4gICAgICAgICAgY29uc3QgJGlucHV0RWwgPSAkKGlucHV0RWwpO1xuICAgICAgICAgIGlmIChJbnB1dC5pZ25vcmVUeXBlcy5pbmRleE9mKCRpbnB1dEVsLmF0dHIoJ3R5cGUnKSkgPj0gMCkgcmV0dXJuO1xuICAgICAgICAgIGFwcC5pbnB1dC5jaGVja0VtcHR5U3RhdGUoJGlucHV0RWwpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgJHBhZ2VFbC5maW5kKCd0ZXh0YXJlYS5yZXNpemFibGUnKS5lYWNoKCh0ZXh0YXJlYUluZGV4LCB0ZXh0YXJlYUVsKSA9PiB7XG4gICAgICAgIGFwcC5pbnB1dC5yZXNpemVUZXh0YXJlYSh0ZXh0YXJlYUVsKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH0sXG59O1xuXG52YXIgY2hlY2tib3ggPSB7XG4gIG5hbWU6ICdjaGVja2JveCcsXG59O1xuXG52YXIgcmFkaW8gPSB7XG4gIG5hbWU6ICdyYWRpbycsXG59O1xuXG5jbGFzcyBUb2dnbGUgZXh0ZW5kcyBGcmFtZXdvcms3Q2xhc3Mge1xuICBjb25zdHJ1Y3RvcihhcHAsIHBhcmFtcyA9IHt9KSB7XG4gICAgc3VwZXIocGFyYW1zLCBbYXBwXSk7XG4gICAgY29uc3QgdG9nZ2xlID0gdGhpcztcblxuICAgIGNvbnN0IGRlZmF1bHRzID0ge307XG5cbiAgICAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBtb2R1bGVzIHBhcmFtc1xuICAgIHRvZ2dsZS51c2VJbnN0YW5jZU1vZHVsZXNQYXJhbXMoZGVmYXVsdHMpO1xuXG4gICAgdG9nZ2xlLnBhcmFtcyA9IFV0aWxzLmV4dGVuZChkZWZhdWx0cywgcGFyYW1zKTtcblxuICAgIGNvbnN0IGVsID0gdG9nZ2xlLnBhcmFtcy5lbDtcbiAgICBpZiAoIWVsKSByZXR1cm4gdG9nZ2xlO1xuXG4gICAgY29uc3QgJGVsID0gJChlbCk7XG4gICAgaWYgKCRlbC5sZW5ndGggPT09IDApIHJldHVybiB0b2dnbGU7XG5cbiAgICBjb25zdCBkYXRhc2V0ID0gJGVsLmRhdGFzZXQoKTtcblxuICAgIGNvbnN0ICRpbnB1dEVsID0gJGVsLmNoaWxkcmVuKCdpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nKTtcblxuICAgIFV0aWxzLmV4dGVuZCh0b2dnbGUsIHtcbiAgICAgICRlbCxcbiAgICAgIGVsOiAkZWxbMF0sXG4gICAgICBkYXRhc2V0LFxuICAgICAgJGlucHV0RWwsXG4gICAgICBpbnB1dEVsOiAkaW5wdXRFbFswXSxcbiAgICAgIGRpc2FibGVkOiAkZWwuaGFzQ2xhc3MoJ2Rpc2FibGVkJykgfHwgJGlucHV0RWwuaGFzQ2xhc3MoJ2Rpc2FibGVkJykgfHwgJGlucHV0RWwuYXR0cignZGlzYWJsZWQnKSB8fCAkaW5wdXRFbFswXS5kaXNhYmxlZCxcbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0b2dnbGUsICdjaGVja2VkJywge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHNldChjaGVja2VkKSB7XG4gICAgICAgIGlmICghdG9nZ2xlIHx8IHR5cGVvZiB0b2dnbGUuJGlucHV0RWwgPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG4gICAgICAgIGlmICh0b2dnbGUuY2hlY2tlZCA9PT0gY2hlY2tlZCkgcmV0dXJuO1xuICAgICAgICAkaW5wdXRFbFswXS5jaGVja2VkID0gY2hlY2tlZDtcbiAgICAgICAgdG9nZ2xlLiRpbnB1dEVsLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgfSxcbiAgICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuICRpbnB1dEVsWzBdLmNoZWNrZWQ7XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgJGVsWzBdLmY3VG9nZ2xlID0gdG9nZ2xlO1xuXG4gICAgbGV0IGlzVG91Y2hlZDtcbiAgICBjb25zdCB0b3VjaGVzU3RhcnQgPSB7fTtcbiAgICBsZXQgaXNTY3JvbGxpbmc7XG4gICAgbGV0IHRvdWNoZXNEaWZmO1xuICAgIGxldCB0b2dnbGVXaWR0aDtcbiAgICBsZXQgdG91Y2hTdGFydFRpbWU7XG4gICAgbGV0IHRvdWNoU3RhcnRDaGVja2VkO1xuICAgIGZ1bmN0aW9uIGhhbmRsZVRvdWNoU3RhcnQoZSkge1xuICAgICAgaWYgKGlzVG91Y2hlZCB8fCB0b2dnbGUuZGlzYWJsZWQpIHJldHVybjtcbiAgICAgIHRvdWNoZXNTdGFydC54ID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICAgICAgdG91Y2hlc1N0YXJ0LnkgPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gICAgICB0b3VjaGVzRGlmZiA9IDA7XG5cbiAgICAgIGlzVG91Y2hlZCA9IHRydWU7XG4gICAgICBpc1Njcm9sbGluZyA9IHVuZGVmaW5lZDtcbiAgICAgIHRvdWNoU3RhcnRUaW1lID0gVXRpbHMubm93KCk7XG4gICAgICB0b3VjaFN0YXJ0Q2hlY2tlZCA9IHRvZ2dsZS5jaGVja2VkO1xuXG4gICAgICB0b2dnbGVXaWR0aCA9ICRlbFswXS5vZmZzZXRXaWR0aDtcbiAgICAgIFV0aWxzLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgaWYgKGlzVG91Y2hlZCkge1xuICAgICAgICAgICRlbC5hZGRDbGFzcygndG9nZ2xlLWFjdGl2ZS1zdGF0ZScpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlVG91Y2hNb3ZlKGUpIHtcbiAgICAgIGlmICghaXNUb3VjaGVkIHx8IHRvZ2dsZS5kaXNhYmxlZCkgcmV0dXJuO1xuICAgICAgY29uc3QgcGFnZVggPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICAgIGNvbnN0IHBhZ2VZID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG5cbiAgICAgIGlmICh0eXBlb2YgaXNTY3JvbGxpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlzU2Nyb2xsaW5nID0gISEoaXNTY3JvbGxpbmcgfHwgTWF0aC5hYnMocGFnZVkgLSB0b3VjaGVzU3RhcnQueSkgPiBNYXRoLmFicyhwYWdlWCAtIHRvdWNoZXNTdGFydC54KSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNTY3JvbGxpbmcpIHtcbiAgICAgICAgaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgdG91Y2hlc0RpZmYgPSBwYWdlWCAtIHRvdWNoZXNTdGFydC54O1xuXG4gICAgICBsZXQgY2hhbmdlZDtcbiAgICAgIGlmICh0b3VjaGVzRGlmZiA8IDAgJiYgTWF0aC5hYnModG91Y2hlc0RpZmYpID4gdG9nZ2xlV2lkdGggLyAzICYmIHRvdWNoU3RhcnRDaGVja2VkKSB7XG4gICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHRvdWNoZXNEaWZmID4gMCAmJiBNYXRoLmFicyh0b3VjaGVzRGlmZikgPiB0b2dnbGVXaWR0aCAvIDMgJiYgIXRvdWNoU3RhcnRDaGVja2VkKSB7XG4gICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgdG91Y2hlc1N0YXJ0LnggPSBwYWdlWDtcbiAgICAgICAgdG9nZ2xlLmNoZWNrZWQgPSAhdG91Y2hTdGFydENoZWNrZWQ7XG4gICAgICAgIHRvdWNoU3RhcnRDaGVja2VkID0gIXRvdWNoU3RhcnRDaGVja2VkO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVUb3VjaEVuZCgpIHtcbiAgICAgIGlmICghaXNUb3VjaGVkIHx8IHRvZ2dsZS5kaXNhYmxlZCkge1xuICAgICAgICBpZiAoaXNTY3JvbGxpbmcpICRlbC5yZW1vdmVDbGFzcygndG9nZ2xlLWFjdGl2ZS1zdGF0ZScpO1xuICAgICAgICBpc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaXNUb3VjaGVkID0gZmFsc2U7XG5cbiAgICAgICRlbC5yZW1vdmVDbGFzcygndG9nZ2xlLWFjdGl2ZS1zdGF0ZScpO1xuXG4gICAgICBsZXQgY2hhbmdlZDtcbiAgICAgIGlmICgoVXRpbHMubm93KCkgLSB0b3VjaFN0YXJ0VGltZSkgPCAzMDApIHtcbiAgICAgICAgaWYgKHRvdWNoZXNEaWZmIDwgMCAmJiB0b3VjaFN0YXJ0Q2hlY2tlZCkge1xuICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b3VjaGVzRGlmZiA+IDAgJiYgIXRvdWNoU3RhcnRDaGVja2VkKSB7XG4gICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICB0b2dnbGUuY2hlY2tlZCA9ICF0b3VjaFN0YXJ0Q2hlY2tlZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVJbnB1dENoYW5nZSgpIHtcbiAgICAgIHRvZ2dsZS4kZWwudHJpZ2dlcigndG9nZ2xlOmNoYW5nZScsIHRvZ2dsZSk7XG4gICAgICB0b2dnbGUuZW1pdCgnbG9jYWw6OmNoYW5nZSB0b2dnbGVDaGFuZ2UnLCB0b2dnbGUpO1xuICAgIH1cbiAgICB0b2dnbGUuYXR0YWNoRXZlbnRzID0gZnVuY3Rpb24gYXR0YWNoRXZlbnRzKCkge1xuICAgICAgaWYgKCFTdXBwb3J0JDEudG91Y2gpIHJldHVybjtcbiAgICAgIGNvbnN0IHBhc3NpdmUgPSBTdXBwb3J0JDEucGFzc2l2ZUxpc3RlbmVyID8geyBwYXNzaXZlOiB0cnVlIH0gOiBmYWxzZTtcbiAgICAgICRlbC5vbihhcHAudG91Y2hFdmVudHMuc3RhcnQsIGhhbmRsZVRvdWNoU3RhcnQsIHBhc3NpdmUpO1xuICAgICAgYXBwLm9uKCd0b3VjaG1vdmUnLCBoYW5kbGVUb3VjaE1vdmUpO1xuICAgICAgYXBwLm9uKCd0b3VjaGVuZDpwYXNzaXZlJywgaGFuZGxlVG91Y2hFbmQpO1xuICAgICAgdG9nZ2xlLiRpbnB1dEVsLm9uKCdjaGFuZ2UnLCBoYW5kbGVJbnB1dENoYW5nZSk7XG4gICAgfTtcbiAgICB0b2dnbGUuZGV0YWNoRXZlbnRzID0gZnVuY3Rpb24gZGV0YWNoRXZlbnRzKCkge1xuICAgICAgaWYgKCFTdXBwb3J0JDEudG91Y2gpIHJldHVybjtcbiAgICAgIGNvbnN0IHBhc3NpdmUgPSBTdXBwb3J0JDEucGFzc2l2ZUxpc3RlbmVyID8geyBwYXNzaXZlOiB0cnVlIH0gOiBmYWxzZTtcbiAgICAgICRlbC5vZmYoYXBwLnRvdWNoRXZlbnRzLnN0YXJ0LCBoYW5kbGVUb3VjaFN0YXJ0LCBwYXNzaXZlKTtcbiAgICAgIGFwcC5vZmYoJ3RvdWNobW92ZScsIGhhbmRsZVRvdWNoTW92ZSk7XG4gICAgICBhcHAub2ZmKCd0b3VjaGVuZDpwYXNzaXZlJywgaGFuZGxlVG91Y2hFbmQpO1xuICAgICAgdG9nZ2xlLiRpbnB1dEVsLm9mZignY2hhbmdlJywgaGFuZGxlSW5wdXRDaGFuZ2UpO1xuICAgIH07XG5cblxuICAgIC8vIEluc3RhbGwgTW9kdWxlc1xuICAgIHRvZ2dsZS51c2VJbnN0YW5jZU1vZHVsZXMoKTtcblxuICAgIC8vIEluaXRcbiAgICB0b2dnbGUuaW5pdCgpO1xuICB9XG4gIHRvZ2dsZSgpIHtcbiAgICBjb25zdCB0b2dnbGUgPSB0aGlzO1xuICAgIHRvZ2dsZS5jaGVja2VkID0gIXRvZ2dsZS5jaGVja2VkO1xuICB9XG4gIGluaXQoKSB7XG4gICAgY29uc3QgdG9nZ2xlID0gdGhpcztcbiAgICB0b2dnbGUuYXR0YWNoRXZlbnRzKCk7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICBsZXQgdG9nZ2xlID0gdGhpcztcbiAgICB0b2dnbGUuJGVsLnRyaWdnZXIoJ3RvZ2dsZTpiZWZvcmVkZXN0cm95JywgdG9nZ2xlKTtcbiAgICB0b2dnbGUuZW1pdCgnbG9jYWw6OmJlZm9yZURlc3Ryb3kgdG9nZ2xlQmVmb3JlRGVzdHJveScsIHRvZ2dsZSk7XG4gICAgZGVsZXRlIHRvZ2dsZS4kZWxbMF0uZjdUb2dnbGU7XG4gICAgdG9nZ2xlLmRldGFjaEV2ZW50cygpO1xuICAgIFV0aWxzLmRlbGV0ZVByb3BzKHRvZ2dsZSk7XG4gICAgdG9nZ2xlID0gbnVsbDtcbiAgfVxufVxuXG52YXIgdG9nZ2xlID0ge1xuICBuYW1lOiAndG9nZ2xlJyxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKGFwcCwge1xuICAgICAgdG9nZ2xlOiB7XG4gICAgICAgIGNyZWF0ZShwYXJhbXMpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IFRvZ2dsZShhcHAsIHBhcmFtcyk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldChlbCkge1xuICAgICAgICAgIGNvbnN0ICRlbCA9ICQoZWwpO1xuICAgICAgICAgIGlmICgkZWwubGVuZ3RoKSByZXR1cm4gJGVsWzBdLmY3VG9nZ2xlO1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGRlc3Ryb3koZWwpIHtcbiAgICAgICAgICBpZiAoZWwgJiYgKGVsIGluc3RhbmNlb2YgVG9nZ2xlKSAmJiBlbC5kZXN0cm95KSByZXR1cm4gZWwuZGVzdHJveSgpO1xuICAgICAgICAgIGNvbnN0ICRlbCA9ICQoZWwpO1xuICAgICAgICAgIGlmICgkZWwubGVuZ3RoKSByZXR1cm4gJGVsWzBdLmY3VG9nZ2xlLmRlc3Ryb3koKTtcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgc3RhdGljOiB7XG4gICAgVG9nZ2xlLFxuICB9LFxuICBvbjoge1xuICAgIHRhYk1vdW50ZWQodGFiRWwpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICAkKHRhYkVsKS5maW5kKCdsYWJlbC50b2dnbGUnKS5lYWNoKChpbmRleCwgdG9nZ2xlRWwpID0+IG5ldyBUb2dnbGUoYXBwLCB7IGVsOiB0b2dnbGVFbCB9KSk7XG4gICAgfSxcbiAgICB0YWJCZWZvcmVSZW1vdmUodGFiRWwpIHtcbiAgICAgICQodGFiRWwpLmZpbmQoJ2xhYmVsLnRvZ2dsZScpLmVhY2goKGluZGV4LCB0b2dnbGVFbCkgPT4ge1xuICAgICAgICBpZiAodG9nZ2xlRWwuZjdUb2dnbGUpIHRvZ2dsZUVsLmY3VG9nZ2xlLmRlc3Ryb3koKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcGFnZUluaXQocGFnZSkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIHBhZ2UuJGVsLmZpbmQoJ2xhYmVsLnRvZ2dsZScpLmVhY2goKGluZGV4LCB0b2dnbGVFbCkgPT4gbmV3IFRvZ2dsZShhcHAsIHsgZWw6IHRvZ2dsZUVsIH0pKTtcbiAgICB9LFxuICAgIHBhZ2VCZWZvcmVSZW1vdmUocGFnZSkge1xuICAgICAgcGFnZS4kZWwuZmluZCgnbGFiZWwudG9nZ2xlJykuZWFjaCgoaW5kZXgsIHRvZ2dsZUVsKSA9PiB7XG4gICAgICAgIGlmICh0b2dnbGVFbC5mN1RvZ2dsZSkgdG9nZ2xlRWwuZjdUb2dnbGUuZGVzdHJveSgpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgfSxcbn07XG5cbmNsYXNzIFJhbmdlIGV4dGVuZHMgRnJhbWV3b3JrN0NsYXNzIHtcbiAgY29uc3RydWN0b3IoYXBwLCBwYXJhbXMpIHtcbiAgICBzdXBlcihwYXJhbXMsIFthcHBdKTtcbiAgICBjb25zdCByYW5nZSA9IHRoaXM7XG4gICAgY29uc3QgZGVmYXVsdHMgPSB7XG4gICAgICBkdWFsOiBmYWxzZSxcbiAgICAgIHN0ZXA6IDEsXG4gICAgICBsYWJlbDogZmFsc2UsXG4gICAgfTtcblxuICAgIC8vIEV4dGVuZCBkZWZhdWx0cyB3aXRoIG1vZHVsZXMgcGFyYW1zXG4gICAgcmFuZ2UudXNlSW5zdGFuY2VNb2R1bGVzUGFyYW1zKGRlZmF1bHRzKTtcblxuICAgIHJhbmdlLnBhcmFtcyA9IFV0aWxzLmV4dGVuZChkZWZhdWx0cywgcGFyYW1zKTtcblxuICAgIGNvbnN0IGVsID0gcmFuZ2UucGFyYW1zLmVsO1xuICAgIGlmICghZWwpIHJldHVybiByYW5nZTtcblxuICAgIGNvbnN0ICRlbCA9ICQoZWwpO1xuICAgIGlmICgkZWwubGVuZ3RoID09PSAwKSByZXR1cm4gcmFuZ2U7XG5cbiAgICBjb25zdCBkYXRhc2V0ID0gJGVsLmRhdGFzZXQoKTtcblxuICAgICgnc3RlcCBtaW4gbWF4IHZhbHVlJykuc3BsaXQoJyAnKS5mb3JFYWNoKChwYXJhbU5hbWUpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgcGFyYW1zW3BhcmFtTmFtZV0gPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkYXRhc2V0W3BhcmFtTmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJhbmdlLnBhcmFtc1twYXJhbU5hbWVdID0gcGFyc2VGbG9hdChkYXRhc2V0W3BhcmFtTmFtZV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgICgnZHVhbCBsYWJlbCcpLnNwbGl0KCcgJykuZm9yRWFjaCgocGFyYW1OYW1lKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHBhcmFtc1twYXJhbU5hbWVdID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZGF0YXNldFtwYXJhbU5hbWVdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByYW5nZS5wYXJhbXNbcGFyYW1OYW1lXSA9IGRhdGFzZXRbcGFyYW1OYW1lXTtcbiAgICAgIH1cbiAgICB9KTtcblxuXG4gICAgaWYgKCFyYW5nZS5wYXJhbXMudmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgZGF0YXNldC52YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHJhbmdlLnBhcmFtcy52YWx1ZSA9IGRhdGFzZXQudmFsdWU7XG4gICAgICBpZiAodHlwZW9mIGRhdGFzZXQudmFsdWVMZWZ0ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZGF0YXNldC52YWx1ZVJpZ2h0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByYW5nZS5wYXJhbXMudmFsdWUgPSBbcGFyc2VGbG9hdChkYXRhc2V0LnZhbHVlTGVmdCksIHBhcnNlRmxvYXQoZGF0YXNldC52YWx1ZVJpZ2h0KV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0ICRpbnB1dEVsO1xuICAgIGlmICghcmFuZ2UucGFyYW1zLmR1YWwpIHtcbiAgICAgIGlmIChyYW5nZS5wYXJhbXMuaW5wdXRFbCkge1xuICAgICAgICAkaW5wdXRFbCA9ICQocmFuZ2UucGFyYW1zLmlucHV0RWwpO1xuICAgICAgfSBlbHNlIGlmICgkZWwuZmluZCgnaW5wdXRbdHlwZT1cInJhbmdlXCJdJykubGVuZ3RoKSB7XG4gICAgICAgICRpbnB1dEVsID0gJGVsLmZpbmQoJ2lucHV0W3R5cGU9XCJyYW5nZVwiXScpLmVxKDApO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgVXRpbHMuZXh0ZW5kKHJhbmdlLCByYW5nZS5wYXJhbXMsIHtcbiAgICAgICRlbCxcbiAgICAgIGVsOiAkZWxbMF0sXG4gICAgICAkaW5wdXRFbCxcbiAgICAgIGlucHV0RWw6ICRpbnB1dEVsID8gJGlucHV0RWxbMF0gOiB1bmRlZmluZWQsXG4gICAgfSk7XG5cbiAgICBpZiAoJGlucHV0RWwpIHtcbiAgICAgICgnc3RlcCBtaW4gbWF4Jykuc3BsaXQoJyAnKS5mb3JFYWNoKChwYXJhbU5hbWUpID0+IHtcbiAgICAgICAgaWYgKCFwYXJhbXNbcGFyYW1OYW1lXSAmJiAkaW5wdXRFbC5hdHRyKHBhcmFtTmFtZSkpIHtcbiAgICAgICAgICByYW5nZS5wYXJhbXNbcGFyYW1OYW1lXSA9IHBhcnNlRmxvYXQoJGlucHV0RWwuYXR0cihwYXJhbU5hbWUpKTtcbiAgICAgICAgICByYW5nZVtwYXJhbU5hbWVdID0gcGFyc2VGbG9hdCgkaW5wdXRFbC5hdHRyKHBhcmFtTmFtZSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgJGlucHV0RWwudmFsKCkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcmFuZ2UucGFyYW1zLnZhbHVlID0gcGFyc2VGbG9hdCgkaW5wdXRFbC52YWwoKSk7XG4gICAgICAgICAgcmFuZ2UudmFsdWUgPSBwYXJzZUZsb2F0KCRpbnB1dEVsLnZhbCgpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gRHVhbFxuICAgIGlmIChyYW5nZS5kdWFsKSB7XG4gICAgICAkZWwuYWRkQ2xhc3MoJ3JhbmdlLXNsaWRlci1kdWFsJyk7XG4gICAgfVxuICAgIGlmIChyYW5nZS5sYWJlbCkge1xuICAgICAgJGVsLmFkZENsYXNzKCdyYW5nZS1zbGlkZXItbGFiZWwnKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgbGF5b3V0XG4gICAgY29uc3QgJGJhckVsID0gJCgnPGRpdiBjbGFzcz1cInJhbmdlLWJhclwiPjwvZGl2PicpO1xuICAgIGNvbnN0ICRiYXJBY3RpdmVFbCA9ICQoJzxkaXYgY2xhc3M9XCJyYW5nZS1iYXItYWN0aXZlXCI+PC9kaXY+Jyk7XG4gICAgJGJhckVsLmFwcGVuZCgkYmFyQWN0aXZlRWwpO1xuXG4gICAgLy8gQ3JlYXRlIEtub2JzXG4gICAgY29uc3Qga25vYkhUTUwgPSBgXG4gICAgICA8ZGl2IGNsYXNzPVwicmFuZ2Uta25vYi13cmFwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyYW5nZS1rbm9iXCI+PC9kaXY+XG4gICAgICAgICR7cmFuZ2UubGFiZWwgPyAnPGRpdiBjbGFzcz1cInJhbmdlLWtub2ItbGFiZWxcIj48L2Rpdj4nIDogJyd9XG4gICAgICA8L2Rpdj5cbiAgICBgO1xuICAgIGNvbnN0IGtub2JzID0gWyQoa25vYkhUTUwpXTtcbiAgICBjb25zdCBsYWJlbHMgPSBbXTtcblxuICAgIGlmIChyYW5nZS5kdWFsKSB7XG4gICAgICBrbm9icy5wdXNoKCQoa25vYkhUTUwpKTtcbiAgICB9XG5cbiAgICAkZWwuYXBwZW5kKCRiYXJFbCk7XG4gICAga25vYnMuZm9yRWFjaCgoJGtub2JFbCkgPT4ge1xuICAgICAgJGVsLmFwcGVuZCgka25vYkVsKTtcbiAgICB9KTtcblxuICAgIC8vIExhYmVsc1xuICAgIGlmIChyYW5nZS5sYWJlbCkge1xuICAgICAgbGFiZWxzLnB1c2goa25vYnNbMF0uZmluZCgnLnJhbmdlLWtub2ItbGFiZWwnKSk7XG4gICAgICBpZiAocmFuZ2UuZHVhbCkge1xuICAgICAgICBsYWJlbHMucHVzaChrbm9ic1sxXS5maW5kKCcucmFuZ2Uta25vYi1sYWJlbCcpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBVdGlscy5leHRlbmQocmFuZ2UsIHtcbiAgICAgIGtub2JzLFxuICAgICAgbGFiZWxzLFxuICAgICAgJGJhckVsLFxuICAgICAgJGJhckFjdGl2ZUVsLFxuICAgIH0pO1xuXG4gICAgJGVsWzBdLmY3UmFuZ2UgPSByYW5nZTtcblxuICAgIC8vIFRvdWNoIEV2ZW50c1xuICAgIGxldCBpc1RvdWNoZWQ7XG4gICAgY29uc3QgdG91Y2hlc1N0YXJ0ID0ge307XG4gICAgbGV0IGlzU2Nyb2xsaW5nO1xuICAgIGxldCByYW5nZU9mZnNldExlZnQ7XG4gICAgbGV0ICR0b3VjaGVkS25vYkVsO1xuICAgIGxldCBkdWFsVmFsdWVJbmRleDtcbiAgICBmdW5jdGlvbiBoYW5kbGVUb3VjaFN0YXJ0KGUpIHtcbiAgICAgIGlmIChpc1RvdWNoZWQpIHJldHVybjtcbiAgICAgIHRvdWNoZXNTdGFydC54ID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICAgICAgdG91Y2hlc1N0YXJ0LnkgPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG5cbiAgICAgIGlzVG91Y2hlZCA9IHRydWU7XG4gICAgICBpc1Njcm9sbGluZyA9IHVuZGVmaW5lZDtcbiAgICAgIHJhbmdlT2Zmc2V0TGVmdCA9ICRlbC5vZmZzZXQoKS5sZWZ0O1xuXG4gICAgICBjb25zdCBwcm9ncmVzcyA9ICh0b3VjaGVzU3RhcnQueCAtIHJhbmdlT2Zmc2V0TGVmdCkgLyByYW5nZS5yYW5nZVdpZHRoO1xuXG4gICAgICBsZXQgbmV3VmFsdWUgPSAocHJvZ3Jlc3MgKiAocmFuZ2UubWF4IC0gcmFuZ2UubWluKSkgKyByYW5nZS5taW47XG4gICAgICBpZiAocmFuZ2UuZHVhbCkge1xuICAgICAgICBpZiAoTWF0aC5hYnMocmFuZ2UudmFsdWVbMF0gLSBuZXdWYWx1ZSkgPCBNYXRoLmFicyhyYW5nZS52YWx1ZVsxXSAtIG5ld1ZhbHVlKSkge1xuICAgICAgICAgIGR1YWxWYWx1ZUluZGV4ID0gMDtcbiAgICAgICAgICAkdG91Y2hlZEtub2JFbCA9IHJhbmdlLmtub2JzWzBdO1xuICAgICAgICAgIG5ld1ZhbHVlID0gW25ld1ZhbHVlLCByYW5nZS52YWx1ZVsxXV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZHVhbFZhbHVlSW5kZXggPSAxO1xuICAgICAgICAgICR0b3VjaGVkS25vYkVsID0gcmFuZ2Uua25vYnNbMV07XG4gICAgICAgICAgbmV3VmFsdWUgPSBbcmFuZ2UudmFsdWVbMF0sIG5ld1ZhbHVlXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHRvdWNoZWRLbm9iRWwgPSByYW5nZS5rbm9ic1swXTtcbiAgICAgICAgbmV3VmFsdWUgPSAocHJvZ3Jlc3MgKiAocmFuZ2UubWF4IC0gcmFuZ2UubWluKSkgKyByYW5nZS5taW47XG4gICAgICB9XG4gICAgICBVdGlscy5uZXh0VGljaygoKSA9PiB7XG4gICAgICAgIGlmIChpc1RvdWNoZWQpICR0b3VjaGVkS25vYkVsLmFkZENsYXNzKCdyYW5nZS1rbm9iLWFjdGl2ZS1zdGF0ZScpO1xuICAgICAgfSwgNzApO1xuICAgICAgcmFuZ2Uuc2V0VmFsdWUobmV3VmFsdWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVUb3VjaE1vdmUoZSkge1xuICAgICAgaWYgKCFpc1RvdWNoZWQpIHJldHVybjtcbiAgICAgIGNvbnN0IHBhZ2VYID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgICBjb25zdCBwYWdlWSA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuXG4gICAgICBpZiAodHlwZW9mIGlzU2Nyb2xsaW5nID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpc1Njcm9sbGluZyA9ICEhKGlzU2Nyb2xsaW5nIHx8IE1hdGguYWJzKHBhZ2VZIC0gdG91Y2hlc1N0YXJ0LnkpID4gTWF0aC5hYnMocGFnZVggLSB0b3VjaGVzU3RhcnQueCkpO1xuICAgICAgfVxuICAgICAgaWYgKGlzU2Nyb2xsaW5nKSB7XG4gICAgICAgIGlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGNvbnN0IHByb2dyZXNzID0gKHBhZ2VYIC0gcmFuZ2VPZmZzZXRMZWZ0KSAvIHJhbmdlLnJhbmdlV2lkdGg7XG4gICAgICBsZXQgbmV3VmFsdWUgPSAocHJvZ3Jlc3MgKiAocmFuZ2UubWF4IC0gcmFuZ2UubWluKSkgKyByYW5nZS5taW47XG4gICAgICBpZiAocmFuZ2UuZHVhbCkge1xuICAgICAgICBsZXQgbGVmdFZhbHVlO1xuICAgICAgICBsZXQgcmlnaHRWYWx1ZTtcbiAgICAgICAgaWYgKGR1YWxWYWx1ZUluZGV4ID09PSAwKSB7XG4gICAgICAgICAgbGVmdFZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgICAgcmlnaHRWYWx1ZSA9IHJhbmdlLnZhbHVlWzFdO1xuICAgICAgICAgIGlmIChsZWZ0VmFsdWUgPiByaWdodFZhbHVlKSB7XG4gICAgICAgICAgICByaWdodFZhbHVlID0gbGVmdFZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZWZ0VmFsdWUgPSByYW5nZS52YWx1ZVswXTtcbiAgICAgICAgICByaWdodFZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgICAgaWYgKHJpZ2h0VmFsdWUgPCBsZWZ0VmFsdWUpIHtcbiAgICAgICAgICAgIGxlZnRWYWx1ZSA9IHJpZ2h0VmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5ld1ZhbHVlID0gW2xlZnRWYWx1ZSwgcmlnaHRWYWx1ZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdWYWx1ZSA9IChwcm9ncmVzcyAqIChyYW5nZS5tYXggLSByYW5nZS5taW4pKSArIHJhbmdlLm1pbjtcbiAgICAgIH1cbiAgICAgIHJhbmdlLnNldFZhbHVlKG5ld1ZhbHVlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlVG91Y2hFbmQoKSB7XG4gICAgICBpZiAoIWlzVG91Y2hlZCkge1xuICAgICAgICBpZiAoaXNTY3JvbGxpbmcpICR0b3VjaGVkS25vYkVsLnJlbW92ZUNsYXNzKCdyYW5nZS1rbm9iLWFjdGl2ZS1zdGF0ZScpO1xuICAgICAgICBpc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAkdG91Y2hlZEtub2JFbC5yZW1vdmVDbGFzcygncmFuZ2Uta25vYi1hY3RpdmUtc3RhdGUnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVSZXNpemUoKSB7XG4gICAgICByYW5nZS5jYWxjU2l6ZSgpO1xuICAgICAgcmFuZ2UubGF5b3V0KCk7XG4gICAgfVxuICAgIHJhbmdlLmF0dGFjaEV2ZW50cyA9IGZ1bmN0aW9uIGF0dGFjaEV2ZW50cygpIHtcbiAgICAgIGNvbnN0IHBhc3NpdmUgPSBTdXBwb3J0JDEucGFzc2l2ZUxpc3RlbmVyID8geyBwYXNzaXZlOiB0cnVlIH0gOiBmYWxzZTtcbiAgICAgIHJhbmdlLiRlbC5vbihhcHAudG91Y2hFdmVudHMuc3RhcnQsIGhhbmRsZVRvdWNoU3RhcnQsIHBhc3NpdmUpO1xuICAgICAgYXBwLm9uKCd0b3VjaG1vdmUnLCBoYW5kbGVUb3VjaE1vdmUpO1xuICAgICAgYXBwLm9uKCd0b3VjaGVuZDpwYXNzaXZlJywgaGFuZGxlVG91Y2hFbmQpO1xuICAgICAgYXBwLm9uKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIH07XG4gICAgcmFuZ2UuZGV0YWNoRXZlbnRzID0gZnVuY3Rpb24gZGV0YWNoRXZlbnRzKCkge1xuICAgICAgY29uc3QgcGFzc2l2ZSA9IFN1cHBvcnQkMS5wYXNzaXZlTGlzdGVuZXIgPyB7IHBhc3NpdmU6IHRydWUgfSA6IGZhbHNlO1xuICAgICAgcmFuZ2UuJGVsLm9mZihhcHAudG91Y2hFdmVudHMuc3RhcnQsIGhhbmRsZVRvdWNoU3RhcnQsIHBhc3NpdmUpO1xuICAgICAgYXBwLm9mZigndG91Y2htb3ZlJywgaGFuZGxlVG91Y2hNb3ZlKTtcbiAgICAgIGFwcC5vZmYoJ3RvdWNoZW5kOnBhc3NpdmUnLCBoYW5kbGVUb3VjaEVuZCk7XG4gICAgICBhcHAub2ZmKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIH07XG5cbiAgICAvLyBJbnN0YWxsIE1vZHVsZXNcbiAgICByYW5nZS51c2VJbnN0YW5jZU1vZHVsZXMoKTtcblxuICAgIC8vIEluaXRcbiAgICByYW5nZS5pbml0KCk7XG5cbiAgICByZXR1cm4gcmFuZ2U7XG4gIH1cbiAgY2FsY1NpemUoKSB7XG4gICAgY29uc3QgcmFuZ2UgPSB0aGlzO1xuICAgIHJhbmdlLnJhbmdlV2lkdGggPSByYW5nZS4kZWwub3V0ZXJXaWR0aCgpO1xuICAgIHJhbmdlLmtub2JXaWR0aCA9IHJhbmdlLmtub2JzWzBdLm91dGVyV2lkdGgoKTtcbiAgfVxuICBsYXlvdXQoKSB7XG4gICAgY29uc3QgcmFuZ2UgPSB0aGlzO1xuICAgIGNvbnN0IHsga25vYldpZHRoLCByYW5nZVdpZHRoLCBtaW4sIG1heCwga25vYnMsICRiYXJBY3RpdmVFbCwgdmFsdWUsIGxhYmVsLCBsYWJlbHMgfSA9IHJhbmdlO1xuICAgIGlmIChyYW5nZS5kdWFsKSB7XG4gICAgICBjb25zdCBwcm9ncmVzcyA9IFsoKHZhbHVlWzBdIC0gbWluKSAvIChtYXggLSBtaW4pKSwgKCh2YWx1ZVsxXSAtIG1pbikgLyAobWF4IC0gbWluKSldO1xuICAgICAgJGJhckFjdGl2ZUVsLmNzcyh7XG4gICAgICAgIGxlZnQ6IGAke3Byb2dyZXNzWzBdICogMTAwfSVgLFxuICAgICAgICB3aWR0aDogYCR7KHByb2dyZXNzWzFdIC0gcHJvZ3Jlc3NbMF0pICogMTAwfSVgLFxuICAgICAgfSk7XG4gICAgICBrbm9icy5mb3JFYWNoKCgka25vYkVsLCBrbm9iSW5kZXgpID0+IHtcbiAgICAgICAgbGV0IGxlZnRQb3MgPSByYW5nZVdpZHRoICogcHJvZ3Jlc3Nba25vYkluZGV4XTtcbiAgICAgICAgY29uc3QgcmVhbExlZnQgPSAocmFuZ2VXaWR0aCAqIHByb2dyZXNzW2tub2JJbmRleF0pIC0gKGtub2JXaWR0aCAvIDIpO1xuICAgICAgICBpZiAocmVhbExlZnQgPCAwKSBsZWZ0UG9zID0ga25vYldpZHRoIC8gMjtcbiAgICAgICAgaWYgKChyZWFsTGVmdCArIGtub2JXaWR0aCkgPiByYW5nZVdpZHRoKSBsZWZ0UG9zID0gcmFuZ2VXaWR0aCAtIChrbm9iV2lkdGggLyAyKTtcbiAgICAgICAgJGtub2JFbC5jc3MoJ2xlZnQnLCBgJHtsZWZ0UG9zfXB4YCk7XG4gICAgICAgIGlmIChsYWJlbCkgbGFiZWxzW2tub2JJbmRleF0udGV4dCh2YWx1ZVtrbm9iSW5kZXhdKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBwcm9ncmVzcyA9ICgodmFsdWUgLSBtaW4pIC8gKG1heCAtIG1pbikpO1xuICAgICAgJGJhckFjdGl2ZUVsLmNzcygnd2lkdGgnLCBgJHtwcm9ncmVzcyAqIDEwMH0lYCk7XG5cbiAgICAgIGxldCBsZWZ0UG9zID0gcmFuZ2VXaWR0aCAqIHByb2dyZXNzO1xuICAgICAgY29uc3QgcmVhbExlZnQgPSAocmFuZ2VXaWR0aCAqIHByb2dyZXNzKSAtIChrbm9iV2lkdGggLyAyKTtcbiAgICAgIGlmIChyZWFsTGVmdCA8IDApIGxlZnRQb3MgPSBrbm9iV2lkdGggLyAyO1xuICAgICAgaWYgKChyZWFsTGVmdCArIGtub2JXaWR0aCkgPiByYW5nZVdpZHRoKSBsZWZ0UG9zID0gcmFuZ2VXaWR0aCAtIChrbm9iV2lkdGggLyAyKTtcbiAgICAgIGtub2JzWzBdLmNzcygnbGVmdCcsIGAke2xlZnRQb3N9cHhgKTtcbiAgICAgIGlmIChsYWJlbCkgbGFiZWxzWzBdLnRleHQodmFsdWUpO1xuICAgIH1cbiAgICBpZiAoKHJhbmdlLmR1YWwgJiYgdmFsdWUuaW5kZXhPZihtaW4pID49IDApIHx8ICghcmFuZ2UuZHVhbCAmJiB2YWx1ZSA9PT0gbWluKSkge1xuICAgICAgcmFuZ2UuJGVsLmFkZENsYXNzKCdyYW5nZS1zbGlkZXItbWluJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhbmdlLiRlbC5yZW1vdmVDbGFzcygncmFuZ2Utc2xpZGVyLW1pbicpO1xuICAgIH1cbiAgICBpZiAoKHJhbmdlLmR1YWwgJiYgdmFsdWUuaW5kZXhPZihtYXgpID49IDApIHx8ICghcmFuZ2UuZHVhbCAmJiB2YWx1ZSA9PT0gbWF4KSkge1xuICAgICAgcmFuZ2UuJGVsLmFkZENsYXNzKCdyYW5nZS1zbGlkZXItbWF4Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhbmdlLiRlbC5yZW1vdmVDbGFzcygncmFuZ2Utc2xpZGVyLW1heCcpO1xuICAgIH1cbiAgfVxuICBzZXRWYWx1ZShuZXdWYWx1ZSkge1xuICAgIGNvbnN0IHJhbmdlID0gdGhpcztcbiAgICBjb25zdCB7IHN0ZXAsIG1pbiwgbWF4IH0gPSByYW5nZTtcbiAgICBpZiAocmFuZ2UuZHVhbCkge1xuICAgICAgbGV0IG5ld1ZhbHVlcyA9IG5ld1ZhbHVlO1xuICAgICAgaWYgKG5ld1ZhbHVlWzBdID4gbmV3VmFsdWVbMV0pIHtcbiAgICAgICAgbmV3VmFsdWVzID0gW25ld1ZhbHVlc1swXSwgbmV3VmFsdWVzWzBdXTtcbiAgICAgIH1cbiAgICAgIG5ld1ZhbHVlcyA9IG5ld1ZhbHVlcy5tYXAoKHZhbHVlKSA9PiB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihNYXRoLnJvdW5kKHZhbHVlIC8gc3RlcCkgKiBzdGVwLCBtYXgpLCBtaW4pO1xuICAgICAgfSk7XG4gICAgICBpZiAobmV3VmFsdWVzWzBdID09PSByYW5nZS52YWx1ZVswXSAmJiBuZXdWYWx1ZXNbMV0gPT09IHJhbmdlLnZhbHVlWzFdKSB7XG4gICAgICAgIHJldHVybiByYW5nZTtcbiAgICAgIH1cbiAgICAgIG5ld1ZhbHVlcy5mb3JFYWNoKCh2YWx1ZSwgdmFsdWVJbmRleCkgPT4ge1xuICAgICAgICByYW5nZS52YWx1ZVt2YWx1ZUluZGV4XSA9IHZhbHVlO1xuICAgICAgfSk7XG4gICAgICByYW5nZS5sYXlvdXQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdmFsdWUgPSBNYXRoLm1heChNYXRoLm1pbihNYXRoLnJvdW5kKG5ld1ZhbHVlIC8gc3RlcCkgKiBzdGVwLCBtYXgpLCBtaW4pO1xuICAgICAgcmFuZ2UudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHJhbmdlLmxheW91dCgpO1xuICAgIH1cbiAgICAvLyBFdmVudHNcbiAgICByYW5nZS4kZWwudHJpZ2dlcigncmFuZ2U6Y2hhbmdlJywgcmFuZ2UsIHJhbmdlLnZhbHVlKTtcbiAgICBpZiAocmFuZ2UuJGlucHV0RWwgJiYgIXJhbmdlLmR1YWwpIHtcbiAgICAgIHJhbmdlLiRpbnB1dEVsLnZhbChyYW5nZS52YWx1ZSkudHJpZ2dlcignaW5wdXQgY2hhbmdlJyk7XG4gICAgfVxuICAgIHJhbmdlLmVtaXQoJ2xvY2FsOjpjaGFuZ2UgcmFuZ2VDaGFuZ2UnLCByYW5nZSwgcmFuZ2UudmFsdWUpO1xuICAgIHJldHVybiByYW5nZTtcbiAgfVxuICBnZXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgfVxuICBpbml0KCkge1xuICAgIGNvbnN0IHJhbmdlID0gdGhpcztcbiAgICByYW5nZS5jYWxjU2l6ZSgpO1xuICAgIHJhbmdlLmxheW91dCgpO1xuICAgIHJhbmdlLmF0dGFjaEV2ZW50cygpO1xuICAgIHJldHVybiByYW5nZTtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIGxldCByYW5nZSA9IHRoaXM7XG4gICAgcmFuZ2UuJGVsLnRyaWdnZXIoJ3JhbmdlOmJlZm9yZWRlc3Ryb3knLCByYW5nZSk7XG4gICAgcmFuZ2UuZW1pdCgnbG9jYWw6OmJlZm9yZURlc3Ryb3kgcmFuZ2VCZWZvcmVEZXN0cm95JywgcmFuZ2UpO1xuICAgIGRlbGV0ZSByYW5nZS4kZWxbMF0uZjdSYW5nZTtcbiAgICByYW5nZS5kZXRhY2hFdmVudHMoKTtcbiAgICBVdGlscy5kZWxldGVQcm9wcyhyYW5nZSk7XG4gICAgcmFuZ2UgPSBudWxsO1xuICB9XG59XG5cbnZhciByYW5nZSA9IHtcbiAgbmFtZTogJ3JhbmdlJyxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgYXBwLnJhbmdlID0gVXRpbHMuZXh0ZW5kKFxuICAgICAgQ29uc3RydWN0b3JNZXRob2RzKHtcbiAgICAgICAgZGVmYXVsdFNlbGVjdG9yOiAnLnJhbmdlLXNsaWRlcicsXG4gICAgICAgIGNvbnN0cnVjdG9yOiBSYW5nZSxcbiAgICAgICAgYXBwLFxuICAgICAgICBkb21Qcm9wOiAnZjdSYW5nZScsXG4gICAgICB9KSxcbiAgICAgIHtcbiAgICAgICAgZ2V0VmFsdWUoZWwgPSAnLnJhbmdlLXNsaWRlcicpIHtcbiAgICAgICAgICBjb25zdCByYW5nZSA9IGFwcC5yYW5nZS5nZXQoZWwpO1xuICAgICAgICAgIGlmIChyYW5nZSkgcmV0dXJuIHJhbmdlLmdldFZhbHVlKCk7XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VmFsdWUoZWwgPSAnLnJhbmdlLXNsaWRlcicsIHZhbHVlKSB7XG4gICAgICAgICAgY29uc3QgcmFuZ2UgPSBhcHAucmFuZ2UuZ2V0KGVsKTtcbiAgICAgICAgICBpZiAocmFuZ2UpIHJldHVybiByYW5nZS5zZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICApO1xuICB9LFxuICBzdGF0aWM6IHtcbiAgICBSYW5nZSxcbiAgfSxcbiAgb246IHtcbiAgICB0YWJNb3VudGVkKHRhYkVsKSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgJCh0YWJFbCkuZmluZCgnLnJhbmdlLXNsaWRlci1pbml0JykuZWFjaCgoaW5kZXgsIHJhbmdlRWwpID0+IG5ldyBSYW5nZShhcHAsIHtcbiAgICAgICAgZWw6IHJhbmdlRWwsXG4gICAgICB9KSk7XG4gICAgfSxcbiAgICB0YWJCZWZvcmVSZW1vdmUodGFiRWwpIHtcbiAgICAgICQodGFiRWwpLmZpbmQoJy5yYW5nZS1zbGlkZXItaW5pdCcpLmVhY2goKGluZGV4LCByYW5nZUVsKSA9PiB7XG4gICAgICAgIGlmIChyYW5nZUVsLmY3UmFuZ2UpIHJhbmdlRWwuZjdSYW5nZS5kZXN0cm95KCk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHBhZ2VJbml0KHBhZ2UpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBwYWdlLiRlbC5maW5kKCcucmFuZ2Utc2xpZGVyLWluaXQnKS5lYWNoKChpbmRleCwgcmFuZ2VFbCkgPT4gbmV3IFJhbmdlKGFwcCwge1xuICAgICAgICBlbDogcmFuZ2VFbCxcbiAgICAgIH0pKTtcbiAgICB9LFxuICAgIHBhZ2VCZWZvcmVSZW1vdmUocGFnZSkge1xuICAgICAgcGFnZS4kZWwuZmluZCgnLnJhbmdlLXNsaWRlci1pbml0JykuZWFjaCgoaW5kZXgsIHJhbmdlRWwpID0+IHtcbiAgICAgICAgaWYgKHJhbmdlRWwuZjdSYW5nZSkgcmFuZ2VFbC5mN1JhbmdlLmRlc3Ryb3koKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jbGFzcyBTbWFydFNlbGVjdCBleHRlbmRzIEZyYW1ld29yazdDbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGFwcCwgcGFyYW1zID0ge30pIHtcbiAgICBzdXBlcihwYXJhbXMsIFthcHBdKTtcbiAgICBjb25zdCBzcyA9IHRoaXM7XG4gICAgc3MuYXBwID0gYXBwO1xuICAgIGNvbnN0IGRlZmF1bHRzID0gVXRpbHMuZXh0ZW5kKHtcbiAgICAgIG9uOiB7fSxcbiAgICB9LCBhcHAubW9kdWxlcy5zbWFydFNlbGVjdC5wYXJhbXMuc21hcnRTZWxlY3QpO1xuXG4gICAgY29uc3QgJGVsID0gJChwYXJhbXMuZWwpLmVxKDApO1xuICAgIGlmICgkZWwubGVuZ3RoID09PSAwKSByZXR1cm4gc3M7XG5cbiAgICBjb25zdCAkc2VsZWN0RWwgPSAkZWwuZmluZCgnc2VsZWN0JykuZXEoMCk7XG4gICAgaWYgKCRzZWxlY3RFbC5sZW5ndGggPT09IDApIHJldHVybiBzcztcblxuICAgIGxldCAkdmFsdWVFbCA9ICQocGFyYW1zLnZhbHVlRWwpO1xuICAgIGlmICgkdmFsdWVFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICR2YWx1ZUVsID0gJCgnPGRpdiBjbGFzcz1cIml0ZW0tYWZ0ZXJcIj48L2Rpdj4nKTtcbiAgICAgICR2YWx1ZUVsLmluc2VydEFmdGVyKCRlbC5maW5kKCcuaXRlbS10aXRsZScpKTtcbiAgICB9XG5cbiAgICAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBtb2R1bGVzIHBhcmFtc1xuICAgIHNzLnVzZUluc3RhbmNlTW9kdWxlc1BhcmFtcyhkZWZhdWx0cyk7XG5cbiAgICAvLyBWaWV3XG4gICAgY29uc3QgdmlldyA9ICRlbC5wYXJlbnRzKCcudmlldycpLmxlbmd0aCAmJiAkZWwucGFyZW50cygnLnZpZXcnKVswXS5mN1ZpZXc7XG4gICAgaWYgKCF2aWV3KSB7XG4gICAgICB0aHJvdyBFcnJvcignU21hcnQgU2VsZWN0IHJlcXVpcmVzIGluaXRpYWxpemVkIFZpZXcnKTtcbiAgICB9XG5cbiAgICAvLyBVcmxcbiAgICBsZXQgdXJsID0gcGFyYW1zLnVybDtcbiAgICBpZiAoIXVybCkge1xuICAgICAgaWYgKCRlbC5hdHRyKCdocmVmJykpIHVybCA9ICRlbC5hdHRyKCdocmVmJyk7XG4gICAgICBlbHNlIHVybCA9IGAkeyRzZWxlY3RFbC5hdHRyKCduYW1lJykudG9Mb3dlckNhc2UoKX0tc2VsZWN0L2A7XG4gICAgfVxuICAgIGlmICghdXJsKSB1cmwgPSBzcy5wYXJhbXMudXJsO1xuXG4gICAgY29uc3QgbXVsdGlwbGUgPSAkc2VsZWN0RWxbMF0ubXVsdGlwbGU7XG4gICAgY29uc3QgaW5wdXRUeXBlID0gbXVsdGlwbGUgPyAnY2hlY2tib3gnIDogJ3JhZGlvJztcbiAgICBjb25zdCBpZCA9IFV0aWxzLm5vdygpO1xuICAgIFV0aWxzLmV4dGVuZChzcywge1xuICAgICAgcGFyYW1zOiBVdGlscy5leHRlbmQoZGVmYXVsdHMsIHBhcmFtcyksXG4gICAgICAkZWwsXG4gICAgICBlbDogJGVsWzBdLFxuICAgICAgJHNlbGVjdEVsLFxuICAgICAgc2VsZWN0RWw6ICRzZWxlY3RFbFswXSxcbiAgICAgICR2YWx1ZUVsLFxuICAgICAgdmFsdWVFbDogJHZhbHVlRWxbMF0sXG4gICAgICB1cmwsXG4gICAgICBtdWx0aXBsZSxcbiAgICAgIGlucHV0VHlwZSxcbiAgICAgIGlkLFxuICAgICAgdmlldyxcbiAgICAgIGlucHV0TmFtZTogYCR7aW5wdXRUeXBlfS0ke2lkfWAsXG4gICAgICBzZWxlY3ROYW1lOiAkc2VsZWN0RWwuYXR0cignbmFtZScpLFxuICAgICAgbWF4TGVuZ3RoOiAkc2VsZWN0RWwuYXR0cignbWF4bGVuZ3RoJykgfHwgcGFyYW1zLm1heExlbmd0aCxcbiAgICB9KTtcbiAgICAkZWxbMF0uZjdTbWFydFNlbGVjdCA9IHNzO1xuXG4gICAgLy8gRXZlbnRzXG4gICAgZnVuY3Rpb24gb25DbGljaygpIHtcbiAgICAgIHNzLm9wZW4oKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25DaGFuZ2UoKSB7XG4gICAgICBzcy5zZXRWYWx1ZSgpO1xuICAgIH1cbiAgICBzcy5hdHRhY2hFdmVudHMgPSBmdW5jdGlvbiBhdHRhY2hFdmVudHMoKSB7XG4gICAgICAkZWwub24oJ2NsaWNrJywgb25DbGljayk7XG4gICAgICAkZWwub24oJ2NoYW5nZScsICdpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0sIGlucHV0W3R5cGU9XCJyYWRpb1wiXScsIG9uQ2hhbmdlKTtcbiAgICB9O1xuICAgIHNzLmRldGFjaEV2ZW50cyA9IGZ1bmN0aW9uIGRldGFjaEV2ZW50cygpIHtcbiAgICAgICRlbC5vZmYoJ2NsaWNrJywgb25DbGljayk7XG4gICAgICAkZWwub2ZmKCdjaGFuZ2UnLCAnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdLCBpbnB1dFt0eXBlPVwicmFkaW9cIl0nLCBvbkNoYW5nZSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGhhbmRsZUlucHV0Q2hhbmdlKCkge1xuICAgICAgbGV0IG9wdGlvbkVsO1xuICAgICAgbGV0IHRleHQ7XG4gICAgICBjb25zdCBpbnB1dEVsID0gdGhpcztcbiAgICAgIGNvbnN0IHZhbHVlID0gaW5wdXRFbC52YWx1ZTtcbiAgICAgIGxldCBvcHRpb25UZXh0ID0gW107XG4gICAgICBsZXQgZGlzcGxheUFzO1xuICAgICAgaWYgKGlucHV0RWwudHlwZSA9PT0gJ2NoZWNrYm94Jykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNzLnNlbGVjdEVsLm9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBvcHRpb25FbCA9IHNzLnNlbGVjdEVsLm9wdGlvbnNbaV07XG4gICAgICAgICAgaWYgKG9wdGlvbkVsLnZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgb3B0aW9uRWwuc2VsZWN0ZWQgPSBpbnB1dEVsLmNoZWNrZWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvcHRpb25FbC5zZWxlY3RlZCkge1xuICAgICAgICAgICAgZGlzcGxheUFzID0gb3B0aW9uRWwuZGF0YXNldCA/IG9wdGlvbkVsLmRhdGFzZXQuZGlzcGxheUFzIDogJChvcHRpb25FbCkuZGF0YSgnZGlzcGxheS12YWx1ZS1hcycpO1xuICAgICAgICAgICAgdGV4dCA9IGRpc3BsYXlBcyAmJiB0eXBlb2YgZGlzcGxheUFzICE9PSAndW5kZWZpbmVkJyA/IGRpc3BsYXlBcyA6IG9wdGlvbkVsLnRleHRDb250ZW50O1xuICAgICAgICAgICAgb3B0aW9uVGV4dC5wdXNoKHRleHQudHJpbSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNzLm1heExlbmd0aCkge1xuICAgICAgICAgIHNzLmNoZWNrTWF4TGVuZ3RoKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdGlvbkVsID0gc3MuJHNlbGVjdEVsLmZpbmQoYG9wdGlvblt2YWx1ZT1cIiR7dmFsdWV9XCJdYClbMF07XG4gICAgICAgIGRpc3BsYXlBcyA9IG9wdGlvbkVsLmRhdGFzZXQgPyBvcHRpb25FbC5kYXRhc2V0LmRpc3BsYXlBcyA6ICQob3B0aW9uRWwpLmRhdGEoJ2Rpc3BsYXktYXMnKTtcbiAgICAgICAgdGV4dCA9IGRpc3BsYXlBcyAmJiB0eXBlb2YgZGlzcGxheUFzICE9PSAndW5kZWZpbmVkJyA/IGRpc3BsYXlBcyA6IG9wdGlvbkVsLnRleHRDb250ZW50O1xuICAgICAgICBvcHRpb25UZXh0ID0gW3RleHRdO1xuICAgICAgICBzcy5zZWxlY3RFbC52YWx1ZSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICBzcy4kc2VsZWN0RWwudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgICBzcy4kdmFsdWVFbC50ZXh0KG9wdGlvblRleHQuam9pbignLCAnKSk7XG4gICAgICBpZiAoc3MucGFyYW1zLmNsb3NlT25TZWxlY3QgJiYgc3MuaW5wdXRUeXBlID09PSAncmFkaW8nKSB7XG4gICAgICAgIHNzLmNsb3NlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3MuYXR0YWNoSW5wdXRzRXZlbnRzID0gZnVuY3Rpb24gYXR0YWNoSW5wdXRzRXZlbnRzKCkge1xuICAgICAgc3MuJGNvbnRhaW5lckVsLm9uKCdjaGFuZ2UnLCAnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdLCBpbnB1dFt0eXBlPVwicmFkaW9cIl0nLCBoYW5kbGVJbnB1dENoYW5nZSk7XG4gICAgfTtcbiAgICBzcy5kZXRhY2hJbnB1dHNFdmVudHMgPSBmdW5jdGlvbiBkZXRhY2hJbnB1dHNFdmVudHMoKSB7XG4gICAgICBzcy4kY29udGFpbmVyRWwub2ZmKCdjaGFuZ2UnLCAnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdLCBpbnB1dFt0eXBlPVwicmFkaW9cIl0nLCBoYW5kbGVJbnB1dENoYW5nZSk7XG4gICAgfTtcblxuICAgIC8vIEluc3RhbGwgTW9kdWxlc1xuICAgIHNzLnVzZUluc3RhbmNlTW9kdWxlcygpO1xuXG4gICAgLy8gSW5pdFxuICAgIHNzLmluaXQoKTtcblxuICAgIHJldHVybiBzcztcbiAgfVxuICBjaGVja01heExlbmd0aCgpIHtcbiAgICBjb25zdCBzcyA9IHRoaXM7XG4gICAgY29uc3QgJGNvbnRhaW5lckVsID0gc3MuJGNvbnRhaW5lckVsO1xuICAgIGlmIChzcy5zZWxlY3RFbC5zZWxlY3RlZE9wdGlvbnMubGVuZ3RoID49IHNzLm1heExlbmd0aCkge1xuICAgICAgJGNvbnRhaW5lckVsLmZpbmQoJ2lucHV0W3R5cGU9XCJjaGVja2JveFwiXScpLmVhY2goKGluZGV4LCBpbnB1dEVsKSA9PiB7XG4gICAgICAgIGlmICghaW5wdXRFbC5jaGVja2VkKSB7XG4gICAgICAgICAgJChpbnB1dEVsKS5wYXJlbnRzKCdsaScpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICQoaW5wdXRFbCkucGFyZW50cygnbGknKS5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICRjb250YWluZXJFbC5maW5kKCcuZGlzYWJsZWQnKS5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICB9XG4gIH1cbiAgc2V0VmFsdWUodmFsdWUpIHtcbiAgICBjb25zdCBzcyA9IHRoaXM7XG4gICAgbGV0IHZhbHVlQXJyYXkgPSBbXTtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlQXJyYXkgPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlQXJyYXkgPSBbdmFsdWVdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzcy4kc2VsZWN0RWwuZmluZCgnb3B0aW9uJykuZWFjaCgob3B0aW9uSW5kZXgsIG9wdGlvbkVsKSA9PiB7XG4gICAgICAgIGNvbnN0ICRvcHRpb25FbCA9ICQob3B0aW9uRWwpO1xuICAgICAgICBpZiAob3B0aW9uRWwuc2VsZWN0ZWQpIHtcbiAgICAgICAgICBjb25zdCBkaXNwbGF5QXMgPSBvcHRpb25FbC5kYXRhc2V0ID8gb3B0aW9uRWwuZGF0YXNldC5kaXNwbGF5QXMgOiAkb3B0aW9uRWwuZGF0YSgnZGlzcGxheS12YWx1ZS1hcycpO1xuICAgICAgICAgIGlmIChkaXNwbGF5QXMgJiYgdHlwZW9mIGRpc3BsYXlBcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHZhbHVlQXJyYXkucHVzaChkaXNwbGF5QXMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZUFycmF5LnB1c2gob3B0aW9uRWwudGV4dENvbnRlbnQudHJpbSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBzcy4kdmFsdWVFbC50ZXh0KHZhbHVlQXJyYXkuam9pbignLCAnKSk7XG4gIH1cbiAgZ2V0SXRlbXNEYXRhKCkge1xuICAgIGNvbnN0IHNzID0gdGhpcztcbiAgICBjb25zdCBpdGVtcyA9IFtdO1xuICAgIGxldCBwcmV2aW91c0dyb3VwRWw7XG4gICAgc3MuJHNlbGVjdEVsLmZpbmQoJ29wdGlvbicpLmVhY2goKGluZGV4LCBvcHRpb25FbCkgPT4ge1xuICAgICAgY29uc3QgJG9wdGlvbkVsID0gJChvcHRpb25FbCk7XG4gICAgICBjb25zdCBvcHRpb25EYXRhID0gJG9wdGlvbkVsLmRhdGFzZXQoKTtcbiAgICAgIGNvbnN0IG9wdGlvbkltYWdlID0gb3B0aW9uRGF0YS5vcHRpb25JbWFnZSB8fCBzcy5wYXJhbXMub3B0aW9uSW1hZ2U7XG4gICAgICBjb25zdCBvcHRpb25JY29uID0gb3B0aW9uRGF0YS5vcHRpb25JY29uIHx8IHNzLnBhcmFtcy5vcHRpb25JY29uO1xuICAgICAgY29uc3Qgb3B0aW9uSGFzTWVkaWEgPSBvcHRpb25JbWFnZSB8fCBvcHRpb25JY29uO1xuICAgICAgLy8gaWYgKG1hdGVyaWFsKSBvcHRpb25IYXNNZWRpYSA9IG9wdGlvbkltYWdlIHx8IG9wdGlvbkljb247XG4gICAgICBjb25zdCBvcHRpb25Db2xvciA9IG9wdGlvbkRhdGEub3B0aW9uQ29sb3I7XG5cbiAgICAgIGxldCBvcHRpb25DbGFzc05hbWUgPSBvcHRpb25EYXRhLm9wdGlvbkNsYXNzIHx8ICcnO1xuICAgICAgaWYgKCRvcHRpb25FbFswXS5kaXNhYmxlZCkgb3B0aW9uQ2xhc3NOYW1lICs9ICcgZGlzYWJsZWQnO1xuXG4gICAgICBjb25zdCBvcHRpb25Hcm91cEVsID0gJG9wdGlvbkVsLnBhcmVudCgnb3B0Z3JvdXAnKVswXTtcbiAgICAgIGNvbnN0IG9wdGlvbkdyb3VwTGFiZWwgPSBvcHRpb25Hcm91cEVsICYmIG9wdGlvbkdyb3VwRWwubGFiZWw7XG4gICAgICBsZXQgb3B0aW9uSXNMYWJlbCA9IGZhbHNlO1xuICAgICAgaWYgKG9wdGlvbkdyb3VwRWwgJiYgb3B0aW9uR3JvdXBFbCAhPT0gcHJldmlvdXNHcm91cEVsKSB7XG4gICAgICAgIG9wdGlvbklzTGFiZWwgPSB0cnVlO1xuICAgICAgICBwcmV2aW91c0dyb3VwRWwgPSBvcHRpb25Hcm91cEVsO1xuICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICBncm91cExhYmVsOiBvcHRpb25Hcm91cExhYmVsLFxuICAgICAgICAgIGlzTGFiZWw6IG9wdGlvbklzTGFiZWwsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgIHZhbHVlOiAkb3B0aW9uRWxbMF0udmFsdWUsXG4gICAgICAgIHRleHQ6ICRvcHRpb25FbFswXS50ZXh0Q29udGVudC50cmltKCksXG4gICAgICAgIHNlbGVjdGVkOiAkb3B0aW9uRWxbMF0uc2VsZWN0ZWQsXG4gICAgICAgIGdyb3VwRWw6IG9wdGlvbkdyb3VwRWwsXG4gICAgICAgIGdyb3VwTGFiZWw6IG9wdGlvbkdyb3VwTGFiZWwsXG4gICAgICAgIGltYWdlOiBvcHRpb25JbWFnZSxcbiAgICAgICAgaWNvbjogb3B0aW9uSWNvbixcbiAgICAgICAgY29sb3I6IG9wdGlvbkNvbG9yLFxuICAgICAgICBjbGFzc05hbWU6IG9wdGlvbkNsYXNzTmFtZSxcbiAgICAgICAgZGlzYWJsZWQ6ICRvcHRpb25FbFswXS5kaXNhYmxlZCxcbiAgICAgICAgaWQ6IHNzLmlkLFxuICAgICAgICBoYXNNZWRpYTogb3B0aW9uSGFzTWVkaWEsXG4gICAgICAgIGNoZWNrYm94OiBzcy5pbnB1dFR5cGUgPT09ICdjaGVja2JveCcsXG4gICAgICAgIHJhZGlvOiBzcy5pbnB1dFR5cGUgPT09ICdyYWRpbycsXG4gICAgICAgIGlucHV0TmFtZTogc3MuaW5wdXROYW1lLFxuICAgICAgICBpbnB1dFR5cGU6IHNzLmlucHV0VHlwZSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHNzLml0ZW1zID0gaXRlbXM7XG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9XG4gIHJlbmRlclNlYXJjaGJhcigpIHtcbiAgICBjb25zdCBzcyA9IHRoaXM7XG4gICAgaWYgKHNzLnBhcmFtcy5yZW5kZXJTZWFyY2hiYXIpIHJldHVybiBzcy5wYXJhbXMucmVuZGVyU2VhcmNoYmFyLmNhbGwoc3MpO1xuICAgIGNvbnN0IHNlYXJjaGJhckhUTUwgPSBgXG4gICAgICA8Zm9ybSBjbGFzcz1cInNlYXJjaGJhclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwic2VhcmNoYmFyLWlubmVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNlYXJjaGJhci1pbnB1dC13cmFwXCI+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInNlYXJjaFwiIHBsYWNlaG9sZGVyPVwiJHtzcy5wYXJhbXMuc2VhcmNoYmFyUGxhY2Vob2xkZXJ9XCIvPlxuICAgICAgICAgICAgPGkgY2xhc3M9XCJzZWFyY2hiYXItaWNvblwiPjwvaT5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaW5wdXQtY2xlYXItYnV0dG9uXCI+PC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwic2VhcmNoYmFyLWRpc2FibGUtYnV0dG9uXCI+JHtzcy5wYXJhbXMuc2VhcmNoYmFyRGlzYWJsZVRleHR9PC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZm9ybT5cbiAgICBgO1xuICAgIHJldHVybiBzZWFyY2hiYXJIVE1MO1xuICB9XG4gIHJlbmRlckl0ZW0oaXRlbSwgaW5kZXgpIHtcbiAgICBjb25zdCBzcyA9IHRoaXM7XG4gICAgaWYgKHNzLnBhcmFtcy5yZW5kZXJJdGVtKSByZXR1cm4gc3MucGFyYW1zLnJlbmRlckl0ZW0uY2FsbChzcywgaXRlbSwgaW5kZXgpO1xuICAgIGxldCBpdGVtSHRtbDtcbiAgICBpZiAoaXRlbS5pc0xhYmVsKSB7XG4gICAgICBpdGVtSHRtbCA9IGA8bGkgY2xhc3M9XCJpdGVtLWRpdmlkZXJcIj4ke2l0ZW0uZ3JvdXBMYWJlbH08L2xpPmA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZW1IdG1sID0gYFxuICAgICAgICA8bGkgY2xhc3M9XCIke2l0ZW0uY2xhc3NOYW1lIHx8ICcnfVwiPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIml0ZW0tJHtpdGVtLmlucHV0VHlwZX0gaXRlbS1jb250ZW50XCI+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cIiR7aXRlbS5pbnB1dFR5cGV9XCIgbmFtZT1cIiR7aXRlbS5pbnB1dE5hbWV9XCIgdmFsdWU9XCIke2l0ZW0udmFsdWV9XCIgJHtpdGVtLnNlbGVjdGVkID8gJ2NoZWNrZWQnIDogJyd9Lz5cbiAgICAgICAgICAgIDxpIGNsYXNzPVwiaWNvbiBpY29uLSR7aXRlbS5pbnB1dFR5cGV9XCI+PC9pPlxuICAgICAgICAgICAgJHtpdGVtLmhhc01lZGlhID8gYFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaXRlbS1tZWRpYVwiPlxuICAgICAgICAgICAgICAgICR7aXRlbS5pY29uID8gYDxpIGNsYXNzPVwiaWNvbiAke2l0ZW0uaWNvbn1cIj48L2k+YCA6ICcnfVxuICAgICAgICAgICAgICAgICR7aXRlbS5pbWFnZSA/IGA8aW1nIHNyYz1cIiR7aXRlbS5pbWFnZX1cIj5gIDogJyd9XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgYCA6ICcnfVxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIml0ZW0taW5uZXJcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIml0ZW0tdGl0bGUke2l0ZW0uY29sb3IgPyBgIGNvbG9yLSR7aXRlbS5jb2xvcn1gIDogJyd9XCI+JHtpdGVtLnRleHR9PC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2xpPlxuICAgICAgYDtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW1IdG1sO1xuICB9XG4gIHJlbmRlckl0ZW1zKCkge1xuICAgIGNvbnN0IHNzID0gdGhpcztcbiAgICBpZiAoc3MucGFyYW1zLnJlbmRlckl0ZW1zKSByZXR1cm4gc3MucGFyYW1zLnJlbmRlckl0ZW1zLmNhbGwoc3MsIHNzLml0ZW1zKTtcbiAgICBjb25zdCBpdGVtc0h0bWwgPSBgXG4gICAgICAke3NzLml0ZW1zLm1hcCgoaXRlbSwgaW5kZXgpID0+IGAke3NzLnJlbmRlckl0ZW0oaXRlbSwgaW5kZXgpfWApLmpvaW4oJycpfVxuICAgIGA7XG4gICAgcmV0dXJuIGl0ZW1zSHRtbDtcbiAgfVxuICByZW5kZXJQYWdlKCkge1xuICAgIGNvbnN0IHNzID0gdGhpcztcbiAgICBpZiAoc3MucGFyYW1zLnJlbmRlclBhZ2UpIHJldHVybiBzcy5wYXJhbXMucmVuZGVyUGFnZS5jYWxsKHNzLCBzcy5pdGVtcyk7XG4gICAgbGV0IHBhZ2VUaXRsZSA9IHNzLnBhcmFtcy5wYWdlVGl0bGU7XG4gICAgaWYgKHR5cGVvZiBwYWdlVGl0bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBwYWdlVGl0bGUgPSBzcy4kZWwuZmluZCgnLml0ZW0tdGl0bGUnKS50ZXh0KCkudHJpbSgpO1xuICAgIH1cbiAgICBjb25zdCBwYWdlSHRtbCA9IGBcbiAgICAgIDxkaXYgY2xhc3M9XCJwYWdlIHNtYXJ0LXNlbGVjdC1wYWdlXCIgZGF0YS1uYW1lPVwic21hcnQtc2VsZWN0LXBhZ2VcIiBkYXRhLXNlbGVjdC1uYW1lPVwiJHtzcy5zZWxlY3ROYW1lfVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibmF2YmFyICR7c3MucGFyYW1zLm5hdmJhckNvbG9yVGhlbWUgPyBgY29sb3ItdGhlbWUtJHtzcy5wYXJhbXMubmF2YmFyQ29sb3JUaGVtZX1gIDogJyd9XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm5hdmJhci1pbm5lciBzbGlkaW5nICR7c3MucGFyYW1zLm5hdmJhckNvbG9yVGhlbWUgPyBgY29sb3ItdGhlbWUtJHtzcy5wYXJhbXMubmF2YmFyQ29sb3JUaGVtZX1gIDogJyd9XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibGVmdFwiPlxuICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIGNsYXNzPVwibGluayBiYWNrXCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJpY29uIGljb24tYmFja1wiPjwvaT5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImlvcy1vbmx5XCI+JHtzcy5wYXJhbXMucGFnZUJhY2tMaW5rVGV4dH08L3NwYW4+XG4gICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgJHtwYWdlVGl0bGUgPyBgPGRpdiBjbGFzcz1cInRpdGxlXCI+JHtwYWdlVGl0bGV9PC9kaXY+YCA6ICcnfVxuICAgICAgICAgICAgJHtzcy5wYXJhbXMuc2VhcmNoYmFyID8gYDxkaXYgY2xhc3M9XCJzdWJuYXZiYXJcIj4ke3NzLnJlbmRlclNlYXJjaGJhcigpfTwvZGl2PmAgOiAnJ31cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgICR7c3MucGFyYW1zLnNlYXJjaGJhciA/ICc8ZGl2IGNsYXNzPVwic2VhcmNoYmFyLWJhY2tkcm9wXCI+PC9kaXY+JyA6ICcnfVxuICAgICAgICA8ZGl2IGNsYXNzPVwicGFnZS1jb250ZW50XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImxpc3Qgc21hcnQtc2VsZWN0LWxpc3QtJHtzcy5pZH0gJHtzcy5wYXJhbXMudmlydHVhbExpc3QgPyAnIHZpcnR1YWwtbGlzdCcgOiAnJ30gJHtzcy5wYXJhbXMuZm9ybUNvbG9yVGhlbWUgPyBgY29sb3ItdGhlbWUtJHtzcy5wYXJhbXMuZm9ybUNvbG9yVGhlbWV9YCA6ICcnfVwiPlxuICAgICAgICAgICAgPHVsPiR7IXNzLnBhcmFtcy52aXJ0dWFsTGlzdCAmJiBzcy5yZW5kZXJJdGVtcyhzcy5pdGVtcyl9PC91bD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICBgO1xuICAgIHJldHVybiBwYWdlSHRtbDtcbiAgfVxuICByZW5kZXJQb3B1cCgpIHtcbiAgICBjb25zdCBzcyA9IHRoaXM7XG4gICAgaWYgKHNzLnBhcmFtcy5yZW5kZXJQb3B1cCkgcmV0dXJuIHNzLnBhcmFtcy5yZW5kZXJQb3B1cC5jYWxsKHNzLCBzcy5pdGVtcyk7XG4gICAgbGV0IHBhZ2VUaXRsZSA9IHNzLnBhcmFtcy5wYWdlVGl0bGU7XG4gICAgaWYgKHR5cGVvZiBwYWdlVGl0bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBwYWdlVGl0bGUgPSBzcy4kZWwuZmluZCgnLml0ZW0tdGl0bGUnKS50ZXh0KCkudHJpbSgpO1xuICAgIH1cbiAgICBjb25zdCBwb3B1cEh0bWwgPSBgXG4gICAgICA8ZGl2IGNsYXNzPVwicG9wdXAgc21hcnQtc2VsZWN0LXBvcHVwXCIgZGF0YS1zZWxlY3QtbmFtZT1cIiR7c3Muc2VsZWN0TmFtZX1cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInZpZXdcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicGFnZSBzbWFydC1zZWxlY3QtcGFnZSAke3NzLnBhcmFtcy5zZWFyY2hiYXIgPyAncGFnZS13aXRoLXN1Ym5hdmJhcicgOiAnJ31cIiBkYXRhLW5hbWU9XCJzbWFydC1zZWxlY3QtcGFnZVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm5hdmJhciR7c3MucGFyYW1zLm5hdmJhckNvbG9yVGhlbWUgPyBgdGhlbWUtJHtzcy5wYXJhbXMubmF2YmFyQ29sb3JUaGVtZX1gIDogJyd9XCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJuYXZiYXItaW5uZXIgc2xpZGluZ1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsZWZ0XCI+XG4gICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIGNsYXNzPVwibGluayBwb3B1cC1jbG9zZVwiPlxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImljb24gaWNvbi1iYWNrXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImlvcy1vbmx5XCI+JHtzcy5wYXJhbXMucG9wdXBDbG9zZUxpbmtUZXh0fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAke3BhZ2VUaXRsZSA/IGA8ZGl2IGNsYXNzPVwidGl0bGVcIj4ke3BhZ2VUaXRsZX08L2Rpdj5gIDogJyd9XG4gICAgICAgICAgICAgICAgJHtzcy5wYXJhbXMuc2VhcmNoYmFyID8gYDxkaXYgY2xhc3M9XCJzdWJuYXZiYXJcIj4ke3NzLnJlbmRlclNlYXJjaGJhcigpfTwvZGl2PmAgOiAnJ31cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICR7c3MucGFyYW1zLnNlYXJjaGJhciA/ICc8ZGl2IGNsYXNzPVwic2VhcmNoYmFyLWJhY2tkcm9wXCI+PC9kaXY+JyA6ICcnfVxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBhZ2UtY29udGVudFwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibGlzdCBzbWFydC1zZWxlY3QtbGlzdC0ke3NzLmlkfSAke3NzLnBhcmFtcy52aXJ0dWFsTGlzdCA/ICcgdmlydHVhbC1saXN0JyA6ICcnfSR7c3MucGFyYW1zLmZvcm1Db2xvclRoZW1lID8gYHRoZW1lLSR7c3MucGFyYW1zLmZvcm1Db2xvclRoZW1lfWAgOiAnJ31cIj5cbiAgICAgICAgICAgICAgICA8dWw+JHshc3MucGFyYW1zLnZpcnR1YWxMaXN0ICYmIHNzLnJlbmRlckl0ZW1zKHNzLml0ZW1zKX08L3VsPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gICAgcmV0dXJuIHBvcHVwSHRtbDtcbiAgfVxuICByZW5kZXJTaGVldCgpIHtcbiAgICBjb25zdCBzcyA9IHRoaXM7XG4gICAgaWYgKHNzLnBhcmFtcy5yZW5kZXJTaGVldCkgcmV0dXJuIHNzLnBhcmFtcy5yZW5kZXJTaGVldC5jYWxsKHNzLCBzcy5pdGVtcyk7XG4gICAgY29uc3Qgc2hlZXRIdG1sID0gYFxuICAgICAgPGRpdiBjbGFzcz1cInNoZWV0LW1vZGFsIHNtYXJ0LXNlbGVjdC1zaGVldFwiIGRhdGEtc2VsZWN0LW5hbWU9XCIke3NzLnNlbGVjdE5hbWV9XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0b29sYmFyICR7c3MucGFyYW1zLnRvb2xiYXJDb2xvclRoZW1lID8gYHRoZW1lLSR7c3MucGFyYW1zLnRvb2xiYXJDb2xvclRoZW1lfWAgOiAnJ31cIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidG9vbGJhci1pbm5lclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxlZnRcIj48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyaWdodFwiPlxuICAgICAgICAgICAgICA8YSBjbGFzcz1cImxpbmsgc2hlZXQtY2xvc2VcIj4ke3NzLnBhcmFtcy5zaGVldENsb3NlTGlua1RleHR9PC9hPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwic2hlZXQtbW9kYWwtaW5uZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicGFnZS1jb250ZW50XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibGlzdCBzbWFydC1zZWxlY3QtbGlzdC0ke3NzLmlkfSAke3NzLnBhcmFtcy52aXJ0dWFsTGlzdCA/ICcgdmlydHVhbC1saXN0JyA6ICcnfSR7c3MucGFyYW1zLmZvcm1Db2xvclRoZW1lID8gYHRoZW1lLSR7c3MucGFyYW1zLmZvcm1Db2xvclRoZW1lfWAgOiAnJ31cIj5cbiAgICAgICAgICAgICAgPHVsPiR7IXNzLnBhcmFtcy52aXJ0dWFsTGlzdCAmJiBzcy5yZW5kZXJJdGVtcyhzcy5pdGVtcyl9PC91bD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gICAgcmV0dXJuIHNoZWV0SHRtbDtcbiAgfVxuICByZW5kZXJQb3BvdmVyKCkge1xuICAgIGNvbnN0IHNzID0gdGhpcztcbiAgICBpZiAoc3MucGFyYW1zLnJlbmRlclBvcG92ZXIpIHJldHVybiBzcy5wYXJhbXMucmVuZGVyUG9wb3Zlci5jYWxsKHNzLCBzcy5pdGVtcyk7XG4gICAgY29uc3QgcG9wb3Zlckh0bWwgPSBgXG4gICAgICA8ZGl2IGNsYXNzPVwicG9wb3ZlciBzbWFydC1zZWxlY3QtcG9wb3ZlclwiIGRhdGEtc2VsZWN0LW5hbWU9XCIke3NzLnNlbGVjdE5hbWV9XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJwb3BvdmVyLWlubmVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImxpc3Qgc21hcnQtc2VsZWN0LWxpc3QtJHtzcy5pZH0gJHtzcy5wYXJhbXMudmlydHVhbExpc3QgPyAnIHZpcnR1YWwtbGlzdCcgOiAnJ30ke3NzLnBhcmFtcy5mb3JtQ29sb3JUaGVtZSA/IGB0aGVtZS0ke3NzLnBhcmFtcy5mb3JtQ29sb3JUaGVtZX1gIDogJyd9XCI+XG4gICAgICAgICAgICA8dWw+JHshc3MucGFyYW1zLnZpcnR1YWxMaXN0ICYmIHNzLnJlbmRlckl0ZW1zKHNzLml0ZW1zKX08L3VsPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gICAgcmV0dXJuIHBvcG92ZXJIdG1sO1xuICB9XG4gIG9uT3Blbih0eXBlLCBjb250YWluZXJFbCkge1xuICAgIGNvbnN0IHNzID0gdGhpcztcbiAgICBjb25zdCBhcHAgPSBzcy5hcHA7XG4gICAgY29uc3QgJGNvbnRhaW5lckVsID0gJChjb250YWluZXJFbCk7XG4gICAgc3MuJGNvbnRhaW5lckVsID0gJGNvbnRhaW5lckVsO1xuICAgIHNzLm9wZW5lZEluID0gdHlwZTtcbiAgICBzcy5vcGVuZWQgPSB0cnVlO1xuXG4gICAgLy8gSW5pdCBWTFxuICAgIGlmIChzcy5wYXJhbXMudmlydHVhbExpc3QpIHtcbiAgICAgIHNzLnZsID0gYXBwLnZpcnR1YWxMaXN0LmNyZWF0ZSh7XG4gICAgICAgIGVsOiAkY29udGFpbmVyRWwuZmluZCgnLnZpcnR1YWwtbGlzdCcpLFxuICAgICAgICBpdGVtczogc3MuaXRlbXMsXG4gICAgICAgIHJlbmRlckl0ZW06IHNzLnJlbmRlckl0ZW0uYmluZChzcyksXG4gICAgICAgIGhlaWdodDogc3MucGFyYW1zLnZpcnR1YWxMaXN0SGVpZ2h0LFxuICAgICAgICBzZWFyY2hCeUl0ZW0ocXVlcnksIGl0ZW0pIHtcbiAgICAgICAgICBpZiAoaXRlbS50ZXh0ICYmIGl0ZW0udGV4dC50b0xvd2VyQ2FzZSgpLmluZGV4T2YocXVlcnkudHJpbSgpLnRvTG93ZXJDYXNlKCkpID49IDApIHJldHVybiB0cnVlO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEluaXQgU0JcbiAgICBpZiAoc3MucGFyYW1zLnNlYXJjaGJhcikge1xuICAgICAgc3Muc2VhcmNoYmFyID0gYXBwLnNlYXJjaGJhci5jcmVhdGUoe1xuICAgICAgICBlbDogJGNvbnRhaW5lckVsLmZpbmQoJy5zZWFyY2hiYXInKSxcbiAgICAgICAgYmFja2Ryb3BFbDogJGNvbnRhaW5lckVsLmZpbmQoJy5zZWFyY2hiYXItYmFja2Ryb3AnKSxcbiAgICAgICAgc2VhcmNoQ29udGFpbmVyOiBgLnNtYXJ0LXNlbGVjdC1saXN0LSR7c3MuaWR9YCxcbiAgICAgICAgc2VhcmNoSW46ICcuaXRlbS10aXRsZScsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgbWF4IGxlbmd0aFxuICAgIGlmIChzcy5tYXhMZW5ndGgpIHtcbiAgICAgIHNzLmNoZWNrTWF4TGVuZ3RoKCk7XG4gICAgfVxuXG4gICAgLy8gQ2xvc2Ugb24gc2VsZWN0XG4gICAgaWYgKHNzLnBhcmFtcy5jbG9zZU9uU2VsZWN0KSB7XG4gICAgICBzcy4kY29udGFpbmVyRWwuZmluZChgaW5wdXRbdHlwZT1cInJhZGlvXCJdW25hbWU9XCIke3NzLmlucHV0TmFtZX1cIl06Y2hlY2tlZGApLnBhcmVudHMoJ2xhYmVsJykub25jZSgnY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIHNzLmNsb3NlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBdHRhY2ggaW5wdXQgZXZlbnRzXG4gICAgc3MuYXR0YWNoSW5wdXRzRXZlbnRzKCk7XG5cbiAgICBzcy4kZWwudHJpZ2dlcignc21hcnRzZWxlY3Q6b3BlbicsIHNzKTtcbiAgICBzcy5lbWl0KCdsb2NhbDo6b3BlbiBzbWFydFNlbGVjdE9wZW4nLCBzcyk7XG4gIH1cbiAgb25PcGVuZWQoKSB7XG4gICAgY29uc3Qgc3MgPSB0aGlzO1xuXG4gICAgc3MuJGVsLnRyaWdnZXIoJ3NtYXJ0c2VsZWN0Om9wZW5lZCcsIHNzKTtcbiAgICBzcy5lbWl0KCdsb2NhbDo6b3BlbmVkIHNtYXJ0U2VsZWN0T3BlbmVkJywgc3MpO1xuICB9XG4gIG9uQ2xvc2UoKSB7XG4gICAgY29uc3Qgc3MgPSB0aGlzO1xuICAgIGlmIChzcy5kZXN0cm95ZWQpIHJldHVybjtcblxuICAgIC8vIERlc3Ryb3kgVkxcbiAgICBpZiAoc3MudmwgJiYgc3MudmwuZGVzdHJveSkge1xuICAgICAgc3MudmwuZGVzdHJveSgpO1xuICAgICAgc3MudmwgPSBudWxsO1xuICAgICAgZGVsZXRlIHNzLnZsO1xuICAgIH1cblxuICAgIC8vIERlc3Ryb3kgU0JcbiAgICBpZiAoc3Muc2VhcmNoYmFyICYmIHNzLnNlYXJjaGJhci5kZXN0cm95KSB7XG4gICAgICBzcy5zZWFyY2hiYXIuZGVzdHJveSgpO1xuICAgICAgc3Muc2VhcmNoYmFyID0gbnVsbDtcbiAgICAgIGRlbGV0ZSBzcy5zZWFyY2hiYXI7XG4gICAgfVxuICAgIC8vIERldGFjaCBldmVudHNcbiAgICBzcy5kZXRhY2hJbnB1dHNFdmVudHMoKTtcblxuICAgIHNzLiRlbC50cmlnZ2VyKCdzbWFydHNlbGVjdDpjbG9zZScsIHNzKTtcbiAgICBzcy5lbWl0KCdsb2NhbDo6Y2xvc2Ugc21hcnRTZWxlY3RDbG9zZScsIHNzKTtcbiAgfVxuICBvbkNsb3NlZCgpIHtcbiAgICBjb25zdCBzcyA9IHRoaXM7XG4gICAgaWYgKHNzLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIHNzLm9wZW5lZCA9IGZhbHNlO1xuICAgIHNzLiRjb250YWluZXJFbCA9IG51bGw7XG4gICAgZGVsZXRlIHNzLiRjb250YWluZXJFbDtcblxuICAgIHNzLiRlbC50cmlnZ2VyKCdzbWFydHNlbGVjdDpjbG9zZWQnLCBzcyk7XG4gICAgc3MuZW1pdCgnbG9jYWw6OmNsb3NlZCBzbWFydFNlbGVjdENsb3NlZCcsIHNzKTtcbiAgfVxuICBvcGVuUGFnZSgpIHtcbiAgICBjb25zdCBzcyA9IHRoaXM7XG4gICAgaWYgKHNzLm9wZW5lZCkgcmV0dXJuIHNzO1xuICAgIHNzLmdldEl0ZW1zRGF0YSgpO1xuICAgIGNvbnN0IHBhZ2VIdG1sID0gc3MucmVuZGVyUGFnZShzcy5pdGVtcyk7XG5cbiAgICBzcy52aWV3LnJvdXRlci5uYXZpZ2F0ZShzcy51cmwsIHtcbiAgICAgIGNyZWF0ZVJvdXRlOiB7XG4gICAgICAgIGNvbnRlbnQ6IHBhZ2VIdG1sLFxuICAgICAgICBwYXRoOiBzcy51cmwsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBwYWdlRXZlbnRzOiB7XG4gICAgICAgICAgICBwYWdlQmVmb3JlSW4oZSwgcGFnZSkge1xuICAgICAgICAgICAgICBzcy5vbk9wZW4oJ3BhZ2UnLCBwYWdlLmVsKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYWdlQWZ0ZXJJbihlLCBwYWdlKSB7XG4gICAgICAgICAgICAgIHNzLm9uT3BlbmVkKCdwYWdlJywgcGFnZS5lbCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFnZUJlZm9yZU91dChlLCBwYWdlKSB7XG4gICAgICAgICAgICAgIHNzLm9uQ2xvc2UoJ3BhZ2UnLCBwYWdlLmVsKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYWdlQWZ0ZXJPdXQoZSwgcGFnZSkge1xuICAgICAgICAgICAgICBzcy5vbkNsb3NlZCgncGFnZScsIHBhZ2UuZWwpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gc3M7XG4gIH1cbiAgb3BlblBvcHVwKCkge1xuICAgIGNvbnN0IHNzID0gdGhpcztcbiAgICBpZiAoc3Mub3BlbmVkKSByZXR1cm4gc3M7XG4gICAgc3MuZ2V0SXRlbXNEYXRhKCk7XG4gICAgY29uc3QgcG9wdXBIdG1sID0gc3MucmVuZGVyUG9wdXAoc3MuaXRlbXMpO1xuXG4gICAgY29uc3QgcG9wdXBQYXJhbXMgPSB7XG4gICAgICBjb250ZW50OiBwb3B1cEh0bWwsXG4gICAgICBvbjoge1xuICAgICAgICBwb3B1cE9wZW4ocG9wdXApIHtcbiAgICAgICAgICBzcy5vbk9wZW4oJ3BvcHVwJywgcG9wdXAuZWwpO1xuICAgICAgICB9LFxuICAgICAgICBwb3B1cE9wZW5lZChwb3B1cCkge1xuICAgICAgICAgIHNzLm9uT3BlbmVkKCdwb3B1cCcsIHBvcHVwLmVsKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9wdXBDbG9zZShwb3B1cCkge1xuICAgICAgICAgIHNzLm9uQ2xvc2UoJ3BvcHVwJywgcG9wdXAuZWwpO1xuICAgICAgICB9LFxuICAgICAgICBwb3B1cENsb3NlZChwb3B1cCkge1xuICAgICAgICAgIHNzLm9uQ2xvc2VkKCdwb3B1cCcsIHBvcHVwLmVsKTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGlmIChzcy5wYXJhbXMucm91dGFibGVNb2RhbHMpIHtcbiAgICAgIHNzLnZpZXcucm91dGVyLm5hdmlnYXRlKHNzLnVybCwge1xuICAgICAgICBjcmVhdGVSb3V0ZToge1xuICAgICAgICAgIHBhdGg6IHNzLnVybCxcbiAgICAgICAgICBwb3B1cDogcG9wdXBQYXJhbXMsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3MubW9kYWwgPSBzcy5hcHAucG9wdXAuY3JlYXRlKHBvcHVwUGFyYW1zKS5vcGVuKCk7XG4gICAgfVxuICAgIHJldHVybiBzcztcbiAgfVxuICBvcGVuU2hlZXQoKSB7XG4gICAgY29uc3Qgc3MgPSB0aGlzO1xuICAgIGlmIChzcy5vcGVuZWQpIHJldHVybiBzcztcbiAgICBzcy5nZXRJdGVtc0RhdGEoKTtcbiAgICBjb25zdCBzaGVldEh0bWwgPSBzcy5yZW5kZXJTaGVldChzcy5pdGVtcyk7XG5cbiAgICBjb25zdCBzaGVldFBhcmFtcyA9IHtcbiAgICAgIGNvbnRlbnQ6IHNoZWV0SHRtbCxcbiAgICAgIGJhY2tkcm9wOiBmYWxzZSxcbiAgICAgIHNjcm9sbFRvRWw6IHNzLiRlbCxcbiAgICAgIGNsb3NlQnlPdXRzaWRlQ2xpY2s6IHRydWUsXG4gICAgICBvbjoge1xuICAgICAgICBzaGVldE9wZW4oc2hlZXQpIHtcbiAgICAgICAgICBzcy5vbk9wZW4oJ3NoZWV0Jywgc2hlZXQuZWwpO1xuICAgICAgICB9LFxuICAgICAgICBzaGVldE9wZW5lZChzaGVldCkge1xuICAgICAgICAgIHNzLm9uT3BlbmVkKCdzaGVldCcsIHNoZWV0LmVsKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2hlZXRDbG9zZShzaGVldCkge1xuICAgICAgICAgIHNzLm9uQ2xvc2UoJ3NoZWV0Jywgc2hlZXQuZWwpO1xuICAgICAgICB9LFxuICAgICAgICBzaGVldENsb3NlZChzaGVldCkge1xuICAgICAgICAgIHNzLm9uQ2xvc2VkKCdzaGVldCcsIHNoZWV0LmVsKTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGlmIChzcy5wYXJhbXMucm91dGFibGVNb2RhbHMpIHtcbiAgICAgIHNzLnZpZXcucm91dGVyLm5hdmlnYXRlKHNzLnVybCwge1xuICAgICAgICBjcmVhdGVSb3V0ZToge1xuICAgICAgICAgIHBhdGg6IHNzLnVybCxcbiAgICAgICAgICBzaGVldDogc2hlZXRQYXJhbXMsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3MubW9kYWwgPSBzcy5hcHAuc2hlZXQuY3JlYXRlKHNoZWV0UGFyYW1zKS5vcGVuKCk7XG4gICAgfVxuICAgIHJldHVybiBzcztcbiAgfVxuICBvcGVuUG9wb3ZlcigpIHtcbiAgICBjb25zdCBzcyA9IHRoaXM7XG4gICAgaWYgKHNzLm9wZW5lZCkgcmV0dXJuIHNzO1xuICAgIHNzLmdldEl0ZW1zRGF0YSgpO1xuICAgIGNvbnN0IHBvcG92ZXJIdG1sID0gc3MucmVuZGVyUG9wb3Zlcihzcy5pdGVtcyk7XG4gICAgY29uc3QgcG9wb3ZlclBhcmFtcyA9IHtcbiAgICAgIGNvbnRlbnQ6IHBvcG92ZXJIdG1sLFxuICAgICAgdGFyZ2V0RWw6IHNzLiRlbCxcbiAgICAgIG9uOiB7XG4gICAgICAgIHBvcG92ZXJPcGVuKHBvcG92ZXIpIHtcbiAgICAgICAgICBzcy5vbk9wZW4oJ3BvcG92ZXInLCBwb3BvdmVyLmVsKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9wb3Zlck9wZW5lZChwb3BvdmVyKSB7XG4gICAgICAgICAgc3Mub25PcGVuZWQoJ3BvcG92ZXInLCBwb3BvdmVyLmVsKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9wb3ZlckNsb3NlKHBvcG92ZXIpIHtcbiAgICAgICAgICBzcy5vbkNsb3NlKCdwb3BvdmVyJywgcG9wb3Zlci5lbCk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvcG92ZXJDbG9zZWQocG9wb3Zlcikge1xuICAgICAgICAgIHNzLm9uQ2xvc2VkKCdwb3BvdmVyJywgcG9wb3Zlci5lbCk7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH07XG4gICAgaWYgKHNzLnBhcmFtcy5yb3V0YWJsZU1vZGFscykge1xuICAgICAgc3Mudmlldy5yb3V0ZXIubmF2aWdhdGUoc3MudXJsLCB7XG4gICAgICAgIGNyZWF0ZVJvdXRlOiB7XG4gICAgICAgICAgcGF0aDogc3MudXJsLFxuICAgICAgICAgIHBvcG92ZXI6IHBvcG92ZXJQYXJhbXMsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3MubW9kYWwgPSBzcy5hcHAucG9wb3Zlci5jcmVhdGUocG9wb3ZlclBhcmFtcykub3BlbigpO1xuICAgIH1cbiAgICByZXR1cm4gc3M7XG4gIH1cbiAgb3Blbih0eXBlKSB7XG4gICAgY29uc3Qgc3MgPSB0aGlzO1xuICAgIGlmIChzcy5vcGVuZWQpIHJldHVybiBzcztcbiAgICBjb25zdCBvcGVuSW4gPSB0eXBlIHx8IHNzLnBhcmFtcy5vcGVuSW47XG4gICAgc3NbYG9wZW4ke29wZW5Jbi5zcGxpdCgnJykubWFwKChlbCwgaW5kZXgpID0+IHtcbiAgICAgIGlmIChpbmRleCA9PT0gMCkgcmV0dXJuIGVsLnRvVXBwZXJDYXNlKCk7XG4gICAgICByZXR1cm4gZWw7XG4gICAgfSkuam9pbignJyl9YF0oKTtcbiAgICByZXR1cm4gc3M7XG4gIH1cbiAgY2xvc2UoKSB7XG4gICAgY29uc3Qgc3MgPSB0aGlzO1xuICAgIGlmICghc3Mub3BlbmVkKSByZXR1cm4gc3M7XG4gICAgaWYgKHNzLnBhcmFtcy5yb3V0YWJsZU1vZGFscyB8fCBzcy5vcGVuZWRJbiA9PT0gJ3BhZ2UnKSB7XG4gICAgICBzcy52aWV3LnJvdXRlci5iYWNrKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNzLm1vZGFsLm9uY2UoJ21vZGFsQ2xvc2VkJywgKCkgPT4ge1xuICAgICAgICBVdGlscy5uZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgc3MubW9kYWwuZGVzdHJveSgpO1xuICAgICAgICAgIGRlbGV0ZSBzcy5tb2RhbDtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHNzLm1vZGFsLmNsb3NlKCk7XG4gICAgfVxuICAgIHJldHVybiBzcztcbiAgfVxuICBpbml0KCkge1xuICAgIGNvbnN0IHNzID0gdGhpcztcbiAgICBzcy5hdHRhY2hFdmVudHMoKTtcbiAgICBzcy5zZXRWYWx1ZSgpO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgY29uc3Qgc3MgPSB0aGlzO1xuICAgIHNzLmVtaXQoJ2xvY2FsOjpiZWZvcmVEZXN0cm95IHNtYXJ0U2VsZWN0QmVmb3JlRGVzdHJveScsIHNzKTtcbiAgICBzcy4kZWwudHJpZ2dlcignc21hcnRzZWxlY3Q6YmVmb3JlZGVzdHJveScsIHNzKTtcbiAgICBzcy5kZXRhY2hFdmVudHMoKTtcbiAgICBkZWxldGUgc3MuJGVsWzBdLmY3U21hcnRTZWxlY3Q7XG4gICAgVXRpbHMuZGVsZXRlUHJvcHMoc3MpO1xuICAgIHNzLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cbn1cblxudmFyIHNtYXJ0U2VsZWN0ID0ge1xuICBuYW1lOiAnc21hcnRTZWxlY3QnLFxuICBwYXJhbXM6IHtcbiAgICBzbWFydFNlbGVjdDoge1xuICAgICAgZWw6IHVuZGVmaW5lZCxcbiAgICAgIHZhbHVlRWw6IHVuZGVmaW5lZCxcbiAgICAgIG9wZW5JbjogJ3BhZ2UnLCAvLyBvciAncG9wdXAnIG9yICdzaGVldCcgb3IgJ3BvcG92ZXInXG4gICAgICBwYWdlVGl0bGU6IHVuZGVmaW5lZCxcbiAgICAgIHBhZ2VCYWNrTGlua1RleHQ6ICdCYWNrJyxcbiAgICAgIHBvcHVwQ2xvc2VMaW5rVGV4dDogJ0Nsb3NlJyxcbiAgICAgIHNoZWV0Q2xvc2VMaW5rVGV4dDogJ0RvbmUnLFxuICAgICAgc2VhcmNoYmFyOiBmYWxzZSxcbiAgICAgIHNlYXJjaGJhclBsYWNlaG9sZGVyOiAnU2VhcmNoJyxcbiAgICAgIHNlYXJjaGJhckRpc2FibGVUZXh0OiAnQ2FuY2VsJyxcbiAgICAgIGNsb3NlT25TZWxlY3Q6IGZhbHNlLFxuICAgICAgdmlydHVhbExpc3Q6IGZhbHNlLFxuICAgICAgdmlydHVhbExpc3RIZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1Db2xvclRoZW1lOiB1bmRlZmluZWQsXG4gICAgICBuYXZiYXJDb2xvclRoZW1lOiB1bmRlZmluZWQsXG4gICAgICByb3V0YWJsZU1vZGFsczogdHJ1ZSxcbiAgICAgIHVybDogJ3NlbGVjdCcsXG4gICAgICAvKlxuICAgICAgICBDdXN0b20gcmVuZGVyIGZ1bmN0aW9uc1xuICAgICAgKi9cbiAgICAgIHJlbmRlclBhZ2U6IHVuZGVmaW5lZCxcbiAgICAgIHJlbmRlclBvcHVwOiB1bmRlZmluZWQsXG4gICAgICByZW5kZXJTaGVldDogdW5kZWZpbmVkLFxuICAgICAgcmVuZGVyUG9wb3ZlcjogdW5kZWZpbmVkLFxuICAgICAgcmVuZGVySXRlbXM6IHVuZGVmaW5lZCxcbiAgICAgIHJlbmRlckl0ZW06IHVuZGVmaW5lZCxcbiAgICAgIHJlbmRlclNlYXJjaGJhcjogdW5kZWZpbmVkLFxuICAgIH0sXG4gIH0sXG4gIHN0YXRpYzoge1xuICAgIFNtYXJ0U2VsZWN0LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBhcHAuc21hcnRTZWxlY3QgPSBVdGlscy5leHRlbmQoXG4gICAgICBDb25zdHJ1Y3Rvck1ldGhvZHMoe1xuICAgICAgICBkZWZhdWx0U2VsZWN0b3I6ICcuc21hcnQtc2VsZWN0JyxcbiAgICAgICAgY29uc3RydWN0b3I6IFNtYXJ0U2VsZWN0LFxuICAgICAgICBhcHAsXG4gICAgICAgIGRvbVByb3A6ICdmN1NtYXJ0U2VsZWN0JyxcbiAgICAgIH0pLFxuICAgICAge1xuICAgICAgICBvcGVuKHNtYXJ0U2VsZWN0RWwpIHtcbiAgICAgICAgICBjb25zdCBzcyA9IGFwcC5zbWFydFNlbGVjdC5nZXQoc21hcnRTZWxlY3RFbCk7XG4gICAgICAgICAgaWYgKHNzICYmIHNzLm9wZW4pIHJldHVybiBzcy5vcGVuKCk7XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2Uoc21hcnRTZWxlY3RFbCkge1xuICAgICAgICAgIGNvbnN0IHNzID0gYXBwLnNtYXJ0U2VsZWN0LmdldChzbWFydFNlbGVjdEVsKTtcbiAgICAgICAgICBpZiAoc3MgJiYgc3MuY2xvc2UpIHJldHVybiBzcy5jbG9zZSgpO1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgKTtcbiAgfSxcblxuICBvbjoge1xuICAgIHRhYk1vdW50ZWQodGFiRWwpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICAkKHRhYkVsKS5maW5kKCcuc21hcnQtc2VsZWN0LWluaXQnKS5lYWNoKChpbmRleCwgc21hcnRTZWxlY3RFbCkgPT4ge1xuICAgICAgICBhcHAuc21hcnRTZWxlY3QuY3JlYXRlKFV0aWxzLmV4dGVuZCh7IGVsOiBzbWFydFNlbGVjdEVsIH0sICQoc21hcnRTZWxlY3RFbCkuZGF0YXNldCgpKSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHRhYkJlZm9yZVJlbW92ZSh0YWJFbCkge1xuICAgICAgJCh0YWJFbCkuZmluZCgnLnNtYXJ0LXNlbGVjdC1pbml0JykuZWFjaCgoaW5kZXgsIHNtYXJ0U2VsZWN0RWwpID0+IHtcbiAgICAgICAgaWYgKHNtYXJ0U2VsZWN0RWwuZjdTbWFydFNlbGVjdCAmJiBzbWFydFNlbGVjdEVsLmY3U21hcnRTZWxlY3QuZGVzdHJveSkge1xuICAgICAgICAgIHNtYXJ0U2VsZWN0RWwuZjdTbWFydFNlbGVjdC5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcGFnZUluaXQocGFnZSkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIHBhZ2UuJGVsLmZpbmQoJy5zbWFydC1zZWxlY3QtaW5pdCcpLmVhY2goKGluZGV4LCBzbWFydFNlbGVjdEVsKSA9PiB7XG4gICAgICAgIGFwcC5zbWFydFNlbGVjdC5jcmVhdGUoVXRpbHMuZXh0ZW5kKHsgZWw6IHNtYXJ0U2VsZWN0RWwgfSwgJChzbWFydFNlbGVjdEVsKS5kYXRhc2V0KCkpKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcGFnZUJlZm9yZVJlbW92ZShwYWdlKSB7XG4gICAgICBwYWdlLiRlbC5maW5kKCcuc21hcnQtc2VsZWN0LWluaXQnKS5lYWNoKChpbmRleCwgc21hcnRTZWxlY3RFbCkgPT4ge1xuICAgICAgICBpZiAoc21hcnRTZWxlY3RFbC5mN1NtYXJ0U2VsZWN0ICYmIHNtYXJ0U2VsZWN0RWwuZjdTbWFydFNlbGVjdC5kZXN0cm95KSB7XG4gICAgICAgICAgc21hcnRTZWxlY3RFbC5mN1NtYXJ0U2VsZWN0LmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgfSxcbiAgY2xpY2tzOiB7XG4gICAgJy5zbWFydC1zZWxlY3QnOiBmdW5jdGlvbiBvcGVuKCRjbGlja2VkRWwsIGRhdGEpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBpZiAoISRjbGlja2VkRWxbMF0uZjdTbWFydFNlbGVjdCkge1xuICAgICAgICBjb25zdCBzcyA9IGFwcC5zbWFydFNlbGVjdC5jcmVhdGUoVXRpbHMuZXh0ZW5kKHsgZWw6ICRjbGlja2VkRWwgfSwgZGF0YSkpO1xuICAgICAgICBzcy5vcGVuKCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn07XG5cbmNsYXNzIENhbGVuZGFyIGV4dGVuZHMgRnJhbWV3b3JrN0NsYXNzIHtcbiAgY29uc3RydWN0b3IoYXBwLCBwYXJhbXMgPSB7fSkge1xuICAgIHN1cGVyKHBhcmFtcywgW2FwcF0pO1xuICAgIGNvbnN0IGNhbGVuZGFyID0gdGhpcztcbiAgICBjYWxlbmRhci5wYXJhbXMgPSBVdGlscy5leHRlbmQoe1xuXG4gICAgfSwgcGFyYW1zKTtcbiAgICByZXR1cm4gY2FsZW5kYXI7XG4gIH1cbn1cblxudmFyIGNhbGVuZGFyID0ge1xuICBuYW1lOiAnY2FsZW5kYXInLFxuICBzdGF0aWM6IHtcbiAgICBDYWxlbmRhcixcbiAgfSxcbiAgaW5zdGFuY2U6IHtcbiAgICBjYWxlbmRhcihwYXJhbXMpIHtcbiAgICAgIHJldHVybiBuZXcgQ2FsZW5kYXIodGhpcywgcGFyYW1zKTtcbiAgICB9LFxuICB9LFxufTtcblxuY2xhc3MgUGlja2VyIGV4dGVuZHMgRnJhbWV3b3JrN0NsYXNzIHtcbiAgY29uc3RydWN0b3IoYXBwLCBwYXJhbXMgPSB7fSkge1xuICAgIHN1cGVyKHBhcmFtcyk7XG4gICAgY29uc3QgcGlja2VyID0gdGhpcztcbiAgICBwaWNrZXIucGFyYW1zID0gVXRpbHMuZXh0ZW5kKHtcblxuICAgIH0sIHBhcmFtcyk7XG4gICAgcmV0dXJuIHBpY2tlcjtcbiAgfVxufVxuXG52YXIgcGlja2VyID0ge1xuICBuYW1lOiAncGlja2VyJyxcbiAgc3RhdGljOiB7XG4gICAgUGlja2VyLFxuICB9LFxuICBpbnN0YW5jZToge1xuICAgIHBpY2tlcihwYXJhbXMpIHtcbiAgICAgIHJldHVybiBuZXcgUGlja2VyKHRoaXMsIHBhcmFtcyk7XG4gICAgfSxcbiAgfSxcbn07XG5cbmNvbnN0IEluZmluaXRlU2Nyb2xsID0ge1xuICBoYW5kbGVTY3JvbGwoZWwsIGUpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIGNvbnN0ICRlbCA9ICQoZWwpO1xuICAgIGNvbnN0IHNjcm9sbFRvcCA9ICRlbFswXS5zY3JvbGxUb3A7XG4gICAgY29uc3Qgc2Nyb2xsSGVpZ2h0ID0gJGVsWzBdLnNjcm9sbEhlaWdodDtcbiAgICBjb25zdCBoZWlnaHQgPSAkZWxbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgIGxldCBkaXN0YW5jZSA9ICRlbFswXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5maW5pdGUtZGlzdGFuY2UnKTtcblxuICAgIGNvbnN0IHZpcnR1YWxMaXN0Q29udGFpbmVyID0gJGVsLmZpbmQoJy52aXJ0dWFsLWxpc3QnKTtcbiAgICBsZXQgdmlydHVhbExpc3Q7XG5cbiAgICBjb25zdCBvblRvcCA9ICRlbC5oYXNDbGFzcygnaW5maW5pdGUtc2Nyb2xsLXRvcCcpO1xuICAgIGlmICghZGlzdGFuY2UpIGRpc3RhbmNlID0gNTA7XG4gICAgaWYgKHR5cGVvZiBkaXN0YW5jZSA9PT0gJ3N0cmluZycgJiYgZGlzdGFuY2UuaW5kZXhPZignJScpID49IDApIHtcbiAgICAgIGRpc3RhbmNlID0gKHBhcnNlSW50KGRpc3RhbmNlLCAxMCkgLyAxMDApICogaGVpZ2h0O1xuICAgIH1cbiAgICBpZiAoZGlzdGFuY2UgPiBoZWlnaHQpIGRpc3RhbmNlID0gaGVpZ2h0O1xuICAgIGlmIChvblRvcCkge1xuICAgICAgaWYgKHNjcm9sbFRvcCA8IGRpc3RhbmNlKSB7XG4gICAgICAgICRlbC50cmlnZ2VyKCdpbmZpbml0ZScsIGUpO1xuICAgICAgICBhcHAuZW1pdCgnaW5maW5pdGUnLCAkZWxbMF0sIGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc2Nyb2xsVG9wICsgaGVpZ2h0ID49IHNjcm9sbEhlaWdodCAtIGRpc3RhbmNlKSB7XG4gICAgICBpZiAodmlydHVhbExpc3RDb250YWluZXIubGVuZ3RoID4gMCkge1xuICAgICAgICB2aXJ0dWFsTGlzdCA9IHZpcnR1YWxMaXN0Q29udGFpbmVyLmVxKC0xKVswXS5mN1ZpcnR1YWxMaXN0O1xuICAgICAgICBpZiAodmlydHVhbExpc3QgJiYgIXZpcnR1YWxMaXN0LnJlYWNoRW5kICYmICF2aXJ0dWFsTGlzdC5wYXJhbXMudXBkYXRhYmxlU2Nyb2xsKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAkZWwudHJpZ2dlcignaW5maW5pdGUnLCBlKTtcbiAgICAgIGFwcC5lbWl0KCdpbmZpbml0ZScsICRlbFswXSwgZSk7XG4gICAgfVxuICB9LFxuICBjcmVhdGUoZWwpIHtcbiAgICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICRlbC5vbignc2Nyb2xsJywgZnVuY3Rpb24gaGFuZGxlKGUpIHtcbiAgICAgIGFwcC5pbmZpbml0ZVNjcm9sbC5oYW5kbGUodGhpcywgZSk7XG4gICAgfSk7XG4gIH0sXG4gIGRlc3Ryb3koZWwpIHtcbiAgICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgICAkZWwub2ZmKCdzY3JvbGwnKTtcbiAgfSxcbn07XG52YXIgaW5maW5pdGVTY3JvbGwgPSB7XG4gIG5hbWU6ICdpbmZpbml0ZVNjcm9sbCcsXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIFV0aWxzLmV4dGVuZChhcHAsIHtcbiAgICAgIGluZmluaXRlU2Nyb2xsOiB7XG4gICAgICAgIGhhbmRsZTogSW5maW5pdGVTY3JvbGwuaGFuZGxlU2Nyb2xsLmJpbmQoYXBwKSxcbiAgICAgICAgY3JlYXRlOiBJbmZpbml0ZVNjcm9sbC5jcmVhdGUuYmluZChhcHApLFxuICAgICAgICBkZXN0cm95OiBJbmZpbml0ZVNjcm9sbC5kZXN0cm95LmJpbmQoYXBwKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgdGFiTW91bnRlZCh0YWJFbCkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGNvbnN0ICR0YWJFbCA9ICQodGFiRWwpO1xuICAgICAgJHRhYkVsLmZpbmQoJy5pbmZpbml0ZS1zY3JvbGwtY29udGVudCcpLmVhY2goKGluZGV4LCBlbCkgPT4ge1xuICAgICAgICBhcHAuaW5maW5pdGVTY3JvbGwuY3JlYXRlKGVsKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdGFiQmVmb3JlUmVtb3ZlKHRhYkVsKSB7XG4gICAgICBjb25zdCAkdGFiRWwgPSAkKHRhYkVsKTtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICAkdGFiRWwuZmluZCgnLmluZmluaXRlLXNjcm9sbC1jb250ZW50JykuZWFjaCgoaW5kZXgsIGVsKSA9PiB7XG4gICAgICAgIGFwcC5pbmZpbml0ZVNjcm9sbC5kZXN0cm95KGVsKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcGFnZUluaXQocGFnZSkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIHBhZ2UuJGVsLmZpbmQoJy5pbmZpbml0ZS1zY3JvbGwtY29udGVudCcpLmVhY2goKGluZGV4LCBlbCkgPT4ge1xuICAgICAgICBhcHAuaW5maW5pdGVTY3JvbGwuY3JlYXRlKGVsKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcGFnZUJlZm9yZVJlbW92ZShwYWdlKSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgcGFnZS4kZWwuZmluZCgnLmluZmluaXRlLXNjcm9sbC1jb250ZW50JykuZWFjaCgoaW5kZXgsIGVsKSA9PiB7XG4gICAgICAgIGFwcC5pbmZpbml0ZVNjcm9sbC5kZXN0cm95KGVsKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jbGFzcyBQdWxsVG9SZWZyZXNoIGV4dGVuZHMgRnJhbWV3b3JrN0NsYXNzIHtcbiAgY29uc3RydWN0b3IoYXBwLCBlbCkge1xuICAgIHN1cGVyKHt9LCBbYXBwXSk7XG4gICAgY29uc3QgcHRyID0gdGhpcztcbiAgICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgICBjb25zdCAkcHJlbG9hZGVyRWwgPSAkZWwuZmluZCgnLnB0ci1wcmVsb2FkZXInKTtcblxuICAgIHB0ci4kZWwgPSAkZWw7XG4gICAgcHRyLmVsID0gJGVsWzBdO1xuXG4gICAgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggbW9kdWxlcyBwYXJhbXNcbiAgICBwdHIudXNlSW5zdGFuY2VNb2R1bGVzUGFyYW1zKHt9KTtcblxuICAgIGNvbnN0IGlzTWF0ZXJpYWwgPSBhcHAudGhlbWUgPT09ICdtZCc7XG5cbiAgICAvLyBEb25lXG4gICAgcHRyLmRvbmUgPSBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgY29uc3QgJHRyYW5zaXRpb25UYXJnZXQgPSBpc01hdGVyaWFsID8gJHByZWxvYWRlckVsIDogJGVsO1xuICAgICAgJHRyYW5zaXRpb25UYXJnZXQudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAgICRlbC5yZW1vdmVDbGFzcygncHRyLXRyYW5zaXRpb25pbmcgcHRyLXB1bGwtdXAgcHRyLXB1bGwtZG93bicpO1xuICAgICAgICAkZWwudHJpZ2dlcigncHRyOmRvbmUnKTtcbiAgICAgICAgcHRyLmVtaXQoJ2xvY2FsOjpkb25lIHB0ckRvbmUnLCAkZWxbMF0pO1xuICAgICAgfSk7XG4gICAgICAkZWwucmVtb3ZlQ2xhc3MoJ3B0ci1yZWZyZXNoaW5nJykuYWRkQ2xhc3MoJ3B0ci10cmFuc2l0aW9uaW5nJyk7XG4gICAgICByZXR1cm4gcHRyO1xuICAgIH07XG5cbiAgICBwdHIucmVmcmVzaCA9IGZ1bmN0aW9uIHJlZnJlc2goKSB7XG4gICAgICBpZiAoJGVsLmhhc0NsYXNzKCdwdHItcmVmcmVzaGluZycpKSByZXR1cm4gcHRyO1xuICAgICAgJGVsLmFkZENsYXNzKCdwdHItdHJhbnNpdGlvbmluZyBwdHItcmVmcmVzaGluZycpO1xuICAgICAgJGVsLnRyaWdnZXIoJ3B0cjpyZWZyZXNoJywgcHRyLmRvbmUpO1xuICAgICAgcHRyLmVtaXQoJ2xvY2FsOjpyZWZyZXNoIHB0clJlZnJlc2gnLCAkZWxbMF0sIHB0ci5kb25lKTtcbiAgICAgIHJldHVybiBwdHI7XG4gICAgfTtcblxuICAgIC8vIEV2ZW50cyBoYW5kbGluZ1xuICAgIGxldCB0b3VjaElkO1xuICAgIGxldCBpc1RvdWNoZWQ7XG4gICAgbGV0IGlzTW92ZWQ7XG4gICAgY29uc3QgdG91Y2hlc1N0YXJ0ID0ge307XG4gICAgbGV0IGlzU2Nyb2xsaW5nO1xuICAgIGxldCB0b3VjaGVzRGlmZjtcbiAgICBsZXQgcmVmcmVzaCA9IGZhbHNlO1xuICAgIGxldCB1c2VUcmFuc2xhdGUgPSBmYWxzZTtcbiAgICBsZXQgc3RhcnRUcmFuc2xhdGUgPSAwO1xuICAgIGxldCB0cmFuc2xhdGU7XG4gICAgbGV0IHNjcm9sbFRvcDtcbiAgICBsZXQgd2FzU2Nyb2xsZWQ7XG4gICAgbGV0IHRyaWdnZXJEaXN0YW5jZTtcbiAgICBsZXQgZHluYW1pY1RyaWdnZXJEaXN0YW5jZTtcbiAgICBsZXQgcHVsbFN0YXJ0ZWQ7XG4gICAgbGV0IGhhc05hdmJhciA9IGZhbHNlO1xuICAgIGNvbnN0ICRwYWdlRWwgPSAkZWwucGFyZW50cygnLnBhZ2UnKTtcblxuICAgIGlmICgkcGFnZUVsLmZpbmQoJy5uYXZiYXInKS5sZW5ndGggPiAwIHx8ICRwYWdlRWwucGFyZW50cygnLnZpZXcnKS5jaGlsZHJlbignLm5hdmJhcicpLmxlbmd0aCA+IDApIGhhc05hdmJhciA9IHRydWU7XG4gICAgaWYgKCRwYWdlRWwuaGFzQ2xhc3MoJ25vLW5hdmJhcicpKSBoYXNOYXZiYXIgPSBmYWxzZTtcbiAgICBpZiAoIWhhc05hdmJhcikgJGVsLmFkZENsYXNzKCdwdHItbm8tbmF2YmFyJyk7XG5cbiAgICAvLyBEZWZpbmUgdHJpZ2dlciBkaXN0YW5jZVxuICAgIGlmICgkZWwuYXR0cignZGF0YS1wdHItZGlzdGFuY2UnKSkge1xuICAgICAgZHluYW1pY1RyaWdnZXJEaXN0YW5jZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyaWdnZXJEaXN0YW5jZSA9IGlzTWF0ZXJpYWwgPyA2NiA6IDQ0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVRvdWNoU3RhcnQoZSkge1xuICAgICAgaWYgKGlzVG91Y2hlZCkge1xuICAgICAgICBpZiAoRGV2aWNlJDEub3MgPT09ICdhbmRyb2lkJykge1xuICAgICAgICAgIGlmICgndGFyZ2V0VG91Y2hlcycgaW4gZSAmJiBlLnRhcmdldFRvdWNoZXMubGVuZ3RoID4gMSkgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoJGVsLmhhc0NsYXNzKCdwdHItcmVmcmVzaGluZycpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgcHVsbFN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgIGlzVG91Y2hlZCA9IHRydWU7XG4gICAgICBpc1Njcm9sbGluZyA9IHVuZGVmaW5lZDtcbiAgICAgIHdhc1Njcm9sbGVkID0gdW5kZWZpbmVkO1xuICAgICAgaWYgKGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnKSB0b3VjaElkID0gZS50YXJnZXRUb3VjaGVzWzBdLmlkZW50aWZpZXI7XG4gICAgICB0b3VjaGVzU3RhcnQueCA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICAgIHRvdWNoZXNTdGFydC55ID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVRvdWNoTW92ZShlKSB7XG4gICAgICBpZiAoIWlzVG91Y2hlZCkgcmV0dXJuO1xuICAgICAgbGV0IHBhZ2VYO1xuICAgICAgbGV0IHBhZ2VZO1xuICAgICAgbGV0IHRvdWNoO1xuICAgICAgaWYgKGUudHlwZSA9PT0gJ3RvdWNobW92ZScpIHtcbiAgICAgICAgaWYgKHRvdWNoSWQgJiYgZS50b3VjaGVzKSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlLnRvdWNoZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChlLnRvdWNoZXNbaV0uaWRlbnRpZmllciA9PT0gdG91Y2hJZCkge1xuICAgICAgICAgICAgICB0b3VjaCA9IGUudG91Y2hlc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0b3VjaCkgdG91Y2ggPSBlLnRhcmdldFRvdWNoZXNbMF07XG4gICAgICAgIHBhZ2VYID0gdG91Y2gucGFnZVg7XG4gICAgICAgIHBhZ2VZID0gdG91Y2gucGFnZVk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWdlWCA9IGUucGFnZVg7XG4gICAgICAgIHBhZ2VZID0gZS5wYWdlWTtcbiAgICAgIH1cbiAgICAgIGlmICghcGFnZVggfHwgIXBhZ2VZKSByZXR1cm47XG5cblxuICAgICAgaWYgKHR5cGVvZiBpc1Njcm9sbGluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaXNTY3JvbGxpbmcgPSAhIShpc1Njcm9sbGluZyB8fCBNYXRoLmFicyhwYWdlWSAtIHRvdWNoZXNTdGFydC55KSA+IE1hdGguYWJzKHBhZ2VYIC0gdG91Y2hlc1N0YXJ0LngpKTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNTY3JvbGxpbmcpIHtcbiAgICAgICAgaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2Nyb2xsVG9wID0gJGVsWzBdLnNjcm9sbFRvcDtcbiAgICAgIGlmICh0eXBlb2Ygd2FzU2Nyb2xsZWQgPT09ICd1bmRlZmluZWQnICYmIHNjcm9sbFRvcCAhPT0gMCkgd2FzU2Nyb2xsZWQgPSB0cnVlO1xuXG4gICAgICBpZiAoIWlzTW92ZWQpIHtcbiAgICAgICAgJGVsLnJlbW92ZUNsYXNzKCdwdHItdHJhbnNpdGlvbmluZycpO1xuICAgICAgICBpZiAoc2Nyb2xsVG9wID4gJGVsWzBdLm9mZnNldEhlaWdodCkge1xuICAgICAgICAgIGlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZHluYW1pY1RyaWdnZXJEaXN0YW5jZSkge1xuICAgICAgICAgIHRyaWdnZXJEaXN0YW5jZSA9ICRlbC5hdHRyKCdkYXRhLXB0ci1kaXN0YW5jZScpO1xuICAgICAgICAgIGlmICh0cmlnZ2VyRGlzdGFuY2UuaW5kZXhPZignJScpID49IDApIHRyaWdnZXJEaXN0YW5jZSA9ICgkZWxbMF0ub2Zmc2V0SGVpZ2h0ICogcGFyc2VJbnQodHJpZ2dlckRpc3RhbmNlLCAxMCkpIC8gMTAwO1xuICAgICAgICB9XG4gICAgICAgIHN0YXJ0VHJhbnNsYXRlID0gJGVsLmhhc0NsYXNzKCdwdHItcmVmcmVzaGluZycpID8gdHJpZ2dlckRpc3RhbmNlIDogMDtcbiAgICAgICAgaWYgKCRlbFswXS5zY3JvbGxIZWlnaHQgPT09ICRlbFswXS5vZmZzZXRIZWlnaHQgfHwgRGV2aWNlJDEub3MgIT09ICdpb3MnIHx8IGlzTWF0ZXJpYWwpIHtcbiAgICAgICAgICB1c2VUcmFuc2xhdGUgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVzZVRyYW5zbGF0ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpc01vdmVkID0gdHJ1ZTtcbiAgICAgIHRvdWNoZXNEaWZmID0gcGFnZVkgLSB0b3VjaGVzU3RhcnQueTtcblxuICAgICAgaWYgKCh0b3VjaGVzRGlmZiA+IDAgJiYgc2Nyb2xsVG9wIDw9IDApIHx8IHNjcm9sbFRvcCA8IDApIHtcbiAgICAgICAgLy8gaU9TIDggZml4XG4gICAgICAgIGlmIChEZXZpY2UkMS5vcyA9PT0gJ2lvcycgJiYgcGFyc2VJbnQoRGV2aWNlJDEub3NWZXJzaW9uLnNwbGl0KCcuJylbMF0sIDEwKSA+IDcgJiYgc2Nyb2xsVG9wID09PSAwICYmICF3YXNTY3JvbGxlZCkgdXNlVHJhbnNsYXRlID0gdHJ1ZTtcblxuICAgICAgICBpZiAodXNlVHJhbnNsYXRlKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRyYW5zbGF0ZSA9ICh0b3VjaGVzRGlmZiAqKiAwLjg1KSArIHN0YXJ0VHJhbnNsYXRlO1xuICAgICAgICAgIGlmIChpc01hdGVyaWFsKSB7XG4gICAgICAgICAgICAkcHJlbG9hZGVyRWwudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgwLCR7dHJhbnNsYXRlfXB4LDApYClcbiAgICAgICAgICAgICAgLmZpbmQoJy5wdHItYXJyb3cnKS50cmFuc2Zvcm0oYHJvdGF0ZSgkeygxODAgKiAodG91Y2hlc0RpZmYgLyA2NikpICsgMTAwfWRlZylgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGVsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoMCwke3RyYW5zbGF0ZX1weCwwKWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoKHVzZVRyYW5zbGF0ZSAmJiAodG91Y2hlc0RpZmYgKiogMC44NSkgPiB0cmlnZ2VyRGlzdGFuY2UpIHx8ICghdXNlVHJhbnNsYXRlICYmIHRvdWNoZXNEaWZmID49IHRyaWdnZXJEaXN0YW5jZSAqIDIpKSB7XG4gICAgICAgICAgcmVmcmVzaCA9IHRydWU7XG4gICAgICAgICAgJGVsLmFkZENsYXNzKCdwdHItcHVsbC11cCcpLnJlbW92ZUNsYXNzKCdwdHItcHVsbC1kb3duJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVmcmVzaCA9IGZhbHNlO1xuICAgICAgICAgICRlbC5yZW1vdmVDbGFzcygncHRyLXB1bGwtdXAnKS5hZGRDbGFzcygncHRyLXB1bGwtZG93bicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcHVsbFN0YXJ0ZWQpIHtcbiAgICAgICAgICAkZWwudHJpZ2dlcigncHRyOnB1bGxzdGFydCcpO1xuICAgICAgICAgIHB0ci5lbWl0KCdsb2NhbDo6cHVsbFN0YXJ0IHB0clB1bGxTdGFydCcsICRlbFswXSk7XG4gICAgICAgICAgcHVsbFN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgICRlbC50cmlnZ2VyKCdwdHI6cHVsbG1vdmUnLCB7XG4gICAgICAgICAgZXZlbnQ6IGUsXG4gICAgICAgICAgc2Nyb2xsVG9wLFxuICAgICAgICAgIHRyYW5zbGF0ZSxcbiAgICAgICAgICB0b3VjaGVzRGlmZixcbiAgICAgICAgfSk7XG4gICAgICAgIHB0ci5lbWl0KCdsb2NhbDo6cHVsbE1vdmUgcHRyUHVsbE1vdmUnLCAkZWxbMF0sIHtcbiAgICAgICAgICBldmVudDogZSxcbiAgICAgICAgICBzY3JvbGxUb3AsXG4gICAgICAgICAgdHJhbnNsYXRlLFxuICAgICAgICAgIHRvdWNoZXNEaWZmLFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1bGxTdGFydGVkID0gZmFsc2U7XG4gICAgICAgICRlbC5yZW1vdmVDbGFzcygncHRyLXB1bGwtdXAgcHRyLXB1bGwtZG93bicpO1xuICAgICAgICByZWZyZXNoID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZVRvdWNoRW5kKGUpIHtcbiAgICAgIGlmIChlLnR5cGUgPT09ICd0b3VjaGVuZCcgJiYgZS5jaGFuZ2VkVG91Y2hlcyAmJiBlLmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA+IDAgJiYgdG91Y2hJZCkge1xuICAgICAgICBpZiAoZS5jaGFuZ2VkVG91Y2hlc1swXS5pZGVudGlmaWVyICE9PSB0b3VjaElkKSB7XG4gICAgICAgICAgaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgICAgaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICAgICAgICBpc01vdmVkID0gZmFsc2U7XG4gICAgICAgICAgdG91Y2hJZCA9IG51bGw7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWlzVG91Y2hlZCB8fCAhaXNNb3ZlZCkge1xuICAgICAgICBpc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodHJhbnNsYXRlKSB7XG4gICAgICAgICRlbC5hZGRDbGFzcygncHRyLXRyYW5zaXRpb25pbmcnKTtcbiAgICAgICAgdHJhbnNsYXRlID0gMDtcbiAgICAgIH1cbiAgICAgIGlmIChpc01hdGVyaWFsKSB7XG4gICAgICAgICRwcmVsb2FkZXJFbC50cmFuc2Zvcm0oJycpXG4gICAgICAgICAgLmZpbmQoJy5wdHItYXJyb3cnKS50cmFuc2Zvcm0oJycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGVsLnRyYW5zZm9ybSgnJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWZyZXNoKSB7XG4gICAgICAgICRlbC5hZGRDbGFzcygncHRyLXJlZnJlc2hpbmcnKTtcbiAgICAgICAgJGVsLnRyaWdnZXIoJ3B0cjpyZWZyZXNoJywgcHRyLmRvbmUpO1xuICAgICAgICBwdHIuZW1pdCgnbG9jYWw6OnJlZnJlc2ggcHRyUmVmcmVzaCcsICRlbFswXSwgcHRyLmRvbmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGVsLnJlbW92ZUNsYXNzKCdwdHItcHVsbC1kb3duJyk7XG4gICAgICB9XG4gICAgICBpc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgIGlzTW92ZWQgPSBmYWxzZTtcbiAgICAgIGlmIChwdWxsU3RhcnRlZCkge1xuICAgICAgICAkZWwudHJpZ2dlcigncHRyOnB1bGxlbmQnKTtcbiAgICAgICAgcHRyLmVtaXQoJ2xvY2FsOjpwdWxsRW5kIHB0clB1bGxFbmQnLCAkZWxbMF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghJHBhZ2VFbC5sZW5ndGggfHwgISRlbC5sZW5ndGgpIHJldHVybiBwdHI7XG5cbiAgICAkZWxbMF0uZjdQdWxsVG9SZWZyZXNoID0gcHRyO1xuXG4gICAgLy8gRXZlbnRzXG4gICAgcHRyLmF0dGFjaEV2ZW50cyA9IGZ1bmN0aW9uIGF0dGFjaEV2ZW50cygpIHtcbiAgICAgIGNvbnN0IHBhc3NpdmUgPSBTdXBwb3J0JDEucGFzc2l2ZUxpc3RlbmVyID8geyBwYXNzaXZlOiB0cnVlIH0gOiBmYWxzZTtcbiAgICAgICRlbC5vbihhcHAudG91Y2hFdmVudHMuc3RhcnQsIGhhbmRsZVRvdWNoU3RhcnQsIHBhc3NpdmUpO1xuICAgICAgYXBwLm9uKCd0b3VjaG1vdmUnLCBoYW5kbGVUb3VjaE1vdmUpO1xuICAgICAgYXBwLm9uKCd0b3VjaGVuZDpwYXNzaXZlJywgaGFuZGxlVG91Y2hFbmQpO1xuICAgIH07XG4gICAgcHRyLmRldGFjaEV2ZW50cyA9IGZ1bmN0aW9uIGRldGFjaEV2ZW50cygpIHtcbiAgICAgIGNvbnN0IHBhc3NpdmUgPSBTdXBwb3J0JDEucGFzc2l2ZUxpc3RlbmVyID8geyBwYXNzaXZlOiB0cnVlIH0gOiBmYWxzZTtcbiAgICAgICRlbC5vZmYoYXBwLnRvdWNoRXZlbnRzLnN0YXJ0LCBoYW5kbGVUb3VjaFN0YXJ0LCBwYXNzaXZlKTtcbiAgICAgIGFwcC5vZmYoJ3RvdWNobW92ZScsIGhhbmRsZVRvdWNoTW92ZSk7XG4gICAgICBhcHAub2ZmKCd0b3VjaGVuZDpwYXNzaXZlJywgaGFuZGxlVG91Y2hFbmQpO1xuICAgIH07XG5cbiAgICAvLyBJbnN0YWxsIE1vZHVsZXNcbiAgICBwdHIudXNlSW5zdGFuY2VNb2R1bGVzKCk7XG5cbiAgICAvLyBJbml0XG4gICAgcHRyLmluaXQoKTtcblxuICAgIHJldHVybiBwdHI7XG4gIH1cbiAgaW5pdCgpIHtcbiAgICBjb25zdCBwdHIgPSB0aGlzO1xuICAgIHB0ci5hdHRhY2hFdmVudHMoKTtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIGxldCBwdHIgPSB0aGlzO1xuICAgIHB0ci5lbWl0KCdsb2NhbDo6YmVmb3JlRGVzdHJveSBwdHJCZWZvcmVEZXN0cm95JywgcHRyKTtcbiAgICBwdHIuJGVsLnRyaWdnZXIoJ3B0cjpiZWZvcmVkZXN0cm95JywgcHRyKTtcbiAgICBkZWxldGUgcHRyLmVsLmY3UHVsbFRvUmVmcmVzaDtcbiAgICBwdHIuZGV0YWNoRXZlbnRzKCk7XG4gICAgVXRpbHMuZGVsZXRlUHJvcHMocHRyKTtcbiAgICBwdHIgPSBudWxsO1xuICB9XG59XG5cbnZhciBwdWxsVG9SZWZyZXNoID0ge1xuICBuYW1lOiAncHVsbFRvUmVmcmVzaCcsXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIGFwcC5wdHIgPSBVdGlscy5leHRlbmQoXG4gICAgICBDb25zdHJ1Y3Rvck1ldGhvZHMoe1xuICAgICAgICBkZWZhdWx0U2VsZWN0b3I6ICcucHRyLWNvbnRlbnQnLFxuICAgICAgICBjb25zdHJ1Y3RvcjogUHVsbFRvUmVmcmVzaCxcbiAgICAgICAgYXBwLFxuICAgICAgICBkb21Qcm9wOiAnZjdQdWxsVG9SZWZyZXNoJyxcbiAgICAgIH0pLFxuICAgICAge1xuICAgICAgICBkb25lKGVsKSB7XG4gICAgICAgICAgY29uc3QgcHRyID0gYXBwLnB0ci5nZXQoZWwpO1xuICAgICAgICAgIGlmIChwdHIpIHJldHVybiBwdHIuZG9uZSgpO1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIHJlZnJlc2goZWwpIHtcbiAgICAgICAgICBjb25zdCBwdHIgPSBhcHAucHRyLmdldChlbCk7XG4gICAgICAgICAgaWYgKHB0cikgcmV0dXJuIHB0ci5yZWZyZXNoKCk7XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICApO1xuICB9LFxuICBzdGF0aWM6IHtcbiAgICBQdWxsVG9SZWZyZXNoLFxuICB9LFxuICBvbjoge1xuICAgIHRhYk1vdW50ZWQodGFiRWwpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBjb25zdCAkdGFiRWwgPSAkKHRhYkVsKTtcbiAgICAgICR0YWJFbC5maW5kKCcucHRyLWNvbnRlbnQnKS5lYWNoKChpbmRleCwgZWwpID0+IHtcbiAgICAgICAgYXBwLnB0ci5jcmVhdGUoZWwpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICB0YWJCZWZvcmVSZW1vdmUodGFiRWwpIHtcbiAgICAgIGNvbnN0ICR0YWJFbCA9ICQodGFiRWwpO1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgICR0YWJFbC5maW5kKCcucHRyLWNvbnRlbnQnKS5lYWNoKChpbmRleCwgZWwpID0+IHtcbiAgICAgICAgYXBwLnB0ci5kZXN0cm95KGVsKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcGFnZUluaXQocGFnZSkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIHBhZ2UuJGVsLmZpbmQoJy5wdHItY29udGVudCcpLmVhY2goKGluZGV4LCBlbCkgPT4ge1xuICAgICAgICBhcHAucHRyLmNyZWF0ZShlbCk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHBhZ2VCZWZvcmVSZW1vdmUocGFnZSkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIHBhZ2UuJGVsLmZpbmQoJy5wdHItY29udGVudCcpLmVhY2goKGluZGV4LCBlbCkgPT4ge1xuICAgICAgICBhcHAucHRyLmRlc3Ryb3koZWwpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgfSxcbn07XG5cbmNvbnN0IExhenkgPSB7XG4gIGRlc3Ryb3kocGFnZUVsKSB7XG4gICAgY29uc3QgJHBhZ2VFbCA9ICQocGFnZUVsKS5jbG9zZXN0KCcucGFnZScpO1xuICAgIGlmICghJHBhZ2VFbC5sZW5ndGgpIHJldHVybjtcbiAgICBpZiAoJHBhZ2VFbFswXS5mN0Rlc3Ryb3lMYXp5KSB7XG4gICAgICAkcGFnZUVsWzBdLmY3RGVzdHJveUxhenkoKTtcbiAgICB9XG4gIH0sXG4gIGluaXQocGFnZUVsKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBjb25zdCAkcGFnZUVsID0gJChwYWdlRWwpLmNsb3Nlc3QoJy5wYWdlJykuZXEoMCk7XG5cbiAgICAvLyBMYXp5IGltYWdlc1xuICAgIGNvbnN0IGxhenlMb2FkSW1hZ2VzID0gJHBhZ2VFbC5maW5kKCcubGF6eScpO1xuICAgIGlmIChsYXp5TG9hZEltYWdlcy5sZW5ndGggPT09IDAgJiYgISRwYWdlRWwuaGFzQ2xhc3MoJ2xhenknKSkgcmV0dXJuO1xuXG4gICAgLy8gUGxhY2Vob2xkZXJcbiAgICBjb25zdCBwbGFjZWhvbGRlclNyYyA9IGFwcC5wYXJhbXMubGF6eS5wbGFjZWhvbGRlcjtcblxuICAgIGlmIChwbGFjZWhvbGRlclNyYyAhPT0gZmFsc2UpIHtcbiAgICAgIGxhenlMb2FkSW1hZ2VzLmVhY2goKGluZGV4LCBsYXp5RWwpID0+IHtcbiAgICAgICAgaWYgKCQobGF6eUVsKS5hdHRyKCdkYXRhLXNyYycpICYmICEkKGxhenlFbCkuYXR0cignc3JjJykpICQobGF6eUVsKS5hdHRyKCdzcmMnLCBwbGFjZWhvbGRlclNyYyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBsb2FkIGltYWdlXG4gICAgY29uc3QgaW1hZ2VzU2VxdWVuY2UgPSBbXTtcbiAgICBsZXQgaW1hZ2VJc0xvYWRpbmcgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIG9uSW1hZ2VDb21wbGV0ZShsYXp5RWwpIHtcbiAgICAgIGlmIChpbWFnZXNTZXF1ZW5jZS5pbmRleE9mKGxhenlFbCkgPj0gMCkge1xuICAgICAgICBpbWFnZXNTZXF1ZW5jZS5zcGxpY2UoaW1hZ2VzU2VxdWVuY2UuaW5kZXhPZihsYXp5RWwpLCAxKTtcbiAgICAgIH1cbiAgICAgIGltYWdlSXNMb2FkaW5nID0gZmFsc2U7XG4gICAgICBpZiAoYXBwLnBhcmFtcy5sYXp5LnNlcXVlbnRpYWwgJiYgaW1hZ2VzU2VxdWVuY2UubGVuZ3RoID4gMCkge1xuICAgICAgICBpbWFnZUlzTG9hZGluZyA9IHRydWU7XG4gICAgICAgIGFwcC5sYXp5LmxvYWRJbWFnZShpbWFnZXNTZXF1ZW5jZVswXSwgb25JbWFnZUNvbXBsZXRlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsYXp5SGFuZGxlcigpIHtcbiAgICAgIGFwcC5sYXp5LmxvYWQoJHBhZ2VFbCwgKGxhenlFbCkgPT4ge1xuICAgICAgICBpZiAoYXBwLnBhcmFtcy5sYXp5LnNlcXVlbnRpYWwgJiYgaW1hZ2VJc0xvYWRpbmcpIHtcbiAgICAgICAgICBpZiAoaW1hZ2VzU2VxdWVuY2UuaW5kZXhPZihsYXp5RWwpIDwgMCkgaW1hZ2VzU2VxdWVuY2UucHVzaChsYXp5RWwpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpbWFnZUlzTG9hZGluZyA9IHRydWU7XG4gICAgICAgIGFwcC5sYXp5LmxvYWRJbWFnZShsYXp5RWwsIG9uSW1hZ2VDb21wbGV0ZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhdHRhY2hFdmVudHMoKSB7XG4gICAgICAkcGFnZUVsLm9uKCdsYXp5JywgbGF6eUhhbmRsZXIpO1xuICAgICAgJHBhZ2VFbC5vbignc2Nyb2xsJywgbGF6eUhhbmRsZXIsIHRydWUpO1xuICAgICAgJHBhZ2VFbC5maW5kKCcudGFiJykub24oJ3RhYjptb3VudGVkIHRhYjpzaG93JywgbGF6eUhhbmRsZXIpO1xuICAgICAgYXBwLm9uKCdyZXNpemUnLCBsYXp5SGFuZGxlcik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRldGFjaEV2ZW50cygpIHtcbiAgICAgICRwYWdlRWwub2ZmKCdsYXp5JywgbGF6eUhhbmRsZXIpO1xuICAgICAgJHBhZ2VFbC5vZmYoJ3Njcm9sbCcsIGxhenlIYW5kbGVyLCB0cnVlKTtcbiAgICAgICRwYWdlRWwuZmluZCgnLnRhYicpLm9mZigndGFiOm1vdW50ZWQgdGFiOnNob3cnLCBsYXp5SGFuZGxlcik7XG4gICAgICBhcHAub2ZmKCdyZXNpemUnLCBsYXp5SGFuZGxlcik7XG4gICAgfVxuXG4gICAgLy8gU3RvcmUgZGV0YWNoIGZ1bmN0aW9uXG4gICAgJHBhZ2VFbFswXS5mN0Rlc3Ryb3lMYXp5ID0gZGV0YWNoRXZlbnRzO1xuXG4gICAgLy8gQXR0YWNoIGV2ZW50c1xuICAgIGF0dGFjaEV2ZW50cygpO1xuXG4gICAgLy8gUnVuIGxvYWRlciBvbiBwYWdlIGxvYWQvaW5pdFxuICAgIGxhenlIYW5kbGVyKCk7XG4gIH0sXG4gIGlzSW5WaWV3cG9ydChsYXp5RWwpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIGNvbnN0IHJlY3QgPSBsYXp5RWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgdGhyZXNob2xkID0gYXBwLnBhcmFtcy5sYXp5LnRocmVzaG9sZCB8fCAwO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIHJlY3QudG9wID49ICgwIC0gdGhyZXNob2xkKSAmJlxuICAgICAgcmVjdC5sZWZ0ID49ICgwIC0gdGhyZXNob2xkKSAmJlxuICAgICAgcmVjdC50b3AgPD0gKGFwcC5oZWlnaHQgKyB0aHJlc2hvbGQpICYmXG4gICAgICByZWN0LmxlZnQgPD0gKGFwcC53aWR0aCArIHRocmVzaG9sZClcbiAgICApO1xuICB9LFxuICBsb2FkSW1hZ2UoaW1hZ2VFbCwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIGNvbnN0ICRpbWFnZUVsID0gJChpbWFnZUVsKTtcblxuICAgIGNvbnN0IGJnID0gJGltYWdlRWwuYXR0cignZGF0YS1iYWNrZ3JvdW5kJyk7XG4gICAgY29uc3Qgc3JjID0gYmcgfHwgJGltYWdlRWwuYXR0cignZGF0YS1zcmMnKTtcbiAgICBpZiAoIXNyYykgcmV0dXJuO1xuICAgIGZ1bmN0aW9uIG9uTG9hZCgpIHtcbiAgICAgICRpbWFnZUVsLnJlbW92ZUNsYXNzKCdsYXp5JykuYWRkQ2xhc3MoJ2xhenktbG9hZGVkJyk7XG4gICAgICBpZiAoYmcpIHtcbiAgICAgICAgJGltYWdlRWwuY3NzKCdiYWNrZ3JvdW5kLWltYWdlJywgYHVybCgke3NyY30pYCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkaW1hZ2VFbC5hdHRyKCdzcmMnLCBzcmMpO1xuICAgICAgfVxuICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhpbWFnZUVsKTtcbiAgICAgICRpbWFnZUVsLnRyaWdnZXIoJ2xhenk6bG9hZGVkJyk7XG4gICAgICBhcHAuZW1pdCgnbGF6eUxvYWRlZCcsICRpbWFnZUVsWzBdKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkVycm9yKCkge1xuICAgICAgJGltYWdlRWwucmVtb3ZlQ2xhc3MoJ2xhenknKS5hZGRDbGFzcygnbGF6eS1sb2FkZWQnKTtcbiAgICAgIGlmIChiZykge1xuICAgICAgICAkaW1hZ2VFbC5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnLCBgdXJsKCR7YXBwLnBhcmFtcy5sYXp5LnBsYWNlaG9sZGVyIHx8ICcnfSlgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRpbWFnZUVsLmF0dHIoJ3NyYycsIGFwcC5wYXJhbXMubGF6eS5wbGFjZWhvbGRlciB8fCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKGltYWdlRWwpO1xuICAgICAgJGltYWdlRWwudHJpZ2dlcignbGF6eTplcnJvcicpO1xuICAgICAgYXBwLmVtaXQoJ2xhenlFcnJvcicsICRpbWFnZUVsWzBdKTtcbiAgICB9XG4gICAgY29uc3QgaW1hZ2UgPSBuZXcgd2luZG93LkltYWdlKCk7XG4gICAgaW1hZ2Uub25sb2FkID0gb25Mb2FkO1xuICAgIGltYWdlLm9uZXJyb3IgPSBvbkVycm9yO1xuICAgIGltYWdlLnNyYyA9IHNyYztcblxuICAgICRpbWFnZUVsLnJlbW92ZUF0dHIoJ2RhdGEtc3JjJykucmVtb3ZlQXR0cignZGF0YS1iYWNrZ3JvdW5kJyk7XG5cbiAgICAvLyBBZGQgbG9hZGVkIGNhbGxiYWNrIGFuZCBldmVudHNcbiAgICAkaW1hZ2VFbC50cmlnZ2VyKCdsYXp5OmxvYWQnKTtcbiAgICBhcHAuZW1pdCgnbGF6eUxvYWQnLCAkaW1hZ2VFbFswXSk7XG4gIH0sXG4gIGxvYWQocGFnZUVsLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgbGV0ICRwYWdlRWwgPSAkKHBhZ2VFbCk7XG4gICAgaWYgKCEkcGFnZUVsLmhhc0NsYXNzKCdwYWdlJykpICRwYWdlRWwgPSAkcGFnZUVsLnBhcmVudHMoJy5wYWdlJykuZXEoMCk7XG4gICAgaWYgKCRwYWdlRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgICRwYWdlRWwuZmluZCgnLmxhenknKS5lYWNoKChpbmRleCwgbGF6eUVsKSA9PiB7XG4gICAgICBjb25zdCAkbGF6eUVsID0gJChsYXp5RWwpO1xuICAgICAgaWYgKCRsYXp5RWwucGFyZW50cygnLnRhYjpub3QoLnRhYi1hY3RpdmUpJykubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoYXBwLmxhenkuaXNJblZpZXdwb3J0KGxhenlFbCkpIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhsYXp5RWwpO1xuICAgICAgICBlbHNlIGFwcC5sYXp5LmxvYWRJbWFnZShsYXp5RWwpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG59O1xudmFyIGxhenkgPSB7XG4gIG5hbWU6ICdsYXp5JyxcbiAgcGFyYW1zOiB7XG4gICAgbGF6eToge1xuICAgICAgcGxhY2Vob2xkZXI6ICdkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFFQUFBQUJBUU1BQUFBbDIxYktBQUFBQTFCTVZFWEN3c0s1OTJta0FBQUFDa2xFUVZRSTEyTmdBQUFBQWdBQjRpRzhNd0FBQUFCSlJVNUVya0pnZ2c9PScsXG4gICAgICB0aHJlc2hvbGQ6IDAsXG4gICAgICBzZXF1ZW50aWFsOiB0cnVlLFxuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIFV0aWxzLmV4dGVuZChhcHAsIHtcbiAgICAgIGxhenk6IHtcbiAgICAgICAgaW5pdDogTGF6eS5pbml0LmJpbmQoYXBwKSxcbiAgICAgICAgZGVzdHJveTogTGF6eS5kZXN0cm95LmJpbmQoYXBwKSxcbiAgICAgICAgbG9hZEltYWdlOiBMYXp5LmxvYWRJbWFnZS5iaW5kKGFwcCksXG4gICAgICAgIGxvYWQ6IExhenkubG9hZC5iaW5kKGFwcCksXG4gICAgICAgIGlzSW5WaWV3cG9ydDogTGF6eS5pc0luVmlld3BvcnQuYmluZChhcHApLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBwYWdlSW5pdChwYWdlKSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgaWYgKHBhZ2UuJGVsLmZpbmQoJy5sYXp5JykubGVuZ3RoID4gMCB8fCBwYWdlLiRlbC5oYXNDbGFzcygnbGF6eScpKSB7XG4gICAgICAgIGFwcC5sYXp5LmluaXQocGFnZS4kZWwpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcGFnZUFmdGVySW4ocGFnZSkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGlmIChwYWdlLiRlbC5maW5kKCcubGF6eScpLmxlbmd0aCA+IDAgfHwgcGFnZS4kZWwuaGFzQ2xhc3MoJ2xhenknKSkge1xuICAgICAgICBhcHAubGF6eS5pbml0KHBhZ2UuJGVsKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHBhZ2VCZWZvcmVSZW1vdmUocGFnZSkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGlmIChwYWdlLiRlbC5maW5kKCcubGF6eScpLmxlbmd0aCA+IDAgfHwgcGFnZS4kZWwuaGFzQ2xhc3MoJ2xhenknKSkge1xuICAgICAgICBhcHAubGF6eS5kZXN0cm95KHBhZ2UuJGVsKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHRhYk1vdW50ZWQodGFiRWwpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBjb25zdCAkdGFiRWwgPSAkKHRhYkVsKTtcbiAgICAgIGlmICgkdGFiRWwuZmluZCgnLmxhenknKS5sZW5ndGggPiAwIHx8ICR0YWJFbC5oYXNDbGFzcygnbGF6eScpKSB7XG4gICAgICAgIGFwcC5sYXp5LmluaXQoJHRhYkVsKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHRhYkJlZm9yZVJlbW92ZSh0YWJFbCkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGNvbnN0ICR0YWJFbCA9ICQodGFiRWwpO1xuICAgICAgaWYgKCR0YWJFbC5maW5kKCcubGF6eScpLmxlbmd0aCA+IDAgfHwgJHRhYkVsLmhhc0NsYXNzKCdsYXp5JykpIHtcbiAgICAgICAgYXBwLmxhenkuZGVzdHJveSgkdGFiRWwpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG59O1xuXG5jbGFzcyBEYXRhVGFibGUgZXh0ZW5kcyBGcmFtZXdvcms3Q2xhc3Mge1xuICBjb25zdHJ1Y3RvcihhcHAsIHBhcmFtcyA9IHt9KSB7XG4gICAgc3VwZXIocGFyYW1zLCBbYXBwXSk7XG5cbiAgICBjb25zdCB0YWJsZSA9IHRoaXM7XG5cbiAgICBjb25zdCBkZWZhdWx0cyA9IHtcblxuICAgIH07XG5cbiAgICAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBtb2R1bGVzIHBhcmFtc1xuICAgIHRhYmxlLnVzZUluc3RhbmNlTW9kdWxlc1BhcmFtcyhkZWZhdWx0cyk7XG5cbiAgICB0YWJsZS5wYXJhbXMgPSBVdGlscy5leHRlbmQoZGVmYXVsdHMsIHBhcmFtcyk7XG5cbiAgICAvLyBFbFxuICAgIGNvbnN0ICRlbCA9ICQodGFibGUucGFyYW1zLmVsKTtcbiAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgIHRhYmxlLiRlbCA9ICRlbDtcbiAgICB0YWJsZS5lbCA9ICRlbFswXTtcblxuICAgIGlmICh0YWJsZS4kZWxbMF0uZjdEYXRhVGFibGUpIHtcbiAgICAgIGNvbnN0IGluc3RhbmNlID0gdGFibGUuJGVsWzBdLmY3RGF0YVRhYmxlO1xuICAgICAgdGFibGUuZGVzdHJveSgpO1xuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH1cblxuICAgIHRhYmxlLiRlbFswXS5mN0RhdGFUYWJsZSA9IHRhYmxlO1xuXG4gICAgVXRpbHMuZXh0ZW5kKHRhYmxlLCB7XG4gICAgICBjb2xsYXBzaWJsZTogJGVsLmhhc0NsYXNzKCdkYXRhLXRhYmxlLWNvbGxhcHNpYmxlJyksXG4gICAgICAvLyBIZWFkZXJzXG4gICAgICAkaGVhZGVyRWw6ICRlbC5maW5kKCcuZGF0YS10YWJsZS1oZWFkZXInKSxcbiAgICAgICRoZWFkZXJTZWxlY3RlZEVsOiAkZWwuZmluZCgnLmRhdGEtdGFibGUtaGVhZGVyLXNlbGVjdGVkJyksXG4gICAgfSk7XG5cbiAgICAvLyBFdmVudHNcbiAgICBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZSkge1xuICAgICAgaWYgKGUuZGV0YWlsICYmIGUuZGV0YWlsLnNlbnRCeUY3RGF0YVRhYmxlKSB7XG4gICAgICAgIC8vIFNjcmlwdGVkIGV2ZW50LCBkb24ndCBkbyBhbnl0aGluZ1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCAkaW5wdXRFbCA9ICQodGhpcyk7XG4gICAgICBjb25zdCBjaGVja2VkID0gJGlucHV0RWxbMF0uY2hlY2tlZDtcbiAgICAgIGNvbnN0IGNvbHVtbkluZGV4ID0gJGlucHV0RWwucGFyZW50cygndGQsdGgnKS5pbmRleCgpO1xuXG4gICAgICBpZiAoJGlucHV0RWwucGFyZW50cygndGhlYWQnKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChjb2x1bW5JbmRleCA9PT0gMCkge1xuICAgICAgICAgICRlbFxuICAgICAgICAgICAgLmZpbmQoJ3Rib2R5IHRyJylbY2hlY2tlZCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXSgnZGF0YS10YWJsZS1yb3ctc2VsZWN0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICAkZWxcbiAgICAgICAgICAuZmluZChgdGJvZHkgdHIgdGQ6bnRoLWNoaWxkKCR7Y29sdW1uSW5kZXggKyAxfSkgaW5wdXRgKVxuICAgICAgICAgICAgLnByb3AoJ2NoZWNrZWQnLCBjaGVja2VkKVxuICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScsIHsgc2VudEJ5RjdEYXRhVGFibGU6IHRydWUgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY29sdW1uSW5kZXggPT09IDApIHtcbiAgICAgICAgICAkaW5wdXRFbC5wYXJlbnRzKCd0cicpW2NoZWNrZWQgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10oJ2RhdGEtdGFibGUtcm93LXNlbGVjdGVkJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNoZWNrZWQpIHtcbiAgICAgICAgICAkZWwuZmluZChgdGhlYWQgLmNoZWNrYm94LWNlbGw6bnRoLWNoaWxkKCR7Y29sdW1uSW5kZXggKyAxfSkgaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdYCkucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIGlmICgkZWwuZmluZChgdGJvZHkgLmNoZWNrYm94LWNlbGw6bnRoLWNoaWxkKCR7Y29sdW1uSW5kZXggKyAxfSkgaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdOmNoZWNrZWRgKS5sZW5ndGggPT09ICRlbC5maW5kKCd0Ym9keSB0cicpLmxlbmd0aCkge1xuICAgICAgICAgICRlbC5maW5kKGB0aGVhZCAuY2hlY2tib3gtY2VsbDpudGgtY2hpbGQoJHtjb2x1bW5JbmRleCArIDF9KSBpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl1gKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSkudHJpZ2dlcignY2hhbmdlJywgeyBzZW50QnlGN0RhdGFUYWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGFibGUuY2hlY2tTZWxlY3RlZEhlYWRlcigpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVTb3J0YWJsZUNsaWNrKCkge1xuICAgICAgY29uc3QgJGNlbGxFbCA9ICQodGhpcyk7XG4gICAgICBjb25zdCBpc0FjdGl2ZSA9ICRjZWxsRWwuaGFzQ2xhc3MoJ3NvcnRhYmxlLWNlbGwtYWN0aXZlJyk7XG4gICAgICBsZXQgY3VycmVudFNvcnQ7XG4gICAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgICAgY3VycmVudFNvcnQgPSAkY2VsbEVsLmhhc0NsYXNzKCdzb3J0YWJsZS1kZXNjJykgPyAnZGVzYycgOiAnYXNjJztcbiAgICAgICAgJGNlbGxFbC5yZW1vdmVDbGFzcygnc29ydGFibGUtZGVzYyBzb3J0YWJsZS1hc2MnKS5hZGRDbGFzcyhgc29ydGFibGUtJHtjdXJyZW50U29ydCA9PT0gJ2Rlc2MnID8gJ2FzYycgOiAnZGVzYyd9YCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkZWwuZmluZCgndGhlYWQgLnNvcnRhYmxlLWNlbGwtYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ3NvcnRhYmxlLWNlbGwtYWN0aXZlJyk7XG4gICAgICAgICRjZWxsRWwuYWRkQ2xhc3MoJ3NvcnRhYmxlLWNlbGwtYWN0aXZlJyk7XG4gICAgICB9XG4gICAgfVxuICAgIHRhYmxlLmF0dGFjaEV2ZW50cyA9IGZ1bmN0aW9uIGF0dGFjaEV2ZW50cygpIHtcbiAgICAgIHRhYmxlLiRlbC5vbignY2hhbmdlJywgJy5jaGVja2JveC1jZWxsIGlucHV0W3R5cGU9XCJjaGVja2JveFwiXScsIGhhbmRsZUNoYW5nZSk7XG4gICAgICB0YWJsZS4kZWwuZmluZCgndGhlYWQgLnNvcnRhYmxlLWNlbGwnKS5vbignY2xpY2snLCBoYW5kbGVTb3J0YWJsZUNsaWNrKTtcbiAgICB9O1xuICAgIHRhYmxlLmRldGFjaEV2ZW50cyA9IGZ1bmN0aW9uIGRldGFjaEV2ZW50cygpIHtcbiAgICAgIHRhYmxlLiRlbC5vZmYoJ2NoYW5nZScsICcuY2hlY2tib3gtY2VsbCBpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nLCBoYW5kbGVDaGFuZ2UpO1xuICAgICAgdGFibGUuJGVsLmZpbmQoJ3RoZWFkIC5zb3J0YWJsZS1jZWxsJykub2ZmKCdjbGljaycsIGhhbmRsZVNvcnRhYmxlQ2xpY2spO1xuICAgIH07XG5cbiAgICAvLyBJbnN0YWxsIE1vZHVsZXNcbiAgICB0YWJsZS51c2VJbnN0YW5jZU1vZHVsZXMoKTtcblxuICAgIC8vIEluaXRcbiAgICB0YWJsZS5pbml0KCk7XG5cbiAgICByZXR1cm4gdGFibGU7XG4gIH1cbiAgc2V0Q29sbGFwc2libGVMYWJlbHMoKSB7XG4gICAgY29uc3QgdGFibGUgPSB0aGlzO1xuICAgIGlmICghdGFibGUuY29sbGFwc2libGUpIHJldHVybjtcbiAgICB0YWJsZS4kZWwuZmluZCgndGJvZHkgdGQ6bm90KC5jaGVja2JveC1jZWxsKScpLmVhY2goKGluZGV4LCBlbCkgPT4ge1xuICAgICAgY29uc3QgJGVsID0gJChlbCk7XG4gICAgICBjb25zdCBlbEluZGV4ID0gJGVsLmluZGV4KCk7XG4gICAgICBjb25zdCBjb2xscHNpYmxlVGl0bGUgPSAkZWwuYXR0cignZGF0YS1jb2xsYXBzaWJsZS10aXRsZScpO1xuICAgICAgaWYgKCFjb2xscHNpYmxlVGl0bGUgJiYgY29sbHBzaWJsZVRpdGxlICE9PSAnJykge1xuICAgICAgICAkZWwuYXR0cignZGF0YS1jb2xsYXBzaWJsZS10aXRsZScsIHRhYmxlLiRlbC5maW5kKCd0aGVhZCB0aCcpLmVxKGVsSW5kZXgpLnRleHQoKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgY2hlY2tTZWxlY3RlZEhlYWRlcigpIHtcbiAgICBjb25zdCB0YWJsZSA9IHRoaXM7XG4gICAgaWYgKHRhYmxlLiRoZWFkZXJFbC5sZW5ndGggPiAwICYmIHRhYmxlLiRoZWFkZXJTZWxlY3RlZEVsLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGNoZWNrZWRJdGVtcyA9IHRhYmxlLiRlbC5maW5kKCd0Ym9keSAuY2hlY2tib3gtY2VsbCBpbnB1dDpjaGVja2VkJykubGVuZ3RoO1xuICAgICAgdGFibGUuJGVsW2NoZWNrZWRJdGVtcyA+IDAgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10oJ2RhdGEtdGFibGUtaGFzLWNoZWNrZWQnKTtcbiAgICAgIHRhYmxlLiRoZWFkZXJTZWxlY3RlZEVsLmZpbmQoJy5kYXRhLXRhYmxlLXNlbGVjdGVkLWNvdW50JykudGV4dChjaGVja2VkSXRlbXMpO1xuICAgIH1cbiAgfVxuICBpbml0KCkge1xuICAgIGNvbnN0IHRhYmxlID0gdGhpcztcbiAgICB0YWJsZS5hdHRhY2hFdmVudHMoKTtcbiAgICB0YWJsZS5zZXRDb2xsYXBzaWJsZUxhYmVscygpO1xuICAgIHRhYmxlLmNoZWNrU2VsZWN0ZWRIZWFkZXIoKTtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIGxldCB0YWJsZSA9IHRoaXM7XG5cbiAgICB0YWJsZS4kZWwudHJpZ2dlcignZGF0YXRhYmxlOmJlZm9yZWRlc3Ryb3knLCB0YWJsZSk7XG4gICAgdGFibGUuZW1pdCgnbG9jYWw6OmJlZm9yZURlc3Ryb3kgZGF0YXRhYmxlQmVmb3JlRGVzdHJveScsIHRhYmxlKTtcblxuICAgIHRhYmxlLmF0dGFjaEV2ZW50cygpO1xuICAgIHRhYmxlLiRlbFswXS5mN0RhdGFUYWJsZSA9IG51bGw7XG4gICAgZGVsZXRlIHRhYmxlLiRlbFswXS5mN0RhdGFUYWJsZTtcbiAgICBVdGlscy5kZWxldGVQcm9wcyh0YWJsZSk7XG4gICAgdGFibGUgPSBudWxsO1xuICB9XG59XG5cbnZhciBkYXRhVGFibGUgPSB7XG4gIG5hbWU6ICdkYXRhVGFibGUnLFxuICBzdGF0aWM6IHtcbiAgICBEYXRhVGFibGUsXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIGFwcC5kYXRhVGFibGUgPSBDb25zdHJ1Y3Rvck1ldGhvZHMoe1xuICAgICAgZGVmYXVsdFNlbGVjdG9yOiAnLmRhdGEtdGFibGUnLFxuICAgICAgY29uc3RydWN0b3I6IERhdGFUYWJsZSxcbiAgICAgIGFwcCxcbiAgICAgIGRvbVByb3A6ICdmN0RhdGFUYWJsZScsXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgdGFiQmVmb3JlUmVtb3ZlKHRhYkVsKSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgJCh0YWJFbCkuZmluZCgnLmRhdGEtdGFibGUtaW5pdCcpLmVhY2goKGluZGV4LCB0YWJsZUVsKSA9PiB7XG4gICAgICAgIGFwcC5kYXRhVGFibGUuZGVzdHJveSh0YWJsZUVsKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdGFiTW91bnRlZCh0YWJFbCkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgICQodGFiRWwpLmZpbmQoJy5kYXRhLXRhYmxlLWluaXQnKS5lYWNoKChpbmRleCwgdGFibGVFbCkgPT4ge1xuICAgICAgICBhcHAuZGF0YVRhYmxlLmNyZWF0ZSh7IGVsOiB0YWJsZUVsIH0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBwYWdlQmVmb3JlUmVtb3ZlKHBhZ2UpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBwYWdlLiRlbC5maW5kKCcuZGF0YS10YWJsZS1pbml0JykuZWFjaCgoaW5kZXgsIHRhYmxlRWwpID0+IHtcbiAgICAgICAgYXBwLmRhdGFUYWJsZS5kZXN0cm95KHRhYmxlRWwpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBwYWdlSW5pdChwYWdlKSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgcGFnZS4kZWwuZmluZCgnLmRhdGEtdGFibGUtaW5pdCcpLmVhY2goKGluZGV4LCB0YWJsZUVsKSA9PiB7XG4gICAgICAgIGFwcC5kYXRhVGFibGUuY3JlYXRlKHsgZWw6IHRhYmxlRWwgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICB9LFxuICBjbGlja3M6IHtcblxuICB9LFxufTtcblxuY29uc3QgRmFiID0ge1xuICBtb3JwaE9wZW4oZmFiRWwsIHRhcmdldEVsKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBjb25zdCAkZmFiRWwgPSAkKGZhYkVsKTtcbiAgICBjb25zdCAkdGFyZ2V0RWwgPSAkKHRhcmdldEVsKTtcbiAgICBpZiAoJHRhcmdldEVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgJHRhcmdldEVsLnRyYW5zaXRpb24oMCkuYWRkQ2xhc3MoJ2ZhYi1tb3JwaC10YXJnZXQtdmlzaWJsZScpO1xuICAgIGNvbnN0IHRhcmdldCA9IHtcbiAgICAgIHdpZHRoOiAkdGFyZ2V0RWxbMF0ub2Zmc2V0V2lkdGgsXG4gICAgICBoZWlnaHQ6ICR0YXJnZXRFbFswXS5vZmZzZXRIZWlnaHQsXG4gICAgICBvZmZzZXQ6ICR0YXJnZXRFbC5vZmZzZXQoKSxcbiAgICAgIGJvcmRlclJhZGl1czogJHRhcmdldEVsLmNzcygnYm9yZGVyLXJhZGl1cycpLFxuICAgICAgekluZGV4OiAkdGFyZ2V0RWwuY3NzKCd6LWluZGV4JyksXG4gICAgfTtcbiAgICBjb25zdCBmYWIgPSB7XG4gICAgICB3aWR0aDogJGZhYkVsWzBdLm9mZnNldFdpZHRoLFxuICAgICAgaGVpZ2h0OiAkZmFiRWxbMF0ub2Zmc2V0SGVpZ2h0LFxuICAgICAgb2Zmc2V0OiAkZmFiRWwub2Zmc2V0KCksXG4gICAgICB0cmFuc2xhdGVYOiBVdGlscy5nZXRUcmFuc2xhdGUoJGZhYkVsWzBdLCAneCcpLFxuICAgICAgdHJhbnNsYXRlWTogVXRpbHMuZ2V0VHJhbnNsYXRlKCRmYWJFbFswXSwgJ3knKSxcbiAgICB9O1xuXG4gICAgJGZhYkVsWzBdLmY3RmFiTW9ycGhEYXRhID0ge1xuICAgICAgJHRhcmdldEVsLFxuICAgICAgdGFyZ2V0LFxuICAgICAgZmFiLFxuICAgIH07XG5cbiAgICBjb25zdCBkaWZmWCA9IChmYWIub2Zmc2V0LmxlZnQgKyAoZmFiLndpZHRoIC8gMikpIC1cbiAgICAgICAgICAgICAgICAgICh0YXJnZXQub2Zmc2V0LmxlZnQgKyAodGFyZ2V0LndpZHRoIC8gMikpIC1cbiAgICAgICAgICAgICAgICAgIGZhYi50cmFuc2xhdGVYO1xuICAgIGNvbnN0IGRpZmZZID0gKGZhYi5vZmZzZXQudG9wICsgKGZhYi5oZWlnaHQgLyAyKSkgLVxuICAgICAgICAgICAgICAgICAgKHRhcmdldC5vZmZzZXQudG9wICsgKHRhcmdldC5oZWlnaHQgLyAyKSkgLVxuICAgICAgICAgICAgICAgICAgZmFiLnRyYW5zbGF0ZVk7XG4gICAgY29uc3Qgc2NhbGVYID0gdGFyZ2V0LndpZHRoIC8gZmFiLndpZHRoO1xuICAgIGNvbnN0IHNjYWxlWSA9IHRhcmdldC5oZWlnaHQgLyBmYWIuaGVpZ2h0O1xuXG4gICAgbGV0IGJvcmRlclJhZGl1cyA9IE1hdGguY2VpbChwYXJzZUludCh0YXJnZXQuYm9yZGVyUmFkaXVzLCAxMCkgLyBNYXRoLm1heChzY2FsZVgsIHNjYWxlWSkpO1xuICAgIGlmIChib3JkZXJSYWRpdXMgPiAwKSBib3JkZXJSYWRpdXMgKz0gMjtcblxuICAgICRmYWJFbFswXS5mN0ZhYk1vcnBoUmVzaXplSGFuZGxlciA9IGZ1bmN0aW9uIHJlc2l6ZUhhbmRsZXIoKSB7XG4gICAgICAkZmFiRWwudHJhbnNpdGlvbigwKS50cmFuc2Zvcm0oJycpO1xuICAgICAgJHRhcmdldEVsLnRyYW5zaXRpb24oMCk7XG4gICAgICB0YXJnZXQud2lkdGggPSAkdGFyZ2V0RWxbMF0ub2Zmc2V0V2lkdGg7XG4gICAgICB0YXJnZXQuaGVpZ2h0ID0gJHRhcmdldEVsWzBdLm9mZnNldEhlaWdodDtcbiAgICAgIHRhcmdldC5vZmZzZXQgPSAkdGFyZ2V0RWwub2Zmc2V0KCk7XG4gICAgICBmYWIub2Zmc2V0ID0gJGZhYkVsLm9mZnNldCgpO1xuXG4gICAgICBjb25zdCBkaWZmWE5ldyA9IChmYWIub2Zmc2V0LmxlZnQgKyAoZmFiLndpZHRoIC8gMikpIC1cbiAgICAgICAgICAgICAgICAgICAgICAodGFyZ2V0Lm9mZnNldC5sZWZ0ICsgKHRhcmdldC53aWR0aCAvIDIpKSAtXG4gICAgICAgICAgICAgICAgICAgICAgZmFiLnRyYW5zbGF0ZVg7XG4gICAgICBjb25zdCBkaWZmWU5ldyA9IChmYWIub2Zmc2V0LnRvcCArIChmYWIuaGVpZ2h0IC8gMikpIC1cbiAgICAgICAgICAgICAgICAgICAgICAodGFyZ2V0Lm9mZnNldC50b3AgKyAodGFyZ2V0LmhlaWdodCAvIDIpKSAtXG4gICAgICAgICAgICAgICAgICAgICAgZmFiLnRyYW5zbGF0ZVk7XG4gICAgICBjb25zdCBzY2FsZVhOZXcgPSB0YXJnZXQud2lkdGggLyBmYWIud2lkdGg7XG4gICAgICBjb25zdCBzY2FsZVlOZXcgPSB0YXJnZXQuaGVpZ2h0IC8gZmFiLmhlaWdodDtcblxuICAgICAgJGZhYkVsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHstZGlmZlhOZXd9cHgsICR7LWRpZmZZTmV3fXB4LCAwKSBzY2FsZSgke3NjYWxlWE5ld30sICR7c2NhbGVZTmV3fSlgKTtcbiAgICB9O1xuXG4gICAgJHRhcmdldEVsXG4gICAgICAuY3NzKCdvcGFjaXR5JywgMClcbiAgICAgIC50cmFuc2Zvcm0oYHNjYWxlKCR7MSAvIHNjYWxlWH0sICR7MSAvIHNjYWxlWX0pYCk7XG4gICAgJGZhYkVsXG4gICAgICAuYWRkQ2xhc3MoJ2ZhYi1vcGVuZWQnKVxuICAgICAgLmNzcygnei1pbmRleCcsIHRhcmdldC56SW5kZXggLSAxKVxuICAgICAgLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHstZGlmZlh9cHgsICR7LWRpZmZZfXB4LCAwKWApO1xuICAgICRmYWJFbC50cmFuc2l0aW9uRW5kKCgpID0+IHtcbiAgICAgICR0YXJnZXRFbC50cmFuc2l0aW9uKCcnKTtcbiAgICAgIFV0aWxzLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgJHRhcmdldEVsLmNzcygnb3BhY2l0eScsIDEpLnRyYW5zZm9ybSgnc2NhbGUoMSwxKScpO1xuICAgICAgfSk7XG4gICAgICAkZmFiRWwudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgkey1kaWZmWH1weCwgJHstZGlmZll9cHgsIDApIHNjYWxlKCR7c2NhbGVYfSwgJHtzY2FsZVl9KWApXG4gICAgICAgICAgICAuY3NzKCdib3JkZXItcmFkaXVzJywgYCR7Ym9yZGVyUmFkaXVzfXB4YClcbiAgICAgICAgICAgIC5jc3MoJ2JveC1zaGFkb3cnLCAnbm9uZScpO1xuICAgICAgYXBwLm9uKCdyZXNpemUnLCAkZmFiRWxbMF0uZjdGYWJNb3JwaFJlc2l6ZUhhbmRsZXIpO1xuICAgICAgaWYgKCR0YXJnZXRFbC5wYXJlbnRzKCcucGFnZS1jb250ZW50JykubGVuZ3RoID4gMCkge1xuICAgICAgICAkdGFyZ2V0RWwucGFyZW50cygnLnBhZ2UtY29udGVudCcpLm9uKCdzY3JvbGwnLCAkZmFiRWxbMF0uZjdGYWJNb3JwaFJlc2l6ZUhhbmRsZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBtb3JwaENsb3NlKGZhYkVsKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBjb25zdCAkZmFiRWwgPSAkKGZhYkVsKTtcbiAgICBjb25zdCBtb3JwaERhdGEgPSAkZmFiRWxbMF0uZjdGYWJNb3JwaERhdGE7XG4gICAgaWYgKCFtb3JwaERhdGEpIHJldHVybjtcbiAgICBjb25zdCB7ICR0YXJnZXRFbCwgdGFyZ2V0LCBmYWIgfSA9IG1vcnBoRGF0YTtcbiAgICBpZiAoJHRhcmdldEVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgY29uc3QgZGlmZlggPSAoZmFiLm9mZnNldC5sZWZ0ICsgKGZhYi53aWR0aCAvIDIpKSAtXG4gICAgICAgICAgICAgICAgICAodGFyZ2V0Lm9mZnNldC5sZWZ0ICsgKHRhcmdldC53aWR0aCAvIDIpKSAtXG4gICAgICAgICAgICAgICAgICBmYWIudHJhbnNsYXRlWDtcbiAgICBjb25zdCBkaWZmWSA9IChmYWIub2Zmc2V0LnRvcCArIChmYWIuaGVpZ2h0IC8gMikpIC1cbiAgICAgICAgICAgICAgICAgICh0YXJnZXQub2Zmc2V0LnRvcCArICh0YXJnZXQuaGVpZ2h0IC8gMikpIC1cbiAgICAgICAgICAgICAgICAgIGZhYi50cmFuc2xhdGVZO1xuICAgIGNvbnN0IHNjYWxlWCA9IHRhcmdldC53aWR0aCAvIGZhYi53aWR0aDtcbiAgICBjb25zdCBzY2FsZVkgPSB0YXJnZXQuaGVpZ2h0IC8gZmFiLmhlaWdodDtcblxuICAgIGFwcC5vZmYoJ3Jlc2l6ZScsICRmYWJFbFswXS5mN0ZhYk1vcnBoUmVzaXplSGFuZGxlcik7XG4gICAgaWYgKCR0YXJnZXRFbC5wYXJlbnRzKCcucGFnZS1jb250ZW50JykubGVuZ3RoID4gMCkge1xuICAgICAgJHRhcmdldEVsLnBhcmVudHMoJy5wYWdlLWNvbnRlbnQnKS5vZmYoJ3Njcm9sbCcsICRmYWJFbFswXS5mN0ZhYk1vcnBoUmVzaXplSGFuZGxlcik7XG4gICAgfVxuXG4gICAgJHRhcmdldEVsXG4gICAgICAuY3NzKCdvcGFjaXR5JywgMClcbiAgICAgIC50cmFuc2Zvcm0oYHNjYWxlKCR7MSAvIHNjYWxlWH0sICR7MSAvIHNjYWxlWX0pYCk7XG4gICAgJGZhYkVsXG4gICAgICAudHJhbnNpdGlvbignJylcbiAgICAgIC5jc3MoJ2JveC1zaGFkb3cnLCAnJylcbiAgICAgIC5jc3MoJ2JvcmRlci1yYWRpdXMnLCAnJylcbiAgICAgIC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7LWRpZmZYfXB4LCAkey1kaWZmWX1weCwgMClgKTtcbiAgICAkZmFiRWwudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAkZmFiRWxcbiAgICAgICAgLmNzcygnei1pbmRleCcsICcnKVxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ2ZhYi1vcGVuZWQnKVxuICAgICAgICAudHJhbnNmb3JtKCcnKTtcbiAgICAgIFV0aWxzLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgJGZhYkVsLnRyYW5zaXRpb25FbmQoKCkgPT4ge1xuICAgICAgICAgICR0YXJnZXRFbFxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdmYWItbW9ycGgtdGFyZ2V0LXZpc2libGUnKVxuICAgICAgICAgICAgLmNzcygnb3BhY2l0eScsICcnKVxuICAgICAgICAgICAgLnRyYW5zZm9ybSgnJylcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKCcnKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbiAgb3BlbihmYWJFbCwgdGFyZ2V0RWwpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIGNvbnN0ICRmYWJFbCA9ICQoZmFiRWwpLmVxKDApO1xuICAgIGNvbnN0ICRidXR0b25zRWwgPSAkZmFiRWwuZmluZCgnLmZhYi1idXR0b25zJyk7XG4gICAgaWYgKCEkZmFiRWwubGVuZ3RoKSByZXR1cm47XG4gICAgaWYgKCRmYWJFbC5oYXNDbGFzcygnZmFiLW9wZW5lZCcpKSByZXR1cm47XG4gICAgaWYgKCEkYnV0dG9uc0VsLmxlbmd0aCAmJiAhJGZhYkVsLmhhc0NsYXNzKCdmYWItbW9ycGgnKSkgcmV0dXJuO1xuXG4gICAgaWYgKGFwcC5mYWIub3BlbmVkRWwpIHtcbiAgICAgIGlmIChhcHAuZmFiLm9wZW5lZEVsID09PSAkZmFiRWxbMF0pIHJldHVybjtcbiAgICAgIGFwcC5mYWIuY2xvc2UoYXBwLmZhYi5vcGVuZWRFbCk7XG4gICAgfVxuICAgIGFwcC5mYWIub3BlbmVkRWwgPSAkZmFiRWxbMF07XG4gICAgaWYgKCRmYWJFbC5oYXNDbGFzcygnZmFiLW1vcnBoJykpIHtcbiAgICAgIGFwcC5mYWIubW9ycGhPcGVuKCRmYWJFbCwgdGFyZ2V0RWwgfHwgJGZhYkVsLmF0dHIoJ2RhdGEtbW9ycGgtdG8nKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICRmYWJFbC5hZGRDbGFzcygnZmFiLW9wZW5lZCcpO1xuICAgIH1cbiAgICAkZmFiRWwudHJpZ2dlcignZmFiOm9wZW4nKTtcbiAgfSxcbiAgY2xvc2UoZmFiRWwgPSAnLmZhYi1vcGVuZWQnKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBjb25zdCAkZmFiRWwgPSAkKGZhYkVsKS5lcSgwKTtcbiAgICBjb25zdCAkYnV0dG9uc0VsID0gJGZhYkVsLmZpbmQoJy5mYWItYnV0dG9ucycpO1xuICAgIGlmICghJGZhYkVsLmxlbmd0aCkgcmV0dXJuO1xuICAgIGlmICghJGZhYkVsLmhhc0NsYXNzKCdmYWItb3BlbmVkJykpIHJldHVybjtcbiAgICBpZiAoISRidXR0b25zRWwubGVuZ3RoICYmICEkZmFiRWwuaGFzQ2xhc3MoJ2ZhYi1tb3JwaCcpKSByZXR1cm47XG4gICAgYXBwLmZhYi5vcGVuZWRFbCA9IG51bGw7XG4gICAgaWYgKCRmYWJFbC5oYXNDbGFzcygnZmFiLW1vcnBoJykpIHtcbiAgICAgIGFwcC5mYWIubW9ycGhDbG9zZSgkZmFiRWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkZmFiRWwucmVtb3ZlQ2xhc3MoJ2ZhYi1vcGVuZWQnKTtcbiAgICB9XG4gICAgJGZhYkVsLnRyaWdnZXIoJ2ZhYjpjbG9zZScpO1xuICB9LFxuICB0b2dnbGUoZmFiRWwpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgIGNvbnN0ICRmYWJFbCA9ICQoZmFiRWwpO1xuICAgIGlmICghJGZhYkVsLmhhc0NsYXNzKCdmYWItb3BlbmVkJykpIGFwcC5mYWIub3BlbihmYWJFbCk7XG4gICAgZWxzZSBhcHAuZmFiLmNsb3NlKGZhYkVsKTtcbiAgfSxcbn07XG5cbnZhciBmYWIgPSB7XG4gIG5hbWU6ICdmYWInLFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoYXBwLCB7XG4gICAgICBmYWI6IHtcbiAgICAgICAgb3BlbmVkRWw6IG51bGwsXG4gICAgICAgIG1vcnBoT3BlbjogRmFiLm1vcnBoT3Blbi5iaW5kKGFwcCksXG4gICAgICAgIG1vcnBoQ2xvc2U6IEZhYi5tb3JwaENsb3NlLmJpbmQoYXBwKSxcbiAgICAgICAgb3BlbjogRmFiLm9wZW4uYmluZChhcHApLFxuICAgICAgICBjbG9zZTogRmFiLmNsb3NlLmJpbmQoYXBwKSxcbiAgICAgICAgdG9nZ2xlOiBGYWIudG9nZ2xlLmJpbmQoYXBwKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIGNsaWNrczoge1xuICAgICcuZmFiID4gYSc6IGZ1bmN0aW9uIG9wZW4oJGNsaWNrZWRFbCkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGFwcC5mYWIudG9nZ2xlKCRjbGlja2VkRWwucGFyZW50cygnLmZhYicpKTtcbiAgICB9LFxuICAgICcuZmFiLW9wZW4nOiBmdW5jdGlvbiBvcGVuKCRjbGlja2VkRWwsIGRhdGEgPSB7fSkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGFwcC5mYWIub3BlbihkYXRhLmZhYik7XG4gICAgfSxcbiAgICAnLmZhYi1jbG9zZSc6IGZ1bmN0aW9uIGNsb3NlKCRjbGlja2VkRWwsIGRhdGEgPSB7fSkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGFwcC5mYWIuY2xvc2UoZGF0YS5mYWIpO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jbGFzcyBTZWFyY2hiYXIgZXh0ZW5kcyBGcmFtZXdvcms3Q2xhc3Mge1xuICBjb25zdHJ1Y3RvcihhcHAsIHBhcmFtcyA9IHt9KSB7XG4gICAgc3VwZXIocGFyYW1zLCBbYXBwXSk7XG5cbiAgICBjb25zdCBzYiA9IHRoaXM7XG5cbiAgICBjb25zdCBkZWZhdWx0cyA9IHtcbiAgICAgIGVsOiB1bmRlZmluZWQsXG4gICAgICBpbnB1dEVsOiB1bmRlZmluZWQsXG4gICAgICBkaXNhYmxlQnV0dG9uOiB0cnVlLFxuICAgICAgZGlzYWJsZUJ1dHRvbkVsOiB1bmRlZmluZWQsXG4gICAgICBiYWNrZHJvcEVsOiB1bmRlZmluZWQsXG4gICAgICBzZWFyY2hDb250YWluZXI6IHVuZGVmaW5lZCwgLy8gY29udGFpbmVyIHRvIHNlYXJjaCwgSFRNTEVsZW1lbnQgb3IgQ1NTIHNlbGVjdG9yXG4gICAgICBzZWFyY2hJdGVtOiAnbGknLCAvLyBzaW5nbGUgaXRlbSBzZWxlY3RvciwgQ1NTIHNlbGVjdG9yXG4gICAgICBzZWFyY2hJbjogdW5kZWZpbmVkLCAvLyB3aGVyZSB0byBzZWFyY2ggaW4gaXRlbSwgQ1NTIHNlbGVjdG9yXG4gICAgICBpZ25vcmU6ICcuc2VhcmNoYmFyLWlnbm9yZScsXG4gICAgICBmb3VuZEVsOiAnLnNlYXJjaGJhci1mb3VuZCcsXG4gICAgICBub3RGb3VuZEVsOiAnLnNlYXJjaGJhci1ub3QtZm91bmQnLFxuICAgICAgYmFja2Ryb3A6IHRydWUsXG4gICAgICByZW1vdmVEaWFjcml0aWNzOiB0cnVlLFxuICAgICAgY3VzdG9tU2VhcmNoOiBmYWxzZSxcbiAgICAgIGhpZGVEaXZpZGVyczogdHJ1ZSxcbiAgICAgIGhpZGVHcm91cHM6IHRydWUsXG4gICAgICBkaXNhYmxlT25CYWNrZHJvcENsaWNrOiB0cnVlLFxuICAgICAgZXhwYW5kYWJsZTogZmFsc2UsXG4gICAgfTtcblxuICAgIC8vIEV4dGVuZCBkZWZhdWx0cyB3aXRoIG1vZHVsZXMgcGFyYW1zXG4gICAgc2IudXNlSW5zdGFuY2VNb2R1bGVzUGFyYW1zKGRlZmF1bHRzKTtcblxuICAgIHNiLnBhcmFtcyA9IFV0aWxzLmV4dGVuZChkZWZhdWx0cywgcGFyYW1zKTtcblxuICAgIGNvbnN0ICRlbCA9ICQoc2IucGFyYW1zLmVsKTtcbiAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHNiO1xuXG4gICAgJGVsWzBdLmY3U2VhcmNoYmFyID0gc2I7XG5cbiAgICBsZXQgJHBhZ2VFbDtcbiAgICBsZXQgJG5hdmJhckVsO1xuICAgIGlmICgkZWwucGFyZW50cygnLnBhZ2UnKS5sZW5ndGggPiAwKSB7XG4gICAgICAkcGFnZUVsID0gJGVsLnBhcmVudHMoJy5wYWdlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICRuYXZiYXJFbCA9ICRlbC5wYXJlbnRzKCcubmF2YmFyLWlubmVyJyk7XG4gICAgICBpZiAoJG5hdmJhckVsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKCRuYXZiYXJFbFswXS5mN1BhZ2UpIHtcbiAgICAgICAgICAkcGFnZUVsID0gJG5hdmJhckVsWzBdLmY3UGFnZS4kZWw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgJGN1cnJlbnRQYWdlRWwgPSAkZWwucGFyZW50cygnLnZpZXcnKS5maW5kKCcucGFnZS1jdXJyZW50Jyk7XG4gICAgICAgICAgaWYgKCRjdXJyZW50UGFnZUVsWzBdICYmICRjdXJyZW50UGFnZUVsWzBdLmY3UGFnZSAmJiAkY3VycmVudFBhZ2VFbFswXS5mN1BhZ2UubmF2YmFyRWwgPT09ICRuYXZiYXJFbFswXSkge1xuICAgICAgICAgICAgJHBhZ2VFbCA9ICRjdXJyZW50UGFnZUVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCAkZm91bmRFbDtcbiAgICBpZiAocGFyYW1zLmZvdW5kRWwpIHtcbiAgICAgICRmb3VuZEVsID0gJChwYXJhbXMuZm91bmRFbCk7XG4gICAgfSBlbHNlIGlmICgkcGFnZUVsKSB7XG4gICAgICAkZm91bmRFbCA9ICRwYWdlRWwuZmluZChzYi5wYXJhbXMuZm91bmRFbCk7XG4gICAgfVxuXG4gICAgbGV0ICRub3RGb3VuZEVsO1xuICAgIGlmIChwYXJhbXMubm90Rm91bmRFbCkge1xuICAgICAgJG5vdEZvdW5kRWwgPSAkKHBhcmFtcy5ub3RGb3VuZEVsKTtcbiAgICB9IGVsc2UgaWYgKCRwYWdlRWwpIHtcbiAgICAgICRub3RGb3VuZEVsID0gJHBhZ2VFbC5maW5kKHNiLnBhcmFtcy5ub3RGb3VuZEVsKTtcbiAgICB9XG5cbiAgICBsZXQgJGJhY2tkcm9wRWw7XG4gICAgaWYgKHNiLnBhcmFtcy5iYWNrZHJvcCkge1xuICAgICAgaWYgKHNiLnBhcmFtcy5iYWNrZHJvcEVsKSB7XG4gICAgICAgICRiYWNrZHJvcEVsID0gJChzYi5wYXJhbXMuYmFja2Ryb3BFbCk7XG4gICAgICB9IGVsc2UgaWYgKCRwYWdlRWwgJiYgJHBhZ2VFbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICRiYWNrZHJvcEVsID0gJHBhZ2VFbC5maW5kKCcuc2VhcmNoYmFyLWJhY2tkcm9wJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkYmFja2Ryb3BFbCA9ICRlbC5zaWJsaW5ncygnLnNlYXJjaGJhci1iYWNrZHJvcCcpO1xuICAgICAgfVxuICAgICAgaWYgKCRiYWNrZHJvcEVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAkYmFja2Ryb3BFbCA9ICQoJzxkaXYgY2xhc3M9XCJzZWFyY2hiYXItYmFja2Ryb3BcIj48L2Rpdj4nKTtcbiAgICAgICAgaWYgKCRwYWdlRWwgJiYgJHBhZ2VFbC5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAoJGVsLnBhcmVudHMoJHBhZ2VFbCkubGVuZ3RoID4gMCAmJiAkbmF2YmFyRWwgJiYgJGVsLnBhcmVudHMoJG5hdmJhckVsKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICRiYWNrZHJvcEVsLmluc2VydEJlZm9yZSgkZWwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkYmFja2Ryb3BFbC5pbnNlcnRCZWZvcmUoJHBhZ2VFbC5maW5kKCcucGFnZS1jb250ZW50JykuZXEoMCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkYmFja2Ryb3BFbC5pbnNlcnRCZWZvcmUoJGVsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCAkc2VhcmNoQ29udGFpbmVyO1xuICAgIGlmIChzYi5wYXJhbXMuc2VhcmNoQ29udGFpbmVyKSB7XG4gICAgICAkc2VhcmNoQ29udGFpbmVyID0gJChzYi5wYXJhbXMuc2VhcmNoQ29udGFpbmVyKTtcbiAgICB9XG5cbiAgICBsZXQgJGlucHV0RWw7XG4gICAgaWYgKHNiLnBhcmFtcy5pbnB1dEVsKSB7XG4gICAgICAkaW5wdXRFbCA9ICQoc2IucGFyYW1zLmlucHV0RWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkaW5wdXRFbCA9ICRlbC5maW5kKCdpbnB1dFt0eXBlPVwic2VhcmNoXCJdJykuZXEoMCk7XG4gICAgfVxuXG4gICAgbGV0ICRkaXNhYmxlQnV0dG9uRWw7XG4gICAgaWYgKHNiLnBhcmFtcy5kaXNhYmxlQnV0dG9uKSB7XG4gICAgICBpZiAoc2IucGFyYW1zLmRpc2FibGVCdXR0b25FbCkge1xuICAgICAgICAkZGlzYWJsZUJ1dHRvbkVsID0gJChzYi5wYXJhbXMuZGlzYWJsZUJ1dHRvbkVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRkaXNhYmxlQnV0dG9uRWwgPSAkZWwuZmluZCgnLnNlYXJjaGJhci1kaXNhYmxlLWJ1dHRvbicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIFV0aWxzLmV4dGVuZChzYiwge1xuICAgICAgYXBwLFxuICAgICAgdmlldzogYXBwLnZpZXdzLmdldCgkZWwucGFyZW50cygnLnZpZXcnKSksXG4gICAgICAkZWwsXG4gICAgICBlbDogJGVsWzBdLFxuICAgICAgJGJhY2tkcm9wRWwsXG4gICAgICBiYWNrZHJvcEVsOiAkYmFja2Ryb3BFbCAmJiAkYmFja2Ryb3BFbFswXSxcbiAgICAgICRzZWFyY2hDb250YWluZXIsXG4gICAgICBzZWFyY2hDb250YWluZXI6ICRzZWFyY2hDb250YWluZXIgJiYgJHNlYXJjaENvbnRhaW5lclswXSxcbiAgICAgICRpbnB1dEVsLFxuICAgICAgaW5wdXRFbDogJGlucHV0RWxbMF0sXG4gICAgICAkZGlzYWJsZUJ1dHRvbkVsLFxuICAgICAgZGlzYWJsZUJ1dHRvbkVsOiAkZGlzYWJsZUJ1dHRvbkVsWzBdLFxuICAgICAgZGlzYWJsZUJ1dHRvbkhhc01hcmdpbjogZmFsc2UsXG4gICAgICAkcGFnZUVsLFxuICAgICAgcGFnZUVsOiAkcGFnZUVsICYmICRwYWdlRWxbMF0sXG4gICAgICAkbmF2YmFyRWwsXG4gICAgICBuYXZiYXJFbDogJG5hdmJhckVsICYmICRuYXZiYXJFbFswXSxcbiAgICAgICRmb3VuZEVsLFxuICAgICAgZm91bmRFbDogJGZvdW5kRWwgJiYgJGZvdW5kRWxbMF0sXG4gICAgICAkbm90Rm91bmRFbCxcbiAgICAgIG5vdEZvdW5kRWw6ICRub3RGb3VuZEVsICYmICRub3RGb3VuZEVsWzBdLFxuICAgICAgcHJldmlvdXNRdWVyeTogJycsXG4gICAgICBxdWVyeTogJycsXG4gICAgICBpc1ZpcnR1YWxMaXN0OiAkc2VhcmNoQ29udGFpbmVyICYmICRzZWFyY2hDb250YWluZXIuaGFzQ2xhc3MoJ3ZpcnR1YWwtbGlzdCcpLFxuICAgICAgdmlydHVhbExpc3Q6IHVuZGVmaW5lZCxcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgZXhwYW5kYWJsZTogc2IucGFyYW1zLmV4cGFuZGFibGUgfHwgJGVsLmhhc0NsYXNzKCdzZWFyY2hiYXItZXhwYW5kYWJsZScpLFxuICAgIH0pO1xuXG4gICAgLy8gRXZlbnRzXG4gICAgZnVuY3Rpb24gcHJldmVudFN1Ym1pdChlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uSW5wdXRGb2N1cyhlKSB7XG4gICAgICBzYi5lbmFibGUoZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uSW5wdXRDaGFuZ2UoKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHNiLiRpbnB1dEVsLnZhbCgpLnRyaW0oKTtcbiAgICAgIGlmIChcbiAgICAgICAgICAoXG4gICAgICAgICAgICAoc2IuJHNlYXJjaENvbnRhaW5lciAmJiBzYi4kc2VhcmNoQ29udGFpbmVyLmxlbmd0aCA+IDApICYmXG4gICAgICAgICAgICAoc2IucGFyYW1zLnNlYXJjaEluIHx8IHNiLmlzVmlydHVhbExpc3QpXG4gICAgICAgICAgKSB8fFxuICAgICAgICAgIHNiLnBhcmFtcy5jdXN0b21TZWFyY2hcbiAgICAgICAgKSB7XG4gICAgICAgIHNiLnNlYXJjaCh2YWx1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uSW5wdXRDbGVhcihlLCBwcmV2aW91c1ZhbHVlKSB7XG4gICAgICBzYi4kZWwudHJpZ2dlcignc2VhcmNoYmFyOmNsZWFyJywgcHJldmlvdXNWYWx1ZSk7XG4gICAgICBzYi5lbWl0KCdsb2NhbDo6Y2xlYXIgc2VhcmNoYmFyQ2xlYXInLCBwcmV2aW91c1ZhbHVlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZGlzYWJsZU9uQ2xpY2soZSkge1xuICAgICAgc2IuZGlzYWJsZShlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25QYWdlQmVmb3JlT3V0KCkge1xuICAgICAgaWYgKCFzYiB8fCAoc2IgJiYgIXNiLiRlbCkpIHJldHVybjtcbiAgICAgIGlmIChzYi5lbmFibGVkKSB7XG4gICAgICAgIHNiLiRlbC5yZW1vdmVDbGFzcygnc2VhcmNoYmFyLWVuYWJsZWQnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gb25QYWdlQmVmb3JlSW4oKSB7XG4gICAgICBpZiAoIXNiIHx8IChzYiAmJiAhc2IuJGVsKSkgcmV0dXJuO1xuICAgICAgaWYgKHNiLmVuYWJsZWQpIHtcbiAgICAgICAgc2IuJGVsLmFkZENsYXNzKCdzZWFyY2hiYXItZW5hYmxlZCcpO1xuICAgICAgfVxuICAgIH1cbiAgICBzYi5hdHRhY2hFdmVudHMgPSBmdW5jdGlvbiBhdHRhY2hFdmVudHMoKSB7XG4gICAgICAkZWwub24oJ3N1Ym1pdCcsIHByZXZlbnRTdWJtaXQpO1xuICAgICAgaWYgKHNiLnBhcmFtcy5kaXNhYmxlQnV0dG9uKSB7XG4gICAgICAgIHNiLiRkaXNhYmxlQnV0dG9uRWwub24oJ2NsaWNrJywgZGlzYWJsZU9uQ2xpY2spO1xuICAgICAgfVxuICAgICAgaWYgKHNiLnBhcmFtcy5kaXNhYmxlT25CYWNrZHJvcENsaWNrICYmIHNiLiRiYWNrZHJvcEVsKSB7XG4gICAgICAgIHNiLiRiYWNrZHJvcEVsLm9uKCdjbGljaycsIGRpc2FibGVPbkNsaWNrKTtcbiAgICAgIH1cbiAgICAgIGlmIChzYi5leHBhbmRhYmxlICYmIGFwcC50aGVtZSA9PT0gJ2lvcycgJiYgc2IudmlldyAmJiAkbmF2YmFyRWwgJiYgc2IuJHBhZ2VFbCkge1xuICAgICAgICBzYi4kcGFnZUVsLm9uKCdwYWdlOmJlZm9yZW91dCcsIG9uUGFnZUJlZm9yZU91dCk7XG4gICAgICAgIHNiLiRwYWdlRWwub24oJ3BhZ2U6YmVmb3JlaW4nLCBvblBhZ2VCZWZvcmVJbik7XG4gICAgICB9XG4gICAgICBzYi4kaW5wdXRFbC5vbignZm9jdXMnLCBvbklucHV0Rm9jdXMpO1xuICAgICAgc2IuJGlucHV0RWwub24oJ2NoYW5nZSBpbnB1dCBjb21wb3NpdGlvbmVuZCcsIG9uSW5wdXRDaGFuZ2UpO1xuICAgICAgc2IuJGlucHV0RWwub24oJ2lucHV0OmNsZWFyJywgb25JbnB1dENsZWFyKTtcbiAgICB9O1xuICAgIHNiLmRldGFjaEV2ZW50cyA9IGZ1bmN0aW9uIGRldGFjaEV2ZW50cygpIHtcbiAgICAgICRlbC5vZmYoJ3N1Ym1pdCcsIHByZXZlbnRTdWJtaXQpO1xuICAgICAgaWYgKHNiLnBhcmFtcy5kaXNhYmxlQnV0dG9uKSB7XG4gICAgICAgIHNiLiRkaXNhYmxlQnV0dG9uRWwub2ZmKCdjbGljaycsIGRpc2FibGVPbkNsaWNrKTtcbiAgICAgIH1cbiAgICAgIGlmIChzYi5wYXJhbXMuZGlzYWJsZU9uQmFja2Ryb3BDbGljayAmJiBzYi4kYmFja2Ryb3BFbCkge1xuICAgICAgICBzYi4kYmFja2Ryb3BFbC5vZmYoJ2NsaWNrJywgZGlzYWJsZU9uQ2xpY2spO1xuICAgICAgfVxuICAgICAgaWYgKHNiLmV4cGFuZGFibGUgJiYgYXBwLnRoZW1lID09PSAnaW9zJyAmJiBzYi52aWV3ICYmICRuYXZiYXJFbCAmJiBzYi4kcGFnZUVsKSB7XG4gICAgICAgIHNiLiRwYWdlRWwub24oJ3BhZ2U6YmVmb3Jlb3V0Jywgb25QYWdlQmVmb3JlT3V0KTtcbiAgICAgICAgc2IuJHBhZ2VFbC5vbigncGFnZTpiZWZvcmVpbicsIG9uUGFnZUJlZm9yZUluKTtcbiAgICAgIH1cbiAgICAgIHNiLiRpbnB1dEVsLm9mZignZm9jdXMnLCBvbklucHV0Rm9jdXMpO1xuICAgICAgc2IuJGlucHV0RWwub2ZmKCdjaGFuZ2UgaW5wdXQgY29tcG9zaXRpb25lbmQnLCBvbklucHV0Q2hhbmdlKTtcbiAgICAgIHNiLiRpbnB1dEVsLm9mZignaW5wdXQ6Y2xlYXInLCBvbklucHV0Q2xlYXIpO1xuICAgIH07XG5cbiAgICAvLyBJbnN0YWxsIE1vZHVsZXNcbiAgICBzYi51c2VJbnN0YW5jZU1vZHVsZXMoKTtcblxuICAgIC8vIEluaXRcbiAgICBzYi5pbml0KCk7XG5cbiAgICByZXR1cm4gc2I7XG4gIH1cbiAgY2xlYXIoZSkge1xuICAgIGNvbnN0IHNiID0gdGhpcztcbiAgICBpZiAoIXNiLnF1ZXJ5ICYmIGUgJiYgJChlLnRhcmdldCkuaGFzQ2xhc3MoJ3NlYXJjaGJhci1jbGVhcicpKSB7XG4gICAgICBzYi5kaXNhYmxlKCk7XG4gICAgICByZXR1cm4gc2I7XG4gICAgfVxuICAgIGNvbnN0IHByZXZpb3VzUXVlcnkgPSBzYi52YWx1ZTtcbiAgICBzYi4kaW5wdXRFbC52YWwoJycpLnRyaWdnZXIoJ2NoYW5nZScpLmZvY3VzKCk7XG4gICAgc2IuJGVsLnRyaWdnZXIoJ3NlYXJjaGJhcjpjbGVhcicsIHByZXZpb3VzUXVlcnkpO1xuICAgIHNiLmVtaXQoJ2xvY2FsOjpjbGVhciBzZWFyY2hiYXJDbGVhcicsIHByZXZpb3VzUXVlcnkpO1xuICAgIHJldHVybiBzYjtcbiAgfVxuICBzZXREaXNhYmxlQnV0dG9uTWFyZ2luKCkge1xuICAgIGNvbnN0IHNiID0gdGhpcztcbiAgICBpZiAoc2IuZXhwYW5kYWJsZSkgcmV0dXJuO1xuICAgIGNvbnN0IGFwcCA9IHNiLmFwcDtcbiAgICBzYi4kZGlzYWJsZUJ1dHRvbkVsLnRyYW5zaXRpb24oMCkuc2hvdygpO1xuICAgIHNiLiRkaXNhYmxlQnV0dG9uRWwuY3NzKGBtYXJnaW4tJHthcHAucnRsID8gJ2xlZnQnIDogJ3JpZ2h0J31gLCBgJHstc2IuZGlzYWJsZUJ1dHRvbkVsLm9mZnNldFdpZHRofXB4YCk7XG4gICAgY29uc3QgY2xpZW50TGVmdCA9IHNiLiRkaXNhYmxlQnV0dG9uRWxbMF0uY2xpZW50TGVmdDtcbiAgICBzYi4kZGlzYWJsZUJ1dHRvbkVsLnRyYW5zaXRpb24oJycpO1xuICAgIHNiLmRpc2FibGVCdXR0b25IYXNNYXJnaW4gPSB0cnVlO1xuICB9XG4gIGVuYWJsZShzZXRGb2N1cykge1xuICAgIGNvbnN0IHNiID0gdGhpcztcbiAgICBpZiAoc2IuZW5hYmxlZCkgcmV0dXJuIHNiO1xuICAgIGNvbnN0IGFwcCA9IHNiLmFwcDtcbiAgICBzYi5lbmFibGVkID0gdHJ1ZTtcbiAgICBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgICBpZiAoc2IuJGJhY2tkcm9wRWwgJiYgKChzYi4kc2VhcmNoQ29udGFpbmVyICYmIHNiLiRzZWFyY2hDb250YWluZXIubGVuZ3RoKSB8fCBzYi5wYXJhbXMuY3VzdG9tU2VhcmNoKSAmJiAhc2IuJGVsLmhhc0NsYXNzKCdzZWFyY2hiYXItZW5hYmxlZCcpICYmICFzYi5xdWVyeSkge1xuICAgICAgICBzYi5iYWNrZHJvcFNob3coKTtcbiAgICAgIH1cbiAgICAgIHNiLiRlbC5hZGRDbGFzcygnc2VhcmNoYmFyLWVuYWJsZWQnKTtcbiAgICAgIGlmICghc2IuZXhwYW5kYWJsZSAmJiBzYi4kZGlzYWJsZUJ1dHRvbkVsICYmIHNiLiRkaXNhYmxlQnV0dG9uRWwubGVuZ3RoID4gMCAmJiBhcHAudGhlbWUgPT09ICdpb3MnKSB7XG4gICAgICAgIGlmICghc2IuZGlzYWJsZUJ1dHRvbkhhc01hcmdpbikge1xuICAgICAgICAgIHNiLnNldERpc2FibGVCdXR0b25NYXJnaW4oKTtcbiAgICAgICAgfVxuICAgICAgICBzYi4kZGlzYWJsZUJ1dHRvbkVsLmNzcyhgbWFyZ2luLSR7YXBwLnJ0bCA/ICdsZWZ0JyA6ICdyaWdodCd9YCwgJzBweCcpO1xuICAgICAgfVxuICAgICAgc2IuJGVsLnRyaWdnZXIoJ3NlYXJjaGJhcjplbmFibGUnKTtcbiAgICAgIHNiLmVtaXQoJ2xvY2FsOjplbmFibGUgc2VhcmNoYmFyRW5hYmxlJyk7XG4gICAgfVxuICAgIGxldCBuZWVkc0ZvY3VzID0gZmFsc2U7XG4gICAgaWYgKHNldEZvY3VzID09PSB0cnVlKSB7XG4gICAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gc2IuaW5wdXRFbCkge1xuICAgICAgICBuZWVkc0ZvY3VzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgaXNJb3MgPSBhcHAuZGV2aWNlLmlvcyAmJiBhcHAudGhlbWUgPT09ICdpb3MnO1xuICAgIGlmIChpc0lvcykge1xuICAgICAgaWYgKHNiLmV4cGFuZGFibGUpIHtcbiAgICAgICAgaWYgKG5lZWRzRm9jdXMpIHNiLiRpbnB1dEVsLmZvY3VzKCk7XG4gICAgICAgIGVuYWJsZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG5lZWRzRm9jdXMpIHNiLiRpbnB1dEVsLmZvY3VzKCk7XG4gICAgICAgIGlmIChzZXRGb2N1cyAmJiAoc2V0Rm9jdXMudHlwZSA9PT0gJ2ZvY3VzJyB8fCBzZXRGb2N1cyA9PT0gdHJ1ZSkpIHtcbiAgICAgICAgICBVdGlscy5uZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICBlbmFibGUoKTtcbiAgICAgICAgICB9LCA0MDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVuYWJsZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChuZWVkc0ZvY3VzKSBzYi4kaW5wdXRFbC5mb2N1cygpO1xuICAgICAgZW5hYmxlKCk7XG4gICAgfVxuICAgIHJldHVybiBzYjtcbiAgfVxuICBkaXNhYmxlKCkge1xuICAgIGNvbnN0IHNiID0gdGhpcztcbiAgICBpZiAoIXNiLmVuYWJsZWQpIHJldHVybiBzYjtcbiAgICBjb25zdCBhcHAgPSBzYi5hcHA7XG4gICAgc2IuJGlucHV0RWwudmFsKCcnKS50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICBzYi4kZWwucmVtb3ZlQ2xhc3MoJ3NlYXJjaGJhci1lbmFibGVkJyk7XG4gICAgaWYgKCFzYi5leHBhbmRhYmxlICYmIHNiLiRkaXNhYmxlQnV0dG9uRWwgJiYgc2IuJGRpc2FibGVCdXR0b25FbC5sZW5ndGggPiAwICYmIGFwcC50aGVtZSA9PT0gJ2lvcycpIHtcbiAgICAgIHNiLiRkaXNhYmxlQnV0dG9uRWwuY3NzKGBtYXJnaW4tJHthcHAucnRsID8gJ2xlZnQnIDogJ3JpZ2h0J31gLCBgJHstc2IuZGlzYWJsZUJ1dHRvbkVsLm9mZnNldFdpZHRofXB4YCk7XG4gICAgfVxuXG4gICAgaWYgKHNiLiRiYWNrZHJvcEVsICYmICgoc2IuJHNlYXJjaENvbnRhaW5lciAmJiBzYi4kc2VhcmNoQ29udGFpbmVyLmxlbmd0aCkgfHwgc2IucGFyYW1zLmN1c3RvbVNlYXJjaCkpIHtcbiAgICAgIHNiLmJhY2tkcm9wSGlkZSgpO1xuICAgIH1cblxuICAgIHNiLmVuYWJsZWQgPSBmYWxzZTtcblxuICAgIHNiLiRpbnB1dEVsLmJsdXIoKTtcblxuICAgIHNiLiRlbC50cmlnZ2VyKCdzZWFyY2hiYXI6ZGlzYWJsZScpO1xuICAgIHNiLmVtaXQoJ2xvY2FsOjpkaXNhYmxlIHNlYXJjaGJhckRpc2FibGUnKTtcbiAgICByZXR1cm4gc2I7XG4gIH1cbiAgdG9nZ2xlKCkge1xuICAgIGNvbnN0IHNiID0gdGhpcztcbiAgICBpZiAoc2IuZW5hYmxlZCkgc2IuZGlzYWJsZSgpO1xuICAgIGVsc2Ugc2IuZW5hYmxlKHRydWUpO1xuICAgIHJldHVybiBzYjtcbiAgfVxuICBiYWNrZHJvcFNob3coKSB7XG4gICAgY29uc3Qgc2IgPSB0aGlzO1xuICAgIGlmIChzYi4kYmFja2Ryb3BFbCkge1xuICAgICAgc2IuJGJhY2tkcm9wRWwuYWRkQ2xhc3MoJ3NlYXJjaGJhci1iYWNrZHJvcC1pbicpO1xuICAgIH1cbiAgICByZXR1cm4gc2I7XG4gIH1cbiAgYmFja2Ryb3BIaWRlKCkge1xuICAgIGNvbnN0IHNiID0gdGhpcztcbiAgICBpZiAoc2IuJGJhY2tkcm9wRWwpIHtcbiAgICAgIHNiLiRiYWNrZHJvcEVsLnJlbW92ZUNsYXNzKCdzZWFyY2hiYXItYmFja2Ryb3AtaW4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHNiO1xuICB9XG4gIHNlYXJjaChxdWVyeSwgaW50ZXJuYWwpIHtcbiAgICBjb25zdCBzYiA9IHRoaXM7XG4gICAgaWYgKHNiLnByZXZpb3VzUXVlcnkgJiYgcXVlcnkudHJpbSgpID09PSBzYi5wcmV2aW91c1F1ZXJ5KSByZXR1cm4gc2I7XG4gICAgaWYgKHR5cGVvZiAoc2IucHJldmlvdXNRdWVyeSkgIT09ICd1bmRlZmluZWQnICYmIHNiLnByZXZpb3VzUXVlcnkudHJpbSgpID09PSAnJyAmJiBxdWVyeS50cmltKCkgPT09ICcnKSByZXR1cm4gc2I7XG4gICAgc2IucHJldmlvdXNRdWVyeSA9IHF1ZXJ5LnRyaW0oKTtcblxuICAgIGlmICghaW50ZXJuYWwpIHtcbiAgICAgIGlmICghc2IuZW5hYmxlZCkge1xuICAgICAgICBzYi5lbmFibGUoKTtcbiAgICAgIH1cbiAgICAgIHNiLiRpbnB1dEVsLnZhbChxdWVyeSk7XG4gICAgfVxuICAgIHNiLnF1ZXJ5ID0gcXVlcnk7XG4gICAgc2IudmFsdWUgPSBxdWVyeTtcblxuICAgIGNvbnN0IHsgJHNlYXJjaENvbnRhaW5lciwgJGVsLCAkYmFja2Ryb3BFbCwgJGZvdW5kRWwsICRub3RGb3VuZEVsLCBpc1ZpcnR1YWxMaXN0IH0gPSBzYjtcblxuICAgIC8vIEFkZCBhY3RpdmUvaW5hY3RpdmUgY2xhc3NlcyBvbiBvdmVybGF5XG4gICAgaWYgKHF1ZXJ5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgaWYgKCRzZWFyY2hDb250YWluZXIgJiYgJHNlYXJjaENvbnRhaW5lci5sZW5ndGggJiYgJGVsLmhhc0NsYXNzKCdzZWFyY2hiYXItZW5hYmxlZCcpICYmICRiYWNrZHJvcEVsKSBzYi5iYWNrZHJvcFNob3coKTtcbiAgICB9IGVsc2UgaWYgKCRzZWFyY2hDb250YWluZXIgJiYgJHNlYXJjaENvbnRhaW5lci5sZW5ndGggJiYgJGVsLmhhc0NsYXNzKCdzZWFyY2hiYXItZW5hYmxlZCcpKSB7XG4gICAgICBzYi5iYWNrZHJvcEhpZGUoKTtcbiAgICB9XG5cbiAgICBpZiAoc2IucGFyYW1zLmN1c3RvbVNlYXJjaCkge1xuICAgICAgJGVsLnRyaWdnZXIoJ3NlYXJjaGJhcjpzZWFyY2gnLCBxdWVyeSwgc2IucHJldmlvdXNRdWVyeSk7XG4gICAgICBzYi5lbWl0KCdsb2NhbDo6c2VhcmNoIHNlYXJjaGJhclNlYXJjaCcsIHF1ZXJ5LCBzYi5wcmV2aW91c1F1ZXJ5KTtcbiAgICAgIHJldHVybiBzYjtcbiAgICB9XG5cbiAgICBsZXQgZm91bmRJdGVtcyA9IFtdO1xuICAgIGxldCB2bFF1ZXJ5O1xuICAgIGlmIChpc1ZpcnR1YWxMaXN0KSB7XG4gICAgICBzYi52aXJ0dWFsTGlzdCA9ICRzZWFyY2hDb250YWluZXJbMF0uZjdWaXJ0dWFsTGlzdDtcbiAgICAgIGlmIChxdWVyeS50cmltKCkgPT09ICcnKSB7XG4gICAgICAgIHNiLnZpcnR1YWxMaXN0LnJlc2V0RmlsdGVyKCk7XG4gICAgICAgIGlmICgkbm90Rm91bmRFbCkgJG5vdEZvdW5kRWwuaGlkZSgpO1xuICAgICAgICBpZiAoJGZvdW5kRWwpICRmb3VuZEVsLnNob3coKTtcbiAgICAgICAgcmV0dXJuIHNiO1xuICAgICAgfVxuICAgICAgdmxRdWVyeSA9IHNiLnBhcmFtcy5yZW1vdmVEaWFjcml0aWNzID8gVXRpbHMucmVtb3ZlRGlhY3JpdGljcyhxdWVyeSkgOiBxdWVyeTtcbiAgICAgIGlmIChzYi52aXJ0dWFsTGlzdC5wYXJhbXMuc2VhcmNoQWxsKSB7XG4gICAgICAgIGZvdW5kSXRlbXMgPSBzYi52aXJ0dWFsTGlzdC5wYXJhbXMuc2VhcmNoQWxsKHZsUXVlcnksIHNiLnZpcnR1YWxMaXN0Lml0ZW1zKSB8fCBbXTtcbiAgICAgIH0gZWxzZSBpZiAoc2IudmlydHVhbExpc3QucGFyYW1zLnNlYXJjaEJ5SXRlbSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNiLnZpcnR1YWxMaXN0Lml0ZW1zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKHNiLnZpcnR1YWxMaXN0LnBhcmFtcy5zZWFyY2hCeUl0ZW0odmxRdWVyeSwgc2IudmlydHVhbExpc3QucGFyYW1zLml0ZW1zW2ldLCBpKSkge1xuICAgICAgICAgICAgZm91bmRJdGVtcy5wdXNoKGkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgdmFsdWVzO1xuICAgICAgaWYgKHNiLnBhcmFtcy5yZW1vdmVEaWFjcml0aWNzKSB2YWx1ZXMgPSBVdGlscy5yZW1vdmVEaWFjcml0aWNzKHF1ZXJ5LnRyaW0oKS50b0xvd2VyQ2FzZSgpKS5zcGxpdCgnICcpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIHZhbHVlcyA9IHF1ZXJ5LnRyaW0oKS50b0xvd2VyQ2FzZSgpLnNwbGl0KCcgJyk7XG4gICAgICB9XG4gICAgICAkc2VhcmNoQ29udGFpbmVyLmZpbmQoc2IucGFyYW1zLnNlYXJjaEl0ZW0pLnJlbW92ZUNsYXNzKCdoaWRkZW4tYnktc2VhcmNoYmFyJykuZWFjaCgoaXRlbUluZGV4LCBpdGVtRWwpID0+IHtcbiAgICAgICAgY29uc3QgJGl0ZW1FbCA9ICQoaXRlbUVsKTtcbiAgICAgICAgbGV0IGNvbXBhcmVXaXRoVGV4dCA9IFtdO1xuICAgICAgICAkaXRlbUVsLmZpbmQoc2IucGFyYW1zLnNlYXJjaEluKS5lYWNoKChzZWFyY2hJbkluZGV4LCBzZWFyY2hJbkVsKSA9PiB7XG4gICAgICAgICAgbGV0IGl0ZW1UZXh0ID0gJChzZWFyY2hJbkVsKS50ZXh0KCkudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgaWYgKHNiLnBhcmFtcy5yZW1vdmVEaWFjcml0aWNzKSBpdGVtVGV4dCA9IFV0aWxzLnJlbW92ZURpYWNyaXRpY3MoaXRlbVRleHQpO1xuICAgICAgICAgIGNvbXBhcmVXaXRoVGV4dC5wdXNoKGl0ZW1UZXh0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbXBhcmVXaXRoVGV4dCA9IGNvbXBhcmVXaXRoVGV4dC5qb2luKCcgJyk7XG4gICAgICAgIGxldCB3b3Jkc01hdGNoID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBpZiAoY29tcGFyZVdpdGhUZXh0LmluZGV4T2YodmFsdWVzW2ldKSA+PSAwKSB3b3Jkc01hdGNoICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdvcmRzTWF0Y2ggIT09IHZhbHVlcy5sZW5ndGggJiYgIShzYi5wYXJhbXMuaWdub3JlICYmICRpdGVtRWwuaXMoc2IucGFyYW1zLmlnbm9yZSkpKSB7XG4gICAgICAgICAgJGl0ZW1FbC5hZGRDbGFzcygnaGlkZGVuLWJ5LXNlYXJjaGJhcicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZvdW5kSXRlbXMucHVzaCgkaXRlbUVsWzBdKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChzYi5wYXJhbXMuaGlkZURpdmlkZXJzKSB7XG4gICAgICAgICRzZWFyY2hDb250YWluZXIuZmluZCgnLml0ZW0tZGl2aWRlciwgLmxpc3QtZ3JvdXAtdGl0bGUnKS5lYWNoKCh0aXRsZUluZGV4LCB0aXRsZUVsKSA9PiB7XG4gICAgICAgICAgY29uc3QgJHRpdGxlRWwgPSAkKHRpdGxlRWwpO1xuICAgICAgICAgIGNvbnN0ICRuZXh0RWxlbWVudHMgPSAkdGl0bGVFbC5uZXh0QWxsKCdsaScpO1xuICAgICAgICAgIGxldCBoaWRlID0gdHJ1ZTtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8ICRuZXh0RWxlbWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0ICRuZXh0RWwgPSAkbmV4dEVsZW1lbnRzLmVxKGkpO1xuICAgICAgICAgICAgaWYgKCRuZXh0RWwuaGFzQ2xhc3MoJ2xpc3QtZ3JvdXAtdGl0bGUnKSB8fCAkbmV4dEVsLmhhc0NsYXNzKCdpdGVtLWRpdmlkZXInKSkgYnJlYWs7XG4gICAgICAgICAgICBpZiAoISRuZXh0RWwuaGFzQ2xhc3MoJ2hpZGRlbi1ieS1zZWFyY2hiYXInKSkge1xuICAgICAgICAgICAgICBoaWRlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGlnbm9yZSA9IHNiLnBhcmFtcy5pZ25vcmUgJiYgJHRpdGxlRWwuaXMoc2IucGFyYW1zLmlnbm9yZSk7XG4gICAgICAgICAgaWYgKGhpZGUgJiYgIWlnbm9yZSkgJHRpdGxlRWwuYWRkQ2xhc3MoJ2hpZGRlbi1ieS1zZWFyY2hiYXInKTtcbiAgICAgICAgICBlbHNlICR0aXRsZUVsLnJlbW92ZUNsYXNzKCdoaWRkZW4tYnktc2VhcmNoYmFyJyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHNiLnBhcmFtcy5oaWRlR3JvdXBzKSB7XG4gICAgICAgICRzZWFyY2hDb250YWluZXIuZmluZCgnLmxpc3QtZ3JvdXAnKS5lYWNoKChncm91cEluZGV4LCBncm91cEVsKSA9PiB7XG4gICAgICAgICAgY29uc3QgJGdyb3VwRWwgPSAkKGdyb3VwRWwpO1xuICAgICAgICAgIGNvbnN0IGlnbm9yZSA9IHNiLnBhcmFtcy5pZ25vcmUgJiYgJGdyb3VwRWwuaXMoc2IucGFyYW1zLmlnbm9yZSk7XG4gICAgICAgICAgY29uc3Qgbm90SGlkZGVuID0gJGdyb3VwRWwuZmluZCgnbGk6bm90KC5oaWRkZW4tYnktc2VhcmNoYmFyKScpO1xuICAgICAgICAgIGlmIChub3RIaWRkZW4ubGVuZ3RoID09PSAwICYmICFpZ25vcmUpIHtcbiAgICAgICAgICAgICRncm91cEVsLmFkZENsYXNzKCdoaWRkZW4tYnktc2VhcmNoYmFyJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRncm91cEVsLnJlbW92ZUNsYXNzKCdoaWRkZW4tYnktc2VhcmNoYmFyJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgJGVsLnRyaWdnZXIoJ3NlYXJjaGJhcjpzZWFyY2gnLCBxdWVyeSwgc2IucHJldmlvdXNRdWVyeSwgZm91bmRJdGVtcyk7XG4gICAgc2IuZW1pdCgnbG9jYWw6OnNlYXJjaCBzZWFyY2hiYXJTZWFyY2gnLCBxdWVyeSwgc2IucHJldmlvdXNRdWVyeSwgZm91bmRJdGVtcyk7XG4gICAgaWYgKGZvdW5kSXRlbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBpZiAoJG5vdEZvdW5kRWwpICRub3RGb3VuZEVsLnNob3coKTtcbiAgICAgIGlmICgkZm91bmRFbCkgJGZvdW5kRWwuaGlkZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoJG5vdEZvdW5kRWwpICRub3RGb3VuZEVsLmhpZGUoKTtcbiAgICAgIGlmICgkZm91bmRFbCkgJGZvdW5kRWwuc2hvdygpO1xuICAgIH1cbiAgICBpZiAoaXNWaXJ0dWFsTGlzdCAmJiBzYi52aXJ0dWFsTGlzdCkge1xuICAgICAgc2IudmlydHVhbExpc3QuZmlsdGVySXRlbXMoZm91bmRJdGVtcyk7XG4gICAgfVxuICAgIHJldHVybiBzYjtcbiAgfVxuICBpbml0KCkge1xuICAgIGNvbnN0IHNiID0gdGhpcztcbiAgICBzYi5hdHRhY2hFdmVudHMoKTtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIGNvbnN0IHNiID0gdGhpcztcbiAgICBzYi5lbWl0KCdsb2NhbDo6YmVmb3JlRGVzdHJveSBzZWFyY2hiYXJCZWZvcmVEZXN0cm95Jywgc2IpO1xuICAgIHNiLiRlbC50cmlnZ2VyKCdzZWFyY2hiYXI6YmVmb3JlZGVzdHJveScsIHNiKTtcbiAgICBzYi5kZXRhY2hFdmVudHMoKTtcbiAgICBkZWxldGUgc2IuJGVsLmY3U2VhcmNoYmFyO1xuICAgIFV0aWxzLmRlbGV0ZVByb3BzKHNiKTtcbiAgfVxufVxuXG52YXIgc2VhcmNoYmFyID0ge1xuICBuYW1lOiAnc2VhcmNoYmFyJyxcbiAgc3RhdGljOiB7XG4gICAgU2VhcmNoYmFyLFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBhcHAuc2VhcmNoYmFyID0gQ29uc3RydWN0b3JNZXRob2RzKHtcbiAgICAgIGRlZmF1bHRTZWxlY3RvcjogJy5zZWFyY2hiYXInLFxuICAgICAgY29uc3RydWN0b3I6IFNlYXJjaGJhcixcbiAgICAgIGFwcCxcbiAgICAgIGRvbVByb3A6ICdmN1NlYXJjaGJhcicsXG4gICAgICBhZGRNZXRob2RzOiAnY2xlYXIgZW5hYmxlIGRpc2FibGUgdG9nZ2xlIHNlYXJjaCcuc3BsaXQoJyAnKSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICB0YWJNb3VudGVkKHRhYkVsKSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgJCh0YWJFbCkuZmluZCgnLnNlYXJjaGJhci1pbml0JykuZWFjaCgoaW5kZXgsIHNlYXJjaGJhckVsKSA9PiB7XG4gICAgICAgIGNvbnN0ICRzZWFyY2hiYXJFbCA9ICQoc2VhcmNoYmFyRWwpO1xuICAgICAgICBhcHAuc2VhcmNoYmFyLmNyZWF0ZShVdGlscy5leHRlbmQoJHNlYXJjaGJhckVsLmRhdGFzZXQoKSwgeyBlbDogc2VhcmNoYmFyRWwgfSkpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICB0YWJCZWZvcmVSZW1vdmUodGFiRWwpIHtcbiAgICAgICQodGFiRWwpLmZpbmQoJy5zZWFyY2hiYXItaW5pdCcpLmVhY2goKGluZGV4LCBzZWFyY2hiYXJFbCkgPT4ge1xuICAgICAgICBpZiAoc2VhcmNoYmFyRWwuZjdTZWFyY2hiYXIgJiYgc2VhcmNoYmFyRWwuZjdTZWFyY2hiYXIuZGVzdHJveSkge1xuICAgICAgICAgIHNlYXJjaGJhckVsLmY3U2VhcmNoYmFyLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBwYWdlSW5pdChwYWdlKSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgcGFnZS4kZWwuZmluZCgnLnNlYXJjaGJhci1pbml0JykuZWFjaCgoaW5kZXgsIHNlYXJjaGJhckVsKSA9PiB7XG4gICAgICAgIGNvbnN0ICRzZWFyY2hiYXJFbCA9ICQoc2VhcmNoYmFyRWwpO1xuICAgICAgICBhcHAuc2VhcmNoYmFyLmNyZWF0ZShVdGlscy5leHRlbmQoJHNlYXJjaGJhckVsLmRhdGFzZXQoKSwgeyBlbDogc2VhcmNoYmFyRWwgfSkpO1xuICAgICAgfSk7XG4gICAgICBpZiAoYXBwLnRoZW1lID09PSAnaW9zJyAmJiBwYWdlLnZpZXcgJiYgcGFnZS52aWV3LnJvdXRlci5zZXBhcmF0ZU5hdmJhciAmJiBwYWdlLiRuYXZiYXJFbCAmJiBwYWdlLiRuYXZiYXJFbC5sZW5ndGggPiAwKSB7XG4gICAgICAgIHBhZ2UuJG5hdmJhckVsLmZpbmQoJy5zZWFyY2hiYXItaW5pdCcpLmVhY2goKGluZGV4LCBzZWFyY2hiYXJFbCkgPT4ge1xuICAgICAgICAgIGNvbnN0ICRzZWFyY2hiYXJFbCA9ICQoc2VhcmNoYmFyRWwpO1xuICAgICAgICAgIGFwcC5zZWFyY2hiYXIuY3JlYXRlKFV0aWxzLmV4dGVuZCgkc2VhcmNoYmFyRWwuZGF0YXNldCgpLCB7IGVsOiBzZWFyY2hiYXJFbCB9KSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgcGFnZUJlZm9yZVJlbW92ZShwYWdlKSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgcGFnZS4kZWwuZmluZCgnLnNlYXJjaGJhci1pbml0JykuZWFjaCgoaW5kZXgsIHNlYXJjaGJhckVsKSA9PiB7XG4gICAgICAgIGlmIChzZWFyY2hiYXJFbC5mN1NlYXJjaGJhciAmJiBzZWFyY2hiYXJFbC5mN1NlYXJjaGJhci5kZXN0cm95KSB7XG4gICAgICAgICAgc2VhcmNoYmFyRWwuZjdTZWFyY2hiYXIuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChhcHAudGhlbWUgPT09ICdpb3MnICYmIHBhZ2UudmlldyAmJiBwYWdlLnZpZXcucm91dGVyLnNlcGFyYXRlTmF2YmFyICYmIHBhZ2UuJG5hdmJhckVsICYmIHBhZ2UuJG5hdmJhckVsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcGFnZS4kbmF2YmFyRWwuZmluZCgnLnNlYXJjaGJhci1pbml0JykuZWFjaCgoaW5kZXgsIHNlYXJjaGJhckVsKSA9PiB7XG4gICAgICAgICAgaWYgKHNlYXJjaGJhckVsLmY3U2VhcmNoYmFyICYmIHNlYXJjaGJhckVsLmY3U2VhcmNoYmFyLmRlc3Ryb3kpIHtcbiAgICAgICAgICAgIHNlYXJjaGJhckVsLmY3U2VhcmNoYmFyLmRlc3Ryb3koKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG4gIGNsaWNrczoge1xuICAgICcuc2VhcmNoYmFyLWNsZWFyJzogZnVuY3Rpb24gY2xlYXIoJGNsaWNrZWRFbCwgZGF0YSA9IHt9KSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgY29uc3Qgc2IgPSBhcHAuc2VhcmNoYmFyLmdldChkYXRhLnNlYXJjaGJhcik7XG4gICAgICBpZiAoc2IpIHNiLmNsZWFyKCk7XG4gICAgfSxcbiAgICAnLnNlYXJjaGJhci1lbmFibGUnOiBmdW5jdGlvbiBlbmFibGUoJGNsaWNrZWRFbCwgZGF0YSA9IHt9KSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgY29uc3Qgc2IgPSBhcHAuc2VhcmNoYmFyLmdldChkYXRhLnNlYXJjaGJhcik7XG4gICAgICBpZiAoc2IpIHNiLmVuYWJsZSh0cnVlKTtcbiAgICB9LFxuICAgICcuc2VhcmNoYmFyLWRpc2FibGUnOiBmdW5jdGlvbiBkaXNhYmxlKCRjbGlja2VkRWwsIGRhdGEgPSB7fSkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIGNvbnN0IHNiID0gYXBwLnNlYXJjaGJhci5nZXQoZGF0YS5zZWFyY2hiYXIpO1xuICAgICAgaWYgKHNiKSBzYi5kaXNhYmxlKCk7XG4gICAgfSxcbiAgICAnLnNlYXJjaGJhci10b2dnbGUnOiBmdW5jdGlvbiB0b2dnbGUoJGNsaWNrZWRFbCwgZGF0YSA9IHt9KSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgY29uc3Qgc2IgPSBhcHAuc2VhcmNoYmFyLmdldChkYXRhLnNlYXJjaGJhcik7XG4gICAgICBpZiAoc2IpIHNiLnRvZ2dsZSgpO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jbGFzcyBNZXNzYWdlcyBleHRlbmRzIEZyYW1ld29yazdDbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGFwcCwgcGFyYW1zID0ge30pIHtcbiAgICBzdXBlcihwYXJhbXMsIFthcHBdKTtcblxuICAgIGNvbnN0IG0gPSB0aGlzO1xuXG4gICAgY29uc3QgZGVmYXVsdHMgPSB7XG4gICAgICBhdXRvTGF5b3V0OiB0cnVlLFxuICAgICAgbWVzc2FnZXM6IFtdLFxuICAgICAgbmV3TWVzc2FnZXNGaXJzdDogZmFsc2UsXG4gICAgICBzY3JvbGxNZXNzYWdlczogdHJ1ZSxcbiAgICAgIHNjcm9sbE1lc3NhZ2VzT25FZGdlOiB0cnVlLFxuICAgICAgZmlyc3RNZXNzYWdlUnVsZTogdW5kZWZpbmVkLFxuICAgICAgbGFzdE1lc3NhZ2VSdWxlOiB1bmRlZmluZWQsXG4gICAgICB0YWlsTWVzc2FnZVJ1bGU6IHVuZGVmaW5lZCxcbiAgICAgIHNhbWVOYW1lTWVzc2FnZVJ1bGU6IHVuZGVmaW5lZCxcbiAgICAgIHNhbWVIZWFkZXJNZXNzYWdlUnVsZTogdW5kZWZpbmVkLFxuICAgICAgc2FtZUZvb3Rlck1lc3NhZ2VSdWxlOiB1bmRlZmluZWQsXG4gICAgICBzYW1lQXZhdGFyTWVzc2FnZVJ1bGU6IHVuZGVmaW5lZCxcbiAgICAgIGN1c3RvbUNsYXNzTWVzc2FnZVJ1bGU6IHVuZGVmaW5lZCxcbiAgICAgIHJlbmRlck1lc3NhZ2U6IHVuZGVmaW5lZCxcbiAgICB9O1xuXG4gICAgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggbW9kdWxlcyBwYXJhbXNcbiAgICBtLnVzZUluc3RhbmNlTW9kdWxlc1BhcmFtcyhkZWZhdWx0cyk7XG5cbiAgICBtLnBhcmFtcyA9IFV0aWxzLmV4dGVuZChkZWZhdWx0cywgcGFyYW1zKTtcblxuICAgIGNvbnN0ICRlbCA9ICQocGFyYW1zLmVsKS5lcSgwKTtcbiAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG07XG5cbiAgICAkZWxbMF0uZjdNZXNzYWdlcyA9IG07XG5cbiAgICBjb25zdCAkcGFnZUNvbnRlbnRFbCA9ICRlbC5jbG9zZXN0KCcucGFnZS1jb250ZW50JykuZXEoMCk7XG5cbiAgICBVdGlscy5leHRlbmQobSwge1xuICAgICAgbWVzc2FnZXM6IG0ucGFyYW1zLm1lc3NhZ2VzLFxuICAgICAgJGVsLFxuICAgICAgZWw6ICRlbFswXSxcbiAgICAgICRwYWdlQ29udGVudEVsLFxuICAgICAgcGFnZUNvbnRlbnRFbDogJHBhZ2VDb250ZW50RWxbMF0sXG5cbiAgICB9KTtcbiAgICAvLyBJbnN0YWxsIE1vZHVsZXNcbiAgICBtLnVzZUluc3RhbmNlTW9kdWxlcygpO1xuXG4gICAgLy8gSW5pdFxuICAgIG0uaW5pdCgpO1xuXG4gICAgcmV0dXJuIG07XG4gIH1cbiAgZ2V0TWVzc2FnZURhdGEobWVzc2FnZUVsKSB7XG4gICAgY29uc3QgbSA9IHRoaXM7XG4gICAgY29uc3QgJG1lc3NhZ2VFbCA9ICQobWVzc2FnZUVsKTtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgYXZhdGFyOiAkbWVzc2FnZUVsLmNzcygnYmFja2dyb3VuZC1pbWFnZScpLFxuICAgICAgbmFtZTogJG1lc3NhZ2VFbC5maW5kKCcubWVzc2FnZS1uYW1lJykuaHRtbCgpLFxuICAgICAgaGVhZGVyOiAkbWVzc2FnZUVsLmZpbmQoJy5tZXNzYWdlLWhlYWRlcicpLmh0bWwoKSxcbiAgICAgIHRleHRIZWFkZXI6ICRtZXNzYWdlRWwuZmluZCgnLm1lc3NhZ2UtdGV4dC1oZWFkZXInKS5odG1sKCksXG4gICAgICB0ZXh0Rm9vdGVyOiAkbWVzc2FnZUVsLmZpbmQoJy5tZXNzYWdlLXRleHQtZm9vdGVyJykuaHRtbCgpLFxuICAgICAgZm9vdGVyOiAkbWVzc2FnZUVsLmZpbmQoJy5tZXNzYWdlLWZvb3RlcicpLmh0bWwoKSxcbiAgICAgIGlzVGl0bGU6ICRtZXNzYWdlRWwuaGFzQ2xhc3MoJ21lc3NhZ2VzLXRpdGxlJyksXG4gICAgICB0eXBlOiAkbWVzc2FnZUVsLmhhc0NsYXNzKCdtZXNzYWdlLXNlbnQnKSA/ICdzZW50JyA6ICdyZWNlaXZlZCcsXG4gICAgICB0ZXh0OiAkbWVzc2FnZUVsLmZpbmQoJy5tZXNzYWdlLXRleHQnKS5odG1sKCksXG4gICAgICBpbWFnZTogJG1lc3NhZ2VFbC5maW5kKCcubWVzc2FnZS1pbWFnZScpLmh0bWwoKSxcbiAgICAgIGltYWdlU3JjOiAkbWVzc2FnZUVsLmZpbmQoJy5tZXNzYWdlLWltYWdlIGltZycpLmF0dHIoJ3NyYycpLFxuICAgICAgdHlwaW5nOiAkbWVzc2FnZUVsLmhhc0NsYXNzKCdtZXNzYWdlLXR5cGluZycpLFxuICAgIH07XG4gICAgaWYgKGRhdGEuaXNUaXRsZSkge1xuICAgICAgZGF0YS50ZXh0ID0gJG1lc3NhZ2VFbC5odG1sKCk7XG4gICAgfVxuICAgIGlmIChkYXRhLnRleHQgJiYgZGF0YS50ZXh0SGVhZGVyKSB7XG4gICAgICBkYXRhLnRleHQgPSBkYXRhLnRleHQucmVwbGFjZShgPGRpdiBjbGFzcz1cIm1lc3NhZ2UtdGV4dC1oZWFkZXJcIj4ke2RhdGEudGV4dEhlYWRlcn08L2Rpdj5gLCAnJyk7XG4gICAgfVxuICAgIGlmIChkYXRhLnRleHQgJiYgZGF0YS50ZXh0Rm9vdGVyKSB7XG4gICAgICBkYXRhLnRleHQgPSBkYXRhLnRleHQucmVwbGFjZShgPGRpdiBjbGFzcz1cIm1lc3NhZ2UtdGV4dC1mb290ZXJcIj4ke2RhdGEudGV4dEZvb3Rlcn08L2Rpdj5gLCAnJyk7XG4gICAgfVxuICAgIGxldCBhdmF0YXIgPSAkbWVzc2FnZUVsLmNzcygnYmFja2dyb3VuZC1pbWFnZScpO1xuICAgIGlmIChhdmF0YXIgPT09ICdub25lJyB8fCBhdmF0YXIgPT09ICcnKSBhdmF0YXIgPSB1bmRlZmluZWQ7XG4gICAgZGF0YS5hdmF0YXIgPSBhdmF0YXI7XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuICBnZXRNZXNzYWdlc0RhdGEoKSB7XG4gICAgY29uc3QgbSA9IHRoaXM7XG4gICAgY29uc3QgZGF0YSA9IFtdO1xuICAgIG0uJGVsLmZpbmQoJy5tZXNzYWdlLCAubWVzc2FnZXMtdGl0bGUnKS5lYWNoKChpbmRleCwgbWVzc2FnZUVsKSA9PiB7XG4gICAgICBkYXRhLnB1c2gobS5nZXRNZXNzYWdlRGF0YShtZXNzYWdlRWwpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuICByZW5kZXJNZXNzYWdlKG1lc3NhZ2VUb1JlbmRlcikge1xuICAgIGNvbnN0IG0gPSB0aGlzO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBVdGlscy5leHRlbmQoe1xuICAgICAgdHlwZTogJ3NlbnQnLFxuICAgIH0sIG1lc3NhZ2VUb1JlbmRlcik7XG4gICAgaWYgKG0ucGFyYW1zLnJlbmRlck1lc3NhZ2UpIHtcbiAgICAgIHJldHVybiBtLnBhcmFtcy5yZW5kZXJNZXNzYWdlKG1lc3NhZ2UpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5pc1RpdGxlKSB7XG4gICAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCJtZXNzYWdlcy10aXRsZVwiPiR7bWVzc2FnZS50ZXh0fTwvZGl2PmA7XG4gICAgfVxuICAgIHJldHVybiBgXG4gICAgICA8ZGl2IGNsYXNzPVwibWVzc2FnZSBtZXNzYWdlLSR7bWVzc2FnZS50eXBlfSAke21lc3NhZ2UuaXNUeXBpbmcgPyAnbWVzc2FnZS10eXBpbmcnIDogJyd9XCI+XG4gICAgICAgICR7bWVzc2FnZS5hdmF0YXIgPyBgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJtZXNzYWdlLWF2YXRhclwiIHN0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTp1cmwoJHttZXNzYWdlLmF2YXRhcn0pXCI+PC9kaXY+XG4gICAgICAgIGAgOiAnJ31cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1lc3NhZ2UtY29udGVudFwiPlxuICAgICAgICAgICR7bWVzc2FnZS5uYW1lID8gYDxkaXYgY2xhc3M9XCJtZXNzYWdlLW5hbWVcIj4ke21lc3NhZ2UubmFtZX08L2Rpdj5gIDogJyd9XG4gICAgICAgICAgJHttZXNzYWdlLmhlYWRlciA/IGA8ZGl2IGNsYXNzPVwibWVzc2FnZS1oZWFkZXJcIj4ke21lc3NhZ2UuaGVhZGVyfTwvZGl2PmAgOiAnJ31cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibWVzc2FnZS1idWJibGVcIj5cbiAgICAgICAgICAgICR7bWVzc2FnZS50ZXh0SGVhZGVyID8gYDxkaXYgY2xhc3M9XCJtZXNzYWdlLXRleHQtaGVhZGVyXCI+JHttZXNzYWdlLnRleHRIZWFkZXJ9PC9kaXY+YCA6ICcnfVxuICAgICAgICAgICAgJHttZXNzYWdlLmltYWdlID8gYDxkaXYgY2xhc3M9XCJtZXNzYWdlLWltYWdlXCI+JHttZXNzYWdlLmltYWdlfTwvZGl2PmAgOiAnJ31cbiAgICAgICAgICAgICR7bWVzc2FnZS5pbWFnZVNyYyAmJiAhbWVzc2FnZS5pbWFnZSA/IGA8ZGl2IGNsYXNzPVwibWVzc2FnZS1pbWFnZVwiPjxpbWcgc3JjPVwiJHttZXNzYWdlLmltYWdlU3JjfVwiPjwvZGl2PmAgOiAnJ31cbiAgICAgICAgICAgICR7bWVzc2FnZS50ZXh0IHx8IG1lc3NhZ2UuaXNUeXBpbmcgPyBgPGRpdiBjbGFzcz1cIm1lc3NhZ2UtdGV4dFwiPiR7bWVzc2FnZS50ZXh0IHx8ICcnfSR7bWVzc2FnZS5pc1R5cGluZyA/ICc8ZGl2IGNsYXNzPVwibWVzc2FnZS10eXBpbmctaW5kaWNhdG9yXCI+PGRpdj48L2Rpdj48ZGl2PjwvZGl2PjxkaXY+PC9kaXY+PC9kaXY+JyA6ICcnfTwvZGl2PmAgOiAnJ31cbiAgICAgICAgICAgICR7bWVzc2FnZS50ZXh0Rm9vdGVyID8gYDxkaXYgY2xhc3M9XCJtZXNzYWdlLXRleHQtZm9vdGVyXCI+JHttZXNzYWdlLnRleHRGb290ZXJ9PC9kaXY+YCA6ICcnfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICR7bWVzc2FnZS5mb290ZXIgPyBgPGRpdiBjbGFzcz1cIm1lc3NhZ2UtZm9vdGVyXCI+JHttZXNzYWdlLmZvb3Rlcn08L2Rpdj5gIDogJyd9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgYDtcbiAgfVxuICByZW5kZXJNZXNzYWdlcyhtZXNzYWdlc1RvUmVuZGVyID0gdGhpcy5tZXNzYWdlcywgbWV0aG9kID0gdGhpcy5wYXJhbXMubmV3TWVzc2FnZXNGaXJzdCA/ICdwcmVwZW5kJyA6ICdhcHBlbmQnKSB7XG4gICAgY29uc3QgbSA9IHRoaXM7XG4gICAgY29uc3QgaHRtbCA9IG1lc3NhZ2VzVG9SZW5kZXIubWFwKG1lc3NhZ2UgPT4gbS5yZW5kZXJNZXNzYWdlKG1lc3NhZ2UpKS5qb2luKCcnKTtcbiAgICBtLiRlbFttZXRob2RdKGh0bWwpO1xuICB9XG4gIGlzRmlyc3RNZXNzYWdlKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBtID0gdGhpcztcbiAgICBpZiAobS5wYXJhbXMuZmlyc3RNZXNzYWdlUnVsZSkgcmV0dXJuIG0ucGFyYW1zLmZpcnN0TWVzc2FnZVJ1bGUoLi4uYXJncyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlzTGFzdE1lc3NhZ2UoLi4uYXJncykge1xuICAgIGNvbnN0IG0gPSB0aGlzO1xuICAgIGlmIChtLnBhcmFtcy5sYXN0TWVzc2FnZVJ1bGUpIHJldHVybiBtLnBhcmFtcy5sYXN0TWVzc2FnZVJ1bGUoLi4uYXJncyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlzVGFpbE1lc3NhZ2UoLi4uYXJncykge1xuICAgIGNvbnN0IG0gPSB0aGlzO1xuICAgIGlmIChtLnBhcmFtcy50YWlsTWVzc2FnZVJ1bGUpIHJldHVybiBtLnBhcmFtcy50YWlsTWVzc2FnZVJ1bGUoLi4uYXJncyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlzU2FtZU5hbWVNZXNzYWdlKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBtID0gdGhpcztcbiAgICBpZiAobS5wYXJhbXMuc2FtZU5hbWVNZXNzYWdlUnVsZSkgcmV0dXJuIG0ucGFyYW1zLnNhbWVOYW1lTWVzc2FnZVJ1bGUoLi4uYXJncyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlzU2FtZUhlYWRlck1lc3NhZ2UoLi4uYXJncykge1xuICAgIGNvbnN0IG0gPSB0aGlzO1xuICAgIGlmIChtLnBhcmFtcy5zYW1lSGVhZGVyTWVzc2FnZVJ1bGUpIHJldHVybiBtLnBhcmFtcy5zYW1lSGVhZGVyTWVzc2FnZVJ1bGUoLi4uYXJncyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlzU2FtZUZvb3Rlck1lc3NhZ2UoLi4uYXJncykge1xuICAgIGNvbnN0IG0gPSB0aGlzO1xuICAgIGlmIChtLnBhcmFtcy5zYW1lRm9vdGVyTWVzc2FnZVJ1bGUpIHJldHVybiBtLnBhcmFtcy5zYW1lRm9vdGVyTWVzc2FnZVJ1bGUoLi4uYXJncyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlzU2FtZUF2YXRhck1lc3NhZ2UoLi4uYXJncykge1xuICAgIGNvbnN0IG0gPSB0aGlzO1xuICAgIGlmIChtLnBhcmFtcy5zYW1lQXZhdGFyTWVzc2FnZVJ1bGUpIHJldHVybiBtLnBhcmFtcy5zYW1lQXZhdGFyTWVzc2FnZVJ1bGUoLi4uYXJncyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlzQ3VzdG9tQ2xhc3NNZXNzYWdlKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBtID0gdGhpcztcbiAgICBpZiAobS5wYXJhbXMuY3VzdG9tQ2xhc3NNZXNzYWdlUnVsZSkgcmV0dXJuIG0ucGFyYW1zLmN1c3RvbUNsYXNzTWVzc2FnZVJ1bGUoLi4uYXJncyk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBsYXlvdXQoKSB7XG4gICAgY29uc3QgbSA9IHRoaXM7XG4gICAgbS4kZWwuZmluZCgnLm1lc3NhZ2UsIC5tZXNzYWdlcy10aXRsZScpLmVhY2goKGluZGV4LCBtZXNzYWdlRWwpID0+IHtcbiAgICAgIGNvbnN0ICRtZXNzYWdlRWwgPSAkKG1lc3NhZ2VFbCk7XG4gICAgICBpZiAoIW0ubWVzc2FnZXMpIHtcbiAgICAgICAgbS5tZXNzYWdlcyA9IG0uZ2V0TWVzc2FnZXNEYXRhKCk7XG4gICAgICB9XG4gICAgICBjb25zdCBjbGFzc2VzID0gW107XG4gICAgICBjb25zdCBtZXNzYWdlID0gbS5tZXNzYWdlc1tpbmRleF07XG4gICAgICBjb25zdCBwcmV2aW91c01lc3NhZ2UgPSBtLm1lc3NhZ2VzW2luZGV4IC0gMV07XG4gICAgICBjb25zdCBuZXh0TWVzc2FnZSA9IG0ubWVzc2FnZXNbaW5kZXggKyAxXTtcbiAgICAgIGlmIChtLmlzRmlyc3RNZXNzYWdlKG1lc3NhZ2UsIHByZXZpb3VzTWVzc2FnZSwgbmV4dE1lc3NhZ2UpKSB7XG4gICAgICAgIGNsYXNzZXMucHVzaCgnbWVzc2FnZS1maXJzdCcpO1xuICAgICAgfVxuICAgICAgaWYgKG0uaXNMYXN0TWVzc2FnZShtZXNzYWdlLCBwcmV2aW91c01lc3NhZ2UsIG5leHRNZXNzYWdlKSkge1xuICAgICAgICBjbGFzc2VzLnB1c2goJ21lc3NhZ2UtbGFzdCcpO1xuICAgICAgfVxuICAgICAgaWYgKG0uaXNUYWlsTWVzc2FnZShtZXNzYWdlLCBwcmV2aW91c01lc3NhZ2UsIG5leHRNZXNzYWdlKSkge1xuICAgICAgICBjbGFzc2VzLnB1c2goJ21lc3NhZ2UtdGFpbCcpO1xuICAgICAgfVxuICAgICAgaWYgKG0uaXNTYW1lTmFtZU1lc3NhZ2UobWVzc2FnZSwgcHJldmlvdXNNZXNzYWdlLCBuZXh0TWVzc2FnZSkpIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKCdtZXNzYWdlLXNhbWUtbmFtZScpO1xuICAgICAgfVxuICAgICAgaWYgKG0uaXNTYW1lSGVhZGVyTWVzc2FnZShtZXNzYWdlLCBwcmV2aW91c01lc3NhZ2UsIG5leHRNZXNzYWdlKSkge1xuICAgICAgICBjbGFzc2VzLnB1c2goJ21lc3NhZ2Utc2FtZS1oZWFkZXInKTtcbiAgICAgIH1cbiAgICAgIGlmIChtLmlzU2FtZUZvb3Rlck1lc3NhZ2UobWVzc2FnZSwgcHJldmlvdXNNZXNzYWdlLCBuZXh0TWVzc2FnZSkpIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKCdtZXNzYWdlLXNhbWUtZm9vdGVyJyk7XG4gICAgICB9XG4gICAgICBpZiAobS5pc1NhbWVBdmF0YXJNZXNzYWdlKG1lc3NhZ2UsIHByZXZpb3VzTWVzc2FnZSwgbmV4dE1lc3NhZ2UpKSB7XG4gICAgICAgIGNsYXNzZXMucHVzaCgnbWVzc2FnZS1zYW1lLWF2YXRhcicpO1xuICAgICAgfVxuICAgICAgbGV0IGN1c3RvbU1lc3NhZ2VDbGFzc2VzID0gbS5pc0N1c3RvbUNsYXNzTWVzc2FnZShtZXNzYWdlLCBwcmV2aW91c01lc3NhZ2UsIG5leHRNZXNzYWdlKTtcbiAgICAgIGlmIChjdXN0b21NZXNzYWdlQ2xhc3NlcyAmJiBjdXN0b21NZXNzYWdlQ2xhc3Nlcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjdXN0b21NZXNzYWdlQ2xhc3NlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBjdXN0b21NZXNzYWdlQ2xhc3NlcyA9IGN1c3RvbU1lc3NhZ2VDbGFzc2VzLnNwbGl0KCcgJyk7XG4gICAgICAgIH1cbiAgICAgICAgY3VzdG9tTWVzc2FnZUNsYXNzZXMuZm9yRWFjaCgoY3VzdG9tQ2xhc3MpID0+IHtcbiAgICAgICAgICBjbGFzc2VzLnB1c2goY3VzdG9tQ2xhc3MpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgICRtZXNzYWdlRWwucmVtb3ZlQ2xhc3MoJ21lc3NhZ2UtZmlyc3QgbWVzc2FnZS1sYXN0IG1lc3NhZ2UtdGFpbCBtZXNzYWdlLXNhbWUtbmFtZSBtZXNzYWdlLXNhbWUtaGVhZGVyIG1lc3NhZ2Utc2FtZS1mb290ZXIgbWVzc2FnZS1zYW1lLWF2YXRhcicpO1xuICAgICAgY2xhc3Nlcy5mb3JFYWNoKChjbGFzc05hbWUpID0+IHtcbiAgICAgICAgJG1lc3NhZ2VFbC5hZGRDbGFzcyhjbGFzc05hbWUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgY2xlYXIoKSB7XG4gICAgY29uc3QgbSA9IHRoaXM7XG4gICAgbS5tZXNzYWdlcyA9IFtdO1xuICAgIG0uJGVsLmh0bWwoJycpO1xuICB9XG4gIHJlbW92ZU1lc3NhZ2UobWVzc2FnZVRvUmVtb3ZlLCBsYXlvdXQgPSB0cnVlKSB7XG4gICAgY29uc3QgbSA9IHRoaXM7XG4gICAgLy8gSW5kZXggb3IgRWxcbiAgICBsZXQgaW5kZXg7XG4gICAgbGV0ICRlbDtcbiAgICBpZiAodHlwZW9mIG1lc3NhZ2VUb1JlbW92ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGluZGV4ID0gbWVzc2FnZVRvUmVtb3ZlO1xuICAgICAgJGVsID0gbS4kZWwuZmluZCgnLm1lc3NhZ2UsIC5tZXNzYWdlcy10aXRsZScpLmVxKGluZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgJGVsID0gJChtZXNzYWdlVG9SZW1vdmUpO1xuICAgICAgaW5kZXggPSAkZWwuaW5kZXgoKTtcbiAgICB9XG4gICAgaWYgKCRlbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBtO1xuICAgIH1cbiAgICAkZWwucmVtb3ZlKCk7XG4gICAgbS5tZXNzYWdlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIGlmIChtLnBhcmFtcy5hdXRvTGF5b3V0ICYmIGxheW91dCkgbS5sYXlvdXQoKTtcbiAgICByZXR1cm4gbTtcbiAgfVxuICByZW1vdmVNZXNzYWdlcyhtZXNzYWdlc1RvUmVtb3ZlLCBsYXlvdXQgPSB0cnVlKSB7XG4gICAgY29uc3QgbSA9IHRoaXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobWVzc2FnZXNUb1JlbW92ZSkpIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2VzVG9SZW1vdmVFbHMgPSBbXTtcbiAgICAgIG1lc3NhZ2VzVG9SZW1vdmUuZm9yRWFjaCgobWVzc2FnZVRvUmVtb3ZlSW5kZXgpID0+IHtcbiAgICAgICAgbWVzc2FnZXNUb1JlbW92ZUVscy5wdXNoKG0uJGVsLmZpbmQoJy5tZXNzYWdlLCAubWVzc2FnZXMtdGl0bGUnKS5lcShtZXNzYWdlVG9SZW1vdmVJbmRleCkpO1xuICAgICAgfSk7XG4gICAgICBtZXNzYWdlc1RvUmVtb3ZlRWxzLmZvckVhY2goKG1lc3NhZ2VUb1JlbW92ZSkgPT4ge1xuICAgICAgICBtLnJlbW92ZU1lc3NhZ2UobWVzc2FnZVRvUmVtb3ZlLCBmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgJChtZXNzYWdlc1RvUmVtb3ZlKS5lYWNoKChpbmRleCwgbWVzc2FnZVRvUmVtb3ZlKSA9PiB7XG4gICAgICAgIG0ucmVtb3ZlTWVzc2FnZShtZXNzYWdlVG9SZW1vdmUsIGZhbHNlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAobS5wYXJhbXMuYXV0b0xheW91dCAmJiBsYXlvdXQpIG0ubGF5b3V0KCk7XG4gICAgcmV0dXJuIG07XG4gIH1cblxuICBhZGRNZXNzYWdlKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBtID0gdGhpcztcbiAgICBsZXQgbWVzc2FnZVRvQWRkO1xuICAgIGxldCBhbmltYXRlO1xuICAgIGxldCBtZXRob2Q7XG4gICAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnYm9vbGVhbicpIHtcbiAgICAgIFttZXNzYWdlVG9BZGQsIGFuaW1hdGUsIG1ldGhvZF0gPSBhcmdzO1xuICAgIH0gZWxzZSB7XG4gICAgICBbbWVzc2FnZVRvQWRkLCBtZXRob2QsIGFuaW1hdGVdID0gYXJncztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBhbmltYXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgYW5pbWF0ZSA9IHRydWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbWV0aG9kID09PSAndW5kZWZpbmVkJykge1xuICAgICAgbWV0aG9kID0gbS5wYXJhbXMubmV3TWVzc2FnZXNGaXJzdCA/ICdwcmVwZW5kJyA6ICdhcHBlbmQnO1xuICAgIH1cblxuICAgIHJldHVybiBtLmFkZE1lc3NhZ2VzKFttZXNzYWdlVG9BZGRdLCBhbmltYXRlLCBtZXRob2QpO1xuICB9XG4gIGFkZE1lc3NhZ2VzKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBtID0gdGhpcztcbiAgICBsZXQgbWVzc2FnZXNUb0FkZDtcbiAgICBsZXQgYW5pbWF0ZTtcbiAgICBsZXQgbWV0aG9kO1xuICAgIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICBbbWVzc2FnZXNUb0FkZCwgYW5pbWF0ZSwgbWV0aG9kXSA9IGFyZ3M7XG4gICAgfSBlbHNlIHtcbiAgICAgIFttZXNzYWdlc1RvQWRkLCBtZXRob2QsIGFuaW1hdGVdID0gYXJncztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBhbmltYXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgYW5pbWF0ZSA9IHRydWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbWV0aG9kID09PSAndW5kZWZpbmVkJykge1xuICAgICAgbWV0aG9kID0gbS5wYXJhbXMubmV3TWVzc2FnZXNGaXJzdCA/ICdwcmVwZW5kJyA6ICdhcHBlbmQnO1xuICAgIH1cblxuICAgIC8vIERlZmluZSBzY3JvbGwgcG9zaXRpb25zIGJlZm9yZSBuZXcgbWVzc2FnZXMgYWRkZWRcbiAgICBjb25zdCBzY3JvbGxIZWlnaHRCZWZvcmUgPSBtLnBhZ2VDb250ZW50RWwuc2Nyb2xsSGVpZ2h0O1xuICAgIGNvbnN0IGhlaWdodEJlZm9yZSA9IG0ucGFnZUNvbnRlbnRFbC5vZmZzZXRIZWlnaHQ7XG4gICAgY29uc3Qgc2Nyb2xsQmVmb3JlID0gbS5wYWdlQ29udGVudEVsLnNjcm9sbFRvcDtcblxuICAgIC8vIEFkZCBtZXNzYWdlIHRvIERPTSBhbmQgZGF0YVxuICAgIGxldCBtZXNzYWdlc0hUTUwgPSAnJztcbiAgICBjb25zdCB0eXBpbmdNZXNzYWdlID0gbS5tZXNzYWdlcy5maWx0ZXIoZWwgPT4gZWwuaXNUeXBpbmcpWzBdO1xuICAgIG1lc3NhZ2VzVG9BZGQuZm9yRWFjaCgobWVzc2FnZVRvQWRkKSA9PiB7XG4gICAgICBpZiAodHlwaW5nTWVzc2FnZSkge1xuICAgICAgICBpZiAobWV0aG9kID09PSAnYXBwZW5kJykge1xuICAgICAgICAgIG0ubWVzc2FnZXMuc3BsaWNlKG0ubWVzc2FnZXMuaW5kZXhPZih0eXBpbmdNZXNzYWdlKSwgMCwgbWVzc2FnZVRvQWRkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtLm1lc3NhZ2VzLnNwbGljZShtLm1lc3NhZ2VzLmluZGV4T2YodHlwaW5nTWVzc2FnZSkgKyAxLCAwLCBtZXNzYWdlVG9BZGQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtLm1lc3NhZ2VzW21ldGhvZCA9PT0gJ2FwcGVuZCcgPyAncHVzaCcgOiAndW5zaGlmdCddKG1lc3NhZ2VUb0FkZCk7XG4gICAgICB9XG4gICAgICBtZXNzYWdlc0hUTUwgKz0gbS5yZW5kZXJNZXNzYWdlKG1lc3NhZ2VUb0FkZCk7XG4gICAgfSk7XG4gICAgY29uc3QgJG1lc3NhZ2VzRWxzID0gJChtZXNzYWdlc0hUTUwpO1xuICAgIGlmIChhbmltYXRlKSB7XG4gICAgICBpZiAobWV0aG9kID09PSAnYXBwZW5kJyAmJiAhbS5wYXJhbXMubmV3TWVzc2FnZXNGaXJzdCkge1xuICAgICAgICAkbWVzc2FnZXNFbHMuYWRkQ2xhc3MoJ21lc3NhZ2UtYXBwZWFyLWZyb20tYm90dG9tJyk7XG4gICAgICB9XG4gICAgICBpZiAobWV0aG9kID09PSAncHJlcGVuZCcgJiYgbS5wYXJhbXMubmV3TWVzc2FnZXNGaXJzdCkge1xuICAgICAgICAkbWVzc2FnZXNFbHMuYWRkQ2xhc3MoJ21lc3NhZ2UtYXBwZWFyLWZyb20tdG9wJyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBpbmdNZXNzYWdlKSB7XG4gICAgICBpZiAobWV0aG9kID09PSAnYXBwZW5kJykge1xuICAgICAgICAkbWVzc2FnZXNFbHMuaW5zZXJ0QmVmb3JlKG0uJGVsLmZpbmQoJy5tZXNzYWdlLXR5cGluZycpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRtZXNzYWdlc0Vscy5pbnNlcnRBZnRlcihtLiRlbC5maW5kKCcubWVzc2FnZS10eXBpbmcnKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG0uJGVsW21ldGhvZF0oJG1lc3NhZ2VzRWxzKTtcbiAgICB9XG5cbiAgICAvLyBMYXlvdXRcbiAgICBpZiAobS5wYXJhbXMuYXV0b0xheW91dCkgbS5sYXlvdXQoKTtcblxuICAgIGlmIChtZXRob2QgPT09ICdwcmVwZW5kJyAmJiAhdHlwaW5nTWVzc2FnZSkge1xuICAgICAgbS5wYWdlQ29udGVudEVsLnNjcm9sbFRvcCA9IHNjcm9sbEJlZm9yZSArIChtLnBhZ2VDb250ZW50RWwuc2Nyb2xsSGVpZ2h0IC0gc2Nyb2xsSGVpZ2h0QmVmb3JlKTtcbiAgICB9XG5cbiAgICBpZiAobS5wYXJhbXMuc2Nyb2xsTWVzc2FnZXMgJiYgKChtZXRob2QgPT09ICdhcHBlbmQnICYmICFtLnBhcmFtcy5uZXdNZXNzYWdlc0ZpcnN0KSB8fCAobWV0aG9kID09PSAncHJlcGVuZCcgJiYgbS5wYXJhbXMubmV3TWVzc2FnZXNGaXJzdCAmJiAhdHlwaW5nTWVzc2FnZSkpKSB7XG4gICAgICBpZiAobS5wYXJhbXMuc2Nyb2xsTWVzc2FnZXNPbkVkZ2UpIHtcbiAgICAgICAgbGV0IG9uRWRnZSA9IGZhbHNlO1xuICAgICAgICBpZiAobS5wYXJhbXMubmV3TWVzc2FnZXNGaXJzdCAmJiBzY3JvbGxCZWZvcmUgPT09IDApIHtcbiAgICAgICAgICBvbkVkZ2UgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbS5wYXJhbXMubmV3TWVzc2FnZXNGaXJzdCAmJiAoc2Nyb2xsQmVmb3JlIC0gKHNjcm9sbEhlaWdodEJlZm9yZSAtIGhlaWdodEJlZm9yZSkgPj0gLTEwKSkge1xuICAgICAgICAgIG9uRWRnZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9uRWRnZSkgbS5zY3JvbGwoYW5pbWF0ZSA/IHVuZGVmaW5lZCA6IDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbS5zY3JvbGwoYW5pbWF0ZSA/IHVuZGVmaW5lZCA6IDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtO1xuICB9XG4gIHNob3dUeXBpbmcobWVzc2FnZSA9IHt9KSB7XG4gICAgY29uc3QgbSA9IHRoaXM7XG4gICAgY29uc3QgdHlwaW5nTWVzc2FnZSA9IG0ubWVzc2FnZXMuZmlsdGVyKGVsID0+IGVsLmlzVHlwaW5nKVswXTtcbiAgICBpZiAodHlwaW5nTWVzc2FnZSkge1xuICAgICAgbS5yZW1vdmVNZXNzYWdlKG0ubWVzc2FnZXMuaW5kZXhPZih0eXBpbmdNZXNzYWdlKSk7XG4gICAgfVxuICAgIG0uYWRkTWVzc2FnZShVdGlscy5leHRlbmQoe1xuICAgICAgdHlwZTogJ3JlY2VpdmVkJyxcbiAgICAgIGlzVHlwaW5nOiB0cnVlLFxuICAgIH0sIG1lc3NhZ2UpKTtcbiAgICByZXR1cm4gbTtcbiAgfVxuICBoaWRlVHlwaW5nKCkge1xuICAgIGNvbnN0IG0gPSB0aGlzO1xuICAgIGxldCB0eXBpbmdNZXNzYWdlSW5kZXg7XG4gICAgbS5tZXNzYWdlcy5mb3JFYWNoKChtZXNzYWdlLCBpbmRleCkgPT4ge1xuICAgICAgaWYgKG1lc3NhZ2UuaXNUeXBpbmcpIHR5cGluZ01lc3NhZ2VJbmRleCA9IGluZGV4O1xuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgdHlwaW5nTWVzc2FnZUluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgbS5yZW1vdmVNZXNzYWdlKHR5cGluZ01lc3NhZ2VJbmRleCk7XG4gICAgfVxuICAgIHJldHVybiBtO1xuICB9XG4gIHNjcm9sbChkdXJhdGlvbiA9IDMwMCwgc2Nyb2xsVG9wKSB7XG4gICAgY29uc3QgbSA9IHRoaXM7XG4gICAgY29uc3QgY3VycmVudFNjcm9sbCA9IG0ucGFnZUNvbnRlbnRFbC5zY3JvbGxUb3A7XG4gICAgbGV0IG5ld1Njcm9sbFRvcDtcbiAgICBpZiAodHlwZW9mIHNjcm9sbFRvcCAhPT0gJ3VuZGVmaW5lZCcpIG5ld1Njcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICBlbHNlIHtcbiAgICAgIG5ld1Njcm9sbFRvcCA9IG0ucGFyYW1zLm5ld01lc3NhZ2VzRmlyc3QgPyAwIDogbS5wYWdlQ29udGVudEVsLnNjcm9sbEhlaWdodCAtIG0ucGFnZUNvbnRlbnRFbC5vZmZzZXRIZWlnaHQ7XG4gICAgICBpZiAobmV3U2Nyb2xsVG9wID09PSBjdXJyZW50U2Nyb2xsKSByZXR1cm4gbTtcbiAgICB9XG4gICAgbS4kcGFnZUNvbnRlbnRFbC5zY3JvbGxUb3AobmV3U2Nyb2xsVG9wLCBkdXJhdGlvbik7XG4gICAgcmV0dXJuIG07XG4gIH1cbiAgaW5pdCgpIHtcbiAgICBjb25zdCBtID0gdGhpcztcbiAgICBpZiAoIW0ubWVzc2FnZXMgfHwgbS5tZXNzYWdlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIG0ubWVzc2FnZXMgPSBtLmdldE1lc3NhZ2VzRGF0YSgpO1xuICAgIH1cbiAgICBpZiAobS5wYXJhbXMubWVzc2FnZXMgJiYgbS5wYXJhbXMubWVzc2FnZXMubGVuZ3RoKSB7XG4gICAgICBtLnJlbmRlck1lc3NhZ2VzKCk7XG4gICAgfVxuICAgIGlmIChtLnBhcmFtcy5hdXRvTGF5b3V0KSBtLmxheW91dCgpO1xuICAgIGlmIChtLnBhcmFtcy5zY3JvbGxNZXNzYWdlcykgbS5zY3JvbGwoMCk7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICBjb25zdCBtID0gdGhpcztcbiAgICBtLmVtaXQoJ2xvY2FsOjpiZWZvcmVEZXN0cm95IG1lc3NhZ2VzQmVmb3JlRGVzdHJveScsIG0pO1xuICAgIG0uJGVsLnRyaWdnZXIoJ21lc3NhZ2VzOmJlZm9yZWRlc3Ryb3knLCBtKTtcbiAgICBtLiRlbFswXS5mN01lc3NhZ2VzID0gbnVsbDtcbiAgICBkZWxldGUgbS4kZWxbMF0uZjdNZXNzYWdlcztcbiAgICBVdGlscy5kZWxldGVQcm9wcyhtKTtcbiAgfVxufVxuXG52YXIgbWVzc2FnZXMgPSB7XG4gIG5hbWU6ICdtZXNzYWdlcycsXG4gIHN0YXRpYzoge1xuICAgIE1lc3NhZ2VzLFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBhcHAubWVzc2FnZXMgPSBDb25zdHJ1Y3Rvck1ldGhvZHMoe1xuICAgICAgZGVmYXVsdFNlbGVjdG9yOiAnLm1lc3NhZ2VzJyxcbiAgICAgIGNvbnN0cnVjdG9yOiBNZXNzYWdlcyxcbiAgICAgIGFwcCxcbiAgICAgIGRvbVByb3A6ICdmN01lc3NhZ2VzJyxcbiAgICAgIGFkZE1ldGhvZHM6ICdyZW5kZXJNZXNzYWdlcyBsYXlvdXQgc2Nyb2xsIGNsZWFyIHJlbW92ZU1lc3NhZ2UgcmVtb3ZlTWVzc2FnZXMgYWRkTWVzc2FnZSBhZGRNZXNzYWdlcycuc3BsaXQoJyAnKSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICB0YWJCZWZvcmVSZW1vdmUodGFiRWwpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICAkKHRhYkVsKS5maW5kKCcubWVzc2FnZXMtaW5pdCcpLmVhY2goKGluZGV4LCBtZXNzYWdlc0VsKSA9PiB7XG4gICAgICAgIGFwcC5tZXNzYWdlcy5kZXN0cm95KG1lc3NhZ2VzRWwpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICB0YWJNb3VudGVkKHRhYkVsKSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgJCh0YWJFbCkuZmluZCgnLm1lc3NhZ2VzLWluaXQnKS5lYWNoKChpbmRleCwgbWVzc2FnZXNFbCkgPT4ge1xuICAgICAgICBhcHAubWVzc2FnZXMuY3JlYXRlKHsgZWw6IG1lc3NhZ2VzRWwgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHBhZ2VCZWZvcmVSZW1vdmUocGFnZSkge1xuICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgIHBhZ2UuJGVsLmZpbmQoJy5tZXNzYWdlcy1pbml0JykuZWFjaCgoaW5kZXgsIG1lc3NhZ2VzRWwpID0+IHtcbiAgICAgICAgYXBwLm1lc3NhZ2VzLmRlc3Ryb3kobWVzc2FnZXNFbCk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHBhZ2VJbml0KHBhZ2UpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBwYWdlLiRlbC5maW5kKCcubWVzc2FnZXMtaW5pdCcpLmVhY2goKGluZGV4LCBtZXNzYWdlc0VsKSA9PiB7XG4gICAgICAgIGFwcC5tZXNzYWdlcy5jcmVhdGUoeyBlbDogbWVzc2FnZXNFbCB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH0sXG4gIGNsaWNrczoge1xuXG4gIH0sXG59O1xuXG5jbGFzcyBNZXNzYWdlYmFyIGV4dGVuZHMgRnJhbWV3b3JrN0NsYXNzIHtcbiAgY29uc3RydWN0b3IoYXBwLCBwYXJhbXMgPSB7fSkge1xuICAgIHN1cGVyKHBhcmFtcywgW2FwcF0pO1xuXG4gICAgY29uc3QgbWVzc2FnZWJhciA9IHRoaXM7XG5cbiAgICBjb25zdCBkZWZhdWx0cyA9IHtcbiAgICAgIHRvcE9mZnNldDogMCxcbiAgICAgIGJvdHRvbU9mZnNldDogMCxcbiAgICAgIGF0dGFjaG1lbnRzOiBbXSxcbiAgICAgIHJlbmRlckF0dGFjaG1lbnRzOiB1bmRlZmluZWQsXG4gICAgICByZW5kZXJBdHRhY2htZW50OiB1bmRlZmluZWQsXG4gICAgfTtcblxuICAgIC8vIEV4dGVuZCBkZWZhdWx0cyB3aXRoIG1vZHVsZXMgcGFyYW1zXG4gICAgbWVzc2FnZWJhci51c2VJbnN0YW5jZU1vZHVsZXNQYXJhbXMoZGVmYXVsdHMpO1xuXG4gICAgbWVzc2FnZWJhci5wYXJhbXMgPSBVdGlscy5leHRlbmQoZGVmYXVsdHMsIHBhcmFtcyk7XG5cbiAgICAvLyBFbFxuICAgIGNvbnN0ICRlbCA9ICQobWVzc2FnZWJhci5wYXJhbXMuZWwpO1xuICAgIGlmICgkZWwubGVuZ3RoID09PSAwKSByZXR1cm4gbWVzc2FnZWJhcjtcblxuICAgICRlbFswXS5mN01lc3NhZ2ViYXIgPSBtZXNzYWdlYmFyO1xuXG4gICAgLy8gUGFnZSBhbmQgUGFnZUNvbnRlbnRcbiAgICBjb25zdCAkcGFnZUVsID0gJGVsLnBhcmVudHMoJy5wYWdlJykuZXEoMCk7XG4gICAgY29uc3QgJHBhZ2VDb250ZW50RWwgPSAkcGFnZUVsLmZpbmQoJy5wYWdlLWNvbnRlbnQnKS5lcSgwKTtcblxuICAgIC8vIEFyZWFcbiAgICBjb25zdCAkYXJlYUVsID0gJGVsLmZpbmQoJy5tZXNzYWdlYmFyLWFyZWEnKTtcblxuICAgIC8vIFRleHRhcmVhXG4gICAgbGV0ICR0ZXh0YXJlYUVsO1xuICAgIGlmIChtZXNzYWdlYmFyLnBhcmFtcy50ZXh0YXJlYUVsKSB7XG4gICAgICAkdGV4dGFyZWFFbCA9ICQobWVzc2FnZWJhci5wYXJhbXMudGV4dGFyZWFFbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICR0ZXh0YXJlYUVsID0gJGVsLmZpbmQoJ3RleHRhcmVhJyk7XG4gICAgfVxuXG4gICAgLy8gQXR0YWNobWVudHMgJiBMaWJyYXJ5XG4gICAgY29uc3QgJGF0dGFjaG1lbnRzRWwgPSAkZWwuZmluZCgnLm1lc3NhZ2ViYXItYXR0YWNobWVudHMnKTtcbiAgICBjb25zdCAkc2hlZXRFbCA9ICRlbC5maW5kKCcubWVzc2FnZWJhci1zaGVldCcpO1xuXG4gICAgVXRpbHMuZXh0ZW5kKG1lc3NhZ2ViYXIsIHtcbiAgICAgICRlbCxcbiAgICAgIGVsOiAkZWxbMF0sXG4gICAgICAkYXJlYUVsLFxuICAgICAgYXJlYUVsOiAkYXJlYUVsWzBdLFxuICAgICAgJHRleHRhcmVhRWwsXG4gICAgICB0ZXh0YXJlYUVsOiAkdGV4dGFyZWFFbFswXSxcbiAgICAgICRhdHRhY2htZW50c0VsLFxuICAgICAgYXR0YWNobWVudHNFbDogJGF0dGFjaG1lbnRzRWxbMF0sXG4gICAgICBhdHRhY2htZW50c1Zpc2libGU6ICRhdHRhY2htZW50c0VsLmhhc0NsYXNzKCdtZXNzYWdlYmFyLWF0dGFjaG1lbnRzLXZpc2libGUnKSxcbiAgICAgICRzaGVldEVsLFxuICAgICAgc2hlZXRFbDogJHNoZWV0RWxbMF0sXG4gICAgICBzaGVldFZpc2libGU6ICRzaGVldEVsLmhhc0NsYXNzKCdtZXNzYWdlYmFyLXNoZWV0LXZpc2libGUnKSxcbiAgICAgICRwYWdlRWwsXG4gICAgICBwYWdlRWw6ICRwYWdlRWxbMF0sXG4gICAgICAkcGFnZUNvbnRlbnRFbCxcbiAgICAgIHBhZ2VDb250ZW50RWw6ICRwYWdlQ29udGVudEVsLFxuICAgICAgdG9wOiAkZWwuaGFzQ2xhc3MoJ21lc3NhZ2ViYXItdG9wJykgfHwgbWVzc2FnZWJhci5wYXJhbXMudG9wLFxuICAgICAgYXR0YWNobWVudHM6IFtdLFxuICAgIH0pO1xuXG4gICAgLy8gRXZlbnRzXG4gICAgZnVuY3Rpb24gb25BcHBSZXNpemUoKSB7XG4gICAgICBtZXNzYWdlYmFyLnJlc2l6ZSgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvblN1Ym1pdChlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uQXR0YWNobWVudENsaWNrKGUpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gJCh0aGlzKS5pbmRleCgpO1xuICAgICAgaWYgKCQoZS50YXJnZXQpLmNsb3Nlc3QoJy5tZXNzYWdlYmFyLWF0dGFjaG1lbnQtZGVsZXRlJykubGVuZ3RoKSB7XG4gICAgICAgICQodGhpcykudHJpZ2dlcignbWVzc2FnZWJhcjphdHRhY2htZW50ZGVsZXRlJywgaW5kZXgpO1xuICAgICAgICBtZXNzYWdlYmFyLmVtaXQoJ2xvY2FsOjphdHRhY2htZW50RGVsZXRlIG1lc3NhZ2ViYXJBdHRhY2htZW50RGVsZXRlJywgdGhpcywgaW5kZXgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJCh0aGlzKS50cmlnZ2VyKCdtZXNzYWdlYmFyOmF0dGFjaG1lbnRjbGljaycsIGluZGV4KTtcbiAgICAgICAgbWVzc2FnZWJhci5lbWl0KCdsb2NhbDo6YXR0YWNobWVudENsaWNrIG1lc3NhZ2ViYXJBdHRhY2htZW50Q2xpY2snLCB0aGlzLCBpbmRleCk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uVGV4dGFyZWFDaGFuZ2UoKSB7XG4gICAgICBtZXNzYWdlYmFyLmNoZWNrRW1wdHlTdGF0ZSgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvblRleHRhcmVhRm9jdXMoKSB7XG4gICAgICBtZXNzYWdlYmFyLnNoZWV0SGlkZSgpO1xuICAgIH1cblxuICAgIG1lc3NhZ2ViYXIuYXR0YWNoRXZlbnRzID0gZnVuY3Rpb24gYXR0YWNoRXZlbnRzKCkge1xuICAgICAgJGVsLm9uKCd0ZXh0YXJlYTpyZXNpemUnLCBvbkFwcFJlc2l6ZSk7XG4gICAgICAkZWwub24oJ3N1Ym1pdCcsIG9uU3VibWl0KTtcbiAgICAgICRlbC5vbignY2xpY2snLCAnLm1lc3NhZ2ViYXItYXR0YWNobWVudCcsIG9uQXR0YWNobWVudENsaWNrKTtcbiAgICAgICR0ZXh0YXJlYUVsLm9uKCdjaGFuZ2UgaW5wdXQnLCBvblRleHRhcmVhQ2hhbmdlKTtcbiAgICAgICR0ZXh0YXJlYUVsLm9uKCdmb2N1cycsIG9uVGV4dGFyZWFGb2N1cyk7XG4gICAgICBhcHAub24oJ3Jlc2l6ZScsIG9uQXBwUmVzaXplKTtcbiAgICB9O1xuICAgIG1lc3NhZ2ViYXIuZGV0YWNoRXZlbnRzID0gZnVuY3Rpb24gZGV0YWNoRXZlbnRzKCkge1xuICAgICAgJGVsLm9mZigndGV4dGFyZWE6cmVzaXplJywgb25BcHBSZXNpemUpO1xuICAgICAgJGVsLm9mZignc3VibWl0Jywgb25TdWJtaXQpO1xuICAgICAgJGVsLm9mZignY2xpY2snLCAnLm1lc3NhZ2ViYXItYXR0YWNobWVudCcsIG9uQXR0YWNobWVudENsaWNrKTtcbiAgICAgICR0ZXh0YXJlYUVsLm9mZignY2hhbmdlIGlucHV0Jywgb25UZXh0YXJlYUNoYW5nZSk7XG4gICAgICAkdGV4dGFyZWFFbC5vbignZm9jdXMnLCBvblRleHRhcmVhRm9jdXMpO1xuICAgICAgYXBwLm9mZigncmVzaXplJywgb25BcHBSZXNpemUpO1xuICAgIH07XG5cblxuICAgIC8vIEluc3RhbGwgTW9kdWxlc1xuICAgIG1lc3NhZ2ViYXIudXNlSW5zdGFuY2VNb2R1bGVzKCk7XG5cbiAgICAvLyBJbml0XG4gICAgbWVzc2FnZWJhci5pbml0KCk7XG5cbiAgICByZXR1cm4gbWVzc2FnZWJhcjtcbiAgfVxuICBmb2N1cygpIHtcbiAgICBjb25zdCBtZXNzYWdlYmFyID0gdGhpcztcbiAgICBtZXNzYWdlYmFyLiR0ZXh0YXJlYUVsLmZvY3VzKCk7XG4gICAgcmV0dXJuIG1lc3NhZ2ViYXI7XG4gIH1cbiAgYmx1cigpIHtcbiAgICBjb25zdCBtZXNzYWdlYmFyID0gdGhpcztcbiAgICBtZXNzYWdlYmFyLiR0ZXh0YXJlYUVsLmJsdXIoKTtcbiAgICByZXR1cm4gbWVzc2FnZWJhcjtcbiAgfVxuICBjbGVhcigpIHtcbiAgICBjb25zdCBtZXNzYWdlYmFyID0gdGhpcztcbiAgICBtZXNzYWdlYmFyLiR0ZXh0YXJlYUVsLnZhbCgnJykudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgcmV0dXJuIG1lc3NhZ2ViYXI7XG4gIH1cbiAgZ2V0VmFsdWUoKSB7XG4gICAgY29uc3QgbWVzc2FnZWJhciA9IHRoaXM7XG4gICAgcmV0dXJuIG1lc3NhZ2ViYXIuJHRleHRhcmVhRWwudmFsKCkudHJpbSgpO1xuICB9XG4gIHNldFZhbHVlKHZhbHVlKSB7XG4gICAgY29uc3QgbWVzc2FnZWJhciA9IHRoaXM7XG4gICAgbWVzc2FnZWJhci4kdGV4dGFyZWFFbC52YWwodmFsdWUpLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgIHJldHVybiBtZXNzYWdlYmFyO1xuICB9XG4gIHNldFBsYWNlaG9sZGVyKHBsYWNlaG9sZGVyKSB7XG4gICAgY29uc3QgbWVzc2FnZWJhciA9IHRoaXM7XG4gICAgbWVzc2FnZWJhci4kdGV4dGFyZWFFbC5hdHRyKCdwbGFjZWhvbGRlcicsIHBsYWNlaG9sZGVyKTtcbiAgICByZXR1cm4gbWVzc2FnZWJhcjtcbiAgfVxuICByZXNpemUoKSB7XG4gICAgY29uc3QgbWVzc2FnZWJhciA9IHRoaXM7XG4gICAgY29uc3QgeyBwYXJhbXMsICRlbCwgdG9wLCAkcGFnZUVsLCAkcGFnZUNvbnRlbnRFbCwgJGFyZWFFbCwgJHRleHRhcmVhRWwsICRzaGVldEVsLCAkYXR0YWNobWVudHNFbCB9ID0gbWVzc2FnZWJhcjtcbiAgICBjb25zdCBlbEhlaWdodCA9ICRlbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgaWYgKHRvcCkge1xuICAgICAgY29uc3QgcmVxdWlyZWRQYWRkaW5nVG9wID0gZWxIZWlnaHQgKyBwYXJhbXMudG9wT2Zmc2V0O1xuICAgICAgY29uc3QgY3VycmVudFBhZGRpbmdUb3AgPSBwYXJzZUludCgkcGFnZUNvbnRlbnRFbC5jc3MoJ3BhZGRpbmctdG9wJyksIDEwKTtcbiAgICAgIGlmIChyZXF1aXJlZFBhZGRpbmdUb3AgIT09IGN1cnJlbnRQYWRkaW5nVG9wKSB7XG4gICAgICAgIGNvbnN0IG1heEhlaWdodCA9ICRwYWdlRWxbMF0ub2Zmc2V0SGVpZ2h0IC0gY3VycmVudFBhZGRpbmdUb3AgLSAkc2hlZXRFbC5vdXRlckhlaWdodCgpIC0gJGF0dGFjaG1lbnRzRWwub3V0ZXJIZWlnaHQoKSAtIHBhcnNlSW50KCRhcmVhRWwuY3NzKCdtYXJnaW4tdG9wJyksIDEwKSAtIHBhcnNlSW50KCRhcmVhRWwuY3NzKCdtYXJnaW4tYm90dG9tJyksIDEwKTtcbiAgICAgICAgJHRleHRhcmVhRWwuY3NzKCdtYXgtaGVpZ2h0JywgYCR7bWF4SGVpZ2h0fXB4YCk7XG4gICAgICAgICRwYWdlQ29udGVudEVsLmNzcygncGFkZGluZy10b3AnLCBgJHtyZXF1aXJlZFBhZGRpbmdUb3B9cHhgKTtcbiAgICAgICAgJGVsLnRyaWdnZXIoJ21lc3NhZ2ViYXI6cmVzaXplJyk7XG4gICAgICAgIG1lc3NhZ2ViYXIuZW1pdCgnbG9jYWw6OnJlc2l6ZSBtZXNzYWdlYmFyUmVzaXplJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRQYWRkaW5nQm90dG9tID0gcGFyc2VJbnQoJHBhZ2VDb250ZW50RWwuY3NzKCdwYWRkaW5nLWJvdHRvbScpLCAxMCk7XG4gICAgICBjb25zdCByZXF1aXJlZFBhZGRpbmdCb3R0b20gPSBlbEhlaWdodCArIHBhcmFtcy5ib3R0b21PZmZzZXQ7XG4gICAgICBpZiAocmVxdWlyZWRQYWRkaW5nQm90dG9tICE9PSBjdXJyZW50UGFkZGluZ0JvdHRvbSAmJiAkcGFnZUNvbnRlbnRFbC5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFBhZGRpbmdUb3AgPSBwYXJzZUludCgkcGFnZUNvbnRlbnRFbC5jc3MoJ3BhZGRpbmctdG9wJyksIDEwKTtcbiAgICAgICAgY29uc3QgcGFnZVNjcm9sbEhlaWdodCA9ICRwYWdlQ29udGVudEVsWzBdLnNjcm9sbEhlaWdodDtcbiAgICAgICAgY29uc3QgcGFnZU9mZnNldEhlaWdodCA9ICRwYWdlQ29udGVudEVsWzBdLm9mZnNldEhlaWdodDtcbiAgICAgICAgY29uc3QgcGFnZVNjcm9sbFRvcCA9ICRwYWdlQ29udGVudEVsWzBdLnNjcm9sbFRvcDtcbiAgICAgICAgY29uc3Qgc2Nyb2xsT25Cb3R0b20gPSAocGFnZVNjcm9sbFRvcCA9PT0gcGFnZVNjcm9sbEhlaWdodCAtIHBhZ2VPZmZzZXRIZWlnaHQpO1xuICAgICAgICBjb25zdCBtYXhIZWlnaHQgPSAkcGFnZUVsWzBdLm9mZnNldEhlaWdodCAtIGN1cnJlbnRQYWRkaW5nVG9wIC0gJHNoZWV0RWwub3V0ZXJIZWlnaHQoKSAtICRhdHRhY2htZW50c0VsLm91dGVySGVpZ2h0KCkgLSBwYXJzZUludCgkYXJlYUVsLmNzcygnbWFyZ2luLXRvcCcpLCAxMCkgLSBwYXJzZUludCgkYXJlYUVsLmNzcygnbWFyZ2luLWJvdHRvbScpLCAxMCk7XG4gICAgICAgICR0ZXh0YXJlYUVsLmNzcygnbWF4LWhlaWdodCcsIGAke21heEhlaWdodH1weGApO1xuICAgICAgICAkcGFnZUNvbnRlbnRFbC5jc3MoJ3BhZGRpbmctYm90dG9tJywgYCR7cmVxdWlyZWRQYWRkaW5nQm90dG9tfXB4YCk7XG4gICAgICAgIGlmIChzY3JvbGxPbkJvdHRvbSkge1xuICAgICAgICAgICRwYWdlQ29udGVudEVsLnNjcm9sbFRvcCgkcGFnZUNvbnRlbnRFbFswXS5zY3JvbGxIZWlnaHQgLSBwYWdlT2Zmc2V0SGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICAkZWwudHJpZ2dlcignbWVzc2FnZWJhcjpyZXNpemUnKTtcbiAgICAgICAgbWVzc2FnZWJhci5lbWl0KCdsb2NhbDo6cmVzaXplIG1lc3NhZ2ViYXJSZXNpemUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY2hlY2tFbXB0eVN0YXRlKCkge1xuICAgIGNvbnN0IG1lc3NhZ2ViYXIgPSB0aGlzO1xuICAgIGNvbnN0IHsgJGVsLCAkdGV4dGFyZWFFbCB9ID0gbWVzc2FnZWJhcjtcbiAgICBjb25zdCB2YWx1ZSA9ICR0ZXh0YXJlYUVsLnZhbCgpLnRyaW0oKTtcbiAgICBpZiAodmFsdWUgJiYgdmFsdWUubGVuZ3RoKSB7XG4gICAgICAkZWwuYWRkQ2xhc3MoJ21lc3NhZ2ViYXItd2l0aC12YWx1ZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkZWwucmVtb3ZlQ2xhc3MoJ21lc3NhZ2ViYXItd2l0aC12YWx1ZScpO1xuICAgIH1cbiAgfVxuICBhdHRhY2htZW50c0NyZWF0ZShpbm5lckhUTUwgPSAnJykge1xuICAgIGNvbnN0IG1lc3NhZ2ViYXIgPSB0aGlzO1xuICAgIGNvbnN0ICRhdHRhY2htZW50c0VsID0gJChgPGRpdiBjbGFzcz1cIm1lc3NhZ2ViYXItYXR0YWNobWVudHNcIj4ke2lubmVySFRNTH08L2Rpdj5gKTtcbiAgICAkYXR0YWNobWVudHNFbC5pbnNlcnRCZWZvcmUobWVzc2FnZWJhci4kdGV4dGFyZWFFbCk7XG4gICAgVXRpbHMuZXh0ZW5kKG1lc3NhZ2ViYXIsIHtcbiAgICAgICRhdHRhY2htZW50c0VsLFxuICAgICAgYXR0YWNobWVudHNFbDogJGF0dGFjaG1lbnRzRWxbMF0sXG4gICAgfSk7XG4gICAgcmV0dXJuIG1lc3NhZ2ViYXI7XG4gIH1cbiAgYXR0YWNobWVudHNTaG93KGlubmVySFRNTCA9ICcnKSB7XG4gICAgY29uc3QgbWVzc2FnZWJhciA9IHRoaXM7XG4gICAgaWYgKG1lc3NhZ2ViYXIuJGF0dGFjaG1lbnRzRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICBtZXNzYWdlYmFyLmF0dGFjaG1lbnRzQ3JlYXRlKGlubmVySFRNTCk7XG4gICAgfVxuICAgIG1lc3NhZ2ViYXIuJGVsLmFkZENsYXNzKCdtZXNzYWdlYmFyLWF0dGFjaG1lbnRzLXZpc2libGUnKTtcbiAgICBtZXNzYWdlYmFyLmF0dGFjaG1lbnRzVmlzaWJsZSA9IHRydWU7XG4gICAgbWVzc2FnZWJhci5yZXNpemUoKTtcbiAgICByZXR1cm4gbWVzc2FnZWJhcjtcbiAgfVxuICBhdHRhY2htZW50c0hpZGUoKSB7XG4gICAgY29uc3QgbWVzc2FnZWJhciA9IHRoaXM7XG4gICAgbWVzc2FnZWJhci4kZWwucmVtb3ZlQ2xhc3MoJ21lc3NhZ2ViYXItYXR0YWNobWVudHMtdmlzaWJsZScpO1xuICAgIG1lc3NhZ2ViYXIuYXR0YWNobWVudHNWaXNpYmxlID0gZmFsc2U7XG4gICAgbWVzc2FnZWJhci5yZXNpemUoKTtcbiAgICByZXR1cm4gbWVzc2FnZWJhcjtcbiAgfVxuICBhdHRhY2htZW50c1RvZ2dsZSgpIHtcbiAgICBjb25zdCBtZXNzYWdlYmFyID0gdGhpcztcbiAgICBpZiAobWVzc2FnZWJhci5hdHRhY2htZW50c1Zpc2libGUpIHtcbiAgICAgIG1lc3NhZ2ViYXIuYXR0YWNobWVudHNIaWRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1lc3NhZ2ViYXIuYXR0YWNobWVudHNTaG93KCk7XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlYmFyO1xuICB9XG4gIHJlbmRlckF0dGFjaG1lbnQoYXR0YWNobWVudCkge1xuICAgIGNvbnN0IG1lc3NhZ2ViYXIgPSB0aGlzO1xuICAgIGlmIChtZXNzYWdlYmFyLnBhcmFtcy5yZW5kZXJBdHRhY2htZW50KSB7XG4gICAgICByZXR1cm4gbWVzc2FnZWJhci5wYXJhbXMucmVuZGVyQXR0YWNobWVudChhdHRhY2htZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIGBcbiAgICAgIDxkaXYgY2xhc3M9XCJtZXNzYWdlYmFyLWF0dGFjaG1lbnRcIj5cbiAgICAgICAgPGltZyBzcmM9XCIke2F0dGFjaG1lbnR9XCI+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwibWVzc2FnZWJhci1hdHRhY2htZW50LWRlbGV0ZVwiPjwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cbiAgcmVuZGVyQXR0YWNobWVudHMoKSB7XG4gICAgY29uc3QgbWVzc2FnZWJhciA9IHRoaXM7XG4gICAgbGV0IGh0bWw7XG4gICAgaWYgKG1lc3NhZ2ViYXIucGFyYW1zLnJlbmRlckF0dGFjaG1lbnRzKSB7XG4gICAgICBodG1sID0gbWVzc2FnZWJhci5wYXJhbXMucmVuZGVyQXR0YWNobWVudHMobWVzc2FnZWJhci5hdHRhY2htZW50cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGh0bWwgPSBgJHttZXNzYWdlYmFyLmF0dGFjaG1lbnRzLm1hcChhdHRhY2htZW50ID0+IG1lc3NhZ2ViYXIucmVuZGVyQXR0YWNobWVudChhdHRhY2htZW50KSkuam9pbignJyl9YDtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2ViYXIuJGF0dGFjaG1lbnRzRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICBtZXNzYWdlYmFyLmF0dGFjaG1lbnRzQ3JlYXRlKGh0bWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtZXNzYWdlYmFyLiRhdHRhY2htZW50c0VsLmh0bWwoaHRtbCk7XG4gICAgfVxuICB9XG4gIHNoZWV0Q3JlYXRlKGlubmVySFRNTCA9ICcnKSB7XG4gICAgY29uc3QgbWVzc2FnZWJhciA9IHRoaXM7XG4gICAgY29uc3QgJHNoZWV0RWwgPSAkKGA8ZGl2IGNsYXNzPVwibWVzc2FnZWJhci1zaGVldFwiPiR7aW5uZXJIVE1MfTwvZGl2PmApO1xuICAgIG1lc3NhZ2ViYXIuYXBwZW5kKCRzaGVldEVsKTtcbiAgICBVdGlscy5leHRlbmQobWVzc2FnZWJhciwge1xuICAgICAgJHNoZWV0RWwsXG4gICAgICBzaGVldEVsOiAkc2hlZXRFbFswXSxcbiAgICB9KTtcbiAgICByZXR1cm4gbWVzc2FnZWJhcjtcbiAgfVxuICBzaGVldFNob3coaW5uZXJIVE1MID0gJycpIHtcbiAgICBjb25zdCBtZXNzYWdlYmFyID0gdGhpcztcbiAgICBpZiAobWVzc2FnZWJhci4kc2hlZXRFbC5sZW5ndGggPT09IDApIHtcbiAgICAgIG1lc3NhZ2ViYXIuc2hlZXRDcmVhdGUoaW5uZXJIVE1MKTtcbiAgICB9XG4gICAgbWVzc2FnZWJhci4kZWwuYWRkQ2xhc3MoJ21lc3NhZ2ViYXItc2hlZXQtdmlzaWJsZScpO1xuICAgIG1lc3NhZ2ViYXIuc2hlZXRWaXNpYmxlID0gdHJ1ZTtcbiAgICBtZXNzYWdlYmFyLnJlc2l6ZSgpO1xuICAgIHJldHVybiBtZXNzYWdlYmFyO1xuICB9XG4gIHNoZWV0SGlkZSgpIHtcbiAgICBjb25zdCBtZXNzYWdlYmFyID0gdGhpcztcbiAgICBtZXNzYWdlYmFyLiRlbC5yZW1vdmVDbGFzcygnbWVzc2FnZWJhci1zaGVldC12aXNpYmxlJyk7XG4gICAgbWVzc2FnZWJhci5zaGVldFZpc2libGUgPSBmYWxzZTtcbiAgICBtZXNzYWdlYmFyLnJlc2l6ZSgpO1xuICAgIHJldHVybiBtZXNzYWdlYmFyO1xuICB9XG4gIHNoZWV0VG9nZ2xlKCkge1xuICAgIGNvbnN0IG1lc3NhZ2ViYXIgPSB0aGlzO1xuICAgIGlmIChtZXNzYWdlYmFyLnNoZWV0VmlzaWJsZSkge1xuICAgICAgbWVzc2FnZWJhci5zaGVldEhpZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWVzc2FnZWJhci5zaGVldFNob3coKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2ViYXI7XG4gIH1cbiAgaW5pdCgpIHtcbiAgICBjb25zdCBtZXNzYWdlYmFyID0gdGhpcztcbiAgICBtZXNzYWdlYmFyLmF0dGFjaEV2ZW50cygpO1xuICAgIG1lc3NhZ2ViYXIuY2hlY2tFbXB0eVN0YXRlKCk7XG4gICAgcmV0dXJuIG1lc3NhZ2ViYXI7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICBjb25zdCBtZXNzYWdlYmFyID0gdGhpcztcbiAgICBtZXNzYWdlYmFyLmVtaXQoJ2xvY2FsOjpiZWZvcmVEZXN0cm95IG1lc3NhZ2ViYXJCZWZvcmVEZXN0cm95JywgbWVzc2FnZWJhcik7XG4gICAgbWVzc2FnZWJhci4kZWwudHJpZ2dlcignbWVzc2FnZWJhcjpiZWZvcmVkZXN0cm95JywgbWVzc2FnZWJhcik7XG4gICAgbWVzc2FnZWJhci5kZXRhY2hFdmVudHMoKTtcbiAgICBtZXNzYWdlYmFyLiRlbFswXS5mN01lc3NhZ2ViYXIgPSBudWxsO1xuICAgIGRlbGV0ZSBtZXNzYWdlYmFyLiRlbFswXS5mN01lc3NhZ2ViYXI7XG4gICAgVXRpbHMuZGVsZXRlUHJvcHMobWVzc2FnZWJhcik7XG4gIH1cbn1cblxudmFyIG1lc3NhZ2ViYXIgPSB7XG4gIG5hbWU6ICdtZXNzYWdlYmFyJyxcbiAgc3RhdGljOiB7XG4gICAgTWVzc2FnZWJhcixcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgYXBwLm1lc3NhZ2ViYXIgPSBDb25zdHJ1Y3Rvck1ldGhvZHMoe1xuICAgICAgZGVmYXVsdFNlbGVjdG9yOiAnLm1lc3NhZ2ViYXInLFxuICAgICAgY29uc3RydWN0b3I6IE1lc3NhZ2ViYXIsXG4gICAgICBhcHAsXG4gICAgICBkb21Qcm9wOiAnZjdNZXNzYWdlYmFyJyxcbiAgICAgIGFkZE1ldGhvZHM6ICdjbGVhciBnZXRWYWx1ZSBzZXRWYWx1ZSBzZXRQbGFjZWhvbGRlciByZXNpemUgZm9jdXMgYmx1ciBhdHRhY2htZW50c0NyZWF0ZSBhdHRhY2htZW50c1Nob3cgYXR0YWNobWVudHNIaWRlIGF0dGFjaG1lbnRzVG9nZ2xlIHJlbmRlckF0dGFjaG1lbnRzIHNoZWV0Q3JlYXRlIHNoZWV0U2hvdyBzaGVldEhpZGUgc2hlZXRUb2dnbGUnLnNwbGl0KCcgJyksXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgdGFiQmVmb3JlUmVtb3ZlKHRhYkVsKSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgJCh0YWJFbCkuZmluZCgnLm1lc3NhZ2ViYXItaW5pdCcpLmVhY2goKGluZGV4LCBtZXNzYWdlYmFyRWwpID0+IHtcbiAgICAgICAgYXBwLm1lc3NhZ2ViYXIuZGVzdHJveShtZXNzYWdlYmFyRWwpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICB0YWJNb3VudGVkKHRhYkVsKSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgJCh0YWJFbCkuZmluZCgnLm1lc3NhZ2ViYXItaW5pdCcpLmVhY2goKGluZGV4LCBtZXNzYWdlYmFyRWwpID0+IHtcbiAgICAgICAgYXBwLm1lc3NhZ2ViYXIuY3JlYXRlKFV0aWxzLmV4dGVuZCh7IGVsOiBtZXNzYWdlYmFyRWwgfSwgJChtZXNzYWdlYmFyRWwpLmRhdGFzZXQoKSkpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBwYWdlQmVmb3JlUmVtb3ZlKHBhZ2UpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBwYWdlLiRlbC5maW5kKCcubWVzc2FnZWJhci1pbml0JykuZWFjaCgoaW5kZXgsIG1lc3NhZ2ViYXJFbCkgPT4ge1xuICAgICAgICBhcHAubWVzc2FnZWJhci5kZXN0cm95KG1lc3NhZ2ViYXJFbCk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHBhZ2VJbml0KHBhZ2UpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBwYWdlLiRlbC5maW5kKCcubWVzc2FnZWJhci1pbml0JykuZWFjaCgoaW5kZXgsIG1lc3NhZ2ViYXJFbCkgPT4ge1xuICAgICAgICBhcHAubWVzc2FnZWJhci5jcmVhdGUoVXRpbHMuZXh0ZW5kKHsgZWw6IG1lc3NhZ2ViYXJFbCB9LCAkKG1lc3NhZ2ViYXJFbCkuZGF0YXNldCgpKSk7XG4gICAgICB9KTtcbiAgICB9LFxuICB9LFxuICBjbGlja3M6IHtcblxuICB9LFxufTtcblxuZnVuY3Rpb24gU3VwcG9ydCQzKCkge1xuICByZXR1cm4ge1xuICAgIHRvdWNoOiAod2luZG93Lk1vZGVybml6ciAmJiB3aW5kb3cuTW9kZXJuaXpyLnRvdWNoID09PSB0cnVlKSB8fCAoZnVuY3Rpb24gY2hlY2tUb3VjaCgpIHtcbiAgICAgIHJldHVybiAhISgoJ29udG91Y2hzdGFydCcgaW4gd2luZG93KSB8fCAod2luZG93LkRvY3VtZW50VG91Y2ggJiYgZG9jdW1lbnQgaW5zdGFuY2VvZiB3aW5kb3cuRG9jdW1lbnRUb3VjaCkpO1xuICAgIH0oKSksXG5cbiAgICB0cmFuc2Zvcm1zM2Q6ICh3aW5kb3cuTW9kZXJuaXpyICYmIHdpbmRvdy5Nb2Rlcm5penIuY3NzdHJhbnNmb3JtczNkID09PSB0cnVlKSB8fCAoZnVuY3Rpb24gY2hlY2tUcmFuc2Zvcm1zM2QoKSB7XG4gICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKS5zdHlsZTtcbiAgICAgIHJldHVybiAoJ3dlYmtpdFBlcnNwZWN0aXZlJyBpbiBkaXYgfHwgJ01velBlcnNwZWN0aXZlJyBpbiBkaXYgfHwgJ09QZXJzcGVjdGl2ZScgaW4gZGl2IHx8ICdNc1BlcnNwZWN0aXZlJyBpbiBkaXYgfHwgJ3BlcnNwZWN0aXZlJyBpbiBkaXYpO1xuICAgIH0oKSksXG5cbiAgICBmbGV4Ym94OiAoZnVuY3Rpb24gY2hlY2tGbGV4Ym94KCkge1xuICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gICAgICBjb25zdCBzdHlsZXMgPSAoJ2FsaWduSXRlbXMgd2Via2l0QWxpZ25JdGVtcyB3ZWJraXRCb3hBbGlnbiBtc0ZsZXhBbGlnbiBtb3pCb3hBbGlnbiB3ZWJraXRGbGV4RGlyZWN0aW9uIG1zRmxleERpcmVjdGlvbiBtb3pCb3hEaXJlY3Rpb24gbW96Qm94T3JpZW50IHdlYmtpdEJveERpcmVjdGlvbiB3ZWJraXRCb3hPcmllbnQnKS5zcGxpdCgnICcpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHN0eWxlc1tpXSBpbiBkaXYpIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0oKSksXG5cbiAgICBvYnNlcnZlcjogKGZ1bmN0aW9uIGNoZWNrT2JzZXJ2ZXIoKSB7XG4gICAgICByZXR1cm4gKCdNdXRhdGlvbk9ic2VydmVyJyBpbiB3aW5kb3cgfHwgJ1dlYmtpdE11dGF0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdyk7XG4gICAgfSgpKSxcblxuICAgIHBhc3NpdmVMaXN0ZW5lcjogKGZ1bmN0aW9uIGNoZWNrUGFzc2l2ZUxpc3RlbmVyKCkge1xuICAgICAgbGV0IHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3Bhc3NpdmUnLCB7XG4gICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3RQYXNzaXZlTGlzdGVuZXInLCBudWxsLCBvcHRzKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gTm8gc3VwcG9ydFxuICAgICAgfVxuICAgICAgcmV0dXJuIHN1cHBvcnRzUGFzc2l2ZTtcbiAgICB9KCkpLFxuXG4gICAgZ2VzdHVyZXM6IChmdW5jdGlvbiBjaGVja0dlc3R1cmVzKCkge1xuICAgICAgcmV0dXJuICdvbmdlc3R1cmVzdGFydCcgaW4gd2luZG93O1xuICAgIH0oKSksXG4gIH07XG59XG52YXIgU3VwcG9ydCQ0ID0gU3VwcG9ydCQzKCk7XG5cbmNsYXNzIFN3aXBlckNsYXNzIHtcbiAgY29uc3RydWN0b3IocGFyYW1zID0ge30pIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBzZWxmLnBhcmFtcyA9IHBhcmFtcztcblxuICAgIC8vIEV2ZW50c1xuICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzID0ge307XG5cbiAgICBpZiAoc2VsZi5wYXJhbXMgJiYgc2VsZi5wYXJhbXMub24pIHtcbiAgICAgIE9iamVjdC5rZXlzKHNlbGYucGFyYW1zLm9uKS5mb3JFYWNoKChldmVudE5hbWUpID0+IHtcbiAgICAgICAgc2VsZi5vbihldmVudE5hbWUsIHNlbGYucGFyYW1zLm9uW2V2ZW50TmFtZV0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIG9uKGV2ZW50cywgaGFuZGxlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaCgoZXZlbnQpID0+IHtcbiAgICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5wdXNoKGhhbmRsZXIpO1xuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9XG4gIG9uY2UoZXZlbnRzLCBoYW5kbGVyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjtcbiAgICBmdW5jdGlvbiBvbmNlSGFuZGxlciguLi5hcmdzKSB7XG4gICAgICBoYW5kbGVyLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgc2VsZi5vZmYoZXZlbnRzLCBvbmNlSGFuZGxlcik7XG4gICAgfVxuICAgIHJldHVybiBzZWxmLm9uKGV2ZW50cywgb25jZUhhbmRsZXIpO1xuICB9XG4gIG9mZihldmVudHMsIGhhbmRsZXIpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKChldmVudCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKChldmVudEhhbmRsZXIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgaWYgKGV2ZW50SGFuZGxlciA9PT0gaGFuZGxlcikge1xuICAgICAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfVxuICBlbWl0KC4uLmFyZ3MpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBsZXQgZXZlbnRzO1xuICAgIGxldCBkYXRhO1xuICAgIGxldCBjb250ZXh0O1xuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgfHwgQXJyYXkuaXNBcnJheShhcmdzWzBdKSkge1xuICAgICAgZXZlbnRzID0gYXJnc1swXTtcbiAgICAgIGRhdGEgPSBhcmdzLnNsaWNlKDEsIGFyZ3MubGVuZ3RoKTtcbiAgICAgIGNvbnRleHQgPSBzZWxmO1xuICAgIH0gZWxzZSB7XG4gICAgICBldmVudHMgPSBhcmdzWzBdLmV2ZW50cztcbiAgICAgIGRhdGEgPSBhcmdzWzBdLmRhdGE7XG4gICAgICBjb250ZXh0ID0gYXJnc1swXS5jb250ZXh0IHx8IHNlbGY7XG4gICAgfVxuICAgIGNvbnN0IGV2ZW50c0FycmF5ID0gQXJyYXkuaXNBcnJheShldmVudHMpID8gZXZlbnRzIDogZXZlbnRzLnNwbGl0KCcgJyk7XG4gICAgZXZlbnRzQXJyYXkuZm9yRWFjaCgoZXZlbnQpID0+IHtcbiAgICAgIGlmIChzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLmZvckVhY2goKGV2ZW50SGFuZGxlcikgPT4ge1xuICAgICAgICAgIGV2ZW50SGFuZGxlci5hcHBseShjb250ZXh0LCBkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH1cbiAgdXNlTW9kdWxlc1BhcmFtcyhpbnN0YW5jZVBhcmFtcykge1xuICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcztcbiAgICBpZiAoIWluc3RhbmNlLm1vZHVsZXMpIHJldHVybjtcbiAgICBPYmplY3Qua2V5cyhpbnN0YW5jZS5tb2R1bGVzKS5mb3JFYWNoKChtb2R1bGVOYW1lKSA9PiB7XG4gICAgICBjb25zdCBtb2R1bGUgPSBpbnN0YW5jZS5tb2R1bGVzW21vZHVsZU5hbWVdO1xuICAgICAgLy8gRXh0ZW5kIHBhcmFtc1xuICAgICAgaWYgKG1vZHVsZS5wYXJhbXMpIHtcbiAgICAgICAgVXRpbHMuZXh0ZW5kKGluc3RhbmNlUGFyYW1zLCBtb2R1bGUucGFyYW1zKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICB1c2VNb2R1bGVzKG1vZHVsZXNQYXJhbXMgPSB7fSkge1xuICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcztcbiAgICBpZiAoIWluc3RhbmNlLm1vZHVsZXMpIHJldHVybjtcbiAgICBPYmplY3Qua2V5cyhpbnN0YW5jZS5tb2R1bGVzKS5mb3JFYWNoKChtb2R1bGVOYW1lKSA9PiB7XG4gICAgICBjb25zdCBtb2R1bGUgPSBpbnN0YW5jZS5tb2R1bGVzW21vZHVsZU5hbWVdO1xuICAgICAgY29uc3QgbW9kdWxlUGFyYW1zID0gbW9kdWxlc1BhcmFtc1ttb2R1bGVOYW1lXSB8fCB7fTtcbiAgICAgIC8vIEV4dGVuZCBpbnN0YW5jZSBtZXRob2RzIGFuZCBwcm9wc1xuICAgICAgaWYgKG1vZHVsZS5pbnN0YW5jZSkge1xuICAgICAgICBPYmplY3Qua2V5cyhtb2R1bGUuaW5zdGFuY2UpLmZvckVhY2goKG1vZHVsZVByb3BOYW1lKSA9PiB7XG4gICAgICAgICAgY29uc3QgbW9kdWxlUHJvcCA9IG1vZHVsZS5pbnN0YW5jZVttb2R1bGVQcm9wTmFtZV07XG4gICAgICAgICAgaWYgKHR5cGVvZiBtb2R1bGVQcm9wID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBpbnN0YW5jZVttb2R1bGVQcm9wTmFtZV0gPSBtb2R1bGVQcm9wLmJpbmQoaW5zdGFuY2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnN0YW5jZVttb2R1bGVQcm9wTmFtZV0gPSBtb2R1bGVQcm9wO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvLyBBZGQgZXZlbnQgbGlzdGVuZXJzXG4gICAgICBpZiAobW9kdWxlLm9uICYmIGluc3RhbmNlLm9uKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKG1vZHVsZS5vbikuZm9yRWFjaCgobW9kdWxlRXZlbnROYW1lKSA9PiB7XG4gICAgICAgICAgaW5zdGFuY2Uub24obW9kdWxlRXZlbnROYW1lLCBtb2R1bGUub25bbW9kdWxlRXZlbnROYW1lXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBNb2R1bGUgY3JlYXRlIGNhbGxiYWNrXG4gICAgICBpZiAobW9kdWxlLmNyZWF0ZSkge1xuICAgICAgICBtb2R1bGUuY3JlYXRlLmJpbmQoaW5zdGFuY2UpKG1vZHVsZVBhcmFtcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgc3RhdGljIGluc3RhbGxNb2R1bGUobW9kdWxlLCAuLi5wYXJhbXMpIHtcbiAgICBjb25zdCBDbGFzcyA9IHRoaXM7XG4gICAgaWYgKCFDbGFzcy5wcm90b3R5cGUubW9kdWxlcykgQ2xhc3MucHJvdG90eXBlLm1vZHVsZXMgPSB7fTtcbiAgICBjb25zdCBuYW1lID0gbW9kdWxlLm5hbWUgfHwgKGAke09iamVjdC5rZXlzKENsYXNzLnByb3RvdHlwZS5tb2R1bGVzKS5sZW5ndGh9XyR7VXRpbHMubm93KCl9YCk7XG4gICAgQ2xhc3MucHJvdG90eXBlLm1vZHVsZXNbbmFtZV0gPSBtb2R1bGU7XG4gICAgLy8gUHJvdG90eXBlXG4gICAgaWYgKG1vZHVsZS5wcm90bykge1xuICAgICAgT2JqZWN0LmtleXMobW9kdWxlLnByb3RvKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgQ2xhc3MucHJvdG90eXBlW2tleV0gPSBtb2R1bGUucHJvdG9ba2V5XTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBDbGFzc1xuICAgIGlmIChtb2R1bGUuc3RhdGljKSB7XG4gICAgICBPYmplY3Qua2V5cyhtb2R1bGUuc3RhdGljKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgQ2xhc3Nba2V5XSA9IG1vZHVsZS5zdGF0aWNba2V5XTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBDYWxsYmFja1xuICAgIGlmIChtb2R1bGUuaW5zdGFsbCkge1xuICAgICAgbW9kdWxlLmluc3RhbGwuYXBwbHkoQ2xhc3MsIHBhcmFtcyk7XG4gICAgfVxuICAgIHJldHVybiBDbGFzcztcbiAgfVxuICBzdGF0aWMgdXNlKG1vZHVsZSwgLi4ucGFyYW1zKSB7XG4gICAgY29uc3QgQ2xhc3MgPSB0aGlzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KG1vZHVsZSkpIHtcbiAgICAgIG1vZHVsZS5mb3JFYWNoKG0gPT4gQ2xhc3MuaW5zdGFsbE1vZHVsZShtKSk7XG4gICAgfVxuICAgIHJldHVybiBDbGFzcy5pbnN0YWxsTW9kdWxlKG1vZHVsZSwgLi4ucGFyYW1zKTtcbiAgfVxufVxuXG52YXIgdG91Y2hFdmVudHNEYXRhID0ge1xuICBpc1RvdWNoZWQ6IHVuZGVmaW5lZCxcbiAgaXNNb3ZlZDogdW5kZWZpbmVkLFxuICBhbGxvd1RvdWNoQ2FsbGJhY2tzOiB1bmRlZmluZWQsXG4gIHRvdWNoU3RhcnRUaW1lOiB1bmRlZmluZWQsXG4gIGlzU2Nyb2xsaW5nOiB1bmRlZmluZWQsXG4gIGN1cnJlbnRUcmFuc2xhdGU6IHVuZGVmaW5lZCxcbiAgc3RhcnRUcmFuc2xhdGU6IHVuZGVmaW5lZCxcbiAgYWxsb3dUaHJlc2hvbGRNb3ZlOiB1bmRlZmluZWQsXG4gIC8vIEZvcm0gZWxlbWVudHMgdG8gbWF0Y2hcbiAgZm9ybUVsZW1lbnRzOiAnaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIGJ1dHRvbiwgdmlkZW8nLFxuICAvLyBMYXN0IGNsaWNrIHRpbWVcbiAgbGFzdENsaWNrVGltZTogVXRpbHMubm93KCksXG4gIGNsaWNrVGltZW91dDogdW5kZWZpbmVkLFxuICAvLyBWZWxvY2l0aWVzXG4gIHZlbG9jaXRpZXM6IFtdLFxuICBhbGxvd01vbWVudHVtQm91bmNlOiB1bmRlZmluZWQsXG4gIGlzVG91Y2hFdmVudDogdW5kZWZpbmVkLFxuICBzdGFydE1vdmluZzogdW5kZWZpbmVkLFxufTtcblxudmFyIHVwZGF0ZVNpemUgPSBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGxldCB3aWR0aDtcbiAgbGV0IGhlaWdodDtcbiAgY29uc3QgJGVsID0gc3dpcGVyLiRlbDtcbiAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zLndpZHRoICE9PSAndW5kZWZpbmVkJykge1xuICAgIHdpZHRoID0gc3dpcGVyLnBhcmFtcy53aWR0aDtcbiAgfSBlbHNlIHtcbiAgICB3aWR0aCA9ICRlbFswXS5jbGllbnRXaWR0aDtcbiAgfVxuICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMuaGVpZ2h0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGhlaWdodCA9IHN3aXBlci5wYXJhbXMuaGVpZ2h0O1xuICB9IGVsc2Uge1xuICAgIGhlaWdodCA9ICRlbFswXS5jbGllbnRIZWlnaHQ7XG4gIH1cbiAgaWYgKCh3aWR0aCA9PT0gMCAmJiBzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHx8IChoZWlnaHQgPT09IDAgJiYgc3dpcGVyLmlzVmVydGljYWwoKSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBTdWJ0cmFjdCBwYWRkaW5nc1xuICB3aWR0aCA9IHdpZHRoIC0gcGFyc2VJbnQoJGVsLmNzcygncGFkZGluZy1sZWZ0JyksIDEwKSAtIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctcmlnaHQnKSwgMTApO1xuICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludCgkZWwuY3NzKCdwYWRkaW5nLXRvcCcpLCAxMCkgLSBwYXJzZUludCgkZWwuY3NzKCdwYWRkaW5nLWJvdHRvbScpLCAxMCk7XG5cbiAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBzaXplOiBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB3aWR0aCA6IGhlaWdodCxcbiAgfSk7XG59O1xuXG52YXIgdXBkYXRlU2xpZGVzID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuXG4gIGNvbnN0IHsgJHdyYXBwZXJFbCwgc2l6ZTogc3dpcGVyU2l6ZSwgcnRsLCB3cm9uZ1JUTCB9ID0gc3dpcGVyO1xuICBjb25zdCBzbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9YCk7XG4gIGxldCBzbmFwR3JpZCA9IFtdO1xuICBjb25zdCBzbGlkZXNHcmlkID0gW107XG4gIGNvbnN0IHNsaWRlc1NpemVzR3JpZCA9IFtdO1xuXG4gIGxldCBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlO1xuICBpZiAodHlwZW9mIG9mZnNldEJlZm9yZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9mZnNldEJlZm9yZSA9IHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUuY2FsbChzd2lwZXIpO1xuICB9XG5cbiAgbGV0IG9mZnNldEFmdGVyID0gcGFyYW1zLnNsaWRlc09mZnNldEFmdGVyO1xuICBpZiAodHlwZW9mIG9mZnNldEFmdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb2Zmc2V0QWZ0ZXIgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXIuY2FsbChzd2lwZXIpO1xuICB9XG5cbiAgY29uc3QgcHJldmlvdXNTbGlkZXNMZW5ndGggPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgY29uc3QgcHJldmlvdXNTbmFwR3JpZExlbmd0aCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gIGNvbnN0IHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG5cbiAgbGV0IHNwYWNlQmV0d2VlbiA9IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gIGxldCBzbGlkZVBvc2l0aW9uID0gLW9mZnNldEJlZm9yZTtcbiAgbGV0IHByZXZTbGlkZVNpemUgPSAwO1xuICBsZXQgaW5kZXggPSAwO1xuICBpZiAodHlwZW9mIHN3aXBlclNpemUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJyAmJiBzcGFjZUJldHdlZW4uaW5kZXhPZignJScpID49IDApIHtcbiAgICBzcGFjZUJldHdlZW4gPSAocGFyc2VGbG9hdChzcGFjZUJldHdlZW4ucmVwbGFjZSgnJScsICcnKSkgLyAxMDApICogc3dpcGVyU2l6ZTtcbiAgfVxuXG4gIHN3aXBlci52aXJ0dWFsU2l6ZSA9IC1zcGFjZUJldHdlZW47XG5cbiAgLy8gcmVzZXQgbWFyZ2luc1xuICBpZiAocnRsKSBzbGlkZXMuY3NzKHsgbWFyZ2luTGVmdDogJycsIG1hcmdpblRvcDogJycgfSk7XG4gIGVsc2Ugc2xpZGVzLmNzcyh7IG1hcmdpblJpZ2h0OiAnJywgbWFyZ2luQm90dG9tOiAnJyB9KTtcblxuICBsZXQgc2xpZGVzTnVtYmVyRXZlblRvUm93cztcbiAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgaWYgKE1hdGguZmxvb3Ioc2xpZGVzLmxlbmd0aCAvIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pID09PSBzbGlkZXMubGVuZ3RoIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pIHtcbiAgICAgIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgPSBzbGlkZXMubGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzID0gTWF0aC5jZWlsKHNsaWRlcy5sZW5ndGggLyBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSAqIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW47XG4gICAgfVxuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW5GaWxsID09PSAncm93Jykge1xuICAgICAgc2xpZGVzTnVtYmVyRXZlblRvUm93cyA9IE1hdGgubWF4KHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MsIHBhcmFtcy5zbGlkZXNQZXJWaWV3ICogcGFyYW1zLnNsaWRlc1BlckNvbHVtbik7XG4gICAgfVxuICB9XG5cbiAgLy8gQ2FsYyBzbGlkZXNcbiAgbGV0IHNsaWRlU2l6ZTtcbiAgY29uc3Qgc2xpZGVzUGVyQ29sdW1uID0gcGFyYW1zLnNsaWRlc1BlckNvbHVtbjtcbiAgY29uc3Qgc2xpZGVzUGVyUm93ID0gc2xpZGVzTnVtYmVyRXZlblRvUm93cyAvIHNsaWRlc1BlckNvbHVtbjtcbiAgY29uc3QgbnVtRnVsbENvbHVtbnMgPSBzbGlkZXNQZXJSb3cgLSAoKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gKiBzbGlkZXNQZXJSb3cpIC0gc2xpZGVzLmxlbmd0aCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgc2xpZGVTaXplID0gMDtcbiAgICBjb25zdCBzbGlkZSA9IHNsaWRlcy5lcShpKTtcbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEpIHtcbiAgICAgIC8vIFNldCBzbGlkZXMgb3JkZXJcbiAgICAgIGxldCBuZXdTbGlkZU9yZGVySW5kZXg7XG4gICAgICBsZXQgY29sdW1uO1xuICAgICAgbGV0IHJvdztcbiAgICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyQ29sdW1uRmlsbCA9PT0gJ2NvbHVtbicpIHtcbiAgICAgICAgY29sdW1uID0gTWF0aC5mbG9vcihpIC8gc2xpZGVzUGVyQ29sdW1uKTtcbiAgICAgICAgcm93ID0gaSAtIChjb2x1bW4gKiBzbGlkZXNQZXJDb2x1bW4pO1xuICAgICAgICBpZiAoY29sdW1uID4gbnVtRnVsbENvbHVtbnMgfHwgKGNvbHVtbiA9PT0gbnVtRnVsbENvbHVtbnMgJiYgcm93ID09PSBzbGlkZXNQZXJDb2x1bW4gLSAxKSkge1xuICAgICAgICAgIHJvdyArPSAxO1xuICAgICAgICAgIGlmIChyb3cgPj0gc2xpZGVzUGVyQ29sdW1uKSB7XG4gICAgICAgICAgICByb3cgPSAwO1xuICAgICAgICAgICAgY29sdW1uICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5ld1NsaWRlT3JkZXJJbmRleCA9IGNvbHVtbiArICgocm93ICogc2xpZGVzTnVtYmVyRXZlblRvUm93cykgLyBzbGlkZXNQZXJDb2x1bW4pO1xuICAgICAgICBzbGlkZVxuICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgJy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXAnOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgICAnLW1vei1ib3gtb3JkaW5hbC1ncm91cCc6IG5ld1NsaWRlT3JkZXJJbmRleCxcbiAgICAgICAgICAgICctbXMtZmxleC1vcmRlcic6IG5ld1NsaWRlT3JkZXJJbmRleCxcbiAgICAgICAgICAgICctd2Via2l0LW9yZGVyJzogbmV3U2xpZGVPcmRlckluZGV4LFxuICAgICAgICAgICAgb3JkZXI6IG5ld1NsaWRlT3JkZXJJbmRleCxcbiAgICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvdyA9IE1hdGguZmxvb3IoaSAvIHNsaWRlc1BlclJvdyk7XG4gICAgICAgIGNvbHVtbiA9IGkgLSAocm93ICogc2xpZGVzUGVyUm93KTtcbiAgICAgIH1cbiAgICAgIHNsaWRlXG4gICAgICAgIC5jc3MoXG4gICAgICAgICAgYG1hcmdpbi0ke3N3aXBlci5pc0hvcml6b250YWwoKSA/ICd0b3AnIDogJ2xlZnQnfWAsXG4gICAgICAgICAgKHJvdyAhPT0gMCAmJiBwYXJhbXMuc3BhY2VCZXR3ZWVuKSAmJiAoYCR7cGFyYW1zLnNwYWNlQmV0d2Vlbn1weGApXG4gICAgICAgIClcbiAgICAgICAgLmF0dHIoJ2RhdGEtc3dpcGVyLWNvbHVtbicsIGNvbHVtbilcbiAgICAgICAgLmF0dHIoJ2RhdGEtc3dpcGVyLXJvdycsIHJvdyk7XG4gICAgfVxuICAgIGlmIChzbGlkZS5jc3MoJ2Rpc3BsYXknKSA9PT0gJ25vbmUnKSBjb250aW51ZTtcbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgICAgc2xpZGVTaXplID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc2xpZGUub3V0ZXJXaWR0aCh0cnVlKSA6IHNsaWRlLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlU2l6ZSA9IE1hdGguZmxvb3Ioc2xpZGVTaXplKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVTaXplID0gKHN3aXBlclNpemUgLSAoKHBhcmFtcy5zbGlkZXNQZXJWaWV3IC0gMSkgKiBzcGFjZUJldHdlZW4pKSAvIHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlU2l6ZSA9IE1hdGguZmxvb3Ioc2xpZGVTaXplKTtcblxuICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICBzbGlkZXNbaV0uc3R5bGUud2lkdGggPSBgJHtzbGlkZVNpemV9cHhgO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGVzW2ldLnN0eWxlLmhlaWdodCA9IGAke3NsaWRlU2l6ZX1weGA7XG4gICAgICB9XG4gICAgfVxuICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemUgPSBzbGlkZVNpemU7XG4gICAgc2xpZGVzU2l6ZXNHcmlkLnB1c2goc2xpZGVTaXplKTtcblxuXG4gICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gKyAoc2xpZGVTaXplIC8gMikgKyAocHJldlNsaWRlU2l6ZSAvIDIpICsgc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKHByZXZTbGlkZVNpemUgPT09IDAgJiYgaSAhPT0gMCkgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSAoc3dpcGVyU2l6ZSAvIDIpIC0gc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKGkgPT09IDApIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gKHN3aXBlclNpemUgLyAyKSAtIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChNYXRoLmFicyhzbGlkZVBvc2l0aW9uKSA8IDEgLyAxMDAwKSBzbGlkZVBvc2l0aW9uID0gMDtcbiAgICAgIGlmICgoaW5kZXgpICUgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAwKSBzbmFwR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoKGluZGV4KSAlIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuO1xuICAgIH1cblxuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSArPSBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG5cbiAgICBwcmV2U2xpZGVTaXplID0gc2xpZGVTaXplO1xuXG4gICAgaW5kZXggKz0gMTtcbiAgfVxuICBzd2lwZXIudmlydHVhbFNpemUgPSBNYXRoLm1heChzd2lwZXIudmlydHVhbFNpemUsIHN3aXBlclNpemUpICsgb2Zmc2V0QWZ0ZXI7XG4gIGxldCBuZXdTbGlkZXNHcmlkO1xuXG4gIGlmIChcbiAgICBydGwgJiYgd3JvbmdSVEwgJiYgKHBhcmFtcy5lZmZlY3QgPT09ICdzbGlkZScgfHwgcGFyYW1zLmVmZmVjdCA9PT0gJ2NvdmVyZmxvdycpKSB7XG4gICAgJHdyYXBwZXJFbC5jc3MoeyB3aWR0aDogYCR7c3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbn1weGAgfSk7XG4gIH1cbiAgaWYgKCFzd2lwZXIuc3VwcG9ydC5mbGV4Ym94IHx8IHBhcmFtcy5zZXRXcmFwcGVyU2l6ZSkge1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpICR3cmFwcGVyRWwuY3NzKHsgd2lkdGg6IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW59cHhgIH0pO1xuICAgIGVsc2UgJHdyYXBwZXJFbC5jc3MoeyBoZWlnaHQ6IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW59cHhgIH0pO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgc3dpcGVyLnZpcnR1YWxTaXplID0gKHNsaWRlU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4pICogc2xpZGVzTnVtYmVyRXZlblRvUm93cztcbiAgICBzd2lwZXIudmlydHVhbFNpemUgPSBNYXRoLmNlaWwoc3dpcGVyLnZpcnR1YWxTaXplIC8gcGFyYW1zLnNsaWRlc1BlckNvbHVtbikgLSBwYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpICR3cmFwcGVyRWwuY3NzKHsgd2lkdGg6IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW59cHhgIH0pO1xuICAgIGVsc2UgJHdyYXBwZXJFbC5jc3MoeyBoZWlnaHQ6IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW59cHhgIH0pO1xuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIG5ld1NsaWRlc0dyaWQgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc25hcEdyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNuYXBHcmlkW2ldIDwgc3dpcGVyLnZpcnR1YWxTaXplICsgc25hcEdyaWRbMF0pIG5ld1NsaWRlc0dyaWQucHVzaChzbmFwR3JpZFtpXSk7XG4gICAgICB9XG4gICAgICBzbmFwR3JpZCA9IG5ld1NsaWRlc0dyaWQ7XG4gICAgfVxuICB9XG5cbiAgLy8gUmVtb3ZlIGxhc3QgZ3JpZCBlbGVtZW50cyBkZXBlbmRpbmcgb24gd2lkdGhcbiAgaWYgKCFwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICBuZXdTbGlkZXNHcmlkID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbmFwR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHNuYXBHcmlkW2ldIDw9IHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIHtcbiAgICAgICAgbmV3U2xpZGVzR3JpZC5wdXNoKHNuYXBHcmlkW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc25hcEdyaWQgPSBuZXdTbGlkZXNHcmlkO1xuICAgIGlmIChNYXRoLmZsb29yKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIC0gTWF0aC5mbG9vcihzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSkgPiAxKSB7XG4gICAgICBzbmFwR3JpZC5wdXNoKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpO1xuICAgIH1cbiAgfVxuICBpZiAoc25hcEdyaWQubGVuZ3RoID09PSAwKSBzbmFwR3JpZCA9IFswXTtcblxuICBpZiAocGFyYW1zLnNwYWNlQmV0d2VlbiAhPT0gMCkge1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIGlmIChydGwpIHNsaWRlcy5jc3MoeyBtYXJnaW5MZWZ0OiBgJHtzcGFjZUJldHdlZW59cHhgIH0pO1xuICAgICAgZWxzZSBzbGlkZXMuY3NzKHsgbWFyZ2luUmlnaHQ6IGAke3NwYWNlQmV0d2Vlbn1weGAgfSk7XG4gICAgfSBlbHNlIHNsaWRlcy5jc3MoeyBtYXJnaW5Cb3R0b206IGAke3NwYWNlQmV0d2Vlbn1weGAgfSk7XG4gIH1cblxuICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgc2xpZGVzLFxuICAgIHNuYXBHcmlkLFxuICAgIHNsaWRlc0dyaWQsXG4gICAgc2xpZGVzU2l6ZXNHcmlkLFxuICB9KTtcblxuICBpZiAoc2xpZGVzLmxlbmd0aCAhPT0gcHJldmlvdXNTbGlkZXNMZW5ndGgpIHtcbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVzTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cbiAgaWYgKHNuYXBHcmlkLmxlbmd0aCAhPT0gcHJldmlvdXNTbmFwR3JpZExlbmd0aCkge1xuICAgIHN3aXBlci5lbWl0KCdzbmFwR3JpZExlbmd0aENoYW5nZScpO1xuICB9XG4gIGlmIChzbGlkZXNHcmlkLmxlbmd0aCAhPT0gcHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlc0dyaWRMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICB9XG59O1xuXG52YXIgdXBkYXRlQXV0b0hlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgYWN0aXZlU2xpZGVzID0gW107XG4gIGxldCBuZXdIZWlnaHQgPSAwO1xuICBsZXQgaTtcblxuICAvLyBGaW5kIHNsaWRlcyBjdXJyZW50bHkgaW4gdmlld1xuICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBNYXRoLmNlaWwoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3KTsgaSArPSAxKSB7XG4gICAgICBjb25zdCBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCArIGk7XG4gICAgICBpZiAoaW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCkgYnJlYWs7XG4gICAgICBhY3RpdmVTbGlkZXMucHVzaChzd2lwZXIuc2xpZGVzLmVxKGluZGV4KVswXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFjdGl2ZVNsaWRlcy5wdXNoKHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KVswXSk7XG4gIH1cblxuICAvLyBGaW5kIG5ldyBoZWlnaHQgZnJvbSBoaWdoZXN0IHNsaWRlIGluIHZpZXdcbiAgZm9yIChpID0gMDsgaSA8IGFjdGl2ZVNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0eXBlb2YgYWN0aXZlU2xpZGVzW2ldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3QgaGVpZ2h0ID0gYWN0aXZlU2xpZGVzW2ldLm9mZnNldEhlaWdodDtcbiAgICAgIG5ld0hlaWdodCA9IGhlaWdodCA+IG5ld0hlaWdodCA/IGhlaWdodCA6IG5ld0hlaWdodDtcbiAgICB9XG4gIH1cblxuICAvLyBVcGRhdGUgSGVpZ2h0XG4gIGlmIChuZXdIZWlnaHQpIHN3aXBlci4kd3JhcHBlckVsLmNzcygnaGVpZ2h0JywgYCR7bmV3SGVpZ2h0fXB4YCk7XG59O1xuXG52YXIgdXBkYXRlU2xpZGVzT2Zmc2V0ID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZU9mZnNldCA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHNsaWRlc1tpXS5vZmZzZXRMZWZ0IDogc2xpZGVzW2ldLm9mZnNldFRvcDtcbiAgfVxufTtcblxudmFyIHVwZGF0ZVNsaWRlc1Byb2dyZXNzID0gZnVuY3Rpb24gKHRyYW5zbGF0ZSA9IHRoaXMudHJhbnNsYXRlIHx8IDApIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcblxuICBjb25zdCB7IHNsaWRlcywgcnRsIH0gPSBzd2lwZXI7XG5cbiAgaWYgKHNsaWRlcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgaWYgKHR5cGVvZiBzbGlkZXNbMF0uc3dpcGVyU2xpZGVPZmZzZXQgPT09ICd1bmRlZmluZWQnKSBzd2lwZXIudXBkYXRlU2xpZGVzT2Zmc2V0KCk7XG5cbiAgbGV0IG9mZnNldENlbnRlciA9IC10cmFuc2xhdGU7XG4gIGlmIChydGwpIG9mZnNldENlbnRlciA9IHRyYW5zbGF0ZTtcblxuICAvLyBWaXNpYmxlIFNsaWRlc1xuICBzbGlkZXMucmVtb3ZlQ2xhc3MocGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IHNsaWRlID0gc2xpZGVzW2ldO1xuICAgIGNvbnN0IHNsaWRlUHJvZ3Jlc3MgPVxuICAgICAgKFxuICAgICAgICAob2Zmc2V0Q2VudGVyICsgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5taW5UcmFuc2xhdGUoKSA6IDApKSAtIHNsaWRlLnN3aXBlclNsaWRlT2Zmc2V0XG4gICAgICApIC8gKHNsaWRlLnN3aXBlclNsaWRlU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4pO1xuICAgIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSB7XG4gICAgICBjb25zdCBzbGlkZUJlZm9yZSA9IC0ob2Zmc2V0Q2VudGVyIC0gc2xpZGUuc3dpcGVyU2xpZGVPZmZzZXQpO1xuICAgICAgY29uc3Qgc2xpZGVBZnRlciA9IHNsaWRlQmVmb3JlICsgc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtpXTtcbiAgICAgIGNvbnN0IGlzVmlzaWJsZSA9XG4gICAgICAgICAgICAgICAgKHNsaWRlQmVmb3JlID49IDAgJiYgc2xpZGVCZWZvcmUgPCBzd2lwZXIuc2l6ZSkgfHxcbiAgICAgICAgICAgICAgICAoc2xpZGVBZnRlciA+IDAgJiYgc2xpZGVBZnRlciA8PSBzd2lwZXIuc2l6ZSkgfHxcbiAgICAgICAgICAgICAgICAoc2xpZGVCZWZvcmUgPD0gMCAmJiBzbGlkZUFmdGVyID49IHN3aXBlci5zaXplKTtcbiAgICAgIGlmIChpc1Zpc2libGUpIHtcbiAgICAgICAgc2xpZGVzLmVxKGkpLmFkZENsYXNzKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcyk7XG4gICAgICB9XG4gICAgfVxuICAgIHNsaWRlLnByb2dyZXNzID0gcnRsID8gLXNsaWRlUHJvZ3Jlc3MgOiBzbGlkZVByb2dyZXNzO1xuICB9XG59O1xuXG52YXIgdXBkYXRlUHJvZ3Jlc3MgPSBmdW5jdGlvbiAodHJhbnNsYXRlID0gdGhpcy50cmFuc2xhdGUgfHwgMCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuXG4gIGNvbnN0IHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICBsZXQgeyBwcm9ncmVzcywgaXNCZWdpbm5pbmcsIGlzRW5kIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHdhc0JlZ2lubmluZyA9IGlzQmVnaW5uaW5nO1xuICBjb25zdCB3YXNFbmQgPSBpc0VuZDtcbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgcHJvZ3Jlc3MgPSAwO1xuICAgIGlzQmVnaW5uaW5nID0gdHJ1ZTtcbiAgICBpc0VuZCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcHJvZ3Jlc3MgPSAodHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvICh0cmFuc2xhdGVzRGlmZik7XG4gICAgaXNCZWdpbm5pbmcgPSBwcm9ncmVzcyA8PSAwO1xuICAgIGlzRW5kID0gcHJvZ3Jlc3MgPj0gMTtcbiAgfVxuICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgcHJvZ3Jlc3MsXG4gICAgaXNCZWdpbm5pbmcsXG4gICAgaXNFbmQsXG4gIH0pO1xuXG4gIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSBzd2lwZXIudXBkYXRlU2xpZGVzUHJvZ3Jlc3ModHJhbnNsYXRlKTtcblxuICBpZiAoaXNCZWdpbm5pbmcgJiYgIXdhc0JlZ2lubmluZykge1xuICAgIHN3aXBlci5lbWl0KCdyZWFjaEJlZ2lubmluZyB0b0VkZ2UnKTtcbiAgfVxuICBpZiAoaXNFbmQgJiYgIXdhc0VuZCkge1xuICAgIHN3aXBlci5lbWl0KCdyZWFjaEVuZCB0b0VkZ2UnKTtcbiAgfVxuICBpZiAoKHdhc0JlZ2lubmluZyAmJiAhaXNCZWdpbm5pbmcpIHx8ICh3YXNFbmQgJiYgIWlzRW5kKSkge1xuICAgIHN3aXBlci5lbWl0KCdmcm9tRWRnZScpO1xuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ3Byb2dyZXNzJywgcHJvZ3Jlc3MpO1xufTtcblxudmFyIHVwZGF0ZVJlYWxJbmRleCA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgcHJldmlvdXNSZWFsSW5kZXggPSBzd2lwZXIucmVhbEluZGV4O1xuICBzd2lwZXIucmVhbEluZGV4ID0gcGFyc2VJbnQoc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgfHwgc3dpcGVyLmFjdGl2ZUluZGV4LCAxMCk7XG4gIGlmIChwcmV2aW91c1JlYWxJbmRleCAhPT0gc3dpcGVyLnJlYWxJbmRleCkge1xuICAgIHN3aXBlci5lbWl0KCdyZWFsSW5kZXhDaGFuZ2UnKTtcbiAgfVxufTtcblxudmFyIHVwZGF0ZVNsaWRlc0NsYXNzZXMgPSBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG5cbiAgY29uc3QgeyBzbGlkZXMsIHBhcmFtcywgJHdyYXBwZXJFbCwgYWN0aXZlSW5kZXgsIHJlYWxJbmRleCB9ID0gc3dpcGVyO1xuXG4gIHNsaWRlcy5yZW1vdmVDbGFzcyhgJHtwYXJhbXMuc2xpZGVBY3RpdmVDbGFzc30gJHtwYXJhbXMuc2xpZGVOZXh0Q2xhc3N9ICR7cGFyYW1zLnNsaWRlUHJldkNsYXNzfSAke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzfSAke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZU5leHRDbGFzc30gJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3N9YCk7XG5cbiAgY29uc3QgYWN0aXZlU2xpZGUgPSBzbGlkZXMuZXEoYWN0aXZlSW5kZXgpO1xuXG4gIC8vIEFjdGl2ZSBjbGFzc2VzXG4gIGFjdGl2ZVNsaWRlLmFkZENsYXNzKHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzKTtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAvLyBEdXBsaWNhdGUgdG8gYWxsIGxvb3BlZCBzbGlkZXNcbiAgICBpZiAoYWN0aXZlU2xpZGUuaGFzQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAkd3JhcHBlckVsXG4gICAgICAgIC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9Om5vdCguJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30pW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtyZWFsSW5kZXh9XCJdYClcbiAgICAgICAgLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHdyYXBwZXJFbFxuICAgICAgICAuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfS4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7cmVhbEluZGV4fVwiXWApXG4gICAgICAgIC5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzcyk7XG4gICAgfVxuICB9XG4gIC8vIE5leHQgU2xpZGVcbiAgbGV0IG5leHRTbGlkZSA9IGFjdGl2ZVNsaWRlLm5leHQoYC4ke3BhcmFtcy5zbGlkZUNsYXNzfWApLmFkZENsYXNzKHBhcmFtcy5zbGlkZU5leHRDbGFzcyk7XG4gIGlmIChwYXJhbXMubG9vcCAmJiBuZXh0U2xpZGUubGVuZ3RoID09PSAwKSB7XG4gICAgbmV4dFNsaWRlID0gc2xpZGVzLmVxKDApO1xuICAgIG5leHRTbGlkZS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVOZXh0Q2xhc3MpO1xuICB9XG4gIC8vIFByZXYgU2xpZGVcbiAgbGV0IHByZXZTbGlkZSA9IGFjdGl2ZVNsaWRlLnByZXYoYC4ke3BhcmFtcy5zbGlkZUNsYXNzfWApLmFkZENsYXNzKHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gIGlmIChwYXJhbXMubG9vcCAmJiBwcmV2U2xpZGUubGVuZ3RoID09PSAwKSB7XG4gICAgcHJldlNsaWRlID0gc2xpZGVzLmVxKC0xKTtcbiAgICBwcmV2U2xpZGUuYWRkQ2xhc3MocGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcbiAgfVxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAvLyBEdXBsaWNhdGUgdG8gYWxsIGxvb3BlZCBzbGlkZXNcbiAgICBpZiAobmV4dFNsaWRlLmhhc0NsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgJHdyYXBwZXJFbFxuICAgICAgICAuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfTpub3QoLiR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3N9KVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7bmV4dFNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyl9XCJdYClcbiAgICAgICAgLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZU5leHRDbGFzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICR3cmFwcGVyRWxcbiAgICAgICAgLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc30uJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke25leHRTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpfVwiXWApXG4gICAgICAgIC5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3MpO1xuICAgIH1cbiAgICBpZiAocHJldlNsaWRlLmhhc0NsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgJHdyYXBwZXJFbFxuICAgICAgICAuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfTpub3QoLiR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3N9KVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7cHJldlNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyl9XCJdYClcbiAgICAgICAgLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZVByZXZDbGFzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICR3cmFwcGVyRWxcbiAgICAgICAgLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc30uJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3ByZXZTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpfVwiXWApXG4gICAgICAgIC5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MpO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHVwZGF0ZUFjdGl2ZUluZGV4ID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB0cmFuc2xhdGUgPSBzd2lwZXIucnRsID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICBjb25zdCB7IHNsaWRlc0dyaWQsIHNuYXBHcmlkLCBwYXJhbXMsIGFjdGl2ZUluZGV4IH0gPSBzd2lwZXI7XG4gIGxldCBuZXdBY3RpdmVJbmRleDtcbiAgbGV0IHNuYXBJbmRleDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyAxXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSAtICgoc2xpZGVzR3JpZFtpICsgMV0gLSBzbGlkZXNHcmlkW2ldKSAvIDIpKSB7XG4gICAgICAgIG5ld0FjdGl2ZUluZGV4ID0gaTtcbiAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0gJiYgdHJhbnNsYXRlIDwgc2xpZGVzR3JpZFtpICsgMV0pIHtcbiAgICAgICAgbmV3QWN0aXZlSW5kZXggPSBpICsgMTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldKSB7XG4gICAgICBuZXdBY3RpdmVJbmRleCA9IGk7XG4gICAgfVxuICB9XG4gIC8vIE5vcm1hbGl6ZSBzbGlkZUluZGV4XG4gIGlmIChwYXJhbXMubm9ybWFsaXplU2xpZGVJbmRleCkge1xuICAgIGlmIChuZXdBY3RpdmVJbmRleCA8IDAgfHwgdHlwZW9mIG5ld0FjdGl2ZUluZGV4ID09PSAndW5kZWZpbmVkJykgbmV3QWN0aXZlSW5kZXggPSAwO1xuICB9XG4gIHNuYXBJbmRleCA9IE1hdGguZmxvb3IobmV3QWN0aXZlSW5kZXggLyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICBpZiAoc25hcEluZGV4ID49IHNuYXBHcmlkLmxlbmd0aCkgc25hcEluZGV4ID0gc25hcEdyaWQubGVuZ3RoIC0gMTtcblxuICBpZiAobmV3QWN0aXZlSW5kZXggPT09IGFjdGl2ZUluZGV4KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICBzbmFwSW5kZXgsXG4gICAgcHJldmlvdXNJbmRleDogYWN0aXZlSW5kZXgsXG4gICAgYWN0aXZlSW5kZXg6IG5ld0FjdGl2ZUluZGV4LFxuICB9KTtcbiAgc3dpcGVyLmVtaXQoJ2FjaXZlSW5kZXhDaGFuZ2UnKTtcbiAgc3dpcGVyLmVtaXQoJ3NuYXBJbmRleENoYW5nZScpO1xufTtcblxudmFyIHVwZGF0ZUNsaWNrZWRTbGlkZSA9IGZ1bmN0aW9uIChlKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIGNvbnN0IHNsaWRlID0gJChlLnRhcmdldCkuY2xvc2VzdChgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YClbMF07XG4gIGxldCBzbGlkZUZvdW5kID0gZmFsc2U7XG4gIGlmIChzbGlkZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXNbaV0gPT09IHNsaWRlKSBzbGlkZUZvdW5kID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoc2xpZGUgJiYgc2xpZGVGb3VuZCkge1xuICAgIHN3aXBlci5jbGlja2VkU2xpZGUgPSBzbGlkZTtcbiAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gJChzbGlkZSkuaW5kZXgoKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuY2xpY2tlZFNsaWRlID0gdW5kZWZpbmVkO1xuICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwYXJhbXMuc2xpZGVUb0NsaWNrZWRTbGlkZSAmJiBzd2lwZXIuY2xpY2tlZEluZGV4ICE9PSB1bmRlZmluZWQgJiYgc3dpcGVyLmNsaWNrZWRJbmRleCAhPT0gc3dpcGVyLmFjdGl2ZUluZGV4KSB7XG4gICAgc3dpcGVyLnNsaWRlVG9DbGlja2VkU2xpZGUoKTtcbiAgfVxufTtcblxudmFyIHVwZGF0ZSA9IHtcbiAgdXBkYXRlU2l6ZSxcbiAgdXBkYXRlU2xpZGVzLFxuICB1cGRhdGVBdXRvSGVpZ2h0LFxuICB1cGRhdGVTbGlkZXNPZmZzZXQsXG4gIHVwZGF0ZVNsaWRlc1Byb2dyZXNzLFxuICB1cGRhdGVQcm9ncmVzcyxcbiAgdXBkYXRlUmVhbEluZGV4LFxuICB1cGRhdGVTbGlkZXNDbGFzc2VzLFxuICB1cGRhdGVBY3RpdmVJbmRleCxcbiAgdXBkYXRlQ2xpY2tlZFNsaWRlLFxufTtcblxudmFyIGdldFRyYW5zbGF0ZSA9IGZ1bmN0aW9uIChheGlzID0gdGhpcy5pc0hvcml6b250YWwoKSA/ICd4JyA6ICd5Jykge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuXG4gIGNvbnN0IHsgcGFyYW1zLCBydGwsIHRyYW5zbGF0ZSwgJHdyYXBwZXJFbCB9ID0gc3dpcGVyO1xuXG4gIGlmIChwYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkge1xuICAgIHJldHVybiBydGwgPyAtdHJhbnNsYXRlIDogdHJhbnNsYXRlO1xuICB9XG5cbiAgbGV0IGN1cnJlbnRUcmFuc2xhdGUgPSBVdGlscy5nZXRUcmFuc2xhdGUoJHdyYXBwZXJFbFswXSwgYXhpcyk7XG4gIGlmIChydGwpIGN1cnJlbnRUcmFuc2xhdGUgPSAtY3VycmVudFRyYW5zbGF0ZTtcblxuICByZXR1cm4gY3VycmVudFRyYW5zbGF0ZSB8fCAwO1xufTtcblxudmFyIHNldFRyYW5zbGF0ZSA9IGZ1bmN0aW9uICh0cmFuc2xhdGUsIGJ5Q29udHJvbGxlcikge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7IHJ0bCwgcGFyYW1zLCAkd3JhcHBlckVsLCBwcm9ncmVzcyB9ID0gc3dpcGVyO1xuICBsZXQgeCA9IDA7XG4gIGxldCB5ID0gMDtcbiAgY29uc3QgeiA9IDA7XG5cbiAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgIHggPSBydGwgPyAtdHJhbnNsYXRlIDogdHJhbnNsYXRlO1xuICB9IGVsc2Uge1xuICAgIHkgPSB0cmFuc2xhdGU7XG4gIH1cblxuICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykge1xuICAgIHggPSBNYXRoLmZsb29yKHgpO1xuICAgIHkgPSBNYXRoLmZsb29yKHkpO1xuICB9XG5cbiAgaWYgKCFwYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkge1xuICAgIGlmIChTdXBwb3J0JDQudHJhbnNmb3JtczNkKSAkd3JhcHBlckVsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHt4fXB4LCAke3l9cHgsICR7en1weClgKTtcbiAgICBlbHNlICR3cmFwcGVyRWwudHJhbnNmb3JtKGB0cmFuc2xhdGUoJHt4fXB4LCAke3l9cHgpYCk7XG4gIH1cblxuICBzd2lwZXIudHJhbnNsYXRlID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8geCA6IHk7XG5cbiAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byB1cGRhdGUgcHJvZ3Jlc3NcbiAgbGV0IG5ld1Byb2dyZXNzO1xuICBjb25zdCB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAwO1xuICB9IGVsc2Uge1xuICAgIG5ld1Byb2dyZXNzID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyAodHJhbnNsYXRlc0RpZmYpO1xuICB9XG4gIGlmIChuZXdQcm9ncmVzcyAhPT0gcHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKTtcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2xhdGUnLCBzd2lwZXIudHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpO1xufTtcblxudmFyIG1pblRyYW5zbGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICgtdGhpcy5zbmFwR3JpZFswXSk7XG59O1xuXG52YXIgbWF4VHJhbnNsYXRlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gKC10aGlzLnNuYXBHcmlkW3RoaXMuc25hcEdyaWQubGVuZ3RoIC0gMV0pO1xufTtcblxudmFyIHRyYW5zbGF0ZSA9IHtcbiAgZ2V0VHJhbnNsYXRlLFxuICBzZXRUcmFuc2xhdGUsXG4gIG1pblRyYW5zbGF0ZSxcbiAgbWF4VHJhbnNsYXRlLFxufTtcblxudmFyIHNldFRyYW5zaXRpb24gPSBmdW5jdGlvbiAoZHVyYXRpb24sIGJ5Q29udHJvbGxlcikge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuXG4gIHN3aXBlci4kd3JhcHBlckVsLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuXG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2l0aW9uJywgZHVyYXRpb24sIGJ5Q29udHJvbGxlcik7XG59O1xuXG52YXIgdHJhbnNpdGlvblN0YXJ0ID0gZnVuY3Rpb24gKHJ1bkNhbGxiYWNrcyA9IHRydWUpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgeyBhY3RpdmVJbmRleCwgcGFyYW1zLCBwcmV2aW91c0luZGV4IH0gPSBzd2lwZXI7XG4gIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25TdGFydCcpO1xuXG4gIGlmICghcnVuQ2FsbGJhY2tzKSByZXR1cm47XG4gIGlmIChhY3RpdmVJbmRleCAhPT0gcHJldmlvdXNJbmRleCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZUNoYW5nZVN0YXJ0Jyk7XG4gICAgaWYgKGFjdGl2ZUluZGV4ID4gcHJldmlvdXNJbmRleCkge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlTmV4dFN0YXJ0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbWl0KCdzbGlkZVByZXZTdGFydCcpO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiAocnVuQ2FsbGJhY2tzID0gdHJ1ZSkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7IGFjdGl2ZUluZGV4LCBwcmV2aW91c0luZGV4IH0gPSBzd2lwZXI7XG4gIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcbiAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG5cbiAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25FbmQnKTtcbiAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgIGlmIChhY3RpdmVJbmRleCAhPT0gcHJldmlvdXNJbmRleCkge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlQ2hhbmdlRW5kJyk7XG4gICAgICBpZiAoYWN0aXZlSW5kZXggPiBwcmV2aW91c0luZGV4KSB7XG4gICAgICAgIHN3aXBlci5lbWl0KCdzbGlkZU5leHRFbmQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5lbWl0KCdzbGlkZVByZXZFbmQnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbnZhciB0cmFuc2l0aW9uID0ge1xuICBzZXRUcmFuc2l0aW9uLFxuICB0cmFuc2l0aW9uU3RhcnQsXG4gIHRyYW5zaXRpb25FbmQsXG59O1xuXG5mdW5jdGlvbiBCcm93c2VyKCkge1xuICBmdW5jdGlvbiBpc0lFOSgpIHtcbiAgICAvLyBjcmVhdGUgdGVtcG9yYXJ5IERJVlxuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIC8vIGFkZCBjb250ZW50IHRvIHRtcCBESVYgd2hpY2ggaXMgd3JhcHBlZCBpbnRvIHRoZSBJRSBIVE1MIGNvbmRpdGlvbmFsIHN0YXRlbWVudFxuICAgIGRpdi5pbm5lckhUTUwgPSAnPCEtLVtpZiBsdGUgSUUgOV0+PGk+PC9pPjwhW2VuZGlmXS0tPic7XG4gICAgLy8gcmV0dXJuIHRydWUgLyBmYWxzZSB2YWx1ZSBiYXNlZCBvbiB3aGF0IHdpbGwgYnJvd3NlciByZW5kZXJcbiAgICByZXR1cm4gZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpJykubGVuZ3RoID09PSAxO1xuICB9XG4gIGZ1bmN0aW9uIGlzU2FmYXJpKCkge1xuICAgIGNvbnN0IHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gKHVhLmluZGV4T2YoJ3NhZmFyaScpID49IDAgJiYgdWEuaW5kZXhPZignY2hyb21lJykgPCAwICYmIHVhLmluZGV4T2YoJ2FuZHJvaWQnKSA8IDApO1xuICB9XG4gIHJldHVybiB7XG4gICAgaXNTYWZhcmk6IGlzU2FmYXJpKCksXG4gICAgaXNVaVdlYlZpZXc6IC8oaVBob25lfGlQb2R8aVBhZCkuKkFwcGxlV2ViS2l0KD8hLipTYWZhcmkpL2kudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCksXG4gICAgaWU6IHdpbmRvdy5uYXZpZ2F0b3IucG9pbnRlckVuYWJsZWQgfHwgd2luZG93Lm5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkLFxuICAgIGllVG91Y2g6ICh3aW5kb3cubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQgJiYgd2luZG93Lm5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzID4gMSkgfHxcbiAgICAgICAgICAgICAod2luZG93Lm5hdmlnYXRvci5wb2ludGVyRW5hYmxlZCAmJiB3aW5kb3cubmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMSksXG4gICAgbHRlSUU5OiBpc0lFOSgpLFxuICB9O1xufVxuXG52YXIgQnJvd3NlciQxID0gQnJvd3NlcigpO1xuXG52YXIgc2xpZGVUbyA9IGZ1bmN0aW9uIChpbmRleCA9IDAsIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQsIHJ1bkNhbGxiYWNrcyA9IHRydWUsIGludGVybmFsKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGxldCBzbGlkZUluZGV4ID0gaW5kZXg7XG4gIGlmIChzbGlkZUluZGV4IDwgMCkgc2xpZGVJbmRleCA9IDA7XG5cbiAgY29uc3QgeyBwYXJhbXMsIHNuYXBHcmlkLCBzbGlkZXNHcmlkLCBwcmV2aW91c0luZGV4LCBhY3RpdmVJbmRleCwgc25hcEluZGV4OiBwcmV2aW91c1NuYXBJbmRleCwgcnRsLCAkd3JhcHBlckVsIH0gPSBzd2lwZXI7XG5cbiAgc3dpcGVyLnNuYXBJbmRleCA9IE1hdGguZmxvb3Ioc2xpZGVJbmRleCAvIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIGlmIChzd2lwZXIuc25hcEluZGV4ID49IHNuYXBHcmlkLmxlbmd0aCkgc3dpcGVyLnNuYXBJbmRleCA9IHNuYXBHcmlkLmxlbmd0aCAtIDE7XG5cbiAgaWYgKChhY3RpdmVJbmRleCB8fCBwYXJhbXMuaW5pdGlhbFNsaWRlIHx8IDApID09PSAocHJldmlvdXNJbmRleCB8fCAwKSAmJiBydW5DYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlU2xpZGVDaGFuZ2VTdGFydCcpO1xuICB9XG5cbiAgY29uc3QgdHJhbnNsYXRlID0gLXNuYXBHcmlkW3N3aXBlci5zbmFwSW5kZXhdO1xuXG4gIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKTtcblxuICAvLyBOb3JtYWxpemUgc2xpZGVJbmRleFxuICBpZiAocGFyYW1zLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmICgtTWF0aC5mbG9vcih0cmFuc2xhdGUgKiAxMDApID49IE1hdGguZmxvb3Ioc2xpZGVzR3JpZFtpXSAqIDEwMCkpIHtcbiAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gRGlyZWN0aW9ucyBsb2Nrc1xuICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlTmV4dCAmJiB0cmFuc2xhdGUgPCBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA8IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiB0cmFuc2xhdGUgPiBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA+IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgIGlmICgoc3dpcGVyLmFjdGl2ZUluZGV4IHx8IDApICE9PSBzbGlkZUluZGV4KSByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBVcGRhdGUgSW5kZXhcbiAgc3dpcGVyLnByZXZpb3VzSW5kZXggPSBhY3RpdmVJbmRleCB8fCAwO1xuICBzd2lwZXIuYWN0aXZlSW5kZXggPSBzbGlkZUluZGV4O1xuICBpZiAocHJldmlvdXNJbmRleCAhPT0gc2xpZGVJbmRleCB8fCBhY3RpdmVJbmRleCAhPT0gc2xpZGVJbmRleCkge1xuICAgIHN3aXBlci5lbWl0KCdhY3RpdmVJbmRleENoYW5nZScpO1xuICB9XG4gIGlmIChwcmV2aW91c1NuYXBJbmRleCAhPT0gc3dpcGVyLnNuYXBJbmRleCkge1xuICAgIHN3aXBlci5lbWl0KCdzbmFwSW5kZXhDaGFuZ2UnKTtcbiAgfVxuICBzd2lwZXIudXBkYXRlUmVhbEluZGV4KCk7XG4gIGlmICgocnRsICYmIC10cmFuc2xhdGUgPT09IHN3aXBlci50cmFuc2xhdGUpIHx8ICghcnRsICYmIHRyYW5zbGF0ZSA9PT0gc3dpcGVyLnRyYW5zbGF0ZSkpIHtcbiAgICAvLyBVcGRhdGUgSGVpZ2h0XG4gICAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgIH1cbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIGlmIChwYXJhbXMuZWZmZWN0ICE9PSAnc2xpZGUnKSB7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcyk7XG5cbiAgaWYgKHNwZWVkID09PSAwIHx8IEJyb3dzZXIkMS5sdGVJRTkpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICAgIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICAkd3JhcHBlckVsLnRyYW5zaXRpb25FbmQoKCkgPT4ge1xuICAgICAgICBpZiAoIXN3aXBlcikgcmV0dXJuO1xuICAgICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbnZhciBzbGlkZU5leHQgPSBmdW5jdGlvbiAoc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZCwgcnVuQ2FsbGJhY2tzID0gdHJ1ZSwgaW50ZXJuYWwpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgeyBwYXJhbXMsIGFuaW1hdGluZyB9ID0gc3dpcGVyO1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoYW5pbWF0aW5nKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICBjb25zdCBjbGllbnRMZWZ0ID0gc3dpcGVyLiR3cmFwcGVyRWxbMF0uY2xpZW50TGVmdDtcbiAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4ICsgcGFyYW1zLnNsaWRlc1Blckdyb3VwLCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gIH1cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCArIHBhcmFtcy5zbGlkZXNQZXJHcm91cCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufTtcblxuLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG52YXIgc2xpZGVQcmV2ID0gZnVuY3Rpb24gKHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQsIHJ1bkNhbGxiYWNrcyA9IHRydWUsIGludGVybmFsKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgcGFyYW1zLCBhbmltYXRpbmcgfSA9IHN3aXBlcjtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoYW5pbWF0aW5nKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICBjb25zdCBjbGllbnRMZWZ0ID0gc3dpcGVyLiR3cmFwcGVyRWxbMF0uY2xpZW50TGVmdDtcbiAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4IC0gMSwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICB9XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXggLSAxLCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59O1xuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbnZhciBzbGlkZVJlc2V0ID0gZnVuY3Rpb24gKHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQsIHJ1bkNhbGxiYWNrcyA9IHRydWUsIGludGVybmFsKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn07XG5cbnZhciBzbGlkZVRvQ2xpY2tlZFNsaWRlID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7IHBhcmFtcywgJHdyYXBwZXJFbCB9ID0gc3dpcGVyO1xuXG4gIGNvbnN0IHNsaWRlc1BlclZpZXcgPSBwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nID8gc3dpcGVyLnNsaWRlc1BlclZpZXcoKSA6IHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICBsZXQgc2xpZGVUb0luZGV4ID0gc3dpcGVyLmNsaWNrZWRJbmRleDtcbiAgbGV0IHJlYWxJbmRleDtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHN3aXBlci5hbmltYXRpbmcpIHJldHVybjtcbiAgICByZWFsSW5kZXggPSBwYXJzZUludCgkKHN3aXBlci5jbGlja2VkU2xpZGUpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBpZiAoXG4gICAgICAgIChzbGlkZVRvSW5kZXggPCBzd2lwZXIubG9vcGVkU2xpZGVzIC0gKHNsaWRlc1BlclZpZXcgLyAyKSkgfHxcbiAgICAgICAgKHNsaWRlVG9JbmRleCA+IChzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIHN3aXBlci5sb29wZWRTbGlkZXMpICsgKHNsaWRlc1BlclZpZXcgLyAyKSlcbiAgICAgICkge1xuICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICBzbGlkZVRvSW5kZXggPSAkd3JhcHBlckVsXG4gICAgICAgICAgLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3JlYWxJbmRleH1cIl06bm90KC4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfSlgKVxuICAgICAgICAgIC5lcSgwKVxuICAgICAgICAgIC5pbmRleCgpO1xuXG4gICAgICAgIFV0aWxzLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzbGlkZVRvSW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIHNsaWRlc1BlclZpZXcpIHtcbiAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICBzbGlkZVRvSW5kZXggPSAkd3JhcHBlckVsXG4gICAgICAgIC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtyZWFsSW5kZXh9XCJdOm5vdCguJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30pYClcbiAgICAgICAgLmVxKDApXG4gICAgICAgIC5pbmRleCgpO1xuXG4gICAgICBVdGlscy5uZXh0VGljaygoKSA9PiB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgfVxufTtcblxudmFyIHNsaWRlID0ge1xuICBzbGlkZVRvLFxuICBzbGlkZU5leHQsXG4gIHNsaWRlUHJldixcbiAgc2xpZGVSZXNldCxcbiAgc2xpZGVUb0NsaWNrZWRTbGlkZSxcbn07XG5cbnZhciBsb29wQ3JlYXRlID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7IHBhcmFtcywgJHdyYXBwZXJFbCB9ID0gc3dpcGVyO1xuICAvLyBSZW1vdmUgZHVwbGljYXRlZCBzbGlkZXNcbiAgJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LiR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3N9YCkucmVtb3ZlKCk7XG5cbiAgbGV0IHNsaWRlcyA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfWApO1xuXG4gIGlmIChwYXJhbXMubG9vcEZpbGxHcm91cFdpdGhCbGFuaykge1xuICAgIGNvbnN0IGJsYW5rU2xpZGVzTnVtID0gcGFyYW1zLnNsaWRlc1Blckdyb3VwIC0gKHNsaWRlcy5sZW5ndGggJSBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICAgIGlmIChibGFua1NsaWRlc051bSAhPT0gcGFyYW1zLnNsaWRlc1Blckdyb3VwKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJsYW5rU2xpZGVzTnVtOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgYmxhbmtOb2RlID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSkuYWRkQ2xhc3MoYCR7cGFyYW1zLnNsaWRlQ2xhc3N9ICR7cGFyYW1zLnNsaWRlQmxhbmtDbGFzc31gKTtcbiAgICAgICAgJHdyYXBwZXJFbC5hcHBlbmQoYmxhbmtOb2RlKTtcbiAgICAgIH1cbiAgICAgIHNsaWRlcyA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfWApO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmICFwYXJhbXMubG9vcGVkU2xpZGVzKSBwYXJhbXMubG9vcGVkU2xpZGVzID0gc2xpZGVzLmxlbmd0aDtcblxuICBzd2lwZXIubG9vcGVkU2xpZGVzID0gcGFyc2VJbnQocGFyYW1zLmxvb3BlZFNsaWRlcyB8fCBwYXJhbXMuc2xpZGVzUGVyVmlldywgMTApO1xuICBzd2lwZXIubG9vcGVkU2xpZGVzICs9IHBhcmFtcy5sb29wQWRkaXRpb25hbFNsaWRlcztcbiAgaWYgKHN3aXBlci5sb29wZWRTbGlkZXMgPiBzbGlkZXMubGVuZ3RoKSB7XG4gICAgc3dpcGVyLmxvb3BlZFNsaWRlcyA9IHNsaWRlcy5sZW5ndGg7XG4gIH1cblxuICBjb25zdCBwcmVwZW5kU2xpZGVzID0gW107XG4gIGNvbnN0IGFwcGVuZFNsaWRlcyA9IFtdO1xuICBzbGlkZXMuZWFjaCgoaW5kZXgsIGVsKSA9PiB7XG4gICAgY29uc3Qgc2xpZGUgPSAkKGVsKTtcbiAgICBpZiAoaW5kZXggPCBzd2lwZXIubG9vcGVkU2xpZGVzKSBhcHBlbmRTbGlkZXMucHVzaChlbCk7XG4gICAgaWYgKGluZGV4IDwgc2xpZGVzLmxlbmd0aCAmJiBpbmRleCA+PSBzbGlkZXMubGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcykgcHJlcGVuZFNsaWRlcy5wdXNoKGVsKTtcbiAgICBzbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcsIGluZGV4KTtcbiAgfSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXBwZW5kU2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgJHdyYXBwZXJFbC5hcHBlbmQoJChhcHBlbmRTbGlkZXNbaV0uY2xvbmVOb2RlKHRydWUpKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpO1xuICB9XG4gIGZvciAobGV0IGkgPSBwcmVwZW5kU2xpZGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgJHdyYXBwZXJFbC5wcmVwZW5kKCQocHJlcGVuZFNsaWRlc1tpXS5jbG9uZU5vZGUodHJ1ZSkpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSk7XG4gIH1cbn07XG5cbnZhciBsb29wRml4ID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7IHBhcmFtcywgYWN0aXZlSW5kZXgsIHNsaWRlcywgbG9vcGVkU2xpZGVzIH0gPSBzd2lwZXI7XG5cbiAgbGV0IG5ld0luZGV4O1xuICAvLyBGaXggRm9yIE5lZ2F0aXZlIE92ZXJzbGlkaW5nXG4gIGlmIChhY3RpdmVJbmRleCA8IGxvb3BlZFNsaWRlcykge1xuICAgIG5ld0luZGV4ID0gKHNsaWRlcy5sZW5ndGggLSAobG9vcGVkU2xpZGVzICogMykpICsgYWN0aXZlSW5kZXg7XG4gICAgbmV3SW5kZXggKz0gbG9vcGVkU2xpZGVzO1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0luZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gIH0gZWxzZSBpZiAoKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgYWN0aXZlSW5kZXggPj0gbG9vcGVkU2xpZGVzICogMikgfHwgKGFjdGl2ZUluZGV4ID4gc2xpZGVzLmxlbmd0aCAtIChwYXJhbXMuc2xpZGVzUGVyVmlldyAqIDIpKSkge1xuICAgIC8vIEZpeCBGb3IgUG9zaXRpdmUgT3ZlcnNsaWRpbmdcbiAgICBuZXdJbmRleCA9IC1zbGlkZXMubGVuZ3RoICsgYWN0aXZlSW5kZXggKyBsb29wZWRTbGlkZXM7XG4gICAgbmV3SW5kZXggKz0gbG9vcGVkU2xpZGVzO1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0luZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gIH1cbn07XG5cbnZhciBsb29wRGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgeyAkd3JhcHBlckVsLCBwYXJhbXMsIHNsaWRlcyB9ID0gc3dpcGVyO1xuICAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc30uJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc31gKS5yZW1vdmUoKTtcbiAgc2xpZGVzLnJlbW92ZUF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG59O1xuXG52YXIgbG9vcCA9IHtcbiAgbG9vcENyZWF0ZSxcbiAgbG9vcEZpeCxcbiAgbG9vcERlc3Ryb3ksXG59O1xuXG52YXIgc2V0R3JhYkN1cnNvciA9IGZ1bmN0aW9uIChtb3ZpbmcpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKFN1cHBvcnQkNC50b3VjaCB8fCAhc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoKSByZXR1cm47XG4gIGNvbnN0IGVsID0gc3dpcGVyLmVsO1xuICBlbC5zdHlsZS5jdXJzb3IgPSAnbW92ZSc7XG4gIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICctd2Via2l0LWdyYWJiaW5nJyA6ICctd2Via2l0LWdyYWInO1xuICBlbC5zdHlsZS5jdXJzb3IgPSBtb3ZpbmcgPyAnLW1vei1ncmFiYmluJyA6ICctbW96LWdyYWInO1xuICBlbC5zdHlsZS5jdXJzb3IgPSBtb3ZpbmcgPyAnZ3JhYmJpbmcnIDogJ2dyYWInO1xufTtcblxudmFyIHVuc2V0R3JhYkN1cnNvciA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKFN1cHBvcnQkNC50b3VjaCkgcmV0dXJuO1xuICBzd2lwZXIuZWwuc3R5bGUuY3Vyc29yID0gJyc7XG59O1xuXG52YXIgZ3JhYkN1cnNvciA9IHtcbiAgc2V0R3JhYkN1cnNvcixcbiAgdW5zZXRHcmFiQ3Vyc29yLFxufTtcblxudmFyIGFwcGVuZFNsaWRlID0gZnVuY3Rpb24gKHNsaWRlcykge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7ICR3cmFwcGVyRWwsIHBhcmFtcyB9ID0gc3dpcGVyO1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgfVxuICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgc2xpZGVzLmxlbmd0aCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoc2xpZGVzW2ldKSAkd3JhcHBlckVsLmFwcGVuZChzbGlkZXNbaV0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAkd3JhcHBlckVsLmFwcGVuZChzbGlkZXMpO1xuICB9XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cbiAgaWYgKCEocGFyYW1zLm9ic2VydmVyICYmIFN1cHBvcnQkNC5vYnNlcnZlcikpIHtcbiAgICBzd2lwZXIudXBkYXRlKCk7XG4gIH1cbn07XG5cbnZhciBwcmVwZW5kU2xpZGUgPSBmdW5jdGlvbiAoc2xpZGVzKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgcGFyYW1zLCAkd3JhcHBlckVsLCBhY3RpdmVJbmRleCB9ID0gc3dpcGVyO1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICB9XG4gIGxldCBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4ICsgMTtcbiAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmIHNsaWRlcy5sZW5ndGgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHNsaWRlc1tpXSkgJHdyYXBwZXJFbC5wcmVwZW5kKHNsaWRlc1tpXSk7XG4gICAgfVxuICAgIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyBzbGlkZXMubGVuZ3RoO1xuICB9IGVsc2Uge1xuICAgICR3cmFwcGVyRWwucHJlcGVuZChzbGlkZXMpO1xuICB9XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cbiAgaWYgKCEocGFyYW1zLm9ic2VydmVyICYmIFN1cHBvcnQkNC5vYnNlcnZlcikpIHtcbiAgICBzd2lwZXIudXBkYXRlKCk7XG4gIH1cbiAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDAsIGZhbHNlKTtcbn07XG5cbnZhciByZW1vdmVTbGlkZSA9IGZ1bmN0aW9uIChzbGlkZXNJbmRleGVzKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgcGFyYW1zLCAkd3JhcHBlckVsLCBhY3RpdmVJbmRleCB9ID0gc3dpcGVyO1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIHN3aXBlci5zbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc31gKTtcbiAgfVxuICBsZXQgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleDtcbiAgbGV0IGluZGV4VG9SZW1vdmU7XG5cbiAgaWYgKHR5cGVvZiBzbGlkZXNJbmRleGVzID09PSAnb2JqZWN0JyAmJiBzbGlkZXNJbmRleGVzLmxlbmd0aCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzSW5kZXhlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaW5kZXhUb1JlbW92ZSA9IHNsaWRlc0luZGV4ZXNbaV07XG4gICAgICBpZiAoc3dpcGVyLnNsaWRlc1tpbmRleFRvUmVtb3ZlXSkgc3dpcGVyLnNsaWRlcy5lcShpbmRleFRvUmVtb3ZlKS5yZW1vdmUoKTtcbiAgICAgIGlmIChpbmRleFRvUmVtb3ZlIDwgbmV3QWN0aXZlSW5kZXgpIG5ld0FjdGl2ZUluZGV4IC09IDE7XG4gICAgfVxuICAgIG5ld0FjdGl2ZUluZGV4ID0gTWF0aC5tYXgobmV3QWN0aXZlSW5kZXgsIDApO1xuICB9IGVsc2Uge1xuICAgIGluZGV4VG9SZW1vdmUgPSBzbGlkZXNJbmRleGVzO1xuICAgIGlmIChzd2lwZXIuc2xpZGVzW2luZGV4VG9SZW1vdmVdKSBzd2lwZXIuc2xpZGVzLmVxKGluZGV4VG9SZW1vdmUpLnJlbW92ZSgpO1xuICAgIGlmIChpbmRleFRvUmVtb3ZlIDwgbmV3QWN0aXZlSW5kZXgpIG5ld0FjdGl2ZUluZGV4IC09IDE7XG4gICAgbmV3QWN0aXZlSW5kZXggPSBNYXRoLm1heChuZXdBY3RpdmVJbmRleCwgMCk7XG4gIH1cblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICB9XG5cbiAgaWYgKCEocGFyYW1zLm9ic2VydmVyICYmIFN1cHBvcnQkNC5vYnNlcnZlcikpIHtcbiAgICBzd2lwZXIudXBkYXRlKCk7XG4gIH1cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXggKyBzd2lwZXIubG9vcGVkU2xpZGVzLCAwLCBmYWxzZSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDAsIGZhbHNlKTtcbiAgfVxufTtcblxudmFyIHJlbW92ZUFsbFNsaWRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICBjb25zdCBzbGlkZXNJbmRleGVzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgfVxuICBzd2lwZXIucmVtb3ZlU2xpZGUoc2xpZGVzSW5kZXhlcyk7XG59O1xuXG52YXIgbWFuaXB1bGF0aW9uID0ge1xuICBhcHBlbmRTbGlkZSxcbiAgcHJlcGVuZFNsaWRlLFxuICByZW1vdmVTbGlkZSxcbiAgcmVtb3ZlQWxsU2xpZGVzLFxufTtcblxudmFyIG9uVG91Y2hTdGFydCA9IGZ1bmN0aW9uIChldmVudCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgY29uc3QgeyBwYXJhbXMsIHRvdWNoZXMgfSA9IHN3aXBlcjtcbiAgbGV0IGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgZGF0YS5pc1RvdWNoRXZlbnQgPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JztcbiAgaWYgKCFkYXRhLmlzVG91Y2hFdmVudCAmJiAnd2hpY2gnIGluIGUgJiYgZS53aGljaCA9PT0gMykgcmV0dXJuO1xuICBpZiAocGFyYW1zLm5vU3dpcGluZyAmJiAkKGUpLmNsb3Nlc3QoYC4ke3BhcmFtcy5ub1N3aXBpbmdDbGFzc31gKVswXSkge1xuICAgIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmFtcy5zd2lwZUhhbmRsZXIpIHtcbiAgICBpZiAoISQoZSkuY2xvc2VzdChwYXJhbXMuc3dpcGVIYW5kbGVyKVswXSkgcmV0dXJuO1xuICB9XG5cbiAgdG91Y2hlcy5jdXJyZW50WCA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgdG91Y2hlcy5jdXJyZW50WSA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgY29uc3Qgc3RhcnRYID0gdG91Y2hlcy5jdXJyZW50WDtcbiAgY29uc3Qgc3RhcnRZID0gdG91Y2hlcy5jdXJyZW50WTtcblxuICAvLyBEbyBOT1Qgc3RhcnQgaWYgaU9TIGVkZ2Ugc3dpcGUgaXMgZGV0ZWN0ZWQuIE90aGVyd2lzZSBpT1MgYXBwIChVSVdlYlZpZXcpIGNhbm5vdCBzd2lwZS10by1nby1iYWNrIGFueW1vcmVcbiAgaWYgKERldmljZSQxLmlvcyAmJiBwYXJhbXMuaU9TRWRnZVN3aXBlRGV0ZWN0aW9uICYmIHN0YXJ0WCA8PSBwYXJhbXMuaU9TRWRnZVN3aXBlVGhyZXNob2xkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIFV0aWxzLmV4dGVuZChkYXRhLCB7XG4gICAgaXNUb3VjaGVkOiB0cnVlLFxuICAgIGlzTW92ZWQ6IGZhbHNlLFxuICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHRydWUsXG4gICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICBzdGFydE1vdmluZzogdW5kZWZpbmVkLFxuICB9KTtcblxuICB0b3VjaGVzLnN0YXJ0WCA9IHN0YXJ0WDtcbiAgdG91Y2hlcy5zdGFydFkgPSBzdGFydFk7XG4gIGRhdGEudG91Y2hTdGFydFRpbWUgPSBVdGlscy5ub3coKTtcbiAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSB1bmRlZmluZWQ7XG4gIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSBmYWxzZTtcbiAgaWYgKGUudHlwZSAhPT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgbGV0IHByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgICBpZiAoJChlLnRhcmdldCkuaXMoZGF0YS5mb3JtRWxlbWVudHMpKSBwcmV2ZW50RGVmYXVsdCA9IGZhbHNlO1xuICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICQoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkuaXMoZGF0YS5mb3JtRWxlbWVudHMpKSB7XG4gICAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgICB9XG4gICAgaWYgKHByZXZlbnREZWZhdWx0KSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG4gIHN3aXBlci5lbWl0KCd0b3VjaFN0YXJ0JywgZSk7XG59O1xuXG52YXIgb25Ub3VjaE1vdmUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIGNvbnN0IHsgcGFyYW1zLCB0b3VjaGVzLCBydGwgfSA9IHN3aXBlcjtcbiAgbGV0IGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgaWYgKGRhdGEuaXNUb3VjaEV2ZW50ICYmIGUudHlwZSA9PT0gJ21vdXNlbW92ZScpIHJldHVybjtcbiAgY29uc3QgcGFnZVggPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgY29uc3QgcGFnZVkgPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgaWYgKGUucHJldmVudGVkQnlOZXN0ZWRTd2lwZXIpIHtcbiAgICB0b3VjaGVzLnN0YXJ0WCA9IHBhZ2VYO1xuICAgIHRvdWNoZXMuc3RhcnRZID0gcGFnZVk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghc3dpcGVyLmFsbG93VG91Y2hNb3ZlKSB7XG4gICAgLy8gaXNNb3ZlZCA9IHRydWU7XG4gICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICBpZiAoZGF0YS5pc1RvdWNoZWQpIHtcbiAgICAgIFV0aWxzLmV4dGVuZCh0b3VjaGVzLCB7XG4gICAgICAgIHN0YXJ0WDogcGFnZVgsXG4gICAgICAgIHN0YXJ0WTogcGFnZVksXG4gICAgICAgIGN1cnJlbnRYOiBwYWdlWCxcbiAgICAgICAgY3VycmVudFk6IHBhZ2VZLFxuICAgICAgfSk7XG4gICAgICBkYXRhLnRvdWNoU3RhcnRUaW1lID0gVXRpbHMubm93KCk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICBpZiAoZGF0YS5pc1RvdWNoRXZlbnQgJiYgcGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMgJiYgIXBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHN3aXBlci5pc1ZlcnRpY2FsKCkpIHtcbiAgICAgIC8vIFZlcnRpY2FsXG4gICAgICBpZiAoXG4gICAgICAgICh0b3VjaGVzLmN1cnJlbnRZIDwgdG91Y2hlcy5zdGFydFkgJiYgc3dpcGVyLnRyYW5zbGF0ZSA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHx8XG4gICAgICAgICh0b3VjaGVzLmN1cnJlbnRZID4gdG91Y2hlcy5zdGFydFkgJiYgc3dpcGVyLnRyYW5zbGF0ZSA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICAodG91Y2hlcy5jdXJyZW50WCA8IHRvdWNoZXMuc3RhcnRYICYmIHN3aXBlci50cmFuc2xhdGUgPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB8fFxuICAgICAgKHRvdWNoZXMuY3VycmVudFggPiB0b3VjaGVzLnN0YXJ0WCAmJiBzd2lwZXIudHJhbnNsYXRlID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSlcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKGRhdGEuaXNUb3VjaEV2ZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgJChlLnRhcmdldCkuaXMoZGF0YS5mb3JtRWxlbWVudHMpKSB7XG4gICAgICBkYXRhLmlzTW92ZWQgPSB0cnVlO1xuICAgICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmUnLCBlKTtcbiAgfVxuICBpZiAoZS50YXJnZXRUb3VjaGVzICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPiAxKSByZXR1cm47XG5cbiAgdG91Y2hlcy5jdXJyZW50WCA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICB0b3VjaGVzLmN1cnJlbnRZID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG5cbiAgaWYgKHR5cGVvZiBkYXRhLmlzU2Nyb2xsaW5nID09PSAndW5kZWZpbmVkJykge1xuICAgIGxldCB0b3VjaEFuZ2xlO1xuICAgIGlmICgoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIHRvdWNoZXMuY3VycmVudFkgPT09IHRvdWNoZXMuc3RhcnRZKSB8fCAoc3dpcGVyLmlzVmVydGljYWwoKSAmJiB0b3VjaGVzLmN1cnJlbnRYID09PSB0b3VjaGVzLnN0YXJ0WCkpIHtcbiAgICAgIGRhdGEuaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdG91Y2hBbmdsZSA9IChNYXRoLmF0YW4yKE1hdGguYWJzKHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnN0YXJ0WSksIE1hdGguYWJzKHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnN0YXJ0WCkpICogMTgwKSAvIE1hdGguUEk7XG4gICAgICBkYXRhLmlzU2Nyb2xsaW5nID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlIDogKDkwIC0gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlKTtcbiAgICB9XG4gIH1cbiAgaWYgKGRhdGEuaXNTY3JvbGxpbmcpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlT3Bwb3NpdGUnLCBlKTtcbiAgfVxuICBpZiAodHlwZW9mIHN0YXJ0TW92aW5nID09PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0b3VjaGVzLmN1cnJlbnRYICE9PSB0b3VjaGVzLnN0YXJ0WCB8fCB0b3VjaGVzLmN1cnJlbnRZICE9PSB0b3VjaGVzLnN0YXJ0WSkge1xuICAgICAgZGF0YS5zdGFydE1vdmluZyA9IHRydWU7XG4gICAgfVxuICB9XG4gIGlmICghZGF0YS5pc1RvdWNoZWQpIHJldHVybjtcbiAgaWYgKGRhdGEuaXNTY3JvbGxpbmcpIHtcbiAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIWRhdGEuc3RhcnRNb3ZpbmcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICBpZiAocGFyYW1zLnRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbiAmJiAhcGFyYW1zLm5lc3RlZCkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH1cblxuICBpZiAoIWRhdGEuaXNNb3ZlZCkge1xuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICB9XG4gICAgZGF0YS5zdGFydFRyYW5zbGF0ZSA9IHN3aXBlci5nZXRUcmFuc2xhdGUoKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICBpZiAoc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwudHJpZ2dlcignd2Via2l0VHJhbnNpdGlvbkVuZCB0cmFuc2l0aW9uZW5kIG9UcmFuc2l0aW9uRW5kIE1TVHJhbnNpdGlvbkVuZCBtc1RyYW5zaXRpb25FbmQnKTtcbiAgICB9XG4gICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gZmFsc2U7XG4gICAgLy8gR3JhYiBDdXJzb3JcbiAgICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcih0cnVlKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlckZpcnN0TW92ZScsIGUpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzbGlkZXJNb3ZlJywgZSk7XG4gIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG5cbiAgbGV0IGRpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5zdGFydFggOiB0b3VjaGVzLmN1cnJlbnRZIC0gdG91Y2hlcy5zdGFydFk7XG4gIHRvdWNoZXMuZGlmZiA9IGRpZmY7XG5cbiAgZGlmZiAqPSBwYXJhbXMudG91Y2hSYXRpbztcbiAgaWYgKHJ0bCkgZGlmZiA9IC1kaWZmO1xuXG4gIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9IGRpZmYgPiAwID8gJ3ByZXYnIDogJ25leHQnO1xuICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkaWZmICsgZGF0YS5zdGFydFRyYW5zbGF0ZTtcblxuICBsZXQgZGlzYWJsZVBhcmVudFN3aXBlciA9IHRydWU7XG4gIGxldCByZXNpc3RhbmNlUmF0aW8gPSBwYXJhbXMucmVzaXN0YW5jZVJhdGlvO1xuICBpZiAocGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMpIHtcbiAgICByZXNpc3RhbmNlUmF0aW8gPSAwO1xuICB9XG4gIGlmICgoZGlmZiA+IDAgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSkge1xuICAgIGRpc2FibGVQYXJlbnRTd2lwZXIgPSBmYWxzZTtcbiAgICBpZiAocGFyYW1zLnJlc2lzdGFuY2UpIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IChzd2lwZXIubWluVHJhbnNsYXRlKCkgLSAxKSArICgoLXN3aXBlci5taW5UcmFuc2xhdGUoKSArIGRhdGEuc3RhcnRUcmFuc2xhdGUgKyBkaWZmKSAqKiByZXNpc3RhbmNlUmF0aW8pO1xuICB9IGVsc2UgaWYgKGRpZmYgPCAwICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgIGRpc2FibGVQYXJlbnRTd2lwZXIgPSBmYWxzZTtcbiAgICBpZiAocGFyYW1zLnJlc2lzdGFuY2UpIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IChzd2lwZXIubWF4VHJhbnNsYXRlKCkgKyAxKSAtICgoc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gZGF0YS5zdGFydFRyYW5zbGF0ZSAtIGRpZmYpICoqIHJlc2lzdGFuY2VSYXRpbyk7XG4gIH1cblxuICBpZiAoZGlzYWJsZVBhcmVudFN3aXBlcikge1xuICAgIGUucHJldmVudGVkQnlOZXN0ZWRTd2lwZXIgPSB0cnVlO1xuICB9XG5cbiAgLy8gRGlyZWN0aW9ucyBsb2Nrc1xuICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlTmV4dCAmJiBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0JyAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPCBkYXRhLnN0YXJ0VHJhbnNsYXRlKSB7XG4gICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgfVxuICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2JyAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPiBkYXRhLnN0YXJ0VHJhbnNsYXRlKSB7XG4gICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgfVxuXG5cbiAgLy8gVGhyZXNob2xkXG4gIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkge1xuICAgIGlmIChNYXRoLmFicyhkaWZmKSA+IHBhcmFtcy50aHJlc2hvbGQgfHwgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgIGlmICghZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgICAgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSB0cnVlO1xuICAgICAgICB0b3VjaGVzLnN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7XG4gICAgICAgIHRvdWNoZXMuc3RhcnRZID0gdG91Y2hlcy5jdXJyZW50WTtcbiAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgICAgdG91Y2hlcy5kaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMuc3RhcnRYIDogdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKCFwYXJhbXMuZm9sbG93RmluZ2VyKSByZXR1cm47XG5cbiAgLy8gVXBkYXRlIGFjdGl2ZSBpbmRleCBpbiBmcmVlIG1vZGVcbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSB8fCBwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSB7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICBzd2lwZXIudXBkYXRlUmVhbEluZGV4KCk7XG4gIH1cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSkge1xuICAgIC8vIFZlbG9jaXR5XG4gICAgaWYgKGRhdGEudmVsb2NpdGllcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGRhdGEudmVsb2NpdGllcy5wdXNoKHtcbiAgICAgICAgcG9zaXRpb246IHRvdWNoZXNbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3N0YXJ0WCcgOiAnc3RhcnRZJ10sXG4gICAgICAgIHRpbWU6IGRhdGEudG91Y2hTdGFydFRpbWUsXG4gICAgICB9KTtcbiAgICB9XG4gICAgZGF0YS52ZWxvY2l0aWVzLnB1c2goe1xuICAgICAgcG9zaXRpb246IHRvdWNoZXNbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2N1cnJlbnRYJyA6ICdjdXJyZW50WSddLFxuICAgICAgdGltZTogVXRpbHMubm93KCksXG4gICAgfSk7XG4gIH1cbiAgLy8gVXBkYXRlIHByb2dyZXNzXG4gIHN3aXBlci51cGRhdGVQcm9ncmVzcyhkYXRhLmN1cnJlbnRUcmFuc2xhdGUpO1xuICAvLyBVcGRhdGUgdHJhbnNsYXRlXG4gIHN3aXBlci5zZXRUcmFuc2xhdGUoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTtcbn07XG5cbnZhciBvblRvdWNoRW5kID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuXG4gIGNvbnN0IHsgcGFyYW1zLCB0b3VjaGVzLCBydGwsICR3cmFwcGVyRWwsIHNsaWRlc0dyaWQsIHNuYXBHcmlkIH0gPSBzd2lwZXI7XG4gIGxldCBlID0gZXZlbnQ7XG4gIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gIGlmIChkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hFbmQnLCBlKTtcbiAgfVxuICBkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MgPSBmYWxzZTtcbiAgaWYgKCFkYXRhLmlzVG91Y2hlZCkgcmV0dXJuO1xuICAvLyBSZXR1cm4gR3JhYiBDdXJzb3JcbiAgaWYgKHBhcmFtcy5ncmFiQ3Vyc29yICYmIGRhdGEuaXNNb3ZlZCAmJiBkYXRhLmlzVG91Y2hlZCAmJiAoc3dpcGVyLmFsbG93U2xpZGVOZXh0ID09PSB0cnVlIHx8IHN3aXBlci5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkpIHtcbiAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gIH1cblxuICAvLyBUaW1lIGRpZmZcbiAgY29uc3QgdG91Y2hFbmRUaW1lID0gVXRpbHMubm93KCk7XG4gIGNvbnN0IHRpbWVEaWZmID0gdG91Y2hFbmRUaW1lIC0gZGF0YS50b3VjaFN0YXJ0VGltZTtcblxuICAvLyBUYXAsIGRvdWJsZVRhcCwgQ2xpY2tcbiAgaWYgKHN3aXBlci5hbGxvd0NsaWNrKSB7XG4gICAgc3dpcGVyLnVwZGF0ZUNsaWNrZWRTbGlkZShlKTtcbiAgICBzd2lwZXIuZW1pdCgndGFwJywgZSk7XG4gICAgaWYgKHRpbWVEaWZmIDwgMzAwICYmICh0b3VjaEVuZFRpbWUgLSBkYXRhLmxhc3RDbGlja1RpbWUpID4gMzAwKSB7XG4gICAgICBpZiAoZGF0YS5jbGlja1RpbWVvdXQpIGNsZWFyVGltZW91dChkYXRhLmNsaWNrVGltZW91dCk7XG4gICAgICBkYXRhLmNsaWNrVGltZW91dCA9IFV0aWxzLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgaWYgKCFzd2lwZXIpIHJldHVybjtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ2NsaWNrJywgZSk7XG4gICAgICB9LCAzMDApO1xuICAgIH1cbiAgICBpZiAodGltZURpZmYgPCAzMDAgJiYgKHRvdWNoRW5kVGltZSAtIGRhdGEubGFzdENsaWNrVGltZSkgPCAzMDApIHtcbiAgICAgIGlmIChkYXRhLmNsaWNrVGltZW91dCkgY2xlYXJUaW1lb3V0KGRhdGEuY2xpY2tUaW1lb3V0KTtcbiAgICAgIHN3aXBlci5lbWl0KCdkb3VibGVUYXAnLCBlKTtcbiAgICB9XG4gIH1cblxuICBkYXRhLmxhc3RDbGlja1RpbWUgPSBVdGlscy5ub3coKTtcbiAgVXRpbHMubmV4dFRpY2soKCkgPT4ge1xuICAgIGlmIChzd2lwZXIpIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgfSk7XG5cbiAgaWYgKCFkYXRhLmlzVG91Y2hlZCB8fCAhZGF0YS5pc01vdmVkIHx8ICFzd2lwZXIuc3dpcGVEaXJlY3Rpb24gfHwgdG91Y2hlcy5kaWZmID09PSAwIHx8IGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9PT0gZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG4gIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuXG4gIGxldCBjdXJyZW50UG9zO1xuICBpZiAocGFyYW1zLmZvbGxvd0Zpbmdlcikge1xuICAgIGN1cnJlbnRQb3MgPSBydGwgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIH0gZWxzZSB7XG4gICAgY3VycmVudFBvcyA9IC1kYXRhLmN1cnJlbnRUcmFuc2xhdGU7XG4gIH1cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSkge1xuICAgIGlmIChjdXJyZW50UG9zIDwgLXN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRQb3MgPiAtc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICBpZiAoc3dpcGVyLnNsaWRlcy5sZW5ndGggPCBzbmFwR3JpZC5sZW5ndGgpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc25hcEdyaWQubGVuZ3RoIC0gMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMuZnJlZU1vZGVNb21lbnR1bSkge1xuICAgICAgaWYgKGRhdGEudmVsb2NpdGllcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvbnN0IGxhc3RNb3ZlRXZlbnQgPSBkYXRhLnZlbG9jaXRpZXMucG9wKCk7XG4gICAgICAgIGNvbnN0IHZlbG9jaXR5RXZlbnQgPSBkYXRhLnZlbG9jaXRpZXMucG9wKCk7XG5cbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBsYXN0TW92ZUV2ZW50LnBvc2l0aW9uIC0gdmVsb2NpdHlFdmVudC5wb3NpdGlvbjtcbiAgICAgICAgY29uc3QgdGltZSA9IGxhc3RNb3ZlRXZlbnQudGltZSAtIHZlbG9jaXR5RXZlbnQudGltZTtcbiAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gZGlzdGFuY2UgLyB0aW1lO1xuICAgICAgICBzd2lwZXIudmVsb2NpdHkgLz0gMjtcbiAgICAgICAgaWYgKE1hdGguYWJzKHN3aXBlci52ZWxvY2l0eSkgPCBwYXJhbXMuZnJlZU1vZGVNaW5pbXVtVmVsb2NpdHkpIHtcbiAgICAgICAgICBzd2lwZXIudmVsb2NpdHkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRoaXMgaW1wbGllcyB0aGF0IHRoZSB1c2VyIHN0b3BwZWQgbW92aW5nIGEgZmluZ2VyIHRoZW4gcmVsZWFzZWQuXG4gICAgICAgIC8vIFRoZXJlIHdvdWxkIGJlIG5vIGV2ZW50cyB3aXRoIGRpc3RhbmNlIHplcm8sIHNvIHRoZSBsYXN0IGV2ZW50IGlzIHN0YWxlLlxuICAgICAgICBpZiAodGltZSA+IDE1MCB8fCAoVXRpbHMubm93KCkgLSBsYXN0TW92ZUV2ZW50LnRpbWUpID4gMzAwKSB7XG4gICAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gMDtcbiAgICAgIH1cbiAgICAgIHN3aXBlci52ZWxvY2l0eSAqPSBwYXJhbXMuZnJlZU1vZGVNb21lbnR1bVZlbG9jaXR5UmF0aW87XG5cbiAgICAgIGRhdGEudmVsb2NpdGllcy5sZW5ndGggPSAwO1xuICAgICAgbGV0IG1vbWVudHVtRHVyYXRpb24gPSAxMDAwICogcGFyYW1zLmZyZWVNb2RlTW9tZW50dW1SYXRpbztcbiAgICAgIGNvbnN0IG1vbWVudHVtRGlzdGFuY2UgPSBzd2lwZXIudmVsb2NpdHkgKiBtb21lbnR1bUR1cmF0aW9uO1xuXG4gICAgICBsZXQgbmV3UG9zaXRpb24gPSBzd2lwZXIudHJhbnNsYXRlICsgbW9tZW50dW1EaXN0YW5jZTtcbiAgICAgIGlmIChydGwpIG5ld1Bvc2l0aW9uID0gLW5ld1Bvc2l0aW9uO1xuICAgICAgbGV0IGRvQm91bmNlID0gZmFsc2U7XG4gICAgICBsZXQgYWZ0ZXJCb3VuY2VQb3NpdGlvbjtcbiAgICAgIGNvbnN0IGJvdW5jZUFtb3VudCA9IE1hdGguYWJzKHN3aXBlci52ZWxvY2l0eSkgKiAyMCAqIHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtQm91bmNlUmF0aW87XG4gICAgICBpZiAobmV3UG9zaXRpb24gPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtQm91bmNlKSB7XG4gICAgICAgICAgaWYgKG5ld1Bvc2l0aW9uICsgc3dpcGVyLm1heFRyYW5zbGF0ZSgpIDwgLWJvdW5jZUFtb3VudCkge1xuICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBib3VuY2VBbW91bnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFmdGVyQm91bmNlUG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgICAgICAgZG9Cb3VuY2UgPSB0cnVlO1xuICAgICAgICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobmV3UG9zaXRpb24gPiBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtQm91bmNlKSB7XG4gICAgICAgICAgaWYgKG5ld1Bvc2l0aW9uIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpID4gYm91bmNlQW1vdW50KSB7XG4gICAgICAgICAgICBuZXdQb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKSArIGJvdW5jZUFtb3VudDtcbiAgICAgICAgICB9XG4gICAgICAgICAgYWZ0ZXJCb3VuY2VQb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICAgICAgICBkb0JvdW5jZSA9IHRydWU7XG4gICAgICAgICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdQb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcbiAgICAgICAgbGV0IG5leHRTbGlkZTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzbmFwR3JpZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIGlmIChzbmFwR3JpZFtqXSA+IC1uZXdQb3NpdGlvbikge1xuICAgICAgICAgICAgbmV4dFNsaWRlID0gajtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoTWF0aC5hYnMoc25hcEdyaWRbbmV4dFNsaWRlXSAtIG5ld1Bvc2l0aW9uKSA8IE1hdGguYWJzKHNuYXBHcmlkW25leHRTbGlkZSAtIDFdIC0gbmV3UG9zaXRpb24pIHx8IHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgICAgbmV3UG9zaXRpb24gPSBzbmFwR3JpZFtuZXh0U2xpZGVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc25hcEdyaWRbbmV4dFNsaWRlIC0gMV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFydGwpIG5ld1Bvc2l0aW9uID0gLW5ld1Bvc2l0aW9uO1xuICAgICAgfVxuICAgICAgLy8gRml4IGR1cmF0aW9uXG4gICAgICBpZiAoc3dpcGVyLnZlbG9jaXR5ICE9PSAwKSB7XG4gICAgICAgIGlmIChydGwpIHtcbiAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gTWF0aC5hYnMoKC1uZXdQb3NpdGlvbiAtIHN3aXBlci50cmFuc2xhdGUpIC8gc3dpcGVyLnZlbG9jaXR5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gTWF0aC5hYnMoKG5ld1Bvc2l0aW9uIC0gc3dpcGVyLnRyYW5zbGF0ZSkgLyBzd2lwZXIudmVsb2NpdHkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICBzd2lwZXIuc2xpZGVSZXNldCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJhbXMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZSAmJiBkb0JvdW5jZSkge1xuICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoYWZ0ZXJCb3VuY2VQb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKG1vbWVudHVtRHVyYXRpb24pO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1Bvc2l0aW9uKTtcbiAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydCgpO1xuICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uRW5kKCgpID0+IHtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCAhZGF0YS5hbGxvd01vbWVudHVtQm91bmNlKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ21vbWVudHVtQm91bmNlJyk7XG5cbiAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihwYXJhbXMuc3BlZWQpO1xuICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoYWZ0ZXJCb3VuY2VQb3NpdGlvbik7XG4gICAgICAgICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uRW5kKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghc3dpcGVyKSByZXR1cm47XG4gICAgICAgICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLnZlbG9jaXR5KSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhuZXdQb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKG1vbWVudHVtRHVyYXRpb24pO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1Bvc2l0aW9uKTtcbiAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydCgpO1xuICAgICAgICBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAkd3JhcHBlckVsLnRyYW5zaXRpb25FbmQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFzd2lwZXIpIHJldHVybjtcbiAgICAgICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhuZXdQb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgIHN3aXBlci51cGRhdGVSZWFsSW5kZXgoKTtcbiAgICB9XG4gICAgaWYgKCFwYXJhbXMuZnJlZU1vZGVNb21lbnR1bSB8fCB0aW1lRGlmZiA+PSBwYXJhbXMubG9uZ1N3aXBlc01zKSB7XG4gICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgIHN3aXBlci51cGRhdGVSZWFsSW5kZXgoKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRmluZCBjdXJyZW50IHNsaWRlXG4gIGxldCBzdG9wSW5kZXggPSAwO1xuICBsZXQgZ3JvdXBTaXplID0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFswXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXApIHtcbiAgICBpZiAodHlwZW9mIHNsaWRlc0dyaWRbaSArIHBhcmFtcy5zbGlkZXNQZXJHcm91cF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAoY3VycmVudFBvcyA+PSBzbGlkZXNHcmlkW2ldICYmIGN1cnJlbnRQb3MgPCBzbGlkZXNHcmlkW2kgKyBwYXJhbXMuc2xpZGVzUGVyR3JvdXBdKSB7XG4gICAgICAgIHN0b3BJbmRleCA9IGk7XG4gICAgICAgIGdyb3VwU2l6ZSA9IHNsaWRlc0dyaWRbaSArIHBhcmFtcy5zbGlkZXNQZXJHcm91cF0gLSBzbGlkZXNHcmlkW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY3VycmVudFBvcyA+PSBzbGlkZXNHcmlkW2ldKSB7XG4gICAgICBzdG9wSW5kZXggPSBpO1xuICAgICAgZ3JvdXBTaXplID0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDFdIC0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDJdO1xuICAgIH1cbiAgfVxuXG4gIC8vIEZpbmQgY3VycmVudCBzbGlkZSBzaXplXG4gIGNvbnN0IHJhdGlvID0gKGN1cnJlbnRQb3MgLSBzbGlkZXNHcmlkW3N0b3BJbmRleF0pIC8gZ3JvdXBTaXplO1xuXG4gIGlmICh0aW1lRGlmZiA+IHBhcmFtcy5sb25nU3dpcGVzTXMpIHtcbiAgICAvLyBMb25nIHRvdWNoZXNcbiAgICBpZiAoIXBhcmFtcy5sb25nU3dpcGVzKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgIGlmIChyYXRpbyA+PSBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICAgICAgZWxzZSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgIGlmIChyYXRpbyA+ICgxIC0gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykpIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgICBlbHNlIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFNob3J0IHN3aXBlc1xuICAgIGlmICghcGFyYW1zLnNob3J0U3dpcGVzKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBvblJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICBjb25zdCB7IHBhcmFtcywgZWwsIGFsbG93U2xpZGVOZXh0LCBhbGxvd1NsaWRlUHJldiB9ID0gc3dpcGVyO1xuXG4gIGlmIChlbCAmJiBlbC5vZmZzZXRXaWR0aCA9PT0gMCkgcmV0dXJuO1xuXG4gIC8vIEJyZWFrcG9pbnRzXG4gIGlmIChwYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICB9XG5cbiAgLy8gRGlzYWJsZSBsb2NrcyBvbiByZXNpemVcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gdHJ1ZTtcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gdHJ1ZTtcblxuICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG5cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSkge1xuICAgIGNvbnN0IG5ld1RyYW5zbGF0ZSA9IE1hdGgubWluKE1hdGgubWF4KHN3aXBlci50cmFuc2xhdGUsIHN3aXBlci5tYXhUcmFuc2xhdGUoKSksIHN3aXBlci5taW5UcmFuc2xhdGUoKSk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVJlYWxJbmRleCgpO1xuXG4gICAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIGlmICgocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyB8fCBwYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgIH1cbiAgfVxuICAvLyBSZXR1cm4gbG9ja3MgYWZ0ZXIgcmVzaXplXG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcbn07XG5cbnZhciBvbkNsaWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIuYWxsb3dDbGljaykge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZXZlbnRDbGlja3MpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24gJiYgc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBhdHRhY2hFdmVudHMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG5cbiAgY29uc3QgeyBwYXJhbXMsIHRvdWNoRXZlbnRzLCBlbCwgd3JhcHBlckVsIH0gPSBzd2lwZXI7XG5cbiAge1xuICAgIHN3aXBlci5vblRvdWNoU3RhcnQgPSBvblRvdWNoU3RhcnQuYmluZChzd2lwZXIpO1xuICAgIHN3aXBlci5vblRvdWNoTW92ZSA9IG9uVG91Y2hNb3ZlLmJpbmQoc3dpcGVyKTtcbiAgICBzd2lwZXIub25Ub3VjaEVuZCA9IG9uVG91Y2hFbmQuYmluZChzd2lwZXIpO1xuICB9XG5cbiAgc3dpcGVyLm9uQ2xpY2sgPSBvbkNsaWNrLmJpbmQoc3dpcGVyKTtcblxuICBjb25zdCB0YXJnZXQgPSBwYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICdjb250YWluZXInID8gZWwgOiB3cmFwcGVyRWw7XG4gIGNvbnN0IGNhcHR1cmUgPSAhIXBhcmFtcy5uZXN0ZWQ7XG5cbiAgLy8gVG91Y2ggRXZlbnRzXG4gIHtcbiAgICBpZiAoQnJvd3NlciQxLmllKSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgICAgKFN1cHBvcnQkNC50b3VjaCA/IHRhcmdldCA6IGRvY3VtZW50KS5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLm1vdmUsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgICAoU3VwcG9ydCQ0LnRvdWNoID8gdGFyZ2V0IDogZG9jdW1lbnQpLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuZW5kLCBzd2lwZXIub25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoU3VwcG9ydCQ0LnRvdWNoKSB7XG4gICAgICAgIGNvbnN0IHBhc3NpdmVMaXN0ZW5lciA9IHRvdWNoRXZlbnRzLnN0YXJ0ID09PSAnb25Ub3VjaFN0YXJ0JyAmJiBTdXBwb3J0JDQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8geyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiBmYWxzZSB9IDogZmFsc2U7XG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5tb3ZlLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5lbmQsIHN3aXBlci5vblRvdWNoRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgaWYgKChwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhRGV2aWNlJDEuaW9zICYmICFEZXZpY2UkMS5hbmRyb2lkKSB8fCAocGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgIVN1cHBvcnQkNC50b3VjaCAmJiBEZXZpY2UkMS5pb3MpKSB7XG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBzd2lwZXIub25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBQcmV2ZW50IExpbmtzIENsaWNrc1xuICAgIGlmIChwYXJhbXMucHJldmVudENsaWNrcyB8fCBwYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzd2lwZXIub25DbGljaywgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgLy8gUmVzaXplIGhhbmRsZXJcbiAgc3dpcGVyLm9uKCdyZXNpemUgb2JzZXJ2ZXJVcGRhdGUnLCBvblJlc2l6ZSk7XG59XG5cbmZ1bmN0aW9uIGRldGFjaEV2ZW50cygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICBjb25zdCB7IHBhcmFtcywgdG91Y2hFdmVudHMsIGVsLCB3cmFwcGVyRWwgfSA9IHN3aXBlcjtcblxuICBjb25zdCB0YXJnZXQgPSBwYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICdjb250YWluZXInID8gZWwgOiB3cmFwcGVyRWw7XG4gIGNvbnN0IGNhcHR1cmUgPSAhIXBhcmFtcy5uZXN0ZWQ7XG5cbiAgLy8gVG91Y2ggRXZlbnRzXG4gIHtcbiAgICBpZiAoQnJvd3NlciQxLmllKSB7XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgICAgKFN1cHBvcnQkNC50b3VjaCA/IHRhcmdldCA6IGRvY3VtZW50KS5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLm1vdmUsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgICAoU3VwcG9ydCQ0LnRvdWNoID8gdGFyZ2V0IDogZG9jdW1lbnQpLnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuZW5kLCBzd2lwZXIub25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoU3VwcG9ydCQ0LnRvdWNoKSB7XG4gICAgICAgIGNvbnN0IHBhc3NpdmVMaXN0ZW5lciA9IHRvdWNoRXZlbnRzLnN0YXJ0ID09PSAnb25Ub3VjaFN0YXJ0JyAmJiBTdXBwb3J0JDQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8geyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiBmYWxzZSB9IDogZmFsc2U7XG4gICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5tb3ZlLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5lbmQsIHN3aXBlci5vblRvdWNoRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgaWYgKChwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhRGV2aWNlJDEuaW9zICYmICFEZXZpY2UkMS5hbmRyb2lkKSB8fCAocGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgIVN1cHBvcnQkNC50b3VjaCAmJiBEZXZpY2UkMS5pb3MpKSB7XG4gICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBzd2lwZXIub25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBQcmV2ZW50IExpbmtzIENsaWNrc1xuICAgIGlmIChwYXJhbXMucHJldmVudENsaWNrcyB8fCBwYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSB7XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzd2lwZXIub25DbGljaywgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgLy8gUmVzaXplIGhhbmRsZXJcbiAgc3dpcGVyLm9mZigncmVzaXplIG9ic2VydmVyVXBkYXRlJywgb25SZXNpemUpO1xufVxuXG52YXIgZXZlbnRzID0ge1xuICBhdHRhY2hFdmVudHMsXG4gIGRldGFjaEV2ZW50cyxcbn07XG5cbmZ1bmN0aW9uIGdldEJyZWFrcG9pbnQoYnJlYWtwb2ludHMpIHtcbiAgLy8gR2V0IGJyZWFrcG9pbnQgZm9yIHdpbmRvdyB3aWR0aFxuICBpZiAoIWJyZWFrcG9pbnRzKSByZXR1cm4gdW5kZWZpbmVkO1xuICBsZXQgYnJlYWtwb2ludCA9IGZhbHNlO1xuICBjb25zdCBwb2ludHMgPSBbXTtcbiAgT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLmZvckVhY2goKHBvaW50KSA9PiB7XG4gICAgcG9pbnRzLnB1c2gocG9pbnQpO1xuICB9KTtcbiAgcG9pbnRzLnNvcnQoKGEsIGIpID0+IHBhcnNlSW50KGEsIDEwKSA+IHBhcnNlSW50KGIsIDEwKSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgaWYgKHBvaW50ID49IHdpbmRvdy5pbm5lcldpZHRoICYmICFicmVha3BvaW50KSB7XG4gICAgICBicmVha3BvaW50ID0gcG9pbnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBicmVha3BvaW50IHx8ICdtYXgnO1xufVxuXG52YXIgc2V0QnJlYWtwb2ludCA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgeyBhY3RpdmVJbmRleCwgbG9vcGVkU2xpZGVzLCBwYXJhbXMgfSA9IHN3aXBlcjtcbiAgY29uc3QgYnJlYWtwb2ludHMgPSBwYXJhbXMuYnJlYWtwb2ludHM7XG4gIGlmICghYnJlYWtwb2ludHMgfHwgKGJyZWFrcG9pbnRzICYmIE9iamVjdC5rZXlzKGJyZWFrcG9pbnRzKS5sZW5ndGggPT09IDApKSByZXR1cm47XG4gIC8vIFNldCBicmVha3BvaW50IGZvciB3aW5kb3cgd2lkdGggYW5kIHVwZGF0ZSBwYXJhbWV0ZXJzXG4gIGNvbnN0IGJyZWFrcG9pbnQgPSBnZXRCcmVha3BvaW50KGJyZWFrcG9pbnRzKTtcbiAgaWYgKGJyZWFrcG9pbnQgJiYgc3dpcGVyLmN1cnJlbnRCcmVha3BvaW50ICE9PSBicmVha3BvaW50KSB7XG4gICAgY29uc3QgYnJlYWtQb2ludHNQYXJhbXMgPSBicmVha3BvaW50IGluIGJyZWFrcG9pbnRzID8gYnJlYWtwb2ludHNbYnJlYWtwb2ludF0gOiBzd2lwZXIub3JpZ2luYWxQYXJhbXM7XG4gICAgY29uc3QgbmVlZHNSZUxvb3AgPSBwYXJhbXMubG9vcCAmJiAoYnJlYWtQb2ludHNQYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gcGFyYW1zLnNsaWRlc1BlclZpZXcpO1xuXG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5wYXJhbXMsIGJyZWFrUG9pbnRzUGFyYW1zKTtcblxuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuICAgICAgYWxsb3dTbGlkZU5leHQ6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZU5leHQsXG4gICAgICBhbGxvd1NsaWRlUHJldjogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlUHJldixcbiAgICB9KTtcblxuICAgIHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCA9IGJyZWFrcG9pbnQ7XG5cbiAgICBpZiAobmVlZHNSZUxvb3ApIHtcbiAgICAgIGNvbnN0IG9sZEluZGV4ID0gYWN0aXZlSW5kZXggLSBsb29wZWRTbGlkZXM7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhvbGRJbmRleCArIGxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICAgIH1cbiAgfVxufTtcblxudmFyIGJyZWFrcG9pbnRzID0geyBzZXRCcmVha3BvaW50IH07XG5cbnZhciBhZGRDbGFzc2VzID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7IGNsYXNzTmFtZXMsIHBhcmFtcywgcnRsLCAkZWwgfSA9IHN3aXBlcjtcbiAgY29uc3Qgc3VmZml4ZXMgPSBbXTtcblxuICBzdWZmaXhlcy5wdXNoKHBhcmFtcy5kaXJlY3Rpb24pO1xuXG4gIGlmIChwYXJhbXMuZnJlZU1vZGUpIHtcbiAgICBzdWZmaXhlcy5wdXNoKCdmcmVlLW1vZGUnKTtcbiAgfVxuICBpZiAoIVN1cHBvcnQkNC5mbGV4Ym94KSB7XG4gICAgc3VmZml4ZXMucHVzaCgnbm8tZmxleGJveCcpO1xuICB9XG4gIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgIHN1ZmZpeGVzLnB1c2goJ2F1dG9oZWlnaHQnKTtcbiAgfVxuICBpZiAocnRsKSB7XG4gICAgc3VmZml4ZXMucHVzaCgncnRsJyk7XG4gIH1cbiAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgc3VmZml4ZXMucHVzaCgnbXVsdGlyb3cnKTtcbiAgfVxuICBpZiAoRGV2aWNlJDEuYW5kcm9pZCkge1xuICAgIHN1ZmZpeGVzLnB1c2goJ2FuZHJvaWQnKTtcbiAgfVxuICBpZiAoRGV2aWNlJDEuaW9zKSB7XG4gICAgc3VmZml4ZXMucHVzaCgnaW9zJyk7XG4gIH1cbiAgLy8gV1A4IFRvdWNoIEV2ZW50cyBGaXhcbiAgaWYgKHdpbmRvdy5uYXZpZ2F0b3IucG9pbnRlckVuYWJsZWQgfHwgd2luZG93Lm5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkKSB7XG4gICAgc3VmZml4ZXMucHVzaChgd3A4LSR7cGFyYW1zLmRpcmVjdGlvbn1gKTtcbiAgfVxuXG4gIHN1ZmZpeGVzLmZvckVhY2goKHN1ZmZpeCkgPT4ge1xuICAgIGNsYXNzTmFtZXMucHVzaChwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIHN1ZmZpeCk7XG4gIH0pO1xuXG4gICRlbC5hZGRDbGFzcyhjbGFzc05hbWVzLmpvaW4oJyAnKSk7XG59O1xuXG52YXIgcmVtb3ZlQ2xhc3NlcyA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgeyAkZWwsIGNsYXNzTmFtZXMgfSA9IHN3aXBlcjtcblxuICAkZWwucmVtb3ZlQ2xhc3MoY2xhc3NOYW1lcy5qb2luKCcgJykpO1xufTtcblxudmFyIGNsYXNzZXMgPSB7IGFkZENsYXNzZXMsIHJlbW92ZUNsYXNzZXMgfTtcblxudmFyIGxvYWRJbWFnZSA9IGZ1bmN0aW9uIChpbWFnZUVsLCBzcmMsIHNyY3NldCwgc2l6ZXMsIGNoZWNrRm9yQ29tcGxldGUsIGNhbGxiYWNrKSB7XG4gIGxldCBpbWFnZTtcbiAgZnVuY3Rpb24gb25SZWFkeSgpIHtcbiAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gIH1cbiAgaWYgKCFpbWFnZUVsLmNvbXBsZXRlIHx8ICFjaGVja0ZvckNvbXBsZXRlKSB7XG4gICAgaWYgKHNyYykge1xuICAgICAgaW1hZ2UgPSBuZXcgd2luZG93LkltYWdlKCk7XG4gICAgICBpbWFnZS5vbmxvYWQgPSBvblJlYWR5O1xuICAgICAgaW1hZ2Uub25lcnJvciA9IG9uUmVhZHk7XG4gICAgICBpZiAoc2l6ZXMpIHtcbiAgICAgICAgaW1hZ2Uuc2l6ZXMgPSBzaXplcztcbiAgICAgIH1cbiAgICAgIGlmIChzcmNzZXQpIHtcbiAgICAgICAgaW1hZ2Uuc3Jjc2V0ID0gc3Jjc2V0O1xuICAgICAgfVxuICAgICAgaWYgKHNyYykge1xuICAgICAgICBpbWFnZS5zcmMgPSBzcmM7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uUmVhZHkoKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gaW1hZ2UgYWxyZWFkeSBsb2FkZWQuLi5cbiAgICBvblJlYWR5KCk7XG4gIH1cbn07XG5cbnZhciBwcmVsb2FkSW1hZ2VzID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBzd2lwZXIuaW1hZ2VzVG9Mb2FkID0gc3dpcGVyLiRlbC5maW5kKCdpbWcnKTtcbiAgZnVuY3Rpb24gb25SZWFkeSgpIHtcbiAgICBpZiAodHlwZW9mIHN3aXBlciA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyID09PSBudWxsIHx8ICFzd2lwZXIpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLmltYWdlc0xvYWRlZCAhPT0gdW5kZWZpbmVkKSBzd2lwZXIuaW1hZ2VzTG9hZGVkICs9IDE7XG4gICAgaWYgKHN3aXBlci5pbWFnZXNMb2FkZWQgPT09IHN3aXBlci5pbWFnZXNUb0xvYWQubGVuZ3RoKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy51cGRhdGVPbkltYWdlc1JlYWR5KSBzd2lwZXIudXBkYXRlKCk7XG4gICAgICBzd2lwZXIuZW1pdCgnaW1hZ2VzUmVhZHknKTtcbiAgICB9XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXIuaW1hZ2VzVG9Mb2FkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgaW1hZ2VFbCA9IHN3aXBlci5pbWFnZXNUb0xvYWRbaV07XG4gICAgc3dpcGVyLmxvYWRJbWFnZShcbiAgICAgIGltYWdlRWwsXG4gICAgICBpbWFnZUVsLmN1cnJlbnRTcmMgfHwgaW1hZ2VFbC5nZXRBdHRyaWJ1dGUoJ3NyYycpLFxuICAgICAgaW1hZ2VFbC5zcmNzZXQgfHwgaW1hZ2VFbC5nZXRBdHRyaWJ1dGUoJ3NyY3NldCcpLFxuICAgICAgaW1hZ2VFbC5zaXplcyB8fCBpbWFnZUVsLmdldEF0dHJpYnV0ZSgnc2l6ZXMnKSxcbiAgICAgIHRydWUsXG4gICAgICBvblJlYWR5XG4gICAgKTtcbiAgfVxufTtcblxudmFyIGltYWdlcyA9IHtcbiAgbG9hZEltYWdlLFxuICBwcmVsb2FkSW1hZ2VzLFxufTtcblxudmFyIGRlZmF1bHRzID0ge1xuICBpbml0OiB0cnVlLFxuICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcbiAgdG91Y2hFdmVudHNUYXJnZXQ6ICdjb250YWluZXInLFxuICBpbml0aWFsU2xpZGU6IDAsXG4gIHNwZWVkOiAzMDAsXG5cbiAgLy8gVG8gc3VwcG9ydCBpT1MncyBzd2lwZS10by1nby1iYWNrIGdlc3R1cmUgKHdoZW4gYmVpbmcgdXNlZCBpbi1hcHAsIHdpdGggVUlXZWJWaWV3KS5cbiAgaU9TRWRnZVN3aXBlRGV0ZWN0aW9uOiBmYWxzZSxcbiAgaU9TRWRnZVN3aXBlVGhyZXNob2xkOiAyMCxcblxuICAvLyBGcmVlIG1vZGVcbiAgZnJlZU1vZGU6IGZhbHNlLFxuICBmcmVlTW9kZU1vbWVudHVtOiB0cnVlLFxuICBmcmVlTW9kZU1vbWVudHVtUmF0aW86IDEsXG4gIGZyZWVNb2RlTW9tZW50dW1Cb3VuY2U6IHRydWUsXG4gIGZyZWVNb2RlTW9tZW50dW1Cb3VuY2VSYXRpbzogMSxcbiAgZnJlZU1vZGVNb21lbnR1bVZlbG9jaXR5UmF0aW86IDEsXG4gIGZyZWVNb2RlU3RpY2t5OiBmYWxzZSxcbiAgZnJlZU1vZGVNaW5pbXVtVmVsb2NpdHk6IDAuMDIsXG5cbiAgLy8gQXV0b2hlaWdodFxuICBhdXRvSGVpZ2h0OiBmYWxzZSxcblxuICAvLyBTZXQgd3JhcHBlciB3aWR0aFxuICBzZXRXcmFwcGVyU2l6ZTogZmFsc2UsXG5cbiAgLy8gVmlydHVhbCBUcmFuc2xhdGVcbiAgdmlydHVhbFRyYW5zbGF0ZTogZmFsc2UsXG5cbiAgLy8gRWZmZWN0c1xuICBlZmZlY3Q6ICdzbGlkZScsIC8vICdzbGlkZScgb3IgJ2ZhZGUnIG9yICdjdWJlJyBvciAnY292ZXJmbG93JyBvciAnZmxpcCdcblxuICAvLyBCcmVha3BvaW50c1xuICBicmVha3BvaW50czogdW5kZWZpbmVkLFxuXG4gIC8vIFNsaWRlcyBncmlkXG4gIHNwYWNlQmV0d2VlbjogMCxcbiAgc2xpZGVzUGVyVmlldzogMSxcbiAgc2xpZGVzUGVyQ29sdW1uOiAxLFxuICBzbGlkZXNQZXJDb2x1bW5GaWxsOiAnY29sdW1uJyxcbiAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gIGNlbnRlcmVkU2xpZGVzOiBmYWxzZSxcbiAgc2xpZGVzT2Zmc2V0QmVmb3JlOiAwLCAvLyBpbiBweFxuICBzbGlkZXNPZmZzZXRBZnRlcjogMCwgLy8gaW4gcHhcbiAgbm9ybWFsaXplU2xpZGVJbmRleDogdHJ1ZSxcblxuICAvLyBSb3VuZCBsZW5ndGhcbiAgcm91bmRMZW5ndGhzOiBmYWxzZSxcblxuICAvLyBUb3VjaGVzXG4gIHRvdWNoUmF0aW86IDEsXG4gIHRvdWNoQW5nbGU6IDQ1LFxuICBzaW11bGF0ZVRvdWNoOiB0cnVlLFxuICBzaG9ydFN3aXBlczogdHJ1ZSxcbiAgbG9uZ1N3aXBlczogdHJ1ZSxcbiAgbG9uZ1N3aXBlc1JhdGlvOiAwLjUsXG4gIGxvbmdTd2lwZXNNczogMzAwLFxuICBmb2xsb3dGaW5nZXI6IHRydWUsXG4gIGFsbG93VG91Y2hNb3ZlOiB0cnVlLFxuICB0aHJlc2hvbGQ6IDAsXG4gIHRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbjogdHJ1ZSxcbiAgdG91Y2hSZWxlYXNlT25FZGdlczogZmFsc2UsXG5cbiAgLy8gVW5pcXVlIE5hdmlnYXRpb24gRWxlbWVudHNcbiAgdW5pcXVlTmF2RWxlbWVudHM6IHRydWUsXG5cbiAgLy8gUmVzaXN0YW5jZVxuICByZXNpc3RhbmNlOiB0cnVlLFxuICByZXNpc3RhbmNlUmF0aW86IDAuODUsXG5cbiAgLy8gUHJvZ3Jlc3NcbiAgd2F0Y2hTbGlkZXNQcm9ncmVzczogZmFsc2UsXG4gIHdhdGNoU2xpZGVzVmlzaWJpbGl0eTogZmFsc2UsXG5cbiAgLy8gQ3Vyc29yXG4gIGdyYWJDdXJzb3I6IGZhbHNlLFxuXG4gIC8vIENsaWNrc1xuICBwcmV2ZW50Q2xpY2tzOiB0cnVlLFxuICBwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb246IHRydWUsXG4gIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlLFxuXG4gIC8vIEltYWdlc1xuICBwcmVsb2FkSW1hZ2VzOiB0cnVlLFxuICB1cGRhdGVPbkltYWdlc1JlYWR5OiB0cnVlLFxuXG4gIC8vIGxvb3BcbiAgbG9vcDogZmFsc2UsXG4gIGxvb3BBZGRpdGlvbmFsU2xpZGVzOiAwLFxuICBsb29wZWRTbGlkZXM6IG51bGwsXG4gIGxvb3BGaWxsR3JvdXBXaXRoQmxhbms6IGZhbHNlLFxuXG4gIC8vIFN3aXBpbmcvbm8gc3dpcGluZ1xuICBhbGxvd1NsaWRlUHJldjogdHJ1ZSxcbiAgYWxsb3dTbGlkZU5leHQ6IHRydWUsXG4gIHN3aXBlSGFuZGxlcjogbnVsbCwgLy8gJy5zd2lwZS1oYW5kbGVyJyxcbiAgbm9Td2lwaW5nOiB0cnVlLFxuICBub1N3aXBpbmdDbGFzczogJ3N3aXBlci1uby1zd2lwaW5nJyxcblxuICAvLyBQYXNzaXZlIExpc3RlbmVyc1xuICBwYXNzaXZlTGlzdGVuZXJzOiB0cnVlLFxuXG4gIC8vIE5TXG4gIGNvbnRhaW5lck1vZGlmaWVyQ2xhc3M6ICdzd2lwZXItY29udGFpbmVyLScsIC8vIE5FV1xuICBzbGlkZUNsYXNzOiAnc3dpcGVyLXNsaWRlJyxcbiAgc2xpZGVCbGFua0NsYXNzOiAnc3dpcGVyLXNsaWRlLWludmlzaWJsZS1ibGFuaycsXG4gIHNsaWRlQWN0aXZlQ2xhc3M6ICdzd2lwZXItc2xpZGUtYWN0aXZlJyxcbiAgc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS1kdXBsaWNhdGUtYWN0aXZlJyxcbiAgc2xpZGVWaXNpYmxlQ2xhc3M6ICdzd2lwZXItc2xpZGUtdmlzaWJsZScsXG4gIHNsaWRlRHVwbGljYXRlQ2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlJyxcbiAgc2xpZGVOZXh0Q2xhc3M6ICdzd2lwZXItc2xpZGUtbmV4dCcsXG4gIHNsaWRlRHVwbGljYXRlTmV4dENsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZS1uZXh0JyxcbiAgc2xpZGVQcmV2Q2xhc3M6ICdzd2lwZXItc2xpZGUtcHJldicsXG4gIHNsaWRlRHVwbGljYXRlUHJldkNsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZS1wcmV2JyxcbiAgd3JhcHBlckNsYXNzOiAnc3dpcGVyLXdyYXBwZXInLFxuXG4gIC8vIENhbGxiYWNrc1xuICBydW5DYWxsYmFja3NPbkluaXQ6IHRydWUsXG59O1xuXG5jbGFzcyBTd2lwZXIkMSBleHRlbmRzIFN3aXBlckNsYXNzIHtcbiAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgIGxldCBlbDtcbiAgICBsZXQgcGFyYW1zO1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiBhcmdzWzBdLmNvbnN0cnVjdG9yICYmIGFyZ3NbMF0uY29uc3RydWN0b3IgPT09IE9iamVjdCkge1xuICAgICAgcGFyYW1zID0gYXJnc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgW2VsLCBwYXJhbXNdID0gYXJncztcbiAgICB9XG4gICAgaWYgKCFwYXJhbXMpIHBhcmFtcyA9IHt9O1xuXG4gICAgcGFyYW1zID0gVXRpbHMuZXh0ZW5kKHt9LCBwYXJhbXMpO1xuICAgIGlmIChlbCAmJiAhcGFyYW1zLmVsKSBwYXJhbXMuZWwgPSBlbDtcblxuICAgIHN1cGVyKHBhcmFtcyk7XG5cbiAgICAvLyBTd2lwZXIgSW5zdGFuY2VcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuXG4gICAgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggbW9kdWxlcyBwYXJhbXNcbiAgICBjb25zdCBzd2lwZXJQYXJhbXMgPSBVdGlscy5leHRlbmQoe30sIGRlZmF1bHRzKTtcbiAgICBzd2lwZXIudXNlTW9kdWxlc1BhcmFtcyhzd2lwZXJQYXJhbXMpO1xuXG4gICAgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggcGFzc2VkIHBhcmFtc1xuICAgIHN3aXBlci5wYXJhbXMgPSBVdGlscy5leHRlbmQoe30sIHN3aXBlclBhcmFtcywgcGFyYW1zKTtcbiAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMgPSBVdGlscy5leHRlbmQoe30sIHN3aXBlci5wYXJhbXMpO1xuICAgIHN3aXBlci5wYXNzZWRQYXJhbXMgPSBVdGlscy5leHRlbmQoe30sIHBhcmFtcyk7XG5cbiAgICAvLyBGaW5kIGVsXG4gICAgY29uc3QgJGVsID0gJChzd2lwZXIucGFyYW1zLmVsKTtcbiAgICBlbCA9ICRlbFswXTtcblxuICAgIGlmICghZWwpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKCRlbC5sZW5ndGggPiAxKSB7XG4gICAgICBjb25zdCBzd2lwZXJzID0gW107XG4gICAgICAkZWwuZWFjaCgoaW5kZXgsIGNvbnRhaW5lckVsKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1BhcmFtcyA9IFV0aWxzLmV4dGVuZCh7fSwgcGFyYW1zLCB7IGVsOiBjb250YWluZXJFbCB9KTtcbiAgICAgICAgc3dpcGVycy5wdXNoKG5ldyBTd2lwZXIkMShuZXdQYXJhbXMpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHN3aXBlcnM7XG4gICAgfVxuXG4gICAgZWwuc3dpcGVyID0gc3dpcGVyO1xuICAgICRlbC5kYXRhKCdzd2lwZXInLCBzd2lwZXIpO1xuXG4gICAgLy8gRmluZCBXcmFwcGVyXG4gICAgY29uc3QgJHdyYXBwZXJFbCA9ICRlbC5jaGlsZHJlbihgLiR7c3dpcGVyLnBhcmFtcy53cmFwcGVyQ2xhc3N9YCk7XG5cbiAgICAvLyBFeHRlbmQgU3dpcGVyXG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgJGVsLFxuICAgICAgZWwsXG4gICAgICAkd3JhcHBlckVsLFxuICAgICAgd3JhcHBlckVsOiAkd3JhcHBlckVsWzBdLFxuXG4gICAgICAvLyBDbGFzc2VzXG4gICAgICBjbGFzc05hbWVzOiBbXSxcblxuICAgICAgLy8gU2xpZGVzXG4gICAgICBzbGlkZXM6ICQoKSxcbiAgICAgIHNsaWRlc0dyaWQ6IFtdLFxuICAgICAgc25hcEdyaWQ6IFtdLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkOiBbXSxcblxuICAgICAgLy8gaXNEaXJlY3Rpb25cbiAgICAgIGlzSG9yaXpvbnRhbCgpIHtcbiAgICAgICAgcmV0dXJuIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCc7XG4gICAgICB9LFxuICAgICAgaXNWZXJ0aWNhbCgpIHtcbiAgICAgICAgcmV0dXJuIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAndmVydGljYWwnO1xuICAgICAgfSxcbiAgICAgIC8vIFJUTFxuICAgICAgcnRsOiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIChlbC5kaXIudG9Mb3dlckNhc2UoKSA9PT0gJ3J0bCcgfHwgJGVsLmNzcygnZGlyZWN0aW9uJykgPT09ICdydGwnKSxcbiAgICAgIHdyb25nUlRMOiAkd3JhcHBlckVsLmNzcygnZGlzcGxheScpID09PSAnLXdlYmtpdC1ib3gnLFxuXG4gICAgICAvLyBJbmRleGVzXG4gICAgICBhY3RpdmVJbmRleDogMCxcbiAgICAgIHJlYWxJbmRleDogMCxcblxuICAgICAgLy9cbiAgICAgIGlzQmVnaW5uaW5nOiB0cnVlLFxuICAgICAgaXNFbmQ6IGZhbHNlLFxuXG4gICAgICAvLyBQcm9wc1xuICAgICAgdHJhbnNsYXRlOiAwLFxuICAgICAgcHJvZ3Jlc3M6IDAsXG4gICAgICB2ZWxvY2l0eTogMCxcbiAgICAgIGFuaW1hdGluZzogZmFsc2UsXG5cbiAgICAgIC8vIExvY2tzXG4gICAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2LFxuXG4gICAgICAvLyBUb3VjaCBFdmVudHNcbiAgICAgIHRvdWNoRXZlbnRzOiAoZnVuY3Rpb24gdG91Y2hFdmVudHMoKSB7XG4gICAgICAgIGNvbnN0IHRvdWNoID0gWyd0b3VjaHN0YXJ0JywgJ3RvdWNobW92ZScsICd0b3VjaGVuZCddO1xuICAgICAgICBsZXQgZGVza3RvcCA9IFsnbW91c2Vkb3duJywgJ21vdXNlbW92ZScsICdtb3VzZXVwJ107XG4gICAgICAgIGlmICh3aW5kb3cubmF2aWdhdG9yLnBvaW50ZXJFbmFibGVkKSB7XG4gICAgICAgICAgZGVza3RvcCA9IFsncG9pbnRlcmRvd24nLCAncG9pbnRlcm1vdmUnLCAncG9pbnRlcnVwJ107XG4gICAgICAgIH0gZWxzZSBpZiAod2luZG93Lm5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkKSB7XG4gICAgICAgICAgZGVza3RvcCA9IFsnTVNQb2ludGVyRG93bicsICdNc1BvaW50ZXJNb3ZlJywgJ01zUG9pbnRlclVwJ107XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN0YXJ0OiBTdXBwb3J0JDQudG91Y2ggfHwgIXN3aXBlci5wYXJhbXMuc2ltdWxhdGVUb3VjaCA/IHRvdWNoWzBdIDogZGVza3RvcFswXSxcbiAgICAgICAgICBtb3ZlOiBTdXBwb3J0JDQudG91Y2ggfHwgIXN3aXBlci5wYXJhbXMuc2ltdWxhdGVUb3VjaCA/IHRvdWNoWzFdIDogZGVza3RvcFsxXSxcbiAgICAgICAgICBlbmQ6IFN1cHBvcnQkNC50b3VjaCB8fCAhc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoID8gdG91Y2hbMl0gOiBkZXNrdG9wWzJdLFxuICAgICAgICB9O1xuICAgICAgfSgpKSxcbiAgICAgIHRvdWNoRXZlbnRzRGF0YTogVXRpbHMuZXh0ZW5kKHt9LCB0b3VjaEV2ZW50c0RhdGEpLFxuXG4gICAgICAvLyBDbGlja3NcbiAgICAgIGFsbG93Q2xpY2s6IHRydWUsXG5cbiAgICAgIC8vIFRvdWNoZXNcbiAgICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuXG4gICAgICB0b3VjaGVzOiB7XG4gICAgICAgIHN0YXJ0WDogMCxcbiAgICAgICAgc3RhcnRZOiAwLFxuICAgICAgICBjdXJyZW50WDogMCxcbiAgICAgICAgY3VycmVudFk6IDAsXG4gICAgICAgIGRpZmY6IDAsXG4gICAgICB9LFxuXG4gICAgICAvLyBJbWFnZXNcbiAgICAgIGltYWdlc1RvTG9hZDogW10sXG4gICAgICBpbWFnZXNMb2FkZWQ6IDAsXG5cbiAgICB9KTtcblxuICAgIC8vIEluc3RhbGwgTW9kdWxlc1xuICAgIHN3aXBlci51c2VNb2R1bGVzKCk7XG5cbiAgICAvLyBJbml0XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaW5pdCkge1xuICAgICAgc3dpcGVyLmluaXQoKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYXBwIGluc3RhbmNlXG4gICAgcmV0dXJuIHN3aXBlcjtcbiAgfVxuICBzbGlkZXNQZXJWaWV3KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgeyBwYXJhbXMsIHNsaWRlcywgc2xpZGVzR3JpZCwgc2l6ZTogc3dpcGVyU2l6ZSwgYWN0aXZlSW5kZXggfSA9IHN3aXBlcjtcbiAgICBsZXQgc3B2ID0gMTtcbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBsZXQgc2xpZGVTaXplID0gc2xpZGVzW2FjdGl2ZUluZGV4XS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICBsZXQgYnJlYWtMb29wO1xuICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4ICsgMTsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldICYmICFicmVha0xvb3ApIHtcbiAgICAgICAgICBzbGlkZVNpemUgKz0gc2xpZGVzW2ldLnN3aXBlclNsaWRlU2l6ZTtcbiAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICBpZiAoc2xpZGVTaXplID4gc3dpcGVyU2l6ZSkgYnJlYWtMb29wID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgc2xpZGVTaXplICs9IHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIGJyZWFrTG9vcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4ICsgMTsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzR3JpZFtpXSAtIHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIDwgc3dpcGVyU2l6ZSkge1xuICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzcHY7XG4gIH1cbiAgdXBkYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIpIHJldHVybjtcbiAgICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gICAgbGV0IG5ld1RyYW5zbGF0ZTtcbiAgICBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICBuZXdUcmFuc2xhdGUgPSBNYXRoLm1pbihNYXRoLm1heChzd2lwZXIudHJhbnNsYXRlLCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpLCBzd2lwZXIubWluVHJhbnNsYXRlKCkpO1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH1cbiAgICBsZXQgdHJhbnNsYXRlZDtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSkge1xuICAgICAgc2V0VHJhbnNsYXRlKCk7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICgoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgIHRyYW5zbGF0ZWQgPSBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYW5zbGF0ZWQgPSBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGlmICghdHJhbnNsYXRlZCkge1xuICAgICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3VwZGF0ZScpO1xuICB9XG4gIGluaXQoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG5cbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlSW5pdCcpO1xuXG4gICAgLy8gU2V0IGJyZWFrcG9pbnRcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgQ2xhc3Nlc1xuICAgIHN3aXBlci5hZGRDbGFzc2VzKCk7XG5cbiAgICAvLyBDcmVhdGUgbG9vcFxuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIHNpemVcbiAgICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuXG4gICAgLy8gVXBkYXRlIHNsaWRlc1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcblxuICAgIC8vIFNldCBHcmFiIEN1cnNvclxuICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMucHJlbG9hZEltYWdlcykge1xuICAgICAgc3dpcGVyLnByZWxvYWRJbWFnZXMoKTtcbiAgICB9XG5cbiAgICAvLyBTbGlkZSBUbyBJbml0aWFsIFNsaWRlXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUgKyBzd2lwZXIubG9vcGVkU2xpZGVzLCAwLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlLCAwLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCk7XG4gICAgfVxuXG4gICAgLy8gQXR0YWNoIGV2ZW50c1xuICAgIHN3aXBlci5hdHRhY2hFdmVudHMoKTtcblxuICAgIC8vIEluaXQgRmxhZ1xuICAgIHN3aXBlci5pbml0aWFsaXplZCA9IHRydWU7XG5cbiAgICAvLyBFbWl0XG4gICAgc3dpcGVyLmVtaXQoJ2luaXQnKTtcbiAgfVxuICBkZXN0cm95KGRlbGV0ZUluc3RhbmNlID0gdHJ1ZSwgY2xlYW5TdHlsZXMgPSB0cnVlKSB7XG4gICAgbGV0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgeyBwYXJhbXMsICRlbCwgJHdyYXBwZXJFbCwgc2xpZGVzIH0gPSBzd2lwZXI7XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZURlc3Ryb3knKTtcblxuICAgIC8vIEluaXQgRmxhZ1xuICAgIHN3aXBlci5pbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgLy8gRGV0YWNoIGV2ZW50c1xuICAgIHN3aXBlci5kZXRhY2hFdmVudHMoKTtcblxuICAgIC8vIERlc3Ryb3kgbG9vcFxuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgfVxuXG4gICAgLy8gQ2xlYW51cCBzdHlsZXNcbiAgICBpZiAoY2xlYW5TdHlsZXMpIHtcbiAgICAgIHN3aXBlci5yZW1vdmVDbGFzc2VzKCk7XG4gICAgICAkZWwucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgICR3cmFwcGVyRWwucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgIGlmIChzbGlkZXMgJiYgc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICBzbGlkZXNcbiAgICAgICAgICAucmVtb3ZlQ2xhc3MoW1xuICAgICAgICAgICAgcGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzLFxuICAgICAgICAgICAgcGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MsXG4gICAgICAgICAgICBwYXJhbXMuc2xpZGVOZXh0Q2xhc3MsXG4gICAgICAgICAgICBwYXJhbXMuc2xpZGVQcmV2Q2xhc3MsXG4gICAgICAgICAgXS5qb2luKCcgJykpXG4gICAgICAgICAgLnJlbW92ZUF0dHIoJ3N0eWxlJylcbiAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKVxuICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXN3aXBlci1jb2x1bW4nKVxuICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXN3aXBlci1yb3cnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnZGVzdHJveScpO1xuXG4gICAgLy8gRGV0YWNoIGVtaXR0ZXIgZXZlbnRzXG4gICAgT2JqZWN0LmtleXMoc3dpcGVyLmV2ZW50c0xpc3RlbmVycykuZm9yRWFjaCgoZXZlbnROYW1lKSA9PiB7XG4gICAgICBzd2lwZXIub2ZmKGV2ZW50TmFtZSk7XG4gICAgfSk7XG5cbiAgICBpZiAoZGVsZXRlSW5zdGFuY2UgIT09IGZhbHNlKSB7XG4gICAgICBzd2lwZXIuJGVsWzBdLnN3aXBlciA9IG51bGw7XG4gICAgICBzd2lwZXIuJGVsLmRhdGEoJ3N3aXBlcicsIG51bGwpO1xuICAgICAgVXRpbHMuZGVsZXRlUHJvcHMoc3dpcGVyKTtcbiAgICAgIHN3aXBlciA9IG51bGw7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IHByb3RvdHlwZXMgPSBVdGlscy5leHRlbmQoXG4gIHt9LFxuICB1cGRhdGUsXG4gIHRyYW5zbGF0ZSxcbiAgdHJhbnNpdGlvbixcbiAgc2xpZGUsXG4gIGxvb3AsXG4gIGdyYWJDdXJzb3IsXG4gIG1hbmlwdWxhdGlvbixcbiAgZXZlbnRzLFxuICBicmVha3BvaW50cyxcbiAgY2xhc3NlcyxcbiAgaW1hZ2VzXG4pO1xuXG5PYmplY3Qua2V5cyhwcm90b3R5cGVzKS5mb3JFYWNoKChwcm90b01ldGhvZCkgPT4ge1xuICBTd2lwZXIkMS5wcm90b3R5cGVbcHJvdG9NZXRob2RdID0gcHJvdG90eXBlc1twcm90b01ldGhvZF07XG59KTtcblxuU3dpcGVyJDEuQ2xhc3MgPSBTd2lwZXJDbGFzcztcblxudmFyIERldmljZSQ0ID0ge1xuICBuYW1lOiAnZGV2aWNlJyxcbiAgcHJvdG86IHtcbiAgICBkZXZpY2U6IERldmljZSQxLFxuICB9LFxuICBzdGF0aWM6IHtcbiAgICBEZXZpY2U6IERldmljZSQxLFxuICB9LFxufTtcblxudmFyIFN1cHBvcnQkNSA9IHtcbiAgbmFtZTogJ3N1cHBvcnQnLFxuICBwcm90bzoge1xuICAgIHN1cHBvcnQ6IFN1cHBvcnQkNCxcbiAgfSxcbiAgc3RhdGljOiB7XG4gICAgU3VwcG9ydDogU3VwcG9ydCQ0LFxuICB9LFxufTtcblxudmFyIEJyb3dzZXIkMiA9IHtcbiAgbmFtZTogJ2Jyb3dzZXInLFxuICBwcm90bzoge1xuICAgIGJyb3dzZXI6IEJyb3dzZXIkMSxcbiAgfSxcbiAgc3RhdGljOiB7XG4gICAgQnJvd3NlcjogQnJvd3NlciQxLFxuICB9LFxufTtcblxudmFyIFJlc2l6ZSQxID0ge1xuICBuYW1lOiAncmVzaXplJyxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgcmVzaXplOiB7XG4gICAgICAgIHJlc2l6ZUhhbmRsZXIoKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuO1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdyZXNpemUnKTtcbiAgICAgICAgfSxcbiAgICAgICAgb3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKCkge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnb3JpZW50YXRpb25jaGFuZ2UnKTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICAvLyBFbWl0IHJlc2l6ZVxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN3aXBlci5yZXNpemUucmVzaXplSGFuZGxlcik7XG5cbiAgICAgIC8vIEVtaXQgb3JpZW50YXRpb25jaGFuZ2VcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIHN3aXBlci5yZXNpemUub3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKTtcbiAgICB9LFxuICAgIGRlc3Ryb3koKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN3aXBlci5yZXNpemUucmVzaXplSGFuZGxlcik7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBzd2lwZXIucmVzaXplLm9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcik7XG4gICAgfSxcbiAgfSxcbn07XG5cbmNvbnN0IE9ic2VydmVyID0ge1xuICBmdW5jOiB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciB8fCB3aW5kb3cuV2Via2l0TXV0YXRpb25PYnNlcnZlcixcbiAgYXR0YWNoKHRhcmdldCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICAgIGNvbnN0IE9ic2VydmVyRnVuYyA9IE9ic2VydmVyLmZ1bmM7XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgT2JzZXJ2ZXJGdW5jKChtdXRhdGlvbnMpID0+IHtcbiAgICAgIG11dGF0aW9ucy5mb3JFYWNoKChtdXRhdGlvbikgPT4ge1xuICAgICAgICBzd2lwZXIuZW1pdCgnb2JzZXJ2ZXJVcGRhdGUnLCBtdXRhdGlvbik7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIG9ic2VydmVyLm9ic2VydmUodGFyZ2V0LCB7XG4gICAgICBhdHRyaWJ1dGVzOiB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmF0dHJpYnV0ZXMsXG4gICAgICBjaGlsZExpc3Q6IHR5cGVvZiBvcHRpb25zLmNoaWxkTGlzdCA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5jaGlsZExpc3QsXG4gICAgICBjaGFyYWN0ZXJEYXRhOiB0eXBlb2Ygb3B0aW9ucy5jaGFyYWN0ZXJEYXRhID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmNoYXJhY3RlckRhdGEsXG4gICAgfSk7XG5cbiAgICBzd2lwZXIub2JzZXJ2ZXIub2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICB9LFxuICBpbml0KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFTdXBwb3J0JDQub2JzZXJ2ZXIgfHwgIXN3aXBlci5wYXJhbXMub2JzZXJ2ZXIpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5vYnNlcnZlUGFyZW50cykge1xuICAgICAgY29uc3QgY29udGFpbmVyUGFyZW50cyA9IHN3aXBlci4kZWwucGFyZW50cygpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250YWluZXJQYXJlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHN3aXBlci5vYnNlcnZlci5hdHRhY2goY29udGFpbmVyUGFyZW50c1tpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIE9ic2VydmUgY29udGFpbmVyXG4gICAgc3dpcGVyLm9ic2VydmVyLmF0dGFjaChzd2lwZXIuJGVsWzBdLCB7IGNoaWxkTGlzdDogZmFsc2UgfSk7XG5cbiAgICAvLyBPYnNlcnZlIHdyYXBwZXJcbiAgICBzd2lwZXIub2JzZXJ2ZXIuYXR0YWNoKHN3aXBlci4kd3JhcHBlckVsWzBdLCB7IGF0dHJpYnV0ZXM6IGZhbHNlIH0pO1xuICB9LFxuICBkZXN0cm95KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgc3dpcGVyLm9ic2VydmVyLm9ic2VydmVycy5mb3JFYWNoKChvYnNlcnZlcikgPT4ge1xuICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH0pO1xuICAgIHN3aXBlci5vYnNlcnZlci5vYnNlcnZlcnMgPSBbXTtcbiAgfSxcbn07XG5cbnZhciBPYnNlcnZlciQxID0ge1xuICBuYW1lOiAnb2JzZXJ2ZXInLFxuICBwYXJhbXM6IHtcbiAgICBvYnNlcnZlcjogZmFsc2UsXG4gICAgb2JzZXJ2ZVBhcmVudHM6IGZhbHNlLFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICBvYnNlcnZlcjoge1xuICAgICAgICBpbml0OiBPYnNlcnZlci5pbml0LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgYXR0YWNoOiBPYnNlcnZlci5hdHRhY2guYmluZChzd2lwZXIpLFxuICAgICAgICBkZXN0cm95OiBPYnNlcnZlci5kZXN0cm95LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgb2JzZXJ2ZXJzOiBbXSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIub2JzZXJ2ZXIuaW5pdCgpO1xuICAgIH0sXG4gICAgZGVzdHJveSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIub2JzZXJ2ZXIuZGVzdHJveSgpO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBOYXZpZ2F0aW9uID0ge1xuICB1cGRhdGUoKSB7XG4gICAgLy8gVXBkYXRlIE5hdmlnYXRpb24gQnV0dG9uc1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICAgIGNvbnN0IHsgJG5leHRFbCwgJHByZXZFbCB9ID0gc3dpcGVyLm5hdmlnYXRpb247XG5cbiAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgJHByZXZFbC5hZGRDbGFzcyhwYXJhbXMuZGlzYWJsZWRDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkcHJldkVsLnJlbW92ZUNsYXNzKHBhcmFtcy5kaXNhYmxlZENsYXNzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCRuZXh0RWwgJiYgJG5leHRFbC5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgICRuZXh0RWwuYWRkQ2xhc3MocGFyYW1zLmRpc2FibGVkQ2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJG5leHRFbC5yZW1vdmVDbGFzcyhwYXJhbXMuZGlzYWJsZWRDbGFzcyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBpbml0KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uO1xuICAgIGlmICghKHBhcmFtcy5uZXh0RWwgfHwgcGFyYW1zLnByZXZFbCkpIHJldHVybjtcblxuICAgIGxldCAkbmV4dEVsO1xuICAgIGxldCAkcHJldkVsO1xuICAgIGlmIChwYXJhbXMubmV4dEVsKSB7XG4gICAgICAkbmV4dEVsID0gJChwYXJhbXMubmV4dEVsKTtcbiAgICAgIGlmIChcbiAgICAgICAgc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJlxuICAgICAgICB0eXBlb2YgcGFyYW1zLm5leHRFbCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgJG5leHRFbC5sZW5ndGggPiAxICYmXG4gICAgICAgIHN3aXBlci4kZWwuZmluZChwYXJhbXMubmV4dEVsKS5sZW5ndGggPT09IDFcbiAgICAgICkge1xuICAgICAgICAkbmV4dEVsID0gc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5uZXh0RWwpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFyYW1zLnByZXZFbCkge1xuICAgICAgJHByZXZFbCA9ICQocGFyYW1zLnByZXZFbCk7XG4gICAgICBpZiAoXG4gICAgICAgIHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHMgJiZcbiAgICAgICAgdHlwZW9mIHBhcmFtcy5wcmV2RWwgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICRwcmV2RWwubGVuZ3RoID4gMSAmJlxuICAgICAgICBzd2lwZXIuJGVsLmZpbmQocGFyYW1zLnByZXZFbCkubGVuZ3RoID09PSAxXG4gICAgICApIHtcbiAgICAgICAgJHByZXZFbCA9IHN3aXBlci4kZWwuZmluZChwYXJhbXMucHJldkVsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoJG5leHRFbCAmJiAkbmV4dEVsLmxlbmd0aCA+IDApIHtcbiAgICAgICRuZXh0RWwub24oJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAoc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmxvb3ApIHJldHVybjtcbiAgICAgICAgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICgkcHJldkVsICYmICRwcmV2RWwubGVuZ3RoID4gMCkge1xuICAgICAgJHByZXZFbC5vbignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICAgICAgICBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLm5hdmlnYXRpb24sIHtcbiAgICAgICRuZXh0RWwsXG4gICAgICBuZXh0RWw6ICRuZXh0RWwgJiYgJG5leHRFbFswXSxcbiAgICAgICRwcmV2RWwsXG4gICAgICBwcmV2RWw6ICRwcmV2RWwgJiYgJHByZXZFbFswXSxcbiAgICB9KTtcbiAgfSxcbiAgZGVzdHJveSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHsgJG5leHRFbCwgJHByZXZFbCB9ID0gc3dpcGVyLm5hdmlnYXRpb247XG4gICAgaWYgKCRuZXh0RWwgJiYgJG5leHRFbC5sZW5ndGgpIHtcbiAgICAgICRuZXh0RWwub2ZmKCdjbGljaycpO1xuICAgICAgJG5leHRFbC5yZW1vdmVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uZGlzYWJsZWRDbGFzcyk7XG4gICAgfVxuICAgIGlmICgkcHJldkVsICYmICRwcmV2RWwubGVuZ3RoKSB7XG4gICAgICAkcHJldkVsLm9mZignY2xpY2snKTtcbiAgICAgICRwcmV2RWwucmVtb3ZlQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmRpc2FibGVkQ2xhc3MpO1xuICAgIH1cbiAgfSxcbn07XG5cbnZhciBOYXZpZ2F0aW9uJDEgPSB7XG4gIG5hbWU6ICduYXZpZ2F0aW9uJyxcbiAgcGFyYW1zOiB7XG4gICAgbmF2aWdhdGlvbjoge1xuICAgICAgbmV4dEVsOiBudWxsLFxuICAgICAgcHJldkVsOiBudWxsLFxuXG4gICAgICBoaWRlT25DbGljazogZmFsc2UsXG4gICAgICBkaXNhYmxlZENsYXNzOiAnc3dpcGVyLWJ1dHRvbi1kaXNhYmxlZCcsXG4gICAgICBoaWRkZW5DbGFzczogJ3N3aXBlci1idXR0b24taGlkZGVuJyxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICBuYXZpZ2F0aW9uOiB7XG4gICAgICAgIGluaXQ6IE5hdmlnYXRpb24uaW5pdC5iaW5kKHN3aXBlciksXG4gICAgICAgIHVwZGF0ZTogTmF2aWdhdGlvbi51cGRhdGUuYmluZChzd2lwZXIpLFxuICAgICAgICBkZXN0cm95OiBOYXZpZ2F0aW9uLmRlc3Ryb3kuYmluZChzd2lwZXIpLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLmluaXQoKTtcbiAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgdG9FZGdlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgZnJvbUVkZ2UoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLm5hdmlnYXRpb24udXBkYXRlKCk7XG4gICAgfSxcbiAgICBkZXN0cm95KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLmRlc3Ryb3koKTtcbiAgICB9LFxuICAgIGNsaWNrKGUpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBjb25zdCB7ICRuZXh0RWwsICRwcmV2RWwgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgICAgaWYgKFxuICAgICAgICBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZU9uQ2xpY2sgJiZcbiAgICAgICAgISQoZS50YXJnZXQpLmlzKCRwcmV2RWwpICYmXG4gICAgICAgICEkKGUudGFyZ2V0KS5pcygkbmV4dEVsKVxuICAgICAgKSB7XG4gICAgICAgIGlmICgkbmV4dEVsKSAkbmV4dEVsLnRvZ2dsZUNsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICAgIGlmICgkcHJldkVsKSAkcHJldkVsLnRvZ2dsZUNsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn07XG5cbmNvbnN0IFBhZ2luYXRpb24gPSB7XG4gIHVwZGF0ZSgpIHtcbiAgICAvLyBSZW5kZXIgfHwgVXBkYXRlIFBhZ2luYXRpb24gYnVsbGV0cy9pdGVtc1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghcGFyYW1zLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uJGVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLiRlbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBjb25zdCAkZWwgPSBzd2lwZXIucGFnaW5hdGlvbi4kZWw7XG4gICAgLy8gQ3VycmVudC9Ub3RhbFxuICAgIGxldCBjdXJyZW50O1xuICAgIGNvbnN0IHRvdGFsID0gc3dpcGVyLnBhcmFtcy5sb29wID8gTWF0aC5jZWlsKChzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIChzd2lwZXIubG9vcGVkU2xpZGVzICogMikpIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIGN1cnJlbnQgPSBNYXRoLmNlaWwoKHN3aXBlci5hY3RpdmVJbmRleCAtIHN3aXBlci5sb29wZWRTbGlkZXMpIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgICBpZiAoY3VycmVudCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSAtIChzd2lwZXIubG9vcGVkU2xpZGVzICogMikpIHtcbiAgICAgICAgY3VycmVudCAtPSAoc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAoc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpKTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50ID4gdG90YWwgLSAxKSBjdXJyZW50IC09IHRvdGFsO1xuICAgICAgaWYgKGN1cnJlbnQgPCAwICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvblR5cGUgIT09ICdidWxsZXRzJykgY3VycmVudCA9IHRvdGFsICsgY3VycmVudDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzd2lwZXIuc25hcEluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY3VycmVudCA9IHN3aXBlci5zbmFwSW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnQgPSBzd2lwZXIuYWN0aXZlSW5kZXggfHwgMDtcbiAgICB9XG4gICAgLy8gVHlwZXNcbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgYnVsbGV0cyA9IHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHM7XG4gICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemUgPSBidWxsZXRzLmVxKDApW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdvdXRlcldpZHRoJyA6ICdvdXRlckhlaWdodCddKHRydWUpO1xuICAgICAgICAkZWwuY3NzKHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd3aWR0aCcgOiAnaGVpZ2h0JywgYCR7c3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0U2l6ZSAqIDV9cHhgKTtcbiAgICAgIH1cbiAgICAgIGJ1bGxldHMucmVtb3ZlQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfSAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbmV4dCAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbmV4dC1uZXh0ICR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1wcmV2ICR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1wcmV2LXByZXZgKTtcbiAgICAgIGlmICgkZWwubGVuZ3RoID4gMSkge1xuICAgICAgICBidWxsZXRzLmVhY2goKGluZGV4LCBidWxsZXQpID0+IHtcbiAgICAgICAgICBjb25zdCAkYnVsbGV0ID0gJChidWxsZXQpO1xuICAgICAgICAgIGlmICgkYnVsbGV0LmluZGV4KCkgPT09IGN1cnJlbnQpIHtcbiAgICAgICAgICAgICRidWxsZXQuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKTtcbiAgICAgICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICAgICAgJGJ1bGxldFxuICAgICAgICAgICAgICAgIC5wcmV2KClcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1wcmV2YClcbiAgICAgICAgICAgICAgICAucHJldigpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tcHJldi1wcmV2YCk7XG4gICAgICAgICAgICAgICRidWxsZXRcbiAgICAgICAgICAgICAgICAubmV4dCgpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbmV4dGApXG4gICAgICAgICAgICAgICAgLm5leHQoKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LW5leHQtbmV4dGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCAkYnVsbGV0ID0gYnVsbGV0cy5lcShjdXJyZW50KTtcbiAgICAgICAgJGJ1bGxldC5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpO1xuICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgICAgJGJ1bGxldFxuICAgICAgICAgICAgLnByZXYoKVxuICAgICAgICAgICAgLmFkZENsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tcHJldmApXG4gICAgICAgICAgICAucHJldigpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1wcmV2LXByZXZgKTtcbiAgICAgICAgICAkYnVsbGV0XG4gICAgICAgICAgICAubmV4dCgpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1uZXh0YClcbiAgICAgICAgICAgIC5uZXh0KClcbiAgICAgICAgICAgIC5hZGRDbGFzcyhgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LW5leHQtbmV4dGApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgIGNvbnN0IGJ1bGxldHNPZmZzZXQgPSAoKChzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRTaXplICogNSkgLSAoc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0U2l6ZSkpIC8gMikgLSAoY3VycmVudCAqIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemUpO1xuICAgICAgICBidWxsZXRzLmNzcyhzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnbGVmdCcgOiAndG9wJywgYCR7YnVsbGV0c09mZnNldH1weGApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdmcmFjdGlvbicpIHtcbiAgICAgICRlbC5maW5kKGAuJHtwYXJhbXMuY3VycmVudENsYXNzfWApLnRleHQoY3VycmVudCArIDEpO1xuICAgICAgJGVsLmZpbmQoYC4ke3BhcmFtcy50b3RhbENsYXNzfWApLnRleHQodG90YWwpO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgIGNvbnN0IHNjYWxlID0gKGN1cnJlbnQgKyAxKSAvIHRvdGFsO1xuICAgICAgbGV0IHNjYWxlWCA9IHNjYWxlO1xuICAgICAgbGV0IHNjYWxlWSA9IDE7XG4gICAgICBpZiAoIXN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICBzY2FsZVkgPSBzY2FsZTtcbiAgICAgICAgc2NhbGVYID0gMTtcbiAgICAgIH1cbiAgICAgICRlbC5maW5kKGAuJHtwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3N9YCkudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGVYKCR7c2NhbGVYfSkgc2NhbGVZKCR7c2NhbGVZfSlgKS50cmFuc2l0aW9uKHN3aXBlci5wYXJhbXMuc3BlZWQpO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdjdXN0b20nICYmIHBhcmFtcy5yZW5kZXJDdXN0b20pIHtcbiAgICAgICRlbC5odG1sKHBhcmFtcy5yZW5kZXJDdXN0b20oc3dpcGVyLCBjdXJyZW50ICsgMSwgdG90YWwpKTtcbiAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uUmVuZGVyJywgc3dpcGVyLCAkZWxbMF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuZW1pdCgncGFnaW5hdGlvblVwZGF0ZScsIHN3aXBlciwgJGVsWzBdKTtcbiAgICB9XG4gIH0sXG4gIHJlbmRlcigpIHtcbiAgICAvLyBSZW5kZXIgQ29udGFpbmVyXG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKCFwYXJhbXMuZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi4kZWwgfHwgc3dpcGVyLnBhZ2luYXRpb24uJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgY29uc3QgJGVsID0gc3dpcGVyLnBhZ2luYXRpb24uJGVsO1xuICAgIGxldCBwYWdpbmF0aW9uSFRNTCA9ICcnO1xuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnKSB7XG4gICAgICBjb25zdCBudW1iZXJPZkJ1bGxldHMgPSBzd2lwZXIucGFyYW1zLmxvb3AgPyBNYXRoLmNlaWwoKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gKHN3aXBlci5sb29wZWRTbGlkZXMgKiAyKSkgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mQnVsbGV0czsgaSArPSAxKSB7XG4gICAgICAgIGlmIChwYXJhbXMucmVuZGVyQnVsbGV0KSB7XG4gICAgICAgICAgcGFnaW5hdGlvbkhUTUwgKz0gcGFyYW1zLnJlbmRlckJ1bGxldC5jYWxsKHN3aXBlciwgaSwgcGFyYW1zLmJ1bGxldENsYXNzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYWdpbmF0aW9uSFRNTCArPSBgPCR7cGFyYW1zLmJ1bGxldEVsZW1lbnR9IGNsYXNzPVwiJHtwYXJhbXMuYnVsbGV0Q2xhc3N9XCI+PC8ke3BhcmFtcy5idWxsZXRFbGVtZW50fT5gO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAkZWwuaHRtbChwYWdpbmF0aW9uSFRNTCk7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzID0gJGVsLmZpbmQoYC4ke3BhcmFtcy5idWxsZXRDbGFzc31gKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICBpZiAocGFyYW1zLnJlbmRlckZyYWN0aW9uKSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gcGFyYW1zLnJlbmRlckZyYWN0aW9uLmNhbGwoc3dpcGVyLCBwYXJhbXMuY3VycmVudENsYXNzLCBwYXJhbXMudG90YWxDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9XG4gICAgICAgIGA8c3BhbiBjbGFzcz1cIiR7cGFyYW1zLmN1cnJlbnRDbGFzc31cIj48L3NwYW4+YCArXG4gICAgICAgICcgLyAnICtcbiAgICAgICAgYDxzcGFuIGNsYXNzPVwiJHtwYXJhbXMudG90YWxDbGFzc31cIj48L3NwYW4+YDtcbiAgICAgIH1cbiAgICAgICRlbC5odG1sKHBhZ2luYXRpb25IVE1MKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInKSB7XG4gICAgICBpZiAocGFyYW1zLnJlbmRlclByb2dyZXNzYmFyKSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gcGFyYW1zLnJlbmRlclByb2dyZXNzYmFyLmNhbGwoc3dpcGVyLCBwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBgPHNwYW4gY2xhc3M9XCIke3BhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzc31cIj48L3NwYW4+YDtcbiAgICAgIH1cbiAgICAgICRlbC5odG1sKHBhZ2luYXRpb25IVE1MKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy50eXBlICE9PSAnY3VzdG9tJykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBzd2lwZXIucGFnaW5hdGlvbi4kZWxbMF0pO1xuICAgIH1cbiAgfSxcbiAgaW5pdCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoIXBhcmFtcy5lbCkgcmV0dXJuO1xuXG4gICAgbGV0ICRlbCA9ICQocGFyYW1zLmVsKTtcbiAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgaWYgKFxuICAgICAgc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJlxuICAgICAgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICRlbC5sZW5ndGggPiAxICYmXG4gICAgICBzd2lwZXIuJGVsLmZpbmQocGFyYW1zLmVsKS5sZW5ndGggPT09IDFcbiAgICApIHtcbiAgICAgICRlbCA9IHN3aXBlci4kZWwuZmluZChwYXJhbXMuZWwpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICRlbC5hZGRDbGFzcyhwYXJhbXMuY2xpY2thYmxlQ2xhc3MpO1xuICAgIH1cblxuICAgICRlbC5hZGRDbGFzcyhwYXJhbXMubW9kaWZpZXJDbGFzcyArIHBhcmFtcy50eXBlKTtcblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgJGVsLmFkZENsYXNzKGAke3BhcmFtcy5tb2RpZmllckNsYXNzfSR7cGFyYW1zLnR5cGV9LWR5bmFtaWNgKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgJGVsLm9uKCdjbGljaycsIGAuJHtwYXJhbXMuYnVsbGV0Q2xhc3N9YCwgZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgbGV0IGluZGV4ID0gJCh0aGlzKS5pbmRleCgpICogc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkgaW5kZXggKz0gc3dpcGVyLmxvb3BlZFNsaWRlcztcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oaW5kZXgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5wYWdpbmF0aW9uLCB7XG4gICAgICAkZWwsXG4gICAgICBlbDogJGVsWzBdLFxuICAgIH0pO1xuICB9LFxuICBkZXN0cm95KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghcGFyYW1zLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uJGVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLiRlbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBjb25zdCAkZWwgPSBzd2lwZXIucGFnaW5hdGlvbi4kZWw7XG5cbiAgICAkZWwucmVtb3ZlQ2xhc3MocGFyYW1zLmhpZGRlbkNsYXNzKTtcbiAgICAkZWwucmVtb3ZlQ2xhc3MocGFyYW1zLm1vZGlmaWVyQ2xhc3MgKyBwYXJhbXMudHlwZSk7XG4gICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMpIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMucmVtb3ZlQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKTtcbiAgICBpZiAocGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgJGVsLm9mZignY2xpY2snLCBgLiR7cGFyYW1zLmJ1bGxldENsYXNzfWApO1xuICAgIH1cbiAgfSxcbn07XG5cbnZhciBQYWdpbmF0aW9uJDEgPSB7XG4gIG5hbWU6ICdwYWdpbmF0aW9uJyxcbiAgcGFyYW1zOiB7XG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgZWw6IG51bGwsXG4gICAgICBidWxsZXRFbGVtZW50OiAnc3BhbicsXG4gICAgICBjbGlja2FibGU6IGZhbHNlLFxuICAgICAgaGlkZU9uQ2xpY2s6IGZhbHNlLFxuICAgICAgcmVuZGVyQnVsbGV0OiBudWxsLFxuICAgICAgcmVuZGVyUHJvZ3Jlc3NiYXI6IG51bGwsXG4gICAgICByZW5kZXJGcmFjdGlvbjogbnVsbCxcbiAgICAgIHJlbmRlckN1c3RvbTogbnVsbCxcbiAgICAgIHR5cGU6ICdidWxsZXRzJywgLy8gJ2J1bGxldHMnIG9yICdwcm9ncmVzc2Jhcicgb3IgJ2ZyYWN0aW9uJyBvciAnY3VzdG9tJ1xuICAgICAgZHluYW1pY0J1bGxldHM6IGZhbHNlLFxuXG4gICAgICBidWxsZXRDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWJ1bGxldCcsXG4gICAgICBidWxsZXRBY3RpdmVDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWJ1bGxldC1hY3RpdmUnLFxuICAgICAgbW9kaWZpZXJDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLScsIC8vIE5FV1xuICAgICAgY3VycmVudENsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tY3VycmVudCcsXG4gICAgICB0b3RhbENsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tdG90YWwnLFxuICAgICAgaGlkZGVuQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1oaWRkZW4nLFxuICAgICAgcHJvZ3Jlc3NiYXJGaWxsQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzc2Jhci1maWxsJyxcbiAgICAgIGNsaWNrYWJsZUNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tY2xpY2thYmxlJywgLy8gTkVXXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgcGFnaW5hdGlvbjoge1xuICAgICAgICBpbml0OiBQYWdpbmF0aW9uLmluaXQuYmluZChzd2lwZXIpLFxuICAgICAgICByZW5kZXI6IFBhZ2luYXRpb24ucmVuZGVyLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgdXBkYXRlOiBQYWdpbmF0aW9uLnVwZGF0ZS5iaW5kKHN3aXBlciksXG4gICAgICAgIGRlc3Ryb3k6IFBhZ2luYXRpb24uZGVzdHJveS5iaW5kKHN3aXBlciksXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uaW5pdCgpO1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24ucmVuZGVyKCk7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICB9LFxuICAgIGFjdGl2ZUluZGV4Q2hhbmdlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzd2lwZXIuc25hcEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNuYXBJbmRleENoYW5nZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNsaWRlc0xlbmd0aENoYW5nZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnJlbmRlcigpO1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNuYXBHcmlkTGVuZ3RoQ2hhbmdlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnJlbmRlcigpO1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc3Ryb3koKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZGVzdHJveSgpO1xuICAgIH0sXG4gICAgY2xpY2soZSkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChcbiAgICAgICAgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVsICYmXG4gICAgICAgIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRlT25DbGljayAmJlxuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi4kZWwubGVuZ3RoID4gMCAmJlxuICAgICAgICAhJChlLnRhcmdldCkuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzKVxuICAgICAgKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLiRlbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBTY3JvbGxiYXIgPSB7XG4gIHNldFRyYW5zbGF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwgfHwgIXN3aXBlci5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICBjb25zdCB7IHNjcm9sbGJhciwgcnRsLCBwcm9ncmVzcyB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHsgZHJhZ1NpemUsIHRyYWNrU2l6ZSwgJGRyYWdFbCwgJGVsIH0gPSBzY3JvbGxiYXI7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXI7XG5cbiAgICBsZXQgbmV3U2l6ZSA9IGRyYWdTaXplO1xuICAgIGxldCBuZXdQb3MgPSAodHJhY2tTaXplIC0gZHJhZ1NpemUpICogcHJvZ3Jlc3M7XG4gICAgaWYgKHJ0bCAmJiBzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIG5ld1BvcyA9IC1uZXdQb3M7XG4gICAgICBpZiAobmV3UG9zID4gMCkge1xuICAgICAgICBuZXdTaXplID0gZHJhZ1NpemUgLSBuZXdQb3M7XG4gICAgICAgIG5ld1BvcyA9IDA7XG4gICAgICB9IGVsc2UgaWYgKC1uZXdQb3MgKyBkcmFnU2l6ZSA+IHRyYWNrU2l6ZSkge1xuICAgICAgICBuZXdTaXplID0gdHJhY2tTaXplICsgbmV3UG9zO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobmV3UG9zIDwgMCkge1xuICAgICAgbmV3U2l6ZSA9IGRyYWdTaXplICsgbmV3UG9zO1xuICAgICAgbmV3UG9zID0gMDtcbiAgICB9IGVsc2UgaWYgKG5ld1BvcyArIGRyYWdTaXplID4gdHJhY2tTaXplKSB7XG4gICAgICBuZXdTaXplID0gdHJhY2tTaXplIC0gbmV3UG9zO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICBpZiAoU3VwcG9ydCQ0LnRyYW5zZm9ybXMzZCkge1xuICAgICAgICAkZHJhZ0VsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHtuZXdQb3N9cHgsIDAsIDApYCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkZHJhZ0VsLnRyYW5zZm9ybShgdHJhbnNsYXRlWCgke25ld1Bvc31weClgKTtcbiAgICAgIH1cbiAgICAgICRkcmFnRWxbMF0uc3R5bGUud2lkdGggPSBgJHtuZXdTaXplfXB4YDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKFN1cHBvcnQkNC50cmFuc2Zvcm1zM2QpIHtcbiAgICAgICAgJGRyYWdFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKDBweCwgJHtuZXdQb3N9cHgsIDApYCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkZHJhZ0VsLnRyYW5zZm9ybShgdHJhbnNsYXRlWSgke25ld1Bvc31weClgKTtcbiAgICAgIH1cbiAgICAgICRkcmFnRWxbMF0uc3R5bGUuaGVpZ2h0ID0gYCR7bmV3U2l6ZX1weGA7XG4gICAgfVxuICAgIGlmIChwYXJhbXMuaGlkZSkge1xuICAgICAgY2xlYXJUaW1lb3V0KHN3aXBlci5zY3JvbGxiYXIudGltZW91dCk7XG4gICAgICAkZWxbMF0uc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgJGVsWzBdLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgICAgICAkZWwudHJhbnNpdGlvbig0MDApO1xuICAgICAgfSwgMTAwMCk7XG4gICAgfVxuICB9LFxuICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgc3dpcGVyLnNjcm9sbGJhci4kZHJhZ0VsLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICB9LFxuICB1cGRhdGVTaXplKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCB8fCAhc3dpcGVyLnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuXG4gICAgY29uc3QgeyBzY3JvbGxiYXIgfSA9IHN3aXBlcjtcbiAgICBjb25zdCB7ICRkcmFnRWwsICRlbCB9ID0gc2Nyb2xsYmFyO1xuXG4gICAgJGRyYWdFbFswXS5zdHlsZS53aWR0aCA9ICcnO1xuICAgICRkcmFnRWxbMF0uc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgY29uc3QgdHJhY2tTaXplID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJGVsWzBdLm9mZnNldFdpZHRoIDogJGVsWzBdLm9mZnNldEhlaWdodDtcblxuICAgIGNvbnN0IGRpdmlkZXIgPSBzd2lwZXIuc2l6ZSAvIHN3aXBlci52aXJ0dWFsU2l6ZTtcbiAgICBjb25zdCBtb3ZlRGl2aWRlciA9IGRpdmlkZXIgKiAodHJhY2tTaXplIC8gc3dpcGVyLnNpemUpO1xuICAgIGxldCBkcmFnU2l6ZTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ1NpemUgPT09ICdhdXRvJykge1xuICAgICAgZHJhZ1NpemUgPSB0cmFja1NpemUgKiBkaXZpZGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBkcmFnU2l6ZSA9IHBhcnNlSW50KHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdTaXplLCAxMCk7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgJGRyYWdFbFswXS5zdHlsZS53aWR0aCA9IGAke2RyYWdTaXplfXB4YDtcbiAgICB9IGVsc2Uge1xuICAgICAgJGRyYWdFbFswXS5zdHlsZS5oZWlnaHQgPSBgJHtkcmFnU2l6ZX1weGA7XG4gICAgfVxuXG4gICAgaWYgKGRpdmlkZXIgPj0gMSkge1xuICAgICAgJGVsWzBdLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgICRlbFswXS5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLnNjcm9sbGJhckhpZGUpIHtcbiAgICAgICRlbFswXS5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICB9XG4gICAgVXRpbHMuZXh0ZW5kKHNjcm9sbGJhciwge1xuICAgICAgdHJhY2tTaXplLFxuICAgICAgZGl2aWRlcixcbiAgICAgIG1vdmVEaXZpZGVyLFxuICAgICAgZHJhZ1NpemUsXG4gICAgfSk7XG4gIH0sXG4gIHNldERyYWdQb3NpdGlvbihlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7IHNjcm9sbGJhciB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHsgJGVsLCBkcmFnU2l6ZSwgbW92ZURpdmlkZXIgfSA9IHNjcm9sbGJhcjtcblxuICAgIGxldCBwb2ludGVyUG9zaXRpb247XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgcG9pbnRlclBvc2l0aW9uID0gKChlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyB8fCBlLnR5cGUgPT09ICd0b3VjaG1vdmUnKSA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVggfHwgZS5jbGllbnRYKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9pbnRlclBvc2l0aW9uID0gKChlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyB8fCBlLnR5cGUgPT09ICd0b3VjaG1vdmUnKSA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVkgfHwgZS5jbGllbnRZKTtcbiAgICB9XG4gICAgbGV0IHBvc2l0aW9uID0gKHBvaW50ZXJQb3NpdGlvbikgLSAkZWwub2Zmc2V0KClbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCddIC0gKGRyYWdTaXplIC8gMik7XG4gICAgY29uc3QgcG9zaXRpb25NaW4gPSAtc3dpcGVyLm1pblRyYW5zbGF0ZSgpICogbW92ZURpdmlkZXI7XG4gICAgY29uc3QgcG9zaXRpb25NYXggPSAtc3dpcGVyLm1heFRyYW5zbGF0ZSgpICogbW92ZURpdmlkZXI7XG4gICAgaWYgKHBvc2l0aW9uIDwgcG9zaXRpb25NaW4pIHtcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb25NaW47XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA+IHBvc2l0aW9uTWF4KSB7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uTWF4O1xuICAgIH1cbiAgICBwb3NpdGlvbiA9IC1wb3NpdGlvbiAvIG1vdmVEaXZpZGVyO1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhwb3NpdGlvbik7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShwb3NpdGlvbik7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICBzd2lwZXIudXBkYXRlUmVhbEluZGV4KCk7XG4gIH0sXG4gIG9uRHJhZ1N0YXJ0KGUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgIGNvbnN0IHsgc2Nyb2xsYmFyLCAkd3JhcHBlckVsIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgeyAkZWwsICRkcmFnRWwgfSA9IHNjcm9sbGJhcjtcbiAgICBzd2lwZXIuc2Nyb2xsYmFyLmlzVG91Y2hlZCA9IHRydWU7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAkd3JhcHBlckVsLnRyYW5zaXRpb24oMTAwKTtcbiAgICAkZHJhZ0VsLnRyYW5zaXRpb24oMTAwKTtcbiAgICBzY3JvbGxiYXIuc2V0RHJhZ1Bvc2l0aW9uKGUpO1xuXG4gICAgY2xlYXJUaW1lb3V0KHN3aXBlci5zY3JvbGxiYXIuZHJhZ1RpbWVvdXQpO1xuXG4gICAgJGVsLnRyYW5zaXRpb24oMCk7XG4gICAgaWYgKHBhcmFtcy5oaWRlKSB7XG4gICAgICAkZWwuY3NzKCdvcGFjaXR5JywgMSk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdzY3JvbGxiYXJEcmFnU3RhcnQnLCBlKTtcbiAgfSxcbiAgb25EcmFnTW92ZShlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7IHNjcm9sbGJhciwgJHdyYXBwZXJFbCB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHsgJGVsLCAkZHJhZ0VsIH0gPSBzY3JvbGxiYXI7XG5cbiAgICBpZiAoIXN3aXBlci5zY3JvbGxiYXIuaXNUb3VjaGVkKSByZXR1cm47XG4gICAgaWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlbHNlIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICBzY3JvbGxiYXIuc2V0RHJhZ1Bvc2l0aW9uKGUpO1xuICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbigwKTtcbiAgICAkZWwudHJhbnNpdGlvbigwKTtcbiAgICAkZHJhZ0VsLnRyYW5zaXRpb24oMCk7XG4gICAgc3dpcGVyLmVtaXQoJ3Njcm9sbGJhckRyYWdNb3ZlJywgZSk7XG4gIH0sXG4gIG9uRHJhZ0VuZChlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgIGNvbnN0IHsgc2Nyb2xsYmFyIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgeyAkZWwgfSA9IHNjcm9sbGJhcjtcblxuICAgIGlmICghc3dpcGVyLnNjcm9sbGJhci5pc1RvdWNoZWQpIHJldHVybjtcbiAgICBzd2lwZXIuc2Nyb2xsYmFyLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIGlmIChwYXJhbXMuaGlkZSkge1xuICAgICAgY2xlYXJUaW1lb3V0KHN3aXBlci5zY3JvbGxiYXIuZHJhZ1RpbWVvdXQpO1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5kcmFnVGltZW91dCA9IFV0aWxzLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgJGVsLmNzcygnb3BhY2l0eScsIDApO1xuICAgICAgICAkZWwudHJhbnNpdGlvbig0MDApO1xuICAgICAgfSwgMTAwMCk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdzY3JvbGxiYXJEcmFnRW5kJywgZSk7XG4gICAgaWYgKHBhcmFtcy5zbmFwT25SZWxlYXNlKSB7XG4gICAgICBzd2lwZXIuc2xpZGVSZXNldCgpO1xuICAgIH1cbiAgfSxcbiAgZW5hYmxlRHJhZ2dhYmxlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IHsgc2Nyb2xsYmFyIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICBjb25zdCB0YXJnZXQgPSBTdXBwb3J0JDQudG91Y2ggPyAkZWxbMF0gOiBkb2N1bWVudDtcbiAgICAkZWwub24oc3dpcGVyLnNjcm9sbGJhci5kcmFnRXZlbnRzLnN0YXJ0LCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0KTtcbiAgICAkKHRhcmdldCkub24oc3dpcGVyLnNjcm9sbGJhci5kcmFnRXZlbnRzLm1vdmUsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnTW92ZSk7XG4gICAgJCh0YXJnZXQpLm9uKHN3aXBlci5zY3JvbGxiYXIuZHJhZ0V2ZW50cy5lbmQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnRW5kKTtcbiAgfSxcbiAgZGlzYWJsZURyYWdnYWJsZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICBjb25zdCB7IHNjcm9sbGJhciB9ID0gc3dpcGVyO1xuICAgIGNvbnN0ICRlbCA9IHNjcm9sbGJhci4kZWw7XG4gICAgY29uc3QgdGFyZ2V0ID0gU3VwcG9ydCQ0LnRvdWNoID8gJGVsWzBdIDogZG9jdW1lbnQ7XG4gICAgJGVsLm9mZihzd2lwZXIuc2Nyb2xsYmFyLmRyYWdFdmVudHMuc3RhcnQpO1xuICAgICQodGFyZ2V0KS5vZmYoc3dpcGVyLnNjcm9sbGJhci5kcmFnRXZlbnRzLm1vdmUpO1xuICAgICQodGFyZ2V0KS5vZmYoc3dpcGVyLnNjcm9sbGJhci5kcmFnRXZlbnRzLmVuZCk7XG4gIH0sXG4gIGluaXQoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgY29uc3QgeyBzY3JvbGxiYXIsICRlbDogJHN3aXBlckVsLCB0b3VjaEV2ZW50cyB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuXG4gICAgbGV0ICRlbCA9ICQocGFyYW1zLmVsKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiAkZWwubGVuZ3RoID4gMSAmJiAkc3dpcGVyRWwuZmluZChwYXJhbXMuZWwpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgJGVsID0gJHN3aXBlckVsLmZpbmQocGFyYW1zLmVsKTtcbiAgICB9XG5cbiAgICBsZXQgJGRyYWdFbCA9ICRlbC5maW5kKCcuc3dpcGVyLXNjcm9sbGJhci1kcmFnJyk7XG4gICAgaWYgKCRkcmFnRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAkZHJhZ0VsID0gJCgnPGRpdiBjbGFzcz1cInN3aXBlci1zY3JvbGxiYXItZHJhZ1wiPjwvZGl2PicpO1xuICAgICAgJGVsLmFwcGVuZCgkZHJhZ0VsKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuc2Nyb2xsYmFyLmRyYWdFdmVudHMgPSAoZnVuY3Rpb24gZHJhZ0V2ZW50cygpIHtcbiAgICAgIGlmICgoc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoID09PSBmYWxzZSAmJiAhU3VwcG9ydCQ0LnRvdWNoKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN0YXJ0OiAnbW91c2Vkb3duJyxcbiAgICAgICAgICBtb3ZlOiAnbW91c2Vtb3ZlJyxcbiAgICAgICAgICBlbmQ6ICdtb3VzZXVwJyxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0b3VjaEV2ZW50cztcbiAgICB9KCkpO1xuXG4gICAgVXRpbHMuZXh0ZW5kKHNjcm9sbGJhciwge1xuICAgICAgJGVsLFxuICAgICAgZWw6ICRlbFswXSxcbiAgICAgICRkcmFnRWwsXG4gICAgICBkcmFnRWw6ICRkcmFnRWxbMF0sXG4gICAgfSk7XG5cbiAgICBpZiAocGFyYW1zLmRyYWdnYWJsZSkge1xuICAgICAgc2Nyb2xsYmFyLmVuYWJsZURyYWdnYWJsZSgpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5zY3JvbGxiYXIuZGlzYWJsZURyYWdnYWJsZSgpO1xuICB9LFxufTtcblxudmFyIFNjcm9sbGJhciQxID0ge1xuICBuYW1lOiAnc2Nyb2xsYmFyJyxcbiAgcGFyYW1zOiB7XG4gICAgc2Nyb2xsYmFyOiB7XG4gICAgICBlbDogbnVsbCxcbiAgICAgIGRyYWdTaXplOiAnYXV0bycsXG4gICAgICBoaWRlOiBmYWxzZSxcbiAgICAgIGRyYWdnYWJsZTogZmFsc2UsXG4gICAgICBzbmFwT25SZWxlYXNlOiBmYWxzZSxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICBzY3JvbGxiYXI6IHtcbiAgICAgICAgaW5pdDogU2Nyb2xsYmFyLmluaXQuYmluZChzd2lwZXIpLFxuICAgICAgICBkZXN0cm95OiBTY3JvbGxiYXIuZGVzdHJveS5iaW5kKHN3aXBlciksXG4gICAgICAgIHVwZGF0ZVNpemU6IFNjcm9sbGJhci51cGRhdGVTaXplLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgc2V0VHJhbnNsYXRlOiBTY3JvbGxiYXIuc2V0VHJhbnNsYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgc2V0VHJhbnNpdGlvbjogU2Nyb2xsYmFyLnNldFRyYW5zaXRpb24uYmluZChzd2lwZXIpLFxuICAgICAgICBlbmFibGVEcmFnZ2FibGU6IFNjcm9sbGJhci5lbmFibGVEcmFnZ2FibGUuYmluZChzd2lwZXIpLFxuICAgICAgICBkaXNhYmxlRHJhZ2dhYmxlOiBTY3JvbGxiYXIuZGlzYWJsZURyYWdnYWJsZS5iaW5kKHN3aXBlciksXG4gICAgICAgIHNldERyYWdQb3NpdGlvbjogU2Nyb2xsYmFyLnNldERyYWdQb3NpdGlvbi5iaW5kKHN3aXBlciksXG4gICAgICAgIG9uRHJhZ1N0YXJ0OiBTY3JvbGxiYXIub25EcmFnU3RhcnQuYmluZChzd2lwZXIpLFxuICAgICAgICBvbkRyYWdNb3ZlOiBTY3JvbGxiYXIub25EcmFnTW92ZS5iaW5kKHN3aXBlciksXG4gICAgICAgIG9uRHJhZ0VuZDogU2Nyb2xsYmFyLm9uRHJhZ0VuZC5iaW5kKHN3aXBlciksXG4gICAgICAgIGlzVG91Y2hlZDogZmFsc2UsXG4gICAgICAgIHRpbWVvdXQ6IG51bGwsXG4gICAgICAgIGRyYWdUaW1lb3V0OiBudWxsLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIuaW5pdCgpO1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci51cGRhdGVTaXplKCk7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgdXBkYXRlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIudXBkYXRlU2l6ZSgpO1xuICAgIH0sXG4gICAgcmVzaXplKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIudXBkYXRlU2l6ZSgpO1xuICAgIH0sXG4gICAgb2JzZXJ2ZXJVcGRhdGUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci51cGRhdGVTaXplKCk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5zZXRUcmFuc2xhdGUoKTtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH0sXG4gICAgZGVzdHJveSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLmRlc3Ryb3koKTtcbiAgICB9LFxuICB9LFxufTtcblxuY29uc3QgUGFyYWxsYXggPSB7XG4gIHNldFRyYW5zZm9ybShlbCwgcHJvZ3Jlc3MpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHsgcnRsIH0gPSBzd2lwZXI7XG5cbiAgICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgICBjb25zdCBydGxGYWN0b3IgPSBydGwgPyAtMSA6IDE7XG5cbiAgICBjb25zdCBwID0gJGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4JykgfHwgJzAnO1xuICAgIGxldCB4ID0gJGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LXgnKTtcbiAgICBsZXQgeSA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC15Jyk7XG4gICAgY29uc3Qgc2NhbGUgPSAkZWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGUnKTtcbiAgICBjb25zdCBvcGFjaXR5ID0gJGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHknKTtcblxuICAgIGlmICh4IHx8IHkpIHtcbiAgICAgIHggPSB4IHx8ICcwJztcbiAgICAgIHkgPSB5IHx8ICcwJztcbiAgICB9IGVsc2UgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgeCA9IHA7XG4gICAgICB5ID0gJzAnO1xuICAgIH0gZWxzZSB7XG4gICAgICB5ID0gcDtcbiAgICAgIHggPSAnMCc7XG4gICAgfVxuXG4gICAgaWYgKCh4KS5pbmRleE9mKCclJykgPj0gMCkge1xuICAgICAgeCA9IGAke3BhcnNlSW50KHgsIDEwKSAqIHByb2dyZXNzICogcnRsRmFjdG9yfSVgO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0gYCR7eCAqIHByb2dyZXNzICogcnRsRmFjdG9yfXB4YDtcbiAgICB9XG4gICAgaWYgKCh5KS5pbmRleE9mKCclJykgPj0gMCkge1xuICAgICAgeSA9IGAke3BhcnNlSW50KHksIDEwKSAqIHByb2dyZXNzfSVgO1xuICAgIH0gZWxzZSB7XG4gICAgICB5ID0gYCR7eSAqIHByb2dyZXNzfXB4YDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHBPcGFjaXR5ICE9PSAndW5kZWZpbmVkJyAmJiBvcGFjaXR5ICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBjdXJyZW50T3BhY2l0eSA9IG9wYWNpdHkgLSAoKG9wYWNpdHkgLSAxKSAqICgxIC0gTWF0aC5hYnMocHJvZ3Jlc3MpKSk7XG4gICAgICAkZWxbMF0uc3R5bGUub3BhY2l0eSA9IGN1cnJlbnRPcGFjaXR5O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHBTY2FsZSA9PT0gJ3VuZGVmaW5lZCcgfHwgc2NhbGUgPT09IG51bGwpIHtcbiAgICAgICRlbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7eH0sICR7eX0sIDBweClgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY3VycmVudFNjYWxlID0gc2NhbGUgLSAoKHNjYWxlIC0gMSkgKiAoMSAtIE1hdGguYWJzKHByb2dyZXNzKSkpO1xuICAgICAgJGVsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHt4fSwgJHt5fSwgMHB4KSBzY2FsZSgke2N1cnJlbnRTY2FsZX0pYCk7XG4gICAgfVxuICB9LFxuICBzZXRUcmFuc2xhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7ICRlbCwgc2xpZGVzLCBwcm9ncmVzcyB9ID0gc3dpcGVyO1xuICAgICRlbC5jaGlsZHJlbignW2RhdGEtc3dpcGVyLXBhcmFsbGF4XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteV0nKVxuICAgICAgLmVhY2goKGluZGV4LCBlbCkgPT4ge1xuICAgICAgICBzd2lwZXIucGFyYWxsYXguc2V0VHJhbnNmb3JtKGVsLCBwcm9ncmVzcyk7XG4gICAgICB9KTtcbiAgICBzbGlkZXMuZWFjaCgoc2xpZGVJbmRleCwgc2xpZGVFbCkgPT4ge1xuICAgICAgJChzbGlkZUVsKS5maW5kKCdbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XScpXG4gICAgICAgIC5lYWNoKChpbmRleCwgZWwpID0+IHtcbiAgICAgICAgICBjb25zdCBzbGlkZVByb2dyZXNzID0gTWF0aC5taW4oTWF0aC5tYXgoc2xpZGVFbC5wcm9ncmVzcywgLTEpLCAxKTtcbiAgICAgICAgICBzd2lwZXIucGFyYWxsYXguc2V0VHJhbnNmb3JtKGVsLCBzbGlkZVByb2dyZXNzKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG4gIHNldFRyYW5zaXRpb24oZHVyYXRpb24gPSB0aGlzLnBhcmFtcy5zcGVlZCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgeyAkZWwgfSA9IHN3aXBlcjtcbiAgICAkZWwuZmluZCgnW2RhdGEtc3dpcGVyLXBhcmFsbGF4XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteV0nKVxuICAgICAgLmVhY2goKGluZGV4LCBwYXJhbGxheEVsKSA9PiB7XG4gICAgICAgIGNvbnN0ICRwYXJhbGxheEVsID0gJChwYXJhbGxheEVsKTtcbiAgICAgICAgbGV0IHBhcmFsbGF4RHVyYXRpb24gPSBwYXJzZUludCgkcGFyYWxsYXhFbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC1kdXJhdGlvbicpLCAxMCkgfHwgZHVyYXRpb247XG4gICAgICAgIGlmIChkdXJhdGlvbiA9PT0gMCkgcGFyYWxsYXhEdXJhdGlvbiA9IDA7XG4gICAgICAgICRwYXJhbGxheEVsLnRyYW5zaXRpb24ocGFyYWxsYXhEdXJhdGlvbik7XG4gICAgICB9KTtcbiAgfSxcbn07XG5cbnZhciBQYXJhbGxheCQxID0ge1xuICBuYW1lOiAncGFyYWxsYXgnLFxuICBwYXJhbXM6IHtcbiAgICBwYXJhbGxheDoge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgcGFyYWxsYXg6IHtcbiAgICAgICAgc2V0VHJhbnNmb3JtOiBQYXJhbGxheC5zZXRUcmFuc2Zvcm0uYmluZChzd2lwZXIpLFxuICAgICAgICBzZXRUcmFuc2xhdGU6IFBhcmFsbGF4LnNldFRyYW5zbGF0ZS5iaW5kKHN3aXBlciksXG4gICAgICAgIHNldFRyYW5zaXRpb246IFBhcmFsbGF4LnNldFRyYW5zaXRpb24uYmluZChzd2lwZXIpLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBiZWZvcmVJbml0KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XG4gICAgfSxcbiAgICBpbml0KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5wYXJhbGxheCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5wYXJhbGxheCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5wYXJhbGxheCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBab29tID0ge1xuICAvLyBDYWxjIFNjYWxlIEZyb20gTXVsdGktdG91Y2hlc1xuICBnZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzKGUpIHtcbiAgICBpZiAoZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA8IDIpIHJldHVybiAxO1xuICAgIGNvbnN0IHgxID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYO1xuICAgIGNvbnN0IHkxID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZO1xuICAgIGNvbnN0IHgyID0gZS50YXJnZXRUb3VjaGVzWzFdLnBhZ2VYO1xuICAgIGNvbnN0IHkyID0gZS50YXJnZXRUb3VjaGVzWzFdLnBhZ2VZO1xuICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KCgoeDIgLSB4MSkgKiogMikgKyAoKHkyIC0geTEpICoqIDIpKTtcbiAgICByZXR1cm4gZGlzdGFuY2U7XG4gIH0sXG4gIC8vIEV2ZW50c1xuICBvbkdlc3R1cmVTdGFydChlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGNvbnN0IHsgZ2VzdHVyZSB9ID0gem9vbTtcbiAgICBpZiAoIVN1cHBvcnQkNC5nZXN0dXJlcykge1xuICAgICAgaWYgKGUudHlwZSAhPT0gJ3RvdWNoc3RhcnQnIHx8IChlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyAmJiBlLnRhcmdldFRvdWNoZXMubGVuZ3RoIDwgMikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZ2VzdHVyZS5zY2FsZVN0YXJ0ID0gWm9vbS5nZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzKGUpO1xuICAgIH1cbiAgICBpZiAoIWdlc3R1cmUuJHNsaWRlRWwgfHwgIWdlc3R1cmUuJHNsaWRlRWwubGVuZ3RoKSB7XG4gICAgICBnZXN0dXJlLiRzbGlkZUVsID0gJCh0aGlzKTtcbiAgICAgIGlmIChnZXN0dXJlLiRzbGlkZUVsLmxlbmd0aCA9PT0gMCkgZ2VzdHVyZS4kc2xpZGVFbCA9IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIGdlc3R1cmUuJGltYWdlRWwgPSBnZXN0dXJlLiRzbGlkZUVsLmZpbmQoJ2ltZywgc3ZnLCBjYW52YXMnKTtcbiAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsID0gZ2VzdHVyZS4kaW1hZ2VFbC5wYXJlbnQoYC4ke3BhcmFtcy5jb250YWluZXJDbGFzc31gKTtcbiAgICAgIGdlc3R1cmUubWF4UmF0aW8gPSBnZXN0dXJlLiRpbWFnZVdyYXBFbC5hdHRyKCdkYXRhLXN3aXBlci16b29tJykgfHwgcGFyYW1zLm1heFJhdGlvO1xuICAgICAgaWYgKGdlc3R1cmUuJGltYWdlV3JhcEVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBnZXN0dXJlLiRpbWFnZUVsID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNpdGlvbigwKTtcbiAgICBzd2lwZXIuem9vbS5pc1NjYWxpbmcgPSB0cnVlO1xuICB9LFxuICBvbkdlc3R1cmVDaGFuZ2UoZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBjb25zdCB7IGdlc3R1cmUgfSA9IHpvb207XG4gICAgaWYgKCFTdXBwb3J0JDQuZ2VzdHVyZXMpIHtcbiAgICAgIGlmIChlLnR5cGUgIT09ICd0b3VjaG1vdmUnIHx8IChlLnR5cGUgPT09ICd0b3VjaG1vdmUnICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPCAyKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBnZXN0dXJlLnNjYWxlTW92ZSA9IFpvb20uZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcyhlKTtcbiAgICB9XG4gICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgaWYgKFN1cHBvcnQkNC5nZXN0dXJlcykge1xuICAgICAgc3dpcGVyLnpvb20uc2NhbGUgPSBlLnNjYWxlICogem9vbS5jdXJyZW50U2NhbGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHpvb20uc2NhbGUgPSAoZ2VzdHVyZS5zY2FsZU1vdmUgLyBnZXN0dXJlLnNjYWxlU3RhcnQpICogem9vbS5jdXJyZW50U2NhbGU7XG4gICAgfVxuICAgIGlmICh6b29tLnNjYWxlID4gZ2VzdHVyZS5tYXhSYXRpbykge1xuICAgICAgem9vbS5zY2FsZSA9IChnZXN0dXJlLm1heFJhdGlvIC0gMSkgKyAoKCh6b29tLnNjYWxlIC0gZ2VzdHVyZS5tYXhSYXRpbykgKyAxKSAqKiAwLjUpO1xuICAgIH1cbiAgICBpZiAoem9vbS5zY2FsZSA8IHBhcmFtcy5taW5SYXRpbykge1xuICAgICAgem9vbS5zY2FsZSA9IChwYXJhbXMubWluUmF0aW8gKyAxKSAtICgoKHBhcmFtcy5taW5SYXRpbyAtIHpvb20uc2NhbGUpICsgMSkgKiogMC41KTtcbiAgICB9XG4gICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZSgke3pvb20uc2NhbGV9KWApO1xuICB9LFxuICBvbkdlc3R1cmVFbmQoZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBjb25zdCB7IGdlc3R1cmUgfSA9IHpvb207XG4gICAgaWYgKCFTdXBwb3J0JDQuZ2VzdHVyZXMpIHtcbiAgICAgIGlmIChlLnR5cGUgIT09ICd0b3VjaGVuZCcgfHwgKGUudHlwZSA9PT0gJ3RvdWNoZW5kJyAmJiBlLmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA8IDIpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgem9vbS5zY2FsZSA9IE1hdGgubWF4KE1hdGgubWluKHpvb20uc2NhbGUsIGdlc3R1cmUubWF4UmF0aW8pLCBwYXJhbXMubWluUmF0aW8pO1xuICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKS50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZSgke3pvb20uc2NhbGV9KWApO1xuICAgIHpvb20uY3VycmVudFNjYWxlID0gem9vbS5zY2FsZTtcbiAgICB6b29tLmlzU2NhbGluZyA9IGZhbHNlO1xuICAgIGlmICh6b29tLnNjYWxlID09PSAxKSBnZXN0dXJlLiRzbGlkZUVsID0gdW5kZWZpbmVkO1xuICB9LFxuICBvblRvdWNoU3RhcnQoZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGNvbnN0IHsgZ2VzdHVyZSwgaW1hZ2UgfSA9IHpvb207XG4gICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgaWYgKGltYWdlLmlzVG91Y2hlZCkgcmV0dXJuO1xuICAgIGlmIChEZXZpY2UkMS5hbmRyb2lkKSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaW1hZ2UuaXNUb3VjaGVkID0gdHJ1ZTtcbiAgICBpbWFnZS50b3VjaGVzU3RhcnQueCA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICBpbWFnZS50b3VjaGVzU3RhcnQueSA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgfSxcbiAgb25Ub3VjaE1vdmUoZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGNvbnN0IHsgZ2VzdHVyZSwgaW1hZ2UsIHZlbG9jaXR5IH0gPSB6b29tO1xuICAgIGlmICghZ2VzdHVyZS4kaW1hZ2VFbCB8fCBnZXN0dXJlLiRpbWFnZUVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgaWYgKCFpbWFnZS5pc1RvdWNoZWQgfHwgIWdlc3R1cmUuJHNsaWRlRWwpIHJldHVybjtcblxuICAgIGlmICghaW1hZ2UuaXNNb3ZlZCkge1xuICAgICAgaW1hZ2Uud2lkdGggPSBnZXN0dXJlLiRpbWFnZUVsWzBdLm9mZnNldFdpZHRoO1xuICAgICAgaW1hZ2UuaGVpZ2h0ID0gZ2VzdHVyZS4kaW1hZ2VFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICBpbWFnZS5zdGFydFggPSBVdGlscy5nZXRUcmFuc2xhdGUoZ2VzdHVyZS4kaW1hZ2VXcmFwRWxbMF0sICd4JykgfHwgMDtcbiAgICAgIGltYWdlLnN0YXJ0WSA9IFV0aWxzLmdldFRyYW5zbGF0ZShnZXN0dXJlLiRpbWFnZVdyYXBFbFswXSwgJ3knKSB8fCAwO1xuICAgICAgZ2VzdHVyZS5zbGlkZVdpZHRoID0gZ2VzdHVyZS4kc2xpZGVFbFswXS5vZmZzZXRXaWR0aDtcbiAgICAgIGdlc3R1cmUuc2xpZGVIZWlnaHQgPSBnZXN0dXJlLiRzbGlkZUVsWzBdLm9mZnNldEhlaWdodDtcbiAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zaXRpb24oMCk7XG4gICAgICBpZiAoc3dpcGVyLnJ0bCkgaW1hZ2Uuc3RhcnRYID0gLWltYWdlLnN0YXJ0WDtcbiAgICAgIGlmIChzd2lwZXIucnRsKSBpbWFnZS5zdGFydFkgPSAtaW1hZ2Uuc3RhcnRZO1xuICAgIH1cbiAgICAvLyBEZWZpbmUgaWYgd2UgbmVlZCBpbWFnZSBkcmFnXG4gICAgY29uc3Qgc2NhbGVkV2lkdGggPSBpbWFnZS53aWR0aCAqIHpvb20uc2NhbGU7XG4gICAgY29uc3Qgc2NhbGVkSGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0ICogem9vbS5zY2FsZTtcblxuICAgIGlmIChzY2FsZWRXaWR0aCA8IGdlc3R1cmUuc2xpZGVXaWR0aCAmJiBzY2FsZWRIZWlnaHQgPCBnZXN0dXJlLnNsaWRlSGVpZ2h0KSByZXR1cm47XG5cbiAgICBpbWFnZS5taW5YID0gTWF0aC5taW4oKChnZXN0dXJlLnNsaWRlV2lkdGggLyAyKSAtIChzY2FsZWRXaWR0aCAvIDIpKSwgMCk7XG4gICAgaW1hZ2UubWF4WCA9IC1pbWFnZS5taW5YO1xuICAgIGltYWdlLm1pblkgPSBNYXRoLm1pbigoKGdlc3R1cmUuc2xpZGVIZWlnaHQgLyAyKSAtIChzY2FsZWRIZWlnaHQgLyAyKSksIDApO1xuICAgIGltYWdlLm1heFkgPSAtaW1hZ2UubWluWTtcblxuICAgIGltYWdlLnRvdWNoZXNDdXJyZW50LnggPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICBpbWFnZS50b3VjaGVzQ3VycmVudC55ID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG5cbiAgICBpZiAoIWltYWdlLmlzTW92ZWQgJiYgIXpvb20uaXNTY2FsaW5nKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHN3aXBlci5pc0hvcml6b250YWwoKSAmJlxuICAgICAgICAoXG4gICAgICAgICAgKE1hdGguZmxvb3IoaW1hZ2UubWluWCkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRYKSAmJiBpbWFnZS50b3VjaGVzQ3VycmVudC54IDwgaW1hZ2UudG91Y2hlc1N0YXJ0LngpIHx8XG4gICAgICAgICAgKE1hdGguZmxvb3IoaW1hZ2UubWF4WCkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRYKSAmJiBpbWFnZS50b3VjaGVzQ3VycmVudC54ID4gaW1hZ2UudG91Y2hlc1N0YXJ0LngpXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgIXN3aXBlci5pc0hvcml6b250YWwoKSAmJlxuICAgICAgICAoXG4gICAgICAgICAgKE1hdGguZmxvb3IoaW1hZ2UubWluWSkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRZKSAmJiBpbWFnZS50b3VjaGVzQ3VycmVudC55IDwgaW1hZ2UudG91Y2hlc1N0YXJ0LnkpIHx8XG4gICAgICAgICAgKE1hdGguZmxvb3IoaW1hZ2UubWF4WSkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRZKSAmJiBpbWFnZS50b3VjaGVzQ3VycmVudC55ID4gaW1hZ2UudG91Y2hlc1N0YXJ0LnkpXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIGltYWdlLmlzTW92ZWQgPSB0cnVlO1xuICAgIGltYWdlLmN1cnJlbnRYID0gKGltYWdlLnRvdWNoZXNDdXJyZW50LnggLSBpbWFnZS50b3VjaGVzU3RhcnQueCkgKyBpbWFnZS5zdGFydFg7XG4gICAgaW1hZ2UuY3VycmVudFkgPSAoaW1hZ2UudG91Y2hlc0N1cnJlbnQueSAtIGltYWdlLnRvdWNoZXNTdGFydC55KSArIGltYWdlLnN0YXJ0WTtcblxuICAgIGlmIChpbWFnZS5jdXJyZW50WCA8IGltYWdlLm1pblgpIHtcbiAgICAgIGltYWdlLmN1cnJlbnRYID0gKGltYWdlLm1pblggKyAxKSAtICgoKGltYWdlLm1pblggLSBpbWFnZS5jdXJyZW50WCkgKyAxKSAqKiAwLjgpO1xuICAgIH1cbiAgICBpZiAoaW1hZ2UuY3VycmVudFggPiBpbWFnZS5tYXhYKSB7XG4gICAgICBpbWFnZS5jdXJyZW50WCA9IChpbWFnZS5tYXhYIC0gMSkgKyAoKChpbWFnZS5jdXJyZW50WCAtIGltYWdlLm1heFgpICsgMSkgKiogMC44KTtcbiAgICB9XG5cbiAgICBpZiAoaW1hZ2UuY3VycmVudFkgPCBpbWFnZS5taW5ZKSB7XG4gICAgICBpbWFnZS5jdXJyZW50WSA9IChpbWFnZS5taW5ZICsgMSkgLSAoKChpbWFnZS5taW5ZIC0gaW1hZ2UuY3VycmVudFkpICsgMSkgKiogMC44KTtcbiAgICB9XG4gICAgaWYgKGltYWdlLmN1cnJlbnRZID4gaW1hZ2UubWF4WSkge1xuICAgICAgaW1hZ2UuY3VycmVudFkgPSAoaW1hZ2UubWF4WSAtIDEpICsgKCgoaW1hZ2UuY3VycmVudFkgLSBpbWFnZS5tYXhZKSArIDEpICoqIDAuOCk7XG4gICAgfVxuXG4gICAgLy8gVmVsb2NpdHlcbiAgICBpZiAoIXZlbG9jaXR5LnByZXZQb3NpdGlvblgpIHZlbG9jaXR5LnByZXZQb3NpdGlvblggPSBpbWFnZS50b3VjaGVzQ3VycmVudC54O1xuICAgIGlmICghdmVsb2NpdHkucHJldlBvc2l0aW9uWSkgdmVsb2NpdHkucHJldlBvc2l0aW9uWSA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lnk7XG4gICAgaWYgKCF2ZWxvY2l0eS5wcmV2VGltZSkgdmVsb2NpdHkucHJldlRpbWUgPSBEYXRlLm5vdygpO1xuICAgIHZlbG9jaXR5LnggPSAoaW1hZ2UudG91Y2hlc0N1cnJlbnQueCAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblgpIC8gKERhdGUubm93KCkgLSB2ZWxvY2l0eS5wcmV2VGltZSkgLyAyO1xuICAgIHZlbG9jaXR5LnkgPSAoaW1hZ2UudG91Y2hlc0N1cnJlbnQueSAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblkpIC8gKERhdGUubm93KCkgLSB2ZWxvY2l0eS5wcmV2VGltZSkgLyAyO1xuICAgIGlmIChNYXRoLmFicyhpbWFnZS50b3VjaGVzQ3VycmVudC54IC0gdmVsb2NpdHkucHJldlBvc2l0aW9uWCkgPCAyKSB2ZWxvY2l0eS54ID0gMDtcbiAgICBpZiAoTWF0aC5hYnMoaW1hZ2UudG91Y2hlc0N1cnJlbnQueSAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblkpIDwgMikgdmVsb2NpdHkueSA9IDA7XG4gICAgdmVsb2NpdHkucHJldlBvc2l0aW9uWCA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lng7XG4gICAgdmVsb2NpdHkucHJldlBvc2l0aW9uWSA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lnk7XG4gICAgdmVsb2NpdHkucHJldlRpbWUgPSBEYXRlLm5vdygpO1xuXG4gICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke2ltYWdlLmN1cnJlbnRYfXB4LCAke2ltYWdlLmN1cnJlbnRZfXB4LDApYCk7XG4gIH0sXG4gIG9uVG91Y2hFbmQoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgY29uc3QgeyBnZXN0dXJlLCBpbWFnZSwgdmVsb2NpdHkgfSA9IHpvb207XG4gICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgaWYgKCFpbWFnZS5pc1RvdWNoZWQgfHwgIWltYWdlLmlzTW92ZWQpIHtcbiAgICAgIGltYWdlLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgaW1hZ2UuaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICBpbWFnZS5pc01vdmVkID0gZmFsc2U7XG4gICAgbGV0IG1vbWVudHVtRHVyYXRpb25YID0gMzAwO1xuICAgIGxldCBtb21lbnR1bUR1cmF0aW9uWSA9IDMwMDtcbiAgICBjb25zdCBtb21lbnR1bURpc3RhbmNlWCA9IHZlbG9jaXR5LnggKiBtb21lbnR1bUR1cmF0aW9uWDtcbiAgICBjb25zdCBuZXdQb3NpdGlvblggPSBpbWFnZS5jdXJyZW50WCArIG1vbWVudHVtRGlzdGFuY2VYO1xuICAgIGNvbnN0IG1vbWVudHVtRGlzdGFuY2VZID0gdmVsb2NpdHkueSAqIG1vbWVudHVtRHVyYXRpb25ZO1xuICAgIGNvbnN0IG5ld1Bvc2l0aW9uWSA9IGltYWdlLmN1cnJlbnRZICsgbW9tZW50dW1EaXN0YW5jZVk7XG5cbiAgICAvLyBGaXggZHVyYXRpb25cbiAgICBpZiAodmVsb2NpdHkueCAhPT0gMCkgbW9tZW50dW1EdXJhdGlvblggPSBNYXRoLmFicygobmV3UG9zaXRpb25YIC0gaW1hZ2UuY3VycmVudFgpIC8gdmVsb2NpdHkueCk7XG4gICAgaWYgKHZlbG9jaXR5LnkgIT09IDApIG1vbWVudHVtRHVyYXRpb25ZID0gTWF0aC5hYnMoKG5ld1Bvc2l0aW9uWSAtIGltYWdlLmN1cnJlbnRZKSAvIHZlbG9jaXR5LnkpO1xuICAgIGNvbnN0IG1vbWVudHVtRHVyYXRpb24gPSBNYXRoLm1heChtb21lbnR1bUR1cmF0aW9uWCwgbW9tZW50dW1EdXJhdGlvblkpO1xuXG4gICAgaW1hZ2UuY3VycmVudFggPSBuZXdQb3NpdGlvblg7XG4gICAgaW1hZ2UuY3VycmVudFkgPSBuZXdQb3NpdGlvblk7XG5cbiAgICAvLyBEZWZpbmUgaWYgd2UgbmVlZCBpbWFnZSBkcmFnXG4gICAgY29uc3Qgc2NhbGVkV2lkdGggPSBpbWFnZS53aWR0aCAqIHpvb20uc2NhbGU7XG4gICAgY29uc3Qgc2NhbGVkSGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0ICogem9vbS5zY2FsZTtcbiAgICBpbWFnZS5taW5YID0gTWF0aC5taW4oKChnZXN0dXJlLnNsaWRlV2lkdGggLyAyKSAtIChzY2FsZWRXaWR0aCAvIDIpKSwgMCk7XG4gICAgaW1hZ2UubWF4WCA9IC1pbWFnZS5taW5YO1xuICAgIGltYWdlLm1pblkgPSBNYXRoLm1pbigoKGdlc3R1cmUuc2xpZGVIZWlnaHQgLyAyKSAtIChzY2FsZWRIZWlnaHQgLyAyKSksIDApO1xuICAgIGltYWdlLm1heFkgPSAtaW1hZ2UubWluWTtcbiAgICBpbWFnZS5jdXJyZW50WCA9IE1hdGgubWF4KE1hdGgubWluKGltYWdlLmN1cnJlbnRYLCBpbWFnZS5tYXhYKSwgaW1hZ2UubWluWCk7XG4gICAgaW1hZ2UuY3VycmVudFkgPSBNYXRoLm1heChNYXRoLm1pbihpbWFnZS5jdXJyZW50WSwgaW1hZ2UubWF4WSksIGltYWdlLm1pblkpO1xuXG4gICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNpdGlvbihtb21lbnR1bUR1cmF0aW9uKS50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7aW1hZ2UuY3VycmVudFh9cHgsICR7aW1hZ2UuY3VycmVudFl9cHgsMClgKTtcbiAgfSxcbiAgb25UcmFuc2l0aW9uRW5kKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGNvbnN0IHsgZ2VzdHVyZSB9ID0gem9vbTtcbiAgICBpZiAoZ2VzdHVyZS4kc2xpZGVFbCAmJiBzd2lwZXIucHJldmlvdXNJbmRleCAhPT0gc3dpcGVyLmFjdGl2ZUluZGV4KSB7XG4gICAgICBnZXN0dXJlLiRpbWFnZUVsLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKDEpJyk7XG4gICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKDAsMCwwKScpO1xuICAgICAgZ2VzdHVyZS4kc2xpZGVFbCA9IHVuZGVmaW5lZDtcbiAgICAgIGdlc3R1cmUuJGltYWdlRWwgPSB1bmRlZmluZWQ7XG4gICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbCA9IHVuZGVmaW5lZDtcblxuICAgICAgem9vbS5zY2FsZSA9IDE7XG4gICAgICB6b29tLmN1cnJlbnRTY2FsZSA9IDE7XG4gICAgfVxuICB9LFxuICAvLyBUb2dnbGUgWm9vbVxuICB0b2dnbGUoZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuXG4gICAgaWYgKHpvb20uc2NhbGUgJiYgem9vbS5zY2FsZSAhPT0gMSkge1xuICAgICAgLy8gWm9vbSBPdXRcbiAgICAgIHpvb20ub3V0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFpvb20gSW5cbiAgICAgIHpvb20uaW4oZSk7XG4gICAgfVxuICB9LFxuICBpbihlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgY29uc3QgeyBnZXN0dXJlLCBpbWFnZSB9ID0gem9vbTtcblxuICAgIGlmICghZ2VzdHVyZS4kc2xpZGVFbCkge1xuICAgICAgZ2VzdHVyZS4kc2xpZGVFbCA9IHN3aXBlci5jbGlja2VkU2xpZGUgPyAkKHN3aXBlci5jbGlja2VkU2xpZGUpIDogc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IGdlc3R1cmUuJHNsaWRlRWwuZmluZCgnaW1nLCBzdmcsIGNhbnZhcycpO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwgPSBnZXN0dXJlLiRpbWFnZUVsLnBhcmVudChgLiR7cGFyYW1zLmNvbnRhaW5lckNsYXNzfWApO1xuICAgIH1cbiAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgIGdlc3R1cmUuJHNsaWRlRWwuYWRkQ2xhc3MoYCR7cGFyYW1zLnpvb21lZFNsaWRlQ2xhc3N9YCk7XG5cbiAgICBsZXQgdG91Y2hYO1xuICAgIGxldCB0b3VjaFk7XG4gICAgbGV0IG9mZnNldFg7XG4gICAgbGV0IG9mZnNldFk7XG4gICAgbGV0IGRpZmZYO1xuICAgIGxldCBkaWZmWTtcbiAgICBsZXQgdHJhbnNsYXRlWDtcbiAgICBsZXQgdHJhbnNsYXRlWTtcbiAgICBsZXQgaW1hZ2VXaWR0aDtcbiAgICBsZXQgaW1hZ2VIZWlnaHQ7XG4gICAgbGV0IHNjYWxlZFdpZHRoO1xuICAgIGxldCBzY2FsZWRIZWlnaHQ7XG4gICAgbGV0IHRyYW5zbGF0ZU1pblg7XG4gICAgbGV0IHRyYW5zbGF0ZU1pblk7XG4gICAgbGV0IHRyYW5zbGF0ZU1heFg7XG4gICAgbGV0IHRyYW5zbGF0ZU1heFk7XG4gICAgbGV0IHNsaWRlV2lkdGg7XG4gICAgbGV0IHNsaWRlSGVpZ2h0O1xuXG4gICAgaWYgKHR5cGVvZiBpbWFnZS50b3VjaGVzU3RhcnQueCA9PT0gJ3VuZGVmaW5lZCcgJiYgZSkge1xuICAgICAgdG91Y2hYID0gZS50eXBlID09PSAndG91Y2hlbmQnID8gZS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgICB0b3VjaFkgPSBlLnR5cGUgPT09ICd0b3VjaGVuZCcgPyBlLmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgICB9IGVsc2Uge1xuICAgICAgdG91Y2hYID0gaW1hZ2UudG91Y2hlc1N0YXJ0Lng7XG4gICAgICB0b3VjaFkgPSBpbWFnZS50b3VjaGVzU3RhcnQueTtcbiAgICB9XG5cbiAgICB6b29tLnNjYWxlID0gZ2VzdHVyZS4kaW1hZ2VXcmFwRWwuYXR0cignZGF0YS1zd2lwZXItem9vbScpIHx8IHBhcmFtcy5tYXhSYXRpbztcbiAgICB6b29tLmN1cnJlbnRTY2FsZSA9IGdlc3R1cmUuJGltYWdlV3JhcEVsLmF0dHIoJ2RhdGEtc3dpcGVyLXpvb20nKSB8fCBwYXJhbXMubWF4UmF0aW87XG4gICAgaWYgKGUpIHtcbiAgICAgIHNsaWRlV2lkdGggPSBnZXN0dXJlLiRzbGlkZUVsWzBdLm9mZnNldFdpZHRoO1xuICAgICAgc2xpZGVIZWlnaHQgPSBnZXN0dXJlLiRzbGlkZUVsWzBdLm9mZnNldEhlaWdodDtcbiAgICAgIG9mZnNldFggPSBnZXN0dXJlLiRzbGlkZUVsLm9mZnNldCgpLmxlZnQ7XG4gICAgICBvZmZzZXRZID0gZ2VzdHVyZS4kc2xpZGVFbC5vZmZzZXQoKS50b3A7XG4gICAgICBkaWZmWCA9IChvZmZzZXRYICsgKHNsaWRlV2lkdGggLyAyKSkgLSB0b3VjaFg7XG4gICAgICBkaWZmWSA9IChvZmZzZXRZICsgKHNsaWRlSGVpZ2h0IC8gMikpIC0gdG91Y2hZO1xuXG4gICAgICBpbWFnZVdpZHRoID0gZ2VzdHVyZS4kaW1hZ2VFbFswXS5vZmZzZXRXaWR0aDtcbiAgICAgIGltYWdlSGVpZ2h0ID0gZ2VzdHVyZS4kaW1hZ2VFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICBzY2FsZWRXaWR0aCA9IGltYWdlV2lkdGggKiB6b29tLnNjYWxlO1xuICAgICAgc2NhbGVkSGVpZ2h0ID0gaW1hZ2VIZWlnaHQgKiB6b29tLnNjYWxlO1xuXG4gICAgICB0cmFuc2xhdGVNaW5YID0gTWF0aC5taW4oKChzbGlkZVdpZHRoIC8gMikgLSAoc2NhbGVkV2lkdGggLyAyKSksIDApO1xuICAgICAgdHJhbnNsYXRlTWluWSA9IE1hdGgubWluKCgoc2xpZGVIZWlnaHQgLyAyKSAtIChzY2FsZWRIZWlnaHQgLyAyKSksIDApO1xuICAgICAgdHJhbnNsYXRlTWF4WCA9IC10cmFuc2xhdGVNaW5YO1xuICAgICAgdHJhbnNsYXRlTWF4WSA9IC10cmFuc2xhdGVNaW5ZO1xuXG4gICAgICB0cmFuc2xhdGVYID0gZGlmZlggKiB6b29tLnNjYWxlO1xuICAgICAgdHJhbnNsYXRlWSA9IGRpZmZZICogem9vbS5zY2FsZTtcblxuICAgICAgaWYgKHRyYW5zbGF0ZVggPCB0cmFuc2xhdGVNaW5YKSB7XG4gICAgICAgIHRyYW5zbGF0ZVggPSB0cmFuc2xhdGVNaW5YO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zbGF0ZVggPiB0cmFuc2xhdGVNYXhYKSB7XG4gICAgICAgIHRyYW5zbGF0ZVggPSB0cmFuc2xhdGVNYXhYO1xuICAgICAgfVxuXG4gICAgICBpZiAodHJhbnNsYXRlWSA8IHRyYW5zbGF0ZU1pblkpIHtcbiAgICAgICAgdHJhbnNsYXRlWSA9IHRyYW5zbGF0ZU1pblk7XG4gICAgICB9XG4gICAgICBpZiAodHJhbnNsYXRlWSA+IHRyYW5zbGF0ZU1heFkpIHtcbiAgICAgICAgdHJhbnNsYXRlWSA9IHRyYW5zbGF0ZU1heFk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zbGF0ZVggPSAwO1xuICAgICAgdHJhbnNsYXRlWSA9IDA7XG4gICAgfVxuICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zaXRpb24oMzAwKS50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7dHJhbnNsYXRlWH1weCwgJHt0cmFuc2xhdGVZfXB4LDApYCk7XG4gICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoJHt6b29tLnNjYWxlfSlgKTtcbiAgfSxcbiAgb3V0KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG5cbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgIGNvbnN0IHsgZ2VzdHVyZSB9ID0gem9vbTtcblxuICAgIGlmICghZ2VzdHVyZS4kc2xpZGVFbCkge1xuICAgICAgZ2VzdHVyZS4kc2xpZGVFbCA9IHN3aXBlci5jbGlja2VkU2xpZGUgPyAkKHN3aXBlci5jbGlja2VkU2xpZGUpIDogc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IGdlc3R1cmUuJHNsaWRlRWwuZmluZCgnaW1nLCBzdmcsIGNhbnZhcycpO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwgPSBnZXN0dXJlLiRpbWFnZUVsLnBhcmVudChgLiR7cGFyYW1zLmNvbnRhaW5lckNsYXNzfWApO1xuICAgIH1cbiAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgIHpvb20uc2NhbGUgPSAxO1xuICAgIHpvb20uY3VycmVudFNjYWxlID0gMTtcbiAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgwLDAsMCknKTtcbiAgICBnZXN0dXJlLiRpbWFnZUVsLnRyYW5zaXRpb24oMzAwKS50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZSgxKScpO1xuICAgIGdlc3R1cmUuJHNsaWRlRWwucmVtb3ZlQ2xhc3MoYCR7cGFyYW1zLnpvb21lZFNsaWRlQ2xhc3N9YCk7XG4gICAgZ2VzdHVyZS4kc2xpZGVFbCA9IHVuZGVmaW5lZDtcbiAgfSxcbiAgLy8gQXR0YWNoL0RldGFjaCBFdmVudHNcbiAgZW5hYmxlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGlmICh6b29tLmVuYWJsZWQpIHJldHVybjtcbiAgICB6b29tLmVuYWJsZWQgPSB0cnVlO1xuXG4gICAgY29uc3Qgc2xpZGVzID0gc3dpcGVyLnNsaWRlcztcblxuICAgIGNvbnN0IHBhc3NpdmVMaXN0ZW5lciA9IHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnICYmIFN1cHBvcnQkNC5wYXNzaXZlTGlzdGVuZXIgJiYgc3dpcGVyLnBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8geyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiBmYWxzZSB9IDogZmFsc2U7XG5cbiAgICAvLyBTY2FsZSBpbWFnZVxuICAgIGlmIChTdXBwb3J0JDQuZ2VzdHVyZXMpIHtcbiAgICAgIHNsaWRlcy5vbignZ2VzdHVyZXN0YXJ0Jywgem9vbS5vbkdlc3R1cmVTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIHNsaWRlcy5vbignZ2VzdHVyZWNoYW5nZScsIHpvb20ub25HZXN0dXJlQ2hhbmdlLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgc2xpZGVzLm9uKCdnZXN0dXJlZW5kJywgem9vbS5vbkdlc3R1cmVFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgc2xpZGVzLm9uKHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCwgem9vbS5vbkdlc3R1cmVTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIHNsaWRlcy5vbihzd2lwZXIudG91Y2hFdmVudHMubW92ZSwgem9vbS5vbkdlc3R1cmVDaGFuZ2UsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICBzbGlkZXMub24oc3dpcGVyLnRvdWNoRXZlbnRzLmVuZCwgem9vbS5vbkdlc3R1cmVFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gTW92ZSBpbWFnZVxuICAgIHN3aXBlci5zbGlkZXMuZWFjaCgoaW5kZXgsIHNsaWRlRWwpID0+IHtcbiAgICAgIGNvbnN0ICRzbGlkZUVsID0gJChzbGlkZUVsKTtcbiAgICAgIGlmICgkc2xpZGVFbC5maW5kKGAuJHtzd2lwZXIucGFyYW1zLnpvb20uY29udGFpbmVyQ2xhc3N9YCkubGVuZ3RoID4gMCkge1xuICAgICAgICAkc2xpZGVFbC5vbihzd2lwZXIudG91Y2hFdmVudHMubW92ZSwgem9vbS5vblRvdWNoTW92ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIGRpc2FibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgaWYgKCF6b29tLmVuYWJsZWQpIHJldHVybjtcblxuICAgIHN3aXBlci56b29tLmVuYWJsZWQgPSBmYWxzZTtcblxuICAgIGNvbnN0IHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG5cbiAgICBjb25zdCBwYXNzaXZlTGlzdGVuZXIgPSBzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0JyAmJiBTdXBwb3J0JDQucGFzc2l2ZUxpc3RlbmVyICYmIHN3aXBlci5wYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogZmFsc2UgfSA6IGZhbHNlO1xuXG4gICAgLy8gU2NhbGUgaW1hZ2VcbiAgICBpZiAoU3VwcG9ydCQ0Lmdlc3R1cmVzKSB7XG4gICAgICBzbGlkZXMub2ZmKCdnZXN0dXJlc3RhcnQnLCB6b29tLm9uR2VzdHVyZVN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgc2xpZGVzLm9mZignZ2VzdHVyZWNoYW5nZScsIHpvb20ub25HZXN0dXJlQ2hhbmdlLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgc2xpZGVzLm9mZignZ2VzdHVyZWVuZCcsIHpvb20ub25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH0gZWxzZSBpZiAoc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcpIHtcbiAgICAgIHNsaWRlcy5vZmYoc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0LCB6b29tLm9uR2VzdHVyZVN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgc2xpZGVzLm9mZihzd2lwZXIudG91Y2hFdmVudHMubW92ZSwgem9vbS5vbkdlc3R1cmVDaGFuZ2UsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICBzbGlkZXMub2ZmKHN3aXBlci50b3VjaEV2ZW50cy5lbmQsIHpvb20ub25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIE1vdmUgaW1hZ2VcbiAgICBzd2lwZXIuc2xpZGVzLmVhY2goKGluZGV4LCBzbGlkZUVsKSA9PiB7XG4gICAgICBjb25zdCAkc2xpZGVFbCA9ICQoc2xpZGVFbCk7XG4gICAgICBpZiAoJHNsaWRlRWwuZmluZChgLiR7c3dpcGVyLnBhcmFtcy56b29tLmNvbnRhaW5lckNsYXNzfWApLmxlbmd0aCA+IDApIHtcbiAgICAgICAgJHNsaWRlRWwub2ZmKHN3aXBlci50b3VjaEV2ZW50cy5tb3ZlLCB6b29tLm9uVG91Y2hNb3ZlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbn07XG5cbnZhciBab29tJDEgPSB7XG4gIG5hbWU6ICd6b29tJyxcbiAgcGFyYW1zOiB7XG4gICAgem9vbToge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBtYXhSYXRpbzogMyxcbiAgICAgIG1pblJhdGlvOiAxLFxuICAgICAgdG9nZ2xlOiB0cnVlLFxuICAgICAgY29udGFpbmVyQ2xhc3M6ICdzd2lwZXItem9vbS1jb250YWluZXInLFxuICAgICAgem9vbWVkU2xpZGVDbGFzczogJ3N3aXBlci1zbGlkZS16b29tZWQnLFxuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHpvb20gPSB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIHNjYWxlOiAxLFxuICAgICAgY3VycmVudFNjYWxlOiAxLFxuICAgICAgaXNTY2FsaW5nOiBmYWxzZSxcbiAgICAgIGdlc3R1cmU6IHtcbiAgICAgICAgJHNsaWRlRWw6IHVuZGVmaW5lZCxcbiAgICAgICAgc2xpZGVXaWR0aDogdW5kZWZpbmVkLFxuICAgICAgICBzbGlkZUhlaWdodDogdW5kZWZpbmVkLFxuICAgICAgICAkaW1hZ2VFbDogdW5kZWZpbmVkLFxuICAgICAgICAkaW1hZ2VXcmFwRWw6IHVuZGVmaW5lZCxcbiAgICAgICAgbWF4UmF0aW86IDMsXG4gICAgICB9LFxuICAgICAgaW1hZ2U6IHtcbiAgICAgICAgaXNUb3VjaGVkOiB1bmRlZmluZWQsXG4gICAgICAgIGlzTW92ZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgY3VycmVudFg6IHVuZGVmaW5lZCxcbiAgICAgICAgY3VycmVudFk6IHVuZGVmaW5lZCxcbiAgICAgICAgbWluWDogdW5kZWZpbmVkLFxuICAgICAgICBtaW5ZOiB1bmRlZmluZWQsXG4gICAgICAgIG1heFg6IHVuZGVmaW5lZCxcbiAgICAgICAgbWF4WTogdW5kZWZpbmVkLFxuICAgICAgICB3aWR0aDogdW5kZWZpbmVkLFxuICAgICAgICBoZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRYOiB1bmRlZmluZWQsXG4gICAgICAgIHN0YXJ0WTogdW5kZWZpbmVkLFxuICAgICAgICB0b3VjaGVzU3RhcnQ6IHt9LFxuICAgICAgICB0b3VjaGVzQ3VycmVudDoge30sXG4gICAgICB9LFxuICAgICAgdmVsb2NpdHk6IHtcbiAgICAgICAgeDogdW5kZWZpbmVkLFxuICAgICAgICB5OiB1bmRlZmluZWQsXG4gICAgICAgIHByZXZQb3NpdGlvblg6IHVuZGVmaW5lZCxcbiAgICAgICAgcHJldlBvc2l0aW9uWTogdW5kZWZpbmVkLFxuICAgICAgICBwcmV2VGltZTogdW5kZWZpbmVkLFxuICAgICAgfSxcbiAgICB9O1xuICAgICgnb25HZXN0dXJlU3RhcnQgb25HZXN0dXJlQ2hhbmdlIG9uR2VzdHVyZUVuZCBvblRvdWNoU3RhcnQgb25Ub3VjaE1vdmUgb25Ub3VjaEVuZCBvblRyYW5zaXRpb25FbmQgdG9nZ2xlIGVuYWJsZSBkaXNhYmxlIGluIG91dCcpLnNwbGl0KCcgJykuZm9yRWFjaCgobWV0aG9kTmFtZSkgPT4ge1xuICAgICAgem9vbVttZXRob2ROYW1lXSA9IFpvb21bbWV0aG9kTmFtZV0uYmluZChzd2lwZXIpO1xuICAgIH0pO1xuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIHpvb20sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy56b29tLmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLnpvb20uZW5hYmxlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZXN0cm95KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci56b29tLmRpc2FibGUoKTtcbiAgICB9LFxuICAgIHRvdWNoU3RhcnQoZSkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnpvb20uZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnpvb20ub25Ub3VjaFN0YXJ0KGUpO1xuICAgIH0sXG4gICAgdG91Y2hFbmQoZSkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnpvb20uZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnpvb20ub25Ub3VjaEVuZChlKTtcbiAgICB9LFxuICAgIGRvdWJsZVRhcChlKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkICYmIHN3aXBlci56b29tLmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy56b29tLnRvZ2dsZSkge1xuICAgICAgICBzd2lwZXIuem9vbS50b2dnbGUoZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICB0cmFuc2l0aW9uRW5kKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIuem9vbS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci56b29tLm9uVHJhbnNpdGlvbkVuZCgpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBMYXp5JDEgPSB7XG4gIGxvYWRJbWFnZXNJblNsaWRlKGluZGV4LCBsb2FkSW5EdXBsaWNhdGUgPSB0cnVlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmxhenk7XG4gICAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLnNsaWRlcy5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgIGNvbnN0ICRzbGlkZUVsID0gc3dpcGVyLnNsaWRlcy5lcShpbmRleCk7XG4gICAgbGV0ICRpbWFnZXMgPSAkc2xpZGVFbC5maW5kKGAuJHtwYXJhbXMuZWxlbWVudENsYXNzfTpub3QoLiR7cGFyYW1zLmxvYWRlZENsYXNzfSk6bm90KC4ke3BhcmFtcy5sb2FkaW5nQ2xhc3N9KWApO1xuICAgIGlmICgkc2xpZGVFbC5oYXNDbGFzcyhwYXJhbXMuZWxlbWVudENsYXNzKSAmJiAhJHNsaWRlRWwuaGFzQ2xhc3MocGFyYW1zLmxvYWRlZENsYXNzKSAmJiAhJHNsaWRlRWwuaGFzQ2xhc3MocGFyYW1zLmxvYWRpbmdDbGFzcykpIHtcbiAgICAgICRpbWFnZXMgPSAkaW1hZ2VzLmFkZCgkc2xpZGVFbFswXSk7XG4gICAgfVxuICAgIGlmICgkaW1hZ2VzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgJGltYWdlcy5lYWNoKChpbWFnZUluZGV4LCBpbWFnZUVsKSA9PiB7XG4gICAgICBjb25zdCAkaW1hZ2VFbCA9ICQoaW1hZ2VFbCk7XG4gICAgICAkaW1hZ2VFbC5hZGRDbGFzcyhwYXJhbXMubG9hZGluZ0NsYXNzKTtcblxuICAgICAgY29uc3QgYmFja2dyb3VuZCA9ICRpbWFnZUVsLmF0dHIoJ2RhdGEtYmFja2dyb3VuZCcpO1xuICAgICAgY29uc3Qgc3JjID0gJGltYWdlRWwuYXR0cignZGF0YS1zcmMnKTtcbiAgICAgIGNvbnN0IHNyY3NldCA9ICRpbWFnZUVsLmF0dHIoJ2RhdGEtc3Jjc2V0Jyk7XG4gICAgICBjb25zdCBzaXplcyA9ICRpbWFnZUVsLmF0dHIoJ2RhdGEtc2l6ZXMnKTtcblxuICAgICAgc3dpcGVyLmxvYWRJbWFnZSgkaW1hZ2VFbFswXSwgKHNyYyB8fCBiYWNrZ3JvdW5kKSwgc3Jjc2V0LCBzaXplcywgZmFsc2UsICgpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzd2lwZXIgPT09ICd1bmRlZmluZWQnIHx8IHN3aXBlciA9PT0gbnVsbCB8fCAhc3dpcGVyIHx8IChzd2lwZXIgJiYgIXN3aXBlci5wYXJhbXMpKSByZXR1cm47XG4gICAgICAgIGlmIChiYWNrZ3JvdW5kKSB7XG4gICAgICAgICAgJGltYWdlRWwuY3NzKCdiYWNrZ3JvdW5kLWltYWdlJywgYHVybChcIiR7YmFja2dyb3VuZH1cIilgKTtcbiAgICAgICAgICAkaW1hZ2VFbC5yZW1vdmVBdHRyKCdkYXRhLWJhY2tncm91bmQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoc3Jjc2V0KSB7XG4gICAgICAgICAgICAkaW1hZ2VFbC5hdHRyKCdzcmNzZXQnLCBzcmNzZXQpO1xuICAgICAgICAgICAgJGltYWdlRWwucmVtb3ZlQXR0cignZGF0YS1zcmNzZXQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNpemVzKSB7XG4gICAgICAgICAgICAkaW1hZ2VFbC5hdHRyKCdzaXplcycsIHNpemVzKTtcbiAgICAgICAgICAgICRpbWFnZUVsLnJlbW92ZUF0dHIoJ2RhdGEtc2l6ZXMnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNyYykge1xuICAgICAgICAgICAgJGltYWdlRWwuYXR0cignc3JjJywgc3JjKTtcbiAgICAgICAgICAgICRpbWFnZUVsLnJlbW92ZUF0dHIoJ2RhdGEtc3JjJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgJGltYWdlRWwuYWRkQ2xhc3MocGFyYW1zLmxvYWRlZENsYXNzKS5yZW1vdmVDbGFzcyhwYXJhbXMubG9hZGluZ0NsYXNzKTtcbiAgICAgICAgJHNsaWRlRWwuZmluZChgLiR7cGFyYW1zLnByZWxvYWRlckNsYXNzfWApLnJlbW92ZSgpO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wICYmIGxvYWRJbkR1cGxpY2F0ZSkge1xuICAgICAgICAgIGNvbnN0IHNsaWRlT3JpZ2luYWxJbmRleCA9ICRzbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgICAgICAgaWYgKCRzbGlkZUVsLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsU2xpZGUgPSBzd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbihgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzbGlkZU9yaWdpbmFsSW5kZXh9XCJdOm5vdCguJHtzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3N9KWApO1xuICAgICAgICAgICAgc3dpcGVyLmxhenkubG9hZEltYWdlc0luU2xpZGUob3JpZ2luYWxTbGlkZS5pbmRleCgpLCBmYWxzZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGR1cGxpY2F0ZWRTbGlkZSA9IHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3N9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzbGlkZU9yaWdpbmFsSW5kZXh9XCJdYCk7XG4gICAgICAgICAgICBzd2lwZXIubGF6eS5sb2FkSW1hZ2VzSW5TbGlkZShkdXBsaWNhdGVkU2xpZGUuaW5kZXgoKSwgZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzd2lwZXIuZW1pdCgnbGF6eUltYWdlUmVhZHknLCAkc2xpZGVFbFswXSwgJGltYWdlRWxbMF0pO1xuICAgICAgfSk7XG5cbiAgICAgIHN3aXBlci5lbWl0KCdsYXp5SW1hZ2VMb2FkJywgJHNsaWRlRWxbMF0sICRpbWFnZUVsWzBdKTtcbiAgICB9KTtcbiAgfSxcbiAgbG9hZCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHsgJHdyYXBwZXJFbCwgcGFyYW1zOiBzd2lwZXJQYXJhbXMsIHNsaWRlcywgYWN0aXZlSW5kZXggfSA9IHN3aXBlcjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXJQYXJhbXMubGF6eTtcblxuICAgIGxldCBzbGlkZXNQZXJWaWV3ID0gc3dpcGVyUGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgaWYgKHNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgICAgc2xpZGVzUGVyVmlldyA9IDA7XG4gICAgfVxuXG4gICAgaWYgKCFzd2lwZXIubGF6eS5pbml0aWFsSW1hZ2VMb2FkZWQpIHN3aXBlci5sYXp5LmluaXRpYWxJbWFnZUxvYWRlZCA9IHRydWU7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSB7XG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtzd2lwZXJQYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3N9YCkuZWFjaCgoaW5kZXgsIHNsaWRlRWwpID0+IHtcbiAgICAgICAgc3dpcGVyLmxhenkubG9hZEltYWdlc0luU2xpZGUoJChzbGlkZUVsKS5pbmRleCgpKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoc2xpZGVzUGVyVmlldyA+IDEpIHtcbiAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleDsgaSA8IGFjdGl2ZUluZGV4ICsgc2xpZGVzUGVyVmlldzsgaSArPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZXNbaV0pIHN3aXBlci5sYXp5LmxvYWRJbWFnZXNJblNsaWRlKGkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIubGF6eS5sb2FkSW1hZ2VzSW5TbGlkZShhY3RpdmVJbmRleCk7XG4gICAgfVxuICAgIGlmIChwYXJhbXMubG9hZFByZXZOZXh0KSB7XG4gICAgICBpZiAoc2xpZGVzUGVyVmlldyA+IDEgfHwgKHBhcmFtcy5sb2FkUHJldk5leHRBbW91bnQgJiYgcGFyYW1zLmxvYWRQcmV2TmV4dEFtb3VudCA+IDEpKSB7XG4gICAgICAgIGNvbnN0IGFtb3VudCA9IHBhcmFtcy5sb2FkUHJldk5leHRBbW91bnQ7XG4gICAgICAgIGNvbnN0IHNwdiA9IHNsaWRlc1BlclZpZXc7XG4gICAgICAgIGNvbnN0IG1heEluZGV4ID0gTWF0aC5taW4oYWN0aXZlSW5kZXggKyBzcHYgKyBNYXRoLm1heChhbW91bnQsIHNwdiksIHNsaWRlcy5sZW5ndGgpO1xuICAgICAgICBjb25zdCBtaW5JbmRleCA9IE1hdGgubWF4KGFjdGl2ZUluZGV4IC0gTWF0aC5tYXgoc3B2LCBhbW91bnQpLCAwKTtcbiAgICAgICAgLy8gTmV4dCBTbGlkZXNcbiAgICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4ICsgc2xpZGVzUGVyVmlldzsgaSA8IG1heEluZGV4OyBpICs9IDEpIHtcbiAgICAgICAgICBpZiAoc2xpZGVzW2ldKSBzd2lwZXIubGF6eS5sb2FkSW1hZ2VzSW5TbGlkZShpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcmV2IFNsaWRlc1xuICAgICAgICBmb3IgKGxldCBpID0gbWluSW5kZXg7IGkgPCBhY3RpdmVJbmRleDsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKHNsaWRlc1tpXSkgc3dpcGVyLmxhenkubG9hZEltYWdlc0luU2xpZGUoaSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG5leHRTbGlkZSA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3N3aXBlclBhcmFtcy5zbGlkZU5leHRDbGFzc31gKTtcbiAgICAgICAgaWYgKG5leHRTbGlkZS5sZW5ndGggPiAwKSBzd2lwZXIubGF6eS5sb2FkSW1hZ2VzSW5TbGlkZShuZXh0U2xpZGUuaW5kZXgoKSk7XG5cbiAgICAgICAgY29uc3QgcHJldlNsaWRlID0gJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7c3dpcGVyUGFyYW1zLnNsaWRlUHJldkNsYXNzfWApO1xuICAgICAgICBpZiAocHJldlNsaWRlLmxlbmd0aCA+IDApIHN3aXBlci5sYXp5LmxvYWRJbWFnZXNJblNsaWRlKHByZXZTbGlkZS5pbmRleCgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG59O1xuXG52YXIgTGF6eSQyID0ge1xuICBuYW1lOiAnbGF6eScsXG4gIHBhcmFtczoge1xuICAgIGxhenk6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgbG9hZFByZXZOZXh0OiBmYWxzZSxcbiAgICAgIGxvYWRQcmV2TmV4dEFtb3VudDogMSxcbiAgICAgIGxvYWRPblRyYW5zaXRpb25TdGFydDogZmFsc2UsXG5cbiAgICAgIGVsZW1lbnRDbGFzczogJ3N3aXBlci1sYXp5JyxcbiAgICAgIGxvYWRpbmdDbGFzczogJ3N3aXBlci1sYXp5LWxvYWRpbmcnLFxuICAgICAgbG9hZGVkQ2xhc3M6ICdzd2lwZXItbGF6eS1sb2FkZWQnLFxuICAgICAgcHJlbG9hZGVyQ2xhc3M6ICdzd2lwZXItbGF6eS1wcmVsb2FkZXInLFxuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIGxhenk6IHtcbiAgICAgICAgaW5pdGlhbEltYWdlTG9hZGVkOiBmYWxzZSxcbiAgICAgICAgbG9hZDogTGF6eSQxLmxvYWQuYmluZChzd2lwZXIpLFxuICAgICAgICBsb2FkSW1hZ2VzSW5TbGlkZTogTGF6eSQxLmxvYWRJbWFnZXNJblNsaWRlLmJpbmQoc3dpcGVyKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgYmVmb3JlSW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmVsb2FkSW1hZ2VzKSBzd2lwZXIucGFyYW1zLnByZWxvYWRJbWFnZXMgPSBmYWxzZTtcbiAgICB9LFxuICAgIGluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUgPT09IDApIHtcbiAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2Nyb2xsKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmICFzd2lwZXIucGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlc2l6ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdHJhbnNpdGlvblN0YXJ0KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCkge1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmxvYWRPblRyYW5zaXRpb25TdGFydCB8fCAoIXN3aXBlci5wYXJhbXMubGF6eS5sb2FkT25UcmFuc2l0aW9uU3RhcnQgJiYgIXN3aXBlci5sYXp5LmluaXRpYWxJbWFnZUxvYWRlZCkpIHtcbiAgICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHRyYW5zaXRpb25FbmQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkICYmICFzd2lwZXIucGFyYW1zLmxhenkubG9hZE9uVHJhbnNpdGlvblN0YXJ0KSB7XG4gICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufTtcblxuLyogZXNsaW50IG5vLWJpdHdpc2U6IFtcImVycm9yXCIsIHsgXCJhbGxvd1wiOiBbXCI+PlwiXSB9XSAqL1xuY29uc3QgQ29udHJvbGxlciA9IHtcbiAgTGluZWFyU3BsaW5lKHgsIHkpIHtcbiAgICBjb25zdCBiaW5hcnlTZWFyY2ggPSAoZnVuY3Rpb24gc2VhcmNoKCkge1xuICAgICAgbGV0IG1heEluZGV4O1xuICAgICAgbGV0IG1pbkluZGV4O1xuICAgICAgbGV0IGd1ZXNzO1xuICAgICAgcmV0dXJuIChhcnJheSwgdmFsKSA9PiB7XG4gICAgICAgIG1pbkluZGV4ID0gLTE7XG4gICAgICAgIG1heEluZGV4ID0gYXJyYXkubGVuZ3RoO1xuICAgICAgICB3aGlsZSAobWF4SW5kZXggLSBtaW5JbmRleCA+IDEpIHtcbiAgICAgICAgICBndWVzcyA9IG1heEluZGV4ICsgbWluSW5kZXggPj4gMTtcbiAgICAgICAgICBpZiAoYXJyYXlbZ3Vlc3NdIDw9IHZhbCkge1xuICAgICAgICAgICAgbWluSW5kZXggPSBndWVzcztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWF4SW5kZXggPSBndWVzcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1heEluZGV4O1xuICAgICAgfTtcbiAgICB9KCkpO1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgICB0aGlzLmxhc3RJbmRleCA9IHgubGVuZ3RoIC0gMTtcbiAgICAvLyBHaXZlbiBhbiB4IHZhbHVlICh4MiksIHJldHVybiB0aGUgZXhwZWN0ZWQgeTIgdmFsdWU6XG4gICAgLy8gKHgxLHkxKSBpcyB0aGUga25vd24gcG9pbnQgYmVmb3JlIGdpdmVuIHZhbHVlLFxuICAgIC8vICh4Myx5MykgaXMgdGhlIGtub3duIHBvaW50IGFmdGVyIGdpdmVuIHZhbHVlLlxuICAgIGxldCBpMTtcbiAgICBsZXQgaTM7XG5cbiAgICB0aGlzLmludGVycG9sYXRlID0gZnVuY3Rpb24gaW50ZXJwb2xhdGUoeDIpIHtcbiAgICAgIGlmICgheDIpIHJldHVybiAwO1xuXG4gICAgICAvLyBHZXQgdGhlIGluZGV4ZXMgb2YgeDEgYW5kIHgzICh0aGUgYXJyYXkgaW5kZXhlcyBiZWZvcmUgYW5kIGFmdGVyIGdpdmVuIHgyKTpcbiAgICAgIGkzID0gYmluYXJ5U2VhcmNoKHRoaXMueCwgeDIpO1xuICAgICAgaTEgPSBpMyAtIDE7XG5cbiAgICAgIC8vIFdlIGhhdmUgb3VyIGluZGV4ZXMgaTEgJiBpMywgc28gd2UgY2FuIGNhbGN1bGF0ZSBhbHJlYWR5OlxuICAgICAgLy8geTIgOj0gKCh4MuKIkngxKSDDlyAoeTPiiJJ5MSkpIMO3ICh4M+KIkngxKSArIHkxXG4gICAgICByZXR1cm4gKCgoeDIgLSB0aGlzLnhbaTFdKSAqICh0aGlzLnlbaTNdIC0gdGhpcy55W2kxXSkpIC8gKHRoaXMueFtpM10gLSB0aGlzLnhbaTFdKSkgKyB0aGlzLnlbaTFdO1xuICAgIH07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIC8vIHh4eDogZm9yIG5vdyBpIHdpbGwganVzdCBzYXZlIG9uZSBzcGxpbmUgZnVuY3Rpb24gdG8gdG9cbiAgZ2V0SW50ZXJwb2xhdGVGdW5jdGlvbihjKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLnNwbGluZSkge1xuICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lID0gc3dpcGVyLnBhcmFtcy5sb29wID9cbiAgICAgICAgbmV3IENvbnRyb2xsZXIuTGluZWFyU3BsaW5lKHN3aXBlci5zbGlkZXNHcmlkLCBjLnNsaWRlc0dyaWQpIDpcbiAgICAgICAgbmV3IENvbnRyb2xsZXIuTGluZWFyU3BsaW5lKHN3aXBlci5zbmFwR3JpZCwgYy5zbmFwR3JpZCk7XG4gICAgfVxuICB9LFxuICBzZXRUcmFuc2xhdGUoc2V0VHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IGNvbnRyb2xsZWQgPSBzd2lwZXIuY29udHJvbGxlci5jb250cm9sO1xuICAgIGxldCBtdWx0aXBsaWVyO1xuICAgIGxldCBjb250cm9sbGVkVHJhbnNsYXRlO1xuICAgIGZ1bmN0aW9uIHNldENvbnRyb2xsZWRUcmFuc2xhdGUoYykge1xuICAgICAgLy8gdGhpcyB3aWxsIGNyZWF0ZSBhbiBJbnRlcnBvbGF0ZSBmdW5jdGlvbiBiYXNlZCBvbiB0aGUgc25hcEdyaWRzXG4gICAgICAvLyB4IGlzIHRoZSBHcmlkIG9mIHRoZSBzY3JvbGxlZCBzY3JvbGxlciBhbmQgeSB3aWxsIGJlIHRoZSBjb250cm9sbGVkIHNjcm9sbGVyXG4gICAgICAvLyBpdCBtYWtlcyBzZW5zZSB0byBjcmVhdGUgdGhpcyBvbmx5IG9uY2UgYW5kIHJlY2FsbCBpdCBmb3IgdGhlIGludGVycG9sYXRpb25cbiAgICAgIC8vIHRoZSBmdW5jdGlvbiBkb2VzIGEgbG90IG9mIHZhbHVlIGNhY2hpbmcgZm9yIHBlcmZvcm1hbmNlXG4gICAgICBjb25zdCB0cmFuc2xhdGUgPSBjLnJ0bCAmJiBjLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuYnkgPT09ICdzbGlkZScpIHtcbiAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuZ2V0SW50ZXJwb2xhdGVGdW5jdGlvbihjKTtcbiAgICAgICAgLy8gaSBhbSBub3Qgc3VyZSB3aHkgdGhlIHZhbHVlcyBoYXZlIHRvIGJlIG11bHRpcGxpY2F0ZWQgdGhpcyB3YXksIHRyaWVkIHRvIGludmVydCB0aGUgc25hcEdyaWRcbiAgICAgICAgLy8gYnV0IGl0IGRpZCBub3Qgd29yayBvdXRcbiAgICAgICAgY29udHJvbGxlZFRyYW5zbGF0ZSA9IC1zd2lwZXIuY29udHJvbGxlci5zcGxpbmUuaW50ZXJwb2xhdGUoLXRyYW5zbGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghY29udHJvbGxlZFRyYW5zbGF0ZSB8fCBzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuYnkgPT09ICdjb250YWluZXInKSB7XG4gICAgICAgIG11bHRpcGxpZXIgPSAoYy5tYXhUcmFuc2xhdGUoKSAtIGMubWluVHJhbnNsYXRlKCkpIC8gKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSk7XG4gICAgICAgIGNvbnRyb2xsZWRUcmFuc2xhdGUgPSAoKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgKiBtdWx0aXBsaWVyKSArIGMubWluVHJhbnNsYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuaW52ZXJzZSkge1xuICAgICAgICBjb250cm9sbGVkVHJhbnNsYXRlID0gYy5tYXhUcmFuc2xhdGUoKSAtIGNvbnRyb2xsZWRUcmFuc2xhdGU7XG4gICAgICB9XG4gICAgICBjLnVwZGF0ZVByb2dyZXNzKGNvbnRyb2xsZWRUcmFuc2xhdGUpO1xuICAgICAgYy5zZXRUcmFuc2xhdGUoY29udHJvbGxlZFRyYW5zbGF0ZSwgc3dpcGVyKTtcbiAgICAgIGMudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIGMudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgYy51cGRhdGVSZWFsSW5kZXgoKTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29udHJvbGxlZCkpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udHJvbGxlZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoY29udHJvbGxlZFtpXSAhPT0gYnlDb250cm9sbGVyICYmIGNvbnRyb2xsZWRbaV0gaW5zdGFuY2VvZiBTd2lwZXIkMSkge1xuICAgICAgICAgIHNldENvbnRyb2xsZWRUcmFuc2xhdGUoY29udHJvbGxlZFtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZWQgaW5zdGFuY2VvZiBTd2lwZXIkMSAmJiBieUNvbnRyb2xsZXIgIT09IGNvbnRyb2xsZWQpIHtcbiAgICAgIHNldENvbnRyb2xsZWRUcmFuc2xhdGUoY29udHJvbGxlZCk7XG4gICAgfVxuICB9LFxuICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IGNvbnRyb2xsZWQgPSBzd2lwZXIuY29udHJvbGxlci5jb250cm9sO1xuICAgIGxldCBpO1xuICAgIGZ1bmN0aW9uIHNldENvbnRyb2xsZWRUcmFuc2l0aW9uKGMpIHtcbiAgICAgIGMuc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgc3dpcGVyKTtcbiAgICAgIGlmIChkdXJhdGlvbiAhPT0gMCkge1xuICAgICAgICBjLnRyYW5zaXRpb25TdGFydCgpO1xuICAgICAgICBjLiR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAgICAgaWYgKCFjb250cm9sbGVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKGMucGFyYW1zLmxvb3AgJiYgc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmJ5ID09PSAnc2xpZGUnKSB7XG4gICAgICAgICAgICBjLmxvb3BGaXgoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYy50cmFuc2l0aW9uRW5kKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb250cm9sbGVkKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGNvbnRyb2xsZWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGNvbnRyb2xsZWRbaV0gIT09IGJ5Q29udHJvbGxlciAmJiBjb250cm9sbGVkW2ldIGluc3RhbmNlb2YgU3dpcGVyJDEpIHtcbiAgICAgICAgICBzZXRDb250cm9sbGVkVHJhbnNpdGlvbihjb250cm9sbGVkW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY29udHJvbGxlZCBpbnN0YW5jZW9mIFN3aXBlciQxICYmIGJ5Q29udHJvbGxlciAhPT0gY29udHJvbGxlZCkge1xuICAgICAgc2V0Q29udHJvbGxlZFRyYW5zaXRpb24oY29udHJvbGxlZCk7XG4gICAgfVxuICB9LFxufTtcbnZhciBDb250cm9sbGVyJDEgPSB7XG4gIG5hbWU6ICdjb250cm9sbGVyJyxcbiAgcGFyYW1zOiB7XG4gICAgY29udHJvbGxlcjoge1xuICAgICAgY29udHJvbDogdW5kZWZpbmVkLFxuICAgICAgaW52ZXJzZTogZmFsc2UsXG4gICAgICBieTogJ3NsaWRlJywgLy8gb3IgJ2NvbnRhaW5lcidcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICBjb250cm9sbGVyOiB7XG4gICAgICAgIGNvbnRyb2w6IHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5jb250cm9sLFxuICAgICAgICBnZXRJbnRlcnBvbGF0ZUZ1bmN0aW9uOiBDb250cm9sbGVyLmdldEludGVycG9sYXRlRnVuY3Rpb24uYmluZChzd2lwZXIpLFxuICAgICAgICBzZXRUcmFuc2xhdGU6IENvbnRyb2xsZXIuc2V0VHJhbnNsYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgc2V0VHJhbnNpdGlvbjogQ29udHJvbGxlci5zZXRUcmFuc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgdXBkYXRlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkgcmV0dXJuO1xuICAgICAgaWYgKHN3aXBlci5jb250cm9sbGVyLnNwbGluZSkge1xuICAgICAgICBzd2lwZXIuY29udHJvbGxlci5zcGxpbmUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGRlbGV0ZSBzd2lwZXIuY29udHJvbGxlci5zcGxpbmU7XG4gICAgICB9XG4gICAgfSxcbiAgICByZXNpemUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSByZXR1cm47XG4gICAgICBpZiAoc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lKSB7XG4gICAgICAgIHN3aXBlci5jb250cm9sbGVyLnNwbGluZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZGVsZXRlIHN3aXBlci5jb250cm9sbGVyLnNwbGluZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG9ic2VydmVyVXBkYXRlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkgcmV0dXJuO1xuICAgICAgaWYgKHN3aXBlci5jb250cm9sbGVyLnNwbGluZSkge1xuICAgICAgICBzd2lwZXIuY29udHJvbGxlci5zcGxpbmUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGRlbGV0ZSBzd2lwZXIuY29udHJvbGxlci5zcGxpbmU7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRUcmFuc2xhdGUodHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjtcbiAgICAgIHN3aXBlci5jb250cm9sbGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUsIGJ5Q29udHJvbGxlcik7XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjtcbiAgICAgIHN3aXBlci5jb250cm9sbGVyLnNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcik7XG4gICAgfSxcbiAgfSxcbn07XG5cbmNvbnN0IGExMXkgPSB7XG4gIG1ha2VFbEZvY3VzYWJsZSgkZWwpIHtcbiAgICAkZWwuYXR0cigndGFiSW5kZXgnLCAnMCcpO1xuICAgIHJldHVybiAkZWw7XG4gIH0sXG4gIGFkZEVsUm9sZSgkZWwsIHJvbGUpIHtcbiAgICAkZWwuYXR0cigncm9sZScsIHJvbGUpO1xuICAgIHJldHVybiAkZWw7XG4gIH0sXG4gIGFkZEVsTGFiZWwoJGVsLCBsYWJlbCkge1xuICAgICRlbC5hdHRyKCdhcmlhLWxhYmVsJywgbGFiZWwpO1xuICAgIHJldHVybiAkZWw7XG4gIH0sXG4gIGRpc2FibGVFbCgkZWwpIHtcbiAgICAkZWwuYXR0cignYXJpYS1kaXNhYmxlZCcsIHRydWUpO1xuICAgIHJldHVybiAkZWw7XG4gIH0sXG4gIGVuYWJsZUVsKCRlbCkge1xuICAgICRlbC5hdHRyKCdhcmlhLWRpc2FibGVkJywgZmFsc2UpO1xuICAgIHJldHVybiAkZWw7XG4gIH0sXG4gIG9uRW50ZXJLZXkoZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuICAgIGlmIChlLmtleUNvZGUgIT09IDEzKSByZXR1cm47XG4gICAgY29uc3QgJHRhcmdldEVsID0gJChlLnRhcmdldCk7XG4gICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWwgJiYgJHRhcmdldEVsLmlzKHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWwpKSB7XG4gICAgICBpZiAoIShzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgICBzd2lwZXIuYTExeS5ub3RpZnkocGFyYW1zLmxhc3RTbGlkZU1lc3NhZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLmExMXkubm90aWZ5KHBhcmFtcy5uZXh0U2xpZGVNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRwcmV2RWwgJiYgJHRhcmdldEVsLmlzKHN3aXBlci5uYXZpZ2F0aW9uLiRwcmV2RWwpKSB7XG4gICAgICBpZiAoIShzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgICBzd2lwZXIuYTExeS5ub3RpZnkocGFyYW1zLmZpcnN0U2xpZGVNZXNzYWdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5hMTF5Lm5vdGlmeShwYXJhbXMucHJldlNsaWRlTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiAkdGFyZ2V0RWwuaXMoYC4ke3N3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzc31gKSkge1xuICAgICAgJHRhcmdldEVsWzBdLmNsaWNrKCk7XG4gICAgfVxuICB9LFxuICBub3RpZnkobWVzc2FnZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qgbm90aWZpY2F0aW9uID0gc3dpcGVyLmExMXkubGl2ZVJlZ2lvbjtcbiAgICBpZiAobm90aWZpY2F0aW9uLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIG5vdGlmaWNhdGlvbi5odG1sKCcnKTtcbiAgICBub3RpZmljYXRpb24uaHRtbChtZXNzYWdlKTtcbiAgfSxcbiAgdXBkYXRlTmF2aWdhdGlvbigpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICAgIGNvbnN0IHsgJG5leHRFbCwgJHByZXZFbCB9ID0gc3dpcGVyLm5hdmlnYXRpb247XG5cbiAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgc3dpcGVyLmExMXkuZGlzYWJsZUVsKCRwcmV2RWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLmExMXkuZW5hYmxlRWwoJHByZXZFbCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgICBzd2lwZXIuYTExeS5kaXNhYmxlRWwoJG5leHRFbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuYTExeS5lbmFibGVFbCgkbmV4dEVsKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHVwZGF0ZVBhZ2luYXRpb24oKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmExMXk7XG4gICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGUgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aCkge1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5lYWNoKChidWxsZXRJbmRleCwgYnVsbGV0RWwpID0+IHtcbiAgICAgICAgY29uc3QgJGJ1bGxldEVsID0gJChidWxsZXRFbCk7XG4gICAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbEZvY3VzYWJsZSgkYnVsbGV0RWwpO1xuICAgICAgICBzd2lwZXIuYTExeS5hZGRFbFJvbGUoJGJ1bGxldEVsLCAnYnV0dG9uJyk7XG4gICAgICAgIHN3aXBlci5hMTF5LmFkZEVsTGFiZWwoJGJ1bGxldEVsLCBwYXJhbXMucGFnaW5hdGlvbkJ1bGxldE1lc3NhZ2UucmVwbGFjZSgve3tpbmRleH19LywgJGJ1bGxldEVsLmluZGV4KCkgKyAxKSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIGluaXQoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICAgIHN3aXBlci4kZWwuYXBwZW5kKHN3aXBlci5hMTF5LmxpdmVSZWdpb24pO1xuXG4gICAgLy8gTmF2aWdhdGlvblxuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuYTExeTtcbiAgICBsZXQgJG5leHRFbDtcbiAgICBsZXQgJHByZXZFbDtcbiAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbCkge1xuICAgICAgJG5leHRFbCA9IHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWw7XG4gICAgfVxuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsKSB7XG4gICAgICAkcHJldkVsID0gc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbDtcbiAgICB9XG4gICAgaWYgKCRuZXh0RWwpIHtcbiAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbEZvY3VzYWJsZSgkbmV4dEVsKTtcbiAgICAgIHN3aXBlci5hMTF5LmFkZEVsUm9sZSgkbmV4dEVsLCAnYnV0dG9uJyk7XG4gICAgICBzd2lwZXIuYTExeS5hZGRFbExhYmVsKCRuZXh0RWwsIHBhcmFtcy5uZXh0U2xpZGVNZXNzYWdlKTtcbiAgICAgICRuZXh0RWwub24oJ2tleWRvd24nLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICB9XG4gICAgaWYgKCRwcmV2RWwpIHtcbiAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbEZvY3VzYWJsZSgkcHJldkVsKTtcbiAgICAgIHN3aXBlci5hMTF5LmFkZEVsUm9sZSgkcHJldkVsLCAnYnV0dG9uJyk7XG4gICAgICBzd2lwZXIuYTExeS5hZGRFbExhYmVsKCRwcmV2RWwsIHBhcmFtcy5wcmV2U2xpZGVNZXNzYWdlKTtcbiAgICAgICRwcmV2RWwub24oJ2tleWRvd24nLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICB9XG5cbiAgICAvLyBQYWdpbmF0aW9uXG4gICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGUgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aCkge1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uJGVsLm9uKCdrZXlkb3duJywgYC4ke3N3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzc31gLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3koKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLmExMXkubGl2ZVJlZ2lvbiAmJiBzd2lwZXIuYTExeS5saXZlUmVnaW9uLmxlbmd0aCA+IDApIHN3aXBlci5hMTF5LmxpdmVSZWdpb24ucmVtb3ZlKCk7XG5cbiAgICBsZXQgJG5leHRFbDtcbiAgICBsZXQgJHByZXZFbDtcbiAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbCkge1xuICAgICAgJG5leHRFbCA9IHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWw7XG4gICAgfVxuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsKSB7XG4gICAgICAkcHJldkVsID0gc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbDtcbiAgICB9XG4gICAgaWYgKCRuZXh0RWwpIHtcbiAgICAgICRuZXh0RWwub2ZmKCdrZXlkb3duJywgc3dpcGVyLmExMXkub25FbnRlcktleSk7XG4gICAgfVxuICAgIGlmICgkcHJldkVsKSB7XG4gICAgICAkcHJldkVsLm9mZigna2V5ZG93bicsIHN3aXBlci5hMTF5Lm9uRW50ZXJLZXkpO1xuICAgIH1cblxuICAgIC8vIFBhZ2luYXRpb25cbiAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoKSB7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi4kZWwub2ZmKCdrZXlkb3duJywgYC4ke3N3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzc31gLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICB9XG4gIH0sXG59O1xudmFyIEExMXkgPSB7XG4gIG5hbWU6ICdhMTF5JyxcbiAgcGFyYW1zOiB7XG4gICAgYTExeToge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBub3RpZmljYXRpb25DbGFzczogJ3N3aXBlci1ub3RpZmljYXRpb24nLFxuICAgICAgcHJldlNsaWRlTWVzc2FnZTogJ1ByZXZpb3VzIHNsaWRlJyxcbiAgICAgIG5leHRTbGlkZU1lc3NhZ2U6ICdOZXh0IHNsaWRlJyxcbiAgICAgIGZpcnN0U2xpZGVNZXNzYWdlOiAnVGhpcyBpcyB0aGUgZmlyc3Qgc2xpZGUnLFxuICAgICAgbGFzdFNsaWRlTWVzc2FnZTogJ1RoaXMgaXMgdGhlIGxhc3Qgc2xpZGUnLFxuICAgICAgcGFnaW5hdGlvbkJ1bGxldE1lc3NhZ2U6ICdHbyB0byBzbGlkZSB7e2luZGV4fX0nLFxuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIGExMXk6IHtcbiAgICAgICAgbGl2ZVJlZ2lvbjogJChgPHNwYW4gY2xhc3M9XCIke3N3aXBlci5wYXJhbXMuYTExeS5ub3RpZmljYXRpb25DbGFzc31cIiBhcmlhLWxpdmU9XCJhc3NlcnRpdmVcIiBhcmlhLWF0b21pYz1cInRydWVcIj48L3NwYW4+YCksXG4gICAgICB9LFxuICAgIH0pO1xuICAgIE9iamVjdC5rZXlzKGExMXkpLmZvckVhY2goKG1ldGhvZE5hbWUpID0+IHtcbiAgICAgIHN3aXBlci5hMTF5W21ldGhvZE5hbWVdID0gYTExeVttZXRob2ROYW1lXS5iaW5kKHN3aXBlcik7XG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIuYTExeS5pbml0KCk7XG4gICAgICBzd2lwZXIuYTExeS51cGRhdGVOYXZpZ2F0aW9uKCk7XG4gICAgfSxcbiAgICB0b0VkZ2UoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLmExMXkudXBkYXRlTmF2aWdhdGlvbigpO1xuICAgIH0sXG4gICAgZnJvbUVkZ2UoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLmExMXkudXBkYXRlTmF2aWdhdGlvbigpO1xuICAgIH0sXG4gICAgcGFnaW5hdGlvblVwZGF0ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIuYTExeS51cGRhdGVQYWdpbmF0aW9uKCk7XG4gICAgfSxcbiAgICBkZXN0cm95KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5hMTF5LmRlc3Ryb3koKTtcbiAgICB9LFxuICB9LFxufTtcblxuY29uc3QgQXV0b3BsYXkgPSB7XG4gIHJ1bigpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0ICRhY3RpdmVTbGlkZUVsID0gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgIGxldCBkZWxheSA9IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXk7XG4gICAgaWYgKCRhY3RpdmVTbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLWF1dG9wbGF5JykpIHtcbiAgICAgIGRlbGF5ID0gJGFjdGl2ZVNsaWRlRWwuYXR0cignZGF0YS1zd2lwZXItYXV0b3BsYXknKSB8fCBzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRlbGF5O1xuICAgIH1cbiAgICBzd2lwZXIuYXV0b3BsYXkudGltZW91dCA9IFV0aWxzLm5leHRUaWNrKCgpID0+IHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgc3dpcGVyLnNsaWRlTmV4dChzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICB9IGVsc2UgaWYgKCFzd2lwZXIuaXNFbmQpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlTmV4dChzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICB9IGVsc2UgaWYgKCFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LnN0b3BPbkxhc3RTbGlkZSkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbygwLCBzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgfVxuICAgIH0sIGRlbGF5KTtcbiAgfSxcbiAgc3RhcnQoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHN3aXBlci5hdXRvcGxheS50aW1lb3V0ICE9PSAndW5kZWZpbmVkJykgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nID0gdHJ1ZTtcbiAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXlTdGFydCcpO1xuICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgc3RvcCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybiBmYWxzZTtcbiAgICBpZiAodHlwZW9mIHN3aXBlci5hdXRvcGxheS50aW1lb3V0ID09PSAndW5kZWZpbmVkJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHN3aXBlci5hdXRvcGxheS50aW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQoc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQpO1xuICAgICAgc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nID0gZmFsc2U7XG4gICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5U3RvcCcpO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBwYXVzZShzcGVlZCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5hdXRvcGxheS50aW1lb3V0KSBjbGVhclRpbWVvdXQoc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQpO1xuICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPSB0cnVlO1xuICAgIGlmIChzcGVlZCA9PT0gMCkge1xuICAgICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCA9IGZhbHNlO1xuICAgICAgc3dpcGVyLmF1dG9wbGF5LnJ1bigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC50cmFuc2l0aW9uRW5kKCgpID0+IHtcbiAgICAgICAgaWYgKCFzd2lwZXIpIHJldHVybjtcbiAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoIXN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSB7XG4gICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnN0b3AoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbn07XG5cbnZhciBBdXRvcGxheSQxID0ge1xuICBuYW1lOiAnYXV0b3BsYXknLFxuICBwYXJhbXM6IHtcbiAgICBhdXRvcGxheToge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBkZWxheTogMzAwMCxcbiAgICAgIGRpc2FibGVPbkludGVyYWN0aW9uOiB0cnVlLFxuICAgICAgc3RvcE9uTGFzdFNsaWRlOiBmYWxzZSxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICBhdXRvcGxheToge1xuICAgICAgICBydW5uaW5nOiBmYWxzZSxcbiAgICAgICAgcGF1c2VkOiBmYWxzZSxcbiAgICAgICAgcnVuOiBBdXRvcGxheS5ydW4uYmluZChzd2lwZXIpLFxuICAgICAgICBzdGFydDogQXV0b3BsYXkuc3RhcnQuYmluZChzd2lwZXIpLFxuICAgICAgICBzdG9wOiBBdXRvcGxheS5zdG9wLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgcGF1c2U6IEF1dG9wbGF5LnBhdXNlLmJpbmQoc3dpcGVyKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5zdGFydCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgYmVmb3JlVHJhbnNpdGlvblN0YXJ0KHNwZWVkLCBpbnRlcm5hbCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucnVubmluZykge1xuICAgICAgICBpZiAoaW50ZXJuYWwgfHwgIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2Uoc3BlZWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHNsaWRlckZpcnN0TW92ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBkZXN0cm95KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucnVubmluZykge1xuICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBGYWRlID0ge1xuICBzZXRUcmFuc2xhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7IHNsaWRlcyB9ID0gc3dpcGVyO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCAkc2xpZGVFbCA9IHN3aXBlci5zbGlkZXMuZXEoaSk7XG4gICAgICBjb25zdCBvZmZzZXQgPSAkc2xpZGVFbFswXS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgIGxldCB0eCA9IC1vZmZzZXQ7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkgdHggLT0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgIGxldCB0eSA9IDA7XG4gICAgICBpZiAoIXN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICB0eSA9IHR4O1xuICAgICAgICB0eCA9IDA7XG4gICAgICB9XG4gICAgICBjb25zdCBzbGlkZU9wYWNpdHkgPSBzd2lwZXIucGFyYW1zLmZhZGVFZmZlY3QuY3Jvc3NGYWRlID9cbiAgICAgICAgTWF0aC5tYXgoMSAtIE1hdGguYWJzKCRzbGlkZUVsWzBdLnByb2dyZXNzKSwgMCkgOlxuICAgICAgICAxICsgTWF0aC5taW4oTWF0aC5tYXgoJHNsaWRlRWxbMF0ucHJvZ3Jlc3MsIC0xKSwgMCk7XG4gICAgICAkc2xpZGVFbFxuICAgICAgICAuY3NzKHtcbiAgICAgICAgICBvcGFjaXR5OiBzbGlkZU9wYWNpdHksXG4gICAgICAgIH0pXG4gICAgICAgIC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7dHh9cHgsICR7dHl9cHgsIDBweClgKTtcbiAgICB9XG4gIH0sXG4gIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHsgc2xpZGVzLCAkd3JhcHBlckVsIH0gPSBzd2lwZXI7XG4gICAgc2xpZGVzLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUgJiYgZHVyYXRpb24gIT09IDApIHtcbiAgICAgIGxldCBldmVudFRyaWdnZXJlZCA9IGZhbHNlO1xuICAgICAgc2xpZGVzLnRyYW5zaXRpb25FbmQoKCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnRUcmlnZ2VyZWQpIHJldHVybjtcbiAgICAgICAgaWYgKCFzd2lwZXIpIHJldHVybjtcbiAgICAgICAgZXZlbnRUcmlnZ2VyZWQgPSB0cnVlO1xuICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHRyaWdnZXJFdmVudHMgPSBbJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCAndHJhbnNpdGlvbmVuZCcsICdvVHJhbnNpdGlvbkVuZCcsICdNU1RyYW5zaXRpb25FbmQnLCAnbXNUcmFuc2l0aW9uRW5kJ107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJpZ2dlckV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICR3cmFwcGVyRWwudHJpZ2dlcih0cmlnZ2VyRXZlbnRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxufTtcblxudmFyIEVmZmVjdEZhZGUgPSB7XG4gIG5hbWU6ICdlZmZlY3QtZmFkZScsXG4gIHBhcmFtczoge1xuICAgIGZhZGVFZmZlY3Q6IHtcbiAgICAgIGNyb3NzRmFkZTogZmFsc2UsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgZmFkZUVmZmVjdDoge1xuICAgICAgICBzZXRUcmFuc2xhdGU6IEZhZGUuc2V0VHJhbnNsYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgc2V0VHJhbnNpdGlvbjogRmFkZS5zZXRUcmFuc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgYmVmb3JlSW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmYWRlJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9ZmFkZWApO1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5wYXJhbXMsIHtcbiAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgICAgc2xpZGVzUGVyQ29sdW1uOiAxLFxuICAgICAgICBzbGlkZXNQZXJHcm91cDogMSxcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgfSk7XG4gICAgICBpZiAodHlwZW9mIHN3aXBlci5wYXNzZWRQYXJhbXMudmlydHVhbFRyYW5zbGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc3dpcGVyLnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmYWRlJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmZhZGVFZmZlY3Quc2V0VHJhbnNsYXRlKCk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnZmFkZScpIHJldHVybjtcbiAgICAgIHN3aXBlci5mYWRlRWZmZWN0LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBDdWJlID0ge1xuICBzZXRUcmFuc2xhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7ICRlbCwgJHdyYXBwZXJFbCwgc2xpZGVzLCB3aWR0aDogc3dpcGVyV2lkdGgsIGhlaWdodDogc3dpcGVySGVpZ2h0LCBydGwsIHNpemU6IHN3aXBlclNpemUgfSA9IHN3aXBlcjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmN1YmVFZmZlY3Q7XG4gICAgY29uc3QgaXNIb3Jpem9udGFsID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgIGxldCB3cmFwcGVyUm90YXRlID0gMDtcbiAgICBsZXQgJGN1YmVTaGFkb3dFbDtcbiAgICBpZiAocGFyYW1zLnNoYWRvdykge1xuICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAkY3ViZVNoYWRvd0VsID0gJHdyYXBwZXJFbC5maW5kKCcuc3dpcGVyLWN1YmUtc2hhZG93Jyk7XG4gICAgICAgIGlmICgkY3ViZVNoYWRvd0VsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICRjdWJlU2hhZG93RWwgPSAkKCc8ZGl2IGNsYXNzPVwic3dpcGVyLWN1YmUtc2hhZG93XCI+PC9kaXY+Jyk7XG4gICAgICAgICAgJHdyYXBwZXJFbC5hcHBlbmQoJGN1YmVTaGFkb3dFbCk7XG4gICAgICAgIH1cbiAgICAgICAgJGN1YmVTaGFkb3dFbC5jc3MoeyBoZWlnaHQ6IGAke3N3aXBlcldpZHRofXB4YCB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRjdWJlU2hhZG93RWwgPSAkZWwuZmluZCgnLnN3aXBlci1jdWJlLXNoYWRvdycpO1xuICAgICAgICBpZiAoJGN1YmVTaGFkb3dFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAkY3ViZVNoYWRvd0VsID0gJCgnPGRpdiBjbGFzcz1cInN3aXBlci1jdWJlLXNoYWRvd1wiPjwvZGl2PicpO1xuICAgICAgICAgICRlbC5hcHBlbmQoJGN1YmVTaGFkb3dFbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0ICRzbGlkZUVsID0gc2xpZGVzLmVxKGkpO1xuICAgICAgbGV0IHNsaWRlQW5nbGUgPSBpICogOTA7XG4gICAgICBsZXQgcm91bmQgPSBNYXRoLmZsb29yKHNsaWRlQW5nbGUgLyAzNjApO1xuICAgICAgaWYgKHJ0bCkge1xuICAgICAgICBzbGlkZUFuZ2xlID0gLXNsaWRlQW5nbGU7XG4gICAgICAgIHJvdW5kID0gTWF0aC5mbG9vcigtc2xpZGVBbmdsZSAvIDM2MCk7XG4gICAgICB9XG4gICAgICBjb25zdCBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKCRzbGlkZUVsWzBdLnByb2dyZXNzLCAxKSwgLTEpO1xuICAgICAgbGV0IHR4ID0gMDtcbiAgICAgIGxldCB0eSA9IDA7XG4gICAgICBsZXQgdHogPSAwO1xuICAgICAgaWYgKGkgJSA0ID09PSAwKSB7XG4gICAgICAgIHR4ID0gLXJvdW5kICogNCAqIHN3aXBlclNpemU7XG4gICAgICAgIHR6ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoKGkgLSAxKSAlIDQgPT09IDApIHtcbiAgICAgICAgdHggPSAwO1xuICAgICAgICB0eiA9IC1yb3VuZCAqIDQgKiBzd2lwZXJTaXplO1xuICAgICAgfSBlbHNlIGlmICgoaSAtIDIpICUgNCA9PT0gMCkge1xuICAgICAgICB0eCA9IHN3aXBlclNpemUgKyAocm91bmQgKiA0ICogc3dpcGVyU2l6ZSk7XG4gICAgICAgIHR6ID0gc3dpcGVyU2l6ZTtcbiAgICAgIH0gZWxzZSBpZiAoKGkgLSAzKSAlIDQgPT09IDApIHtcbiAgICAgICAgdHggPSAtc3dpcGVyU2l6ZTtcbiAgICAgICAgdHogPSAoMyAqIHN3aXBlclNpemUpICsgKHN3aXBlclNpemUgKiA0ICogcm91bmQpO1xuICAgICAgfVxuICAgICAgaWYgKHJ0bCkge1xuICAgICAgICB0eCA9IC10eDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc0hvcml6b250YWwpIHtcbiAgICAgICAgdHkgPSB0eDtcbiAgICAgICAgdHggPSAwO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB0cmFuc2Zvcm0gPSBgcm90YXRlWCgke2lzSG9yaXpvbnRhbCA/IDAgOiAtc2xpZGVBbmdsZX1kZWcpIHJvdGF0ZVkoJHtpc0hvcml6b250YWwgPyBzbGlkZUFuZ2xlIDogMH1kZWcpIHRyYW5zbGF0ZTNkKCR7dHh9cHgsICR7dHl9cHgsICR7dHp9cHgpYDtcbiAgICAgIGlmIChwcm9ncmVzcyA8PSAxICYmIHByb2dyZXNzID4gLTEpIHtcbiAgICAgICAgd3JhcHBlclJvdGF0ZSA9IChpICogOTApICsgKHByb2dyZXNzICogOTApO1xuICAgICAgICBpZiAocnRsKSB3cmFwcGVyUm90YXRlID0gKC1pICogOTApIC0gKHByb2dyZXNzICogOTApO1xuICAgICAgfVxuICAgICAgJHNsaWRlRWwudHJhbnNmb3JtKHRyYW5zZm9ybSk7XG4gICAgICBpZiAocGFyYW1zLnNsaWRlU2hhZG93cykge1xuICAgICAgICAvLyBTZXQgc2hhZG93c1xuICAgICAgICBsZXQgc2hhZG93QmVmb3JlID0gaXNIb3Jpem9udGFsID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wJyk7XG4gICAgICAgIGxldCBzaGFkb3dBZnRlciA9IGlzSG9yaXpvbnRhbCA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0JykgOiAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20nKTtcbiAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBzaGFkb3dCZWZvcmUgPSAkKGA8ZGl2IGNsYXNzPVwic3dpcGVyLXNsaWRlLXNoYWRvdy0ke2lzSG9yaXpvbnRhbCA/ICdsZWZ0JyA6ICd0b3AnfVwiPjwvZGl2PmApO1xuICAgICAgICAgICRzbGlkZUVsLmFwcGVuZChzaGFkb3dCZWZvcmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaGFkb3dBZnRlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBzaGFkb3dBZnRlciA9ICQoYDxkaXYgY2xhc3M9XCJzd2lwZXItc2xpZGUtc2hhZG93LSR7aXNIb3Jpem9udGFsID8gJ3JpZ2h0JyA6ICdib3R0b20nfVwiPjwvZGl2PmApO1xuICAgICAgICAgICRzbGlkZUVsLmFwcGVuZChzaGFkb3dBZnRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGgpIHNoYWRvd0JlZm9yZVswXS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgoLXByb2dyZXNzLCAwKTtcbiAgICAgICAgaWYgKHNoYWRvd0FmdGVyLmxlbmd0aCkgc2hhZG93QWZ0ZXJbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KHByb2dyZXNzLCAwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgJHdyYXBwZXJFbC5jc3Moe1xuICAgICAgJy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbic6IGA1MCUgNTAlIC0ke3N3aXBlclNpemUgLyAyfXB4YCxcbiAgICAgICctbW96LXRyYW5zZm9ybS1vcmlnaW4nOiBgNTAlIDUwJSAtJHtzd2lwZXJTaXplIC8gMn1weGAsXG4gICAgICAnLW1zLXRyYW5zZm9ybS1vcmlnaW4nOiBgNTAlIDUwJSAtJHtzd2lwZXJTaXplIC8gMn1weGAsXG4gICAgICAndHJhbnNmb3JtLW9yaWdpbic6IGA1MCUgNTAlIC0ke3N3aXBlclNpemUgLyAyfXB4YCxcbiAgICB9KTtcblxuICAgIGlmIChwYXJhbXMuc2hhZG93KSB7XG4gICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICRjdWJlU2hhZG93RWwudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgwcHgsICR7KHN3aXBlcldpZHRoIC8gMikgKyBwYXJhbXMuc2hhZG93T2Zmc2V0fXB4LCAkey1zd2lwZXJXaWR0aCAvIDJ9cHgpIHJvdGF0ZVgoOTBkZWcpIHJvdGF0ZVooMGRlZykgc2NhbGUoJHtwYXJhbXMuc2hhZG93U2NhbGV9KWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2hhZG93QW5nbGUgPSBNYXRoLmFicyh3cmFwcGVyUm90YXRlKSAtIChNYXRoLmZsb29yKE1hdGguYWJzKHdyYXBwZXJSb3RhdGUpIC8gOTApICogOTApO1xuICAgICAgICBjb25zdCBtdWx0aXBsaWVyID0gMS41IC0gKFxuICAgICAgICAgIChNYXRoLnNpbigoc2hhZG93QW5nbGUgKiAyICogTWF0aC5QSSkgLyAzNjApIC8gMikgK1xuICAgICAgICAgIChNYXRoLmNvcygoc2hhZG93QW5nbGUgKiAyICogTWF0aC5QSSkgLyAzNjApIC8gMilcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3Qgc2NhbGUxID0gcGFyYW1zLnNoYWRvd1NjYWxlO1xuICAgICAgICBjb25zdCBzY2FsZTIgPSBwYXJhbXMuc2hhZG93U2NhbGUgLyBtdWx0aXBsaWVyO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBwYXJhbXMuc2hhZG93T2Zmc2V0O1xuICAgICAgICAkY3ViZVNoYWRvd0VsLnRyYW5zZm9ybShgc2NhbGUzZCgke3NjYWxlMX0sIDEsICR7c2NhbGUyfSkgdHJhbnNsYXRlM2QoMHB4LCAkeyhzd2lwZXJIZWlnaHQgLyAyKSArIG9mZnNldH1weCwgJHstc3dpcGVySGVpZ2h0IC8gMiAvIHNjYWxlMn1weCkgcm90YXRlWCgtOTBkZWcpYCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHpGYWN0b3IgPSAoQnJvd3NlciQxLmlzU2FmYXJpIHx8IEJyb3dzZXIkMS5pc1VpV2ViVmlldykgPyAoLXN3aXBlclNpemUgLyAyKSA6IDA7XG4gICAgJHdyYXBwZXJFbFxuICAgICAgLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoMHB4LDAsJHt6RmFjdG9yfXB4KSByb3RhdGVYKCR7c3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gMCA6IHdyYXBwZXJSb3RhdGV9ZGVnKSByb3RhdGVZKCR7c3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gLXdyYXBwZXJSb3RhdGUgOiAwfWRlZylgKTtcbiAgfSxcbiAgc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgeyAkZWwsIHNsaWRlcyB9ID0gc3dpcGVyO1xuICAgIHNsaWRlc1xuICAgICAgLnRyYW5zaXRpb24oZHVyYXRpb24pXG4gICAgICAuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JylcbiAgICAgIC50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jdWJlRWZmZWN0LnNoYWRvdyAmJiAhc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAkZWwuZmluZCgnLnN3aXBlci1jdWJlLXNoYWRvdycpLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH1cbiAgfSxcbn07XG5cbnZhciBFZmZlY3RDdWJlID0ge1xuICBuYW1lOiAnZWZmZWN0LWN1YmUnLFxuICBwYXJhbXM6IHtcbiAgICBjdWJlRWZmZWN0OiB7XG4gICAgICBzbGlkZVNoYWRvd3M6IHRydWUsXG4gICAgICBzaGFkb3c6IHRydWUsXG4gICAgICBzaGFkb3dPZmZzZXQ6IDIwLFxuICAgICAgc2hhZG93U2NhbGU6IDAuOTQsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgY3ViZUVmZmVjdDoge1xuICAgICAgICBzZXRUcmFuc2xhdGU6IEN1YmUuc2V0VHJhbnNsYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgc2V0VHJhbnNpdGlvbjogQ3ViZS5zZXRUcmFuc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgYmVmb3JlSW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjdWJlJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Y3ViZWApO1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9M2RgKTtcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIucGFyYW1zLCB7XG4gICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgICAgIHNsaWRlc1BlckNvbHVtbjogMSxcbiAgICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgIHJlc2lzdGFuY2VSYXRpbzogMCxcbiAgICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgICBjZW50ZXJlZFNsaWRlczogZmFsc2UsXG4gICAgICAgIHZpcnR1YWxUcmFuc2xhdGU6IHRydWUsXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjdWJlJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmN1YmVFZmZlY3Quc2V0VHJhbnNsYXRlKCk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnY3ViZScpIHJldHVybjtcbiAgICAgIHN3aXBlci5jdWJlRWZmZWN0LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBGbGlwID0ge1xuICBzZXRUcmFuc2xhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7IHNsaWRlcyB9ID0gc3dpcGVyO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCAkc2xpZGVFbCA9IHNsaWRlcy5lcShpKTtcbiAgICAgIGxldCBwcm9ncmVzcyA9ICRzbGlkZUVsWzBdLnByb2dyZXNzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZmxpcEVmZmVjdC5saW1pdFJvdGF0aW9uKSB7XG4gICAgICAgIHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oJHNsaWRlRWxbMF0ucHJvZ3Jlc3MsIDEpLCAtMSk7XG4gICAgICB9XG4gICAgICBjb25zdCBvZmZzZXQgPSAkc2xpZGVFbFswXS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgIGNvbnN0IHJvdGF0ZSA9IC0xODAgKiBwcm9ncmVzcztcbiAgICAgIGxldCByb3RhdGVZID0gcm90YXRlO1xuICAgICAgbGV0IHJvdGF0ZVggPSAwO1xuICAgICAgbGV0IHR4ID0gLW9mZnNldDtcbiAgICAgIGxldCB0eSA9IDA7XG4gICAgICBpZiAoIXN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICB0eSA9IHR4O1xuICAgICAgICB0eCA9IDA7XG4gICAgICAgIHJvdGF0ZVggPSAtcm90YXRlWTtcbiAgICAgICAgcm90YXRlWSA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHN3aXBlci5ydGwpIHtcbiAgICAgICAgcm90YXRlWSA9IC1yb3RhdGVZO1xuICAgICAgfVxuXG4gICAgICAkc2xpZGVFbFswXS5zdHlsZS56SW5kZXggPSAtTWF0aC5hYnMoTWF0aC5yb3VuZChwcm9ncmVzcykpICsgc2xpZGVzLmxlbmd0aDtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZmxpcEVmZmVjdC5zbGlkZVNoYWRvd3MpIHtcbiAgICAgICAgLy8gU2V0IHNoYWRvd3NcbiAgICAgICAgbGV0IHNoYWRvd0JlZm9yZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCcpO1xuICAgICAgICBsZXQgc2hhZG93QWZ0ZXIgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tJyk7XG4gICAgICAgIGlmIChzaGFkb3dCZWZvcmUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgc2hhZG93QmVmb3JlID0gJChgPGRpdiBjbGFzcz1cInN3aXBlci1zbGlkZS1zaGFkb3ctJHtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnbGVmdCcgOiAndG9wJ31cIj48L2Rpdj5gKTtcbiAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoc2hhZG93QmVmb3JlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hhZG93QWZ0ZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgc2hhZG93QWZ0ZXIgPSAkKGA8ZGl2IGNsYXNzPVwic3dpcGVyLXNsaWRlLXNoYWRvdy0ke3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdyaWdodCcgOiAnYm90dG9tJ31cIj48L2Rpdj5gKTtcbiAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoc2hhZG93QWZ0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaGFkb3dCZWZvcmUubGVuZ3RoKSBzaGFkb3dCZWZvcmVbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KC1wcm9ncmVzcywgMCk7XG4gICAgICAgIGlmIChzaGFkb3dBZnRlci5sZW5ndGgpIHNoYWRvd0FmdGVyWzBdLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heChwcm9ncmVzcywgMCk7XG4gICAgICB9XG5cbiAgICAgICRzbGlkZUVsXG4gICAgICAgIC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7dHh9cHgsICR7dHl9cHgsIDBweCkgcm90YXRlWCgke3JvdGF0ZVh9ZGVnKSByb3RhdGVZKCR7cm90YXRlWX1kZWcpYCk7XG4gICAgfVxuICB9LFxuICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7IHNsaWRlcywgYWN0aXZlSW5kZXgsICR3cmFwcGVyRWwgfSA9IHN3aXBlcjtcbiAgICBzbGlkZXNcbiAgICAgIC50cmFuc2l0aW9uKGR1cmF0aW9uKVxuICAgICAgLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpXG4gICAgICAudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSAmJiBkdXJhdGlvbiAhPT0gMCkge1xuICAgICAgbGV0IGV2ZW50VHJpZ2dlcmVkID0gZmFsc2U7XG4gICAgICBzbGlkZXMuZXEoYWN0aXZlSW5kZXgpLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKCkge1xuICAgICAgICBpZiAoZXZlbnRUcmlnZ2VyZWQpIHJldHVybjtcbiAgICAgICAgaWYgKCFzd2lwZXIpIHJldHVybjtcbiAgICAgICAgaWYgKCEkKHRoaXMpLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzcykpIHJldHVybjtcbiAgICAgICAgZXZlbnRUcmlnZ2VyZWQgPSB0cnVlO1xuICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHRyaWdnZXJFdmVudHMgPSBbJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCAndHJhbnNpdGlvbmVuZCcsICdvVHJhbnNpdGlvbkVuZCcsICdNU1RyYW5zaXRpb25FbmQnLCAnbXNUcmFuc2l0aW9uRW5kJ107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJpZ2dlckV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICR3cmFwcGVyRWwudHJpZ2dlcih0cmlnZ2VyRXZlbnRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxufTtcblxudmFyIEVmZmVjdEZsaXAgPSB7XG4gIG5hbWU6ICdlZmZlY3QtZmxpcCcsXG4gIHBhcmFtczoge1xuICAgIGZsaXBFZmZlY3Q6IHtcbiAgICAgIHNsaWRlU2hhZG93czogdHJ1ZSxcbiAgICAgIGxpbWl0Um90YXRpb246IHRydWUsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgZmxpcEVmZmVjdDoge1xuICAgICAgICBzZXRUcmFuc2xhdGU6IEZsaXAuc2V0VHJhbnNsYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgc2V0VHJhbnNpdGlvbjogRmxpcC5zZXRUcmFuc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgYmVmb3JlSW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmbGlwJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9ZmxpcGApO1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9M2RgKTtcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIucGFyYW1zLCB7XG4gICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgICAgIHNsaWRlc1BlckNvbHVtbjogMSxcbiAgICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgIHNwYWNlQmV0d2VlbjogMCxcbiAgICAgIH0pO1xuICAgICAgaWYgKHR5cGVvZiBzd2lwZXIucGFzc2VkUGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHN3aXBlci5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnZmxpcCcpIHJldHVybjtcbiAgICAgIHN3aXBlci5mbGlwRWZmZWN0LnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2ZsaXAnKSByZXR1cm47XG4gICAgICBzd2lwZXIuZmxpcEVmZmVjdC5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICB9LFxuICB9LFxufTtcblxuY29uc3QgQ292ZXJmbG93ID0ge1xuICBzZXRUcmFuc2xhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7IHdpZHRoOiBzd2lwZXJXaWR0aCwgaGVpZ2h0OiBzd2lwZXJIZWlnaHQsIHNsaWRlcywgJHdyYXBwZXJFbCwgc2xpZGVzU2l6ZXNHcmlkIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5jb3ZlcmZsb3dFZmZlY3Q7XG4gICAgY29uc3QgaXNIb3Jpem9udGFsID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgIGNvbnN0IHRyYW5zZm9ybSA9IHN3aXBlci50cmFuc2xhdGU7XG4gICAgY29uc3QgY2VudGVyID0gaXNIb3Jpem9udGFsID8gLXRyYW5zZm9ybSArIChzd2lwZXJXaWR0aCAvIDIpIDogLXRyYW5zZm9ybSArIChzd2lwZXJIZWlnaHQgLyAyKTtcbiAgICBjb25zdCByb3RhdGUgPSBpc0hvcml6b250YWwgPyBwYXJhbXMucm90YXRlIDogLXBhcmFtcy5yb3RhdGU7XG4gICAgY29uc3QgdHJhbnNsYXRlID0gcGFyYW1zLmRlcHRoO1xuICAgIC8vIEVhY2ggc2xpZGUgb2Zmc2V0IGZyb20gY2VudGVyXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHNsaWRlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgJHNsaWRlRWwgPSBzbGlkZXMuZXEoaSk7XG4gICAgICBjb25zdCBzbGlkZVNpemUgPSBzbGlkZXNTaXplc0dyaWRbaV07XG4gICAgICBjb25zdCBzbGlkZU9mZnNldCA9ICRzbGlkZUVsWzBdLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgY29uc3Qgb2Zmc2V0TXVsdGlwbGllciA9ICgoY2VudGVyIC0gc2xpZGVPZmZzZXQgLSAoc2xpZGVTaXplIC8gMikpIC8gc2xpZGVTaXplKSAqIHBhcmFtcy5tb2RpZmllcjtcblxuICAgICAgbGV0IHJvdGF0ZVkgPSBpc0hvcml6b250YWwgPyByb3RhdGUgKiBvZmZzZXRNdWx0aXBsaWVyIDogMDtcbiAgICAgIGxldCByb3RhdGVYID0gaXNIb3Jpem9udGFsID8gMCA6IHJvdGF0ZSAqIG9mZnNldE11bHRpcGxpZXI7XG4gICAgICAvLyB2YXIgcm90YXRlWiA9IDBcbiAgICAgIGxldCB0cmFuc2xhdGVaID0gLXRyYW5zbGF0ZSAqIE1hdGguYWJzKG9mZnNldE11bHRpcGxpZXIpO1xuXG4gICAgICBsZXQgdHJhbnNsYXRlWSA9IGlzSG9yaXpvbnRhbCA/IDAgOiBwYXJhbXMuc3RyZXRjaCAqIChvZmZzZXRNdWx0aXBsaWVyKTtcbiAgICAgIGxldCB0cmFuc2xhdGVYID0gaXNIb3Jpem9udGFsID8gcGFyYW1zLnN0cmV0Y2ggKiAob2Zmc2V0TXVsdGlwbGllcikgOiAwO1xuXG4gICAgICAvLyBGaXggZm9yIHVsdHJhIHNtYWxsIHZhbHVlc1xuICAgICAgaWYgKE1hdGguYWJzKHRyYW5zbGF0ZVgpIDwgMC4wMDEpIHRyYW5zbGF0ZVggPSAwO1xuICAgICAgaWYgKE1hdGguYWJzKHRyYW5zbGF0ZVkpIDwgMC4wMDEpIHRyYW5zbGF0ZVkgPSAwO1xuICAgICAgaWYgKE1hdGguYWJzKHRyYW5zbGF0ZVopIDwgMC4wMDEpIHRyYW5zbGF0ZVogPSAwO1xuICAgICAgaWYgKE1hdGguYWJzKHJvdGF0ZVkpIDwgMC4wMDEpIHJvdGF0ZVkgPSAwO1xuICAgICAgaWYgKE1hdGguYWJzKHJvdGF0ZVgpIDwgMC4wMDEpIHJvdGF0ZVggPSAwO1xuXG4gICAgICBjb25zdCBzbGlkZVRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3RyYW5zbGF0ZVh9cHgsJHt0cmFuc2xhdGVZfXB4LCR7dHJhbnNsYXRlWn1weCkgIHJvdGF0ZVgoJHtyb3RhdGVYfWRlZykgcm90YXRlWSgke3JvdGF0ZVl9ZGVnKWA7XG5cbiAgICAgICRzbGlkZUVsLnRyYW5zZm9ybShzbGlkZVRyYW5zZm9ybSk7XG4gICAgICAkc2xpZGVFbFswXS5zdHlsZS56SW5kZXggPSAtTWF0aC5hYnMoTWF0aC5yb3VuZChvZmZzZXRNdWx0aXBsaWVyKSkgKyAxO1xuICAgICAgaWYgKHBhcmFtcy5zbGlkZVNoYWRvd3MpIHtcbiAgICAgICAgLy8gU2V0IHNoYWRvd3NcbiAgICAgICAgbGV0ICRzaGFkb3dCZWZvcmVFbCA9IGlzSG9yaXpvbnRhbCA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCcpO1xuICAgICAgICBsZXQgJHNoYWRvd0FmdGVyRWwgPSBpc0hvcml6b250YWwgPyAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tJyk7XG4gICAgICAgIGlmICgkc2hhZG93QmVmb3JlRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgJHNoYWRvd0JlZm9yZUVsID0gJChgPGRpdiBjbGFzcz1cInN3aXBlci1zbGlkZS1zaGFkb3ctJHtpc0hvcml6b250YWwgPyAnbGVmdCcgOiAndG9wJ31cIj48L2Rpdj5gKTtcbiAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoJHNoYWRvd0JlZm9yZUVsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJHNoYWRvd0FmdGVyRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgJHNoYWRvd0FmdGVyRWwgPSAkKGA8ZGl2IGNsYXNzPVwic3dpcGVyLXNsaWRlLXNoYWRvdy0ke2lzSG9yaXpvbnRhbCA/ICdyaWdodCcgOiAnYm90dG9tJ31cIj48L2Rpdj5gKTtcbiAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoJHNoYWRvd0FmdGVyRWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkc2hhZG93QmVmb3JlRWwubGVuZ3RoKSAkc2hhZG93QmVmb3JlRWxbMF0uc3R5bGUub3BhY2l0eSA9IG9mZnNldE11bHRpcGxpZXIgPiAwID8gb2Zmc2V0TXVsdGlwbGllciA6IDA7XG4gICAgICAgIGlmICgkc2hhZG93QWZ0ZXJFbC5sZW5ndGgpICRzaGFkb3dBZnRlckVsWzBdLnN0eWxlLm9wYWNpdHkgPSAoLW9mZnNldE11bHRpcGxpZXIpID4gMCA/IC1vZmZzZXRNdWx0aXBsaWVyIDogMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTZXQgY29ycmVjdCBwZXJzcGVjdGl2ZSBmb3IgSUUxMFxuICAgIGlmIChCcm93c2VyJDEuaWUpIHtcbiAgICAgIGNvbnN0IHdzID0gJHdyYXBwZXJFbFswXS5zdHlsZTtcbiAgICAgIHdzLnBlcnNwZWN0aXZlT3JpZ2luID0gYCR7Y2VudGVyfXB4IDUwJWA7XG4gICAgfVxuICB9LFxuICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIuc2xpZGVzXG4gICAgICAudHJhbnNpdGlvbihkdXJhdGlvbilcbiAgICAgIC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKVxuICAgICAgLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICB9LFxufTtcblxudmFyIEVmZmVjdENvdmVyZmxvdyA9IHtcbiAgbmFtZTogJ2VmZmVjdC1jb3ZlcmZsb3cnLFxuICBwYXJhbXM6IHtcbiAgICBjb3ZlcmZsb3dFZmZlY3Q6IHtcbiAgICAgIHJvdGF0ZTogNTAsXG4gICAgICBzdHJldGNoOiAwLFxuICAgICAgZGVwdGg6IDEwMCxcbiAgICAgIG1vZGlmaWVyOiAxLFxuICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlLFxuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIGNvdmVyZmxvd0VmZmVjdDoge1xuICAgICAgICBzZXRUcmFuc2xhdGU6IENvdmVyZmxvdy5zZXRUcmFuc2xhdGUuYmluZChzd2lwZXIpLFxuICAgICAgICBzZXRUcmFuc2l0aW9uOiBDb3ZlcmZsb3cuc2V0VHJhbnNpdGlvbi5iaW5kKHN3aXBlciksXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGJlZm9yZUluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnY292ZXJmbG93JykgcmV0dXJuO1xuXG4gICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31jb3ZlcmZsb3dgKTtcbiAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfTNkYCk7XG5cbiAgICAgIHN3aXBlci5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XG4gICAgfSxcbiAgICBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnY292ZXJmbG93JykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNvdmVyZmxvd0VmZmVjdC5zZXRUcmFuc2xhdGUoKTtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjb3ZlcmZsb3cnKSByZXR1cm47XG4gICAgICBzd2lwZXIuY292ZXJmbG93RWZmZWN0LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH0sXG4gIH0sXG59O1xuXG4vLyBTd2lwZXIgQ2xhc3Ncbi8vIENvcmUgTW9kdWxlc1xuLy8gQ29tcG9uZW50c1xuU3dpcGVyJDFcbiAgLnVzZShEZXZpY2UkNClcbiAgLnVzZShTdXBwb3J0JDUpXG4gIC51c2UoQnJvd3NlciQyKVxuICAudXNlKFJlc2l6ZSQxKVxuICAudXNlKE9ic2VydmVyJDEpXG4gIC8vIENvbXBvbmVudHNcbiAgLnVzZShOYXZpZ2F0aW9uJDEpXG4gIC51c2UoUGFnaW5hdGlvbiQxKVxuICAudXNlKFNjcm9sbGJhciQxKVxuICAudXNlKFBhcmFsbGF4JDEpXG4gIC51c2UoWm9vbSQxKVxuICAudXNlKExhenkkMilcbiAgLnVzZShDb250cm9sbGVyJDEpXG4gIC51c2UoQTExeSlcbiAgLnVzZShBdXRvcGxheSQxKVxuICAudXNlKEVmZmVjdEZhZGUpXG4gIC51c2UoRWZmZWN0Q3ViZSlcbiAgLnVzZShFZmZlY3RGbGlwKVxuICAudXNlKEVmZmVjdENvdmVyZmxvdyk7XG5cbmlmICghd2luZG93LlN3aXBlcikge1xuICB3aW5kb3cuU3dpcGVyID0gU3dpcGVyJDE7XG59XG5cbnZhciBzd2lwZXIgPSB7XG4gIG5hbWU6ICdzd2lwZXInLFxuICBzdGF0aWM6IHtcbiAgICBTd2lwZXI6IFN3aXBlciQxLFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcbiAgICBhcHAuc3dpcGVyID0gVXRpbHMuZXh0ZW5kKFxuICAgICAgQ29uc3RydWN0b3JNZXRob2RzKHtcbiAgICAgICAgZGVmYXVsdFNlbGVjdG9yOiAnLnN3aXBlci1jb250YWluZXInLFxuICAgICAgICBjb25zdHJ1Y3RvcjogU3dpcGVyJDEsXG4gICAgICAgIGFwcCxcbiAgICAgICAgZG9tUHJvcDogJ3N3aXBlcicsXG4gICAgICB9KSxcbiAgICAgIHtcbiAgICAgICAgY3JlYXRlKC4uLmFyZ3MpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IFN3aXBlciQxKC4uLmFyZ3MpO1xuICAgICAgICB9LFxuICAgICAgfVxuICAgICk7XG4gIH0sXG4gIG9uOiB7XG4gICAgcGFnZUJlZm9yZVJlbW92ZShwYWdlKSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgcGFnZS4kZWwuZmluZCgnLnN3aXBlci1pbml0LCAudGFicy1zd2lwZWFibGUtd3JhcCcpLmVhY2goKGluZGV4LCBzd2lwZXJFbCkgPT4ge1xuICAgICAgICBhcHAuc3dpcGVyLmRlc3Ryb3koc3dpcGVyRWwpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBwYWdlSW5pdChwYWdlKSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzO1xuICAgICAgcGFnZS4kZWwuZmluZCgnLnN3aXBlci1pbml0LCAudGFicy1zd2lwZWFibGUtd3JhcCcpLmVhY2goKGluZGV4LCBzd2lwZXJFbCkgPT4ge1xuICAgICAgICBjb25zdCAkc3dpcGVyRWwgPSAkKHN3aXBlckVsKTtcbiAgICAgICAgbGV0IGluaXRpYWxTbGlkZTtcbiAgICAgICAgbGV0IHBhcmFtcyA9IHt9O1xuICAgICAgICBsZXQgaXNUYWJzO1xuICAgICAgICBpZiAoJHN3aXBlckVsLmhhc0NsYXNzKCd0YWJzLXN3aXBlYWJsZS13cmFwJykpIHtcbiAgICAgICAgICAkc3dpcGVyRWxcbiAgICAgICAgICAgIC5hZGRDbGFzcygnc3dpcGVyLWNvbnRhaW5lcicpXG4gICAgICAgICAgICAuY2hpbGRyZW4oJy50YWJzJylcbiAgICAgICAgICAgIC5hZGRDbGFzcygnc3dpcGVyLXdyYXBwZXInKVxuICAgICAgICAgICAgLmNoaWxkcmVuKCcudGFiJylcbiAgICAgICAgICAgIC5hZGRDbGFzcygnc3dpcGVyLXNsaWRlJyk7XG4gICAgICAgICAgaW5pdGlhbFNsaWRlID0gJHN3aXBlckVsLmNoaWxkcmVuKCcudGFicycpLmNoaWxkcmVuKCcudGFiLWFjdGl2ZScpLmluZGV4KCk7XG4gICAgICAgICAgaXNUYWJzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJHN3aXBlckVsLmF0dHIoJ2RhdGEtc3dpcGVyJykpIHtcbiAgICAgICAgICBwYXJhbXMgPSBKU09OLnBhcnNlKCRzd2lwZXJFbC5hdHRyKCdkYXRhLXN3aXBlcicpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJhbXMgPSAkc3dpcGVyRWwuZGF0YXNldCgpO1xuICAgICAgICAgIE9iamVjdC5rZXlzKHBhcmFtcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUuaW5kZXhPZigneycpID09PSAwICYmIHZhbHVlLmluZGV4T2YoJ30nKSA+IDApIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJhbXNba2V5XSA9IEpTT04ucGFyc2UodmFsdWUpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gbm90IEpTT05cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1zLmluaXRpYWxTbGlkZSA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGluaXRpYWxTbGlkZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBwYXJhbXMuaW5pdGlhbFNsaWRlID0gaW5pdGlhbFNsaWRlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1RhYnMpIHtcbiAgICAgICAgICBVdGlscy5leHRlbmQocGFyYW1zLCB7XG4gICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICBzbGlkZUNoYW5nZVN0YXJ0KCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgICAgICAgYXBwLnRhYi5zaG93KHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgYXBwLnN3aXBlci5jcmVhdGUoJHN3aXBlckVsWzBdLCBwYXJhbXMpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBwYWdlUmVpbml0KHBhZ2UpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgICBwYWdlLiRlbC5maW5kKCcuc3dpcGVyLWluaXQsIC50YWJzLXN3aXBlYWJsZS13cmFwJykuZWFjaCgoaW5kZXgsIHN3aXBlckVsKSA9PiB7XG4gICAgICAgIGNvbnN0IHN3aXBlciA9IGFwcC5zd2lwZXIuZ2V0KHN3aXBlckVsKTtcbiAgICAgICAgaWYgKHN3aXBlciAmJiBzd2lwZXIudXBkYXRlKSBzd2lwZXIudXBkYXRlKCk7XG4gICAgICB9KTtcbiAgICB9LFxuICB9LFxufTtcblxuY2xhc3MgUGhvdG9Ccm93c2VyIGV4dGVuZHMgRnJhbWV3b3JrN0NsYXNzIHtcbiAgY29uc3RydWN0b3IoYXBwLCBwYXJhbXMgPSB7fSkge1xuICAgIHN1cGVyKHBhcmFtcywgW2FwcF0pO1xuXG4gICAgY29uc3QgcGIgPSB0aGlzO1xuICAgIHBiLmFwcCA9IGFwcDtcblxuICAgIGNvbnN0IGRlZmF1bHRzID0gVXRpbHMuZXh0ZW5kKHtcbiAgICAgIG9uOiB7fSxcbiAgICB9LCBhcHAubW9kdWxlcy5waG90b0Jyb3dzZXIucGFyYW1zLnBob3RvQnJvd3Nlcik7XG5cbiAgICAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBtb2R1bGVzIHBhcmFtc1xuICAgIHBiLnVzZUluc3RhbmNlTW9kdWxlc1BhcmFtcyhkZWZhdWx0cyk7XG5cbiAgICBwYi5wYXJhbXMgPSBVdGlscy5leHRlbmQoZGVmYXVsdHMsIHBhcmFtcyk7XG5cbiAgICBVdGlscy5leHRlbmQocGIsIHtcbiAgICAgIGV4cG9zZWQ6IGZhbHNlLFxuICAgICAgb3BlbmVkOiBmYWxzZSxcbiAgICAgIGFjdGl2ZUluZGV4OiBwYi5wYXJhbXMuc3dpcGVyLmluaXRpYWxTbGlkZSxcbiAgICAgIHVybDogcGIucGFyYW1zLnVybCxcbiAgICAgIHZpZXc6IHBiLnBhcmFtcy52aWV3IHx8IGFwcC52aWV3cy5tYWluLFxuICAgICAgc3dpcGVUb0Nsb3NlOiB7XG4gICAgICAgIGFsbG93OiB0cnVlLFxuICAgICAgICBpc1RvdWNoZWQ6IGZhbHNlLFxuICAgICAgICBkaWZmOiB1bmRlZmluZWQsXG4gICAgICAgIHN0YXJ0OiB1bmRlZmluZWQsXG4gICAgICAgIGN1cnJlbnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRlZDogZmFsc2UsXG4gICAgICAgIGFjdGl2ZVNsaWRlOiB1bmRlZmluZWQsXG4gICAgICAgIHRpbWVTdGFydDogdW5kZWZpbmVkLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIC8vIEluc3RhbGwgTW9kdWxlc1xuICAgIHBiLnVzZUluc3RhbmNlTW9kdWxlcygpO1xuXG4gICAgLy8gSW5pdFxuICAgIHBiLmluaXQoKTtcbiAgfVxuICBvblRyYW5zaXRpb25TdGFydChzd2lwZXIpIHtcbiAgICBjb25zdCBwYiA9IHRoaXM7XG4gICAgcGIuYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG5cbiAgICBsZXQgY3VycmVudCA9IHN3aXBlci5hY3RpdmVJbmRleCArIDE7XG4gICAgbGV0IHRvdGFsID0gc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgdG90YWwgLT0gMjtcbiAgICAgIGN1cnJlbnQgLT0gc3dpcGVyLmxvb3BlZFNsaWRlcztcbiAgICAgIGlmIChjdXJyZW50IDwgMSkgY3VycmVudCA9IHRvdGFsICsgY3VycmVudDtcbiAgICAgIGlmIChjdXJyZW50ID4gdG90YWwpIGN1cnJlbnQgLT0gdG90YWw7XG4gICAgfVxuXG4gICAgbGV0ICRjdXJyZW50RWwgPSBwYi4kY29udGFpbmVyRWwuZmluZCgnLnBob3RvLWJyb3dzZXItY3VycmVudCcpO1xuICAgIGxldCAkdG90YWxFbCA9IHBiLiRjb250YWluZXJFbC5maW5kKCcucGhvdG8tYnJvd3Nlci10b3RhbCcpO1xuICAgIGlmIChwYi5wYXJhbXMudHlwZSA9PT0gJ3BhZ2UnICYmIHBiLnBhcmFtcy5uYXZiYXIgJiYgJGN1cnJlbnRFbC5sZW5ndGggPT09IDAgJiYgcGIuYXBwLnRoZW1lID09PSAnaW9zJykge1xuICAgICAgY29uc3QgbmF2YmFyRWwgPSBwYi5hcHAubmF2YmFyLmdldEVsQnlQYWdlKHBiLiRjb250YWluZXJFbCk7XG4gICAgICBpZiAobmF2YmFyRWwpIHtcbiAgICAgICAgJGN1cnJlbnRFbCA9ICQobmF2YmFyRWwpLmZpbmQoJy5waG90by1icm93c2VyLWN1cnJlbnQnKTtcbiAgICAgICAgJHRvdGFsRWwgPSAkKG5hdmJhckVsKS5maW5kKCcucGhvdG8tYnJvd3Nlci10b3RhbCcpO1xuICAgICAgfVxuICAgIH1cbiAgICAkY3VycmVudEVsLnRleHQoY3VycmVudCk7XG4gICAgJHRvdGFsRWwudGV4dCh0b3RhbCk7XG5cbiAgICAvLyBVcGRhdGUgY2FwdGlvbnNcbiAgICBpZiAocGIuY2FwdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgY2FwdGlvbkluZGV4ID0gc3dpcGVyLnBhcmFtcy5sb29wID8gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgOiBwYi5hY3RpdmVJbmRleDtcbiAgICAgIHBiLiRjYXB0aW9uc0NvbnRhaW5lckVsLmZpbmQoJy5waG90by1icm93c2VyLWNhcHRpb24tYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ3Bob3RvLWJyb3dzZXItY2FwdGlvbi1hY3RpdmUnKTtcbiAgICAgIHBiLiRjYXB0aW9uc0NvbnRhaW5lckVsLmZpbmQoYFtkYXRhLWNhcHRpb24taW5kZXg9XCIke2NhcHRpb25JbmRleH1cIl1gKS5hZGRDbGFzcygncGhvdG8tYnJvd3Nlci1jYXB0aW9uLWFjdGl2ZScpO1xuICAgIH1cblxuICAgIC8vIFN0b3AgVmlkZW9cbiAgICBjb25zdCBwcmV2aW91c1NsaWRlVmlkZW8gPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5wcmV2aW91c0luZGV4KS5maW5kKCd2aWRlbycpO1xuICAgIGlmIChwcmV2aW91c1NsaWRlVmlkZW8ubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKCdwYXVzZScgaW4gcHJldmlvdXNTbGlkZVZpZGVvWzBdKSBwcmV2aW91c1NsaWRlVmlkZW9bMF0ucGF1c2UoKTtcbiAgICB9XG4gIH1cbiAgb25Ub3VjaFN0YXJ0KCkge1xuICAgIGNvbnN0IHBiID0gdGhpcztcbiAgICBjb25zdCBzd2lwZVRvQ2xvc2UgPSBwYi5zd2lwZVRvQ2xvc2U7XG4gICAgaWYgKCFzd2lwZVRvQ2xvc2UuYWxsb3cpIHJldHVybjtcbiAgICBzd2lwZVRvQ2xvc2UuaXNUb3VjaGVkID0gdHJ1ZTtcbiAgfVxuICBvblRvdWNoTW92ZShlKSB7XG4gICAgY29uc3QgcGIgPSB0aGlzO1xuICAgIGNvbnN0IHN3aXBlVG9DbG9zZSA9IHBiLnN3aXBlVG9DbG9zZTtcblxuICAgIGlmICghc3dpcGVUb0Nsb3NlLmlzVG91Y2hlZCkgcmV0dXJuO1xuICAgIGlmICghc3dpcGVUb0Nsb3NlLnN0YXJ0ZWQpIHtcbiAgICAgIHN3aXBlVG9DbG9zZS5zdGFydGVkID0gdHJ1ZTtcbiAgICAgIHN3aXBlVG9DbG9zZS5zdGFydCA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICAgICAgc3dpcGVUb0Nsb3NlLmFjdGl2ZVNsaWRlID0gcGIuc3dpcGVyLnNsaWRlcy5lcShwYi5zd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgc3dpcGVUb0Nsb3NlLnRpbWVTdGFydCA9IFV0aWxzLm5vdygpO1xuICAgIH1cbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgc3dpcGVUb0Nsb3NlLmN1cnJlbnQgPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgICBzd2lwZVRvQ2xvc2UuZGlmZiA9IHN3aXBlVG9DbG9zZS5zdGFydCAtIHN3aXBlVG9DbG9zZS5jdXJyZW50O1xuICAgIGNvbnN0IG9wYWNpdHkgPSAxIC0gKE1hdGguYWJzKHN3aXBlVG9DbG9zZS5kaWZmKSAvIDMwMCk7XG4gICAgY29uc3QgY29sb3IgPSBwYi5leHBvc2VkIHx8IHBiLnBhcmFtcy50aGVtZSA9PT0gJ2RhcmsnID8gMCA6IDI1NTtcbiAgICBzd2lwZVRvQ2xvc2UuYWN0aXZlU2xpZGUudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgwLCR7LXN3aXBlVG9DbG9zZS5kaWZmfXB4LDApYCk7XG4gICAgcGIuc3dpcGVyLiRlbC5jc3MoJ2JhY2tncm91bmQtY29sb3InLCBgcmdiYSgke2NvbG9yfSwgJHtjb2xvcn0sICR7Y29sb3J9LCAke29wYWNpdHl9KWApLnRyYW5zaXRpb24oMCk7XG4gIH1cbiAgb25Ub3VjaEVuZCgpIHtcbiAgICBjb25zdCBwYiA9IHRoaXM7XG4gICAgY29uc3Qgc3dpcGVUb0Nsb3NlID0gcGIuc3dpcGVUb0Nsb3NlO1xuICAgIHN3aXBlVG9DbG9zZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICBpZiAoIXN3aXBlVG9DbG9zZS5zdGFydGVkKSB7XG4gICAgICBzd2lwZVRvQ2xvc2Uuc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2lwZVRvQ2xvc2Uuc3RhcnRlZCA9IGZhbHNlO1xuICAgIHN3aXBlVG9DbG9zZS5hbGxvdyA9IGZhbHNlO1xuICAgIGNvbnN0IGRpZmYgPSBNYXRoLmFicyhzd2lwZVRvQ2xvc2UuZGlmZik7XG4gICAgY29uc3QgdGltZURpZmYgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpIC0gc3dpcGVUb0Nsb3NlLnRpbWVTdGFydDtcbiAgICBpZiAoKHRpbWVEaWZmIDwgMzAwICYmIGRpZmYgPiAyMCkgfHwgKHRpbWVEaWZmID49IDMwMCAmJiBkaWZmID4gMTAwKSkge1xuICAgICAgVXRpbHMubmV4dFRpY2soKCkgPT4ge1xuICAgICAgICBpZiAocGIuJGNvbnRhaW5lckVsKSB7XG4gICAgICAgICAgaWYgKHN3aXBlVG9DbG9zZS5kaWZmIDwgMCkgcGIuJGNvbnRhaW5lckVsLmFkZENsYXNzKCdzd2lwZXItY2xvc2UtdG8tYm90dG9tJyk7XG4gICAgICAgICAgZWxzZSBwYi4kY29udGFpbmVyRWwuYWRkQ2xhc3MoJ3N3aXBlci1jbG9zZS10by10b3AnKTtcbiAgICAgICAgfVxuICAgICAgICBwYi5lbWl0KCdsb2NhbDo6c3dpcGVUb0Nsb3NlJywgcGIpO1xuICAgICAgICBwYi5jbG9zZSgpO1xuICAgICAgICBzd2lwZVRvQ2xvc2UuYWxsb3cgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChkaWZmICE9PSAwKSB7XG4gICAgICBzd2lwZVRvQ2xvc2UuYWN0aXZlU2xpZGUuYWRkQ2xhc3MoJ3RyYW5zaXRpb25pbmcnKS50cmFuc2l0aW9uRW5kKCgpID0+IHtcbiAgICAgICAgc3dpcGVUb0Nsb3NlLmFsbG93ID0gdHJ1ZTtcbiAgICAgICAgc3dpcGVUb0Nsb3NlLmFjdGl2ZVNsaWRlLnJlbW92ZUNsYXNzKCd0cmFuc2l0aW9uaW5nJyk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVUb0Nsb3NlLmFsbG93ID0gdHJ1ZTtcbiAgICB9XG4gICAgcGIuc3dpcGVyLiRlbC50cmFuc2l0aW9uKCcnKS5jc3MoJ2JhY2tncm91bmQtY29sb3InLCAnJyk7XG4gICAgc3dpcGVUb0Nsb3NlLmFjdGl2ZVNsaWRlLnRyYW5zZm9ybSgnJyk7XG4gIH1cblxuICAvLyBSZW5kZXIgRnVuY3Rpb25zXG4gIHJlbmRlck5hdmJhcigpIHtcbiAgICBjb25zdCBwYiA9IHRoaXM7XG4gICAgaWYgKHBiLnBhcmFtcy5yZW5kZXJOYXZiYXIpIHJldHVybiBwYi5wYXJhbXMucmVuZGVyTmF2YmFyLmNhbGwocGIpO1xuXG4gICAgbGV0IGljb25zQ29sb3IgPSBwYi5wYXJhbXMuaWNvbnNDb2xvcjtcbiAgICBpZiAoIXBiLnBhcmFtcy5pY29uc0NvbG9yICYmIHBiLnBhcmFtcy50aGVtZSA9PT0gJ2RhcmsnKSBpY29uc0NvbG9yID0gJ3doaXRlJztcblxuICAgIGNvbnN0IGJhY2tMaW5rVGV4dCA9IHBiLmFwcC50aGVtZSA9PT0gJ2lvcycgJiYgcGIucGFyYW1zLmJhY2tMaW5rVGV4dCA/IHBiLnBhcmFtcy5iYWNrTGlua1RleHQgOiAnJztcblxuICAgIGNvbnN0IGlzUG9wdXAgPSBwYi5wYXJhbXMudHlwZSAhPT0gJ3BhZ2UnO1xuICAgIGNvbnN0IG5hdmJhckh0bWwgPSBgXG4gICAgICA8ZGl2IGNsYXNzPVwibmF2YmFyXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJuYXZiYXItaW5uZXIgc2xpZGluZ1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJsZWZ0XCI+XG4gICAgICAgICAgICA8YSBocmVmPVwiI1wiIGNsYXNzPVwibGluayAke2lzUG9wdXAgPyAncG9wdXAtY2xvc2UnIDogJyd9ICR7IWJhY2tMaW5rVGV4dCA/ICdpY29uLW9ubHknIDogJyd9ICR7IWlzUG9wdXAgPyAnYmFjaycgOiAnJ31cIiAke2lzUG9wdXAgPyAnZGF0YS1wb3B1cD1cIi5waG90by1icm93c2VyLXBvcHVwXCInIDogJyd9PlxuICAgICAgICAgICAgICA8aSBjbGFzcz1cImljb24gaWNvbi1iYWNrICR7aWNvbnNDb2xvciA/IGBjb2xvci0ke2ljb25zQ29sb3J9YCA6ICcnfVwiPjwvaT5cbiAgICAgICAgICAgICAgJHtiYWNrTGlua1RleHQgPyBgPHNwYW4+JHtiYWNrTGlua1RleHR9PC9zcGFuPmAgOiAnJ31cbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidGl0bGVcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicGhvdG8tYnJvd3Nlci1jdXJyZW50XCI+PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJwaG90by1icm93c2VyLW9mXCI+JHtwYi5wYXJhbXMubmF2YmFyT2ZUZXh0fTwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicGhvdG8tYnJvd3Nlci10b3RhbFwiPjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicmlnaHRcIj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICBgLnRyaW0oKTtcbiAgICByZXR1cm4gbmF2YmFySHRtbDtcbiAgfVxuICByZW5kZXJUb29sYmFyKCkge1xuICAgIGNvbnN0IHBiID0gdGhpcztcbiAgICBpZiAocGIucGFyYW1zLnJlbmRlclRvb2xiYXIpIHJldHVybiBwYi5wYXJhbXMucmVuZGVyVG9vbGJhci5jYWxsKHBiKTtcblxuICAgIGxldCBpY29uc0NvbG9yID0gcGIucGFyYW1zLmljb25zQ29sb3I7XG4gICAgaWYgKCFwYi5wYXJhbXMuaWNvbnNDb2xvciAmJiBwYi5wYXJhbXMudGhlbWUgPT09ICdkYXJrJykgaWNvbnNDb2xvciA9ICd3aGl0ZSc7XG5cbiAgICBjb25zdCB0b29sYmFySHRtbCA9IGBcbiAgICAgIDxkaXYgY2xhc3M9XCJ0b29sYmFyIHRhYmJhciB0b29sYmFyLWJvdHRvbVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidG9vbGJhci1pbm5lclwiPlxuICAgICAgICAgIDxhIGhyZWY9XCIjXCIgY2xhc3M9XCJsaW5rIHBob3RvLWJyb3dzZXItcHJldlwiPlxuICAgICAgICAgICAgPGkgY2xhc3M9XCJpY29uIGljb24tYmFjayAke2ljb25zQ29sb3IgPyBgY29sb3ItJHtpY29uc0NvbG9yfWAgOiAnJ31cIj48L2k+XG4gICAgICAgICAgPC9hPlxuICAgICAgICAgIDxhIGhyZWY9XCIjXCIgY2xhc3M9XCJsaW5rIHBob3RvLWJyb3dzZXItbmV4dFwiPlxuICAgICAgICAgICAgPGkgY2xhc3M9XCJpY29uIGljb24tZm9yd2FyZCAke2ljb25zQ29sb3IgPyBgY29sb3ItJHtpY29uc0NvbG9yfWAgOiAnJ31cIj48L2k+XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIGAudHJpbSgpO1xuICAgIHJldHVybiB0b29sYmFySHRtbDtcbiAgfVxuICByZW5kZXJDYXB0aW9uKGNhcHRpb24sIGluZGV4KSB7XG4gICAgY29uc3QgcGIgPSB0aGlzO1xuICAgIGlmIChwYi5wYXJhbXMucmVuZGVyQ2FwdGlvbikgcmV0dXJuIHBiLnBhcmFtcy5yZW5kZXJDYXB0aW9uLmNhbGwocGIsIGNhcHRpb24sIGluZGV4KTtcbiAgICBjb25zdCBjYXB0aW9uSHRtbCA9IGBcbiAgICAgIDxkaXYgY2xhc3M9XCJwaG90by1icm93c2VyLWNhcHRpb25cIiBkYXRhLWNhcHRpb24taW5kZXg9XCIke2luZGV4fVwiPlxuICAgICAgICAke2NhcHRpb259XG4gICAgICA8L2Rpdj5cbiAgICBgLnRyaW0oKTtcbiAgICByZXR1cm4gY2FwdGlvbkh0bWw7XG4gIH1cbiAgcmVuZGVyT2JqZWN0KHBob3RvLCBpbmRleCkge1xuICAgIGNvbnN0IHBiID0gdGhpcztcbiAgICBpZiAocGIucGFyYW1zLnJlbmRlck9iamVjdCkgcmV0dXJuIHBiLnBhcmFtcy5yZW5kZXJPYmplY3QuY2FsbChwYiwgcGhvdG8sIGluZGV4KTtcbiAgICBjb25zdCBvYmpIdG1sID0gYFxuICAgICAgPGRpdiBjbGFzcz1cInBob3RvLWJyb3dzZXItc2xpZGUgcGhvdG8tYnJvd3Nlci1vYmplY3Qtc2xpZGUgc3dpcGVyLXNsaWRlXCI+JHtwaG90by5odG1sID8gcGhvdG8uaHRtbCA6IHBob3RvfTwvZGl2PlxuICAgIGA7XG4gICAgcmV0dXJuIG9iakh0bWw7XG4gIH1cbiAgcmVuZGVyTGF6eVBob3RvKHBob3RvLCBpbmRleCkge1xuICAgIGNvbnN0IHBiID0gdGhpcztcbiAgICBpZiAocGIucGFyYW1zLnJlbmRlckxhenlQaG90bykgcmV0dXJuIHBiLnBhcmFtcy5yZW5kZXJMYXp5UGhvdG8uY2FsbChwYiwgcGhvdG8sIGluZGV4KTtcbiAgICBjb25zdCBwaG90b0h0bWwgPSBgXG4gICAgICA8ZGl2IGNsYXNzPVwicGhvdG8tYnJvd3Nlci1zbGlkZSBwaG90by1icm93c2VyLXNsaWRlLWxhenkgc3dpcGVyLXNsaWRlXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInByZWxvYWRlciBzd2lwZXItbGF6eS1wcmVsb2FkZXIgJHtwYi5wYXJhbXMudGhlbWUgPT09ICdkYXJrJyA/ICdjb2xvci13aGl0ZScgOiAnJ31cIj48L2Rpdj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInN3aXBlci16b29tLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICA8aW1nIGRhdGEtc3JjPVwiJHtwaG90by51cmwgPyBwaG90by51cmwgOiBwaG90b31cIiBjbGFzcz1cInN3aXBlci1sYXp5XCI+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgYC50cmltKCk7XG4gICAgcmV0dXJuIHBob3RvSHRtbDtcbiAgfVxuICByZW5kZXJQaG90byhwaG90bywgaW5kZXgpIHtcbiAgICBjb25zdCBwYiA9IHRoaXM7XG4gICAgaWYgKHBiLnBhcmFtcy5yZW5kZXJQaG90bykgcmV0dXJuIHBiLnBhcmFtcy5yZW5kZXJQaG90by5jYWxsKHBiLCBwaG90bywgaW5kZXgpO1xuICAgIGNvbnN0IHBob3RvSHRtbCA9IGBcbiAgICAgIDxkaXYgY2xhc3M9XCJwaG90by1icm93c2VyLXNsaWRlIHN3aXBlci1zbGlkZVwiPlxuICAgICAgICA8c3BhbiBjbGFzcz1cInN3aXBlci16b29tLWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxpbWcgc3JjPVwiJHtwaG90by51cmwgPyBwaG90by51cmwgOiBwaG90b31cIj5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgYC50cmltKCk7XG4gICAgcmV0dXJuIHBob3RvSHRtbDtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgcGIgPSB0aGlzO1xuICAgIGlmIChwYi5wYXJhbXMucmVuZGVyKSByZXR1cm4gcGIucGFyYW1zLnJlbmRlci5jYWxsKHBiLCBwYi5wYXJhbXMpO1xuICAgIGNvbnN0IGh0bWwgPSBgXG4gICAgICA8ZGl2IGNsYXNzPVwicGhvdG8tYnJvd3NlciBwaG90by1icm93c2VyLSR7cGIucGFyYW1zLnRoZW1lfVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidmlld1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJwYWdlIHBob3RvLWJyb3dzZXItcGFnZSBwaG90by1icm93c2VyLXBhZ2UtJHtwYi5wYXJhbXMudGhlbWV9IG5vLXRvb2xiYXIgJHshcGIucGFyYW1zLm5hdmJhciA/ICduby1uYXZiYXInIDogJyd9XCIgZGF0YS1uYW1lPVwicGhvdG8tYnJvd3Nlci1wYWdlXCI+XG4gICAgICAgICAgICAke3BiLnBhcmFtcy5uYXZiYXIgPyBwYi5yZW5kZXJOYXZiYXIoKSA6ICcnfVxuICAgICAgICAgICAgJHtwYi5wYXJhbXMudG9vbGJhciA/IHBiLnJlbmRlclRvb2xiYXIoKSA6ICcnfVxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBob3RvLWJyb3dzZXItY2FwdGlvbnMgcGhvdG8tYnJvd3Nlci1jYXB0aW9ucy0ke3BiLnBhcmFtcy5jYXB0aW9uc1RoZW1lIHx8IHBiLnBhcmFtcy50aGVtZX1cIj5cbiAgICAgICAgICAgICAgJHtwYi5wYXJhbXMucGhvdG9zLmZpbHRlcihwaG90byA9PiBwaG90by5jYXB0aW9uKS5tYXAoKHBob3RvLCBpbmRleCkgPT4gcGIucmVuZGVyQ2FwdGlvbihwaG90by5jYXB0aW9uLCBpbmRleCkpLmpvaW4oJyAnKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBob3RvLWJyb3dzZXItc3dpcGVyLWNvbnRhaW5lciBzd2lwZXItY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwaG90by1icm93c2VyLXN3aXBlci13cmFwcGVyIHN3aXBlci13cmFwcGVyXCI+XG4gICAgICAgICAgICAgICAgJHtwYi5wYXJhbXMucGhvdG9zLm1hcCgocGhvdG8sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAocGhvdG8uaHRtbCB8fCAoKHR5cGVvZiBwaG90byA9PT0gJ3N0cmluZycgfHwgcGhvdG8gaW5zdGFuY2VvZiBTdHJpbmcpICYmIHBob3RvLmluZGV4T2YoJzwnKSA+PSAwICYmIHBob3RvLmluZGV4T2YoJz4nKSA+PSAwKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGIucmVuZGVyT2JqZWN0KHBob3RvLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBiLnBhcmFtcy5zd2lwZXIubGF6eSAmJiBwYi5wYXJhbXMuc3dpcGVyLmxhenkuZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGIucmVuZGVyTGF6eVBob3RvKHBob3RvLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcGIucmVuZGVyUGhvdG8ocGhvdG8sIGluZGV4KTtcbiAgICAgICAgICAgICAgICB9KS5qb2luKCcgJyl9XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgYC50cmltKCk7XG4gICAgcmV0dXJuIGh0bWw7XG4gIH1cbiAgcmVuZGVyU3RhbmRhbG9uZSgpIHtcbiAgICBjb25zdCBwYiA9IHRoaXM7XG4gICAgaWYgKHBiLnBhcmFtcy5yZW5kZXJTdGFuZGFsb25lKSByZXR1cm4gcGIucGFyYW1zLnJlbmRlclN0YW5kYWxvbmUuY2FsbChwYik7XG4gICAgY29uc3Qgc3RhbmRhbG9uZUh0bWwgPSBgPGRpdiBjbGFzcz1cInBvcHVwIHBob3RvLWJyb3dzZXItcG9wdXAgcGhvdG8tYnJvd3Nlci1zdGFuZGFsb25lIHBvcHVwLXRhYmxldC1mdWxsc2NyZWVuXCI+JHtwYi5yZW5kZXIoKX08L2Rpdj5gO1xuICAgIHJldHVybiBzdGFuZGFsb25lSHRtbDtcbiAgfVxuICByZW5kZXJQYWdlKCkge1xuICAgIGNvbnN0IHBiID0gdGhpcztcbiAgICBpZiAocGIucGFyYW1zLnJlbmRlclBhZ2UpIHJldHVybiBwYi5wYXJhbXMucmVuZGVyUGFnZS5jYWxsKHBiKTtcbiAgICBjb25zdCBwYWdlSHRtbCA9IHBiLnJlbmRlcigpO1xuXG4gICAgcmV0dXJuIHBhZ2VIdG1sO1xuICB9XG4gIHJlbmRlclBvcHVwKCkge1xuICAgIGNvbnN0IHBiID0gdGhpcztcbiAgICBpZiAocGIucGFyYW1zLnJlbmRlclBvcHVwKSByZXR1cm4gcGIucGFyYW1zLnJlbmRlclBvcHVwLmNhbGwocGIpO1xuICAgIGNvbnN0IHBvcHVwSHRtbCA9IGA8ZGl2IGNsYXNzPVwicG9wdXAgcGhvdG8tYnJvd3Nlci1wb3B1cFwiPiR7cGIucmVuZGVyKCl9PC9kaXY+YDtcblxuICAgIHJldHVybiBwb3B1cEh0bWw7XG4gIH1cblxuICAvLyBDYWxsYmFja3NcbiAgb25PcGVuKHR5cGUsIGNvbnRhaW5lckVsKSB7XG4gICAgY29uc3QgcGIgPSB0aGlzO1xuICAgIGNvbnN0IGFwcCA9IHBiLmFwcDtcbiAgICBjb25zdCAkY29udGFpbmVyRWwgPSAkKGNvbnRhaW5lckVsKTtcblxuICAgICRjb250YWluZXJFbFswXS5mN1Bob3RvQnJvd3NlciA9IHBiO1xuXG4gICAgcGIuJGNvbnRhaW5lckVsID0gJGNvbnRhaW5lckVsO1xuICAgIHBiLm9wZW5lZEluID0gdHlwZTtcbiAgICBwYi5vcGVuZWQgPSB0cnVlO1xuXG4gICAgcGIuJHN3aXBlckNvbnRhaW5lckVsID0gcGIuJGNvbnRhaW5lckVsLmZpbmQoJy5waG90by1icm93c2VyLXN3aXBlci1jb250YWluZXInKTtcbiAgICBwYi4kc3dpcGVyV3JhcHBlckVsID0gcGIuJGNvbnRhaW5lckVsLmZpbmQoJy5waG90by1icm93c2VyLXN3aXBlci13cmFwcGVyJyk7XG4gICAgcGIuc2xpZGVzID0gcGIuJGNvbnRhaW5lckVsLmZpbmQoJy5waG90by1icm93c2VyLXNsaWRlJyk7XG4gICAgcGIuJGNhcHRpb25zQ29udGFpbmVyRWwgPSBwYi4kY29udGFpbmVyRWwuZmluZCgnLnBob3RvLWJyb3dzZXItY2FwdGlvbnMnKTtcbiAgICBwYi5jYXB0aW9ucyA9IHBiLiRjb250YWluZXJFbC5maW5kKCcucGhvdG8tYnJvd3Nlci1jYXB0aW9uJyk7XG5cbiAgICAvLyBJbml0IFN3aXBlclxuICAgIGNvbnN0IHN3aXBlclNldHRpbmdzID0gVXRpbHMuZXh0ZW5kKHt9LCBwYi5wYXJhbXMuc3dpcGVyLCB7XG4gICAgICBpbml0aWFsU2xpZGU6IHBiLmFjdGl2ZUluZGV4LFxuICAgICAgb246IHtcbiAgICAgICAgdGFwKGUpIHtcbiAgICAgICAgICBwYi5lbWl0KCdsb2NhbDo6dGFwJywgZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNsaWNrKGUpIHtcbiAgICAgICAgICBpZiAocGIucGFyYW1zLmV4cG9zaXRpb24pIHtcbiAgICAgICAgICAgIHBiLmV4cG9zaXRpb25Ub2dnbGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGIuZW1pdCgnbG9jYWw6OmNsaWNrJywgZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGRvdWJsZVRhcChlKSB7XG4gICAgICAgICAgcGIuZW1pdCgnbG9jYWw6OmRvdWJsZVRhcCcsIGUpO1xuICAgICAgICB9LFxuICAgICAgICB0cmFuc2l0aW9uU3RhcnQoKSB7XG4gICAgICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBwYi5vblRyYW5zaXRpb25TdGFydChzd2lwZXIpO1xuICAgICAgICAgIHBiLmVtaXQoJ2xvY2FsOjp0cmFuc2l0aW9uU3RhcnQnLCBzd2lwZXIpO1xuICAgICAgICB9LFxuICAgICAgICB0cmFuc2l0aW9uRW5kKCkge1xuICAgICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgcGIuZW1pdCgnbG9jYWw6OnRyYW5zaXRpb25FbmQnLCBzd2lwZXIpO1xuICAgICAgICB9LFxuICAgICAgICBzbGlkZUNoYW5nZVN0YXJ0KCkge1xuICAgICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgcGIuZW1pdCgnbG9jYWw6OnNsaWRlQ2hhbmdlU3RhcnQnLCBzd2lwZXIpO1xuICAgICAgICB9LFxuICAgICAgICBzbGlkZUNoYW5nZUVuZCgpIHtcbiAgICAgICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIHBiLmVtaXQoJ2xvY2FsOjpzbGlkZUNoYW5nZUVuZCcsIHN3aXBlcik7XG4gICAgICAgIH0sXG4gICAgICAgIGxhenlJbWFnZUxvYWQoc2xpZGVFbCwgaW1nRWwpIHtcbiAgICAgICAgICBwYi5lbWl0KCdsb2NhbDo6bGF6eUltYWdlTG9hZCcsIHNsaWRlRWwsIGltZ0VsKTtcbiAgICAgICAgfSxcbiAgICAgICAgbGF6eUltYWdlUmVhZHkoc2xpZGVFbCwgaW1nRWwpIHtcbiAgICAgICAgICAkKHNsaWRlRWwpLnJlbW92ZUNsYXNzKCdwaG90by1icm93c2VyLXNsaWRlLWxhenknKTtcbiAgICAgICAgICBwYi5lbWl0KCdsb2NhbDo6bGF6eUltYWdlUmVhZHknLCBzbGlkZUVsLCBpbWdFbCk7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICAgIGlmIChwYi5wYXJhbXMuc3dpcGVUb0Nsb3NlICYmIHBiLnBhcmFtcy50eXBlICE9PSAncGFnZScpIHtcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXJTZXR0aW5ncy5vbiwge1xuICAgICAgICB0b3VjaFN0YXJ0KGUpIHtcbiAgICAgICAgICBwYi5vblRvdWNoU3RhcnQoZSk7XG4gICAgICAgIH0sXG4gICAgICAgIHRvdWNoTW92ZU9wcG9zaXRlKGUpIHtcbiAgICAgICAgICBwYi5vblRvdWNoTW92ZShlKTtcbiAgICAgICAgfSxcbiAgICAgICAgdG91Y2hFbmQoZSkge1xuICAgICAgICAgIHBiLm9uVG91Y2hFbmQoZSk7XG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBwYi5zd2lwZXIgPSBhcHAuc3dpcGVyLmNyZWF0ZShwYi4kc3dpcGVyQ29udGFpbmVyRWwsIHN3aXBlclNldHRpbmdzKTtcblxuICAgIGlmIChwYi5hY3RpdmVJbmRleCA9PT0gMCkge1xuICAgICAgcGIub25UcmFuc2l0aW9uU3RhcnQocGIuc3dpcGVyKTtcbiAgICB9XG5cbiAgICBwYi5lbWl0KCdsb2NhbDo6b3BlbiBwaG90b0Jyb3dzZXJPcGVuJywgcGIpO1xuICB9XG4gIG9uT3BlbmVkKCkge1xuICAgIGNvbnN0IHBiID0gdGhpcztcblxuICAgIHBiLmVtaXQoJ2xvY2FsOjpvcGVuZWQgcGhvdG9Ccm93c2VyT3BlbmVkJywgcGIpO1xuICB9XG4gIG9uQ2xvc2UoKSB7XG4gICAgY29uc3QgcGIgPSB0aGlzO1xuICAgIGlmIChwYi5kZXN0cm95ZWQpIHJldHVybjtcblxuICAgIC8vIERlc3Ryb3kgU3dpcGVyXG4gICAgaWYgKHBiLnN3aXBlciAmJiBwYi5zd2lwZXIuZGVzdHJveSkge1xuICAgICAgcGIuc3dpcGVyLmRlc3Ryb3kodHJ1ZSwgZmFsc2UpO1xuICAgICAgcGIuc3dpcGVyID0gbnVsbDtcbiAgICAgIGRlbGV0ZSBwYi5zd2lwZXI7XG4gICAgfVxuXG4gICAgcGIuZW1pdCgnbG9jYWw6OmNsb3NlIHBob3RvQnJvd3NlckNsb3NlJywgcGIpO1xuICB9XG4gIG9uQ2xvc2VkKCkge1xuICAgIGNvbnN0IHBiID0gdGhpcztcbiAgICBpZiAocGIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgcGIub3BlbmVkID0gZmFsc2U7XG4gICAgcGIuJGNvbnRhaW5lckVsID0gbnVsbDtcbiAgICBkZWxldGUgcGIuJGNvbnRhaW5lckVsO1xuXG4gICAgcGIuZW1pdCgnbG9jYWw6OmNsb3NlZCBwaG90b0Jyb3dzZXJDbG9zZWQnLCBwYik7XG4gIH1cblxuICAvLyBPcGVuXG4gIG9wZW5QYWdlKCkge1xuICAgIGNvbnN0IHBiID0gdGhpcztcbiAgICBpZiAocGIub3BlbmVkKSByZXR1cm4gcGI7XG5cbiAgICBjb25zdCBwYWdlSHRtbCA9IHBiLnJlbmRlclBhZ2UoKTtcblxuICAgIHBiLnZpZXcucm91dGVyLm5hdmlnYXRlKHBiLnVybCwge1xuICAgICAgY3JlYXRlUm91dGU6IHtcbiAgICAgICAgY29udGVudDogcGFnZUh0bWwsXG4gICAgICAgIHBhdGg6IHBiLnVybCxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIHBhZ2VFdmVudHM6IHtcbiAgICAgICAgICAgIHBhZ2VCZWZvcmVJbihlLCBwYWdlKSB7XG4gICAgICAgICAgICAgIHBiLnZpZXcuJGVsLmFkZENsYXNzKGB3aXRoLXBob3RvLWJyb3dzZXItcGFnZSB3aXRoLXBob3RvLWJyb3dzZXItcGFnZS0ke3BiLnBhcmFtcy50aGVtZX1gKTtcbiAgICAgICAgICAgICAgcGIub25PcGVuKCdwYWdlJywgcGFnZS5lbCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFnZUFmdGVySW4oZSwgcGFnZSkge1xuICAgICAgICAgICAgICBwYi5vbk9wZW5lZCgncGFnZScsIHBhZ2UuZWwpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhZ2VCZWZvcmVPdXQoZSwgcGFnZSkge1xuICAgICAgICAgICAgICBwYi52aWV3LiRlbC5yZW1vdmVDbGFzcyhgd2l0aC1waG90by1icm93c2VyLXBhZ2Ugd2l0aC1waG90by1icm93c2VyLXBhZ2UtZXhwb3NlZCB3aXRoLXBob3RvLWJyb3dzZXItcGFnZS0ke3BiLnBhcmFtcy50aGVtZX1gKTtcbiAgICAgICAgICAgICAgcGIub25DbG9zZSgncGFnZScsIHBhZ2UuZWwpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhZ2VBZnRlck91dChlLCBwYWdlKSB7XG4gICAgICAgICAgICAgIHBiLm9uQ2xvc2VkKCdwYWdlJywgcGFnZS5lbCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiBwYjtcbiAgfVxuXG4gIG9wZW5TdGFuZGFsb25lKCkge1xuICAgIGNvbnN0IHBiID0gdGhpcztcbiAgICBpZiAocGIub3BlbmVkKSByZXR1cm4gcGI7XG5cbiAgICBjb25zdCBzdGFuZGFsb25lSHRtbCA9IHBiLnJlbmRlclN0YW5kYWxvbmUoKTtcblxuICAgIGNvbnN0IHBvcHVwUGFyYW1zID0ge1xuICAgICAgYmFja2Ryb3A6IGZhbHNlLFxuICAgICAgY29udGVudDogc3RhbmRhbG9uZUh0bWwsXG4gICAgICBvbjoge1xuICAgICAgICBwb3B1cE9wZW4ocG9wdXApIHtcbiAgICAgICAgICBwYi5vbk9wZW4oJ3BvcHVwJywgcG9wdXAuZWwpO1xuICAgICAgICB9LFxuICAgICAgICBwb3B1cE9wZW5lZChwb3B1cCkge1xuICAgICAgICAgIHBiLm9uT3BlbmVkKCdwb3B1cCcsIHBvcHVwLmVsKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9wdXBDbG9zZShwb3B1cCkge1xuICAgICAgICAgIHBiLm9uQ2xvc2UoJ3BvcHVwJywgcG9wdXAuZWwpO1xuICAgICAgICB9LFxuICAgICAgICBwb3B1cENsb3NlZChwb3B1cCkge1xuICAgICAgICAgIHBiLm9uQ2xvc2VkKCdwb3B1cCcsIHBvcHVwLmVsKTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGlmIChwYi5wYXJhbXMucm91dGFibGVNb2RhbHMpIHtcbiAgICAgIHBiLnZpZXcucm91dGVyLm5hdmlnYXRlKHBiLnVybCwge1xuICAgICAgICBjcmVhdGVSb3V0ZToge1xuICAgICAgICAgIHBhdGg6IHBiLnVybCxcbiAgICAgICAgICBwb3B1cDogcG9wdXBQYXJhbXMsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGIubW9kYWwgPSBwYi5hcHAucG9wdXAuY3JlYXRlKHBvcHVwUGFyYW1zKS5vcGVuKCk7XG4gICAgfVxuICAgIHJldHVybiBwYjtcbiAgfVxuXG4gIG9wZW5Qb3B1cCgpIHtcbiAgICBjb25zdCBwYiA9IHRoaXM7XG4gICAgaWYgKHBiLm9wZW5lZCkgcmV0dXJuIHBiO1xuXG4gICAgY29uc3QgcG9wdXBIdG1sID0gcGIucmVuZGVyUG9wdXAoKTtcblxuICAgIGNvbnN0IHBvcHVwUGFyYW1zID0ge1xuICAgICAgY29udGVudDogcG9wdXBIdG1sLFxuICAgICAgb246IHtcbiAgICAgICAgcG9wdXBPcGVuKHBvcHVwKSB7XG4gICAgICAgICAgcGIub25PcGVuKCdwb3B1cCcsIHBvcHVwLmVsKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9wdXBPcGVuZWQocG9wdXApIHtcbiAgICAgICAgICBwYi5vbk9wZW5lZCgncG9wdXAnLCBwb3B1cC5lbCk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvcHVwQ2xvc2UocG9wdXApIHtcbiAgICAgICAgICBwYi5vbkNsb3NlKCdwb3B1cCcsIHBvcHVwLmVsKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9wdXBDbG9zZWQocG9wdXApIHtcbiAgICAgICAgICBwYi5vbkNsb3NlZCgncG9wdXAnLCBwb3B1cC5lbCk7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBpZiAocGIucGFyYW1zLnJvdXRhYmxlTW9kYWxzKSB7XG4gICAgICBwYi52aWV3LnJvdXRlci5uYXZpZ2F0ZShwYi51cmwsIHtcbiAgICAgICAgY3JlYXRlUm91dGU6IHtcbiAgICAgICAgICBwYXRoOiBwYi51cmwsXG4gICAgICAgICAgcG9wdXA6IHBvcHVwUGFyYW1zLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBiLm1vZGFsID0gcGIuYXBwLnBvcHVwLmNyZWF0ZShwb3B1cFBhcmFtcykub3BlbigpO1xuICAgIH1cbiAgICByZXR1cm4gcGI7XG4gIH1cblxuICAvLyBFeHBvc2l0aW9uXG4gIGV4cG9zaXRpb25FbmFibGUoKSB7XG4gICAgY29uc3QgcGIgPSB0aGlzO1xuICAgIGlmIChwYi5wYXJhbXMudHlwZSA9PT0gJ3BhZ2UnKSB7XG4gICAgICBwYi52aWV3LiRlbC5hZGRDbGFzcygnd2l0aC1waG90by1icm93c2VyLXBhZ2UtZXhwb3NlZCcpO1xuICAgIH1cbiAgICBpZiAocGIuJGNvbnRhaW5lckVsKSBwYi4kY29udGFpbmVyRWwuYWRkQ2xhc3MoJ3Bob3RvLWJyb3dzZXItZXhwb3NlZCcpO1xuICAgIGlmIChwYi5wYXJhbXMuZXhwb3NpdGlvbkhpZGVDYXB0aW9ucykgcGIuJGNhcHRpb25zQ29udGFpbmVyRWwuYWRkQ2xhc3MoJ3Bob3RvLWJyb3dzZXItY2FwdGlvbnMtZXhwb3NlZCcpO1xuICAgIHBiLmV4cG9zZWQgPSB0cnVlO1xuICAgIHJldHVybiBwYjtcbiAgfVxuICBleHBvc2l0aW9uRGlzYWJsZSgpIHtcbiAgICBjb25zdCBwYiA9IHRoaXM7XG4gICAgaWYgKHBiLnBhcmFtcy50eXBlID09PSAncGFnZScpIHtcbiAgICAgIHBiLnZpZXcuJGVsLnJlbW92ZUNsYXNzKCd3aXRoLXBob3RvLWJyb3dzZXItcGFnZS1leHBvc2VkJyk7XG4gICAgfVxuICAgIGlmIChwYi4kY29udGFpbmVyRWwpIHBiLiRjb250YWluZXJFbC5yZW1vdmVDbGFzcygncGhvdG8tYnJvd3Nlci1leHBvc2VkJyk7XG4gICAgaWYgKHBiLnBhcmFtcy5leHBvc2l0aW9uSGlkZUNhcHRpb25zKSBwYi4kY2FwdGlvbnNDb250YWluZXJFbC5yZW1vdmVDbGFzcygncGhvdG8tYnJvd3Nlci1jYXB0aW9ucy1leHBvc2VkJyk7XG4gICAgcGIuZXhwb3NlZCA9IGZhbHNlO1xuICAgIHJldHVybiBwYjtcbiAgfVxuICBleHBvc2l0aW9uVG9nZ2xlKCkge1xuICAgIGNvbnN0IHBiID0gdGhpcztcbiAgICBpZiAocGIucGFyYW1zLnR5cGUgPT09ICdwYWdlJykge1xuICAgICAgcGIudmlldy4kZWwudG9nZ2xlQ2xhc3MoJ3dpdGgtcGhvdG8tYnJvd3Nlci1wYWdlLWV4cG9zZWQnKTtcbiAgICB9XG4gICAgaWYgKHBiLiRjb250YWluZXJFbCkgcGIuJGNvbnRhaW5lckVsLnRvZ2dsZUNsYXNzKCdwaG90by1icm93c2VyLWV4cG9zZWQnKTtcbiAgICBpZiAocGIucGFyYW1zLmV4cG9zaXRpb25IaWRlQ2FwdGlvbnMpIHBiLiRjYXB0aW9uc0NvbnRhaW5lckVsLnRvZ2dsZUNsYXNzKCdwaG90by1icm93c2VyLWNhcHRpb25zLWV4cG9zZWQnKTtcbiAgICBwYi5leHBvc2VkID0gIXBiLmV4cG9zZWQ7XG4gICAgcmV0dXJuIHBiO1xuICB9XG4gIG9wZW4oaW5kZXgpIHtcbiAgICBjb25zdCBwYiA9IHRoaXM7XG4gICAgY29uc3QgdHlwZSA9IHBiLnBhcmFtcy50eXBlO1xuICAgIGlmIChwYi5vcGVuZWQpIHtcbiAgICAgIGlmIChwYi5zd2lwZXIgJiYgdHlwZW9mIGluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBwYi5zd2lwZXIuc2xpZGVUbyhwYXJzZUludChpbmRleCwgMTApKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbmRleCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHBiLmFjdGl2ZUluZGV4ID0gaW5kZXg7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAnc3RhbmRhbG9uZScpIHtcbiAgICAgIHBiLm9wZW5TdGFuZGFsb25lKCk7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAncGFnZScpIHtcbiAgICAgIHBiLm9wZW5QYWdlKCk7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAncG9wdXAnKSB7XG4gICAgICBwYi5vcGVuUG9wdXAoKTtcbiAgICB9XG4gICAgcmV0dXJuIHBiO1xuICB9XG4gIGNsb3NlKCkge1xuICAgIGNvbnN0IHBiID0gdGhpcztcbiAgICBpZiAoIXBiLm9wZW5lZCkgcmV0dXJuIHBiO1xuICAgIGlmIChwYi5wYXJhbXMucm91dGFibGVNb2RhbHMgfHwgcGIub3BlbmVkSW4gPT09ICdwYWdlJykge1xuICAgICAgaWYgKHBiLnZpZXcpIHBiLnZpZXcucm91dGVyLmJhY2soKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGIubW9kYWwub25jZSgnbW9kYWxDbG9zZWQnLCAoKSA9PiB7XG4gICAgICAgIFV0aWxzLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICBwYi5tb2RhbC5kZXN0cm95KCk7XG4gICAgICAgICAgZGVsZXRlIHBiLm1vZGFsO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgcGIubW9kYWwuY2xvc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHBiO1xuICB9XG4gIGluaXQoKSB7XG4gICAgY29uc3QgcGIgPSB0aGlzO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgbGV0IHBiID0gdGhpcztcbiAgICBwYi5lbWl0KCdsb2NhbDo6YmVmb3JlRGVzdHJveSBwaG90b0Jyb3dzZXJCZWZvcmVEZXN0cm95JywgcGIpO1xuICAgIGlmIChwYi4kY29udGFpbmVyRWwpIHtcbiAgICAgIHBiLiRjb250YWluZXJFbC50cmlnZ2VyKCdwaG90b2Jyb3dzZXI6YmVmb3JlZGVzdHJveScpO1xuICAgICAgZGVsZXRlIHBiLiRjb250YWluZXJFbFswXS5mN1Bob3RvQnJvd3NlcjtcbiAgICB9XG4gICAgVXRpbHMuZGVsZXRlUHJvcHMocGIpO1xuICAgIHBiID0gbnVsbDtcbiAgfVxufVxuXG52YXIgcGhvdG9Ccm93c2VyID0ge1xuICBuYW1lOiAncGhvdG9Ccm93c2VyJyxcbiAgcGFyYW1zOiB7XG4gICAgcGhvdG9Ccm93c2VyOiB7XG4gICAgICBwaG90b3M6IFtdLFxuICAgICAgZXhwb3NpdGlvbjogdHJ1ZSxcbiAgICAgIGV4cG9zaXRpb25IaWRlQ2FwdGlvbnM6IGZhbHNlLFxuICAgICAgdHlwZTogJ3N0YW5kYWxvbmUnLFxuICAgICAgbmF2YmFyOiB0cnVlLFxuICAgICAgdG9vbGJhcjogdHJ1ZSxcbiAgICAgIHRoZW1lOiAnbGlnaHQnLFxuICAgICAgY2FwdGlvbnNUaGVtZTogdW5kZWZpbmVkLFxuICAgICAgaWNvbnNDb2xvcjogdW5kZWZpbmVkLFxuICAgICAgc3dpcGVUb0Nsb3NlOiB0cnVlLFxuICAgICAgYmFja0xpbmtUZXh0OiAnQ2xvc2UnLFxuICAgICAgbmF2YmFyT2ZUZXh0OiAnb2YnLFxuICAgICAgdmlldzogdW5kZWZpbmVkLFxuICAgICAgdXJsOiAncGhvdG9zLycsXG4gICAgICByb3V0YWJsZU1vZGFsczogdHJ1ZSxcblxuICAgICAgcmVuZGVyTmF2YmFyOiB1bmRlZmluZWQsXG4gICAgICByZW5kZXJUb29sYmFyOiB1bmRlZmluZWQsXG4gICAgICByZW5kZXJDYXB0aW9uOiB1bmRlZmluZWQsXG4gICAgICByZW5kZXJPYmplY3Q6IHVuZGVmaW5lZCxcbiAgICAgIHJlbmRlckxhenlQaG90bzogdW5kZWZpbmVkLFxuICAgICAgcmVuZGVyUGhvdG86IHVuZGVmaW5lZCxcbiAgICAgIHJlbmRlclBhZ2U6IHVuZGVmaW5lZCxcbiAgICAgIHJlbmRlclBvcHVwOiB1bmRlZmluZWQsXG4gICAgICByZW5kZXJTdGFuZGFsb25lOiB1bmRlZmluZWQsXG5cbiAgICAgIHN3aXBlcjoge1xuICAgICAgICBpbml0aWFsU2xpZGU6IDAsXG4gICAgICAgIHNwYWNlQmV0d2VlbjogMjAsXG4gICAgICAgIHNwZWVkOiAzMDAsXG4gICAgICAgIGxvb3A6IGZhbHNlLFxuICAgICAgICBwcmVsb2FkSW1hZ2VzOiB0cnVlLFxuICAgICAgICBuYXZpZ2F0aW9uOiB7XG4gICAgICAgICAgbmV4dEVsOiAnLnBob3RvLWJyb3dzZXItbmV4dCcsXG4gICAgICAgICAgcHJldkVsOiAnLnBob3RvLWJyb3dzZXItcHJldicsXG4gICAgICAgIH0sXG4gICAgICAgIHpvb206IHtcbiAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgIG1heFJhdGlvOiAzLFxuICAgICAgICAgIG1pblJhdGlvOiAxLFxuICAgICAgICB9LFxuICAgICAgICBsYXp5OiB7XG4gICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgYXBwLnBob3RvQnJvd3NlciA9IENvbnN0cnVjdG9yTWV0aG9kcyh7XG4gICAgICBkZWZhdWx0U2VsZWN0b3I6ICcucGhvdG8tYnJvd3NlcicsXG4gICAgICBjb25zdHJ1Y3RvcjogUGhvdG9Ccm93c2VyLFxuICAgICAgYXBwLFxuICAgICAgZG9tUHJvcDogJ2Y3UGhvdG9Ccm93c2VyJyxcbiAgICB9KTtcbiAgfSxcbiAgc3RhdGljOiB7XG4gICAgUGhvdG9Ccm93c2VyLFxuICB9LFxufTtcblxudmFyIF90ZW1wTm90aWZpY2F0aW9uRWxlbWVudDtcblxuY29uc3QgTm90aWZpY2F0aW9uID0ge1xuICAvLyBNb2RhbFxuICBhZGQocGFyYW1zKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcztcblxuICAgIGlmICghcGFyYW1zKSByZXR1cm47XG5cbiAgICBpZiAodHlwZW9mIHBhcmFtcy5tZWRpYSA9PT0gJ3VuZGVmaW5lZCcpIHBhcmFtcy5tZWRpYSA9IGFwcC5wYXJhbXMubm90aWZpY2F0aW9uLm1lZGlhO1xuICAgIGlmICh0eXBlb2YgcGFyYW1zLnRpdGxlID09PSAndW5kZWZpbmVkJykgcGFyYW1zLnRpdGxlID0gYXBwLnBhcmFtcy5ub3RpZmljYXRpb24udGl0bGU7XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMuc3VidGl0bGUgPT09ICd1bmRlZmluZWQnKSBwYXJhbXMuc3VidGl0bGUgPSBhcHAucGFyYW1zLm5vdGlmaWNhdGlvbi5zdWJ0aXRsZTtcbiAgICBpZiAodHlwZW9mIHBhcmFtcy5jbG9zZUljb24gPT09ICd1bmRlZmluZWQnKSBwYXJhbXMuY2xvc2VJY29uID0gYXBwLnBhcmFtcy5ub3RpZmljYXRpb24uY2xvc2VJY29uO1xuICAgIGlmICh0eXBlb2YgcGFyYW1zLmhvbGQgPT09ICd1bmRlZmluZWQnKSBwYXJhbXMuaG9sZCA9IGFwcC5wYXJhbXMubm90aWZpY2F0aW9uLmhvbGQ7XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMuY2xvc2VPbkNsaWNrID09PSAndW5kZWZpbmVkJykgcGFyYW1zLmNsb3NlT25DbGljayA9IGFwcC5wYXJhbXMubm90aWZpY2F0aW9uLmNsb3NlT25DbGljaztcbiAgICBpZiAodHlwZW9mIHBhcmFtcy5idXR0b24gPT09ICd1bmRlZmluZWQnKSBwYXJhbXMuYnV0dG9uID0gYXBwLnBhcmFtcy5ub3RpZmljYXRpb24uY2xvc2VCdXR0b25UZXh0ICYmIHtcbiAgICAgICAgdGV4dDogYXBwLnBhcmFtcy5ub3RpZmljYXRpb24uY2xvc2VCdXR0b25UZXh0LFxuICAgICAgICBjbG9zZTogdHJ1ZVxuICAgIH07XG5cbiAgICBwYXJhbXMubWF0ZXJpYWwgPSBhcHAudGhlbWUgPT09ICdtZCc7ICAvLyB0aGlzIGlzIHVzZWQgaW4gdGhlIGRlZmF1bHQgdGVtcGxhdGVcblxuICAgIGlmICghX3RlbXBOb3RpZmljYXRpb25FbGVtZW50KSBfdGVtcE5vdGlmaWNhdGlvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIHZhciBjb250YWluZXIgPSAkKCcubm90aWZpY2F0aW9ucycpO1xuICAgIGlmIChjb250YWluZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGFwcC5yb290LmFwcGVuZCgnPGRpdiBjbGFzcz1cIm5vdGlmaWNhdGlvbnMgbGlzdC1ibG9jaycgKyAoYXBwLnRoZW1lID09PSAnbWQnID8gJycgOiAnIG1lZGlhLWxpc3QnKSArICdcIj48dWw+PC91bD48L2Rpdj4nKTtcbiAgICAgICAgY29udGFpbmVyID0gJCgnLm5vdGlmaWNhdGlvbnMnKTtcbiAgICB9XG4gICAgdmFyIGxpc3QgPSBjb250YWluZXIuY2hpbGRyZW4oJ3VsJyk7XG5cbiAgICB2YXIgbm90aWZpY2F0aW9uVGVtcGxhdGUgPSBhcHAucGFyYW1zLm5vdGlmaWNhdGlvblRlbXBsYXRlIHx8XG4gICAgICAgICd7eyNpZiBjdXN0b219fScgK1xuICAgICAgICAnPGxpPnt7Y3VzdG9tfX08L2xpPicgK1xuICAgICAgICAne3tlbHNlfX0nICtcbiAgICAgICAgJzxsaSBjbGFzcz1cIm5vdGlmaWNhdGlvbi1pdGVtIG5vdGlmaWNhdGlvbi1oaWRkZW5cIj4nICtcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiaXRlbS1jb250ZW50XCI+JyArXG4gICAgICAgICAgICAgICAgJ3t7I2lmIG1hdGVyaWFsfX0nICtcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJpdGVtLWlubmVyXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIml0ZW0tdGl0bGVcIj57e2pzIFwidGhpcy5tZXNzYWdlIHx8IHRoaXMudGl0bGUgfHwgdGhpcy5zdWJ0aXRsZVwifX08L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICd7eyNpZiAuLi9idXR0b259fXt7I2J1dHRvbn19JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIml0ZW0tYWZ0ZXJcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGEgaHJlZj1cIiNcIiBjbGFzcz1cImJ1dHRvbiB7eyNpZiBjb2xvcn19Y29sb3Ite3tjb2xvcn19e3svaWZ9fSB7eyNqc19jb21wYXJlIFwidGhpcy5jbG9zZSAhPT0gZmFsc2VcIn19Y2xvc2Utbm90aWZpY2F0aW9ue3svanNfY29tcGFyZX19XCI+e3t0ZXh0fX08L2E+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAne3svYnV0dG9ufX17ey9pZn19JyArXG4gICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAne3tlbHNlfX0nICtcbiAgICAgICAgICAgICAgICAgICAgJ3t7I2lmIG1lZGlhfX0nICtcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJpdGVtLW1lZGlhXCI+e3ttZWRpYX19PC9kaXY+JyArXG4gICAgICAgICAgICAgICAgICAgICd7ey9pZn19JyArXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiaXRlbS1pbm5lclwiPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJpdGVtLXRpdGxlLXJvd1wiPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd7eyNpZiB0aXRsZX19JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJpdGVtLXRpdGxlXCI+e3t0aXRsZX19PC9kaXY+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3t7L2lmfX0nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAne3sjaWYgY2xvc2VJY29ufX0nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIml0ZW0tYWZ0ZXJcIj48YSBocmVmPVwiI1wiIGNsYXNzPVwiY2xvc2Utbm90aWZpY2F0aW9uXCI+PHNwYW4+PC9zcGFuPjwvYT48L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAne3svaWZ9fScgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3t7I2lmIHN1YnRpdGxlfX0nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiaXRlbS1zdWJ0aXRsZVwiPnt7c3VidGl0bGV9fTwvZGl2PicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3t7L2lmfX0nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICd7eyNpZiBtZXNzYWdlfX0nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiaXRlbS10ZXh0XCI+e3ttZXNzYWdlfX08L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAgICAgJ3t7L2lmfX0nICtcbiAgICAgICAgICAgICAgICAne3svaWZ9fScgK1xuICAgICAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAnPC9saT4nICtcbiAgICAgICAgJ3t7L2lmfX0nO1xuICAgIGlmICghYXBwLm5vdGlmaWNhdGlvbkNvbXBpbGVkVGVtcGxhdGUpIHtcbiAgICAgICAgYXBwLm5vdGlmaWNhdGlvbkNvbXBpbGVkVGVtcGxhdGUgPSB0Ny5jb21waWxlKG5vdGlmaWNhdGlvblRlbXBsYXRlKTtcbiAgICB9XG4gICAgX3RlbXBOb3RpZmljYXRpb25FbGVtZW50LmlubmVySFRNTCA9IGFwcC5ub3RpZmljYXRpb25Db21waWxlZFRlbXBsYXRlKHBhcmFtcyk7XG5cbiAgICB2YXIgaXRlbSA9ICQoX3RlbXBOb3RpZmljYXRpb25FbGVtZW50KS5jaGlsZHJlbigpO1xuXG4gICAgaXRlbS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgY2xvc2UgPSBmYWxzZTtcbiAgICAgICAgdmFyIHRhcmdldCA9ICQoZS50YXJnZXQpO1xuICAgICAgICBpZiAoYXBwLnRoZW1lID09PSAnbWQnICYmIHRhcmdldC5oYXNDbGFzcygnYnV0dG9uJykpIHtcbiAgICAgICAgICAgIGlmIChwYXJhbXMuYnV0dG9uICYmIHBhcmFtcy5idXR0b24ub25DbGljaykgcGFyYW1zLmJ1dHRvbi5vbkNsaWNrLmNhbGwodGFyZ2V0WzBdLCBlLCBpdGVtWzBdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFyZ2V0LmlzKCcuY2xvc2Utbm90aWZpY2F0aW9uJykgfHwgJChlLnRhcmdldCkucGFyZW50cygnLmNsb3NlLW5vdGlmaWNhdGlvbicpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNsb3NlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChwYXJhbXMub25DbGljaykgcGFyYW1zLm9uQ2xpY2soZSwgaXRlbVswXSk7XG4gICAgICAgICAgICBpZiAocGFyYW1zLmNsb3NlT25DbGljaykgY2xvc2UgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjbG9zZSkgTm90aWZpY2F0aW9uLmNsb3NlKGl0ZW1bMF0sIGUpO1xuICAgIH0pO1xuICAgIGlmIChwYXJhbXMub25DbG9zZSkge1xuICAgICAgICBpdGVtLmRhdGEoJ2Y3Tm90aWZpY2F0aW9uT25DbG9zZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBwYXJhbXMub25DbG9zZShpdGVtWzBdLCBlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChwYXJhbXMuYWRkaXRpb25hbENsYXNzKSB7XG4gICAgICAgIGl0ZW0uYWRkQ2xhc3MocGFyYW1zLmFkZGl0aW9uYWxDbGFzcyk7XG4gICAgfVxuICAgIGlmIChwYXJhbXMuaG9sZCkge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpdGVtLmxlbmd0aCA+IDApIE5vdGlmaWNhdGlvbi5jbG9zZShpdGVtWzBdKTtcbiAgICAgICAgfSwgcGFyYW1zLmhvbGQpO1xuICAgIH1cblxuICAgIGlmIChhcHAudGhlbWUgIT09ICdtZCcpIHtcbiAgICAgICAgTm90aWZpY2F0aW9uLmNsb3NlKGxpc3QuY2hpbGRyZW4oJ2xpLm5vdGlmaWNhdGlvbi1pdGVtOmxhc3QtY2hpbGQnKSk7XG4gICAgfVxuICAgIGxpc3QuYXBwZW5kKGl0ZW1bMF0pO1xuICAgIGNvbnRhaW5lci5zaG93KCk7XG5cbiAgICB2YXIgaXRlbUhlaWdodCA9IGl0ZW0ub3V0ZXJIZWlnaHQoKSwgY2xpZW50TGVmdDtcbiAgICBpZiAoYXBwLnRoZW1lID09PSAnbWQnKSB7XG4gICAgICAgIGNvbnRhaW5lci50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKDAsICcraXRlbUhlaWdodCsncHgsIDApJyk7XG4gICAgICAgIGNvbnRhaW5lci50cmFuc2l0aW9uKDApO1xuXG4gICAgICAgIGNsaWVudExlZnQgPSBpdGVtWzBdLmNsaWVudExlZnQ7XG5cbiAgICAgICAgY29udGFpbmVyLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMCwgMCwgMCknKTtcbiAgICAgICAgY29udGFpbmVyLnRyYW5zaXRpb24oJycpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaXRlbS50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKDAsJyArICgtaXRlbUhlaWdodCkgKyAncHgsMCknKTtcbiAgICAgICAgaXRlbS50cmFuc2l0aW9uKDApO1xuXG4gICAgICAgIGNsaWVudExlZnQgPSBpdGVtWzBdLmNsaWVudExlZnQ7XG5cbiAgICAgICAgaXRlbS50cmFuc2l0aW9uKCcnKTtcbiAgICAgICAgaXRlbS50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKDAsMHB4LDApJyk7XG4gICAgfVxuXG4gICAgY29udGFpbmVyLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMCwgMCwwKScpO1xuICAgIGl0ZW0ucmVtb3ZlQ2xhc3MoJ25vdGlmaWNhdGlvbi1oaWRkZW4nKTtcbiAgfSxcblxuICBjbG9zZShpdGVtLCBldmVudCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG5cbiAgICBpdGVtID0gJChpdGVtKTtcbiAgICBpZiAoaXRlbS5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBpZiAoaXRlbS5oYXNDbGFzcygnbm90aWZpY2F0aW9uLWl0ZW0tcmVtb3ZpbmcnKSkgcmV0dXJuO1xuICAgIHZhciBjb250YWluZXIgPSAkKCcubm90aWZpY2F0aW9ucycpO1xuXG4gICAgdmFyIGl0ZW1IZWlnaHQgPSBpdGVtLm91dGVySGVpZ2h0KCk7XG4gICAgaXRlbS5jc3MoJ2hlaWdodCcsIGl0ZW1IZWlnaHQgKyAncHgnKS50cmFuc2l0aW9uKDApLmFkZENsYXNzKCdub3RpZmljYXRpb24taXRlbS1yZW1vdmluZycpO1xuICAgIHZhciBjbGllbnRMZWZ0ID0gaXRlbVswXS5jbGllbnRMZWZ0O1xuXG4gICAgaXRlbS5jc3Moe1xuICAgICAgICBoZWlnaHQ6ICcwcHgnLFxuICAgICAgICBtYXJnaW5Cb3R0b206ICcwcHgnXG4gICAgfSkudHJhbnNpdGlvbignJyk7XG5cbiAgICBpZiAoaXRlbS5kYXRhKCdmN05vdGlmaWNhdGlvbk9uQ2xvc2UnKSkgaXRlbS5kYXRhKCdmN05vdGlmaWNhdGlvbk9uQ2xvc2UnKShldmVudCk7XG5cbiAgICBpZiAoY29udGFpbmVyLmZpbmQoJy5ub3RpZmljYXRpb24taXRlbTpub3QoLm5vdGlmaWNhdGlvbi1pdGVtLXJlbW92aW5nKScpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb250YWluZXIudHJhbnNmb3JtKCcnKTtcbiAgICB9XG5cbiAgICBpdGVtLmFkZENsYXNzKCdub3RpZmljYXRpb24taGlkZGVuJykudHJhbnNpdGlvbkVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGl0ZW0ucmVtb3ZlKCk7XG4gICAgICAgIGlmIChjb250YWluZXIuZmluZCgnLm5vdGlmaWNhdGlvbi1pdGVtJykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBjb250YWluZXIuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgfSxcbn07XG52YXIgbm90aWZpY2F0aW9uID0ge1xuICBuYW1lOiAnbm90aWZpY2F0aW9uJyxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKGFwcCwge1xuICAgICAgbm90aWZpY2F0aW9uOiB7XG4gICAgICAgIGFkZDogTm90aWZpY2F0aW9uLmFkZC5iaW5kKGFwcCksXG4gICAgICAgIGNsb3NlOiBOb3RpZmljYXRpb24uY2xvc2UuYmluZChhcHApLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgcGFyYW1zOiB7XG4gICAgbm90aWZpY2F0aW9uOiB7XG4gICAgICBjbG9zZU9uQ2xpY2s6IGZhbHNlLFxuICAgICAgY2xvc2VJY29uOiB0cnVlLFxuICAgICAgY2xvc2VCdXR0b25UZXh0OiAnQ2xvc2UnXG4gICAgfSxcbiAgfSxcbn07XG5cbi8qIGVzbGludCBcIm5vLXVzZWxlc3MtZXNjYXBlXCI6IFwib2ZmXCIgKi9cbmNsYXNzIEF1dG9jb21wbGV0ZSBleHRlbmRzIEZyYW1ld29yazdDbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGFwcCwgcGFyYW1zID0ge30pIHtcbiAgICBzdXBlcihwYXJhbXMsIFthcHBdKTtcblxuICAgIGNvbnN0IGFjID0gdGhpcztcbiAgICBhYy5hcHAgPSBhcHA7XG5cbiAgICBjb25zdCBkZWZhdWx0cyA9IFV0aWxzLmV4dGVuZCh7XG4gICAgICBvbjoge30sXG4gICAgfSwgYXBwLm1vZHVsZXMuYXV0b2NvbXBsZXRlLnBhcmFtcy5hdXRvY29tcGxldGUpO1xuXG5cbiAgICAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBtb2R1bGVzIHBhcmFtc1xuICAgIGFjLnVzZUluc3RhbmNlTW9kdWxlc1BhcmFtcyhkZWZhdWx0cyk7XG5cbiAgICBhYy5wYXJhbXMgPSBVdGlscy5leHRlbmQoZGVmYXVsdHMsIHBhcmFtcyk7XG5cbiAgICBsZXQgJG9wZW5lckVsO1xuICAgIGlmIChhYy5wYXJhbXMub3BlbmVyRWwpIHtcbiAgICAgICRvcGVuZXJFbCA9ICQoYWMucGFyYW1zLm9wZW5lckVsKTtcbiAgICAgIGlmICgkb3BlbmVyRWwubGVuZ3RoKSAkb3BlbmVyRWxbMF0uZjdBdXRvY29tcGxldGUgPSBhYztcbiAgICB9XG5cbiAgICBsZXQgJGlucHV0RWw7XG4gICAgaWYgKGFjLnBhcmFtcy5pbnB1dEVsKSB7XG4gICAgICAkaW5wdXRFbCA9ICQoYWMucGFyYW1zLmlucHV0RWwpO1xuICAgICAgaWYgKCRpbnB1dEVsLmxlbmd0aCkgJGlucHV0RWxbMF0uZjdBdXRvY29tcGxldGUgPSBhYztcbiAgICB9XG5cbiAgICBsZXQgdmlldztcbiAgICBpZiAoYWMucGFyYW1zLnZpZXcpIHtcbiAgICAgIHZpZXcgPSBhYy5wYXJhbXMudmlldztcbiAgICB9IGVsc2UgaWYgKCRvcGVuZXJFbCB8fCAkaW5wdXRFbCkge1xuICAgICAgdmlldyA9IGFwcC52aWV3cy5nZXQoJG9wZW5lckVsIHx8ICRpbnB1dEVsKTtcbiAgICB9XG4gICAgaWYgKCF2aWV3KSB2aWV3ID0gYXBwLnZpZXdzLm1haW47XG5cbiAgICBjb25zdCBpZCA9IFV0aWxzLm5vdygpO1xuXG4gICAgbGV0IHVybCA9IHBhcmFtcy51cmw7XG4gICAgaWYgKCF1cmwgJiYgJG9wZW5lckVsICYmICRvcGVuZXJFbC5sZW5ndGgpIHtcbiAgICAgIGlmICgkb3BlbmVyRWwuYXR0cignaHJlZicpKSB1cmwgPSAkb3BlbmVyRWwuYXR0cignaHJlZicpO1xuICAgICAgZWxzZSBpZiAoJG9wZW5lckVsLmZpbmQoJ2EnKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHVybCA9ICRvcGVuZXJFbC5maW5kKCdhJykuYXR0cignaHJlZicpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXVybCB8fCB1cmwgPT09ICcjJyB8fCB1cmwgPT09ICcnKSB1cmwgPSBhYy5wYXJhbXMudXJsO1xuXG4gICAgY29uc3QgaW5wdXRUeXBlID0gYWMucGFyYW1zLm11bHRpcGxlID8gJ2NoZWNrYm94JyA6ICdyYWRpbyc7XG5cbiAgICBVdGlscy5leHRlbmQoYWMsIHtcbiAgICAgICRvcGVuZXJFbCxcbiAgICAgIG9wZW5lckVsOiAkb3BlbmVyRWwgJiYgJG9wZW5lckVsWzBdLFxuICAgICAgJGlucHV0RWwsXG4gICAgICBpbnB1dEVsOiAkaW5wdXRFbCAmJiAkaW5wdXRFbFswXSxcbiAgICAgIGlkLFxuICAgICAgdmlldyxcbiAgICAgIHVybCxcbiAgICAgIHZhbHVlOiBhYy5wYXJhbXMudmFsdWUgfHwgW10sXG4gICAgICBpbnB1dFR5cGUsXG4gICAgICBpbnB1dE5hbWU6IGAke2lucHV0VHlwZX0tJHtpZH1gLFxuICAgICAgJG1vZGFsRWw6IHVuZGVmaW5lZCxcbiAgICAgICRkcm9wZG93bkVsOiB1bmRlZmluZWQsXG4gICAgfSk7XG5cbiAgICBsZXQgcHJldmlvdXNRdWVyeSA9ICcnO1xuICAgIGZ1bmN0aW9uIG9uSW5wdXRDaGFuZ2UoKSB7XG4gICAgICBsZXQgcXVlcnkgPSBhYy4kaW5wdXRFbC52YWwoKS50cmltKCk7XG5cbiAgICAgIGlmICghYWMucGFyYW1zLnNvdXJjZSkgcmV0dXJuO1xuICAgICAgYWMucGFyYW1zLnNvdXJjZS5jYWxsKGFjLCBxdWVyeSwgKGl0ZW1zKSA9PiB7XG4gICAgICAgIGxldCBpdGVtc0hUTUwgPSAnJztcbiAgICAgICAgY29uc3QgbGltaXQgPSBhYy5wYXJhbXMubGltaXQgPyBNYXRoLm1pbihhYy5wYXJhbXMubGltaXQsIGl0ZW1zLmxlbmd0aCkgOiBpdGVtcy5sZW5ndGg7XG4gICAgICAgIGFjLml0ZW1zID0gaXRlbXM7XG4gICAgICAgIGxldCByZWdFeHA7XG4gICAgICAgIGlmIChhYy5wYXJhbXMuaGlnaGxpZ2h0TWF0Y2hlcykge1xuICAgICAgICAgIHF1ZXJ5ID0gcXVlcnkucmVwbGFjZSgvW1xcLVxcW1xcXVxcL1xce1xcfVxcKFxcKVxcKlxcK1xcP1xcLlxcXFxcXF5cXCRcXHxdL2csICdcXFxcJCYnKTtcbiAgICAgICAgICByZWdFeHAgPSBuZXcgUmVnRXhwKGAoJHtxdWVyeX0pYCwgJ2knKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBmaXJzdFZhbHVlO1xuICAgICAgICBsZXQgZmlyc3RJdGVtO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbWl0OyBpICs9IDEpIHtcbiAgICAgICAgICBjb25zdCBpdGVtVmFsdWUgPSB0eXBlb2YgaXRlbXNbaV0gPT09ICdvYmplY3QnID8gaXRlbXNbaV1bYWMucGFyYW1zLnZhbHVlUHJvcGVydHldIDogaXRlbXNbaV07XG4gICAgICAgICAgY29uc3QgaXRlbVRleHQgPSB0eXBlb2YgaXRlbXNbaV0gPT09ICdvYmplY3QnID8gaXRlbXNbaV1bYWMucGFyYW1zLnRleHRQcm9wZXJ0eV0gOiBpdGVtc1tpXTtcbiAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgZmlyc3RWYWx1ZSA9IGl0ZW1WYWx1ZTtcbiAgICAgICAgICAgIGZpcnN0SXRlbSA9IGFjLml0ZW1zW2ldO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpdGVtc0hUTUwgKz0gYWMucmVuZGVySXRlbSh7XG4gICAgICAgICAgICB2YWx1ZTogaXRlbVZhbHVlLFxuICAgICAgICAgICAgdGV4dDogYWMucGFyYW1zLmhpZ2hsaWdodE1hdGNoZXMgPyBpdGVtVGV4dC5yZXBsYWNlKHJlZ0V4cCwgJzxiPiQxPC9iPicpIDogaXRlbVRleHQsXG4gICAgICAgICAgfSwgaSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW1zSFRNTCA9PT0gJycgJiYgcXVlcnkgPT09ICcnICYmIGFjLnBhcmFtcy5kcm9wZG93blBsYWNlaG9sZGVyVGV4dCkge1xuICAgICAgICAgIGl0ZW1zSFRNTCArPSBhYy5yZW5kZXJJdGVtKHtcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiB0cnVlLFxuICAgICAgICAgICAgdGV4dDogYWMucGFyYW1zLmRyb3Bkb3duUGxhY2Vob2xkZXJUZXh0LFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGFjLiRkcm9wZG93bkVsLmZpbmQoJ3VsJykuaHRtbChpdGVtc0hUTUwpO1xuICAgICAgICBpZiAoYWMucGFyYW1zLnR5cGVhaGVhZCkge1xuICAgICAgICAgIGlmICghZmlyc3RWYWx1ZSB8fCAhZmlyc3RJdGVtKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChmaXJzdFZhbHVlLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihxdWVyeS50b0xvd2VyQ2FzZSgpKSAhPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJldmlvdXNRdWVyeS50b0xvd2VyQ2FzZSgpID09PSBxdWVyeS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICBhYy52YWx1ZSA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwcmV2aW91c1F1ZXJ5LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihxdWVyeS50b0xvd2VyQ2FzZSgpKSA9PT0gMCkge1xuICAgICAgICAgICAgcHJldmlvdXNRdWVyeSA9IHF1ZXJ5O1xuICAgICAgICAgICAgYWMudmFsdWUgPSBbXTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgJGlucHV0RWwudmFsKGZpcnN0VmFsdWUpO1xuICAgICAgICAgICRpbnB1dEVsWzBdLnNldFNlbGVjdGlvblJhbmdlKHF1ZXJ5Lmxlbmd0aCwgZmlyc3RWYWx1ZS5sZW5ndGgpO1xuXG4gICAgICAgICAgY29uc3QgcHJldmlvdXNWYWx1ZSA9IHR5cGVvZiBhYy52YWx1ZVswXSA9PT0gJ29iamVjdCcgPyBhYy52YWx1ZVswXVthYy5wYXJhbXMudmFsdWVQcm9wZXJ0eV0gOiBhYy52YWx1ZVswXTtcbiAgICAgICAgICBpZiAoIXByZXZpb3VzVmFsdWUgfHwgZmlyc3RWYWx1ZS50b0xvd2VyQ2FzZSgpICE9PSBwcmV2aW91c1ZhbHVlLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIGFjLnZhbHVlID0gW2ZpcnN0SXRlbV07XG4gICAgICAgICAgICBhYy5lbWl0KCdsb2NhbDo6Y2hhbmdlIGF1dG9jb21wbGV0ZUNoYW5nZScsIFtmaXJzdEl0ZW1dKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcmV2aW91c1F1ZXJ5ID0gcXVlcnk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25QYWdlSW5wdXRDaGFuZ2UoKSB7XG4gICAgICBjb25zdCBpbnB1dCA9IHRoaXM7XG4gICAgICBjb25zdCB2YWx1ZSA9IGlucHV0LnZhbHVlO1xuICAgICAgY29uc3QgaXNWYWx1ZXMgPSAkKGlucHV0KS5wYXJlbnRzKCcuYXV0b2NvbXBsZXRlLXZhbHVlcycpLmxlbmd0aCA+IDA7XG4gICAgICBsZXQgaXRlbTtcbiAgICAgIGxldCBpdGVtVmFsdWU7XG4gICAgICBsZXQgYVZhbHVlO1xuICAgICAgaWYgKGlzVmFsdWVzKSB7XG4gICAgICAgIGlmIChhYy5pbnB1dFR5cGUgPT09ICdjaGVja2JveCcgJiYgIWlucHV0LmNoZWNrZWQpIHtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFjLnZhbHVlLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBhVmFsdWUgPSB0eXBlb2YgYWMudmFsdWVbaV0gPT09ICdzdHJpbmcnID8gYWMudmFsdWVbaV0gOiBhYy52YWx1ZVtpXVthYy5wYXJhbXMudmFsdWVQcm9wZXJ0eV07XG4gICAgICAgICAgICBpZiAoYVZhbHVlID09PSB2YWx1ZSB8fCBhVmFsdWUgKiAxID09PSB2YWx1ZSAqIDEpIHtcbiAgICAgICAgICAgICAgYWMudmFsdWUuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBhYy51cGRhdGVWYWx1ZXMoKTtcbiAgICAgICAgICBhYy5lbWl0KCdsb2NhbDo6Y2hhbmdlIGF1dG9jb21wbGV0ZUNoYW5nZScsIGFjLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIEZpbmQgUmVsYXRlZCBJdGVtXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFjLml0ZW1zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGl0ZW1WYWx1ZSA9IHR5cGVvZiBhYy5pdGVtc1tpXSA9PT0gJ29iamVjdCcgPyBhYy5pdGVtc1tpXVthYy5wYXJhbXMudmFsdWVQcm9wZXJ0eV0gOiBhYy5pdGVtc1tpXTtcbiAgICAgICAgaWYgKGl0ZW1WYWx1ZSA9PT0gdmFsdWUgfHwgaXRlbVZhbHVlICogMSA9PT0gdmFsdWUgKiAxKSBpdGVtID0gYWMuaXRlbXNbaV07XG4gICAgICB9XG4gICAgICBpZiAoYWMuaW5wdXRUeXBlID09PSAncmFkaW8nKSB7XG4gICAgICAgIGFjLnZhbHVlID0gW2l0ZW1dO1xuICAgICAgfSBlbHNlIGlmIChpbnB1dC5jaGVja2VkKSB7XG4gICAgICAgIGFjLnZhbHVlLnB1c2goaXRlbSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFjLnZhbHVlLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgYVZhbHVlID0gdHlwZW9mIGFjLnZhbHVlW2ldID09PSAnb2JqZWN0JyA/IGFjLnZhbHVlW2ldW2FjLnBhcmFtcy52YWx1ZVByb3BlcnR5XSA6IGFjLnZhbHVlW2ldO1xuICAgICAgICAgIGlmIChhVmFsdWUgPT09IHZhbHVlIHx8IGFWYWx1ZSAqIDEgPT09IHZhbHVlICogMSkge1xuICAgICAgICAgICAgYWMudmFsdWUuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBVcGRhdGUgVmFsdWVzIEJsb2NrXG4gICAgICBhYy51cGRhdGVWYWx1ZXMoKTtcblxuICAgICAgLy8gT24gU2VsZWN0IENhbGxiYWNrXG4gICAgICBpZiAoKChhYy5pbnB1dFR5cGUgPT09ICdyYWRpbycgJiYgaW5wdXQuY2hlY2tlZCkgfHwgYWMuaW5wdXRUeXBlID09PSAnY2hlY2tib3gnKSkge1xuICAgICAgICBhYy5lbWl0KCdsb2NhbDo6Y2hhbmdlIGF1dG9jb21wbGV0ZUNoYW5nZScsIGFjLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gb25IdG1sQ2xpY2soZSkge1xuICAgICAgY29uc3QgJHRhcmdldEVsID0gJChlLnRhcmdldCk7XG4gICAgICBpZiAoJHRhcmdldEVsLmlzKGFjLiRpbnB1dEVsWzBdKSB8fCAoJHRhcmdldEVsLmNsb3Nlc3QoYWMuJGRyb3Bkb3duRWxbMF0pLmxlbmd0aCkpIHJldHVybjtcbiAgICAgIGFjLmNsb3NlKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uT3BlbmVyQ2xpY2soKSB7XG4gICAgICBhYy5vcGVuKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uSW5wdXRGb2N1cygpIHtcbiAgICAgIGFjLm9wZW4oKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25JbnB1dEJsdXIoKSB7XG4gICAgICBpZiAoYWMuJGRyb3Bkb3duRWwuZmluZCgnbGFiZWwuYWN0aXZlLXN0YXRlJykubGVuZ3RoID4gMCkgcmV0dXJuO1xuICAgICAgYWMuY2xvc2UoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25SZXNpemUoKSB7XG4gICAgICBhYy5wb3NpdGlvbkRyb3BEb3duKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25LZXlEb3duKGUpIHtcbiAgICAgIGlmIChhYy5vcGVuZWQgJiYgZS5rZXlDb2RlID09PSAxMykge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGFjLiRpbnB1dEVsLmJsdXIoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gb25Ecm9wZG93bmNsaWNrKCkge1xuICAgICAgY29uc3QgJGNsaWNrZWRFbCA9ICQodGhpcyk7XG4gICAgICBsZXQgY2xpY2tlZEl0ZW07XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFjLml0ZW1zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IGl0ZW1WYWx1ZSA9IHR5cGVvZiBhYy5pdGVtc1tpXSA9PT0gJ29iamVjdCcgPyBhYy5pdGVtc1tpXVthYy5wYXJhbXMudmFsdWVQcm9wZXJ0eV0gOiBhYy5pdGVtc1tpXTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSAkY2xpY2tlZEVsLmF0dHIoJ2RhdGEtdmFsdWUnKTtcbiAgICAgICAgaWYgKGl0ZW1WYWx1ZSA9PT0gdmFsdWUgfHwgaXRlbVZhbHVlICogMSA9PT0gdmFsdWUgKiAxKSB7XG4gICAgICAgICAgY2xpY2tlZEl0ZW0gPSBhYy5pdGVtc1tpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGFjLnBhcmFtcy51cGRhdGVJbnB1dFZhbHVlT25TZWxlY3QpIHtcbiAgICAgICAgYWMuJGlucHV0RWwudmFsKHR5cGVvZiBjbGlja2VkSXRlbSA9PT0gJ29iamVjdCcgPyBjbGlja2VkSXRlbVthYy5wYXJhbXMudmFsdWVQcm9wZXJ0eV0gOiBjbGlja2VkSXRlbSk7XG4gICAgICAgIGFjLiRpbnB1dEVsLnRyaWdnZXIoJ2lucHV0IGNoYW5nZScpO1xuICAgICAgfVxuICAgICAgYWMudmFsdWUgPSBbY2xpY2tlZEl0ZW1dO1xuICAgICAgYWMuZW1pdCgnbG9jYWw6OmNoYW5nZSBhdXRvY29tcGxldGVDaGFuZ2UnLCBbY2xpY2tlZEl0ZW1dKTtcblxuICAgICAgYWMuY2xvc2UoKTtcbiAgICB9XG5cbiAgICBhYy5hdHRhY2hFdmVudHMgPSBmdW5jdGlvbiBhdHRhY2hFdmVudHMoKSB7XG4gICAgICBpZiAoYWMucGFyYW1zLm9wZW5JbiAhPT0gJ2Ryb3Bkb3duJyAmJiBhYy4kb3BlbmVyRWwpIHtcbiAgICAgICAgYWMuJG9wZW5lckVsLm9uKCdjbGljaycsIG9uT3BlbmVyQ2xpY2spO1xuICAgICAgfVxuICAgICAgaWYgKGFjLnBhcmFtcy5vcGVuSW4gPT09ICdkcm9wZG93bicgJiYgYWMuJGlucHV0RWwpIHtcbiAgICAgICAgYWMuJGlucHV0RWwub24oJ2ZvY3VzJywgb25JbnB1dEZvY3VzKTtcbiAgICAgICAgYWMuJGlucHV0RWwub24oJ2lucHV0Jywgb25JbnB1dENoYW5nZSk7XG4gICAgICAgIGlmIChhcHAuZGV2aWNlLmFuZHJvaWQpIHtcbiAgICAgICAgICAkKCdodG1sJykub24oJ2NsaWNrJywgb25IdG1sQ2xpY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFjLiRpbnB1dEVsLm9uKCdibHVyJywgb25JbnB1dEJsdXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhYy5wYXJhbXMudHlwZWFoZWFkKSB7XG4gICAgICAgICAgYWMuJGlucHV0RWwub24oJ2tleWRvd24nLCBvbktleURvd24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBhYy5kZXRhY2hFdmVudHMgPSBmdW5jdGlvbiBhdHRhY2hFdmVudHMoKSB7XG4gICAgICBpZiAoYWMucGFyYW1zLm9wZW5JbiAhPT0gJ2Ryb3Bkb3duJyAmJiBhYy4kb3BlbmVyRWwpIHtcbiAgICAgICAgYWMuJG9wZW5lckVsLm9mZignY2xpY2snLCBvbk9wZW5lckNsaWNrKTtcbiAgICAgIH1cbiAgICAgIGlmIChhYy5wYXJhbXMub3BlbkluID09PSAnZHJvcGRvd24nICYmIGFjLiRpbnB1dEVsKSB7XG4gICAgICAgIGFjLiRpbnB1dEVsLm9mZignZm9jdXMnLCBvbklucHV0Rm9jdXMpO1xuICAgICAgICBhYy4kaW5wdXRFbC5vZmYoJ2lucHV0Jywgb25JbnB1dENoYW5nZSk7XG4gICAgICAgIGlmIChhcHAuZGV2aWNlLmFuZHJvaWQpIHtcbiAgICAgICAgICAkKCdodG1sJykub2ZmKCdjbGljaycsIG9uSHRtbENsaWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhYy4kaW5wdXRFbC5vZmYoJ2JsdXInLCBvbklucHV0Qmx1cik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjLnBhcmFtcy50eXBlYWhlYWQpIHtcbiAgICAgICAgICBhYy4kaW5wdXRFbC5vZmYoJ2tleWRvd24nLCBvbktleURvd24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBhYy5hdHRhY2hEcm9wZG93bkV2ZW50cyA9IGZ1bmN0aW9uIGF0dGFjaERyb3Bkb3duRXZlbnRzKCkge1xuICAgICAgYWMuJGRyb3Bkb3duRWwub24oJ2NsaWNrJywgJ2xhYmVsJywgb25Ecm9wZG93bmNsaWNrKTtcbiAgICAgIGFwcC5vbigncmVzaXplJywgb25SZXNpemUpO1xuICAgIH07XG4gICAgYWMuZGV0YWNoRHJvcGRvd25FdmVudHMgPSBmdW5jdGlvbiBkZXRhY2hEcm9wZG93bkV2ZW50cygpIHtcbiAgICAgIGFjLiRkcm9wZG93bkVsLm9mZignY2xpY2snLCAnbGFiZWwnLCBvbkRyb3Bkb3duY2xpY2spO1xuICAgICAgYXBwLm9mZigncmVzaXplJywgb25SZXNpemUpO1xuICAgIH07XG5cbiAgICBhYy5hdHRhY2hQYWdlRXZlbnRzID0gZnVuY3Rpb24gYXR0YWNoUGFnZUV2ZW50cygpIHtcbiAgICAgIGFjLiRjb250YWluZXJFbC5vbignY2hhbmdlJywgJ2lucHV0W3R5cGU9XCJyYWRpb1wiXSwgaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJywgb25QYWdlSW5wdXRDaGFuZ2UpO1xuICAgICAgaWYgKGFjLnBhcmFtcy5jbG9zZU9uU2VsZWN0ICYmICFhYy5wYXJhbXMubXVsdGlwbGUpIHtcbiAgICAgICAgYWMuJGNvbnRhaW5lckVsLm9uY2UoJ2NsaWNrJywgJy5saXN0IGxhYmVsJywgKCkgPT4ge1xuICAgICAgICAgIFV0aWxzLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgIGFjLmNsb3NlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgYWMuZGV0YWNoUGFnZUV2ZW50cyA9IGZ1bmN0aW9uIGRldGFjaFBhZ2VFdmVudHMoKSB7XG4gICAgICBhYy4kY29udGFpbmVyRWwub2ZmKCdjaGFuZ2UnLCAnaW5wdXRbdHlwZT1cInJhZGlvXCJdLCBpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nLCBvblBhZ2VJbnB1dENoYW5nZSk7XG4gICAgfTtcblxuICAgIC8vIEluc3RhbGwgTW9kdWxlc1xuICAgIGFjLnVzZUluc3RhbmNlTW9kdWxlcygpO1xuXG4gICAgLy8gSW5pdFxuICAgIGFjLmluaXQoKTtcblxuICAgIHJldHVybiBhYztcbiAgfVxuICBwb3NpdGlvbkRyb3BEb3duKCkge1xuICAgIGNvbnN0IGFjID0gdGhpcztcbiAgICBjb25zdCB7ICRpbnB1dEVsLCBhcHAsICRkcm9wZG93bkVsIH0gPSBhYztcblxuICAgIGNvbnN0ICRwYWdlQ29udGVudEVsID0gJGlucHV0RWwucGFyZW50cygnLnBhZ2UtY29udGVudCcpO1xuICAgIGlmICgkcGFnZUNvbnRlbnRFbC5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgIGNvbnN0IGlucHV0T2Zmc2V0ID0gJGlucHV0RWwub2Zmc2V0KCk7XG4gICAgY29uc3QgaW5wdXRPZmZzZXRXaWR0aCA9ICRpbnB1dEVsWzBdLm9mZnNldFdpZHRoO1xuICAgIGNvbnN0IGlucHV0T2Zmc2V0SGVpZ2h0ID0gJGlucHV0RWxbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgIGNvbnN0ICRsaXN0RWwgPSAkaW5wdXRFbC5wYXJlbnRzKCcubGlzdCcpO1xuICAgIGNvbnN0IGxpc3RPZmZzZXQgPSAkbGlzdEVsLm9mZnNldCgpO1xuICAgIGNvbnN0IHBhZGRpbmdCb3R0b20gPSBwYXJzZUludCgkcGFnZUNvbnRlbnRFbC5jc3MoJ3BhZGRpbmctdG9wJyksIDEwKTtcbiAgICBjb25zdCBsaXN0T2Zmc2V0TGVmdCA9ICRsaXN0RWwubGVuZ3RoID4gMCA/IGxpc3RPZmZzZXQubGVmdCAtICRsaXN0RWwucGFyZW50KCkub2Zmc2V0KCkubGVmdCA6IDA7XG4gICAgY29uc3QgaW5wdXRPZmZzZXRMZWZ0ID0gaW5wdXRPZmZzZXQubGVmdCAtICgkbGlzdEVsLmxlbmd0aCA+IDAgPyBsaXN0T2Zmc2V0LmxlZnQgOiAwKTtcbiAgICBjb25zdCBpbnB1dE9mZnNldFRvcCA9IGlucHV0T2Zmc2V0LnRvcCAtICgkcGFnZUNvbnRlbnRFbC5vZmZzZXQoKS50b3AgLSAkcGFnZUNvbnRlbnRFbFswXS5zY3JvbGxUb3ApO1xuICAgIGNvbnN0IG1heEhlaWdodCA9ICRwYWdlQ29udGVudEVsWzBdLnNjcm9sbEhlaWdodCAtIHBhZGRpbmdCb3R0b20gLSAoaW5wdXRPZmZzZXRUb3AgKyAkcGFnZUNvbnRlbnRFbFswXS5zY3JvbGxUb3ApIC0gJGlucHV0RWxbMF0ub2Zmc2V0SGVpZ2h0O1xuXG4gICAgJGRyb3Bkb3duRWwuY3NzKHtcbiAgICAgIGxlZnQ6IGAkeyRsaXN0RWwubGVuZ3RoID4gMCA/IGxpc3RPZmZzZXRMZWZ0IDogaW5wdXRPZmZzZXRMZWZ0fXB4YCxcbiAgICAgIHRvcDogYCR7aW5wdXRPZmZzZXRUb3AgKyAkcGFnZUNvbnRlbnRFbFswXS5zY3JvbGxUb3AgKyBpbnB1dE9mZnNldEhlaWdodH1weGAsXG4gICAgICB3aWR0aDogYCR7JGxpc3RFbC5sZW5ndGggPiAwID8gJGxpc3RFbFswXS5vZmZzZXRXaWR0aCA6IGlucHV0T2Zmc2V0V2lkdGh9cHhgLFxuICAgIH0pO1xuICAgICRkcm9wZG93bkVsLmNoaWxkcmVuKCcuYXV0b2NvbXBsZXRlLWRyb3Bkb3duLWlubmVyJykuY3NzKHtcbiAgICAgIG1heEhlaWdodDogYCR7bWF4SGVpZ2h0fXB4YCxcbiAgICAgIHBhZGRpbmdMZWZ0OiAkbGlzdEVsLmxlbmd0aCA+IDAgJiYgIWFjLnBhcmFtcy5leHBhbmRJbnB1dCA/IGAke2lucHV0T2Zmc2V0TGVmdCAtIChhcHAudGhlbWUgPT09ICdtZCcgPyAxNiA6IDE1KX1weGAgOiAnJyxcbiAgICB9KTtcbiAgfVxuICBmb2N1cygpIHtcbiAgICBjb25zdCBhYyA9IHRoaXM7XG4gICAgYWMuJGNvbnRhaW5lckVsLmZpbmQoJ2lucHV0W3R5cGU9c2VhcmNoXScpLmZvY3VzKCk7XG4gIH1cbiAgc291cmNlKHF1ZXJ5KSB7XG4gICAgY29uc3QgYWMgPSB0aGlzO1xuICAgIGlmICghYWMucGFyYW1zLnNvdXJjZSkgcmV0dXJuO1xuXG4gICAgY29uc3QgeyAkY29udGFpbmVyRWwgfSA9IGFjO1xuXG4gICAgYWMucGFyYW1zLnNvdXJjZS5jYWxsKGFjLCBxdWVyeSwgKGl0ZW1zKSA9PiB7XG4gICAgICBsZXQgaXRlbXNIVE1MID0gJyc7XG4gICAgICBjb25zdCBsaW1pdCA9IGFjLnBhcmFtcy5saW1pdCA/IE1hdGgubWluKGFjLnBhcmFtcy5saW1pdCwgaXRlbXMubGVuZ3RoKSA6IGl0ZW1zLmxlbmd0aDtcbiAgICAgIGFjLml0ZW1zID0gaXRlbXM7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbWl0OyBpICs9IDEpIHtcbiAgICAgICAgbGV0IHNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGl0ZW1WYWx1ZSA9IHR5cGVvZiBpdGVtc1tpXSA9PT0gJ29iamVjdCcgPyBpdGVtc1tpXVthYy5wYXJhbXMudmFsdWVQcm9wZXJ0eV0gOiBpdGVtc1tpXTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBhYy52YWx1ZS5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIGNvbnN0IGFWYWx1ZSA9IHR5cGVvZiBhYy52YWx1ZVtqXSA9PT0gJ29iamVjdCcgPyBhYy52YWx1ZVtqXVthYy5wYXJhbXMudmFsdWVQcm9wZXJ0eV0gOiBhYy52YWx1ZVtqXTtcbiAgICAgICAgICBpZiAoYVZhbHVlID09PSBpdGVtVmFsdWUgfHwgYVZhbHVlICogMSA9PT0gaXRlbVZhbHVlICogMSkgc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGl0ZW1zSFRNTCArPSBhYy5yZW5kZXJJdGVtKHtcbiAgICAgICAgICB2YWx1ZTogaXRlbVZhbHVlLFxuICAgICAgICAgIHRleHQ6IHR5cGVvZiBpdGVtc1tpXSA9PT0gJ29iamVjdCcgPyBpdGVtc1tpXVthYy5wYXJhbXMudGV4dFByb3BlcnR5XSA6IGl0ZW1zW2ldLFxuICAgICAgICAgIGlucHV0VHlwZTogYWMuaW5wdXRUeXBlLFxuICAgICAgICAgIGlkOiBhYy5pZCxcbiAgICAgICAgICBpbnB1dE5hbWU6IGFjLmlucHV0TmFtZSxcbiAgICAgICAgICBzZWxlY3RlZCxcbiAgICAgICAgfSwgaSk7XG4gICAgICB9XG4gICAgICAkY29udGFpbmVyRWwuZmluZCgnLmF1dG9jb21wbGV0ZS1mb3VuZCB1bCcpLmh0bWwoaXRlbXNIVE1MKTtcbiAgICAgIGlmIChpdGVtcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaWYgKHF1ZXJ5Lmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICRjb250YWluZXJFbC5maW5kKCcuYXV0b2NvbXBsZXRlLW5vdC1mb3VuZCcpLnNob3coKTtcbiAgICAgICAgICAkY29udGFpbmVyRWwuZmluZCgnLmF1dG9jb21wbGV0ZS1mb3VuZCwgLmF1dG9jb21wbGV0ZS12YWx1ZXMnKS5oaWRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGNvbnRhaW5lckVsLmZpbmQoJy5hdXRvY29tcGxldGUtdmFsdWVzJykuc2hvdygpO1xuICAgICAgICAgICRjb250YWluZXJFbC5maW5kKCcuYXV0b2NvbXBsZXRlLWZvdW5kLCAuYXV0b2NvbXBsZXRlLW5vdC1mb3VuZCcpLmhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGNvbnRhaW5lckVsLmZpbmQoJy5hdXRvY29tcGxldGUtZm91bmQnKS5zaG93KCk7XG4gICAgICAgICRjb250YWluZXJFbC5maW5kKCcuYXV0b2NvbXBsZXRlLW5vdC1mb3VuZCwgLmF1dG9jb21wbGV0ZS12YWx1ZXMnKS5oaWRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgdXBkYXRlVmFsdWVzKCkge1xuICAgIGNvbnN0IGFjID0gdGhpcztcbiAgICBsZXQgdmFsdWVzSFRNTCA9ICcnO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWMudmFsdWUubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhbHVlc0hUTUwgKz0gYWMucmVuZGVySXRlbSh7XG4gICAgICAgIHZhbHVlOiB0eXBlb2YgYWMudmFsdWVbaV0gPT09ICdvYmplY3QnID8gYWMudmFsdWVbaV1bYWMucGFyYW1zLnZhbHVlUHJvcGVydHldIDogYWMudmFsdWVbaV0sXG4gICAgICAgIHRleHQ6IHR5cGVvZiBhYy52YWx1ZVtpXSA9PT0gJ29iamVjdCcgPyBhYy52YWx1ZVtpXVthYy5wYXJhbXMudGV4dFByb3BlcnR5XSA6IGFjLnZhbHVlW2ldLFxuICAgICAgICBpbnB1dFR5cGU6IGFjLmlucHV0VHlwZSxcbiAgICAgICAgaWQ6IGFjLmlkLFxuICAgICAgICBpbnB1dE5hbWU6IGAke2FjLmlucHV0TmFtZX0tY2hlY2tlZH1gLFxuICAgICAgICBzZWxlY3RlZDogdHJ1ZSxcbiAgICAgIH0sIGkpO1xuICAgIH1cbiAgICBhYy4kY29udGFpbmVyRWwuZmluZCgnLmF1dG9jb21wbGV0ZS12YWx1ZXMgdWwnKS5odG1sKHZhbHVlc0hUTUwpO1xuICB9XG4gIHByZWxvYWRlckhpZGUoKSB7XG4gICAgY29uc3QgYWMgPSB0aGlzO1xuICAgIGlmIChhYy5wYXJhbXMub3BlbkluID09PSAnZHJvcGRvd24nICYmIGFjLiRkcm9wZG93bkVsKSB7XG4gICAgICBhYy4kZHJvcGRvd25FbC5maW5kKCcuYXV0b2NvbXBsZXRlLXByZWxvYWRlcicpLnJlbW92ZUNsYXNzKCdhdXRvY29tcGxldGUtcHJlbG9hZGVyLXZpc2libGUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJCgnLmF1dG9jb21wbGV0ZS1wcmVsb2FkZXInKS5yZW1vdmVDbGFzcygnYXV0b2NvbXBsZXRlLXByZWxvYWRlci12aXNpYmxlJyk7XG4gICAgfVxuICB9XG4gIHByZWxvYWRlclNob3coKSB7XG4gICAgY29uc3QgYWMgPSB0aGlzO1xuICAgIGlmIChhYy5wYXJhbXMub3BlbkluID09PSAnZHJvcGRvd24nICYmIGFjLiRkcm9wZG93bkVsKSB7XG4gICAgICBhYy4kZHJvcGRvd25FbC5maW5kKCcuYXV0b2NvbXBsZXRlLXByZWxvYWRlcicpLmFkZENsYXNzKCdhdXRvY29tcGxldGUtcHJlbG9hZGVyLXZpc2libGUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJCgnLmF1dG9jb21wbGV0ZS1wcmVsb2FkZXInKS5hZGRDbGFzcygnYXV0b2NvbXBsZXRlLXByZWxvYWRlci12aXNpYmxlJyk7XG4gICAgfVxuICB9XG4gIHJlbmRlclByZWxvYWRlcigpIHtcbiAgICBjb25zdCBhYyA9IHRoaXM7XG4gICAgcmV0dXJuIGBcbiAgICAgIDxkaXYgY2xhc3M9XCJhdXRvY29tcGxldGUtcHJlbG9hZGVyIHByZWxvYWRlciAke2FjLnBhcmFtcy5wcmVsb2FkZXJDb2xvciA/IGBjb2xvci0ke2FjLnBhcmFtcy5wcmVsb2FkZXJDb2xvcn1gIDogJyd9XCI+JHthYy5hcHAudGhlbWUgPT09ICdtZCcgPyBgXG4gICAgICAgIDxzcGFuIGNsYXNzPVwicHJlbG9hZGVyLWlubmVyXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJwcmVsb2FkZXItaW5uZXItZ2FwXCI+PC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwicHJlbG9hZGVyLWlubmVyLWxlZnRcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicHJlbG9hZGVyLWlubmVyLWhhbGYtY2lyY2xlXCI+PC9zcGFuPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInByZWxvYWRlci1pbm5lci1yaWdodFwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJwcmVsb2FkZXItaW5uZXItaGFsZi1jaXJjbGVcIj48L3NwYW4+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L3NwYW4+XG4gICAgICBgLnRyaW0oKSA6ICcnfTwvZGl2PlxuICAgIGAudHJpbSgpO1xuICB9XG4gIHJlbmRlclNlYXJjaGJhcigpIHtcbiAgICBjb25zdCBhYyA9IHRoaXM7XG4gICAgaWYgKGFjLnBhcmFtcy5yZW5kZXJTZWFyY2hiYXIpIHJldHVybiBhYy5wYXJhbXMucmVuZGVyU2VhcmNoYmFyLmNhbGwoYWMpO1xuICAgIGNvbnN0IHNlYXJjaGJhckhUTUwgPSBgXG4gICAgICA8Zm9ybSBjbGFzcz1cInNlYXJjaGJhclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwic2VhcmNoYmFyLWlubmVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNlYXJjaGJhci1pbnB1dC13cmFwXCI+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInNlYXJjaFwiIHBsYWNlaG9sZGVyPVwiJHthYy5wYXJhbXMuc2VhcmNoYmFyUGxhY2Vob2xkZXJ9XCIvPlxuICAgICAgICAgICAgPGkgY2xhc3M9XCJzZWFyY2hiYXItaWNvblwiPjwvaT5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaW5wdXQtY2xlYXItYnV0dG9uXCI+PC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwic2VhcmNoYmFyLWRpc2FibGUtYnV0dG9uXCI+JHthYy5wYXJhbXMuc2VhcmNoYmFyRGlzYWJsZVRleHR9PC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZm9ybT5cbiAgICBgLnRyaW0oKTtcbiAgICByZXR1cm4gc2VhcmNoYmFySFRNTDtcbiAgfVxuICByZW5kZXJJdGVtKGl0ZW0sIGluZGV4KSB7XG4gICAgY29uc3QgYWMgPSB0aGlzO1xuICAgIGlmIChhYy5wYXJhbXMucmVuZGVySXRlbSkgcmV0dXJuIGFjLnBhcmFtcy5yZW5kZXJJdGVtLmNhbGwoYWMsIGl0ZW0sIGluZGV4KTtcbiAgICBsZXQgaXRlbUh0bWw7XG4gICAgaWYgKGFjLnBhcmFtcy5vcGVuSW4gIT09ICdkcm9wZG93bicpIHtcbiAgICAgIGl0ZW1IdG1sID0gYFxuICAgICAgICA8bGk+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiaXRlbS0ke2l0ZW0uaW5wdXRUeXBlfSBpdGVtLWNvbnRlbnRcIj5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiJHtpdGVtLmlucHV0VHlwZX1cIiBuYW1lPVwiJHtpdGVtLmlucHV0TmFtZX1cIiB2YWx1ZT1cIiR7aXRlbS52YWx1ZX1cIiAke2l0ZW0uc2VsZWN0ZWQgPyAnY2hlY2tlZCcgOiAnJ30+XG4gICAgICAgICAgICA8aSBjbGFzcz1cImljb24gaWNvbi0ke2l0ZW0uaW5wdXRUeXBlfVwiPjwvaT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpdGVtLWlubmVyXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpdGVtLXRpdGxlXCI+JHtpdGVtLnRleHR9PC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2xpPlxuICAgICAgYDtcbiAgICB9IGVsc2UgaWYgKCFpdGVtLnBsYWNlaG9sZGVyKSB7XG4gICAgICAvLyBEcm9wZG93blxuICAgICAgaXRlbUh0bWwgPSBgXG4gICAgICAgIDxsaT5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJpdGVtLXJhZGlvIGl0ZW0tY29udGVudFwiIGRhdGEtdmFsdWU9XCIke2l0ZW0udmFsdWV9XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaXRlbS1pbm5lclwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaXRlbS10aXRsZVwiPiR7aXRlbS50ZXh0fTwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPC9saT5cbiAgICAgIGA7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIERyb3B3ZG93biBwbGFjZWhvbGRlclxuICAgICAgaXRlbUh0bWwgPSBgXG4gICAgICAgIDxsaSBjbGFzcz1cImF1dG9jb21wbGV0ZS1kcm9wZG93bi1wbGFjZWhvbGRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJpdGVtLWNvbnRlbnRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpdGVtLWlubmVyXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpdGVtLXRpdGxlXCI+JHtpdGVtLnRleHR9PC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2xpPlxuICAgICAgYDtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW1IdG1sLnRyaW0oKTtcbiAgfVxuXG4gIHJlbmRlck5hdmJhcigpIHtcbiAgICBjb25zdCBhYyA9IHRoaXM7XG4gICAgaWYgKGFjLnBhcmFtcy5yZW5kZXJOYXZiYXIpIHJldHVybiBhYy5wYXJhbXMucmVuZGVyTmF2YmFyLmNhbGwoYWMpO1xuICAgIGxldCBwYWdlVGl0bGUgPSBhYy5wYXJhbXMucGFnZVRpdGxlO1xuICAgIGlmICh0eXBlb2YgcGFnZVRpdGxlID09PSAndW5kZWZpbmVkJyAmJiBhYy4kb3BlbmVyRWwgJiYgYWMuJG9wZW5lckVsLmxlbmd0aCkge1xuICAgICAgcGFnZVRpdGxlID0gYWMuJG9wZW5lckVsLmZpbmQoJy5pdGVtLXRpdGxlJykudGV4dCgpLnRyaW0oKTtcbiAgICB9XG4gICAgY29uc3QgbmF2YmFySHRtbCA9IGBcbiAgICAgIDxkaXYgY2xhc3M9XCJuYXZiYXIgJHthYy5wYXJhbXMubmF2YmFyQ29sb3JUaGVtZSA/IGBjb2xvci10aGVtZS0ke2FjLnBhcmFtcy5uYXZiYXJDb2xvclRoZW1lfWAgOiAnJ31cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm5hdmJhci1pbm5lciAke2FjLnBhcmFtcy5uYXZiYXJDb2xvclRoZW1lID8gYGNvbG9yLXRoZW1lLSR7YWMucGFyYW1zLm5hdmJhckNvbG9yVGhlbWV9YCA6ICcnfVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJsZWZ0IHNsaWRpbmdcIj5cbiAgICAgICAgICAgIDxhIGhyZWY9XCIjXCIgY2xhc3M9XCJsaW5rICR7YWMucGFyYW1zLm9wZW5JbiA9PT0gJ3BhZ2UnID8gJ2JhY2snIDogJ3BvcHVwLWNsb3NlJ31cIj5cbiAgICAgICAgICAgICAgPGkgY2xhc3M9XCJpY29uIGljb24tYmFja1wiPjwvaT5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpb3Mtb25seVwiPiR7YWMucGFyYW1zLm9wZW5JbiA9PT0gJ3BhZ2UnID8gYWMucGFyYW1zLnBhZ2VCYWNrTGlua1RleHQgOiBhYy5wYXJhbXMucG9wdXBDbG9zZUxpbmtUZXh0fTwvc3Bhbj5cbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAke3BhZ2VUaXRsZSA/IGA8ZGl2IGNsYXNzPVwidGl0bGUgc2xpZGluZ1wiPiR7cGFnZVRpdGxlfTwvZGl2PmAgOiAnJ31cbiAgICAgICAgICAke2FjLnBhcmFtcy5wcmVsb2FkZXIgPyBgXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInJpZ2h0XCI+XG4gICAgICAgICAgICAke2FjLnJlbmRlclByZWxvYWRlcigpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIGAgOiAnJ31cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3VibmF2YmFyIHNsaWRpbmdcIj4ke2FjLnJlbmRlclNlYXJjaGJhcigpfTwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIGAudHJpbSgpO1xuICAgIHJldHVybiBuYXZiYXJIdG1sO1xuICB9XG4gIHJlbmRlckRyb3Bkb3duKCkge1xuICAgIGNvbnN0IGFjID0gdGhpcztcbiAgICBpZiAoYWMucGFyYW1zLnJlbmRlckRyb3Bkb3duKSByZXR1cm4gYWMucGFyYW1zLnJlbmRlckRyb3Bkb3duLmNhbGwoYWMsIGFjLml0ZW1zKTtcbiAgICBjb25zdCBkcm9wZG93bkh0bWwgPSBgXG4gICAgICA8ZGl2IGNsYXNzPVwiYXV0b2NvbXBsZXRlLWRyb3Bkb3duXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJhdXRvY29tcGxldGUtZHJvcGRvd24taW5uZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibGlzdFwiPlxuICAgICAgICAgICAgPHVsPjwvdWw+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICAke2FjLnBhcmFtcy5wcmVsb2FkZXIgPyBhYy5yZW5kZXJQcmVsb2FkZXIoKSA6ICcnfVxuICAgICAgPC9kaXY+XG4gICAgYC50cmltKCk7XG4gICAgcmV0dXJuIGRyb3Bkb3duSHRtbDtcbiAgfVxuICByZW5kZXJQYWdlKCkge1xuICAgIGNvbnN0IGFjID0gdGhpcztcbiAgICBpZiAoYWMucGFyYW1zLnJlbmRlclBhZ2UpIHJldHVybiBhYy5wYXJhbXMucmVuZGVyUGFnZS5jYWxsKGFjLCBhYy5pdGVtcyk7XG5cbiAgICBjb25zdCBwYWdlSHRtbCA9IGBcbiAgICAgIDxkaXYgY2xhc3M9XCJwYWdlIHBhZ2Utd2l0aC1zdWJuYXZiYXIgYXV0b2NvbXBsZXRlLXBhZ2VcIiBkYXRhLW5hbWU9XCJhdXRvY29tcGxldGUtcGFnZVwiPlxuICAgICAgICAke2FjLnJlbmRlck5hdmJhcigpfVxuICAgICAgICA8ZGl2IGNsYXNzPVwic2VhcmNoYmFyLWJhY2tkcm9wXCI+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJwYWdlLWNvbnRlbnRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibGlzdCBhdXRvY29tcGxldGUtbGlzdCBhdXRvY29tcGxldGUtZm91bmQgYXV0b2NvbXBsZXRlLWxpc3QtJHthYy5pZH0gJHthYy5wYXJhbXMuZm9ybUNvbG9yVGhlbWUgPyBgY29sb3ItdGhlbWUtJHthYy5wYXJhbXMuZm9ybUNvbG9yVGhlbWV9YCA6ICcnfVwiPlxuICAgICAgICAgICAgPHVsPjwvdWw+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImxpc3QgYXV0b2NvbXBsZXRlLW5vdC1mb3VuZFwiPlxuICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJpdGVtLWNvbnRlbnRcIj48ZGl2IGNsYXNzPVwiaXRlbS1pbm5lclwiPjxkaXYgY2xhc3M9XCJpdGVtLXRpdGxlXCI+JHthYy5wYXJhbXMubm90Rm91bmRUZXh0fTwvZGl2PjwvZGl2PjwvbGk+XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJsaXN0IGF1dG9jb21wbGV0ZS12YWx1ZXNcIj5cbiAgICAgICAgICAgIDx1bD48L3VsPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIGAudHJpbSgpO1xuICAgIHJldHVybiBwYWdlSHRtbDtcbiAgfVxuICByZW5kZXJQb3B1cCgpIHtcbiAgICBjb25zdCBhYyA9IHRoaXM7XG4gICAgaWYgKGFjLnBhcmFtcy5yZW5kZXJQb3B1cCkgcmV0dXJuIGFjLnBhcmFtcy5yZW5kZXJQb3B1cC5jYWxsKGFjLCBhYy5pdGVtcyk7XG4gICAgY29uc3QgcG9wdXBIdG1sID0gYFxuICAgICAgPGRpdiBjbGFzcz1cInBvcHVwIGF1dG9jb21wbGV0ZS1wb3B1cFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidmlld1wiPlxuICAgICAgICAgICR7YWMucmVuZGVyUGFnZSgpfTtcbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICBgLnRyaW0oKTtcbiAgICByZXR1cm4gcG9wdXBIdG1sO1xuICB9XG4gIG9uT3Blbih0eXBlLCBjb250YWluZXJFbCkge1xuICAgIGNvbnN0IGFjID0gdGhpcztcbiAgICBjb25zdCBhcHAgPSBhYy5hcHA7XG4gICAgY29uc3QgJGNvbnRhaW5lckVsID0gJChjb250YWluZXJFbCk7XG4gICAgYWMuJGNvbnRhaW5lckVsID0gJGNvbnRhaW5lckVsO1xuICAgIGFjLm9wZW5lZEluID0gdHlwZTtcbiAgICBhYy5vcGVuZWQgPSB0cnVlO1xuXG4gICAgaWYgKGFjLnBhcmFtcy5vcGVuSW4gPT09ICdkcm9wZG93bicpIHtcbiAgICAgIGFjLmF0dGFjaERyb3Bkb3duRXZlbnRzKCk7XG5cbiAgICAgIGFjLiRkcm9wZG93bkVsLmFkZENsYXNzKCdhdXRvY29tcGxldGUtZHJvcGRvd24taW4nKTtcbiAgICAgIGFjLiRpbnB1dEVsLnRyaWdnZXIoJ2lucHV0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEluaXQgU0JcbiAgICAgIGxldCAkc2VhcmNoYmFyRWwgPSAkY29udGFpbmVyRWwuZmluZCgnLnNlYXJjaGJhcicpO1xuICAgICAgaWYgKGFjLnBhcmFtcy5vcGVuSW4gPT09ICdwYWdlJyAmJiBhcHAudGhlbWUgPT09ICdpb3MnICYmICRzZWFyY2hiYXJFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgJHNlYXJjaGJhckVsID0gJChhcHAubmF2YmFyLmdldEVsQnlQYWdlKCRjb250YWluZXJFbCkpLmZpbmQoJy5zZWFyY2hiYXInKTtcbiAgICAgIH1cbiAgICAgIGFjLnNlYXJjaGJhciA9IGFwcC5zZWFyY2hiYXIuY3JlYXRlKHtcbiAgICAgICAgZWw6ICRzZWFyY2hiYXJFbCxcbiAgICAgICAgYmFja2Ryb3BFbDogJGNvbnRhaW5lckVsLmZpbmQoJy5zZWFyY2hiYXItYmFja2Ryb3AnKSxcbiAgICAgICAgY3VzdG9tU2VhcmNoOiB0cnVlLFxuICAgICAgICBvbjoge1xuICAgICAgICAgIHNlYXJjaGJhclNlYXJjaChxdWVyeSkge1xuICAgICAgICAgICAgaWYgKHF1ZXJ5Lmxlbmd0aCA9PT0gMCAmJiBhYy5zZWFyY2hiYXIuZW5hYmxlZCkge1xuICAgICAgICAgICAgICBhYy5zZWFyY2hiYXIuYmFja2Ryb3BTaG93KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhYy5zZWFyY2hiYXIuYmFja2Ryb3BIaWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhYy5zb3VyY2UocXVlcnkpO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgLy8gQXR0YWNoIHBhZ2UgZXZlbnRzXG4gICAgICBhYy5hdHRhY2hQYWdlRXZlbnRzKCk7XG5cbiAgICAgIC8vIFVwZGF0ZSBWYWx1ZXMgT24gUGFnZSBJbml0XG4gICAgICBhYy51cGRhdGVWYWx1ZXMoKTtcblxuICAgICAgLy8gU291cmNlIG9uIGxvYWRcbiAgICAgIGlmIChhYy5wYXJhbXMucmVxdWVzdFNvdXJjZU9uT3BlbikgYWMuc291cmNlKCcnKTtcbiAgICB9XG5cbiAgICBhYy5lbWl0KCdsb2NhbDo6b3BlbiBhdXRvY29tcGxldGVPcGVuJywgYWMpO1xuICB9XG4gIG9uT3BlbmVkKCkge1xuICAgIGNvbnN0IGFjID0gdGhpcztcbiAgICBpZiAoYWMucGFyYW1zLm9wZW5JbiAhPT0gJ2Ryb3Bkb3duJyAmJiBhYy5wYXJhbXMuYXV0b0ZvY3VzKSB7XG4gICAgICBhYy5hdXRvRm9jdXMoKTtcbiAgICB9XG4gICAgYWMuZW1pdCgnbG9jYWw6Om9wZW5lZCBhdXRvY29tcGxldGVPcGVuZWQnLCBhYyk7XG4gIH1cbiAgb25DbG9zZSgpIHtcbiAgICBjb25zdCBhYyA9IHRoaXM7XG4gICAgaWYgKGFjLmRlc3Ryb3llZCkgcmV0dXJuO1xuXG4gICAgLy8gRGVzdHJveSBTQlxuICAgIGlmIChhYy5zZWFyY2hiYXIgJiYgYWMuc2VhcmNoYmFyLmRlc3Ryb3kpIHtcbiAgICAgIGFjLnNlYXJjaGJhci5kZXN0cm95KCk7XG4gICAgICBhYy5zZWFyY2hiYXIgPSBudWxsO1xuICAgICAgZGVsZXRlIGFjLnNlYXJjaGJhcjtcbiAgICB9XG5cbiAgICBpZiAoYWMucGFyYW1zLm9wZW5JbiA9PT0gJ2Ryb3Bkb3duJykge1xuICAgICAgYWMuZGV0YWNoRHJvcGRvd25FdmVudHMoKTtcbiAgICAgIGFjLiRkcm9wZG93bkVsLnJlbW92ZUNsYXNzKCdhdXRvY29tcGxldGUtZHJvcGRvd24taW4nKS5yZW1vdmUoKTtcbiAgICAgIGFjLiRpbnB1dEVsLnBhcmVudHMoJy5pdGVtLWNvbnRlbnQtZHJvcGRvd24tZXhwYW5kZWQnKS5yZW1vdmVDbGFzcygnaXRlbS1jb250ZW50LWRyb3Bkb3duLWV4cGFuZGVkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjLmRldGFjaFBhZ2VFdmVudHMoKTtcbiAgICB9XG5cbiAgICBhYy5lbWl0KCdsb2NhbDo6Y2xvc2UgYXV0b2NvbXBsZXRlQ2xvc2UnLCBhYyk7XG4gIH1cbiAgb25DbG9zZWQoKSB7XG4gICAgY29uc3QgYWMgPSB0aGlzO1xuICAgIGlmIChhYy5kZXN0cm95ZWQpIHJldHVybjtcbiAgICBhYy5vcGVuZWQgPSBmYWxzZTtcbiAgICBhYy4kY29udGFpbmVyRWwgPSBudWxsO1xuICAgIGRlbGV0ZSBhYy4kY29udGFpbmVyRWw7XG5cbiAgICBhYy5lbWl0KCdsb2NhbDo6Y2xvc2VkIGF1dG9jb21wbGV0ZUNsb3NlZCcsIGFjKTtcbiAgfVxuICBvcGVuUGFnZSgpIHtcbiAgICBjb25zdCBhYyA9IHRoaXM7XG4gICAgaWYgKGFjLm9wZW5lZCkgcmV0dXJuIGFjO1xuICAgIGNvbnN0IHBhZ2VIdG1sID0gYWMucmVuZGVyUGFnZSgpO1xuICAgIGFjLnZpZXcucm91dGVyLm5hdmlnYXRlKGFjLnVybCwge1xuICAgICAgY3JlYXRlUm91dGU6IHtcbiAgICAgICAgY29udGVudDogcGFnZUh0bWwsXG4gICAgICAgIHBhdGg6IGFjLnVybCxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGFuaW1hdGU6IGFjLnBhcmFtcy5hbmltYXRlLFxuICAgICAgICAgIHBhZ2VFdmVudHM6IHtcbiAgICAgICAgICAgIHBhZ2VCZWZvcmVJbihlLCBwYWdlKSB7XG4gICAgICAgICAgICAgIGFjLm9uT3BlbigncGFnZScsIHBhZ2UuZWwpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhZ2VBZnRlckluKGUsIHBhZ2UpIHtcbiAgICAgICAgICAgICAgYWMub25PcGVuZWQoJ3BhZ2UnLCBwYWdlLmVsKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYWdlQmVmb3JlT3V0KGUsIHBhZ2UpIHtcbiAgICAgICAgICAgICAgYWMub25DbG9zZSgncGFnZScsIHBhZ2UuZWwpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhZ2VBZnRlck91dChlLCBwYWdlKSB7XG4gICAgICAgICAgICAgIGFjLm9uQ2xvc2VkKCdwYWdlJywgcGFnZS5lbCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiBhYztcbiAgfVxuICBvcGVuUG9wdXAoKSB7XG4gICAgY29uc3QgYWMgPSB0aGlzO1xuICAgIGlmIChhYy5vcGVuZWQpIHJldHVybiBhYztcbiAgICBjb25zdCBwb3B1cEh0bWwgPSBhYy5yZW5kZXJQb3B1cCgpO1xuXG4gICAgY29uc3QgcG9wdXBQYXJhbXMgPSB7XG4gICAgICBjb250ZW50OiBwb3B1cEh0bWwsXG4gICAgICBhbmltYXRlOiBhYy5wYXJhbXMuYW5pbWF0ZSxcbiAgICAgIG9uOiB7XG4gICAgICAgIHBvcHVwT3Blbihwb3B1cCkge1xuICAgICAgICAgIGFjLm9uT3BlbigncG9wdXAnLCBwb3B1cC5lbCk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvcHVwT3BlbmVkKHBvcHVwKSB7XG4gICAgICAgICAgYWMub25PcGVuZWQoJ3BvcHVwJywgcG9wdXAuZWwpO1xuICAgICAgICB9LFxuICAgICAgICBwb3B1cENsb3NlKHBvcHVwKSB7XG4gICAgICAgICAgYWMub25DbG9zZSgncG9wdXAnLCBwb3B1cC5lbCk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvcHVwQ2xvc2VkKHBvcHVwKSB7XG4gICAgICAgICAgYWMub25DbG9zZWQoJ3BvcHVwJywgcG9wdXAuZWwpO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgaWYgKGFjLnBhcmFtcy5yb3V0YWJsZU1vZGFscykge1xuICAgICAgYWMudmlldy5yb3V0ZXIubmF2aWdhdGUoYWMudXJsLCB7XG4gICAgICAgIGNyZWF0ZVJvdXRlOiB7XG4gICAgICAgICAgcGF0aDogYWMudXJsLFxuICAgICAgICAgIHBvcHVwOiBwb3B1cFBhcmFtcyxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBhYy5tb2RhbCA9IGFjLmFwcC5wb3B1cC5jcmVhdGUocG9wdXBQYXJhbXMpLm9wZW4oYWMucGFyYW1zLmFuaW1hdGUpO1xuICAgIH1cbiAgICByZXR1cm4gYWM7XG4gIH1cbiAgb3BlbkRyb3Bkb3duKCkge1xuICAgIGNvbnN0IGFjID0gdGhpcztcblxuICAgIGlmICghYWMuJGRyb3Bkb3duRWwpIHtcbiAgICAgIGFjLiRkcm9wZG93bkVsID0gJChhYy5yZW5kZXJEcm9wZG93bigpKTtcbiAgICB9XG4gICAgY29uc3QgJGxpc3RFbCA9IGFjLiRpbnB1dEVsLnBhcmVudHMoJy5saXN0Jyk7XG4gICAgaWYgKCRsaXN0RWwubGVuZ3RoICYmIGFjLiRpbnB1dEVsLnBhcmVudHMoJy5pdGVtLWNvbnRlbnQnKS5sZW5ndGggPiAwICYmIGFjLnBhcmFtcy5leHBhbmRJbnB1dCkge1xuICAgICAgYWMuJGlucHV0RWwucGFyZW50cygnLml0ZW0tY29udGVudCcpLmFkZENsYXNzKCdpdGVtLWNvbnRlbnQtZHJvcGRvd24tZXhwYW5kZWQnKTtcbiAgICB9XG4gICAgYWMucG9zaXRpb25Ecm9wRG93bigpO1xuICAgIGNvbnN0ICRwYWdlQ29udGVudEVsID0gYWMuJGlucHV0RWwucGFyZW50cygnLnBhZ2UtY29udGVudCcpO1xuICAgIGlmIChhYy5wYXJhbXMuZHJvcGRvd25Db250YWluZXJFbCkge1xuICAgICAgJChhYy5wYXJhbXMuZHJvcGRvd25Db250YWluZXJFbCkuYXBwZW5kKGFjLiRkcm9wZG93bkVsKTtcbiAgICB9IGVsc2UgaWYgKCRwYWdlQ29udGVudEVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgYWMuJGRyb3Bkb3duRWwuaW5zZXJ0QWZ0ZXIoYWMuJGlucHV0RWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkcGFnZUNvbnRlbnRFbC5hcHBlbmQoYWMuJGRyb3Bkb3duRWwpO1xuICAgIH1cbiAgICBhYy5vbk9wZW4oJ2Ryb3Bkb3duJywgYWMuJGRyb3Bkb3duRWwpO1xuICAgIGFjLm9uT3BlbmVkKCdkcm9wZG93bicsIGFjLiRkcm9wZG93bkVsKTtcbiAgfVxuICBvcGVuKCkge1xuICAgIGNvbnN0IGFjID0gdGhpcztcbiAgICBpZiAoYWMub3BlbmVkKSByZXR1cm4gYWM7XG4gICAgY29uc3Qgb3BlbkluID0gYWMucGFyYW1zLm9wZW5JbjtcbiAgICBhY1tgb3BlbiR7b3BlbkluLnNwbGl0KCcnKS5tYXAoKGVsLCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGluZGV4ID09PSAwKSByZXR1cm4gZWwudG9VcHBlckNhc2UoKTtcbiAgICAgIHJldHVybiBlbDtcbiAgICB9KS5qb2luKCcnKX1gXSgpO1xuICAgIHJldHVybiBhYztcbiAgfVxuICBjbG9zZSgpIHtcbiAgICBjb25zdCBhYyA9IHRoaXM7XG4gICAgaWYgKCFhYy5vcGVuZWQpIHJldHVybiBhYztcbiAgICBpZiAoYWMucGFyYW1zLm9wZW5JbiA9PT0gJ2Ryb3Bkb3duJykge1xuICAgICAgYWMub25DbG9zZSgpO1xuICAgICAgYWMub25DbG9zZWQoKTtcbiAgICB9IGVsc2UgaWYgKGFjLnBhcmFtcy5yb3V0YWJsZU1vZGFscyB8fCBhYy5vcGVuZWRJbiA9PT0gJ3BhZ2UnKSB7XG4gICAgICBhYy52aWV3LnJvdXRlci5iYWNrKHsgYW5pbWF0ZTogYWMucGFyYW1zLmFuaW1hdGUgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjLm1vZGFsLm9uY2UoJ21vZGFsQ2xvc2VkJywgKCkgPT4ge1xuICAgICAgICBVdGlscy5uZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgYWMubW9kYWwuZGVzdHJveSgpO1xuICAgICAgICAgIGRlbGV0ZSBhYy5tb2RhbDtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGFjLm1vZGFsLmNsb3NlKCk7XG4gICAgfVxuICAgIHJldHVybiBhYztcbiAgfVxuICBpbml0KCkge1xuICAgIGNvbnN0IGFjID0gdGhpcztcbiAgICBhYy5hdHRhY2hFdmVudHMoKTtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIGNvbnN0IGFjID0gdGhpcztcbiAgICBhYy5lbWl0KCdsb2NhbDo6YmVmb3JlRGVzdHJveSBhdXRvY29tcGxldGVCZWZvcmVEZXN0cm95JywgYWMpO1xuICAgIGFjLmRldGFjaEV2ZW50cygpO1xuICAgIGlmIChhYy4kaW5wdXRFbCAmJiBhYy4kaW5wdXRFbFswXSkge1xuICAgICAgZGVsZXRlIGFjLiRpbnB1dEVsWzBdLmY3QXV0b2NvbXBsZXRlO1xuICAgIH1cbiAgICBpZiAoYWMuJG9wZW5lckVsICYmIGFjLiRvcGVuZXJFbFswXSkge1xuICAgICAgZGVsZXRlIGFjLiRvcGVuZXJFbFswXS5mN0F1dG9jb21wbGV0ZTtcbiAgICB9XG4gICAgVXRpbHMuZGVsZXRlUHJvcHMoYWMpO1xuICAgIGFjLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cbn1cblxudmFyIGF1dG9jb21wbGV0ZSA9IHtcbiAgbmFtZTogJ2F1dG9jb21wbGV0ZScsXG4gIHBhcmFtczoge1xuICAgIGF1dG9jb21wbGV0ZToge1xuICAgICAgb3BlbmVyRWw6IHVuZGVmaW5lZCxcbiAgICAgIGlucHV0RWw6IHVuZGVmaW5lZCxcbiAgICAgIHZpZXc6IHVuZGVmaW5lZCxcblxuICAgICAgLy8gRHJvcERvd25cbiAgICAgIGRyb3Bkb3duQ29udGFpbmVyRWw6IHVuZGVmaW5lZCxcbiAgICAgIGRyb3Bkb3duUGxhY2Vob2xkZXJUZXh0OiB1bmRlZmluZWQsXG4gICAgICB0eXBlYWhlYWQ6IGZhbHNlLFxuICAgICAgaGlnaGxpZ2h0TWF0Y2hlczogdHJ1ZSxcbiAgICAgIGV4cGFuZElucHV0OiBmYWxzZSxcbiAgICAgIHVwZGF0ZUlucHV0VmFsdWVPblNlbGVjdDogdHJ1ZSxcblxuICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgIG11bHRpcGxlOiBmYWxzZSxcblxuICAgICAgc291cmNlOiB1bmRlZmluZWQsXG4gICAgICBsaW1pdDogdW5kZWZpbmVkLFxuICAgICAgdmFsdWVQcm9wZXJ0eTogJ2lkJyxcbiAgICAgIHRleHRQcm9wZXJ0eTogJ3RleHQnLFxuXG4gICAgICBvcGVuSW46ICdwYWdlJywgLy8gb3IgJ3BvcHVwJyBvciAnZHJvcGRvd24nXG4gICAgICBwYWdlQmFja0xpbmtUZXh0OiAnQmFjaycsXG4gICAgICBwb3B1cENsb3NlTGlua1RleHQ6ICdDbG9zZScsXG4gICAgICBzZWFyY2hiYXJQbGFjZWhvbGRlcjogJ1NlYXJjaC4uLicsXG4gICAgICBzZWFyY2hiYXJEaXNhYmxlVGV4dDogJ0NhbmNlbCcsXG5cbiAgICAgIGFuaW1hdGU6IHRydWUsXG5cbiAgICAgIGF1dG9Gb2N1czogZmFsc2UsXG4gICAgICBjbG9zZU9uU2VsZWN0OiBmYWxzZSxcbiAgICAgIG5vdEZvdW5kVGV4dDogJ05vdGhpbmcgZm91bmQnLFxuICAgICAgcmVxdWVzdFNvdXJjZU9uT3BlbjogZmFsc2UsXG5cbiAgICAgIC8vIFByZWxvYWRlclxuICAgICAgcHJlbG9hZGVyQ29sb3I6IHVuZGVmaW5lZCxcbiAgICAgIHByZWxvYWRlcjogZmFsc2UsXG5cbiAgICAgIC8vIENvbG9yc1xuICAgICAgZm9ybUNvbG9yVGhlbWU6IHVuZGVmaW5lZCxcbiAgICAgIG5hdmJhckNvbG9yVGhlbWU6IHVuZGVmaW5lZCxcblxuICAgICAgLy8gUm91dGluZ1xuICAgICAgcm91dGFibGVNb2RhbHM6IHRydWUsXG4gICAgICB1cmw6ICdzZWxlY3QnLFxuXG4gICAgICAvLyBDdXN0b20gcmVuZGVyIGZ1bmN0aW9uc1xuICAgICAgcmVuZGVyRHJvcGRvd246IHVuZGVmaW5lZCxcbiAgICAgIHJlbmRlclBhZ2U6IHVuZGVmaW5lZCxcbiAgICAgIHJlbmRlclBvcHVwOiB1bmRlZmluZWQsXG4gICAgICByZW5kZXJJdGVtczogdW5kZWZpbmVkLFxuICAgICAgcmVuZGVySXRlbTogdW5kZWZpbmVkLFxuICAgICAgcmVuZGVyU2VhcmNoYmFyOiB1bmRlZmluZWQsXG4gICAgICByZW5kZXJOYXZiYXI6IHVuZGVmaW5lZCxcblxuICAgIH0sXG4gIH0sXG4gIHN0YXRpYzoge1xuICAgIEF1dG9jb21wbGV0ZSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXM7XG4gICAgYXBwLmF1dG9jb21wbGV0ZSA9IFV0aWxzLmV4dGVuZChcbiAgICAgIENvbnN0cnVjdG9yTWV0aG9kcyh7XG4gICAgICAgIGRlZmF1bHRTZWxlY3RvcjogdW5kZWZpbmVkLFxuICAgICAgICBjb25zdHJ1Y3RvcjogQXV0b2NvbXBsZXRlLFxuICAgICAgICBhcHAsXG4gICAgICAgIGRvbVByb3A6ICdmN0F1dG9jb21wbGV0ZScsXG4gICAgICB9KSxcbiAgICAgIHtcbiAgICAgICAgb3BlbihhdXRvY29tcGxldGVFbCkge1xuICAgICAgICAgIGNvbnN0IGFjID0gYXBwLmF1dG9jb21wbGV0ZS5nZXQoYXV0b2NvbXBsZXRlRWwpO1xuICAgICAgICAgIGlmIChhYyAmJiBhYy5vcGVuKSByZXR1cm4gYWMub3BlbigpO1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGNsb3NlKGF1dG9jb21wbGV0ZUVsKSB7XG4gICAgICAgICAgY29uc3QgYWMgPSBhcHAuYXV0b2NvbXBsZXRlLmdldChhdXRvY29tcGxldGVFbCk7XG4gICAgICAgICAgaWYgKGFjICYmIGFjLmNsb3NlKSByZXR1cm4gYWMuY2xvc2UoKTtcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9LFxuICAgICAgfVxuICAgICk7XG4gIH0sXG59O1xuXG4vLyBGNyBDbGFzc1xuLy8gSW1wb3J0IENvcmUgTW9kdWxlc1xuLy8gQ29yZSBDb21wb25lbnRzXG4vLyBUZW1wbGF0ZTdcbmlmICh0eXBlb2YgdDcgIT09ICd1bmRlZmluZWQnKSB7XG4gIEZyYW1ld29yazcucHJvdG90eXBlLnQ3ID0gdDc7XG4gIGlmICghd2luZG93LlRlbXBsYXRlNykgd2luZG93LlRlbXBsYXRlNyA9IHQ3O1xufVxuXG4vLyBEb203XG5pZiAodHlwZW9mICQgIT09ICd1bmRlZmluZWQnKSB7XG4gIEZyYW1ld29yazcucHJvdG90eXBlLiQgPSAkO1xuICBpZiAoIXdpbmRvdy5Eb203KSB3aW5kb3cuRG9tNyA9ICQ7XG59XG5cbi8vIEluc3RhbGwgTW9kdWxlcyAmIENvbXBvbmVudHNcbkZyYW1ld29yazdcbiAgLy8gQ29yZSBNb2R1bGVzXG4gIC51c2UoVXRpbHMkMilcbiAgLnVzZShTdG9yYWdlJDEpXG4gIC51c2UoU3VwcG9ydClcbiAgLnVzZShEZXZpY2UkMilcbiAgLnVzZShSZXNpemUpXG4gIC51c2UoVG91Y2gpXG4gIC51c2UoUm91dGVyKVxuICAudXNlKEhpc3RvcnkkMilcbiAgLnVzZShDbGlja3MpXG4gIC8vIENvcmUgQ29tcG9uZW50c1xuICAudXNlKFN0YXR1c2JhciQxKVxuICAudXNlKFZpZXckMilcbiAgLnVzZShOYXZiYXIkMSlcbiAgLnVzZShUb29sYmFyJDEpXG4gIC51c2UoU3VibmF2YmFyKVxuICAudXNlKFRvdWNoUmlwcGxlKTtcblxuZXhwb3J0IHsgRnJhbWV3b3JrNywgbW9kYWwgYXMgTW9kYWwsIGRpYWxvZyBhcyBEaWFsb2csIHBvcHVwIGFzIFBvcHVwLCBsb2dpblNjcmVlbiBhcyBMb2dpblNjcmVlbiwgcG9wb3ZlciBhcyBQb3BvdmVyLCBhY3Rpb25zIGFzIEFjdGlvbnMsIHNoZWV0IGFzIFNoZWV0LCB0b2FzdCBhcyBUb2FzdCwgcHJlbG9hZGVyIGFzIFByZWxvYWRlciwgcHJvZ3Jlc3NiYXIgYXMgUHJvZ3Jlc3NiYXIsIHNvcnRhYmxlIGFzIFNvcnRhYmxlLCBzd2lwZW91dCBhcyBTd2lwZW91dCwgYWNjb3JkaW9uIGFzIEFjY29yZGlvbiwgdmlydHVhbExpc3QgYXMgVmlydHVhbExpc3QsIHRpbWVsaW5lIGFzIFRpbWVsaW5lLCB0YWJzIGFzIFRhYnMsIHBhbmVsIGFzIFBhbmVsLCBjYXJkIGFzIENhcmQsIGNoaXAgYXMgQ2hpcCwgZm9ybSBhcyBGb3JtLCBpbnB1dCBhcyBJbnB1dCwgY2hlY2tib3ggYXMgQ2hlY2tib3gsIHJhZGlvIGFzIFJhZGlvLCB0b2dnbGUgYXMgVG9nZ2xlLCByYW5nZSBhcyBSYW5nZSwgc21hcnRTZWxlY3QgYXMgU21hcnRTZWxlY3QsIGNhbGVuZGFyIGFzIENhbGVuZGFyLCBwaWNrZXIgYXMgUGlja2VyLCBpbmZpbml0ZVNjcm9sbCBhcyBJbmZpbml0ZVNjcm9sbCwgcHVsbFRvUmVmcmVzaCBhcyBQdWxsVG9SZWZyZXNoLCBsYXp5IGFzIExhenksIGRhdGFUYWJsZSBhcyBEYXRhVGFibGUsIGZhYiBhcyBGYWIsIHNlYXJjaGJhciBhcyBTZWFyY2hiYXIsIG1lc3NhZ2VzIGFzIE1lc3NhZ2VzLCBtZXNzYWdlYmFyIGFzIE1lc3NhZ2ViYXIsIHN3aXBlciBhcyBTd2lwZXIsIHBob3RvQnJvd3NlciBhcyBQaG90b0Jyb3dzZXIsIG5vdGlmaWNhdGlvbiBhcyBOb3RpZmljYXRpb24sIGF1dG9jb21wbGV0ZSBhcyBBdXRvY29tcGxldGUgfTtcbiIsImNvbnN0IFV0aWxzID0ge1xuICBpc09iamVjdChvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBvICE9PSBudWxsICYmIG8uY29uc3RydWN0b3IgJiYgby5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xuICB9LFxuICBub3coKSB7XG4gICAgcmV0dXJuIERhdGUubm93KCk7XG4gIH0sXG4gIGV4dGVuZCguLi5hcmdzKSB7XG4gICAgbGV0IGRlZXAgPSB0cnVlO1xuICAgIGxldCB0bztcbiAgICBsZXQgZnJvbTtcbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdib29sZWFuJykge1xuICAgICAgW2RlZXAsIHRvXSA9IGFyZ3M7XG4gICAgICBhcmdzLnNwbGljZSgwLCAyKTtcbiAgICAgIGZyb20gPSBhcmdzO1xuICAgIH0gZWxzZSB7XG4gICAgICBbdG9dID0gYXJncztcbiAgICAgIGFyZ3Muc3BsaWNlKDAsIDEpO1xuICAgICAgZnJvbSA9IGFyZ3M7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZnJvbS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgbmV4dFNvdXJjZSA9IGFyZ3NbaV07XG4gICAgICBpZiAobmV4dFNvdXJjZSAhPT0gdW5kZWZpbmVkICYmIG5leHRTb3VyY2UgIT09IG51bGwpIHtcbiAgICAgICAgY29uc3Qga2V5c0FycmF5ID0gT2JqZWN0LmtleXMoT2JqZWN0KG5leHRTb3VyY2UpKTtcbiAgICAgICAgZm9yIChsZXQgbmV4dEluZGV4ID0gMCwgbGVuID0ga2V5c0FycmF5Lmxlbmd0aDsgbmV4dEluZGV4IDwgbGVuOyBuZXh0SW5kZXggKz0gMSkge1xuICAgICAgICAgIGNvbnN0IG5leHRLZXkgPSBrZXlzQXJyYXlbbmV4dEluZGV4XTtcbiAgICAgICAgICBjb25zdCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuZXh0U291cmNlLCBuZXh0S2V5KTtcbiAgICAgICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkICYmIGRlc2MuZW51bWVyYWJsZSkge1xuICAgICAgICAgICAgaWYgKCFkZWVwKSB7XG4gICAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoVXRpbHMuaXNPYmplY3QodG9bbmV4dEtleV0pICYmIFV0aWxzLmlzT2JqZWN0KG5leHRTb3VyY2VbbmV4dEtleV0pKSB7XG4gICAgICAgICAgICAgIFV0aWxzLmV4dGVuZCh0b1tuZXh0S2V5XSwgbmV4dFNvdXJjZVtuZXh0S2V5XSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFVdGlscy5pc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgVXRpbHMuaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHtcbiAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSB7fTtcbiAgICAgICAgICAgICAgVXRpbHMuZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvO1xuICB9LFxufTtcbmV4cG9ydCBkZWZhdWx0IFV0aWxzO1xuIiwiLyogZXNsaW50IG5vLXVuZGVyc2NvcmUtZGFuZ2xlOiBcIm9mZlwiICovXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcHJvdG86IHtcbiAgICBwYWdlQ29tcG9uZW50TG9hZGVyKHJvdXRlckVsLCBjb21wb25lbnQsIGNvbXBvbmVudFVybCwgb3B0aW9ucywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBjb25zdCByb3V0ZXIgPSB0aGlzO1xuICAgICAgY29uc3QgZWwgPSByb3V0ZXIuJGVsWzBdO1xuICAgICAgY29uc3QgdnVlUm91dGVyID0gZWwuX192dWVfXztcbiAgICAgIGlmICghdnVlUm91dGVyIHx8ICF2dWVSb3V0ZXIucGFnZXMpIHtcbiAgICAgICAgcmVqZWN0KCk7XG4gICAgICB9XG4gICAgICBjb25zdCBpZCA9IFV0aWxzLm5vdygpO1xuICAgICAgY29uc3QgcGFnZURhdGEgPSB7XG4gICAgICAgIGNvbXBvbmVudCxcbiAgICAgICAgaWQsXG4gICAgICAgIHBhcmFtczogVXRpbHMuZXh0ZW5kKHt9LCBvcHRpb25zLnJvdXRlLnBhcmFtcyksXG4gICAgICAgIHJvdXRlOiBVdGlscy5leHRlbmQoe30sIG9wdGlvbnMucm91dGUpLFxuICAgICAgfTtcbiAgICAgIHZ1ZVJvdXRlci4kcm91dGUgPSBvcHRpb25zLnJvdXRlO1xuICAgICAgdnVlUm91dGVyLnBhZ2VzLnB1c2gocGFnZURhdGEpO1xuICAgICAgdnVlUm91dGVyLiRuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIGNvbnN0IHBhZ2VFbCA9IGVsLmNoaWxkTm9kZXNbZWwuY2hpbGROb2Rlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgcGFnZURhdGEuZWwgPSBwYWdlRWw7XG4gICAgICAgIHJlc29sdmUocGFnZUVsKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcmVtb3ZlUGFnZSgkcGFnZUVsKSB7XG4gICAgICBpZiAoISRwYWdlRWwpIHJldHVybjtcbiAgICAgIGNvbnN0IHJvdXRlciA9IHRoaXM7XG4gICAgICBjb25zdCB2dWVSb3V0ZXIgPSByb3V0ZXIuJGVsWzBdLl9fdnVlX187XG5cbiAgICAgIGxldCBwYWdlRWw7XG4gICAgICBpZiAoJ2xlbmd0aCcgaW4gJHBhZ2VFbCkge1xuICAgICAgICAvLyBEb203XG4gICAgICAgIGlmICgkcGFnZUVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICAgICBwYWdlRWwgPSAkcGFnZUVsWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFnZUVsID0gJHBhZ2VFbDtcbiAgICAgIH1cblxuICAgICAgaWYgKCRwYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICAgIHZ1ZVJvdXRlci5wYWdlcy5mb3JFYWNoKChwYWdlLCBpbmRleCkgPT4ge1xuICAgICAgICBpZiAocGFnZS5lbCA9PT0gcGFnZUVsKSB7XG4gICAgICAgICAgdnVlUm91dGVyLnBhZ2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gIH0sXG59O1xuIiwiLyogZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiBcIm9mZlwiICovXG5pbXBvcnQgeyBGcmFtZXdvcms3IH0gZnJvbSAnZnJhbWV3b3JrNy9kaXN0L2pzL2ZyYW1ld29yazcubW9kdWxhcic7XG5pbXBvcnQgVXRpbHMgZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgVnVlUm91dGVyIGZyb20gJy4vdnVlLXJvdXRlcic7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5zdGFsbChWdWUpIHtcbiAgICAvLyBFdmVudCBIdWJcbiAgICBjb25zdCBldmVudEh1YiA9IG5ldyBWdWUoKTtcblxuICAgIC8vIEZsYWdzXG4gICAgbGV0IGY3UmVhZHkgPSBmYWxzZTtcbiAgICBsZXQgZjdJbnN0YW5jZTtcblxuICAgIC8vIERlZmluZSBwcm90b3NcbiAgICBjb25zdCAkdGhlbWUgPSB7IGlvczogZmFsc2UsIG1kOiBmYWxzZSB9O1xuICAgIFZ1ZS5wcm90b3R5cGUuJGY3ID0gdW5kZWZpbmVkO1xuICAgIFZ1ZS5wcm90b3R5cGUuJHRoZW1lID0gJHRoZW1lO1xuXG4gICAgLy8gSW5pdCBGN1xuICAgIGZ1bmN0aW9uIGluaXRGcmFtZXdvcms3KHJvb3RFbCwgcGFyYW1zID0ge30sIHJvdXRlcykge1xuICAgICAgY29uc3QgZjdQYXJhbXMgPSBVdGlscy5leHRlbmQoe30sIHBhcmFtcywgeyByb290OiByb290RWwgfSk7XG4gICAgICBpZiAocm91dGVzICYmIHJvdXRlcy5sZW5ndGggJiYgIWY3UGFyYW1zLnJvdXRlcykgZjdQYXJhbXMucm91dGVzID0gcm91dGVzO1xuXG4gICAgICBmN0luc3RhbmNlID0gbmV3IEZyYW1ld29yazcoZjdQYXJhbXMpO1xuICAgICAgVnVlLnByb3RvdHlwZS4kZjcgPSBmN0luc3RhbmNlO1xuICAgICAgJHRoZW1lLmlvcyA9IGY3SW5zdGFuY2UudGhlbWUgPT09ICdpb3MnO1xuICAgICAgJHRoZW1lLm1kID0gZjdJbnN0YW5jZS50aGVtZSA9PT0gJ21kJztcbiAgICAgIGY3UmVhZHkgPSB0cnVlO1xuICAgICAgZXZlbnRIdWIuJGVtaXQoJ2Y3aW5pdCcsIGY3SW5zdGFuY2UpO1xuICAgIH1cblxuICAgIC8vIEV4dGVuZCBSb3V0ZXJcbiAgICBGcmFtZXdvcms3LlJvdXRlci51c2UoVnVlUm91dGVyKTtcblxuICAgIC8vIE1peGluXG4gICAgVnVlLm1peGluKHtcbiAgICAgIGJlZm9yZUNyZWF0ZSgpIHtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIGlmIChzZWxmID09PSBzZWxmLiRyb290KSB7XG4gICAgICAgICAgY29uc3QgeyB0aGVtZSB9ID0gKHNlbGYuJG9wdGlvbnMuZnJhbWV3b3JrNyB8fCB7fSk7XG4gICAgICAgICAgaWYgKHRoZW1lID09PSAnbWQnKSAkdGhlbWUubWQgPSB0cnVlO1xuICAgICAgICAgIGlmICh0aGVtZSA9PT0gJ2lvcycpICR0aGVtZS5pb3MgPSB0cnVlO1xuICAgICAgICAgIGlmICghdGhlbWUgfHwgdGhlbWUgPT09ICdhdXRvJykge1xuICAgICAgICAgICAgJHRoZW1lLmlvcyA9ICEhKEZyYW1ld29yazcuRGV2aWNlIHx8IEZyYW1ld29yazcuZGV2aWNlKS5pb3M7XG4gICAgICAgICAgICAkdGhlbWUubWQgPSAhKEZyYW1ld29yazcuRGV2aWNlIHx8IEZyYW1ld29yazcuZGV2aWNlKS5pb3M7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0ICRyb3V0ZTtcbiAgICAgICAgbGV0ICRyb3V0ZXI7XG4gICAgICAgIGxldCBwYXJlbnQgPSBzZWxmO1xuICAgICAgICB3aGlsZSAocGFyZW50ICYmICEkcm91dGVyICYmICEkcm91dGUpIHtcbiAgICAgICAgICBpZiAocGFyZW50LiRyb3V0ZSkgJHJvdXRlID0gcGFyZW50LiRyb3V0ZTtcbiAgICAgICAgICBpZiAocGFyZW50LiRyb3V0ZXIpICRyb3V0ZXIgPSBwYXJlbnQuJHJvdXRlcjtcbiAgICAgICAgICBlbHNlIGlmIChwYXJlbnQuZjdWaWV3KSB7XG4gICAgICAgICAgICAkcm91dGVyID0gcGFyZW50LmY3Vmlldy5yb3V0ZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcmVudCA9IHBhcmVudC4kcGFyZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi4kcm91dGUgPSAkcm91dGU7XG4gICAgICAgIHNlbGYuJHJvdXRlciA9ICRyb3V0ZXI7XG4gICAgICB9LFxuICAgICAgbW91bnRlZCgpIHtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIGlmIChzZWxmID09PSBzZWxmLiRyb290KSB7XG4gICAgICAgICAgaW5pdEZyYW1ld29yazcoc2VsZi4kcm9vdC4kZWwsIHNlbGYuJG9wdGlvbnMuZnJhbWV3b3JrNywgc2VsZi4kb3B0aW9ucy5yb3V0ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2VsZi5vbkY3SW5pdCkgcmV0dXJuO1xuICAgICAgICBpZiAoZjdSZWFkeSkgc2VsZi5vbkY3SW5pdChmN0luc3RhbmNlKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZXZlbnRIdWIuJG9uKCdmN2luaXQnLCAoZjcpID0+IHtcbiAgICAgICAgICAgIHNlbGYub25GN0luaXQoZjcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxufTtcbiIsIjxzY3JpcHQ+XG4gIGV4cG9ydCBkZWZhdWx0IHtcbiAgICByZW5kZXIoYykge1xuICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICBjb25zdCBwYWdlcyA9IHNlbGYucGFnZXMubWFwKChwYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBjKHBhZ2UuY29tcG9uZW50LCB7XG4gICAgICAgICAgdGFnOiAnY29tcG9uZW50JyxcbiAgICAgICAgICBwcm9wczogcGFnZS5wYXJhbXMgPyBwYWdlLnBhcmFtcyB8fCB7fSA6IHt9LFxuICAgICAgICAgIGtleTogcGFnZS5pZCxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjKCdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgc3RhdGljQ2xhc3M6ICd2aWV3JyxcbiAgICAgICAgICByZWY6ICd2aWV3JyxcbiAgICAgICAgICBjbGFzczogc2VsZi5jbGFzc2VzT2JqZWN0LFxuICAgICAgICB9LFxuICAgICAgICBbXG4gICAgICAgICAgc2VsZi4kc2xvdHMuZGVmYXVsdCxcbiAgICAgICAgICBwYWdlc1xuICAgICAgICBdXG4gICAgICApO1xuICAgIH0sXG4gICAgYmVmb3JlRGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgaWYgKHNlbGYuZjdWaWV3ICYmIHNlbGYuZjdWaWV3LmRlc3Ryb3kpIHNlbGYuZjdWaWV3LmRlc3Ryb3koKTtcbiAgICB9LFxuICAgIHByb3BzOiB7XG4gICAgICAnbWFpbic6IEJvb2xlYW4sXG4gICAgICAndGFiJzogQm9vbGVhbixcbiAgICAgICd0YWItYWN0aXZlJzogQm9vbGVhbixcblxuICAgICAgdXJsOiBTdHJpbmcsXG4gICAgICBtYWluOiBCb29sZWFuLFxuICAgICAgc3RhY2tQYWdlczogU3RyaW5nLFxuICAgICAgeGhyQ2FjaGU6IFN0cmluZyxcbiAgICAgIHhockNhY2hlSWdub3JlOiBBcnJheSxcbiAgICAgIHhockNhY2hlSWdub3JlR2V0UGFyYW1ldGVyczogQm9vbGVhbixcbiAgICAgIHhockNhY2hlRHVyYXRpb246IE51bWJlcixcbiAgICAgIHByZWxvYWRQcmV2aW91c1BhZ2U6IEJvb2xlYW4sXG4gICAgICB1bmlxdWVIaXN0b3J5OiBCb29sZWFuLFxuICAgICAgdW5pcXVlSGlzdG9yeUlnbm9yZUdldFBhcmFtZXRlcnM6IEJvb2xlYW4sXG4gICAgICBhbGxvd0R1cGxpY2F0ZVVybHM6IEJvb2xlYW4sXG4gICAgICByZWxvYWRQYWdlczogQm9vbGVhbixcbiAgICAgIHJlbW92ZUVsZW1lbnRzOiBCb29sZWFuLFxuICAgICAgcmVtb3ZlRWxlbWVudHNXaXRoVGltZW91dDogQm9vbGVhbixcbiAgICAgIHJlbW92ZUVsZW1lbnRzVGltZW91dDogTnVtYmVyLFxuICAgICAgcmVzdG9yZVNjcm9sbFRvcE9uQmFjazogQm9vbGVhbixcbiAgICAgIC8vIFN3aXBlIEJhY2tcbiAgICAgIGlvc1N3aXBlQmFjazogQm9vbGVhbixcbiAgICAgIGlvc1N3aXBlQmFja0FuaW1hdGVTaGFkb3c6IEJvb2xlYW4sXG4gICAgICBpb3NTd2lwZUJhY2tBbmltYXRlT3BhY2l0eTogQm9vbGVhbixcbiAgICAgIGlvc1N3aXBlQmFja0FjdGl2ZUFyZWE6IE51bWJlcixcbiAgICAgIGlvc1N3aXBlQmFja1RocmVzaG9sZDogTnVtYmVyLFxuICAgICAgLy8gUHVzaCBTdGF0ZVxuICAgICAgcHVzaFN0YXRlOiBCb29sZWFuLFxuICAgICAgcHVzaFN0YXRlUm9vdDogU3RyaW5nLFxuICAgICAgcHVzaFN0YXRlQW5pbWF0ZTogQm9vbGVhbixcbiAgICAgIHB1c2hTdGF0ZUFuaW1hdGVPbkxvYWQ6IEJvb2xlYW4sXG4gICAgICBwdXNoU3RhdGVTZXBhcmF0b3I6IFN0cmluZyxcbiAgICAgIHB1c2hTdGF0ZU9uTG9hZDogQm9vbGVhbixcbiAgICAgIC8vIEFuaW1hdGUgUGFnZXNcbiAgICAgIGFuaW1hdGU6IEJvb2xlYW4sXG4gICAgICBhbmltYXRlV2l0aEpTOiBCb29sZWFuLFxuICAgICAgLy8gaU9TIER5bmFtaWMgTmF2YmFyXG4gICAgICBpb3NEeW5hbWljTmF2YmFyOiBCb29sZWFuLFxuICAgICAgaW9zU2VwYXJhdGVEeW5hbWljTmF2YmFyOiBCb29sZWFuLFxuICAgICAgLy8gQW5pbWF0ZSBpT1MgTmF2YmFyIEJhY2sgSWNvblxuICAgICAgaW9zQW5pbWF0ZU5hdmJhckJhY2tJY29uOiBCb29sZWFuLFxuICAgICAgLy8gTUQgVGhlbWUgZGVsYXlcbiAgICAgIG1hdGVyaWFsUGFnZUxvYWREZWxheTogTnVtYmVyLFxuXG4gICAgICBpbml0OiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICAgIH0sXG5cbiAgICAgICdjb2xvci10aGVtZSc6IFN0cmluZyxcbiAgICB9LFxuICAgIGRhdGEoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYWdlczogW10sXG4gICAgICB9O1xuICAgIH0sXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgIGNsYXNzZXNPYmplY3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvID0ge1xuICAgICAgICAgICd2aWV3LW1haW4nOiB0aGlzLm1haW4sXG4gICAgICAgICAgJ3RhYi1hY3RpdmUnOiB0aGlzLnRhYkFjdGl2ZSxcbiAgICAgICAgICAndGFiJzogdGhpcy50YWIsXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY29sb3JUaGVtZSkgY29bJ2NvbG9yLXRoZW1lLScgKyB0aGlzLmNvbG9yVGhlbWVdID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMubGF5b3V0KSBjb1snbGF5b3V0LScgKyB0aGlzLmxheW91dF0gPSB0cnVlO1xuICAgICAgICByZXR1cm4gY287XG4gICAgICB9LFxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgb25GN0luaXQ6IGZ1bmN0aW9uIChmNykge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGlmICghc2VsZi5pbml0KSByZXR1cm47XG5cbiAgICAgICAgLy8gSW5pdCBWaWV3XG4gICAgICAgIHNlbGYuZjdWaWV3ID0gZjcudmlld3MuY3JlYXRlKHNlbGYuJGVsLCBzZWxmLiRvcHRpb25zLnByb3BzRGF0YSk7XG4gICAgICB9LFxuICAgICAgb25Td2lwZUJhY2tNb3ZlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdGhpcy4kZW1pdCgnc3dpcGViYWNrOm1vdmUnLCBldmVudCwgZXZlbnQuZGV0YWlsKTtcbiAgICAgIH0sXG4gICAgICBvblN3aXBlQmFja0JlZm9yZUNoYW5nZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuJGVtaXQoJ3N3aXBlYmFjazpiZWZvcmVjaGFuZ2UnLCBldmVudCwgZXZlbnQuZGV0YWlsKTtcbiAgICAgIH0sXG4gICAgICBvblN3aXBlQmFja0FmdGVyQ2hhbmdlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdGhpcy4kZW1pdCgnc3dpcGViYWNrOmFmdGVyY2hhbmdlJywgZXZlbnQsIGV2ZW50LmRldGFpbCk7XG4gICAgICB9LFxuICAgICAgb25Td2lwZUJhY2tCZWZvcmVSZXNldDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuJGVtaXQoJ3N3aXBlYmFjazpiZWZvcmVyZXNldCcsIGV2ZW50LCBldmVudC5kZXRhaWwpO1xuICAgICAgfSxcbiAgICAgIG9uU3dpcGVCYWNrQWZ0ZXJSZXNldDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuJGVtaXQoJ3N3aXBlYmFjazphZnRlcnJlc2V0JywgZXZlbnQsIGV2ZW50LmRldGFpbCk7XG4gICAgICB9LFxuICAgICAgb25UYWJTaG93OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICB0aGlzLiRlbWl0KCd0YWI6c2hvdycsIGUpO1xuICAgICAgfSxcbiAgICAgIG9uVGFiSGlkZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdGhpcy4kZW1pdCgndGFiOmhpZGUnLCBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbjwvc2NyaXB0PlxuIiwiPHNjcmlwdD5cbiAgZXhwb3J0IGRlZmF1bHQge1xuICAgIHJlbmRlcjogZnVuY3Rpb24gKGMpIHtcbiAgICAgIHZhciBwYWdlRWwsIHBhZ2VDb250ZW50RWwsIHB0ckVsLCBpbmZpbml0ZUVsLCBmaXhlZExpc3QgPSBbXSwgc3RhdGljTGlzdCA9IFtdO1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICBpZiAoc2VsZi5wdWxsVG9SZWZyZXNoICYmIChzZWxmLnB0ckxheWVyICYmIHNlbGYucHVsbFRvUmVmcmVzaExheWVyKSkge1xuICAgICAgICBwdHJFbCA9IGMoJ2RpdicsIHtjbGFzczogeydwdWxsLXRvLXJlZnJlc2gtbGF5ZXInOiB0cnVlfX0gLFtcbiAgICAgICAgICBjKCdkaXYnLCB7Y2xhc3M6IHsncHJlbG9hZGVyJzogdHJ1ZX19KSxcbiAgICAgICAgICBjKCdkaXYnLCB7Y2xhc3M6IHsncHVsbC10by1yZWZyZXNoLWFycm93JzogdHJ1ZX19KVxuICAgICAgICBdKTtcbiAgICAgIH1cbiAgICAgIGlmICgoc2VsZi5pbmZpbml0ZVNjcm9sbCB8fCBzZWxmLmluZmluaXRlU2Nyb2xsID09PSAnJykgJiYgc2VsZi5pbmZpbml0ZVNjcm9sbFByZWxvYWRlcikge1xuICAgICAgICBpbmZpbml0ZUVsID0gYygnZGl2Jywge2NsYXNzOiB7J2luZmluaXRlLXNjcm9sbC1wcmVsb2FkZXInOiB0cnVlfX0gLFtcbiAgICAgICAgICBjKCdkaXYnLCB7Y2xhc3M6IHsncHJlbG9hZGVyJzogdHJ1ZX19KVxuICAgICAgICBdKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGZpeGVkVGFncyA9ICgnbmF2YmFyIHRvb2xiYXIgdGFiYmFyIHN1Ym5hdmJhciBzZWFyY2hiYXIgbWVzc2FnZWJhciBmYWIgc3BlZWQtZGlhbCBmbG9hdGluZy1idXR0b24nKS5zcGxpdCgnICcpO1xuXG4gICAgICB2YXIgdGFnLCBjaGlsZCwgd2l0aFN1Ym5hdmJhciwgd2l0aE1lc3NhZ2VzLCB3aXRoU2VhcmNoYmFyO1xuXG4gICAgICB2YXIgaSwgajtcbiAgICAgIGlmIChzZWxmLiRzbG90cy5kZWZhdWx0KSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBzZWxmLiRzbG90cy5kZWZhdWx0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY2hpbGQgPSBzZWxmLiRzbG90cy5kZWZhdWx0W2ldO1xuICAgICAgICAgIHRhZyA9IGNoaWxkLnRhZztcbiAgICAgICAgICBpZiAoIXRhZykge1xuICAgICAgICAgICAgc3RhdGljTGlzdC5wdXNoKGNoaWxkKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaXNGaXhlZCA9IGZhbHNlO1xuICAgICAgICAgIGlmICh0YWcuaW5kZXhPZignbWVzc2FnZXMnKSA+PSAwKSB3aXRoTWVzc2FnZXMgPSB0cnVlO1xuICAgICAgICAgIGlmICh0YWcuaW5kZXhPZignc3VibmF2YmFyJykgPj0gMCkgd2l0aFN1Ym5hdmJhciA9IHRydWU7XG4gICAgICAgICAgaWYgKHRhZy5pbmRleE9mKCdzZWFyY2hiYXInKSA+PSAwKSB3aXRoU2VhcmNoYmFyID0gdHJ1ZTtcbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgZml4ZWRUYWdzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBpZiAodGFnLmluZGV4T2YoZml4ZWRUYWdzW2pdKSA+PSAwKSB7XG4gICAgICAgICAgICAgIGlzRml4ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNGaXhlZCkgZml4ZWRMaXN0LnB1c2goY2hpbGQpO1xuICAgICAgICAgIGVsc2Ugc3RhdGljTGlzdC5wdXNoKGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZml4ZWRMaXN0Lmxlbmd0aCA+IDAgJiYgd2l0aFNlYXJjaGJhcikge1xuICAgICAgICBmaXhlZExpc3QucHVzaChjKCdkaXYnLCB7Y2xhc3M6eydzZWFyY2hiYXItb3ZlcmxheSc6IHRydWV9fSkpO1xuICAgICAgfVxuICAgICAgaWYgKHdpdGhNZXNzYWdlcykgc2VsZi5jbGFzc2VzT2JqZWN0UGFnZUNvbnRlbnRbJ21lc3NhZ2VzLWNvbnRlbnQnXSA9IHRydWU7XG4gICAgICBpZiAoIXNlbGYubm9QYWdlQ29udGVudCkge1xuICAgICAgICBwYWdlQ29udGVudEVsID0gYygnZGl2Jywge1xuICAgICAgICAgIHN0YXRpY0NsYXNzOiAncGFnZS1jb250ZW50JyxcbiAgICAgICAgICBjbGFzczogc2VsZi5jbGFzc2VzT2JqZWN0UGFnZUNvbnRlbnQsXG4gICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICdkYXRhLXB0ci1kaXN0YW5jZSc6IHNlbGYucHVsbFRvUmVmcmVzaERpc3RhbmNlIHx8IHNlbGYucHRyRGlzdGFuY2UsXG4gICAgICAgICAgICAnZGF0YS1kaXN0YW5jZSc6IHNlbGYuaW5maW5pdGVTY3JvbGxEaXN0YW5jZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgb246IHtcbiAgICAgICAgICAgICdwdHI6cHVsbHN0YXJ0Jzogc2VsZi5vblB0clB1bGxzdGFydCxcbiAgICAgICAgICAgICdwdHI6cHVsbG1vdmUnOiBzZWxmLm9uUHRyUHVsbG1vdmUsXG4gICAgICAgICAgICAncHRyOnB1bGxlbmQnOiBzZWxmLm9uUHRyUHVsbGVuZCxcbiAgICAgICAgICAgICdwdHI6cmVmcmVzaCc6IHNlbGYub25QdHJSZWZyZXNoLFxuICAgICAgICAgICAgJ3B0cjpkb25lJzogc2VsZi5vblB0clJlZnJlc2hkb25lLFxuICAgICAgICAgICAgJ2luZmluaXRlJzogc2VsZi5vbkluZmluaXRlXG4gICAgICAgICAgfSxcbiAgICAgICAgfSwgKHNlbGYuaW5maW5pdGVTY3JvbGwgPT09ICd0b3AnID8gW3B0ckVsLCBpbmZpbml0ZUVsLCBzZWxmLiRzbG90cy5zdGF0aWMsIHN0YXRpY0xpc3RdIDogW3B0ckVsLCBzZWxmLiRzbG90cy5zdGF0aWMsIHN0YXRpY0xpc3QsIGluZmluaXRlRWxdKSlcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBwYWdlQ29udGVudEVsID0gW107XG4gICAgICAgIGlmIChzZWxmLiRzbG90cy5kZWZhdWx0ICYmIGZpeGVkTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNlbGYuJHNsb3RzLmRlZmF1bHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChmaXhlZExpc3QuaW5kZXhPZihzZWxmLiRzbG90cy5kZWZhdWx0W2ldKSA8IDApIHtcbiAgICAgICAgICAgICAgcGFnZUNvbnRlbnRFbC5wdXNoKHNlbGYuJHNsb3RzLmRlZmF1bHRbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBwYWdlQ29udGVudEVsID0gW3NlbGYuJHNsb3RzLmRlZmF1bHRdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZpeGVkTGlzdC5wdXNoKHNlbGYuJHNsb3RzLmZpeGVkKTtcblxuICAgICAgaWYgKHdpdGhTdWJuYXZiYXIpIHNlbGYuY2xhc3Nlc09iamVjdFBhZ2VbJ3dpdGgtc3VibmF2YmFyJ10gPSB0cnVlO1xuICAgICAgcGFnZUVsID0gYygnZGl2Jywge1xuICAgICAgICBzdGF0aWNDbGFzczogJ3BhZ2UnLFxuICAgICAgICBjbGFzczogc2VsZi5jbGFzc2VzT2JqZWN0UGFnZSxcbiAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAnZGF0YS1wYWdlJzogc2VsZi5uYW1lXG4gICAgICAgIH0sXG4gICAgICAgIG9uOiB7XG4gICAgICAgICAgJ3BhZ2U6YmVmb3JlaW5pdCc6IHNlbGYub25QYWdlQmVmb3JlSW5pdCxcbiAgICAgICAgICAncGFnZTppbml0Jzogc2VsZi5vblBhZ2VJbml0LFxuICAgICAgICAgICdwYWdlOnJlaW5pdCc6IHNlbGYub25QYWdlUmVpbml0LFxuICAgICAgICAgICdwYWdlOmJlZm9yZWFuaW1hdGlvbic6IHNlbGYub25QYWdlQmVmb3JlQW5pbWF0aW9uLFxuICAgICAgICAgICdwYWdlOmFmdGVyYW5pbWF0aW9uJzogc2VsZi5vblBhZ2VBZnRlckFuaW1hdGlvbixcbiAgICAgICAgICAncGFnZTpiZWZvcmVyZW1vdmUnOiBzZWxmLm9uUGFnZUJlZm9yZVJlbW92ZSxcbiAgICAgICAgICAncGFnZTpiYWNrJzogc2VsZi5vblBhZ2VCYWNrLFxuICAgICAgICAgICdwYWdlOmFmdGVyYmFjayc6IHNlbGYub25QYWdlQWZ0ZXJCYWNrXG4gICAgICAgIH1cbiAgICAgIH0sIFtmaXhlZExpc3QsIHBhZ2VDb250ZW50RWxdKTtcblxuICAgICAgcmV0dXJuIHBhZ2VFbDtcblxuICAgIH0sXG4gICAgcHJvcHM6IHtcbiAgICAgICduYW1lJzogU3RyaW5nLFxuICAgICAgJ2NhY2hlZCc6IEJvb2xlYW4sXG4gICAgICAnbmF2YmFyLWZpeGVkJzogQm9vbGVhbixcbiAgICAgICduYXZiYXItdGhyb3VnaCc6IEJvb2xlYW4sXG4gICAgICAndG9vbGJhci1maXhlZCc6IEJvb2xlYW4sXG4gICAgICAndG9vbGJhci10aHJvdWdoJzogQm9vbGVhbixcbiAgICAgICd0YWJiYXItZml4ZWQnOiBCb29sZWFuLFxuICAgICAgJ3RhYmJhci10aHJvdWdoJzogQm9vbGVhbixcbiAgICAgICd0YWJiYXItbGFiZWxzLWZpeGVkJzogQm9vbGVhbixcbiAgICAgICd0YWJiYXItbGFiZWxzLXRocm91Z2gnOiBCb29sZWFuLFxuICAgICAgJ3dpdGgtc3VibmF2YmFyJzogQm9vbGVhbixcbiAgICAgICdzdWJuYXZiYXInOiBCb29sZWFuLFxuICAgICAgJ25vLW5hdmJhcic6IEJvb2xlYW4sXG4gICAgICAnbm8tdG9vbGJhcic6IEJvb2xlYW4sXG4gICAgICAnbm8tdGFiYmFyJzogQm9vbGVhbixcbiAgICAgICdwdWxsLXRvLXJlZnJlc2gnOiBCb29sZWFuLFxuICAgICAgJ3B1bGwtdG8tcmVmcmVzaC1kaXN0YW5jZSc6IE51bWJlcixcbiAgICAgICdwdHItZGlzdGFuY2UnOiBOdW1iZXIsXG4gICAgICAncHVsbC10by1yZWZyZXNoLWxheWVyJzoge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICBkZWZhdWx0OiB0cnVlXG4gICAgICB9LFxuICAgICAgJ3B0ci1sYXllcic6IHtcbiAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgICAgfSxcbiAgICAgICdpbmZpbml0ZS1zY3JvbGwnOiBbQm9vbGVhbiwgU3RyaW5nXSxcbiAgICAgICdpbmZpbml0ZS1zY3JvbGwtZGlzdGFuY2UnOiBOdW1iZXIsXG4gICAgICAnaW5maW5pdGUtc2Nyb2xsLXByZWxvYWRlcic6IHtcbiAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgICAgfSxcbiAgICAgICdoaWRlLWJhcnMtb24tc2Nyb2xsJzogQm9vbGVhbixcbiAgICAgICdoaWRlLW5hdmJhci1vbi1zY3JvbGwnOiBCb29sZWFuLFxuICAgICAgJ2hpZGUtdG9vbGJhci1vbi1zY3JvbGwnOiBCb29sZWFuLFxuICAgICAgJ2hpZGUtdGFiYmFyLW9uLXNjcm9sbCc6IEJvb2xlYW4sXG4gICAgICAnbWVzc2FnZXMnOiBCb29sZWFuLFxuICAgICAgJ3RhYnMnOiBCb29sZWFuLFxuICAgICAgJ25vLXBhZ2UtY29udGVudCc6IEJvb2xlYW4sXG4gICAgICAnbG9naW4tc2NyZWVuJzogQm9vbGVhbixcbiAgICAgICd0aGVtZSc6IFN0cmluZyxcbiAgICAgICdsYXlvdXQnOiBTdHJpbmcsXG4gICAgICAnbm8tc3dpcGViYWNrJzogQm9vbGVhblxuICAgIH0sXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgIGNsYXNzZXNPYmplY3RQYWdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjbyA9IHtcbiAgICAgICAgICAnY2FjaGVkJzogdGhpcy5jYWNoZWQsXG4gICAgICAgICAgJ25hdmJhci1maXhlZCc6IHRoaXMubmF2YmFyRml4ZWQgfHwgdGhpcy5uYXZiYXJUaHJvdWdoICYmIHRoaXMuJHRoZW1lLm1hdGVyaWFsLFxuICAgICAgICAgICduYXZiYXItdGhyb3VnaCc6IHRoaXMubmF2YmFyVGhyb3VnaCxcbiAgICAgICAgICAndG9vbGJhci1maXhlZCc6IHRoaXMudG9vbGJhckZpeGVkLFxuICAgICAgICAgICd0b29sYmFyLXRocm91Z2gnOiB0aGlzLnRvb2xiYXJUaHJvdWdoLFxuICAgICAgICAgICd0YWJiYXItZml4ZWQnOiB0aGlzLnRhYmJhckZpeGVkLFxuICAgICAgICAgICd0YWJiYXItdGhyb3VnaCc6IHRoaXMudGFiYmFyVGhyb3VnaCxcbiAgICAgICAgICAndGFiYmFyLWxhYmVscy1maXhlZCc6IHRoaXMudGFiYmFyTGFiZWxzRml4ZWQsXG4gICAgICAgICAgJ3RhYmJhci1sYWJlbHMtdGhyb3VnaCc6IHRoaXMudGFiYmFyTGFiZWxzVGhyb3VnaCxcbiAgICAgICAgICAnd2l0aC1zdWJuYXZiYXInOiB0aGlzLnN1Ym5hdmJhciB8fCB0aGlzLndpdGhTdWJuYXZiYXIsXG4gICAgICAgICAgJ25vLW5hdmJhcic6IHRoaXMubm9OYXZiYXIsXG4gICAgICAgICAgJ25vLXRvb2xiYXInOiB0aGlzLm5vVG9vbGJhcixcbiAgICAgICAgICAnbm8tdGFiYmFyJzogdGhpcy5ub1RhYmJhcixcbiAgICAgICAgICAndGFicyc6IHRoaXMudGFicyxcbiAgICAgICAgICAnbm8tc3dpcGViYWNrJzogdGhpcy5ub1N3aXBlYmFja1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnRoZW1lKSBjb1sndGhlbWUtJyArIHRoaXMudGhlbWVdID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMubGF5b3V0KSBjb1snbGF5b3V0LScgKyB0aGlzLmxheW91dF0gPSB0cnVlO1xuICAgICAgICByZXR1cm4gY287XG4gICAgICB9LFxuICAgICAgY2xhc3Nlc09iamVjdFBhZ2VDb250ZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgJ3B1bGwtdG8tcmVmcmVzaC1jb250ZW50JzogdGhpcy5wdWxsVG9SZWZyZXNoLFxuICAgICAgICAgICdpbmZpbml0ZS1zY3JvbGwnOiB0aGlzLmluZmluaXRlU2Nyb2xsIHx8IHRoaXMuaW5maW5pdGVTY3JvbGwgPT09ICcnLFxuICAgICAgICAgICdpbmZpbml0ZS1zY3JvbGwtdG9wJzogdGhpcy5pbmZpbml0ZVNjcm9sbCA9PT0gJ3RvcCcsXG4gICAgICAgICAgJ2hpZGUtYmFycy1vbi1zY3JvbGwnOiB0aGlzLmhpZGVCYXJzT25TY3JvbGwsXG4gICAgICAgICAgJ2hpZGUtbmF2YmFyLW9uLXNjcm9sbCc6IHRoaXMuaGlkZU5hdmJhck9uU2Nyb2xsLFxuICAgICAgICAgICdoaWRlLXRvb2xiYXItb24tc2Nyb2xsJzogdGhpcy5oaWRlVG9vbGJhck9uU2Nyb2xsLFxuICAgICAgICAgICdoaWRlLXRhYmJhci1vbi1zY3JvbGwnOiB0aGlzLmhpZGVUYWJiYXJPblNjcm9sbCxcbiAgICAgICAgICAnbWVzc2FnZXMtY29udGVudCc6IHRoaXMubWVzc2FnZXMsXG4gICAgICAgICAgJ2xvZ2luLXNjcmVlbi1jb250ZW50JzogdGhpcy5sb2dpblNjcmVlblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICBvblB0clB1bGxzdGFydDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuJGVtaXQoJ3B0cjpwdWxsc3RhcnQnLCBldmVudCk7XG4gICAgICB9LFxuICAgICAgb25QdHJQdWxsbW92ZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuJGVtaXQoJ3B0cjpwdWxsbW92ZScsIGV2ZW50KTtcbiAgICAgIH0sXG4gICAgICBvblB0clB1bGxlbmQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB0aGlzLiRlbWl0KCdwdHI6cHVsbGVuZCcsIGV2ZW50KTtcbiAgICAgIH0sXG4gICAgICBvblB0clJlZnJlc2g6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB0aGlzLiRlbWl0KCdwdHI6cmVmcmVzaCcsIGV2ZW50LCBldmVudC5kZXRhaWwuZG9uZSk7XG4gICAgICB9LFxuICAgICAgb25QdHJSZWZyZXNoZG9uZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuJGVtaXQoJ3B0cjpkb25lJywgZXZlbnQpO1xuICAgICAgfSxcbiAgICAgIG9uSW5maW5pdGU6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB0aGlzLiRlbWl0KCdpbmZpbml0ZScsIGV2ZW50KTtcbiAgICAgIH0sXG4gICAgICBvblBhZ2VCZWZvcmVJbml0OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5mN1BhZ2VEYXRhID0gZXZlbnQuZGV0YWlsLnBhZ2U7XG4gICAgICAgIHRoaXMuJGVtaXQoJ3BhZ2U6YmVmb3JlaW5pdCcsIGV2ZW50LCBldmVudC5kZXRhaWwucGFnZSk7XG4gICAgICB9LFxuICAgICAgb25QYWdlSW5pdDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuJGVtaXQoJ3BhZ2U6aW5pdCcsIGV2ZW50LCBldmVudC5kZXRhaWwucGFnZSk7XG4gICAgICB9LFxuICAgICAgb25QYWdlUmVpbml0OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdGhpcy4kZW1pdCgncGFnZTpyZWluaXQnLCBldmVudCwgZXZlbnQuZGV0YWlsLnBhZ2UpO1xuICAgICAgfSxcbiAgICAgIG9uUGFnZUJlZm9yZUFuaW1hdGlvbjogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuJGVtaXQoJ3BhZ2U6YmVmb3JlYW5pbWF0aW9uJywgZXZlbnQsIGV2ZW50LmRldGFpbC5wYWdlKTtcbiAgICAgIH0sXG4gICAgICBvblBhZ2VBZnRlckFuaW1hdGlvbjogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuJGVtaXQoJ3BhZ2U6YWZ0ZXJhbmltYXRpb24nLCBldmVudCwgZXZlbnQuZGV0YWlsLnBhZ2UpO1xuICAgICAgfSxcbiAgICAgIG9uUGFnZUJlZm9yZVJlbW92ZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuJGVtaXQoJ3BhZ2U6YmVmb3JlcmVtb3ZlJywgZXZlbnQsIGV2ZW50LmRldGFpbC5wYWdlKTtcbiAgICAgIH0sXG4gICAgICBvblBhZ2VCYWNrOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdGhpcy4kZW1pdCgncGFnZTpiYWNrJywgZXZlbnQsIGV2ZW50LmRldGFpbC5wYWdlKTtcbiAgICAgIH0sXG4gICAgICBvblBhZ2VBZnRlckJhY2s6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB0aGlzLiRlbWl0KCdwYWdlOmFmdGVyYmFjaycsIGV2ZW50LCBldmVudC5kZXRhaWwucGFnZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBpZD1cImFwcFwiPlxuICAgIDxmNy12aWV3IHVybD1cIi9hYm91dC9cIj48L2Y3LXZpZXc+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG4gIGltcG9ydCB7IGY3VmlldyB9IGZyb20gJy4uL3NyYy9mcmFtZXdvcms3LXZ1ZS5qcyc7XG4gIGV4cG9ydCBkZWZhdWx0IHtcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICBmN1ZpZXcsXG4gICAgfSxcbiAgICBtb3VudGVkKCkge1xuICAgICAgY29uc29sZS5sb2coJ2FwcCBtb3VudGVkJyk7XG4gICAgfVxuICB9XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInBhZ2VcIj5cbiAgICA8ZGl2IGNsYXNzPVwibmF2YmFyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwibmF2YmFyLWlubmVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0aXRsZVwiPkFib3V0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8cD5BYm91dDwvcD5cbiAgICA8dWw+XG4gICAgICA8bGk+XG4gICAgICAgIDxhIGhyZWY9XCIvYWJvdXQvXCI+QWJvdXQ8L2E+XG4gICAgICA8L2xpPlxuICAgICAgPGxpPlxuICAgICAgICA8YSBocmVmPVwiL2Fib3V0LW5ld3MvXCI+QWJvdXQgTmV3czwvYT5cbiAgICAgIDwvbGk+XG4gICAgICA8bGk+XG4gICAgICAgIDxhIGhyZWY9XCIvYWJvdXQtc2VydmljZXMvdGVzdDEvdGVzdDIvP2Zvbz1iYXoxJmJhcj1iYXoyXCI+QWJvdXQgU2VydmljZXM8L2E+XG4gICAgICA8L2xpPlxuICAgICAgPGxpPlxuICAgICAgICA8YSBocmVmPVwiL2Fib3V0LWNvbnRhY3RzL1wiPkFib3V0IENvbnRhY3RzPC9hPlxuICAgICAgPC9saT5cbiAgICA8L3VsPlxuICAgIDxwPjxhIGhyZWY9XCJcIiBjbGFzcz1cImJhY2tcIj5CYWNrPC9hPjwvcD5cbiAgICA8cD48YSBocmVmPVwiL2Fib3V0L1wiIGNsYXNzPVwiYmFja1wiIGRhdGEtZm9yY2U9XCJ0cnVlXCI+QmFjayBUbyBIb21lPC9hPjwvcD5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbiAgaW1wb3J0IHsgZjdQYWdlIH0gZnJvbSAnLi4vLi4vc3JjL2ZyYW1ld29yazctdnVlLmpzJztcbiAgZXhwb3J0IGRlZmF1bHQge1xuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgIGY3UGFnZSxcbiAgICB9LFxuICB9XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInBhZ2VcIj5cbiAgICA8ZGl2IGNsYXNzPVwibmF2YmFyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwibmF2YmFyLWlubmVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0aXRsZVwiPkFib3V0IE5ld3M8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxwPkFib3V0IE5ld3M8L3A+XG4gICAgPHVsPlxuICAgICAgPGxpPlxuICAgICAgICA8YSBocmVmPVwiL2Fib3V0L1wiPkFib3V0PC9hPlxuICAgICAgPC9saT5cbiAgICAgIDxsaT5cbiAgICAgICAgPGEgaHJlZj1cIi9hYm91dC1uZXdzL1wiPkFib3V0IE5ld3M8L2E+XG4gICAgICA8L2xpPlxuICAgICAgPGxpPlxuICAgICAgICA8YSBocmVmPVwiL2Fib3V0LXNlcnZpY2VzL1wiPkFib3V0IFNlcnZpY2VzPC9hPlxuICAgICAgPC9saT5cbiAgICAgIDxsaT5cbiAgICAgICAgPGEgaHJlZj1cIi9hYm91dC1jb250YWN0cy9cIj5BYm91dCBDb250YWN0czwvYT5cbiAgICAgIDwvbGk+XG4gICAgPC91bD5cbiAgICA8cD48YSBocmVmPVwiXCIgY2xhc3M9XCJiYWNrXCI+QmFjazwvYT48L3A+XG4gICAgPHA+PGEgaHJlZj1cIi9hYm91dC9cIiBjbGFzcz1cImJhY2tcIiBkYXRhLWZvcmNlPVwidHJ1ZVwiPkJhY2sgVG8gSG9tZTwvYT48L3A+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG4gIGltcG9ydCB7IGY3UGFnZSB9IGZyb20gJy4uLy4uL3NyYy9mcmFtZXdvcms3LXZ1ZS5qcyc7XG4gIGV4cG9ydCBkZWZhdWx0IHtcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICBmN1BhZ2UsXG4gICAgfSxcbiAgfVxuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJwYWdlXCI+XG4gICAgPGRpdiBjbGFzcz1cIm5hdmJhclwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm5hdmJhci1pbm5lclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGl0bGVcIj5BYm91dCBTZXJ2aWNlczwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPHA+QWJvdXQgU2VydmljZXM8L3A+XG4gICAgPHA+e3twcm9wMX19IHt7cHJvcDJ9fTwvcD5cbiAgICA8cD57eyRyb3V0ZS5xdWVyeS5mb299fSB7eyRyb3V0ZS5xdWVyeS5iYXJ9fTwvcD5cbiAgICA8cD57eyRyb3V0ZS5wYXJhbXMucHJvcDF9fSB7eyRyb3V0ZS5wYXJhbXMucHJvcDJ9fTwvcD5cbiAgICA8dWw+XG4gICAgICA8bGk+XG4gICAgICAgIDxhIGhyZWY9XCIvYWJvdXQvXCI+QWJvdXQ8L2E+XG4gICAgICA8L2xpPlxuICAgICAgPGxpPlxuICAgICAgICA8YSBocmVmPVwiL2Fib3V0LW5ld3MvXCI+QWJvdXQgTmV3czwvYT5cbiAgICAgIDwvbGk+XG4gICAgICA8bGk+XG4gICAgICAgIDxhIGhyZWY9XCIvYWJvdXQtc2VydmljZXMvXCI+QWJvdXQgU2VydmljZXM8L2E+XG4gICAgICA8L2xpPlxuICAgICAgPGxpPlxuICAgICAgICA8YSBocmVmPVwiL2Fib3V0LWNvbnRhY3RzL1wiPkFib3V0IENvbnRhY3RzPC9hPlxuICAgICAgPC9saT5cbiAgICA8L3VsPlxuICAgIDxwPjxhIGhyZWY9XCJcIiBjbGFzcz1cImJhY2tcIj5CYWNrPC9hPjwvcD5cbiAgICA8cD48YSBocmVmPVwiL2Fib3V0L1wiIGNsYXNzPVwiYmFja1wiIGRhdGEtZm9yY2U9XCJ0cnVlXCI+QmFjayBUbyBIb21lPC9hPjwvcD5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbiAgaW1wb3J0IHsgZjdQYWdlIH0gZnJvbSAnLi4vLi4vc3JjL2ZyYW1ld29yazctdnVlLmpzJztcbiAgZXhwb3J0IGRlZmF1bHQge1xuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgIGY3UGFnZSxcbiAgICB9LFxuICAgIHByb3BzOiBbJ3Byb3AxJywgJ3Byb3AyJ10sXG4gICAgYmVmb3JlQ3JlYXRlKCkge1xuICAgICAgY29uc29sZS5sb2coJ3BhZ2UgYmVmb3JlIGNyZWF0ZScpO1xuICAgIH0sXG4gICAgY3JlYXRlZCgpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdwYWdlIGNyZWF0ZWQnKVxuICAgIH1cbiAgfVxuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJwYWdlXCI+XG4gICAgPGRpdiBjbGFzcz1cIm5hdmJhclwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm5hdmJhci1pbm5lclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGl0bGVcIj5BYm91dCBDb250YWN0czwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPHA+QWJvdXQgQ29udGFjdHM8L3A+XG4gICAgPHVsPlxuICAgICAgPGxpPlxuICAgICAgICA8YSBocmVmPVwiL2Fib3V0L1wiPkFib3V0PC9hPlxuICAgICAgPC9saT5cbiAgICAgIDxsaT5cbiAgICAgICAgPGEgaHJlZj1cIi9hYm91dC1uZXdzL1wiPkFib3V0IE5ld3M8L2E+XG4gICAgICA8L2xpPlxuICAgICAgPGxpPlxuICAgICAgICA8YSBocmVmPVwiL2Fib3V0LXNlcnZpY2VzL1wiPkFib3V0IFNlcnZpY2VzPC9hPlxuICAgICAgPC9saT5cbiAgICAgIDxsaT5cbiAgICAgICAgPGEgaHJlZj1cIi9hYm91dC1jb250YWN0cy9cIj5BYm91dCBDb250YWN0czwvYT5cbiAgICAgIDwvbGk+XG4gICAgPC91bD5cbiAgICA8cD48YSBocmVmPVwiXCIgY2xhc3M9XCJiYWNrXCI+QmFjazwvYT48L3A+XG4gICAgPHA+PGEgaHJlZj1cIi9hYm91dC9cIiBjbGFzcz1cImJhY2tcIiBkYXRhLWZvcmNlPVwidHJ1ZVwiPkJhY2sgVG8gSG9tZTwvYT48L3A+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG4gIGltcG9ydCB7IGY3UGFnZSB9IGZyb20gJy4uLy4uL3NyYy9mcmFtZXdvcms3LXZ1ZS5qcyc7XG4gIGV4cG9ydCBkZWZhdWx0IHtcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICBmN1BhZ2UsXG4gICAgfSxcbiAgfVxuPC9zY3JpcHQ+XG4iLCIvKiBlc2xpbnQgaW1wb3J0L25vLWV4dHJhbmVvdXMtZGVwZW5kZW5jaWVzOiBcIm9mZlwiICovXG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBGcmFtZXdvcms3VnVlIH0gZnJvbSAnLi4vc3JjL2ZyYW1ld29yazctdnVlJztcbmltcG9ydCBBcHAgZnJvbSAnLi9hcHAudnVlJztcblxuaW1wb3J0IEFib3V0UGFnZSBmcm9tICcuL3BhZ2VzL2Fib3V0LnZ1ZSc7XG5pbXBvcnQgQWJvdXROZXdzIGZyb20gJy4vcGFnZXMvYWJvdXQtbmV3cy52dWUnO1xuaW1wb3J0IEFib3V0U2VydmljZXMgZnJvbSAnLi9wYWdlcy9hYm91dC1zZXJ2aWNlcy52dWUnO1xuaW1wb3J0IEFib3V0Q29udGFjdHMgZnJvbSAnLi9wYWdlcy9hYm91dC1jb250YWN0cy52dWUnO1xuXG4vLyBJbnN0YWxsIFBsdWdpblxuVnVlLnVzZShGcmFtZXdvcms3VnVlKTtcblxuLy8gSW5pdCBWdWUgQXBwXG5uZXcgVnVlKHtcbiAgLy8gUm9vdCBFbGVtZW50XG4gIGVsOiAnI2FwcCcsXG4gIHJlbmRlcjogYyA9PiBjKCdhcHAnKSxcbiAgY29tcG9uZW50czoge1xuICAgIEFwcCxcbiAgfSxcbiAgcm91dGVzOiBbXG4gICAge1xuICAgICAgcGF0aDogJy9hYm91dC8nLFxuICAgICAgY29tcG9uZW50OiBBYm91dFBhZ2UsXG4gICAgfSxcbiAgICB7XG4gICAgICBwYXRoOiAnL2Fib3V0LW5ld3MvJyxcbiAgICAgIGNvbXBvbmVudDogQWJvdXROZXdzLFxuICAgIH0sXG4gICAge1xuICAgICAgcGF0aDogJy9hYm91dC1zZXJ2aWNlcy86cHJvcDEvOnByb3AyLycsXG4gICAgICBjb21wb25lbnQ6IEFib3V0U2VydmljZXMsXG4gICAgfSxcbiAgICB7XG4gICAgICBwYXRoOiAnL2Fib3V0LWNvbnRhY3RzLycsXG4gICAgICBjb21wb25lbnQ6IEFib3V0Q29udGFjdHMsXG4gICAgfSxcbiAgXSxcbn0pO1xuIl0sIm5hbWVzIjpbImFyZ3VtZW50cyIsIlZ1ZSQzIiwibGV0IiwiY29uc3QiLCJpc0FycmF5IiwiaXNPYmplY3QiLCJleHRlbmQiLCJVdGlscyIsInRoaXMiLCJpIiwidHJhbnNmb3JtIiwiayIsImh0bWwiLCJ0ZXh0Iiwic3VwZXIiLCIkIiwibWVyZ2VkUGF0aHNSb3V0ZXMiLCJidXR0b25UcmFuc2xhdGUiLCJ0cmFuc2l0aW9uIiwiZXZlbnRzIiwiT2JzZXJ2ZXIiLCJPYnNlcnZlciQxIiwic2V0VHJhbnNsYXRlIiwiVnVlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7O0FBU0EsU0FBUyxPQUFPLEVBQUUsQ0FBQyxFQUFFO0VBQ25CLE9BQU8sQ0FBQyxLQUFLLFNBQVMsSUFBSSxDQUFDLEtBQUssSUFBSTtDQUNyQzs7QUFFRCxTQUFTLEtBQUssRUFBRSxDQUFDLEVBQUU7RUFDakIsT0FBTyxDQUFDLEtBQUssU0FBUyxJQUFJLENBQUMsS0FBSyxJQUFJO0NBQ3JDOztBQUVELFNBQVMsTUFBTSxF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V0FBVyxLQUFLLE1BQU0sQ0FBQztHQUN6RjtFQUNELE1BQU0saUJBQUEsR0FBVTs7OztJQUNkRCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7SUFDaEJBLElBQUksRUFBRSxDQUFDO0lBQ1BBLElBQUksSUFBSSxDQUFDO0lBQ1QsSUFBSSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLEVBQUU7TUFDaEMsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztNQUNmLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDYixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztNQUNsQixJQUFJLEdBQUcsSUFBSSxDQUFDO0tBQ2IsTUFBTTtNQUNMLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDYixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztNQUNsQixJQUFJLEdBQUcsSUFBSSxDQUFDO0tBQ2I7SUFDRCxLQUFLQSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtNQUN2Q0MsSUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQzNCLElBQUksVUFBVSxLQUFLLFNBQVMsSUFBSSxVQUFVLEtBQUssSUFBSSxFQUFFO1FBQ25EQSxJQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ2xELEtBQUtELElBQUksU0FBUyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxTQUFTLEdBQUcsR0FBRyxFQUFFLFNBQVMsSUFBSSxDQUFDLEVBQUU7VUFDL0VDLElBQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztVQUNyQ0EsSUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLHdCQUF3QixDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztVQUNsRSxJQUFJLElBQUksS0FBSyxTQUFTLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUN6QyxJQUFJLENBQUMsSUFBSSxFQUFFO2NBQ1QsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUNuQyxNQUFNLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFO2NBQzdFLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2FBQ2hELE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRTtjQUM5RSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO2NBQ2pCLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2FBQ2hELE1BQU07Y0FDTCxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ25DO1dBQ0Y7U0FDRjtPQUNGO0tBQ0Y7SUFDRCxPQUFPLEVBQUUsQ0FBQztHQUNYO0NBQ0YsQ0FBQzs7QUFFRixTQUFTLE1BQU0sR0FBRztFQUNoQkEsSUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7O0VBRXRDQSxJQUFNLE1BQU0sR0FBRztJQUNiLEdBQUcsRUFBRSxLQUFLO0lBQ1YsT0FBTyxFQUFFLEtBQUs7SUFDZCxhQUFhLEVBQUUsS0FBSztJQUNwQixPQUFPLEVBQUUsS0FBSztJQUNkLE9BQU8sRUFBRSxLQUFLO0lBQ2QsTUFBTSxFQUFFLEtBQUs7SUFDYixJQUFJLEVBQUUsS0FBSztJQUNYLElBQUksRUFBRSxLQUFLO0lBQ1gsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLElBQUksTUFBTSxDQUFDLFFBQVE7SUFDMUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxPQUFPLElBQUksTUFBTSxDQUFDLFFBQVE7R0FDNUMsQ0FBQzs7RUFFRkEsSUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0VBQzlEQSxJQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7RUFDeERBLElBQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQztFQUM5Q0EsSUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0VBQ2pEQSxJQUFNLE1BQU0sR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7Ozs7RUFJL0QsSUFBSSxPQUFPLEVBQUU7SUFDWCxNQUFNLENBQUMsRUFBRSxHQUFHLFNBQVMsQ0FBQztJQUN0QixNQUFNLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QixNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztHQUN2Qjs7RUFFRCxJQUFJLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRTtJQUN2QixNQUFNLENBQUMsRUFBRSxHQUFHLFNBQVMsQ0FBQztJQUN0QixNQUFNLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QixNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztJQUN0QixNQUFNLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQ2hFO0VBQ0QsSUFBSSxJQUFJLElBQUksTUFBTSxJQUFJLElBQUksRUFBRTtJQUMxQixNQUFNLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQztJQUNsQixNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztHQUNuQjs7RUFFRCxJQUFJLE1BQU0sSUFBSSxDQUFDLElBQUksRUFBRTtJQUNuQixNQUFNLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2hELE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0dBQ3RCO0VBQ0QsSUFBSSxJQUFJLEVBQUU7SUFDUixNQUFNLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzlDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0dBQ3BCO0VBQ0QsSUFBSSxJQUFJLEVBQUU7SUFDUixNQUFNLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDL0QsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7R0FDdEI7O0VBRUQsSUFBSSxNQUFNLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7SUFDakUsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQUU7TUFDM0MsTUFBTSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN4RTtHQUNGOzs7RUFHRCxNQUFNLENBQUMsT0FBTyxHQUFHLEVBQUUsTUFBTSxDQUFDLEVBQUUsSUFBSSxNQUFNLENBQUMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQzs7O0VBR2xFLE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxNQUFNLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7OztFQUdwRixJQUFJLE1BQU0sQ0FBQyxFQUFFLElBQUksTUFBTSxDQUFDLEVBQUUsS0FBSyxLQUFLLEVBQUU7SUFDcENBLElBQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pEQSxJQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDckUsTUFBTSxDQUFDLFNBQVM7TUFDZCxDQUFDLE1BQU0sQ0FBQyxPQUFPO09BQ2QsSUFBSSxJQUFJLE1BQU0sQ0FBQztPQUNmLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO01BQ2hGLFlBQVksSUFBSSxZQUFZLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDbkY7OztFQUdELE1BQU0sQ0FBQyxjQUFjLEdBQUcsU0FBUyxjQUFjLEdBQUc7SUFDaEQsSUFBSSxNQUFNLENBQUMsT0FBTyxLQUFLLE1BQU0sQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLFdBQVcsS0FBSyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFO01BQzdHLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFDRCxPQUFPLEtBQUssQ0FBQztHQUNkLENBQUM7RUFDRixNQUFNLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQzs7O0VBRzNDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixJQUFJLENBQUMsQ0FBQzs7O0VBR2pELE9BQU8sTUFBTSxDQUFDO0NBQ2Y7O0FBRUQsSUFBSSxRQUFRLEdBQUcsTUFBTSxFQUFFLENBQUM7O0FBRXhCLElBQU0sZUFBZSxHQUFDLHdCQUNULENBQUMsTUFBVyxFQUFFLE9BQVksRUFBRTtpQ0FBckIsR0FBRyxFQUFFLENBQVM7bUNBQUEsR0FBRyxFQUFFOztFQUNyQyxJQUFRLElBQUksR0FBRyxJQUFJLENBQUM7RUFDcEIsSUFBTSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7OztFQUd2QixJQUFNLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQztFQUMvQixJQUFNLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQzs7RUFFNUIsSUFBTSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFO0lBQ25DLE1BQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxTQUFTLEVBQUU7TUFDaEQsSUFBTSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztLQUMvQyxDQUFDLENBQUM7R0FDSjtDQUNGLENBQUE7QUFDSCwwQkFBRSxFQUFFLGdCQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUU7RUFDcEIsSUFBUSxJQUFJLEdBQUcsSUFBSSxDQUFDO0VBQ3BCLElBQU0sT0FBTyxPQUFPLEtBQUssVUFBVSxFQUFFLEVBQUEsT0FBTyxJQUFJLENBQUMsRUFBQTtFQUNqRCxNQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLEtBQUssRUFBRTtJQUNsQyxJQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFBLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUE7SUFDckUsSUFBTSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7R0FDM0MsQ0FBQyxDQUFDO0VBQ0wsT0FBUyxJQUFJLENBQUM7Q0FDYixDQUFBO0FBQ0gsMEJBQUUsSUFBSSxrQkFBQyxNQUFNLEVBQUUsT0FBTyxFQUFFO0VBQ3RCLElBQVEsSUFBSSxHQUFHLElBQUksQ0FBQztFQUNwQixJQUFNLE9BQU8sT0FBTyxLQUFLLFVBQVUsRUFBRSxFQUFBLE9BQU8sSUFBSSxDQUFDLEVBQUE7RUFDakQsU0FBVyxXQUFXLEdBQVU7Ozs7SUFDOUIsT0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDNUIsSUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7R0FDL0I7RUFDSCxPQUFTLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0NBQ3JDLENBQUE7QUFDSCwwQkFBRSxHQUFHLGlCQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUU7RUFDckIsSUFBUSxJQUFJLEdBQUcsSUFBSSxDQUFDO0VBQ3BCLE1BQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsS0FBSyxFQUFFO0lBQ2xDLElBQU0sT0FBTyxPQUFPLEtBQUssV0FBVyxFQUFFO01BQ3BDLElBQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQ2xDLE1BQU07TUFDUCxJQUFNLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLFlBQVksRUFBRSxLQUFLLEVBQUU7UUFDMUQsSUFBTSxZQUFZLEtBQUssT0FBTyxFQUFFO1VBQzlCLElBQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztTQUM5QztPQUNGLENBQUMsQ0FBQztLQUNKO0dBQ0YsQ0FBQyxDQUFDO0VBQ0wsT0FBUyxJQUFJLENBQUM7Q0FDYixDQUFBO0FBQ0gsMEJBQUUsSUFBSSxvQkFBVTs7OztFQUNkLElBQVEsSUFBSSxHQUFHLElBQUksQ0FBQztFQUNwQixJQUFNLE1BQU0sQ0FBQztFQUNiLElBQU0sSUFBSSxDQUFDO0VBQ1gsSUFBTSxPQUFPLENBQUM7RUFDZCxJQUFNLGFBQWEsQ0FBQztFQUNwQixJQUFNLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0lBQzNELE1BQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkIsSUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNwQyxPQUFTLEdBQUcsSUFBSSxDQUFDO0lBQ2pCLGFBQWUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO0dBQ3BDLE1BQU07SUFDUCxNQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUMxQixJQUFNLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUN0QixPQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUM7SUFDcEMsYUFBZSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQztHQUM1RTtFQUNILElBQVEsV0FBVyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDekUsSUFBUSxXQUFXLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxVQUFBLFNBQVMsRUFBQyxTQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxHQUFBLENBQUMsQ0FBQztFQUNyRixJQUFRLFlBQVksR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLFVBQUEsU0FBUyxFQUFDLFNBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUEsQ0FBQyxDQUFDO0VBQ3pGLFdBQWEsQ0FBQyxPQUFPLENBQUMsVUFBQyxLQUFLLEVBQUU7SUFDNUIsSUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxFQUFFO01BQ2pDLElBQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsWUFBWSxFQUFFO1FBQ25ELFlBQWMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO09BQ25DLENBQUMsQ0FBQztLQUNKO0dBQ0YsQ0FBQyxDQUFDO0VBQ0wsSUFBTSxhQUFhLElBQUksYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7SUFDL0MsYUFBZSxDQUFDLE9BQU8sQ0FBQyxVQUFDLFlBQVksRUFBRTtNQUNyQyxZQUFjLENBQUMsSUFBSSxNQUFBLENBQUMsZ0JBQUEsWUFBWSxXQUFFLElBQU8sRUFBQSxDQUFDLENBQUM7S0FDMUMsQ0FBQyxDQUFDO0dBQ0o7RUFDSCxPQUFTLElBQUksQ0FBQztDQUNiLENBQUE7QUFDSCwwQkFBRSx3QkFBd0Isc0NBQUMsY0FBYyxFQUFFO0VBQ3pDLElBQVEsUUFBUSxHQUFHLElBQUksQ0FBQztFQUN4QixJQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxFQUFBLE9BQU8sRUFBQTtFQUNoQyxNQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxVQUFVLEVBQUU7SUFDbkQsSUFBUSxNQUFNLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQzs7SUFFOUMsSUFBTSxNQUFNLENBQUMsTUFBTSxFQUFFO01BQ25CLEtBQU8sQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUM3QztHQUNGLENBQUMsQ0FBQztDQUNKLENBQUE7QUFDSCwwQkFBRSxrQkFBa0IsZ0NBQUMsYUFBa0IsRUFBRTtpREFBUCxHQUFHLEVBQUU7O0VBQ3JDLElBQVEsUUFBUSxHQUFHLElBQUksQ0FBQztFQUN4QixJQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxFQUFBLE9BQU8sRUFBQTtFQUNoQyxNQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxVQUFVLEVBQUU7SUFDbkQsSUFBUSxNQUFNLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM5QyxJQUFRLFlBQVksR0FBRyxhQUFhLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDOztJQUV2RCxJQUFNLE1BQU0sQ0FBQyxRQUFRLEVBQUU7TUFDckIsTUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsY0FBYyxFQUFFO1FBQ3RELElBQVEsVUFBVSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDckQsSUFBTSxPQUFPLFVBQVUsS0FBSyxVQUFVLEVBQUU7VUFDdEMsUUFBVSxDQUFDLGNBQWMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDdEQsTUFBTTtVQUNQLFFBQVUsQ0FBQyxjQUFjLENBQUMsR0FBRyxVQUFVLENBQUM7U0FDdkM7T0FDRixDQUFDLENBQUM7S0FDSjs7SUFFSCxJQUFNLE1BQU0sQ0FBQyxFQUFFLElBQUksUUFBUSxDQUFDLEVBQUUsRUFBRTtNQUM5QixNQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxlQUFlLEVBQUU7UUFDakQsUUFBVSxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO09BQzFELENBQUMsQ0FBQztLQUNKOzs7SUFHSCxJQUFNLE1BQU0sQ0FBQyxNQUFNLEVBQUU7TUFDbkIsTUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7S0FDNUM7R0FDRixDQUFDLENBQUM7Q0FDSixDQUFBO0FBQ0gsZ0JBQUUsYUFBb0IsMkJBQUMsTUFBTSxFQUFhOzs7O0VBQ3hDLElBQVEsS0FBSyxHQUFHLElBQUksQ0FBQztFQUNyQixJQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsRUFBQSxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsRUFBQTtFQUM3RCxJQUFRLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxNQUFLLENBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sT0FBRSxJQUFFLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQSxFQUFHLENBQUM7RUFDaEcsS0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDOztFQUV6QyxJQUFNLE1BQU0sQ0FBQyxLQUFLLEVBQUU7SUFDbEIsTUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsR0FBRyxFQUFFO01BQ3hDLEtBQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUMxQyxDQUFDLENBQUM7R0FDSjs7RUFFSCxJQUFNLE1BQU0sQ0FBQyxNQUFNLEVBQUU7SUFDbkIsTUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsR0FBRyxFQUFFO01BQ3pDLEtBQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ2pDLENBQUMsQ0FBQztHQUNKOztFQUVILElBQU0sTUFBTSxDQUFDLE9BQU8sRUFBRTtJQUNwQixNQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDckM7RUFDSCxPQUFTLEtBQUssQ0FBQztDQUNkLENBQUE7QUFDSCxnQkFBRSxHQUFVLGlCQUFDLE1BQU0sRUFBYTs7OztFQUM5QixJQUFRLEtBQUssR0FBRyxJQUFJLENBQUM7RUFDckIsSUFBTSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO0lBQzNCLE1BQVEsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDLEVBQUMsU0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFBLENBQUMsQ0FBQztHQUM3QztFQUNILE9BQVMsS0FBSyxDQUFDLGFBQWEsTUFBQSxDQUFDLFNBQUEsTUFBTSxXQUFFLE1BQVMsRUFBQSxDQUFDLENBQUM7Q0FDL0MsQ0FBQTs7QUFHSCxJQUFNLFVBQVU7RUFBeUIsbUJBQzVCLENBQUMsTUFBTSxFQUFFO0lBQ2xCVyxlQUFLLEtBQUEsQ0FBQyxNQUFBLE1BQU0sQ0FBQyxDQUFDOzs7SUFHZFgsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDOzs7SUFHakJBLElBQU0sUUFBUSxHQUFHO01BQ2YsSUFBSSxFQUFFLE1BQU07TUFDWixLQUFLLEVBQUUsTUFBTTtNQUNiLElBQUksRUFBRSxJQUFJO01BQ1YsTUFBTSxFQUFFLEVBQUU7S0FDWCxDQUFDOzs7SUFHRixHQUFHLENBQUMsd0JBQXdCLENBQUMsUUFBUSxDQUFDLENBQUM7OztJQUd2QyxHQUFHLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDOzs7SUFHNUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQzs7O0lBRy9CLEdBQUcsQ0FBQyxJQUFJLEdBQUdZLEdBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlCLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQzs7O0lBR3JCLEdBQUcsQ0FBQyxFQUFFLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQzs7O0lBRzdCLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEtBQUssS0FBSyxDQUFDOzs7SUFHOUMsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssS0FBSyxNQUFNLEVBQUU7TUFDL0IsR0FBRyxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsR0FBRyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUM7S0FDekMsTUFBTTtNQUNMLEdBQUcsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7S0FDOUI7OztJQUdELEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDOzs7SUFHekIsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtNQUNuQixHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7S0FDWjs7O0lBR0QsT0FBTyxHQUFHLENBQUM7R0FDWjs7OztnREFBQTtFQUNELHFCQUFBLElBQUksb0JBQUc7SUFDTFosSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDO0lBQ2pCLElBQUksR0FBRyxDQUFDLFdBQVcsRUFBRSxFQUFBLE9BQU8sRUFBQTs7SUFFNUIsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMseUJBQXlCLENBQUMsQ0FBQzs7O0lBRzdDLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRTtNQUNYWSxHQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztLQUM5Qjs7O0lBR0QsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQzs7O0lBR3JDQSxHQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7OztJQUdwRCxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNkLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxVQUFVLEVBQUU7TUFDNUQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDckQsTUFBTSxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO01BQzFCLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3pDOztJQUVELEdBQUcsQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ2pCLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7TUFDdEIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDL0M7O0lBRUQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxZQUFHO01BQ2pCLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLHlCQUF5QixDQUFDLENBQUM7S0FDakQsQ0FBQyxDQUFDOztJQUVILEdBQUcsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO0lBQ3ZCLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7R0FDbEIsQ0FBQTtFQUNELFdBQUEsS0FBWSxxQkFBVTs7OztJQUNwQixPQUFPLG9DQUFJLGVBQWUsbUJBQUMsSUFBTyxDQUFDLEdBQUEsQ0FBQztHQUNyQyxDQUFBOzs7RUEzRnNCLGVBNEZ4QixHQUFBOztBQUVELFVBQVUsQ0FBQyxLQUFLLEdBQUcsZUFBZSxDQUFDOztBQUVuQyxJQUFJLE9BQU8sR0FBRztFQUNaLElBQUksRUFBRSxPQUFPO0VBQ2IsS0FBSyxFQUFFO0lBQ0wsS0FBSyxFQUFFLEtBQUs7R0FDYjtFQUNELE1BQU0sRUFBRTtJQUNOLE9BQUEsS0FBSztHQUNOO0NBQ0YsQ0FBQzs7QUFFRlosSUFBTSxTQUFTLEdBQUcsWUFBWSxDQUFDO0FBQy9CQSxJQUFNLE9BQU8sR0FBRztFQUNkLEdBQUcsY0FBQSxDQUFDLEdBQUcsRUFBRTtJQUNQLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUU7TUFDckMsSUFBSTtRQUNGQSxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFDLEVBQUMsR0FBRSxTQUFTLEdBQUcsR0FBRyxFQUFHLENBQUMsQ0FBQztRQUM1RSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7T0FDaEIsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztPQUNYO0tBQ0YsQ0FBQyxDQUFDO0dBQ0o7RUFDRCxHQUFHLGNBQUEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFO0lBQ2QsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRTtNQUNyQyxJQUFJO1FBQ0YsTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUMsRUFBQyxHQUFFLFNBQVMsR0FBRyxHQUFHLEdBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3pFLE9BQU8sRUFBRSxDQUFDO09BQ1gsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztPQUNYO0tBQ0YsQ0FBQyxDQUFDO0dBQ0o7RUFDRCxNQUFNLGlCQUFBLENBQUMsR0FBRyxFQUFFO0lBQ1YsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRTtNQUNyQyxJQUFJO1FBQ0YsTUFBTSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUMsRUFBQyxHQUFFLFNBQVMsR0FBRyxHQUFHLEVBQUcsQ0FBQztRQUNyRCxPQUFPLEVBQUUsQ0FBQztPQUNYLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7T0FDWDtLQUNGLENBQUMsQ0FBQztHQUNKO0VBQ0QsS0FBSyxnQkFBQSxHQUFHOztHQUVQO0VBQ0QsTUFBTSxpQkFBQSxHQUFHOztHQUVSO0VBQ0QsSUFBSSxlQUFBLEdBQUc7SUFDTCxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFFO01BQ3JDLElBQUk7UUFDRkEsSUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDO1dBQzFDLE1BQU0sQ0FBQyxVQUFBLE9BQU8sRUFBQyxTQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFBLENBQUM7V0FDbkQsR0FBRyxDQUFDLFVBQUEsT0FBTyxFQUFDLFNBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLEdBQUEsQ0FBQyxDQUFDO1FBQ2xELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztPQUNmLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7T0FDWDtLQUNGLENBQUMsQ0FBQztHQUNKO0VBQ0QsT0FBTyxrQkFBQSxDQUFDLFFBQVEsRUFBRTtJQUNoQixPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFFO01BQ3JDLElBQUk7UUFDRixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUM7V0FDN0IsTUFBTSxDQUFDLFVBQUEsT0FBTyxFQUFDLFNBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUEsQ0FBQztXQUNuRCxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsS0FBSyxFQUFFO1lBQ3hCQSxJQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUMzQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLEtBQUssRUFBRTtjQUM1QixRQUFRLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQzthQUM3QixDQUFDLENBQUM7V0FDSixDQUFDLENBQUM7UUFDTCxPQUFPLEVBQUUsQ0FBQztPQUNYLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7T0FDWDtLQUNGLENBQUMsQ0FBQztHQUNKO0NBQ0YsQ0FBQzs7QUFFRixJQUFJLFNBQVMsR0FBRztFQUNkLElBQUksRUFBRSxTQUFTO0VBQ2YsTUFBTSxFQUFFO0lBQ04sU0FBQSxPQUFPO0dBQ1I7Q0FDRixDQUFDOztBQUVGLElBQUksTUFBTSxHQUFHO0VBQ1gsSUFBSSxFQUFFLFFBQVE7RUFDZCxRQUFRLEVBQUU7SUFDUixPQUFPLGtCQUFBLEdBQUc7TUFDUkEsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDO01BQ2pCQSxJQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO01BQ2pDLE9BQWdDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUM7TUFBeEcsSUFBQSxLQUFLO01BQUUsSUFBQSxNQUFNO01BQUUsSUFBQSxJQUFJO01BQUUsSUFBQSxHQUFHLFVBQXpCO01BQ04sR0FBRyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7TUFDbEIsR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7TUFDcEIsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7TUFDaEIsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7TUFDZCxPQUFPLEVBQUUsT0FBQSxLQUFLLEVBQUUsUUFBQSxNQUFNLEVBQUUsTUFBQSxJQUFJLEVBQUUsS0FBQSxHQUFHLEVBQUUsQ0FBQztLQUNyQztHQUNGO0VBQ0QsRUFBRSxFQUFFO0lBQ0YsSUFBSSxlQUFBLEdBQUc7TUFDTEEsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDOzs7TUFHakIsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDOzs7TUFHZCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLFlBQUc7UUFDbkMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztPQUNwQixFQUFFLEtBQUssQ0FBQyxDQUFDOzs7TUFHVixNQUFNLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLEVBQUUsWUFBRztRQUM5QyxHQUFHLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7T0FDL0IsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxpQkFBaUIsNEJBQUEsR0FBRztNQUNsQkEsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDO01BQ2pCLElBQUksR0FBRyxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtRQUN0QyxJQUFJLE1BQU0sQ0FBQyxXQUFXLEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQyxXQUFXLEtBQUssQ0FBQyxFQUFFLEVBQUU7VUFDM0QsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1NBQzdCO09BQ0Y7O01BRUQsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtRQUNuQixRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7UUFDN0IsVUFBVSxDQUFDLFlBQUc7VUFDWixRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7U0FDOUIsRUFBRSxDQUFDLENBQUMsQ0FBQztPQUNQO0tBQ0Y7SUFDRCxNQUFNLGlCQUFBLEdBQUc7TUFDUEEsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDO01BQ2pCLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUNmO0dBQ0Y7Q0FDRixDQUFDOztBQUVGLElBQUksUUFBUSxHQUFHO0VBQ2IsSUFBSSxFQUFFLFFBQVE7RUFDZCxLQUFLLEVBQUU7SUFDTCxNQUFNLEVBQUUsUUFBUTtHQUNqQjtFQUNELE1BQU0sRUFBRTtJQUNOLE1BQU0sRUFBRSxRQUFRO0dBQ2pCO0VBQ0QsRUFBRSxFQUFFO0lBQ0YsSUFBSSxlQUFBLEdBQUc7TUFDTEEsSUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDO01BQ3RCQSxJQUFNLElBQUksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztNQUU1QyxVQUFVLENBQUMsSUFBSSxFQUFDLHFCQUFvQixJQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFBLEVBQUcsQ0FBQztNQUN6RSxJQUFJLFFBQVEsQ0FBQyxVQUFVLElBQUksQ0FBQyxFQUFFO1FBQzVCLFVBQVUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7T0FDbEM7O01BRUQsSUFBSSxRQUFRLENBQUMsRUFBRSxFQUFFO1FBQ2YsVUFBVSxDQUFDLElBQUksRUFBQyxTQUFRLElBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQSxJQUFJLFNBQVEsSUFBRSxRQUFRLENBQUMsRUFBRSxDQUFBLE1BQUUsSUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxJQUFJLFNBQVEsSUFBRSxRQUFRLENBQUMsRUFBRSxDQUFBLE1BQUUsSUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUEsRUFBRyxDQUFDO1FBQ3pLLElBQUksUUFBUSxDQUFDLEVBQUUsS0FBSyxLQUFLLEVBQUU7VUFDekJBLElBQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztVQUM3RCxLQUFLRCxJQUFJLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN0QyxVQUFVLENBQUMsSUFBSSxFQUFDLGdCQUFlLEdBQUUsQ0FBQyxFQUFHLENBQUM7V0FDdkM7U0FDRjtPQUNGLE1BQU0sSUFBSSxRQUFRLENBQUMsT0FBTyxFQUFFO1FBQzNCLFVBQVUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztPQUNuQzs7TUFFRCxJQUFJLFFBQVEsQ0FBQyxTQUFTLEVBQUU7UUFDdEIsVUFBVSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO09BQzNDLE1BQU07UUFDTCxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO09BQ2pEOzs7TUFHRCxVQUFVLENBQUMsT0FBTyxDQUFDLFVBQUMsU0FBUyxFQUFFO1FBQzdCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO09BQy9CLENBQUMsQ0FBQztLQUNKO0dBQ0Y7Q0FDRixDQUFDOztBQUVGLFNBQVMsdUJBQXVCLEdBQUc7RUFDakNBLElBQUksZUFBZSxHQUFHLEtBQUssQ0FBQztFQUM1QixJQUFJO0lBQ0ZDLElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLFNBQVMsRUFBRTtNQUNoRCxHQUFHLGNBQUEsR0FBRztRQUNKLGVBQWUsR0FBRyxJQUFJLENBQUM7T0FDeEI7S0FDRixDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsZ0JBQWdCLENBQUMscUJBQXFCLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0dBQzVELENBQUMsT0FBTyxDQUFDLEVBQUU7SUFDVixlQUFlLEdBQUcsS0FBSyxDQUFDO0dBQ3pCO0VBQ0QsT0FBTyxlQUFlLENBQUM7Q0FDeEI7QUFDRCxTQUFTLFlBQVksR0FBRztFQUN0QixPQUFPLENBQUMsRUFBRSxDQUFDLGNBQWMsSUFBSSxNQUFNLE1BQU0sTUFBTSxDQUFDLGFBQWEsSUFBSSxRQUFRLFlBQVksTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7Q0FDN0c7O0FBRURELElBQUksY0FBYyxHQUFHLEtBQUssQ0FBQztBQUMzQixTQUFTLHFCQUFxQixHQUFHO0VBQy9CQyxJQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0VBQzFDLENBQUMsbUNBQW1DLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLElBQUksRUFBRTtJQUM5RCxJQUFJLGNBQWMsRUFBRSxFQUFBLE9BQU8sRUFBQTtJQUMzQixHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7SUFDMUIsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsS0FBSyxJQUFJLEVBQUUsRUFBQSxjQUFjLEdBQUcsSUFBSSxDQUFDLEVBQUE7R0FDeEQsQ0FBQyxDQUFDO0NBQ0o7QUFDRCxxQkFBcUIsRUFBRSxDQUFDO0FBQ3hCLFNBQVMsbUJBQW1CLEdBQUc7RUFDN0JELElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQztFQUNsQixJQUFJLENBQUMsY0FBYyxFQUFFLEVBQUEsT0FBTyxLQUFLLENBQUMsRUFBQTtFQUNsQ0MsSUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztFQUMxQyxHQUFHLENBQUMsU0FBUyxHQUFHLDZSQUV5RixHQUFFLGNBQWMsNkVBRWpILENBQUU7RUFDVixRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUMvQixRQUFRLENBQUMsY0FBYyxDQUFDLHNCQUFzQixDQUFDLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztFQUMvRCxJQUFJLFFBQVEsQ0FBQyxjQUFjLENBQUMsOEJBQThCLENBQUMsQ0FBQyxTQUFTLEtBQUssRUFBRSxFQUFFO0lBQzVFLEtBQUssR0FBRyxJQUFJLENBQUM7R0FDZDtFQUNELEdBQUcsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ2hDLE9BQU8sS0FBSyxDQUFDO0NBQ2Q7QUFDREEsSUFBTSxTQUFTLEdBQUc7RUFDaEIsS0FBSyxFQUFFLFlBQVksRUFBRTs7RUFFckIsZUFBZSxFQUFFLHVCQUF1QixFQUFFO0VBQzFDLGdCQUFBLGNBQWM7RUFDZCxtQkFBbUIsRUFBRSxtQkFBbUIsRUFBRTtDQUMzQyxDQUFDOztBQUVGLElBQUksT0FBTyxHQUFHO0VBQ1osSUFBSSxFQUFFLFNBQVM7RUFDZixLQUFLLEVBQUU7SUFDTCxPQUFPLEVBQUUsU0FBUztHQUNuQjtFQUNELE1BQU0sRUFBRTtJQUNOLE9BQU8sRUFBRSxTQUFTO0dBQ25CO0VBQ0QsRUFBRSxFQUFFO0lBQ0YsSUFBSSxlQUFBLEdBQUc7TUFDTEEsSUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztNQUM1Q0EsSUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDO01BQ3RCLElBQUksU0FBUyxDQUFDLGNBQWMsRUFBRTtRQUM1QixVQUFVLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDM0MsSUFBSSxTQUFTLENBQUMsbUJBQW1CLEVBQUU7VUFDakMsVUFBVSxDQUFDLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1NBQ2xEO09BQ0Y7O01BRUQsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFDLFNBQVMsRUFBRTtRQUM3QixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztPQUMvQixDQUFDLENBQUM7S0FDSjtHQUNGO0NBQ0YsQ0FBQzs7QUFFRixTQUFTLFNBQVMsR0FBRztFQUNuQkEsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDO0VBQ2pCQSxJQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztFQUNoQ0EsSUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLEtBQUssS0FBSyxJQUFJLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQzs7RUFFOUQsSUFBSSxRQUFRLENBQUMsR0FBRyxJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUU7O0lBRXBDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsWUFBRyxFQUFLLENBQUMsQ0FBQztHQUNqRDs7RUFFREQsSUFBSSxXQUFXLENBQUM7RUFDaEJBLElBQUksV0FBVyxDQUFDO0VBQ2hCQSxJQUFJLGNBQWMsQ0FBQztFQUNuQkEsSUFBSSxhQUFhLENBQUM7RUFDbEJBLElBQUksVUFBVSxDQUFDO0VBQ2ZBLElBQUksZUFBZSxDQUFDO0VBQ3BCQSxJQUFJLFlBQVksQ0FBQztFQUNqQkEsSUFBSSxhQUFhLENBQUM7RUFDbEJBLElBQUksT0FBTyxDQUFDO0VBQ1pBLElBQUksWUFBWSxDQUFDO0VBQ2pCQSxJQUFJLGNBQWMsQ0FBQzs7RUFFbkJBLElBQUksZ0JBQWdCLENBQUM7RUFDckJBLElBQUksYUFBYSxDQUFDOztFQUVsQkEsSUFBSSxjQUFjLENBQUM7RUFDbkJBLElBQUkscUJBQXFCLENBQUM7O0VBRTFCQSxJQUFJLFVBQVUsQ0FBQztFQUNmQSxJQUFJLFlBQVksQ0FBQztFQUNqQkEsSUFBSSxhQUFhLENBQUM7O0VBRWxCLFNBQVMsb0JBQW9CLENBQUMsRUFBRSxFQUFFO0lBQ2hDQyxJQUFNLE1BQU0sR0FBR1ksR0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3JCWixJQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQzNERCxJQUFJLFNBQVMsQ0FBQztJQUNkLElBQUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsRUFBRTtNQUN6QyxTQUFTLEdBQUcsTUFBTSxDQUFDO0tBQ3BCO0lBQ0QsSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtNQUN0QixTQUFTLEdBQUcsU0FBUyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDO0tBQzFEO0lBQ0QsT0FBTyxTQUFTLElBQUksTUFBTSxDQUFDO0dBQzVCOztFQUVELFNBQVMsc0JBQXNCLENBQUMsRUFBRSxFQUFFO0lBQ2xDQyxJQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUM7O0lBRXhELElBQUksV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7TUFDNUIsT0FBTyxLQUFLLENBQUM7S0FDZDs7O0lBR0QsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssS0FBSyxFQUFFO01BQ2xELFdBQVcsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLFlBQUc7UUFDMUIsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzVCLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQztPQUM3QixDQUFDLENBQUM7TUFDSCxXQUFXLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQzdDOztJQUVELE9BQU8sSUFBSSxDQUFDO0dBQ2I7RUFDRCxTQUFTLFNBQVMsR0FBRztJQUNuQixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsRUFBQSxPQUFPLEVBQUE7SUFDOUIsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0dBQzNDO0VBQ0QsU0FBUyxZQUFZLEdBQUc7SUFDdEIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEVBQUEsT0FBTyxFQUFBO0lBQzlCLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUM3QyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7R0FDekI7RUFDRCxTQUFTLGFBQWEsQ0FBQyxFQUFFLEVBQUU7SUFDekJBLElBQU0sS0FBSyxHQUFHLENBQUMsNkJBQTZCLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pELElBQUksRUFBRSxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQSxPQUFPLElBQUksQ0FBQyxFQUFBO0lBQzlFLE9BQU8sS0FBSyxDQUFDO0dBQ2Q7RUFDRCxTQUFTLGdCQUFnQixDQUFDLEVBQUUsRUFBRTtJQUM1QkEsSUFBTSxNQUFNLEdBQUcsQ0FBQyw4QkFBOEIsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDM0QsSUFBSSxRQUFRLENBQUMsYUFBYSxJQUFJLEVBQUUsS0FBSyxRQUFRLENBQUMsYUFBYSxJQUFJLFFBQVEsQ0FBQyxhQUFhLEtBQUssUUFBUSxDQUFDLElBQUksRUFBRTtNQUN2RyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNsRCxPQUFPLEtBQUssQ0FBQztPQUNkO01BQ0QsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUNELE9BQU8sS0FBSyxDQUFDO0dBQ2Q7RUFDRCxTQUFTLG9CQUFvQixDQUFDLEVBQUUsRUFBRTs7Ozs7Ozs7Ozs7Ozs7SUFjaENBLElBQU0sR0FBRyxHQUFHWSxHQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbEIsSUFBSSxFQUFFLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxLQUFLLE9BQU8sS0FBSyxFQUFFLENBQUMsSUFBSSxLQUFLLE1BQU0sSUFBSSxFQUFFLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQyxFQUFFLEVBQUEsT0FBTyxLQUFLLENBQUMsRUFBQTtJQUN2RyxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLEtBQUssUUFBUSxJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUUsRUFBQSxPQUFPLEtBQUssQ0FBQyxFQUFBO0lBQzdFLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsRUFBQSxPQUFPLEtBQUssQ0FBQyxFQUFBO0lBQzFGLElBQUksTUFBTSxDQUFDLGlCQUFpQixJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsRUFBQSxPQUFPLEtBQUssQ0FBQyxFQUFBO0lBQy9FLE9BQU8sSUFBSSxDQUFDO0dBQ2I7RUFDRCxTQUFTLGdCQUFnQixDQUFDLEVBQUUsRUFBRTtJQUM1QixJQUFJLFFBQVEsQ0FBQyxhQUFhLEtBQUssRUFBRSxFQUFFO01BQ2pDLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFDRFosSUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN0Q0EsSUFBTSxVQUFVLEdBQUcsQ0FBQyx5Q0FBeUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDMUUsSUFBSSxFQUFFLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBQSxPQUFPLEtBQUssQ0FBQyxFQUFBO0lBQzdDLElBQUksR0FBRyxLQUFLLFVBQVUsRUFBRSxFQUFBLE9BQU8sSUFBSSxDQUFDLEVBQUE7SUFDcEMsSUFBSSxHQUFHLEtBQUssUUFBUSxFQUFFO01BQ3BCLElBQUksUUFBUSxDQUFDLE9BQU8sRUFBRSxFQUFBLE9BQU8sS0FBSyxDQUFDLEVBQUE7TUFDbkMsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUNELElBQUksR0FBRyxLQUFLLE9BQU8sSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBQSxPQUFPLElBQUksQ0FBQyxFQUFBO0lBQ3BFLE9BQU8sS0FBSyxDQUFDO0dBQ2Q7RUFDRCxTQUFTLGtCQUFrQixDQUFDLEVBQUUsRUFBRTtJQUM5QkEsSUFBTSxHQUFHLEdBQUdZLEdBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsQmIsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ25CLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7TUFDdEQsSUFBSSxRQUFRLENBQUMsT0FBTyxFQUFFO1FBQ3BCLE9BQU8sR0FBRyxLQUFLLENBQUM7T0FDakIsTUFBTSxJQUFJLFFBQVEsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUMxQyxPQUFPLEdBQUcsSUFBSSxDQUFDO09BQ2hCLE1BQU0sRUFBQSxPQUFPLEdBQUcsS0FBSyxDQUFDLEVBQUE7S0FDeEI7SUFDRCxPQUFPLE9BQU8sQ0FBQztHQUNoQjs7O0VBR0QsU0FBUyxpQkFBaUIsQ0FBQyxFQUFFLEVBQUU7SUFDN0JDLElBQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQztJQUNyREEsSUFBTSxHQUFHLEdBQUdZLEdBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsQixJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLEVBQUU7TUFDMUIsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1FBQzdCLE9BQU8sS0FBSyxDQUFDO09BQ2Q7TUFDRCxPQUFPLEdBQUcsQ0FBQztLQUNaLE1BQU0sSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7TUFDakRaLElBQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQ3ZELElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsRUFBRTtRQUN0QyxPQUFPLEtBQUssQ0FBQztPQUNkO01BQ0QsT0FBTyxZQUFZLENBQUM7S0FDckI7SUFDRCxPQUFPLEtBQUssQ0FBQztHQUNkO0VBQ0QsU0FBUyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7SUFDL0IsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFBLE9BQU8sRUFBQTtJQUNqQixVQUFVLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNoRDs7RUFFRCxTQUFTLFlBQVksR0FBRztJQUN0QixJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUEsT0FBTyxFQUFBO0lBQ3hCLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNwQixVQUFVLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLFlBQVksR0FBRyxTQUFTLENBQUM7R0FDMUI7RUFDRCxTQUFTLGdCQUFnQixDQUFDLEVBQUUsRUFBRTtJQUM1QixZQUFZLEdBQUcsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDckMsSUFBSSxDQUFDLFlBQVksSUFBSSxZQUFZLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtNQUM5QyxZQUFZLEdBQUcsU0FBUyxDQUFDO01BQ3pCLE9BQU87S0FDUjtJQUNELElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxZQUFZLENBQUMsRUFBRTtNQUN6QyxZQUFZLENBQUMsWUFBWSxFQUFFLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQztLQUN0RCxNQUFNO01BQ0wsYUFBYSxHQUFHLFVBQVUsQ0FBQyxZQUFHO1FBQzVCLFlBQVksQ0FBQyxZQUFZLEVBQUUsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDO09BQ3RELEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDUjtHQUNGO0VBQ0QsU0FBUyxlQUFlLEdBQUc7SUFDekIsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzVCLFlBQVksRUFBRSxDQUFDO0dBQ2hCO0VBQ0QsU0FBUyxjQUFjLEdBQUc7SUFDeEIsSUFBSSxVQUFVLEVBQUU7TUFDZCxZQUFZLEVBQUUsQ0FBQztLQUNoQixNQUFNLElBQUksWUFBWSxJQUFJLENBQUMsT0FBTyxFQUFFO01BQ25DLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQztNQUM1QixZQUFZLENBQUMsWUFBWSxFQUFFLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQztNQUNyRCxVQUFVLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzdCLE1BQU07TUFDTCxZQUFZLEVBQUUsQ0FBQztLQUNoQjtHQUNGOzs7RUFHRCxTQUFTLGVBQWUsQ0FBQyxDQUFDLEVBQUU7SUFDMUIsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN4RCxJQUFJLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLEVBQUU7TUFDakMsVUFBVSxDQUFDLFlBQUc7UUFDWlksR0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQztPQUNoRCxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ1A7SUFDRCxJQUFJLFNBQVMsRUFBRTtNQUNiLFdBQVcsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO01BQ3RCLFdBQVcsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO01BQ3RCLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDOUM7R0FDRjtFQUNELFNBQVMsZUFBZSxHQUFHO0lBQ3pCQSxHQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQy9DLElBQUksU0FBUyxFQUFFO01BQ2IsZUFBZSxFQUFFLENBQUM7S0FDbkI7R0FDRjtFQUNELFNBQVMsYUFBYSxHQUFHO0lBQ3ZCQSxHQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQy9DLElBQUksU0FBUyxFQUFFO01BQ2IsY0FBYyxFQUFFLENBQUM7S0FDbEI7R0FDRjs7O0VBR0QsU0FBUyxTQUFTLENBQUMsQ0FBQyxFQUFFO0lBQ3BCWixJQUFNLEtBQUssR0FBRyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xDQSxJQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ2hERCxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUM7SUFDeEIsSUFBSSxRQUFRLENBQUMsT0FBTyxJQUFJLGFBQWEsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLEtBQUssUUFBUSxFQUFFO01BQ3pFLFNBQVMsR0FBRyxXQUFXLENBQUM7S0FDekI7SUFDRCxHQUFHLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3RKLEdBQUcsQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUM7O0lBRS9CLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksU0FBUyxDQUFDLFVBQVUsRUFBRTs7O01BRzFDLFVBQVUsQ0FBQyxZQUFZO1VBQ25CLGFBQWEsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztVQUNwRyxhQUFhLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO09BQ3BDLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDUixNQUFNO1FBQ0gsYUFBYSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNwQztHQUNGOzs7RUFHRCxTQUFTLGdCQUFnQixDQUFDLENBQUMsRUFBRTs7O0lBQzNCLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDaEIsWUFBWSxHQUFHLEtBQUssQ0FBQztJQUNyQixJQUFJLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtNQUM5QixJQUFJLGdCQUFnQixFQUFFLEVBQUEsWUFBWSxFQUFFLENBQUMsRUFBQTtNQUNyQyxPQUFPLElBQUksQ0FBQztLQUNiO0lBQ0QsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksZ0JBQWdCLEVBQUU7TUFDNUMsWUFBWSxFQUFFLENBQUM7S0FDaEI7SUFDRCxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUU7TUFDbEIsSUFBSSxjQUFjLEVBQUUsRUFBQSxZQUFZLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBQTtNQUNqRCxjQUFjLEdBQUcsVUFBVSxDQUFDLFlBQUc7UUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsRUFBQSxPQUFPLEVBQUE7UUFDbkQsWUFBWSxHQUFHLElBQUksQ0FBQztRQUNwQixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDbkJhLEdBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO09BQ2hDLEVBQUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO0tBQ3pCO0lBQ0QsSUFBSSxxQkFBcUIsRUFBRSxFQUFBLFlBQVksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLEVBQUE7SUFDL0QsY0FBYyxHQUFHLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7SUFFaEQsSUFBSSxDQUFDLGNBQWMsRUFBRTtNQUNuQixVQUFVLEdBQUcsS0FBSyxDQUFDO01BQ25CLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFDRCxJQUFJLFFBQVEsQ0FBQyxHQUFHLEtBQUssUUFBUSxDQUFDLE9BQU8sSUFBSSxjQUFjLElBQUksTUFBTSxDQUFDLEVBQUU7TUFDbEVaLElBQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztNQUN4QztRQUNFLFNBQVMsQ0FBQyxVQUFVO1FBQ3BCLFNBQVMsQ0FBQyxTQUFTLEtBQUssUUFBUSxDQUFDLElBQUk7U0FDcEMsQ0FBQyxTQUFTLENBQUMsV0FBVyxJQUFJLFFBQVEsQ0FBQyxhQUFhLEtBQUssU0FBUyxDQUFDLFNBQVMsQ0FBQztRQUMxRTtRQUNBLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFDdkIsT0FBTyxJQUFJLENBQUM7T0FDYjs7TUFFRCxlQUFlLEdBQUcsS0FBSyxDQUFDO0tBQ3pCO0lBQ0QsSUFBSSxRQUFRLENBQUMsT0FBTyxFQUFFO01BQ3BCLElBQUksZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQzlCLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7T0FDL0I7S0FDRjs7SUFFRCxVQUFVLEdBQUcsSUFBSSxDQUFDO0lBQ2xCLGFBQWEsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ3pCLGNBQWMsR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUM7SUFDeEMsV0FBVyxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ3ZDLFdBQVcsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7O0lBR3ZDLElBQUksUUFBUSxDQUFDLEdBQUcsRUFBRTtNQUNoQixZQUFZLEdBQUcsU0FBUyxDQUFDO01BQ3pCWSxHQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQUc7UUFDakNaLElBQU0sTUFBTSxHQUFHSyxNQUFJLENBQUM7UUFDcEIsSUFBSSxNQUFNLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLElBQUksQ0FBQyxZQUFZLEVBQUU7VUFDOUQsWUFBWSxHQUFHLE1BQU0sQ0FBQztVQUN0QixZQUFZLENBQUMsV0FBVyxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUM7U0FDbkQ7T0FDRixDQUFDLENBQUM7S0FDSjtJQUNELElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFHLGFBQWEsSUFBSSxNQUFNLENBQUMsNEJBQTRCLEVBQUU7TUFDdkUsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO0tBQ3BCOztJQUVELElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRTtNQUN0QixnQkFBZ0IsR0FBRyxvQkFBb0IsQ0FBQyxhQUFhLENBQUMsQ0FBQzs7OztNQUl2RCxJQUFJLENBQUMsc0JBQXNCLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtRQUM3QyxTQUFTLEVBQUUsQ0FBQztPQUNiLE1BQU07UUFDTCxhQUFhLEdBQUcsVUFBVSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztPQUMzQztLQUNGO0lBQ0QsSUFBSSxTQUFTLEVBQUU7TUFDYixnQkFBZ0IsQ0FBQyxhQUFhLEVBQUUsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0tBQzNEO0lBQ0QsT0FBTyxJQUFJLENBQUM7R0FDYjtFQUNELFNBQVMsZUFBZSxDQUFDLENBQUMsRUFBRTtJQUMxQixJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUEsT0FBTyxFQUFBO0lBQ3hCTCxJQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsMkJBQTJCLENBQUM7SUFDcEQsSUFBSSxRQUFRLEVBQUU7TUFDWkEsSUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7TUFDdkNBLElBQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO01BQ3ZDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDLEdBQUcsUUFBUSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQyxHQUFHLFFBQVEsRUFBRTtRQUN4RixPQUFPLEdBQUcsSUFBSSxDQUFDO09BQ2hCO0tBQ0YsTUFBTTtNQUNMLE9BQU8sR0FBRyxJQUFJLENBQUM7S0FDaEI7SUFDRCxJQUFJLE9BQU8sRUFBRTtNQUNYLFVBQVUsR0FBRyxLQUFLLENBQUM7TUFDbkIsYUFBYSxHQUFHLElBQUksQ0FBQztNQUNyQixPQUFPLEdBQUcsSUFBSSxDQUFDO01BQ2YsSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFO1FBQ2xCLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQztPQUM5QjtNQUNELElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRTtRQUN0QixZQUFZLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDNUIsWUFBWSxFQUFFLENBQUM7T0FDaEI7TUFDRCxJQUFJLFNBQVMsRUFBRTtRQUNiLGVBQWUsRUFBRSxDQUFDO09BQ25CO0tBQ0Y7R0FDRjtFQUNELFNBQVMsY0FBYyxDQUFDLENBQUMsRUFBRTtJQUN6QixZQUFZLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDNUIsWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFDOztJQUU3QixJQUFJLENBQUMsVUFBVSxFQUFFO01BQ2YsSUFBSSxDQUFDLGVBQWUsSUFBSSxjQUFjLEVBQUU7UUFDdEMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsRUFBRTtVQUN4RCxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDcEI7T0FDRjtNQUNELE9BQU8sSUFBSSxDQUFDO0tBQ2I7O0lBRUQsSUFBSSxRQUFRLENBQUMsYUFBYSxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUU7TUFDdkMsSUFBSSxNQUFNLENBQUMsV0FBVyxFQUFFLEVBQUEsWUFBWSxFQUFFLENBQUMsRUFBQTtNQUN2QyxJQUFJLFNBQVMsRUFBRTtRQUNiLGNBQWMsRUFBRSxDQUFDO09BQ2xCO01BQ0QsT0FBTyxJQUFJLENBQUM7S0FDYjs7SUFFRCxJQUFJLENBQUMsZUFBZSxFQUFFO01BQ3BCLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztLQUNwQjs7SUFFRCxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxhQUFhLElBQUksTUFBTSxDQUFDLDRCQUE0QixFQUFFO01BQ3ZFLFVBQVUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUM7TUFDNUIsT0FBTyxJQUFJLENBQUM7S0FDYjs7SUFFRCxhQUFhLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQzs7SUFFNUIsVUFBVSxHQUFHLEtBQUssQ0FBQzs7SUFFbkIsSUFBSSxRQUFRLENBQUMsR0FBRyxJQUFJLFlBQVksRUFBRTtNQUNoQyxJQUFJLFlBQVksQ0FBQyxTQUFTLEtBQUssWUFBWSxDQUFDLFdBQVcsRUFBRTtRQUN2RCxPQUFPLEtBQUssQ0FBQztPQUNkO0tBQ0Y7Ozs7O0lBS0QsSUFBSSxNQUFNLENBQUMsV0FBVyxFQUFFO01BQ3RCLFNBQVMsRUFBRSxDQUFDO01BQ1osVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztLQUM3Qjs7SUFFRCxJQUFJLFNBQVMsRUFBRTtNQUNiLGNBQWMsRUFBRSxDQUFDO0tBQ2xCOzs7SUFHRCxJQUFJLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxFQUFFO01BQ25DLElBQUksUUFBUSxDQUFDLEdBQUcsSUFBSSxRQUFRLENBQUMsT0FBTyxFQUFFO1FBQ3BDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFHLGNBQWMsSUFBSSxHQUFHLEVBQUU7VUFDeEMsYUFBYSxHQUFHLElBQUksQ0FBQztVQUNyQixPQUFPLEtBQUssQ0FBQztTQUNkO1FBQ0QsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3RCLE9BQU8sS0FBSyxDQUFDO09BQ2Q7O01BRUQsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO0tBQ3ZCOzs7SUFHRCxJQUFJLFFBQVEsQ0FBQyxhQUFhLElBQUksYUFBYSxLQUFLLFFBQVEsQ0FBQyxhQUFhLElBQUksUUFBUSxDQUFDLGFBQWEsS0FBSyxRQUFRLENBQUMsSUFBSSxJQUFJLGFBQWEsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLEtBQUssT0FBTyxFQUFFO01BQ3RLLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7S0FDL0I7OztJQUdELENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUNuQixTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDYixPQUFPLEtBQUssQ0FBQztHQUNkO0VBQ0QsU0FBUyxpQkFBaUIsR0FBRztJQUMzQixVQUFVLEdBQUcsS0FBSyxDQUFDO0lBQ25CLGFBQWEsR0FBRyxJQUFJLENBQUM7OztJQUdyQixZQUFZLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDNUIsWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzdCLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRTtNQUN0QixZQUFZLEVBQUUsQ0FBQztLQUNoQjs7O0lBR0QsSUFBSSxTQUFTLEVBQUU7TUFDYixjQUFjLEVBQUUsQ0FBQztLQUNsQjtHQUNGOztFQUVELFNBQVMsV0FBVyxDQUFDLENBQUMsRUFBRTtJQUN0QkQsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDOztJQUV2QixJQUFJLFVBQVUsRUFBRTtNQUNkLGFBQWEsR0FBRyxJQUFJLENBQUM7TUFDckIsVUFBVSxHQUFHLEtBQUssQ0FBQztNQUNuQixPQUFPLElBQUksQ0FBQztLQUNiO0lBQ0QsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLFFBQVEsSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxNQUFNLEVBQUU7TUFDOUUsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUNELElBQUksQ0FBQyxhQUFhLEVBQUU7TUFDbEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDNUIsVUFBVSxHQUFHLElBQUksQ0FBQztPQUNuQjtLQUNGO0lBQ0QsSUFBSSxDQUFDLGNBQWMsRUFBRTtNQUNuQixVQUFVLEdBQUcsSUFBSSxDQUFDO0tBQ25CO0lBQ0QsSUFBSSxRQUFRLENBQUMsYUFBYSxLQUFLLGFBQWEsRUFBRTtNQUM1QyxVQUFVLEdBQUcsSUFBSSxDQUFDO0tBQ25CO0lBQ0QsSUFBSSxDQUFDLENBQUMsbUJBQW1CLEVBQUU7TUFDekIsVUFBVSxHQUFHLElBQUksQ0FBQztLQUNuQjtJQUNELElBQUksQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFO01BQ2pCLFVBQVUsR0FBRyxJQUFJLENBQUM7S0FDbkI7SUFDRCxJQUFJLE1BQU0sQ0FBQyxPQUFPLElBQUksTUFBTSxDQUFDLG9CQUFvQixJQUFJLFlBQVksRUFBRTtNQUNqRSxVQUFVLEdBQUcsS0FBSyxDQUFDO0tBQ3BCO0lBQ0QsSUFBSSxDQUFDLFVBQVUsRUFBRTtNQUNmLENBQUMsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO01BQzdCLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztNQUNwQixJQUFJLGFBQWEsRUFBRTtRQUNqQixJQUFJLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxJQUFJLE9BQU8sRUFBRTtVQUNoRCxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDcEI7T0FDRixNQUFNO1FBQ0wsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO09BQ3BCO01BQ0QsYUFBYSxHQUFHLElBQUksQ0FBQztLQUN0QjtJQUNELHFCQUFxQixHQUFHLFVBQVUsQ0FBQyxZQUFHO01BQ3BDLGNBQWMsR0FBRyxLQUFLLENBQUM7S0FDeEIsR0FBRyxRQUFRLENBQUMsR0FBRyxJQUFJLFFBQVEsQ0FBQyxhQUFhLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDOztJQUV6RCxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUU7TUFDbEIsY0FBYyxHQUFHLFVBQVUsQ0FBQyxZQUFHO1FBQzdCLFlBQVksR0FBRyxLQUFLLENBQUM7T0FDdEIsR0FBRyxRQUFRLENBQUMsR0FBRyxJQUFJLFFBQVEsQ0FBQyxhQUFhLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDO0tBQzFEOztJQUVELE9BQU8sVUFBVSxDQUFDO0dBQ25COztFQUVELFNBQVMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUU7SUFDM0MsR0FBRyxDQUFDLElBQUksQ0FBQztNQUNQLE1BQU0sRUFBRSxJQUFJO01BQ1osSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO01BQ1QsU0FBQSxPQUFPO0tBQ1IsQ0FBQyxDQUFDO0dBQ0o7RUFDRCxTQUFTLFFBQVEsQ0FBQyxDQUFDLEVBQUU7SUFDbkIsaUJBQWlCLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNyQztFQUNELFNBQVMsbUJBQW1CLENBQUMsQ0FBQyxFQUFFO0lBQzlCLGlCQUFpQixDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDMUM7RUFDRCxTQUFTLGtCQUFrQixDQUFDLENBQUMsRUFBRTtJQUM3QixpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQ3pDO0VBQ0QsU0FBUyxpQkFBaUIsQ0FBQyxDQUFDLEVBQUU7SUFDNUIsaUJBQWlCLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztHQUN4QztFQUNELFNBQVMsb0JBQW9CLENBQUMsQ0FBQyxFQUFFO0lBQy9CLGlCQUFpQixDQUFDLG9CQUFvQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNsRDtFQUNELFNBQVMsbUJBQW1CLENBQUMsQ0FBQyxFQUFFO0lBQzlCLGlCQUFpQixDQUFDLG1CQUFtQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNqRDtFQUNELFNBQVMsa0JBQWtCLENBQUMsQ0FBQyxFQUFFO0lBQzdCLGlCQUFpQixDQUFDLGtCQUFrQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNoRDs7RUFFREMsSUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFDLGVBQWUsR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUM7RUFDOUVBLElBQU0sY0FBYyxHQUFHLFNBQVMsQ0FBQyxlQUFlLEdBQUcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEdBQUcsS0FBSyxDQUFDOztFQUU5RSxRQUFRLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQzs7RUFFbkQsSUFBSSxTQUFTLENBQUMsZUFBZSxFQUFFO0lBQzdCLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxtQkFBbUIsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUN0RixRQUFRLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDcEYsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLGlCQUFpQixFQUFFLGNBQWMsQ0FBQyxDQUFDOztJQUVsRixRQUFRLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsb0JBQW9CLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDeEYsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLG1CQUFtQixFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ3RGLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxrQkFBa0IsRUFBRSxlQUFlLENBQUMsQ0FBQztHQUNyRixNQUFNO0lBQ0wsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLFNBQVMsT0FBTyxDQUFDLENBQUMsRUFBRTtNQUNuRSxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO01BQ2xDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDcEMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNWLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxTQUFTLE9BQU8sQ0FBQyxDQUFDLEVBQUU7TUFDbEUsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztNQUNqQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ25DLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDVixRQUFRLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsU0FBUyxPQUFPLENBQUMsQ0FBQyxFQUFFO01BQ2pFLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7TUFDaEMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztLQUNsQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0dBQ1g7O0VBRUQsSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFO0lBQ25CLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQzdCLEdBQUcsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFDdkMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDckMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDbkMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxpQkFBaUIsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQ2hGLE1BQU0sSUFBSSxNQUFNLENBQUMsV0FBVyxFQUFFO0lBQzdCLEdBQUcsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ3RDLEdBQUcsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ3JDLEdBQUcsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0dBQ25DOztFQUVELElBQUksU0FBUyxFQUFFO0lBQ2IsUUFBUSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxZQUFHO01BQzFDLElBQUksZ0JBQWdCLEVBQUUsRUFBQSxZQUFZLEVBQUUsQ0FBQyxFQUFBO01BQ3JDLGNBQWMsRUFBRSxDQUFDO0tBQ2xCLENBQUMsQ0FBQztHQUNKO0NBQ0Y7O0FBRUQsSUFBSSxLQUFLLEdBQUc7RUFDVixJQUFJLEVBQUUsT0FBTztFQUNiLE1BQU0sRUFBRTtJQUNOLEtBQUssRUFBRTs7TUFFTCxVQUFVLEVBQUUsSUFBSTtNQUNoQiwyQkFBMkIsRUFBRSxFQUFFO01BQy9CLDRCQUE0QixFQUFFLEVBQUU7TUFDaEMsaUJBQWlCLEVBQUUsRUFBRTs7TUFFckIsT0FBTyxFQUFFLEtBQUs7TUFDZCxZQUFZLEVBQUUsR0FBRztNQUNqQixvQkFBb0IsRUFBRSxJQUFJOztNQUUxQixXQUFXLEVBQUUsSUFBSTtNQUNqQixtQkFBbUIsRUFBRSx5Q0FBeUM7TUFDOUQsY0FBYyxFQUFFLElBQUk7TUFDcEIsc0JBQXNCLEVBQUUsNE9BQTRPO0tBQ3JRO0dBQ0Y7RUFDRCxRQUFRLEVBQUU7SUFDUixXQUFXLEVBQUU7TUFDWCxLQUFLLEVBQUUsU0FBUyxDQUFDLEtBQUssR0FBRyxZQUFZLEdBQUcsV0FBVztNQUNuRCxJQUFJLEVBQUUsU0FBUyxDQUFDLEtBQUssR0FBRyxXQUFXLEdBQUcsV0FBVztNQUNqRCxHQUFHLEVBQUUsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLEdBQUcsU0FBUztLQUM5QztHQUNGO0VBQ0QsRUFBRSxFQUFFO0lBQ0YsSUFBSSxFQUFFLFNBQVM7R0FDaEI7Q0FDRixDQUFDOztBQUVGQSxJQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDOztBQUU5QyxJQUFNLG1CQUFtQixHQUFDLDRCQUNiLENBQUMsQ0FBQyxFQUFFLE1BQVcsRUFBRTtpQ0FBUCxHQUFHLEVBQUU7O0VBQzFCLElBQVEsT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0VBQzNDLElBQVEsU0FBUyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLFNBQUEsT0FBTyxFQUFFLENBQUMsQ0FBQzs7O0VBR3ZELENBQUcsa0VBQWtFLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLFFBQVEsRUFBRTtJQUNuRyxJQUFNLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFBLFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUE7R0FDbEYsQ0FBQyxDQUFDOztFQUVMLElBQU0sU0FBUyxDQUFDLElBQUksRUFBRTtJQUNwQixTQUFXLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDOztJQUVoRCxLQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUN6QztFQUNILElBQU0sU0FBUyxDQUFDLE1BQU0sRUFBRSxFQUFBLFNBQVMsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBQTtFQUMxRSxJQUFNLFNBQVMsQ0FBQyxPQUFPLEVBQUU7SUFDdkIsTUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsVUFBVSxFQUFFO01BQ3BELE9BQVMsQ0FBQyxVQUFVLENBQUMsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNuRSxDQUFDLENBQUM7R0FDSjtFQUNILElBQU0sU0FBUyxDQUFDLEVBQUUsRUFBRTtJQUNsQixNQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxTQUFTLEVBQUU7TUFDOUMsU0FBVyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNqRSxDQUFDLENBQUM7R0FDSjs7RUFFSCxJQUFNLFNBQVMsQ0FBQyxZQUFZLEVBQUUsRUFBQSxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUMsRUFBQTs7O0VBR3ZELElBQU0sU0FBUyxDQUFDLEtBQUssRUFBRTtJQUNyQixNQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxRQUFRLEVBQUU7TUFDaEQsSUFBTSxZQUFZLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztNQUNqRCxNQUFRLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFO1FBQ25ELFVBQVksRUFBRSxJQUFJO1FBQ2xCLFlBQWMsRUFBRSxJQUFJO1FBQ3BCLEdBQUssY0FBQSxDQUFDLFFBQVEsRUFBRTtVQUNkLFlBQWMsR0FBRyxRQUFRLENBQUM7VUFDMUIsU0FBVyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQ3ZEO1FBQ0gsR0FBSyxjQUFBLEdBQUc7VUFDTixPQUFTLFlBQVksQ0FBQztTQUNyQjtPQUNGLENBQUMsQ0FBQztLQUNKLENBQUMsQ0FBQztHQUNKOzs7RUFHSCxJQUFNLElBQUksR0FBRyxFQUFFLENBQUM7RUFDaEIsSUFBTSxTQUFTLENBQUMsTUFBTSxFQUFFO0lBQ3RCLElBQU0sR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUM7R0FDM0IsTUFBTSxJQUFJLFNBQVMsQ0FBQyxRQUFRLEVBQUU7SUFDL0IsSUFBTSxPQUFPLFNBQVMsQ0FBQyxRQUFRLEtBQUssUUFBUSxFQUFFO01BQzVDLElBQU0sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNoRCxNQUFNOztNQUVQLElBQU0sR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3BDO0dBQ0Y7OztFQUdILElBQU0sSUFBSSxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtJQUN0QyxJQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3JCLE9BQVMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0dBQzFCLE1BQU0sSUFBSSxJQUFJLEVBQUU7SUFDakIsT0FBUyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDekIsT0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUMzQjs7O0VBR0gsSUFBUSxFQUFFLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNqQyxPQUFTLENBQUMsR0FBRyxHQUFHWSxHQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDdEIsU0FBVyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7OztFQUdwQixJQUFRLE1BQU0sR0FBRyxFQUFFLENBQUM7RUFDcEJBLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRTtJQUMzQyxLQUFPYixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7TUFDdkQsSUFBUSxJQUFJLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztNQUNyQyxJQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUNsQyxJQUFRLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDM0MsSUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQU0sSUFBSSxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFNLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDdEIsSUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7VUFDN0IsS0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxhQUFhLEVBQUUsY0FBYyxFQUFFO1lBQ3pELElBQU0sY0FBYyxLQUFLLENBQUMsRUFBRSxFQUFBLElBQUksR0FBRyxhQUFhLENBQUMsRUFBQTtpQkFDMUM7Y0FDTCxJQUFNLGFBQWEsS0FBSyxNQUFNLEVBQUUsRUFBQSxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUE7Y0FDNUMsSUFBTSxhQUFhLEtBQUssU0FBUyxFQUFFLEVBQUEsT0FBTyxHQUFHLElBQUksQ0FBQyxFQUFBO2NBQ2xELElBQU0sYUFBYSxLQUFLLE1BQU0sRUFBRSxFQUFBLElBQUksR0FBRyxJQUFJLENBQUMsRUFBQTthQUMzQztXQUNGLENBQUMsQ0FBQztTQUNKOztRQUVILElBQVEsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDM0IsT0FBUyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsTUFBUSxDQUFDLElBQUksQ0FBQztVQUNaLEVBQUksRUFBRSxPQUFPO1VBQ2IsTUFBRSxJQUFJO1VBQ04sTUFBRSxJQUFJO1VBQ04sT0FBUyxFQUFFLFlBQVU7Ozs7WUFDbkIsSUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLElBQU0sSUFBSSxFQUFFLEVBQUEsQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDLEVBQUE7WUFDaEMsSUFBTSxPQUFPLEVBQUUsRUFBQSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsRUFBQTtZQUNsQyxJQUFNLFVBQVUsQ0FBQztZQUNqQixJQUFNLE1BQU0sQ0FBQztZQUNiLElBQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQztZQUN0QixJQUFNLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2NBQzVCLFVBQVksR0FBRyxJQUFJLENBQUM7Y0FDcEIsVUFBWSxHQUFHLEtBQUssQ0FBQzthQUNwQixNQUFNO2NBQ1AsVUFBWSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Y0FDbkMsS0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLFFBQVEsRUFBRTtnQkFDaEUsSUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDOztnQkFFNUIsSUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFBLEdBQUcsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQTtxQkFDbEMsSUFBSSxHQUFHLEtBQUssTUFBTSxFQUFFLEVBQUEsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFBO3FCQUMvQixJQUFJLEdBQUcsS0FBSyxPQUFPLEVBQUUsRUFBQSxHQUFHLEdBQUcsS0FBSyxDQUFDLEVBQUE7cUJBQ2pDLElBQUksR0FBRyxLQUFLLE1BQU0sRUFBRSxFQUFBLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBQTtxQkFDL0IsSUFBSSxHQUFHLEtBQUssV0FBVyxFQUFFLEVBQUEsR0FBRyxHQUFHLFNBQVMsQ0FBQyxFQUFBO3FCQUN6QyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUUsRUFBQSxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBQTtxQkFDaEQsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxFQUFFLEVBQUEsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUE7cUJBQ2pELElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7a0JBQy9CLElBQU0sT0FBTyxDQUFDO2tCQUNkLEdBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsSUFBSSxFQUFFO29CQUM5QixJQUFNLENBQUMsT0FBTyxFQUFFLEVBQUEsT0FBTyxHQUFHLE9BQU8sQ0FBQyxFQUFBO29CQUNsQyxPQUFTLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO21CQUN6QixDQUFDLENBQUM7a0JBQ0wsR0FBSyxHQUFHLE9BQU8sQ0FBQztpQkFDZixNQUFNO2tCQUNQLEdBQUssR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ3BCO2dCQUNILFVBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7ZUFDdEIsQ0FBQyxDQUFDO2FBQ0o7WUFDSCxJQUFNLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO2NBQ2xDLFVBQVksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRTtnQkFDaEQsSUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFBLE1BQU0sR0FBRyxPQUFPLENBQUMsRUFBQTtnQkFDaEMsSUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQSxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUE7cUJBQ25DO2tCQUNMLE1BQVEsSUFBSSxLQUFLLEVBQUMsa0NBQWdDLElBQUUsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUEsT0FBRSxFQUFFLENBQUM7aUJBQy9HO2VBQ0YsQ0FBQyxDQUFDO2FBQ0osTUFBTTtjQUNQLElBQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0JBQzFCLE1BQVEsSUFBSSxLQUFLLEVBQUMsa0NBQWdDLEdBQUUsVUFBVSxPQUFFLEVBQUUsQ0FBQztlQUNsRTtjQUNILE1BQVEsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDOUI7WUFDSCxNQUFRLE1BQUEsQ0FBQyxRQUFBLFVBQWEsQ0FBQyxDQUFDO1dBQ3ZCO1NBQ0YsQ0FBQyxDQUFDO09BQ0o7S0FDRjtHQUNGLENBQUMsQ0FBQzs7O0VBR0wsSUFBTSxPQUFPLENBQUM7RUFDZCxJQUFNLFNBQVMsQ0FBQyxLQUFLLEVBQUU7SUFDckIsT0FBUyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDNUMsT0FBUyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDO0dBQ3JDO0VBQ0gsSUFBTSxTQUFTLENBQUMsWUFBWSxFQUFFO0lBQzVCLEVBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztHQUN2RDs7O0VBR0gsU0FBVyxZQUFZLEdBQUc7SUFDeEIsTUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFDLEtBQUssRUFBRTtNQUN2QmEsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNwRSxDQUFDLENBQUM7R0FDSjs7RUFFSCxTQUFXLFlBQVksR0FBRztJQUN4QixNQUFRLENBQUMsT0FBTyxDQUFDLFVBQUMsS0FBSyxFQUFFO01BQ3ZCQSxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUM1QyxDQUFDLENBQUM7R0FDSjs7RUFFSCxZQUFjLEVBQUUsQ0FBQzs7O0VBR2pCLElBQU0sU0FBUyxDQUFDLE9BQU8sRUFBRSxFQUFBLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFBOzs7RUFHN0MsU0FBVyxDQUFDLEtBQUssR0FBRyxTQUFTLEtBQUssQ0FBQyxXQUFXLEVBQUU7SUFDOUMsSUFBTSxTQUFTLENBQUMsV0FBVyxFQUFFLEVBQUEsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUE7SUFDckQsSUFBTSxPQUFPLEVBQUUsRUFBQUEsR0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFBO0lBQ3pDLElBQU0sV0FBVyxFQUFFLEVBQUEsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUE7SUFDbkMsSUFBTSxTQUFTLENBQUMsT0FBTyxFQUFFLEVBQUEsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUE7R0FDNUMsQ0FBQzs7O0VBR0osU0FBVyxDQUFDLE9BQU8sR0FBRyxTQUFTLE9BQU8sR0FBRztJQUN2QyxJQUFNLFNBQVMsQ0FBQyxhQUFhLEVBQUUsRUFBQSxTQUFTLENBQUMsYUFBYSxFQUFFLENBQUMsRUFBQTtJQUN6RCxJQUFNLE9BQU8sRUFBRSxFQUFBQSxHQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBQTtJQUNuQyxZQUFjLEVBQUUsQ0FBQztJQUNqQixJQUFNLFNBQVMsQ0FBQyxTQUFTLEVBQUUsRUFBQSxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBQTtHQUNoRCxDQUFDOzs7RUFHSixLQUFPYixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7SUFDckQsT0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFDO0dBQzdDOztFQUVILE9BQVMsU0FBUyxDQUFDO0NBQ2xCLENBQUE7OztBQUlIQyxJQUFNLFNBQVMsR0FBRztFQUNoQixLQUFLLGdCQUFBLENBQUMsZUFBZSxFQUFFO0lBQ3JCQSxJQUFNLFlBQVksR0FBRyx3QkFBdUIsSUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFBLENBQUc7OztJQUdyRUQsSUFBSSxRQUFRLENBQUM7SUFDYixJQUFJLGVBQWUsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFO01BQzlDLFFBQVEsR0FBRyxlQUFlLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUNsRjs7O0lBR0RBLElBQUksS0FBSyxDQUFDO0lBQ1ZDLElBQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNqQyxJQUFJLGVBQWUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFO01BQzNDLEtBQUssR0FBRyxlQUFlLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNsRSxNQUFNLElBQUksZUFBZSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsRUFBRTtNQUN6RCxLQUFLLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztNQUN4RSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQyxJQUFJLEVBQUU7UUFDbkMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtVQUMxQixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2pDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUUsZ0JBQWMsR0FBRSxZQUFZLFFBQUcsRUFBRSxDQUFDO1dBQ25FO1VBQ0QsUUFBTyxnQkFBYyxHQUFFLFlBQVksU0FBSSxJQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQSxFQUFHO1NBQ3hEO1FBQ0QsT0FBTyxJQUFJLENBQUM7T0FDYixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ2Y7O0lBRURELElBQUksYUFBYSxDQUFDO0lBQ2xCLElBQUksZUFBZSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7TUFDNUMsYUFBYSxHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0tBQ25GLE1BQU07TUFDTCxhQUFhLEdBQUcsV0FBVyxDQUFDO0tBQzdCO0lBQ0QsYUFBYSxHQUFHLFNBQVEsR0FBRSxZQUFZLHFCQUFpQixHQUFFLGFBQWEsTUFBRSxDQUFFOzs7SUFHMUVDLElBQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbEQsUUFBUSxDQUFDLFNBQVMsR0FBRyxhQUFhLENBQUM7SUFDbkNZLEdBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7O0lBRTNCWixJQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQzs7O0lBR3pDWSxHQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7O0lBRXJCLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRTtNQUM1QyxTQUFTLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztLQUMvQjtJQUNELElBQUksS0FBSyxFQUFFO01BQ1QsU0FBUyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7TUFDeEIsU0FBUyxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7S0FDdkM7SUFDRCxPQUFPLFNBQVMsQ0FBQztHQUNsQjtFQUNELE1BQU0saUJBQUEsQ0FBQyxDQUFDLEVBQUUsYUFBa0IsRUFBRTtpREFBUCxHQUFHLEVBQUU7O0lBQzFCLE9BQU8sSUFBSSxtQkFBbUIsQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUM7R0FDbEQ7Q0FDRixDQUFDOztBQUVGWixJQUFNLE9BQU8sR0FBRztFQUNkLEtBQUssRUFBRSxFQUFFO0VBQ1QsVUFBVSxxQkFBQSxHQUFHO0lBQ1gsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsRUFBQSxPQUFPLEVBQUE7SUFDdkNBLElBQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDM0MsWUFBWSxFQUFFLENBQUM7R0FDaEI7RUFDRCxXQUFXLEVBQUUsRUFBRTtFQUNmLGdCQUFnQiwyQkFBQSxHQUFHO0lBQ2pCLElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLEVBQUEsT0FBTyxFQUFBO0lBQzdDQSxJQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQy9DQSxJQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDOztJQUVuQ0QsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFDcEMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLGdCQUFnQixLQUFLLEtBQUssRUFBRSxFQUFBLE9BQU8sR0FBRyxLQUFLLENBQUMsRUFBQTs7SUFFOUQsSUFBSSxZQUFZLENBQUMsTUFBTSxLQUFLLE1BQU0sRUFBRTtNQUNsQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsU0FBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7S0FDNUM7SUFDRCxJQUFJLFlBQVksQ0FBQyxNQUFNLEtBQUssTUFBTSxFQUFFO01BQ2xDLE1BQU0sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxFQUFFLFNBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0tBQ3ZFO0dBQ0Y7RUFDRCxNQUFNLGlCQUFBLENBQUMsQ0FBQyxFQUFFO0lBQ1IsSUFBSSxPQUFPLENBQUMsYUFBYSxFQUFFLEVBQUEsT0FBTyxFQUFBO0lBQ2xDQyxJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUM7SUFDakJBLElBQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO0lBQ2hDRCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ3BCLE9BQU8sQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUN0QyxPQUFPLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQzs7SUFFdEIsT0FBTyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7SUFDM0IsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDOztJQUVyQixLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQzs7SUFFdEIsSUFBSSxDQUFDLEtBQUssSUFBSSxRQUFRLEVBQUU7TUFDdEIsS0FBSyxHQUFHO1FBQ04sU0FBUyxFQUFFLFFBQVEsQ0FBQyxLQUFLO1FBQ3pCLEdBQUcsRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7T0FDaEMsQ0FBQztLQUNIO0lBQ0QsSUFBSSxLQUFLLENBQUMsU0FBUyxHQUFHLENBQUMsRUFBRSxFQUFBLE9BQU8sRUFBQTtJQUNoQ0MsSUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDeENBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDM0JBLElBQU0sUUFBUSxHQUFHLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssU0FBUyxDQUFDOztJQUVuREQsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFDcEMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLGdCQUFnQixLQUFLLEtBQUssRUFBRSxFQUFBLE9BQU8sR0FBRyxLQUFLLENBQUMsRUFBQTs7SUFFOUQsSUFBSSxRQUFRLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRTtNQUMzQixJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTs7UUFFekMsSUFBSSxNQUFNLENBQUMsZUFBZSxFQUFFO1VBQzFCLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUM1QyxNQUFNO1VBQ0wsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7WUFDdkIsTUFBTSxFQUFFLE1BQU07WUFDZCxRQUFBLE1BQU07V0FDUCxDQUFDLENBQUM7U0FDSjtPQUNGLE1BQU0sSUFBSSxNQUFNLENBQUMsZUFBZSxFQUFFOztRQUVqQyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxFQUFFLFNBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO09BQzFELE1BQU07UUFDTCxPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQztVQUMxQixNQUFNLEVBQUUsTUFBTTtVQUNkLFVBQUEsUUFBUTtVQUNSLFFBQUEsTUFBTTtTQUNQLENBQUMsQ0FBQztPQUNKO0tBQ0Y7R0FDRjtFQUNELElBQUksZUFBQSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUU7SUFDZixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRTtNQUN4QixPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFHO1FBQ3BCLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO09BQzFCLENBQUMsQ0FBQztNQUNILE9BQU87S0FDUjtJQUNELE9BQU8sQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUN0QyxPQUFPLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUN0QixNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0dBQzFDO0VBQ0QsT0FBTyxrQkFBQSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUU7SUFDbEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUU7TUFDeEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBRztRQUNwQixPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztPQUM3QixDQUFDLENBQUM7TUFDSCxPQUFPO0tBQ1I7SUFDRCxPQUFPLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7SUFDdEMsT0FBTyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDdEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztHQUM3QztFQUNELEVBQUUsYUFBQSxDQUFDLEtBQUssRUFBRTtJQUNSLE9BQU8sQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO0lBQzVCLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQzFCO0VBQ0QsSUFBSSxlQUFBLEdBQUc7SUFDTCxPQUFPLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztJQUM1QixNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0dBQ3ZCO0VBQ0QsV0FBVyxFQUFFLElBQUk7RUFDakIsYUFBYSxFQUFFLEVBQUU7RUFDakIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSztFQUMzQixhQUFhLEVBQUUsSUFBSTtFQUNuQixJQUFJLGVBQUEsQ0FBQyxHQUFHLEVBQUU7SUFDUmEsR0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsWUFBRztNQUN0QixVQUFVLENBQUMsWUFBRztRQUNaLE9BQU8sQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO09BQy9CLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDUCxDQUFDLENBQUM7O0lBRUgsSUFBSSxRQUFRLENBQUMsVUFBVSxJQUFJLFFBQVEsQ0FBQyxVQUFVLEtBQUssVUFBVSxFQUFFO01BQzdELE9BQU8sQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO0tBQy9COztJQUVEQSxHQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0dBQ3BEO0NBQ0YsQ0FBQzs7QUFFRixTQUFTLFNBQVMsQ0FBQyxDQUFDLEVBQUU7RUFDcEJaLElBQU0sTUFBTSxHQUFHLENBQUMsQ0FBQztFQUNqQixJQUFRLEdBQUc7RUFBRSxJQUFBLFNBQVM7RUFBRSxJQUFBLEdBQUcsY0FBckI7RUFDTkQsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDO0VBQ3RCQSxJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7RUFDcEJDLElBQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQztFQUN4QkQsSUFBSSxXQUFXLENBQUM7RUFDaEJBLElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQztFQUNyQkEsSUFBSSxZQUFZLEdBQUcsRUFBRSxDQUFDO0VBQ3RCQSxJQUFJLGtCQUFrQixDQUFDO0VBQ3ZCQSxJQUFJLFdBQVcsQ0FBQztFQUNoQkEsSUFBSSxrQkFBa0IsR0FBRyxJQUFJLENBQUM7RUFDOUJBLElBQUksY0FBYyxDQUFDO0VBQ25CQSxJQUFJLGFBQWEsR0FBRyxFQUFFLENBQUM7RUFDdkJBLElBQUksY0FBYyxHQUFHLEVBQUUsQ0FBQztFQUN4QkEsSUFBSSxrQkFBa0IsQ0FBQztFQUN2QkEsSUFBSSxtQkFBbUIsQ0FBQztFQUN4QkEsSUFBSSxpQkFBaUIsQ0FBQztFQUN0QkEsSUFBSSxxQkFBcUIsQ0FBQztFQUMxQkEsSUFBSSxtQkFBbUIsQ0FBQztFQUN4QkEsSUFBSSx1QkFBdUIsQ0FBQztFQUM1QkEsSUFBSSxhQUFhLENBQUM7RUFDbEJBLElBQUksY0FBYyxDQUFDO0VBQ25CQSxJQUFJLFVBQVUsQ0FBQztFQUNmQSxJQUFJLFdBQVcsQ0FBQztFQUNoQkEsSUFBSSxXQUFXLENBQUM7O0VBRWhCLFNBQVMsZ0JBQWdCLENBQUMsQ0FBQyxFQUFFO0lBQzNCLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxJQUFJLFNBQVMsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsRUFBQSxPQUFPLEVBQUE7SUFDMUgsT0FBTyxHQUFHLEtBQUssQ0FBQztJQUNoQixTQUFTLEdBQUcsSUFBSSxDQUFDO0lBQ2pCLFdBQVcsR0FBRyxTQUFTLENBQUM7SUFDeEIsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxLQUFLLFlBQVksR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQzlFLFlBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksS0FBSyxZQUFZLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUM5RSxjQUFjLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDO0lBQ3hDLGFBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDO0lBQ3JDLGNBQWMsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDO0dBQ3hDO0VBQ0QsU0FBUyxlQUFlLENBQUMsQ0FBQyxFQUFFO0lBQzFCLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBQSxPQUFPLEVBQUE7SUFDdkJDLElBQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxJQUFJLEtBQUssV0FBVyxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDMUVBLElBQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxJQUFJLEtBQUssV0FBVyxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDMUUsSUFBSSxPQUFPLFdBQVcsS0FBSyxXQUFXLEVBQUU7TUFDdEMsV0FBVyxHQUFHLENBQUMsRUFBRSxXQUFXLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3RHO0lBQ0QsSUFBSSxXQUFXLElBQUksQ0FBQyxDQUFDLGtCQUFrQixJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRTtNQUMvRCxTQUFTLEdBQUcsS0FBSyxDQUFDO01BQ2xCLE9BQU87S0FDUjtJQUNELElBQUksQ0FBQyxPQUFPLEVBQUU7O01BRVpELElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQztNQUNuQkMsSUFBTSxNQUFNLEdBQUdZLEdBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7O01BRTNCWixJQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO01BQzdDLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDdkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsRUFBQSxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUE7UUFDbEYsSUFBSSxHQUFHLENBQUMsR0FBRyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLEVBQUEsTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFBO09BQ25GOztNQUVELFdBQVcsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO01BQ3RDLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFBLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBQTtNQUN4RCxZQUFZLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDOztNQUV4REQsSUFBSSxhQUFhLEdBQUcsWUFBWSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUM7TUFDOUYsa0JBQWtCLEdBQUcsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO01BQ2pDLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRTtRQUNYLGFBQWEsR0FBRyxZQUFZLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxLQUFLLGtCQUFrQixHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsQ0FBQztPQUN4SSxNQUFNO1FBQ0wsYUFBYSxHQUFHLFlBQVksQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLHNCQUFzQixDQUFDO09BQzNGO01BQ0QsSUFBSSxhQUFhLEVBQUUsRUFBQSxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUE7TUFDakMsSUFBSSxZQUFZLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxFQUFBLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBQTtNQUN6RSxJQUFJLE1BQU0sRUFBRTtRQUNWLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDbEIsT0FBTztPQUNSOztNQUVELElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyx5QkFBeUIsRUFBRTtRQUMzQyxVQUFVLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ3JELElBQUksVUFBVSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7VUFDM0IsVUFBVSxHQUFHYSxHQUFDLENBQUMsd0NBQXdDLENBQUMsQ0FBQztVQUN6RCxXQUFXLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ2hDO09BQ0Y7TUFDRCxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsMEJBQTBCLEVBQUU7UUFDNUMsV0FBVyxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUN4RCxJQUFJLFdBQVcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1VBQzVCLFdBQVcsR0FBR0EsR0FBQyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7VUFDM0QsWUFBWSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNsQztPQUNGOztNQUVELElBQUksYUFBYSxFQUFFO1FBQ2pCLElBQUksY0FBYyxFQUFFO1VBQ2xCLGFBQWEsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLCtCQUErQixDQUFDLENBQUM7VUFDaEUsY0FBYyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztTQUNuRSxNQUFNO1VBQ0wsYUFBYSxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1VBQzFFLGNBQWMsR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUM3RTtRQUNELFdBQVcsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO1FBQ3ZDLGtCQUFrQixHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUMsNENBQTRDLENBQUMsQ0FBQztRQUMxRixtQkFBbUIsR0FBRyxjQUFjLENBQUMsUUFBUSxDQUFDLDRDQUE0QyxDQUFDLENBQUM7UUFDNUYsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLHdCQUF3QixFQUFFO1VBQzFDLElBQUksYUFBYSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNyQyxpQkFBaUIsR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUN4RSxxQkFBcUIsR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7V0FDbEYsTUFBTTtZQUNMLGlCQUFpQixHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ2hGLHFCQUFxQixHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztXQUMxRjtVQUNELElBQUksY0FBYyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUN0QyxtQkFBbUIsR0FBRyxjQUFjLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUMzRSx1QkFBdUIsR0FBRyxjQUFjLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7V0FDcEYsTUFBTTtZQUNMLG1CQUFtQixHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ25GLHVCQUF1QixHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztXQUM3RjtTQUNGO09BQ0Y7OztNQUdELElBQUlBLEdBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDcEMsR0FBRyxDQUFDLFVBQVUsQ0FBQ0EsR0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztPQUN2QztLQUNGO0lBQ0QsQ0FBQyxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQztJQUM3QixPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ2YsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDOzs7SUFHbkJaLElBQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDOzs7SUFHbEMsV0FBVyxHQUFHLENBQUMsS0FBSyxHQUFHLFlBQVksQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsSUFBSSxRQUFRLENBQUM7SUFDeEYsSUFBSSxXQUFXLEdBQUcsQ0FBQyxFQUFFLEVBQUEsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFBO0lBQ3JDQSxJQUFNLFVBQVUsR0FBRyxXQUFXLEdBQUcsa0JBQWtCLENBQUM7OztJQUdwREEsSUFBTSxZQUFZLEdBQUc7TUFDbkIsWUFBQSxVQUFVO01BQ1YsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7TUFDN0IsY0FBYyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7TUFDL0IsZUFBZSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7TUFDakMsZ0JBQWdCLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQztLQUNwQyxDQUFDO0lBQ0YsR0FBRyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUM1QyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxZQUFZLENBQUMsQ0FBQzs7O0lBRzNDRCxJQUFJLG9CQUFvQixHQUFHLFdBQVcsR0FBRyxRQUFRLENBQUM7SUFDbERBLElBQUkscUJBQXFCLEdBQUcsQ0FBQyxDQUFDLFdBQVcsR0FBRyxDQUFDLEtBQUssa0JBQWtCLEdBQUcsQ0FBQyxDQUFDLElBQUksUUFBUSxDQUFDO0lBQ3RGLElBQUksUUFBUSxDQUFDLFVBQVUsS0FBSyxDQUFDLEVBQUU7TUFDN0Isb0JBQW9CLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO01BQ3hELHFCQUFxQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztLQUMzRDs7SUFFRCxXQUFXLENBQUMsU0FBUyxFQUFDLGNBQWEsR0FBRSxvQkFBb0IsWUFBUSxFQUFFLENBQUM7SUFDcEUsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLHlCQUF5QixFQUFFLEVBQUEsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxFQUFBOztJQUVoRyxZQUFZLENBQUMsU0FBUyxFQUFDLGNBQWEsR0FBRSxxQkFBcUIsWUFBUSxFQUFFLENBQUM7SUFDdEUsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLDBCQUEwQixFQUFFLEVBQUEsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxFQUFBOzs7SUFHbEcsSUFBSSxhQUFhLEVBQUU7TUFDakIsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBSyxFQUFFLEtBQUssRUFBRTtRQUNyQ0MsSUFBTSxNQUFNLEdBQUdZLEdBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLENBQUMsSUFBSSxVQUFVLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFBO1FBQ2pGLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLGFBQWEsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUU7VUFDcEZiLElBQUksa0JBQWtCLEdBQUcsVUFBVSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQztVQUNwRSxJQUFJLFFBQVEsQ0FBQyxVQUFVLEtBQUssQ0FBQyxFQUFFLEVBQUEsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLEVBQUE7VUFDbkYsTUFBTSxDQUFDLFNBQVMsRUFBQyxjQUFhLEdBQUUsa0JBQWtCLFlBQVEsRUFBRSxDQUFDO1VBQzdELElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyx3QkFBd0IsRUFBRTtZQUMxQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2NBQzVFQSxJQUFJLGFBQWEsR0FBRyxDQUFDLGtCQUFrQixDQUFDO2NBQ3hDLElBQUksQ0FBQyxjQUFjLEVBQUU7Z0JBQ25CLGFBQWEsSUFBSSxXQUFXLEdBQUcsVUFBVSxDQUFDO2VBQzNDO2NBQ0QsaUJBQWlCLENBQUMsU0FBUyxFQUFDLGNBQWEsR0FBRSxhQUFhLFlBQVEsRUFBRSxDQUFDO2FBQ3BFO1dBQ0Y7U0FDRjtPQUNGLENBQUMsQ0FBQztNQUNILG1CQUFtQixDQUFDLElBQUksQ0FBQyxVQUFDLEtBQUssRUFBRSxLQUFLLEVBQUU7UUFDdENDLElBQU0sTUFBTSxHQUFHWSxHQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxDQUFDLFVBQVUsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUE7UUFDakYsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksY0FBYyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtVQUNyRmIsSUFBSSxvQkFBb0IsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLElBQUksQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDO1VBQzNFLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLGlCQUFpQixJQUFJLGlCQUFpQixDQUFDLE1BQU0sSUFBSSxxQkFBcUIsQ0FBQyxNQUFNLEVBQUU7WUFDOUgsb0JBQW9CLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLEdBQUcscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxLQUFLLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQztXQUNoSCxNQUFNO1lBQ0wsb0JBQW9CLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixJQUFJLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQztXQUN4RTtVQUNELElBQUksUUFBUSxDQUFDLFVBQVUsS0FBSyxDQUFDLEVBQUUsRUFBQSxvQkFBb0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUMsRUFBQTtVQUN2RixNQUFNLENBQUMsU0FBUyxFQUFDLGNBQWEsR0FBRSxvQkFBb0IsWUFBUSxFQUFFLENBQUM7VUFDL0QsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLHdCQUF3QixFQUFFO1lBQzFDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLG1CQUFtQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Y0FDOUVBLElBQUksYUFBYSxHQUFHLENBQUMsb0JBQW9CLENBQUM7Y0FDMUMsSUFBSSxDQUFDLGNBQWMsRUFBRTtnQkFDbkIsYUFBYSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUM7ZUFDdkQ7Y0FDRCxtQkFBbUIsQ0FBQyxTQUFTLEVBQUMsY0FBYSxHQUFFLGFBQWEsWUFBUSxFQUFFLENBQUM7YUFDdEU7V0FDRjtTQUNGO09BQ0YsQ0FBQyxDQUFDO0tBQ0o7R0FDRjtFQUNELFNBQVMsY0FBYyxHQUFHO0lBQ3hCLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxPQUFPLEVBQUU7TUFDMUIsU0FBUyxHQUFHLEtBQUssQ0FBQztNQUNsQixPQUFPLEdBQUcsS0FBSyxDQUFDO01BQ2hCLE9BQU87S0FDUjtJQUNELFNBQVMsR0FBRyxLQUFLLENBQUM7SUFDbEIsT0FBTyxHQUFHLEtBQUssQ0FBQztJQUNoQixJQUFJLFdBQVcsS0FBSyxDQUFDLEVBQUU7TUFDckJhLEdBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztNQUNuRCxJQUFJLGFBQWEsRUFBRTtRQUNqQixrQkFBa0IsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDdEQsbUJBQW1CLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZELElBQUksaUJBQWlCLElBQUksaUJBQWlCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxFQUFBLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFBO1FBQ3ZGLElBQUksbUJBQW1CLElBQUksaUJBQWlCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxFQUFBLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFBO09BQzVGO01BQ0QsT0FBTztLQUNSO0lBQ0RaLElBQU0sUUFBUSxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUUsRUFBRSxPQUFPLEVBQUUsR0FBRyxjQUFjLENBQUM7SUFDekRELElBQUksV0FBVyxHQUFHLEtBQUssQ0FBQzs7SUFFeEI7UUFDSSxDQUFDLFFBQVEsR0FBRyxHQUFHLElBQUksV0FBVyxHQUFHLEVBQUU7U0FDbEMsUUFBUSxJQUFJLEdBQUcsSUFBSSxXQUFXLEdBQUcsa0JBQWtCLEdBQUcsQ0FBQyxDQUFDO1FBQ3pEO01BQ0YsV0FBVyxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7TUFDOUQsWUFBWSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7TUFDbkUsSUFBSSxVQUFVLEVBQUUsRUFBQSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsRUFBQTtNQUNqRCxJQUFJLFdBQVcsRUFBRSxFQUFBLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxFQUFBO01BQ25ELElBQUksYUFBYSxFQUFFO1FBQ2pCLGFBQWEsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDcEUsY0FBYyxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO09BQzFFO01BQ0QsV0FBVyxHQUFHLElBQUksQ0FBQztLQUNwQjs7O0lBR0RhLEdBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsRixJQUFJLGFBQWEsRUFBRTtNQUNqQixrQkFBa0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUM7U0FDcEMsSUFBSSxDQUFDLFVBQUMsVUFBVSxFQUFFLEtBQUssRUFBRTtVQUN4QlosSUFBTSxTQUFTLEdBQUcsV0FBVyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsR0FBRyxDQUFDLENBQUM7VUFDOURBLElBQU0sT0FBTyxHQUFHWSxHQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7VUFDekJiLElBQUksYUFBYSxHQUFHLFdBQVcsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7VUFDakQsSUFBSSxDQUFDLGNBQWMsSUFBSSxXQUFXLEVBQUUsRUFBQSxhQUFhLElBQUksV0FBVyxDQUFDLEVBQUE7VUFDakUsT0FBTyxDQUFDLFNBQVMsRUFBQyxjQUFhLEdBQUUsU0FBUyxZQUFRLEVBQUUsQ0FBQztVQUNyRCxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsd0JBQXdCLEVBQUU7WUFDMUMsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLGlCQUFpQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Y0FDNUQsaUJBQWlCLENBQUMsUUFBUSxDQUFDLHNCQUFzQixDQUFDLENBQUMsU0FBUyxFQUFDLGNBQWEsR0FBRSxhQUFhLFlBQVEsRUFBRSxDQUFDO2FBQ3JHO1dBQ0Y7U0FDRixDQUFDLENBQUMsUUFBUSxDQUFDLHNCQUFzQixDQUFDLENBQUM7O01BRXRDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxVQUFVLEVBQUUsS0FBSyxFQUFFO1FBQzlFQyxJQUFNLFNBQVMsR0FBRyxXQUFXLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQztRQUM3REEsSUFBTSxPQUFPLEdBQUdZLEdBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6QmIsSUFBSSxhQUFhLEdBQUcsV0FBVyxHQUFHLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQztRQUNqRCxJQUFJLENBQUMsY0FBYyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUEsYUFBYSxJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFBQTtRQUN0RSxPQUFPLENBQUMsU0FBUyxFQUFDLGNBQWEsR0FBRSxTQUFTLFlBQVEsRUFBRSxDQUFDO1FBQ3JELElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyx3QkFBd0IsRUFBRTtVQUMxQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksbUJBQW1CLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM5RCxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxTQUFTLEVBQUMsY0FBYSxHQUFFLGFBQWEsWUFBUSxFQUFFLENBQUM7V0FDdkc7U0FDRjtPQUNGLENBQUMsQ0FBQyxRQUFRLENBQUMsc0JBQXNCLENBQUMsQ0FBQztLQUNyQztJQUNELGtCQUFrQixHQUFHLEtBQUssQ0FBQztJQUMzQixNQUFNLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQzs7O0lBRy9CQyxJQUFNLFlBQVksR0FBRztNQUNuQixXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztNQUMzQixZQUFZLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztNQUM3QixhQUFhLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztNQUMvQixjQUFjLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQztLQUNsQyxDQUFDOztJQUVGLElBQUksV0FBVyxFQUFFOztNQUVmLE1BQU0sQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7TUFDbkQsTUFBTSxDQUFDLFdBQVcsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7OztNQUdyQyxNQUFNLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO01BQ3hILE1BQU0sQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLFlBQVksRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxFQUFFLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7O01BRTlILEdBQUcsQ0FBQyxPQUFPLENBQUMsd0JBQXdCLEVBQUUsWUFBWSxDQUFDLENBQUM7TUFDcEQsTUFBTSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxZQUFZLENBQUMsQ0FBQztLQUNwRCxNQUFNO01BQ0wsR0FBRyxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsRUFBRSxZQUFZLENBQUMsQ0FBQztNQUNuRCxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFLFlBQVksQ0FBQyxDQUFDO0tBQ25EOztJQUVELFdBQVcsQ0FBQyxhQUFhLENBQUMsWUFBRztNQUMzQlksR0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLG9CQUFvQixDQUFDLENBQUM7TUFDdkUsSUFBSSxhQUFhLEVBQUU7UUFDakIsa0JBQWtCLENBQUMsV0FBVyxDQUFDLHNCQUFzQixDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzFGLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMzRixJQUFJLGlCQUFpQixJQUFJLGlCQUFpQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsRUFBQSxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxFQUFBO1FBQzdHLElBQUksbUJBQW1CLElBQUksbUJBQW1CLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxFQUFBLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLEVBQUE7T0FDcEg7TUFDRCxrQkFBa0IsR0FBRyxJQUFJLENBQUM7TUFDMUIsTUFBTSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7TUFDOUIsSUFBSSxXQUFXLEVBQUU7O1FBRWYsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7VUFDL0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3BDO1FBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNyQixNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7OztRQUdyQixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFO1VBQzNCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNoQjs7O1FBR0QsTUFBTSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN2SCxNQUFNLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsRUFBRSxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDOzs7UUFHN0gsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUU7VUFDaEYsV0FBVyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztVQUNoQyxJQUFJLGNBQWMsRUFBRTtZQUNsQixhQUFhLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1dBQ25DO1NBQ0YsTUFBTTtVQUNMLE1BQU0sQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7VUFDeEUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztVQUM3QixJQUFJLGNBQWMsRUFBRTtZQUNsQixNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1dBQ2hDO1NBQ0Y7O1FBRUQsR0FBRyxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNuRCxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFLFlBQVksQ0FBQyxDQUFDOztRQUVsRCxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7O1FBRS9FLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRTtVQUNyQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUMzRTtPQUNGLE1BQU07UUFDTCxHQUFHLENBQUMsT0FBTyxDQUFDLHNCQUFzQixFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ2xELE1BQU0sQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsWUFBWSxDQUFDLENBQUM7T0FDbEQ7TUFDRCxJQUFJLFVBQVUsSUFBSSxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxFQUFBLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFBO01BQzdELElBQUksV0FBVyxJQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLEVBQUEsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUE7S0FDakUsQ0FBQyxDQUFDO0dBQ0o7O0VBRUQsU0FBUyxZQUFZLEdBQUc7SUFDdEJaLElBQU0sZUFBZSxHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEtBQUssWUFBWSxJQUFJLFNBQVMsQ0FBQyxlQUFlLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsR0FBRyxLQUFLLENBQUM7SUFDMUlBLElBQU0sY0FBYyxHQUFHLFNBQVMsQ0FBQyxlQUFlLEdBQUcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsR0FBRyxLQUFLLENBQUM7SUFDOUYsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUNqRSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUM5RCxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLGNBQWMsRUFBRSxlQUFlLENBQUMsQ0FBQztHQUM5RDtFQUNELFNBQVMsWUFBWSxHQUFHO0lBQ3RCQSxJQUFNLGVBQWUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsS0FBSyxLQUFLLFlBQVksSUFBSSxTQUFTLENBQUMsZUFBZSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQzFJQSxJQUFNLGNBQWMsR0FBRyxTQUFTLENBQUMsZUFBZSxHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQzlGLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDbEUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxlQUFlLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDL0QsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxjQUFjLEVBQUUsZUFBZSxDQUFDLENBQUM7R0FDL0Q7O0VBRUQsWUFBWSxFQUFFLENBQUM7O0VBRWYsTUFBTSxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsWUFBWSxDQUFDLENBQUM7Q0FDMUM7O0FBRUQsU0FBUyxPQUFPLENBQUMsRUFBRSxFQUFFLGNBQW1CLEVBQUU7aURBQVAsR0FBRyxFQUFFOztFQUN0Q0EsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0VBQ3BCQSxJQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDO0VBQ3ZCQSxJQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDOztFQUV6QkEsSUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUMzQixPQUFPLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPO0lBQzlCLFNBQVMsRUFBRSxJQUFJO0lBQ2YsT0FBTyxFQUFFLElBQUk7SUFDYixhQUFhLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXO0lBQ3hDLGNBQWMsRUFBRSxLQUFLO0lBQ3JCLFNBQVMsRUFBRSxLQUFLO0lBQ2hCLFVBQVUsRUFBRSxFQUFFO0lBQ2QsRUFBRSxFQUFFLEVBQUU7R0FDUCxFQUFFLGNBQWMsQ0FBQyxDQUFDOztFQUVuQkEsSUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQztFQUMzQ0EsSUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQzs7RUFFN0NBLElBQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUM7RUFDM0JBLElBQU0sUUFBUSxHQUFHWSxHQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDdkJaLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxjQUFjLElBQUksT0FBTyxDQUFDLGFBQWEsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDO0VBQ3BGRCxJQUFJLFFBQVEsQ0FBQzs7RUFFYkEsSUFBSSxTQUFTLENBQUM7RUFDZEEsSUFBSSxlQUFlLENBQUM7RUFDcEJBLElBQUksZUFBZSxDQUFDOztFQUVwQixJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUU7O0lBRW5CLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztHQUN0Qzs7RUFFRCxJQUFJLGFBQWEsRUFBRTtJQUNqQixlQUFlLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDekUsSUFBSSxjQUFjLEVBQUU7TUFDbEIsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7TUFDN0IsSUFBSSxlQUFlLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUM5QixRQUFRLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO09BQ3ZDO01BQ0QsSUFBSSxlQUFlLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFOztRQUV0RCxlQUFlLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7T0FDaEQ7S0FDRjtHQUNGOztFQUVELE1BQU0sQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO0VBQy9CLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7SUFDekIsTUFBTSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7SUFDOUIsT0FBTyxNQUFNLENBQUM7R0FDZjs7O0VBR0RDLElBQU0sWUFBWSxHQUFHLE9BQU87S0FDekIsUUFBUSxDQUFDLHFCQUFxQixDQUFDO0tBQy9CLE1BQU0sQ0FBQyxVQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsU0FBRyxVQUFVLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFBLENBQUMsQ0FBQzs7O0VBRzdERCxJQUFJLGNBQWMsQ0FBQztFQUNuQixJQUFJLGNBQWMsRUFBRTtJQUNsQixjQUFjLEdBQUcsU0FBUztPQUN2QixRQUFRLENBQUMsNkJBQTZCLENBQUM7T0FDdkMsTUFBTSxDQUFDLFVBQUMsS0FBSyxFQUFFLFlBQVksRUFBRSxTQUFHLFlBQVksS0FBSyxlQUFlLENBQUMsQ0FBQyxDQUFDLEdBQUEsQ0FBQyxDQUFDO0dBQ3pFOzs7RUFHRCxJQUFJLE9BQU8sQ0FBQyxjQUFjLElBQUksWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7SUFDckQsTUFBTSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7SUFDOUIsT0FBTyxNQUFNLENBQUM7R0FDZjs7O0VBR0RBLElBQUksZUFBZSxHQUFHLE1BQU0sQ0FBQztFQUM3QixJQUFJLE9BQU8sQ0FBQyxhQUFhLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRTtJQUM5QyxlQUFlLEdBQUcsU0FBUyxDQUFDO0dBQzdCLE1BQU0sSUFBSSxPQUFPLENBQUMsY0FBYyxFQUFFO0lBQ2pDLGVBQWUsR0FBRyxVQUFVLENBQUM7R0FDOUI7RUFDRCxRQUFRO0tBQ0wsUUFBUSxFQUFDLE9BQU0sR0FBRSxlQUFlLEVBQUc7S0FDbkMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDOztFQUUxQixJQUFJLGFBQWEsSUFBSSxlQUFlLENBQUMsTUFBTSxFQUFFO0lBQzNDLGVBQWU7T0FDWixRQUFRLEVBQUMsU0FBUSxHQUFFLGVBQWUsRUFBRztPQUNyQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7R0FDM0I7OztFQUdELElBQUksT0FBTyxDQUFDLGFBQWEsRUFBRTtJQUN6QixRQUFRLEdBQUcsWUFBWSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3BELElBQUksY0FBYyxFQUFFOztNQUVsQixlQUFlLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDcEQ7R0FDRixNQUFNLElBQUksT0FBTyxDQUFDLGNBQWMsRUFBRTtJQUNqQyxRQUFRLEdBQUcsWUFBWSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3BELElBQUksY0FBYyxFQUFFOztNQUVsQixlQUFlLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDcEQ7R0FDRixNQUFNLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRTtJQUM1QixRQUFRLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxVQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBRyxNQUFNLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFBLENBQUMsQ0FBQztJQUMxRSxJQUFJLGNBQWMsRUFBRTtNQUNsQixlQUFlLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxVQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsU0FBRyxRQUFRLEtBQUssZUFBZSxDQUFDLENBQUMsQ0FBQyxHQUFBLENBQUMsQ0FBQztLQUMvRjtHQUNGLE1BQU07SUFDTCxJQUFJLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO01BQzNCQSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7TUFDVixLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDL0NDLElBQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BFLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUU7VUFDNUIsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7VUFDdkMsSUFBSSxjQUFjLEVBQUU7O1lBRWxCWSxHQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7V0FDekM7U0FDRixNQUFNOztVQUVMLE1BQU0sQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxjQUFjLElBQUksY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7VUFDMUgsTUFBTSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztVQUNqQyxJQUFJLGNBQWMsSUFBSSxnQkFBZ0IsRUFBRTs7WUFFdEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1dBQ25DO1NBQ0Y7T0FDRjtLQUNGO0lBQ0QsUUFBUSxHQUFHLE9BQU87T0FDZixRQUFRLENBQUMscUJBQXFCLENBQUM7T0FDL0IsTUFBTSxDQUFDLFVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxTQUFHLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUEsQ0FBQyxDQUFDO0lBQ2pELElBQUksY0FBYyxFQUFFO01BQ2xCLGVBQWUsR0FBRyxTQUFTO1NBQ3hCLFFBQVEsQ0FBQyw2QkFBNkIsQ0FBQztTQUN2QyxNQUFNLENBQUMsVUFBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLFNBQUcsV0FBVyxLQUFLLGVBQWUsQ0FBQyxDQUFDLENBQUMsR0FBQSxDQUFDLENBQUM7S0FDdkU7R0FDRjtFQUNELElBQUksYUFBYSxJQUFJLENBQUMsY0FBYyxFQUFFO0lBQ3BDLGVBQWUsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztHQUMxRTs7O0VBR0QsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsSUFBSSxPQUFPLENBQUMsU0FBUyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRTtJQUMzRVosSUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLElBQUksRUFBRSxDQUFDO0lBQ3hELE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxJQUFJLE9BQU8sQ0FBQyxTQUFTLEdBQUcsU0FBUyxHQUFHLE1BQU0sQ0FBQztNQUN0RTtRQUNFLEdBQUcsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUc7UUFDdEIsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLO09BQ3RCO01BQ0QsYUFBYSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsa0JBQWtCLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUN6RTs7O0VBR0QsTUFBTSxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDOzs7RUFHcENBLElBQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO0VBQzlCLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtJQUNuQixJQUFJLE9BQU8sQ0FBQyxhQUFhLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO01BQ3RELE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLGNBQWMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7S0FDaEYsTUFBTSxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUU7TUFDNUIsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3hCLE1BQU07TUFDTCxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUMxQjtHQUNGO0VBQ0QsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDOzs7RUFHckJBLElBQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztFQUMzREEsSUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQzs7RUFFNUMsSUFBSSxPQUFPLENBQUMsY0FBYyxFQUFFO0lBQzFCLElBQUksV0FBVyxJQUFJLENBQUMsWUFBWSxFQUFFO01BQ2hDLFdBQVcsQ0FBQyxLQUFLLENBQUMsVUFBQyxXQUFXLEVBQUU7UUFDOUJZLEdBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7T0FDdkMsQ0FBQyxDQUFDO0tBQ0osTUFBTTtNQUNMLFFBQVEsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDakM7SUFDRCxJQUFJLGNBQWMsSUFBSSxlQUFlLENBQUMsTUFBTSxFQUFFO01BQzVDLElBQUksZUFBZSxDQUFDLE1BQU0sRUFBRTtRQUMxQixlQUFlLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxDQUFDO09BQy9DLE1BQU07UUFDTCxTQUFTLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO09BQ25DO0tBQ0Y7R0FDRixNQUFNLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUU7SUFDcEQsSUFBSSxXQUFXLElBQUksQ0FBQyxZQUFZLEVBQUU7TUFDaEMsV0FBVyxDQUFDLEtBQUssQ0FBQyxVQUFDLFdBQVcsRUFBRTtRQUM5QixPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO09BQzdCLENBQUMsQ0FBQztLQUNKLE1BQU07TUFDTCxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzdCO0lBQ0QsSUFBSSxjQUFjLElBQUksZUFBZSxDQUFDLE1BQU0sRUFBRTtNQUM1QyxTQUFTLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3RDO0dBQ0Y7RUFDRCxJQUFJLENBQUMsWUFBWSxFQUFFO0lBQ2pCLE1BQU0sQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLE1BQU0sR0FBRyxlQUFlLEdBQUcsU0FBUyxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztHQUNySTs7O0VBR0QsSUFBSSxPQUFPLENBQUMsYUFBYSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0lBQ2hELElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFO01BQzdFLFFBQVEsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7TUFDN0IsSUFBSSxjQUFjLEVBQUU7UUFDbEIsZUFBZSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztPQUNyQztLQUNGLE1BQU07O01BRUwsTUFBTSxDQUFDLFlBQVksQ0FBQyxjQUFjLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO01BQy9GLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7TUFDMUIsSUFBSSxjQUFjLElBQUksZUFBZSxDQUFDLE1BQU0sRUFBRTtRQUM1QyxNQUFNLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDO09BQ2xDO0tBQ0Y7R0FDRixNQUFNLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRTtJQUM1QixRQUFRLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRTtNQUM1QlosSUFBTSxVQUFVLEdBQUdZLEdBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztNQUM3QlosSUFBTSxpQkFBaUIsR0FBR1ksR0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7TUFDaEUsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDL0UsVUFBVSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMvQixJQUFJLGNBQWMsRUFBRTs7VUFFbEIsaUJBQWlCLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3ZDO09BQ0YsTUFBTTs7UUFFTCxNQUFNLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFBRSxVQUFVLEVBQUUsZUFBZSxJQUFJLGVBQWUsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM5SCxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzVCLElBQUksY0FBYyxJQUFJLGlCQUFpQixDQUFDLE1BQU0sRUFBRTs7VUFFOUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQ3BDO09BQ0Y7S0FDRixDQUFDLENBQUM7R0FDSjs7O0VBR0QsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUU7SUFDM0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFO01BQ2hFLE9BQU8sRUFBRSxLQUFLO01BQ2QsU0FBUyxFQUFFLEtBQUs7S0FDakIsQ0FBQyxDQUFDLENBQUM7R0FDTDs7O0VBR0QsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsTUFBTSxHQUFHLGVBQWUsR0FBRyxTQUFTLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDOztFQUVqSSxJQUFJLE9BQU8sQ0FBQyxhQUFhLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRTtJQUM5QyxNQUFNLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztJQUM5QixPQUFPLE1BQU0sQ0FBQztHQUNmOzs7RUFHRCxNQUFNLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7RUFDdkYsTUFBTSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDOzs7RUFHNUYsU0FBUyxjQUFjLEdBQUc7SUFDeEJaLElBQU0sV0FBVyxHQUFHLHNDQUFzQyxDQUFDO0lBQzNEQSxJQUFNLGFBQWEsR0FBRyw0Q0FBNEMsQ0FBQztJQUNuRSxRQUFRLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUMzRCxRQUFRLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM1RCxJQUFJLGFBQWEsRUFBRTtNQUNqQixlQUFlLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO01BQ3RFLGVBQWUsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLENBQUM7S0FDeEU7O0lBRUQsTUFBTSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7SUFDOUIsTUFBTSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3RGLE1BQU0sQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQzs7SUFFM0ZELElBQUksV0FBVyxHQUFHLEdBQUcsQ0FBQyxLQUFLLEtBQUssS0FBSyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsbUJBQW1CLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQztJQUM5SSxJQUFJLENBQUMsV0FBVyxFQUFFO01BQ2hCLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUMsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLEVBQUU7UUFDL0gsV0FBVyxHQUFHLElBQUksQ0FBQztPQUNwQjtLQUNGO0lBQ0QsSUFBSSxDQUFDLFdBQVcsRUFBRTtNQUNoQixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFO1FBQzVCLFFBQVEsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDN0IsSUFBSSxjQUFjLEVBQUU7VUFDbEIsZUFBZSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNyQztPQUNGLE1BQU0sSUFBSSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxtQkFBbUIsQ0FBQyxFQUFFOztRQUU5RixNQUFNLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDL0YsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMxQixJQUFJLGNBQWMsSUFBSSxlQUFlLENBQUMsTUFBTSxFQUFFO1VBQzVDLE1BQU0sQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDbEM7T0FDRjtLQUNGO0lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDOztJQUUvRSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFO01BQzNCLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0tBQzVCO0dBQ0Y7RUFDRCxTQUFTLGtCQUFrQixHQUFHO0lBQzVCQyxJQUFNLFdBQVcsR0FBRyxzQ0FBc0MsQ0FBQztJQUMzREEsSUFBTSxhQUFhLEdBQUcsNENBQTRDLENBQUM7SUFDbkUsUUFBUSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDM0QsUUFBUSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDeEQsSUFBSSxhQUFhLEVBQUU7TUFDakIsZUFBZSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztNQUN0RSxlQUFlLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztLQUNwRTtHQUNGO0VBQ0QsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO0lBQ25CLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEtBQUssSUFBSSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMscUJBQXFCLEVBQUU7TUFDcEUsVUFBVSxDQUFDLFlBQUc7UUFDWixrQkFBa0IsRUFBRSxDQUFDO1FBQ3JCLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLFNBQVMsRUFBRSxZQUFHO1VBQ2pGLGNBQWMsRUFBRSxDQUFDO1NBQ2xCLENBQUMsQ0FBQztPQUNKLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0tBQ3pDLE1BQU07TUFDTCxrQkFBa0IsRUFBRSxDQUFDO01BQ3JCLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLFNBQVMsRUFBRSxZQUFHO1FBQ2pGLGNBQWMsRUFBRSxDQUFDO09BQ2xCLENBQUMsQ0FBQztLQUNKO0dBQ0YsTUFBTTtJQUNMLGNBQWMsRUFBRSxDQUFDO0dBQ2xCO0VBQ0QsT0FBTyxNQUFNLENBQUM7Q0FDZjtBQUNELFNBQVMsSUFBSSxDQUFDLFVBQWUsRUFBRSxXQUFnQixFQUFFLGdCQUFnQixFQUFFO3lDQUEzQyxHQUFHLEVBQUUsQ0FBYTsyQ0FBQSxHQUFHLEVBQUU7O0VBQzdDQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7O0VBRXBCLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsRUFBQSxPQUFPLE1BQU0sQ0FBQyxFQUFBO0VBQ2hFQSxJQUFNLE1BQU0sR0FBRyxVQUFVLENBQUM7RUFDMUJBLElBQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQztFQUM1QixJQUFRLEdBQUc7RUFBRSxJQUFBLE9BQU87RUFBRSxJQUFBLEVBQUU7RUFBRSxJQUFBLElBQUk7RUFBRSxJQUFBLFFBQVE7RUFBRSxJQUFBLFdBQVc7RUFBRSxJQUFBLFNBQVM7RUFBRSxJQUFBLFlBQVksdUJBQXhFO0VBQ04sSUFBUSxXQUFXLHVCQUFiOztFQUVOLElBQUksT0FBTyxDQUFDLEtBQUs7SUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUs7SUFDbkIsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsVUFBVTtJQUM5QixNQUFNLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxVQUFVO0lBQ3BDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFVBQVUsS0FBSyxNQUFNLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUU7O0lBRXpFLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxFQUFBLE9BQU8sS0FBSyxDQUFDLEVBQUE7SUFDbkQsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUU7TUFDM0IsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztLQUN6RDtJQUNELE9BQU8sS0FBSyxDQUFDO0dBQ2Q7O0VBRUQ7SUFDRSxPQUFPLENBQUMsS0FBSztJQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRztJQUNqQixNQUFNLENBQUMsR0FBRyxLQUFLLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRztJQUNoQyxFQUFFLE9BQU8sQ0FBQyxhQUFhLElBQUksT0FBTyxDQUFDLGNBQWMsQ0FBQztJQUNsRCxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsa0JBQWtCO01BQy9CO0lBQ0YsT0FBTyxLQUFLLENBQUM7R0FDZDs7RUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxHQUFHLEVBQUU7SUFDekIsT0FBTyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3BELEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUEsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDNUQ7OztFQUdELFNBQVMsT0FBTyxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUU7SUFDbkMsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO0dBQ2xFO0VBQ0QsU0FBUyxNQUFNLEdBQUc7SUFDaEIsTUFBTSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7SUFDOUIsT0FBTyxNQUFNLENBQUM7R0FDZjs7O0VBR0QsSUFBSSxPQUFPLEVBQUU7SUFDWCxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7R0FDcEQsTUFBTSxJQUFJLFFBQVEsSUFBSSxXQUFXLEVBQUU7O0lBRWxDLElBQUk7TUFDRixNQUFNLENBQUMsa0JBQWtCLENBQUMsUUFBUSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQzVFLENBQUMsT0FBTyxHQUFHLEVBQUU7TUFDWixNQUFNLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztNQUM5QixNQUFNLEdBQUcsQ0FBQztLQUNYO0dBQ0YsTUFBTSxJQUFJLEVBQUUsRUFBRTs7SUFFYixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7R0FDL0MsTUFBTSxJQUFJLElBQUksRUFBRTs7SUFFZixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFDLG9CQUFrQixHQUFFLElBQUksUUFBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0dBQ2xGLE1BQU0sSUFBSSxTQUFTLElBQUksWUFBWSxFQUFFOztJQUVwQyxJQUFJO01BQ0YsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQzFGLENBQUMsT0FBTyxHQUFHLEVBQUU7TUFDWixNQUFNLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztNQUM5QixNQUFNLEdBQUcsQ0FBQztLQUNYO0dBQ0YsTUFBTSxJQUFJLEdBQUcsRUFBRTs7SUFFZCxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUU7TUFDZCxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO01BQ25CLE1BQU0sQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO0tBQ3BCO0lBQ0QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDO09BQ2hDLElBQUksQ0FBQyxVQUFDLFdBQVcsRUFBRTtRQUNsQixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7T0FDeEQsQ0FBQztPQUNELEtBQUssQ0FBQyxZQUFHO1FBQ1IsTUFBTSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7T0FDL0IsQ0FBQyxDQUFDO0dBQ047RUFDRCxPQUFPLE1BQU0sQ0FBQztDQUNmO0FBQ0QsU0FBUyxRQUFRLENBQUMsR0FBRyxFQUFFLGVBQW9CLEVBQUU7bURBQVAsR0FBRyxFQUFFOztFQUN6Q0EsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0VBQ3BCQSxJQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDO0VBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO0lBQ2hCLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ3JELE9BQU8sTUFBTSxDQUFDO0dBQ2Y7RUFDRCxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksR0FBRyxLQUFLLEVBQUUsRUFBRTtJQUM3QixPQUFPLE1BQU0sQ0FBQztHQUNmOztFQUVERCxJQUFJLFdBQVcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztFQUN4QyxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7SUFDNURDLElBQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLFVBQVUsSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztJQUNyRixXQUFXLEdBQUcsQ0FBQyxDQUFDLFdBQVcsSUFBSSxHQUFHLElBQUksV0FBVyxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7R0FDdkU7RUFDREQsSUFBSSxLQUFLLENBQUM7RUFDVixJQUFJLGVBQWUsQ0FBQyxXQUFXLEVBQUU7SUFDL0IsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsRUFBRTtNQUNoRSxLQUFLLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsZUFBZSxDQUFDLFdBQVcsQ0FBQztLQUNyRCxDQUFDLENBQUM7R0FDSixNQUFNO0lBQ0wsS0FBSyxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztHQUMvQzs7RUFFRCxJQUFJLENBQUMsS0FBSyxFQUFFO0lBQ1YsT0FBTyxNQUFNLENBQUM7R0FDZjtFQUNEQyxJQUFNLE9BQU8sR0FBRyxFQUFFLENBQUM7RUFDbkIsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRTtJQUN2QixLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsRUFBRSxPQUFBLEtBQUssRUFBRSxDQUFDLENBQUM7R0FDeEUsTUFBTTtJQUNMLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxFQUFFLE9BQUEsS0FBSyxFQUFFLENBQUMsQ0FBQztHQUNuRDtFQUNELENBQUMseUNBQXlDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLGFBQWEsRUFBRTtJQUM3RSxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEVBQUU7TUFDOUIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ2pEO0dBQ0YsQ0FBQyxDQUFDO0VBQ0gsQ0FBQyxpRUFBaUUsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsWUFBWSxFQUFFO0lBQ3BHLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsRUFBRTtNQUM3QixNQUFNLENBQUMsSUFBSSxTQUFDLEVBQUMsS0FBQyxDQUFDLFlBQVksQ0FBQyxHQUFBLEtBQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLFNBQUksT0FBTyxDQUFDLENBQUM7Y0FBQTtLQUNyRTtHQUNGLENBQUMsQ0FBQzs7RUFFSCxTQUFTLFlBQVksQ0FBQyxhQUFhLEVBQUUsY0FBYyxFQUFFO0lBQ25ELE1BQU0sQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO0lBQy9CRCxJQUFJLGVBQWUsR0FBRyxLQUFLLENBQUM7SUFDNUIsQ0FBQyx5Q0FBeUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsYUFBYSxFQUFFO01BQzdFLElBQUksYUFBYSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1FBQ2hDLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFDdkJDLElBQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO1FBQ3JFLE1BQU0sQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1FBQzlCLE1BQU0sQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLFVBQVUsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDO09BQ3BGO0tBQ0YsQ0FBQyxDQUFDO0lBQ0gsSUFBSSxlQUFlLEVBQUUsRUFBQSxPQUFPLEVBQUE7SUFDNUIsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsY0FBYyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7R0FDekU7RUFDRCxTQUFTLFdBQVcsR0FBRztJQUNyQixNQUFNLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztHQUMvQjtFQUNELElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUU7SUFDckIsTUFBTSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7O0lBRS9CLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0dBQzNEOztFQUVELE9BQU8sTUFBTSxDQUFDO0NBQ2Y7O0FBRUQsU0FBUyxPQUFPLENBQUMsUUFBUSxFQUFFLFdBQWdCLEVBQUU7MkNBQVAsR0FBRyxFQUFFOztFQUN6Q0EsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0VBQ3BCQSxJQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQzNCLE9BQU8sRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU87SUFDOUIsU0FBUyxFQUFFLElBQUk7SUFDZixPQUFPLEVBQUUsSUFBSTtJQUNiLEVBQUUsRUFBRSxFQUFFO0dBQ1AsRUFBRSxXQUFXLENBQUMsQ0FBQzs7RUFFaEIsSUFBUSxXQUFXLHVCQUFiO0VBQ04sSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFOztJQUVqQixJQUFJLE9BQU8sQ0FBQyxLQUFLLEtBQUssTUFBTSxDQUFDLFlBQVksRUFBRTtNQUN6QyxNQUFNLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7S0FDckM7OztJQUdELElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksT0FBTyxDQUFDLFNBQVMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUU7TUFDM0UsT0FBTyxDQUFDLE9BQU87UUFDYjtVQUNFLEdBQUcsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUc7VUFDdEIsU0FBUyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSztTQUM3QjtRQUNELENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLElBQUksRUFBRSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsa0JBQWtCLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUMvRjs7O0lBR0QsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO01BQ25CLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7TUFDOUQsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO0tBQ3RCO0dBQ0Y7OztFQUdELE9BQThCLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFDLEdBQUUsSUFBRSxRQUFRLENBQUMsRUFBRSxDQUFBLEdBQUksT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDO0VBQS9GLElBQUEsU0FBUztFQUFFLElBQUEsU0FBUyxpQkFBdEI7OztFQUdOLElBQVEsR0FBRztFQUFFLElBQUEsT0FBTztFQUFFLElBQUEsRUFBRTtFQUFFLElBQUEsUUFBUTtFQUFFLElBQUEsV0FBVztFQUFFLElBQUEsU0FBUztFQUFFLElBQUEsWUFBWSx5QkFBbEU7O0VBRU4sU0FBUyxXQUFXLEdBQUc7O0lBRXJCLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsQ0FBQzs7SUFFdEMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNwRCxNQUFNLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUMxRCxJQUFJLFNBQVMsRUFBRTtNQUNiLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztLQUNsRDtHQUNGOzs7RUFHRCxTQUFTLE9BQU8sQ0FBQyxTQUFTLEVBQUU7SUFDMUIsSUFBSSxTQUFTLEVBQUU7TUFDYixJQUFJLE9BQU8sU0FBUyxLQUFLLFFBQVEsRUFBRTtRQUNqQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO09BQzNCLE1BQU07UUFDTCxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ25CLElBQUksU0FBUyxDQUFDLFdBQVcsRUFBRTtVQUN6QixTQUFTLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxVQUFDLFdBQVcsRUFBRTtZQUN4QyxTQUFTLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1dBQy9CLENBQUMsQ0FBQztTQUNKLE1BQU07VUFDTCxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzdCO09BQ0Y7TUFDRCxXQUFXLEVBQUUsQ0FBQztLQUNmO0dBQ0Y7RUFDRCxTQUFTLE1BQU0sR0FBRztJQUNoQixNQUFNLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztJQUM5QixPQUFPLE1BQU0sQ0FBQztHQUNmOztFQUVELElBQUksT0FBTyxFQUFFO0lBQ1gsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN4QixXQUFXLEVBQUUsQ0FBQztHQUNmLE1BQU0sSUFBSSxRQUFRLElBQUksV0FBVyxFQUFFO0lBQ2xDLElBQUk7TUFDRixNQUFNLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQzNFLENBQUMsT0FBTyxHQUFHLEVBQUU7TUFDWixNQUFNLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztNQUM5QixNQUFNLEdBQUcsQ0FBQztLQUNYO0dBQ0YsTUFBTSxJQUFJLEVBQUUsRUFBRTtJQUNiLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbkIsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNyQixXQUFXLEVBQUUsQ0FBQztHQUNmLE1BQU0sSUFBSSxTQUFTLElBQUksWUFBWSxFQUFFOztJQUVwQyxJQUFJO01BQ0YsTUFBTSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDNUYsQ0FBQyxPQUFPLEdBQUcsRUFBRTtNQUNaLE1BQU0sQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO01BQzlCLE1BQU0sR0FBRyxDQUFDO0tBQ1g7R0FDRixNQUFNLElBQUksR0FBRyxFQUFFOztJQUVkLElBQUksTUFBTSxDQUFDLEdBQUcsRUFBRTtNQUNkLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7TUFDbkIsTUFBTSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7S0FDcEI7SUFDRCxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxXQUFXLENBQUM7T0FDaEMsSUFBSSxDQUFDLFVBQUMsVUFBVSxFQUFFO1FBQ2pCLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDM0IsV0FBVyxFQUFFLENBQUM7T0FDZixDQUFDO09BQ0QsS0FBSyxDQUFDLFlBQUc7UUFDUixNQUFNLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztPQUMvQixDQUFDLENBQUM7R0FDTjtDQUNGO0FBQ0QsU0FBUyxTQUFTLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUU7RUFDakRBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztFQUNwQixTQUFTLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFLFFBQVEsQ0FBQyxDQUFDO0VBQ2hELE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztFQUNyRSxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRTtJQUMxQyxJQUFJLFFBQVEsQ0FBQyxXQUFXLEVBQUU7TUFDeEIsUUFBUSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUNoQztHQUNGLENBQUMsQ0FBQztFQUNILFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDcEI7O0FBRUQsU0FBUyxTQUFTLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFnQixFQUFFOzJDQUFQLEdBQUcsRUFBRTs7RUFDbkRBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztFQUNwQkEsSUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQztFQUN2QkEsSUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUMzQixPQUFPLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPO0lBQzlCLFNBQVMsRUFBRSxJQUFJO0lBQ2YsT0FBTyxFQUFFLElBQUk7SUFDYixFQUFFLEVBQUUsRUFBRTtHQUNQLEVBQUUsV0FBVyxDQUFDLENBQUM7O0VBRWhCQSxJQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0VBQzNDQSxJQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDOztFQUUvQixJQUFRLFdBQVcsdUJBQWI7OztFQUdOLElBQVEsR0FBRztFQUFFLElBQUEsUUFBUTtFQUFFLElBQUEsV0FBVztFQUFFLElBQUEsU0FBUztFQUFFLElBQUEsWUFBWSw0QkFBckQ7O0VBRU4sU0FBUyxhQUFhLEdBQUc7O0lBRXZCQSxJQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2pELFVBQVUsQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDOztJQUVqQyxTQUFTLGdCQUFnQixHQUFHO01BQzFCLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztLQUNmO0lBQ0QsS0FBSyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsWUFBRztNQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0tBQ2hELENBQUMsQ0FBQztJQUNILEtBQUssQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLFlBQUc7TUFDeEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztNQUM5QyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRTtRQUN4QixNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7T0FDZjtLQUNGLENBQUMsQ0FBQzs7SUFFSCxLQUFLLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxZQUFHO01BQ3pCLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFDLENBQUcsU0FBUyxDQUFDLFdBQVcsRUFBRSxtQkFBYyxHQUFHLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztNQUMzRSxLQUFLLENBQUMsSUFBSSxFQUFDLFNBQVksaUJBQWEsR0FBRyxLQUFLLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztNQUMvRCxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFO1FBQ3hCLEtBQUssQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO09BQ2hDO01BQ0QsS0FBSyxDQUFDLFFBQVEsQ0FBQyxZQUFHO1FBQ2hCLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNoQixPQUFPLFVBQVUsQ0FBQyxhQUFhLENBQUM7T0FDakMsQ0FBQyxDQUFDO0tBQ0osQ0FBQyxDQUFDOztJQUVILElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTs7TUFFakIsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFO1FBQ2hELE9BQU8sQ0FBQyxJQUFJO1VBQ1Y7WUFDRSxHQUFHLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHO1lBQ3RCLFNBQVMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUs7WUFDNUIsS0FBSyxFQUFFLFNBQVM7V0FDakI7VUFDRCxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7T0FDL0Y7OztNQUdELElBQUksT0FBTyxDQUFDLEtBQUssS0FBSyxNQUFNLENBQUMsWUFBWSxFQUFFO1FBQ3pDLE1BQU0sQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsT0FBQSxLQUFLLEVBQUUsQ0FBQyxDQUFDO09BQzlEOzs7TUFHRCxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7UUFDbkIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2QyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7T0FDdEI7S0FDRjs7O0lBR0QsTUFBTSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQzs7O0lBR3JDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFDLENBQUcsU0FBUyxDQUFDLFdBQVcsRUFBRSxZQUFPLElBQUUsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFBLGFBQVMsR0FBRyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdEcsTUFBTSxDQUFDLElBQUksRUFBQyxTQUFZLFVBQU0sR0FBRSxTQUFTLFlBQVEsR0FBRyxLQUFLLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQzs7SUFFNUUsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0dBQ2Q7OztFQUdELFNBQVMsT0FBTyxDQUFDLFNBQVMsRUFBRTtJQUMxQixJQUFJLFNBQVMsRUFBRTtNQUNiLElBQUksT0FBTyxTQUFTLEtBQUssUUFBUSxFQUFFO1FBQ2pDLFdBQVcsQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO09BQ2pDLE1BQU0sSUFBSSxTQUFTLENBQUMsV0FBVyxFQUFFO1FBQ2hDLFNBQVMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLFVBQUMsV0FBVyxFQUFFO1VBQ3hDLFdBQVcsQ0FBQyxFQUFFLEdBQUcsV0FBVyxDQUFDO1VBQzdCLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQzlCLENBQUMsQ0FBQztPQUNKLE1BQU07UUFDTCxXQUFXLENBQUMsRUFBRSxHQUFHLFNBQVMsQ0FBQztPQUM1QjtNQUNELGFBQWEsRUFBRSxDQUFDO0tBQ2pCO0dBQ0Y7RUFDRCxTQUFTLE1BQU0sR0FBRztJQUNoQixNQUFNLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztJQUM5QixPQUFPLE1BQU0sQ0FBQztHQUNmOztFQUVELElBQUksUUFBUSxJQUFJLFdBQVcsRUFBRTtJQUMzQixJQUFJO01BQ0YsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztLQUM3RSxDQUFDLE9BQU8sR0FBRyxFQUFFO01BQ1osTUFBTSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7TUFDOUIsTUFBTSxHQUFHLENBQUM7S0FDWDtHQUNGLE1BQU0sSUFBSSxTQUFTLElBQUksWUFBWSxFQUFFOztJQUVwQyxJQUFJO01BQ0YsTUFBTSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQzdGLENBQUMsT0FBTyxHQUFHLEVBQUU7TUFDWixNQUFNLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztNQUM5QixNQUFNLEdBQUcsQ0FBQztLQUNYO0dBQ0YsTUFBTSxJQUFJLEdBQUcsRUFBRTs7SUFFZCxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUU7TUFDZCxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO01BQ25CLE1BQU0sQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO0tBQ3BCO0lBQ0QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDO09BQ2hDLElBQUksQ0FBQyxVQUFDLFlBQVksRUFBRTtRQUNuQixXQUFXLENBQUMsT0FBTyxHQUFHLFlBQVksQ0FBQztRQUNuQyxhQUFhLEVBQUUsQ0FBQztPQUNqQixDQUFDO09BQ0QsS0FBSyxDQUFDLFlBQUc7UUFDUixNQUFNLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztPQUMvQixDQUFDLENBQUM7R0FDTixNQUFNO0lBQ0wsYUFBYSxFQUFFLENBQUM7R0FDakI7Q0FDRjtBQUNELFNBQVMsV0FBVyxDQUFDLEtBQUssRUFBRTtFQUMxQixLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0VBQzdDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztDQUNmOztBQUVELFNBQVMsUUFBUSxDQUFDLEVBQUUsRUFBRSxlQUFlLEVBQUU7RUFDckNBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztFQUNwQkEsSUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQztFQUN2QkEsSUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQzs7RUFFekJBLElBQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7SUFDM0IsT0FBTyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTztJQUM5QixTQUFTLEVBQUUsSUFBSTtHQUNoQixFQUFFLGVBQWUsQ0FBQyxDQUFDOztFQUVwQkEsSUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQztFQUMzQ0EsSUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQzs7RUFFN0NBLElBQU0sUUFBUSxHQUFHWSxHQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDdkJaLElBQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDOztFQUV0RCxJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUU7O0lBRW5CLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztHQUN0Qzs7RUFFREQsSUFBSSxTQUFTLENBQUM7RUFDZEEsSUFBSSxlQUFlLENBQUM7RUFDcEJBLElBQUksZUFBZSxDQUFDOztFQUVwQixJQUFJLGFBQWEsRUFBRTtJQUNqQixlQUFlLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDekUsSUFBSSxjQUFjLEVBQUU7TUFDbEIsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7TUFDN0IsSUFBSSxlQUFlLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUM5QixRQUFRLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO09BQ3ZDO01BQ0QsSUFBSSxlQUFlLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFOztRQUV0RCxlQUFlLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7T0FDaEQ7TUFDRCxlQUFlLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0tBQ3JELE1BQU07TUFDTCxlQUFlLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7S0FDMUU7R0FDRjs7RUFFRCxNQUFNLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztFQUMvQixJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0lBQ2xELE1BQU0sQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO0lBQzlCLE9BQU8sTUFBTSxDQUFDO0dBQ2Y7OztFQUdELE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7O0VBR3JDLFFBQVE7S0FDTCxRQUFRLENBQUMsZUFBZSxDQUFDO0tBQ3pCLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQzs7RUFFMUIsSUFBSSxhQUFhLElBQUksZUFBZSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7SUFDL0MsZUFBZTtPQUNaLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQztPQUMzQixXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7R0FDM0I7Ozs7RUFJREEsSUFBSSxTQUFTLENBQUM7RUFDZCxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUU7SUFDakIsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLDhCQUE4QixDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtNQUM1RyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ2xELFNBQVMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsRixNQUFNLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3hGLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztPQUMvQixNQUFNO1FBQ0wsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtVQUMvQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1NBQy9ELE1BQU07VUFDTCxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDcEM7T0FDRjs7TUFFRCxJQUFJLFNBQVMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRTtRQUN6QyxRQUFRLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBSyxFQUFFLFlBQVksRUFBRTtVQUM1REMsSUFBTSxhQUFhLEdBQUdZLEdBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQztVQUN0Q2IsSUFBSSxlQUFlLENBQUM7VUFDcEIsSUFBSSxjQUFjLEVBQUU7O1lBRWxCLGVBQWUsR0FBR2EsR0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7V0FDNUQ7VUFDRCxJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksYUFBYSxDQUFDLEtBQUssRUFBRSxHQUFHLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNoRixJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRTtjQUN0RCxhQUFhLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2NBQ2xDLElBQUksY0FBYyxFQUFFO2dCQUNsQixlQUFlLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2VBQ3JDO2FBQ0YsTUFBTTtjQUNMLE1BQU0sQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLGFBQWEsRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztjQUNwRyxNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2NBQy9CLElBQUksY0FBYyxJQUFJLGVBQWUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNoRCxNQUFNLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDO2VBQ2xDO2FBQ0Y7V0FDRjtTQUNGLENBQUMsQ0FBQztPQUNKLE1BQU07UUFDTFosSUFBTSxhQUFhLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1FBQ3BFRCxJQUFJLGVBQWUsQ0FBQztRQUNwQixJQUFJLGNBQWMsRUFBRTs7VUFFbEIsZUFBZSxHQUFHYSxHQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztTQUM1RDtRQUNELElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFO1VBQ2xGLGFBQWEsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7VUFDbEMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNyQyxNQUFNLElBQUksYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7VUFDbkMsTUFBTSxDQUFDLFlBQVksQ0FBQyxjQUFjLEVBQUUsYUFBYSxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1VBQ3BHLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7VUFDL0IsSUFBSSxjQUFjLElBQUksZUFBZSxDQUFDLE1BQU0sRUFBRTtZQUM1QyxNQUFNLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1dBQ2xDO1NBQ0Y7T0FDRjtLQUNGO0dBQ0Y7OztFQUdEWixJQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7RUFDM0RBLElBQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7O0VBRTVDLFNBQVMsVUFBVSxHQUFHO0lBQ3BCLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO01BQ3hDLElBQUksQ0FBQyxZQUFZLElBQUksV0FBVyxFQUFFO1FBQ2hDLFdBQVcsQ0FBQyxLQUFLLENBQUMsVUFBQyxXQUFXLEVBQUU7VUFDOUJZLEdBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDdkMsQ0FBQyxDQUFDO09BQ0osTUFBTTtRQUNMLFFBQVEsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7T0FDakM7S0FDRjtJQUNELElBQUksY0FBYyxJQUFJLGVBQWUsQ0FBQyxNQUFNLEVBQUU7TUFDNUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsQ0FBQztNQUM5QyxJQUFJLGVBQWUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzlCLGVBQWUsQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLENBQUM7T0FDL0MsTUFBTTtRQUNMLFNBQVMsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7T0FDbkM7S0FDRjtJQUNELElBQUksQ0FBQyxZQUFZLEVBQUU7TUFDakIsTUFBTSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztLQUNyRztHQUNGOztFQUVELElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTs7SUFFbkIsVUFBVSxFQUFFLENBQUM7O0lBRWIsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNqRyxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsOEJBQThCLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO01BQy9ELFFBQVEsQ0FBQyxPQUFPLENBQUMsOEJBQThCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxLQUFLLEVBQUUsWUFBWSxFQUFFO1FBQzFFWixJQUFNLGFBQWEsR0FBR1ksR0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3RDYixJQUFJLGVBQWUsQ0FBQztRQUNwQixJQUFJLGNBQWMsRUFBRTs7VUFFbEIsZUFBZSxHQUFHYSxHQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztTQUM1RDtRQUNELElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFO1VBQzlFLGFBQWEsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7VUFDbEMsSUFBSSxjQUFjLEVBQUU7WUFDbEIsZUFBZSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztXQUNyQztTQUNGLE1BQU07VUFDTCxNQUFNLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFBRSxhQUFhLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztVQUMzRixNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1VBQy9CLElBQUksY0FBYyxJQUFJLGVBQWUsQ0FBQyxNQUFNLEVBQUU7WUFDNUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztXQUNsQztTQUNGO09BQ0YsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxNQUFNLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztJQUM5QixPQUFPLE1BQU0sQ0FBQztHQUNmOzs7RUFHRCxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUU7SUFDaEQsSUFBSSxTQUFTLEVBQUUsRUFBQSxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBQTtTQUNqQyxFQUFBLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFBO0dBQ3JCOzs7RUFHRCxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtJQUMvQixNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDcEM7RUFDRCxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO0VBQ3JCLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQzs7O0VBR3JCLE1BQU0sQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQzs7O0VBR3BDLFVBQVUsRUFBRSxDQUFDOzs7RUFHYixJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtJQUMzQixNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUU7TUFDaEUsT0FBTyxFQUFFLEtBQUs7TUFDZCxTQUFTLEVBQUUsS0FBSztLQUNqQixDQUFDLENBQUMsQ0FBQztHQUNMOzs7RUFHRCxNQUFNLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDOzs7RUFHakcsTUFBTSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0VBQzNGLE1BQU0sQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQzs7O0VBR3hGLFNBQVMsY0FBYyxHQUFHOztJQUV4QlosSUFBTSxXQUFXLEdBQUcsc0NBQXNDLENBQUM7SUFDM0RBLElBQU0sYUFBYSxHQUFHLDRDQUE0QyxDQUFDO0lBQ25FLFFBQVEsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzNELFFBQVEsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3hELElBQUksYUFBYSxFQUFFO01BQ2pCLGVBQWUsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUM7TUFDdEUsZUFBZSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDcEU7OztJQUdELE1BQU0sQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMxRixNQUFNLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7OztJQUd2RixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRTtNQUM3RSxRQUFRLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO01BQzdCLElBQUksY0FBYyxFQUFFO1FBQ2xCLGVBQWUsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7T0FDckM7S0FDRixNQUFNO01BQ0wsTUFBTSxDQUFDLFlBQVksQ0FBQyxjQUFjLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO01BQzNGLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7TUFDMUIsSUFBSSxjQUFjLElBQUksZUFBZSxDQUFDLE1BQU0sRUFBRTtRQUM1QyxNQUFNLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDO09BQ2xDO0tBQ0Y7O0lBRUQsTUFBTSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7SUFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDOzs7SUFHL0VBLElBQU0sbUJBQW1CLEdBQUcsR0FBRyxDQUFDLEtBQUssS0FBSyxLQUFLLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDO0lBQ3hKLElBQUksbUJBQW1CLEVBQUU7TUFDdkIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7S0FDM0U7SUFDRCxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFO01BQzNCLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0tBQzVCO0dBQ0Y7O0VBRUQsU0FBUyxrQkFBa0IsR0FBRztJQUM1QkEsSUFBTSxXQUFXLEdBQUcsc0NBQXNDLENBQUM7SUFDM0RBLElBQU0sYUFBYSxHQUFHLDRDQUE0QyxDQUFDO0lBQ25FLFFBQVEsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzNELFFBQVEsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzVELElBQUksYUFBYSxFQUFFO01BQ2pCLGVBQWUsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUM7TUFDdEUsZUFBZSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQztLQUN4RTtHQUNGOztFQUVELElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtJQUNuQixrQkFBa0IsRUFBRSxDQUFDO0lBQ3JCLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxZQUFHO01BQ2xGLGNBQWMsRUFBRSxDQUFDO0tBQ2xCLENBQUMsQ0FBQztHQUNKLE1BQU07SUFDTCxjQUFjLEVBQUUsQ0FBQztHQUNsQjs7RUFFRCxPQUFPLE1BQU0sQ0FBQztDQUNmO0FBQ0QsU0FBUyxRQUFRLENBQUMsVUFBVSxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRTtFQUMzREEsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDOztFQUVwQixJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEVBQUEsT0FBTyxNQUFNLENBQUMsRUFBQTtFQUNoRUEsSUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0VBQzFCQSxJQUFNLE9BQU8sR0FBRyxXQUFXLENBQUM7RUFDNUIsSUFBUSxHQUFHO0VBQUUsSUFBQSxPQUFPO0VBQUUsSUFBQSxFQUFFO0VBQUUsSUFBQSxJQUFJO0VBQUUsSUFBQSxRQUFRO0VBQUUsSUFBQSxXQUFXO0VBQUUsSUFBQSxTQUFTO0VBQUUsSUFBQSxZQUFZLHVCQUF4RTtFQUNOLElBQVEsV0FBVyx1QkFBYjs7RUFFTjtJQUNFLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRztJQUNqQixNQUFNLENBQUMsR0FBRyxLQUFLLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRztJQUNoQyxFQUFFLE9BQU8sQ0FBQyxhQUFhLElBQUksT0FBTyxDQUFDLGNBQWMsQ0FBQztJQUNsRCxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsa0JBQWtCO01BQy9CO0lBQ0YsT0FBTyxLQUFLLENBQUM7R0FDZDs7RUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxHQUFHLEVBQUU7SUFDekIsT0FBTyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0dBQ3JEOzs7RUFHRCxTQUFTLE9BQU8sQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFO0lBQ25DLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztHQUNuRTtFQUNELFNBQVMsTUFBTSxHQUFHO0lBQ2hCLE1BQU0sQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO0lBQzlCLE9BQU8sTUFBTSxDQUFDO0dBQ2Y7OztFQUdELElBQUksT0FBTyxFQUFFO0lBQ1gsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0dBQ3JELE1BQU0sSUFBSSxRQUFRLElBQUksV0FBVyxFQUFFOztJQUVsQyxJQUFJO01BQ0YsTUFBTSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztLQUM1RSxDQUFDLE9BQU8sR0FBRyxFQUFFO01BQ1osTUFBTSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7TUFDOUIsTUFBTSxHQUFHLENBQUM7S0FDWDtHQUNGLE1BQU0sSUFBSSxFQUFFLEVBQUU7O0lBRWIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0dBQ2hELE1BQU0sSUFBSSxJQUFJLEVBQUU7O0lBRWYsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBQyxvQkFBa0IsR0FBRSxJQUFJLFFBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztHQUNuRixNQUFNLElBQUksU0FBUyxJQUFJLFlBQVksRUFBRTs7SUFFcEMsSUFBSTtNQUNGLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztLQUMxRixDQUFDLE9BQU8sR0FBRyxFQUFFO01BQ1osTUFBTSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7TUFDOUIsTUFBTSxHQUFHLENBQUM7S0FDWDtHQUNGLE1BQU0sSUFBSSxHQUFHLEVBQUU7O0lBRWQsSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFO01BQ2QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztNQUNuQixNQUFNLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQztLQUNwQjtJQUNELE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQztPQUNoQyxJQUFJLENBQUMsVUFBQyxXQUFXLEVBQUU7UUFDbEIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO09BQ3pELENBQUM7T0FDRCxLQUFLLENBQUMsWUFBRztRQUNSLE1BQU0sQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO09BQy9CLENBQUMsQ0FBQztHQUNOO0VBQ0QsT0FBTyxNQUFNLENBQUM7Q0FDZjtBQUNELFNBQVMsSUFBSSxHQUFVOzs7O0VBQ3JCRCxJQUFJLFdBQVcsQ0FBQztFQUNoQkEsSUFBSSxlQUFlLENBQUM7RUFDcEIsSUFBSSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLEVBQUU7SUFDL0IsZUFBZSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7R0FDakMsTUFBTTtJQUNMLFdBQVcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEIsZUFBZSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7R0FDakM7O0VBRURDLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztFQUNwQkEsSUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQztFQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtJQUNoQixHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUN6RCxPQUFPLE1BQU0sQ0FBQztHQUNmOztFQUVERCxJQUFJLG1CQUFtQixHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO0VBQ3BEQSxJQUFJLFNBQVMsQ0FBQztFQUNkLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtJQUN4QixDQUFDLHlDQUF5QyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxhQUFhLEVBQUU7TUFDN0UsSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsRUFBRTtRQUM1QyxtQkFBbUIsR0FBRyxJQUFJLENBQUM7UUFDM0IsU0FBUyxHQUFHLGFBQWEsQ0FBQztPQUMzQjtLQUNGLENBQUMsQ0FBQztHQUNKO0VBQ0QsSUFBSSxtQkFBbUIsRUFBRTtJQUN2QkMsSUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFLO3lCQUN6QixNQUFNLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxhQUFhO3lCQUN2QyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDMUNBLElBQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDOURELElBQUksYUFBYSxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMxRCxJQUFJLENBQUMsYUFBYSxJQUFJLFdBQVcsRUFBRTtNQUNqQyxhQUFhLEdBQUc7UUFDZCxHQUFHLEVBQUUsV0FBVztRQUNoQixJQUFJLEVBQUUsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsS0FBSyxFQUFFLEtBQUssQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO1FBQ3ZDLEtBQUssRUFBRTtVQUNMLElBQUksRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztVQUMvQixHQUFHLEVBQUUsV0FBVztTQUNqQjtPQUNGLENBQUM7S0FDSDtJQUNELElBQUksQ0FBQyxhQUFhLElBQUksQ0FBQyxZQUFZLEVBQUU7TUFDbkMsT0FBTyxNQUFNLENBQUM7S0FDZjtJQUNELElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksZUFBZSxDQUFDLFNBQVMsS0FBSyxLQUFLLEVBQUU7TUFDbEUsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0tBQ2hCO0lBQ0QsTUFBTSxDQUFDLFlBQVksR0FBRyxhQUFhLENBQUM7SUFDcEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNyQixNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNqQyxPQUFPLE1BQU0sQ0FBQztHQUNmO0VBQ0RDLElBQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUMzRixJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssSUFBSSxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtJQUN0RCxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsS0FBSyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUU7TUFDekksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztNQUN2RyxPQUFPLE1BQU0sQ0FBQztLQUNmO0lBQ0QsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsRUFBRSxhQUFhLEVBQUUsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRTtNQUNuRSxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLO0tBQ3JDLENBQUMsQ0FBQyxDQUFDO0lBQ0osT0FBTyxNQUFNLENBQUM7R0FDZjs7O0VBR0QsSUFBSSxXQUFXLEtBQUssR0FBRyxFQUFFO0lBQ3ZCLFdBQVcsR0FBRyxTQUFTLENBQUM7R0FDekI7RUFDRCxJQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO0lBQzNFLFdBQVcsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxHQUFHLElBQUksV0FBVyxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7R0FDdkU7RUFDRCxJQUFJLENBQUMsV0FBVyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtJQUM3QyxXQUFXLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztHQUN6RDs7O0VBR0RELElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztFQUNsRCxJQUFJLENBQUMsS0FBSyxFQUFFO0lBQ1YsSUFBSSxXQUFXLEVBQUU7TUFDZixLQUFLLEdBQUc7UUFDTixHQUFHLEVBQUUsV0FBVztRQUNoQixJQUFJLEVBQUUsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsS0FBSyxFQUFFLEtBQUssQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO1FBQ3ZDLEtBQUssRUFBRTtVQUNMLElBQUksRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztVQUMvQixHQUFHLEVBQUUsV0FBVztTQUNqQjtPQUNGLENBQUM7S0FDSDtHQUNGO0VBQ0QsSUFBSSxDQUFDLEtBQUssRUFBRTtJQUNWLE9BQU8sTUFBTSxDQUFDO0dBQ2Y7RUFDREMsSUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDO0VBQ25CLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUU7SUFDdkIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsZUFBZSxFQUFFLEVBQUUsT0FBQSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0dBQ3hFLE1BQU07SUFDTCxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsRUFBRSxPQUFBLEtBQUssRUFBRSxDQUFDLENBQUM7R0FDbkQ7O0VBRUQsSUFBSSxPQUFPLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFO0lBQzdDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLHdCQUF3QixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRTtNQUNqRSxJQUFJLE1BQU0sQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLEtBQUssQ0FBQyxHQUFHLEVBQUU7UUFDakYsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztPQUMxQztLQUNGLENBQUMsQ0FBQztHQUNKOztFQUVELENBQUMsaUVBQWlFLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLFlBQVksRUFBRTtJQUNwRyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEVBQUU7TUFDN0IsTUFBTSxDQUFDLFFBQVEsU0FBQyxFQUFDLEtBQUMsQ0FBQyxZQUFZLENBQUMsR0FBQSxLQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxTQUFJLE9BQU8sQ0FBQyxDQUFDO2NBQUE7S0FDekU7R0FDRixDQUFDLENBQUM7O0VBRUgsU0FBUyxZQUFZLENBQUMsYUFBYSxFQUFFLGNBQWMsRUFBRTtJQUNuRCxNQUFNLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztJQUMvQixNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxjQUFjLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztHQUM3RTtFQUNELFNBQVMsV0FBVyxHQUFHO0lBQ3JCLE1BQU0sQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO0dBQy9CO0VBQ0QsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRTtJQUNyQixNQUFNLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQzs7SUFFL0IsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxZQUFZLEVBQUUsV0FBVyxDQUFDLENBQUM7R0FDM0Q7O0VBRUQsT0FBTyxNQUFNLENBQUM7Q0FDZjs7QUFFRCxJQUFNLFFBQVE7RUFBeUIsaUJBQzFCLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRTtJQUNyQlcsZUFBSyxLQUFBLENBQUMsTUFBQSxFQUFFLEVBQUUsQ0FBQyxPQUFPLElBQUksS0FBSyxXQUFXLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDdERYLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQzs7O0lBR3BCLE1BQU0sQ0FBQyxXQUFXLEdBQUcsT0FBTyxJQUFJLEtBQUssV0FBVyxDQUFDOztJQUVqRCxJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUU7O01BRXRCLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRTtRQUMxQixLQUFBLEdBQUc7UUFDSCxNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJO1FBQ3ZCLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTSxJQUFJLEVBQUU7UUFDeEIsS0FBSyxFQUFFLEdBQUcsQ0FBQyxLQUFLO09BQ2pCLENBQUMsQ0FBQztLQUNKLE1BQU07O01BRUwsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFO1FBQzFCLEtBQUEsR0FBRztRQUNILE1BQUEsSUFBSTtRQUNKLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtRQUNuQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07UUFDbkIsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO1FBQ2IsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1FBQ3pCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtRQUN2QixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87UUFDckIsYUFBYSxFQUFFLElBQUksQ0FBQyxhQUFhO1FBQ2pDLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSztRQUNoQixhQUFhLEVBQUUsR0FBRyxDQUFDLEtBQUssS0FBSyxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0I7UUFDbEUsY0FBYyxFQUFFLEdBQUcsQ0FBQyxLQUFLLEtBQUssS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyx3QkFBd0I7UUFDM0csWUFBWSxFQUFFLEVBQUU7UUFDaEIsY0FBYyxFQUFFLEVBQUU7T0FDbkIsQ0FBQyxDQUFDO0tBQ0o7OztJQUdELE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxDQUFDOzs7SUFHNUIsTUFBTSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDOzs7SUFHL0MsTUFBTSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7OztJQUc5QkQsSUFBSSxZQUFZLEdBQUcsRUFBRSxDQUFDO0lBQ3RCQSxJQUFJLGFBQWEsR0FBRyxFQUFFLENBQUM7SUFDdkIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsY0FBYyxFQUFFO01BQzVDLFVBQVUsRUFBRSxJQUFJO01BQ2hCLFlBQVksRUFBRSxJQUFJO01BQ2xCLEdBQUcsY0FBQSxDQUFDLFFBQWEsRUFBRTsyQ0FBUCxHQUFHLEVBQUU7O1FBQ2YsYUFBYSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQy9DLFlBQVksR0FBRyxRQUFRLENBQUM7UUFDeEIsSUFBSSxDQUFDLFlBQVksRUFBRSxFQUFBLE9BQU8sRUFBQTtRQUMxQixNQUFNLENBQUMsR0FBRyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUM7UUFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQztPQUM3RDtNQUNELEdBQUcsY0FBQSxHQUFHO1FBQ0osT0FBTyxZQUFZLENBQUM7T0FDckI7S0FDRixDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxlQUFlLEVBQUU7TUFDN0MsVUFBVSxFQUFFLElBQUk7TUFDaEIsWUFBWSxFQUFFLElBQUk7TUFDbEIsR0FBRyxjQUFBLEdBQUc7UUFDSixPQUFPLGFBQWEsQ0FBQztPQUN0QjtNQUNELEdBQUcsY0FBQSxDQUFDLFFBQVEsRUFBRTtRQUNaLGFBQWEsR0FBRyxRQUFRLENBQUM7T0FDMUI7S0FDRixDQUFDLENBQUM7SUFDSCxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTs7TUFFbkIsU0FBQSxPQUFPO01BQ1AsTUFBQSxJQUFJO01BQ0osVUFBQSxRQUFROztNQUVSLFNBQUEsT0FBTztNQUNQLFdBQUEsU0FBUzs7TUFFVCxXQUFBLFNBQVM7TUFDVCxhQUFBLFdBQVc7O01BRVgsVUFBQSxRQUFRO01BQ1IsVUFBQSxRQUFRO01BQ1IsTUFBQSxJQUFJO0tBQ0wsQ0FBQyxDQUFDOztJQUVILE9BQU8sTUFBTSxDQUFDO0dBQ2Y7Ozs7NENBQUE7RUFDRCxtQkFBQSxjQUFjLDRCQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFO0lBQ3BGQyxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7O0lBRXBCQSxJQUFNLHFCQUFxQixHQUFHLG9CQUFtQixHQUFFLFNBQVMsNEJBQXdCLEdBQUUsU0FBUyxDQUFHOzs7SUFHbEcsQ0FBQyxTQUFTLEtBQUssU0FBUyxHQUFHLE9BQU8sR0FBRyxPQUFPLEVBQUUsWUFBWSxDQUFDLFlBQUc7TUFDNUQsSUFBSSxNQUFNLENBQUMsYUFBYSxFQUFFO1FBQ3hCLElBQUksY0FBYyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtVQUN0QyxjQUFjLENBQUMsSUFBSSxDQUFDLGdEQUFnRCxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3JGLE1BQU07VUFDTCxjQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUMvQztRQUNELElBQUksY0FBYyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtVQUN0QyxjQUFjLENBQUMsSUFBSSxDQUFDLGdEQUFnRCxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3JGLE1BQU07VUFDTCxjQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUMvQztPQUNGO01BQ0QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMscUJBQXFCLENBQUMsQ0FBQztNQUM5QyxJQUFJLFFBQVEsRUFBRSxFQUFBLFFBQVEsRUFBRSxDQUFDLEVBQUE7S0FDMUIsQ0FBQyxDQUFDOztJQUVILFNBQVMsY0FBYyxHQUFHO01BQ3hCRCxJQUFJLFVBQVUsQ0FBQztNQUNmLElBQUksY0FBYyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtRQUN0QyxVQUFVLEdBQUcsY0FBYyxDQUFDLFFBQVEsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO09BQzNFLE1BQU07UUFDTCxVQUFVLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztPQUM5QztNQUNELElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBQSxPQUFPLEVBQUE7TUFDeEJBLElBQUksV0FBVyxDQUFDO01BQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFO1FBQzFCLFdBQVcsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO09BQzdDOztNQUVEQSxJQUFJLGdCQUFnQixDQUFDO01BQ3JCLElBQUksY0FBYyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDeEQsZ0JBQWdCLEdBQUcsY0FBYyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO09BQzlELE1BQU07UUFDTCxnQkFBZ0IsR0FBRyxjQUFjLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLGNBQWMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7T0FDNUY7O01BRUQsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7UUFDakNDLElBQU0sVUFBVSxHQUFHWSxHQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDaENaLElBQU0sYUFBYSxHQUFHLFNBQVMsS0FBSyxTQUFTLEdBQUcsU0FBUyxDQUFDLG1CQUFtQixHQUFHLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQztRQUM3RyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsd0JBQXdCLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7VUFDdEhELElBQUksaUJBQWlCLEdBQUcsQ0FBQyxhQUFhLENBQUM7VUFDdkNDLElBQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1VBQ3ZELElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFO1lBQzFCLElBQUksU0FBUyxLQUFLLFNBQVMsRUFBRTtjQUMzQixpQkFBaUIsSUFBSSxXQUFXLENBQUM7YUFDbEMsTUFBTTtjQUNMLGlCQUFpQixJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUM7YUFDdEM7V0FDRjtVQUNELFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsU0FBUyxFQUFDLGNBQWEsR0FBRSxpQkFBaUIsWUFBUSxFQUFFLENBQUM7VUFDcEYsSUFBSSxnQkFBZ0IsSUFBSSxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM3QyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO1dBQ3BFO1NBQ0Y7UUFDRCxVQUFVLENBQUMsU0FBUyxFQUFDLGNBQWEsR0FBRSxhQUFhLFlBQVEsRUFBRSxDQUFDO09BQzdELENBQUMsQ0FBQztLQUNKO0lBQ0QsU0FBUyxjQUFjLEdBQUc7TUFDeEJBLElBQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsd0JBQXdCLENBQUM7O01BRTNERCxJQUFJLGdCQUFnQixHQUFHLENBQUMsQ0FBQztNQUN6QkEsSUFBSSxjQUFjLENBQUM7TUFDbkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLElBQUksV0FBVyxFQUFFO1FBQ3pDLGNBQWMsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO1FBQy9DLElBQUksU0FBUyxLQUFLLFNBQVMsRUFBRTtVQUMzQixnQkFBZ0IsR0FBRyxjQUFjLEdBQUcsQ0FBQyxDQUFDO1NBQ3ZDLE1BQU07VUFDTCxnQkFBZ0IsR0FBRyxDQUFDLGNBQWMsQ0FBQztTQUNwQztPQUNGOzs7TUFHREEsSUFBSSxtQkFBbUIsQ0FBQztNQUN4QixJQUFJLGNBQWMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUU7UUFDdEMsbUJBQW1CLEdBQUcsY0FBYyxDQUFDLFFBQVEsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO09BQ3BGLE1BQU07UUFDTCxtQkFBbUIsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO09BQ3ZEOztNQUVELElBQUksbUJBQW1CLEVBQUU7UUFDdkIsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtVQUMxQ0MsSUFBTSxVQUFVLEdBQUdZLEdBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztVQUNoQ1osSUFBTSxNQUFNLEdBQUcsU0FBUyxLQUFLLFNBQVMsR0FBRyxTQUFTLENBQUMsa0JBQWtCLEdBQUcsU0FBUyxDQUFDLG1CQUFtQixDQUFDO1VBQ3RHLFVBQVUsQ0FBQyxTQUFTLEVBQUMsY0FBYSxHQUFFLE1BQU0sWUFBUSxFQUFFLENBQUM7VUFDckQsSUFBSSxXQUFXLEVBQUU7WUFDZixJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2NBQzVFLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsU0FBUyxFQUFDLGNBQWEsSUFBRSxDQUFDLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQSxZQUFRLEVBQUUsQ0FBQzthQUM5RjtXQUNGO1NBQ0YsQ0FBQyxDQUFDO09BQ0o7S0FDRjtJQUNELElBQUksTUFBTSxDQUFDLGFBQWEsRUFBRTs7TUFFeEIsY0FBYyxFQUFFLENBQUM7TUFDakIsS0FBSyxDQUFDLFFBQVEsQ0FBQyxZQUFHOztRQUVoQixjQUFjLEVBQUUsQ0FBQztRQUNqQixNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO09BQzVDLENBQUMsQ0FBQztLQUNKLE1BQU07O01BRUwsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUMsQ0FBQztLQUM1QztHQUNGLENBQUE7RUFDRCxtQkFBQSxhQUFhLDJCQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFO0lBQ25GQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDcEJBLElBQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUM7SUFDM0NBLElBQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUM7SUFDN0NBLElBQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsd0JBQXdCLENBQUM7SUFDM0RBLElBQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQztJQUN2Q0EsSUFBTSxRQUFRLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDakNBLElBQU0scUJBQXFCLEdBQUcsb0JBQW1CLEdBQUUsU0FBUywyQkFBdUIsR0FBRSxTQUFTLENBQUc7O0lBRWpHRCxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUM7SUFDckJBLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQzs7SUFFakJBLElBQUksU0FBUyxDQUFDO0lBQ2RBLElBQUksU0FBUyxDQUFDO0lBQ2RBLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQzs7SUFFcEIsU0FBUyxlQUFlLENBQUMsRUFBRSxFQUFFLFdBQVcsRUFBRTtNQUN4Q0MsSUFBTSxHQUFHLEdBQUdZLEdBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztNQUNsQlosSUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO01BQzdFQSxJQUFNLFdBQVcsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO01BQzlDQSxJQUFNLHNCQUFzQixHQUFHLFNBQVMsR0FBRyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7TUFDL0RBLElBQU0sT0FBTyxHQUFHLFNBQVMsSUFBSSxXQUFXLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7TUFDdkdELElBQUksT0FBTyxDQUFDO01BQ1osSUFBSSxPQUFPLEVBQUUsRUFBQSxPQUFPLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFBO01BQy9DLE9BQU87UUFDTCxLQUFBLEdBQUc7UUFDSCxTQUFBLE9BQU87UUFDUCxTQUFBLE9BQU87UUFDUCxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQjtRQUNyQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQjtRQUN2QyxXQUFBLFNBQVM7UUFDVCxhQUFBLFdBQVc7UUFDWCx3QkFBQSxzQkFBc0I7T0FDdkIsQ0FBQztLQUNIO0lBQ0QsSUFBSSxhQUFhLEVBQUU7TUFDakIsU0FBUyxHQUFHLEVBQUUsQ0FBQztNQUNmLFNBQVMsR0FBRyxFQUFFLENBQUM7TUFDZixjQUFjLENBQUMsUUFBUSxDQUFDLG1DQUFtQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBSyxFQUFFLEtBQUssRUFBRTtRQUMvRSxTQUFTLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQztPQUN4RCxDQUFDLENBQUM7TUFDSCxjQUFjLENBQUMsUUFBUSxDQUFDLG1DQUFtQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBSyxFQUFFLEtBQUssRUFBRTtRQUMvRSxTQUFTLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQztPQUN4RCxDQUFDLENBQUM7TUFDSCxJQUFJLENBQUMsY0FBYyxFQUFFO1FBQ25CLFdBQVcsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO09BQzdDO01BQ0QsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsTUFBTSxFQUFFO1FBQ3RDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBQyxLQUFLLEVBQUU7VUFDckJDLElBQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQztVQUNoQixJQUFRLFNBQVM7VUFBRSxJQUFBLEdBQUcsYUFBaEI7VUFDTkEsSUFBTSxRQUFRLEdBQUcsTUFBTSxLQUFLLFNBQVMsR0FBRyxTQUFTLEdBQUcsU0FBUyxDQUFDO1VBQzlELElBQUksRUFBRSxTQUFTLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxRQUFRLENBQUMsRUFBRSxFQUFBLE9BQU8sRUFBQTtVQUM5RCxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQUMsVUFBVSxFQUFFO1lBQzVCLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksVUFBVSxDQUFDLE9BQU8sRUFBRTtjQUN6REEsSUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Y0FDeEQsQ0FBQyxDQUFDLFVBQVUsSUFBSSxVQUFVLEdBQUcsVUFBVSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7YUFDeEQ7V0FDRixDQUFDLENBQUM7U0FDSixDQUFDLENBQUM7T0FDSixDQUFDLENBQUM7S0FDSjs7SUFFREQsSUFBSSxTQUFTLENBQUM7SUFDZEEsSUFBSSxVQUFVLENBQUM7O0lBRWYsSUFBSSxHQUFHLEVBQUU7TUFDUCxTQUFTLEdBQUdhLEdBQUMsQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO01BQ3hELFVBQVUsR0FBR0EsR0FBQyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7O01BRTFELElBQUksU0FBUyxLQUFLLFNBQVMsRUFBRTtRQUMzQixPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzFCLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7T0FDNUIsTUFBTTtRQUNMLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDM0IsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztPQUMzQjtLQUNGO0lBQ0RaLElBQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7O0lBRWhELFNBQVMsTUFBTSxHQUFHO01BQ2hCLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztNQUN6QyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7TUFDekMsSUFBSSxHQUFHLEVBQUU7UUFDUCxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDbkIsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3BCLElBQUksYUFBYSxFQUFFO1VBQ2pCLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBQyxLQUFLLEVBQUU7WUFDeEIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDeEIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1dBQzlCLENBQUMsQ0FBQztVQUNILFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBQyxLQUFLLEVBQUU7WUFDeEIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDeEIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1dBQzlCLENBQUMsQ0FBQztVQUNILFNBQVMsR0FBRyxFQUFFLENBQUM7VUFDZixTQUFTLEdBQUcsRUFBRSxDQUFDO1NBQ2hCO09BQ0Y7O01BRUQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMscUJBQXFCLENBQUMsQ0FBQzs7TUFFOUMsSUFBSSxRQUFRLEVBQUUsRUFBQSxRQUFRLEVBQUUsQ0FBQyxFQUFBO0tBQzFCOztJQUVELFNBQVMsTUFBTSxHQUFHO01BQ2hCQSxJQUFNLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7TUFDekIsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFBLFNBQVMsR0FBRyxJQUFJLENBQUMsRUFBQTtNQUNqQ0EsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxHQUFHLFNBQVMsSUFBSSxRQUFRLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7TUFDekVBLElBQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQzs7TUFFdEMsSUFBSSxRQUFRLElBQUksQ0FBQyxFQUFFO1FBQ2pCLElBQUksR0FBRyxJQUFJLENBQUM7T0FDYjtNQUNELElBQUksR0FBRyxFQUFFO1FBQ1AsSUFBSSxTQUFTLEtBQUssU0FBUyxFQUFFO1VBQzNCLE9BQU8sQ0FBQyxTQUFTLEVBQUMsY0FBYSxJQUFFLENBQUMsQ0FBQyxHQUFHLFlBQVksSUFBSSxHQUFHLENBQUEsV0FBTyxFQUFFLENBQUM7VUFDbkUsT0FBTyxDQUFDLFNBQVMsRUFBQyxjQUFhLElBQUUsQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFBLFdBQU8sRUFBRSxDQUFDO1VBQzdELFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLFlBQVksQ0FBQztVQUMxQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxZQUFZLENBQUM7U0FDNUMsTUFBTTtVQUNMLE9BQU8sQ0FBQyxTQUFTLEVBQUMsY0FBYSxJQUFFLEVBQUUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQSxXQUFPLEVBQUUsQ0FBQztVQUNuRSxPQUFPLENBQUMsU0FBUyxFQUFDLGNBQWEsSUFBRSxZQUFZLEdBQUcsR0FBRyxDQUFBLFdBQU8sRUFBRSxDQUFDO1VBQzdELFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLENBQUMsR0FBRyxZQUFZLENBQUM7VUFDOUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsQ0FBQyxHQUFHLFlBQVksQ0FBQztTQUNoRDtRQUNELElBQUksYUFBYSxFQUFFO1VBQ2pCLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBQyxLQUFLLEVBQUU7WUFDeEJBLElBQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7WUFDdEJBLElBQU0sTUFBTSxHQUFHLFNBQVMsS0FBSyxTQUFTLEdBQUcsS0FBSyxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO1lBQzlFLElBQUksS0FBSyxDQUFDLHNCQUFzQixFQUFFO2NBQ2hDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLFlBQVksQ0FBQzthQUNyQztZQUNELElBQUksS0FBSyxDQUFDLFNBQVMsRUFBRTtjQUNuQixHQUFHLENBQUMsU0FBUyxFQUFDLGNBQWEsSUFBRSxNQUFNLElBQUksQ0FBQyxHQUFHLFlBQVksQ0FBQyxDQUFBLFlBQVEsRUFBRSxDQUFDO2FBQ3BFO1lBQ0QsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFO2NBQ2pCLElBQUksU0FBUyxLQUFLLFNBQVMsRUFBRTtnQkFDM0IsS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUMsY0FBYSxJQUFFLENBQUMsQ0FBQyxNQUFNLEdBQUcsV0FBVyxLQUFLLENBQUMsR0FBRyxZQUFZLENBQUMsQ0FBQSxZQUFRLEVBQUUsQ0FBQztlQUMvRixNQUFNO2dCQUNMLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFDLGNBQWEsSUFBRSxDQUFDLENBQUMsTUFBTSxJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsWUFBWSxDQUFDLENBQUEsWUFBUSxFQUFFLENBQUM7ZUFDckc7YUFDRjtXQUNGLENBQUMsQ0FBQztVQUNILFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBQyxLQUFLLEVBQUU7WUFDeEJBLElBQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7WUFDdEJBLElBQU0sTUFBTSxHQUFHLFNBQVMsS0FBSyxTQUFTLEdBQUcsS0FBSyxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO1lBQzlFLElBQUksS0FBSyxDQUFDLHNCQUFzQixFQUFFO2NBQ2hDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLENBQUMsR0FBRyxZQUFZLENBQUMsQ0FBQzthQUMzQztZQUNELElBQUksS0FBSyxDQUFDLFNBQVMsRUFBRTtjQUNuQixHQUFHLENBQUMsU0FBUyxFQUFDLGNBQWEsSUFBRSxNQUFNLElBQUksWUFBWSxDQUFDLENBQUEsWUFBUSxFQUFFLENBQUM7YUFDaEU7WUFDRCxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7Y0FDakIsSUFBSSxTQUFTLEtBQUssU0FBUyxFQUFFO2dCQUMzQixLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBQyxjQUFhLElBQUUsQ0FBQyxDQUFDLE1BQU0sSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFDLEtBQUssWUFBWSxDQUFDLENBQUEsWUFBUSxFQUFFLENBQUM7ZUFDakcsTUFBTTtnQkFDTCxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBQyxjQUFhLElBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBRyxXQUFXLEtBQUssWUFBWSxDQUFDLENBQUEsWUFBUSxFQUFFLENBQUM7ZUFDM0Y7YUFDRjtXQUNGLENBQUMsQ0FBQztTQUNKO09BQ0YsTUFBTTtRQUNMLElBQUksU0FBUyxLQUFLLFNBQVMsRUFBRTtVQUMzQixPQUFPLENBQUMsU0FBUyxFQUFDLGlCQUFnQixJQUFFLENBQUMsQ0FBQyxHQUFHLFlBQVksSUFBSSxFQUFFLENBQUEsVUFBTSxFQUFFLENBQUM7VUFDcEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDLENBQUM7U0FDdEMsTUFBTTtVQUNMLE9BQU8sQ0FBQyxTQUFTLEVBQUMsaUJBQWdCLElBQUUsWUFBWSxHQUFHLEVBQUUsQ0FBQSxVQUFNLEVBQUUsQ0FBQztVQUM5RCxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQUcsWUFBWSxDQUFDLENBQUM7U0FDMUM7T0FDRjs7TUFFRCxJQUFJLElBQUksRUFBRTtRQUNSLE1BQU0sRUFBRSxDQUFDO1FBQ1QsT0FBTztPQUNSO01BQ0QsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUN6Qjs7SUFFRCxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDOztJQUUzQyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0dBQ3pCLENBQUE7RUFDRCxtQkFBQSxPQUFPLHVCQUFVOzs7OztJQUVmQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDcEIsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRTtNQUMvQixNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ2pELE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRTtNQUN0QyxNQUFNLENBQUMsYUFBYSxNQUFBLENBQUMsUUFBQSxJQUFPLENBQUMsQ0FBQztLQUMvQixNQUFNO01BQ0wsTUFBTSxDQUFDLGNBQWMsTUFBQSxDQUFDLFFBQUEsSUFBTyxDQUFDLENBQUM7S0FDaEM7R0FDRixDQUFBO0VBQ0QsbUJBQUEsUUFBUSxzQkFBQyxFQUFFLEVBQUU7SUFDWCxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUEsT0FBTyxFQUFBO0lBQ2hCQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDcEJBLElBQU0sR0FBRyxHQUFHWSxHQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbEIsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxFQUFBLE9BQU8sRUFBQTtJQUM3QixJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUU7TUFDcEQsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUM5QjtJQUNELElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRTtNQUNqQyxPQUFPO0tBQ1I7SUFDRCxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMseUJBQXlCLEVBQUU7TUFDM0MsVUFBVSxDQUFDLFlBQUc7UUFDWixHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7T0FDZCxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQztLQUN6QyxNQUFNO01BQ0wsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO0tBQ2Q7R0FDRixDQUFBO0VBQ0QsbUJBQUEsU0FBUyx1QkFBQyxPQUFPLEVBQUU7SUFDakJaLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztJQUNwQixJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsRUFBRTtNQUMvQixNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUM7S0FDcEMsTUFBTTtNQUNMLElBQUlZLEdBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDL0IsT0FBTyxPQUFPLENBQUM7T0FDaEI7TUFDRCxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7TUFDOUJBLEdBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ25DOztJQUVELE9BQU8sTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0dBQ3BELENBQUE7RUFDRCxtQkFBQSxXQUFXLHlCQUFDLGNBQWMsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFO0lBQ2pEWixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDcEJBLElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDekJBLElBQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUM7OztJQUd2QkEsSUFBTSxjQUFjLEdBQUcsK0VBQStFLENBQUM7O0lBRXZHQSxJQUFNLFVBQVUsR0FBR1ksR0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2hDYixJQUFJLFFBQVEsR0FBRyxjQUFjLENBQUM7SUFDOUIsSUFBSSxVQUFVLEVBQUUsRUFBQSxRQUFRLElBQUksZ0JBQWdCLENBQUMsRUFBQTs7SUFFN0NBLElBQUksS0FBSyxHQUFHLFVBQVU7T0FDbkIsSUFBSSxDQUFDLFFBQVEsQ0FBQztPQUNkLE1BQU0sQ0FBQyxVQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsU0FBR2EsR0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxHQUFBLENBQUMsQ0FBQzs7SUFFckUsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtNQUNwQixJQUFJLE9BQU8sSUFBSSxDQUFDLFFBQVEsS0FBSyxRQUFRLEVBQUU7O1FBRXJDLEtBQUssR0FBRyxVQUFVLENBQUMsSUFBSSxFQUFDLENBQUcsSUFBSSxDQUFDLFFBQVEsT0FBRSxHQUFFLFFBQVEsRUFBRyxDQUFDO09BQ3pEO01BQ0QsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs7UUFFcEIsS0FBSyxHQUFHLFVBQVUsQ0FBQyxJQUFJLEVBQUMsR0FBRSxJQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFBLE1BQUUsR0FBRSxRQUFRLEVBQUcsQ0FBQztPQUNyRTtLQUNGO0lBQ0QsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxFQUFBLE9BQU8sS0FBSyxDQUFDLEVBQUE7OztJQUdyQyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUEsS0FBSyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFBO0lBQ3hFLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLEVBQUEsT0FBTyxLQUFLLENBQUMsRUFBQTtJQUM5QyxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxFQUFBLE9BQU9BLEdBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFBO0lBQ2xELE9BQU8sU0FBUyxDQUFDO0dBQ2xCLENBQUE7RUFDRCxtQkFBQSxhQUFhLDJCQUFDLE1BQW9CLEVBQUU7c0JBQWhCO21DQUFBLEdBQUcsSUFBSSxDQUFDLE1BQU07O0lBQ2hDYixJQUFJLGVBQWUsR0FBRyxFQUFFLENBQUM7SUFDekIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFDLEtBQUssRUFBRTtNQUNyQixJQUFJLFFBQVEsSUFBSSxLQUFLLEVBQUU7UUFDckJDLElBQU0saUJBQWlCLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBQyxVQUFVLEVBQUU7VUFDdERBLElBQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1VBQzVDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsRUFBQyxDQUFHLEtBQUssQ0FBQyxJQUFJLE9BQUUsSUFBRSxNQUFNLENBQUMsSUFBSSxDQUFBLEdBQUksT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1VBQ3RGLE9BQU8sTUFBTSxDQUFDO1NBQ2YsQ0FBQyxDQUFDO1FBQ0gsZUFBZSxHQUFHLGVBQWUsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFSyxNQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztPQUN4RixNQUFNLElBQUksTUFBTSxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsSUFBSSxFQUFFO1FBQ3hDTCxJQUFNYSxtQkFBaUIsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLFFBQVEsRUFBRTtVQUNsRGIsSUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFO1lBQ3JDLElBQUksRUFBRSxFQUFDLENBQUcsS0FBSyxDQUFDLElBQUksT0FBRSxJQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUEsR0FBSSxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDO1lBQy9FLFVBQVUsRUFBRSxLQUFLLENBQUMsSUFBSTtZQUN0QixHQUFHLEVBQUUsUUFBUTtXQUNkLENBQUMsQ0FBQztVQUNILE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQztVQUNuQixPQUFPLE1BQU0sQ0FBQztTQUNmLENBQUMsQ0FBQztRQUNILGVBQWUsR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDSyxNQUFJLENBQUMsYUFBYSxDQUFDUSxtQkFBaUIsQ0FBQyxDQUFDLENBQUM7T0FDakYsTUFBTTtRQUNMLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7T0FDN0I7S0FDRixDQUFDLENBQUM7SUFDSCxPQUFPLGVBQWUsQ0FBQztHQUN4QixDQUFBO0VBQ0QsbUJBQUEsaUJBQWlCLCtCQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUU7SUFDaEMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFBLE9BQU8sU0FBUyxDQUFDLEVBQUE7SUFDM0JiLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztJQUNwQkEsSUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUM3QkEsSUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyREEsSUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2Q0EsSUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQkEsSUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBQ2xCQSxJQUFNLElBQUksR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3Q0EsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBQSxJQUFJLEVBQUMsU0FBRyxJQUFJLEtBQUssRUFBRSxHQUFBLENBQUMsQ0FBQztJQUM3RCxJQUFJLFNBQVMsRUFBRTtNQUNiLE9BQU87UUFDTCxPQUFBLEtBQUs7UUFDTCxNQUFBLElBQUk7UUFDSixRQUFBLE1BQU07UUFDTixLQUFBLEdBQUc7UUFDSCxNQUFBLElBQUk7T0FDTCxDQUFDO0tBQ0g7O0lBRURELElBQUksYUFBYSxDQUFDO0lBQ2xCLFNBQVMsVUFBVSxDQUFDLEdBQVEsRUFBRTsrQkFBUCxHQUFHLEVBQUU7O01BQzFCQyxJQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7TUFDakIsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxJQUFJLEVBQUU7UUFDNUIsSUFBSSxJQUFJLEtBQUssRUFBRSxFQUFFO1VBQ2YsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMzQixLQUFLLENBQUMsSUFBSSxDQUFDO2NBQ1QsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQzthQUM1QixDQUFDLENBQUM7V0FDSixNQUFNLEVBQUEsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFBO1NBQ3pCO09BQ0YsQ0FBQyxDQUFDO01BQ0gsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUNELGVBQWUsQ0FBQyxPQUFPLENBQUMsVUFBQyxLQUFLLEVBQUU7TUFDOUIsSUFBSSxhQUFhLEVBQUUsRUFBQSxPQUFPLEVBQUE7TUFDMUJBLElBQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7TUFDM0MsSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLFFBQVEsQ0FBQyxNQUFNLEVBQUUsRUFBQSxPQUFPLEVBQUE7TUFDbkRELElBQUksWUFBWSxHQUFHLENBQUMsQ0FBQztNQUNyQixXQUFXLENBQUMsT0FBTyxDQUFDLFVBQUMsU0FBUyxFQUFFLEtBQUssRUFBRTtRQUNyQyxJQUFJLE9BQU8sU0FBUyxLQUFLLFFBQVEsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssU0FBUyxFQUFFO1VBQ2xFLFlBQVksSUFBSSxDQUFDLENBQUM7U0FDbkI7UUFDRCxJQUFJLE9BQU8sU0FBUyxLQUFLLFFBQVEsRUFBRTtVQUNqQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztVQUN6QyxZQUFZLElBQUksQ0FBQyxDQUFDO1NBQ25CO09BQ0YsQ0FBQyxDQUFDO01BQ0gsSUFBSSxZQUFZLEtBQUssUUFBUSxDQUFDLE1BQU0sRUFBRTtRQUNwQyxhQUFhLEdBQUc7VUFDZCxPQUFBLEtBQUs7VUFDTCxNQUFBLElBQUk7VUFDSixRQUFBLE1BQU07VUFDTixLQUFBLEdBQUc7VUFDSCxNQUFBLElBQUk7VUFDSixPQUFBLEtBQUs7U0FDTixDQUFDO09BQ0g7S0FDRixDQUFDLENBQUM7SUFDSCxPQUFPLGFBQWEsQ0FBQztHQUN0QixDQUFBO0VBQ0QsbUJBQUEsa0JBQWtCLGdDQUFDLEdBQUcsRUFBRTtJQUN0QkMsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3BCQSxJQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztJQUNsQ0QsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ2xCLEtBQUtBLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO01BQzNDLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLEVBQUUsRUFBQSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUE7S0FDeEM7SUFDRCxJQUFJLEtBQUssS0FBSyxLQUFLLEVBQUUsRUFBQSxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFBO0dBQ2hELENBQUE7RUFDRCxtQkFBQSxVQUFVLHdCQUFDLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDbENDLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztJQUNwQkEsSUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUM3QkQsSUFBSSxHQUFHLEdBQUcsVUFBVSxDQUFDOztJQUVyQixJQUFJLE1BQU0sQ0FBQywyQkFBMkIsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtNQUMvRCxHQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN6Qjs7SUFFRCxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFFO01BQ3JDLElBQUksTUFBTSxDQUFDLFFBQVEsSUFBSSxDQUFDLFdBQVcsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDM0csS0FBS0EsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtVQUNuREMsSUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7VUFDdEMsSUFBSSxTQUFTLENBQUMsR0FBRyxLQUFLLEdBQUcsRUFBRTs7WUFFekIsSUFBSSxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsU0FBUyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsZ0JBQWdCLEVBQUU7O2NBRTFELE9BQU8sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7Y0FDM0IsT0FBTzthQUNSO1dBQ0Y7U0FDRjtPQUNGO01BQ0QsTUFBTSxDQUFDLEdBQUcsR0FBR1ksR0FBQyxDQUFDLElBQUksQ0FBQztRQUNsQixLQUFBLEdBQUc7UUFDSCxNQUFNLEVBQUUsS0FBSztRQUNiLFVBQVUscUJBQUEsR0FBRztVQUNYLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzVDO1FBQ0QsUUFBUSxtQkFBQSxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUU7VUFDcEIsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLENBQUMsQ0FBQztVQUN2QyxJQUFJLENBQUMsTUFBTSxLQUFLLE9BQU8sSUFBSSxNQUFNLEtBQUssU0FBUyxLQUFLLEdBQUcsQ0FBQyxNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDL0csSUFBSSxNQUFNLENBQUMsUUFBUSxJQUFJLEdBQUcsQ0FBQyxZQUFZLEtBQUssRUFBRSxFQUFFO2NBQzlDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztjQUMvQixNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7Z0JBQ3BCLEtBQUEsR0FBRztnQkFDSCxJQUFJLEVBQUUsS0FBSyxDQUFDLEdBQUcsRUFBRTtnQkFDakIsT0FBTyxFQUFFLEdBQUcsQ0FBQyxZQUFZO2VBQzFCLENBQUMsQ0FBQzthQUNKO1lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1dBQzNCLE1BQU07WUFDTCxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3BDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztXQUNiO1NBQ0Y7UUFDRCxLQUFLLGdCQUFBLENBQUMsR0FBRyxFQUFFO1VBQ1QsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLENBQUMsQ0FBQztVQUNwQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDYjtPQUNGLENBQUMsQ0FBQztLQUNKLENBQUMsQ0FBQztHQUNKLENBQUE7O0VBRUQsbUJBQUEsbUJBQW1CLGlDQUFDLEVBQUUsRUFBRTtJQUN0QlosSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3BCQSxJQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztJQUMvQlksR0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBQyxHQUFFLElBQUUsS0FBSyxLQUFLLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFBLGdCQUFZLElBQUUsS0FBSyxLQUFLLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFBLEVBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztHQUNyRyxDQUFBO0VBQ0QsbUJBQUEsY0FBYyw0QkFBQyxRQUFRLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFO0lBQzlEWixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDcEIsU0FBUyxPQUFPLENBQUMsQ0FBQyxFQUFFO01BQ2xCRCxJQUFJLFlBQVksQ0FBQztNQUNqQkEsSUFBSSxPQUFPLENBQUM7TUFDWixJQUFJO1FBQ0YsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO1FBQ2hDLElBQUksT0FBTyxPQUFPLEtBQUssVUFBVSxFQUFFLEVBQUEsT0FBTyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQTthQUM3RCxJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsRUFBRTtVQUNwQyxJQUFJO1lBQ0YsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7V0FDL0IsQ0FBQyxPQUFPLEdBQUcsRUFBRTtZQUNaLE1BQU0sRUFBRSxDQUFDO1lBQ1QsT0FBTyxHQUFHLEVBQUU7V0FDYjtTQUNGO1FBQ0QsSUFBSSxPQUFPLENBQUMsS0FBSyxVQUFVLEVBQUU7VUFDM0IsWUFBWSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMzQixNQUFNO1VBQ0wsWUFBWSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsT0FBTyxJQUFJLEVBQUUsRUFBRTtZQUMzRCxJQUFJLEVBQUUsTUFBTSxDQUFDLEdBQUc7WUFDaEIsS0FBSyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDO1lBQzVELE1BQU0sRUFBRSxPQUFPLENBQUMsS0FBSztZQUNyQixPQUFPLEVBQUUsTUFBTTtZQUNmLE1BQU0sRUFBRTtjQUNOLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssS0FBSyxLQUFLO2NBQy9CLEVBQUUsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssS0FBSyxJQUFJO2FBQzlCO1dBQ0YsQ0FBQyxDQUFDLENBQUM7U0FDTDtPQUNGLENBQUMsT0FBTyxHQUFHLEVBQUU7UUFDWixNQUFNLEVBQUUsQ0FBQztRQUNULE9BQU8sR0FBRyxFQUFFO09BQ2I7TUFDRCxPQUFPLENBQUMsWUFBWSxFQUFFLEVBQUUsU0FBQSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0tBQ3BDO0lBQ0QsSUFBSSxXQUFXLEVBQUU7O01BRWYsSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ2QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNuQixNQUFNLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQztPQUNwQjtNQUNELE1BQU07U0FDSCxVQUFVLENBQUMsV0FBVyxDQUFDO1NBQ3ZCLElBQUksQ0FBQyxVQUFDLGVBQWUsRUFBRTtVQUN0QixPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDMUIsQ0FBQztTQUNELEtBQUssQ0FBQyxZQUFHO1VBQ1IsTUFBTSxFQUFFLENBQUM7U0FDVixDQUFDLENBQUM7S0FDTixNQUFNO01BQ0wsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ25CO0dBQ0YsQ0FBQTtFQUNELG1CQUFBLG1CQUFtQixpQ0FBQyxRQUFRLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFO0lBQ25FQyxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDcEIsT0FBTyxNQUFNLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLFVBQUMsSUFBSSxFQUFFO01BQ2xFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNmLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDWixDQUFBO0VBQ0QsbUJBQUEsaUJBQWlCLCtCQUFDLFFBQVEsRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUU7SUFDakVBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztJQUNwQixPQUFPLE1BQU0sQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsVUFBQyxJQUFJLEVBQUU7TUFDbEUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ2YsRUFBRSxNQUFNLENBQUMsQ0FBQztHQUNaLENBQUE7RUFDRCxtQkFBQSxrQkFBa0IsZ0NBQUMsUUFBUSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRTtJQUNsRUEsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLE9BQU8sTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxVQUFDLElBQUksRUFBRSxVQUFlLEVBQUU7NkNBQVAsR0FBRyxFQUFFOztNQUNqRixPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztLQUM3QyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0dBQ1osQ0FBQTtFQUNELG1CQUFBLGVBQWUsNkJBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRTtJQUNqRUEsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3BCQSxJQUFNLEdBQUcsR0FBRyxPQUFPLFNBQVMsS0FBSyxRQUFRLEdBQUcsU0FBUyxHQUFHLFlBQVksQ0FBQztJQUNyRSxTQUFTLE9BQU8sQ0FBQyxDQUFDLEVBQUU7TUFDbEJBLElBQU0sZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUU7UUFDM0MsR0FBQVksR0FBQztRQUNELEVBQUUsRUFBRUEsR0FBQztRQUNMLElBQUksRUFBRSxNQUFNLENBQUMsR0FBRztRQUNoQixLQUFLLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUM7UUFDNUQsTUFBTSxFQUFFLE9BQU8sQ0FBQyxLQUFLO1FBQ3JCLE9BQU8sRUFBRSxNQUFNO1FBQ2YsS0FBSyxFQUFFQSxHQUFDO1FBQ1IsTUFBTSxFQUFFO1VBQ04sR0FBRyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxLQUFLLEtBQUs7VUFDL0IsRUFBRSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxLQUFLLElBQUk7U0FDOUI7T0FDRixDQUFDLENBQUM7TUFDSCxPQUFPLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDbkU7SUFDRCxJQUFJLEdBQUcsRUFBRTs7TUFFUCxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUU7UUFDZCxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ25CLE1BQU0sQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO09BQ3BCO01BQ0QsTUFBTTtTQUNILFVBQVUsQ0FBQyxHQUFHLENBQUM7U0FDZixJQUFJLENBQUMsVUFBQyxlQUFlLEVBQUU7VUFDdEIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztTQUMzQyxDQUFDO1NBQ0QsS0FBSyxDQUFDLFlBQUc7VUFDUixNQUFNLEVBQUUsQ0FBQztTQUNWLENBQUMsQ0FBQztLQUNOLE1BQU07TUFDTCxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDcEI7R0FDRixDQUFBO0VBQ0QsbUJBQUEsb0JBQW9CLGtDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFO0lBQzlFWixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDcEIsTUFBTSxDQUFDLGVBQWUsQ0FBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxVQUFDLEVBQUUsRUFBRTtNQUM1RCxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDYixFQUFFLE1BQU0sQ0FBQyxDQUFDO0dBQ1osQ0FBQTtFQUNELG1CQUFBLGtCQUFrQixnQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRTtJQUMzRUEsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLE1BQU0sQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsVUFBQyxFQUFFLEVBQUU7TUFDNUQsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ2IsRUFBRSxNQUFNLENBQUMsQ0FBQztHQUNaLENBQUE7RUFDRCxtQkFBQSxtQkFBbUIsaUNBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUU7SUFDL0VBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztJQUNwQixNQUFNLENBQUMsZUFBZSxDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLFVBQUMsRUFBRSxFQUFFLFVBQWUsRUFBRTs2Q0FBUCxHQUFHLEVBQUU7O01BQzNFLE9BQU8sQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7S0FDekIsRUFBRSxNQUFNLENBQUMsQ0FBQztHQUNaLENBQUE7RUFDRCxtQkFBQSxXQUFXLHlCQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxLQUFVLEVBQUUsVUFBVSxFQUFFO2lDQUFuQixHQUFHLEVBQUU7O0lBQ2hEQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDcEJBLElBQU0sT0FBTyxHQUFHWSxHQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUJaLElBQU0sU0FBUyxHQUFHWSxHQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDOUJaLElBQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDO0lBQzVDRCxJQUFJLFNBQVMsQ0FBQztJQUNkQSxJQUFJLFFBQVEsQ0FBQztJQUNiLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxJQUFJLEVBQUUsS0FBSyxTQUFTLE1BQU0sSUFBSSxLQUFLLFNBQVMsSUFBSSxFQUFFLEtBQUssVUFBVSxDQUFDLEVBQUUsRUFBQSxTQUFTLEdBQUcsU0FBUyxDQUFDLEVBQUE7SUFDOUcsSUFBSSxDQUFDLElBQUksS0FBSyxTQUFTLElBQUksRUFBRSxLQUFLLE1BQU0sTUFBTSxJQUFJLEtBQUssVUFBVSxJQUFJLEVBQUUsS0FBSyxTQUFTLENBQUMsRUFBRSxFQUFBLFNBQVMsR0FBRyxVQUFVLENBQUMsRUFBQTtJQUMvRyxJQUFJLFdBQVcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUU7TUFDeENDLElBQU0sV0FBVyxHQUFHWSxHQUFDLENBQUMsVUFBVSxDQUFDLENBQUM7TUFDbEMsSUFBSSxXQUFXLENBQUMsTUFBTSxFQUFFO1FBQ3RCLFFBQVEsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO09BQ2xDO0tBQ0Y7SUFDRFosSUFBTSxJQUFJLEdBQUc7TUFDWCxHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUc7TUFDZixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUk7TUFDakIsR0FBRyxFQUFFLE9BQU87TUFDWixFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztNQUNkLFNBQUEsT0FBTztNQUNQLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO01BQ2xCLFdBQUEsU0FBUztNQUNULFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO01BQ3RCLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztNQUMvQixRQUFRLEVBQUUsSUFBSTtNQUNkLE1BQUEsSUFBSTtNQUNKLElBQUEsRUFBRTtNQUNGLFdBQUEsU0FBUztNQUNULEtBQUssRUFBRSxXQUFXLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQyxLQUFLLEdBQUcsS0FBSztNQUNwRCxRQUFRLEVBQUUsV0FBVyxDQUFDLFFBQVEsSUFBSSxRQUFRO0tBQzNDLENBQUM7O0lBRUYsSUFBSSxTQUFTLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFO01BQzdCLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0tBQzVCO0lBQ0QsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDekIsT0FBTyxJQUFJLENBQUM7R0FDYixDQUFBOztFQUVELG1CQUFBLFlBQVksMEJBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxPQUFZLEVBQUUsVUFBVSxFQUFFO3FDQUFuQixHQUFHLEVBQUU7O0lBQzdELElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBQSxPQUFPLEVBQUE7SUFDcEJBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztJQUNwQkEsSUFBTSxPQUFPLEdBQUdZLEdBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFBLE9BQU8sRUFBQTtJQUM1QixJQUFRLEtBQUs7SUFBTywrQ0FBQSxFQUFFLENBQWhCO0lBQ05aLElBQU0sc0JBQXNCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQzs7SUFFcEVBLElBQU0sU0FBUyxHQUFHLE1BQUssSUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUc7SUFDMUZBLElBQU0sU0FBUyxHQUFHLE9BQU0sSUFBRSxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUEsQ0FBRzs7SUFFbkRELElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNkLElBQUksUUFBUSxLQUFLLGNBQWMsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFO01BQ3BELElBQUksR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxNQUFBLElBQUksRUFBRSxJQUFBLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztLQUN0RSxNQUFNO01BQ0wsSUFBSSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztLQUMxRTs7SUFFRCxTQUFTLFlBQVksR0FBRztNQUN0QixJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsRUFBRSxFQUFBLE9BQU8sRUFBQTtNQUM1QyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDO01BQ3ZDLElBQUksT0FBTyxDQUFDLFVBQVUsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ3BFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQztRQUM3QyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxTQUFTLEVBQUU7VUFDbEQsT0FBTyxDQUFDLEVBQUUsRUFBQyxPQUFNLElBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQSxHQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztTQUMvRixDQUFDLENBQUM7T0FDSjtLQUNGO0lBQ0QsSUFBSSxRQUFRLEtBQUssU0FBUyxFQUFFO01BQzFCLFlBQVksRUFBRSxDQUFDO0tBQ2hCO0lBQ0QsSUFBSSxRQUFRLEtBQUssTUFBTSxFQUFFO01BQ3ZCLElBQUksc0JBQXNCLEtBQUssSUFBSSxLQUFLLFVBQVUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxTQUFTLElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3hILE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO09BQy9FO01BQ0QsWUFBWSxFQUFFLENBQUM7TUFDZixJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsRUFBRTtRQUNoQyxJQUFJLEVBQUUsQ0FBQyxVQUFVLEVBQUUsRUFBQSxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUE7UUFDdkMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDckMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDaEMsT0FBTztPQUNSO01BQ0QsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQztLQUNyQztJQUNELElBQUksc0JBQXNCLElBQUksUUFBUSxLQUFLLFdBQVcsSUFBSSxJQUFJLEtBQUssU0FBUyxJQUFJLEVBQUUsS0FBSyxVQUFVLEVBQUU7O01BRWpHLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0tBQ2xGO0lBQ0QsSUFBSSxzQkFBc0IsSUFBSSxRQUFRLEtBQUssV0FBVyxJQUFJLElBQUksS0FBSyxTQUFTLElBQUksRUFBRSxLQUFLLE1BQU0sRUFBRTs7TUFFN0YsT0FBTyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDN0M7O0lBRUQsSUFBSSxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBQSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQTtJQUN2QyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQzs7SUFFN0IsSUFBSSxRQUFRLEtBQUssY0FBYyxFQUFFO01BQy9CLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUU7UUFDOUQsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsU0FBUyxFQUFFO1VBQ3ZELE9BQU8sQ0FBQyxHQUFHLEVBQUMsT0FBTSxJQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUEsR0FBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7U0FDckcsQ0FBQyxDQUFDO09BQ0o7S0FDRjs7SUFFRCxJQUFJLFFBQVEsS0FBSyxjQUFjLEVBQUU7TUFDL0IsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7TUFDekIsSUFBSSxHQUFHLElBQUksQ0FBQztLQUNiO0dBQ0YsQ0FBQTtFQUNELG1CQUFBLFdBQVcsMkJBQUc7SUFDWkMsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFDckMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtNQUMzQixNQUFNLENBQUMsWUFBWSxFQUFDLGVBQWMsSUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQSxhQUFTLEVBQUUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNuRztHQUNGLENBQUE7RUFDRCxtQkFBQSxjQUFjLDhCQUFHO0lBQ2ZBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztJQUNwQixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQyxZQUFZLEVBQUMsZUFBYyxJQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFBLGFBQVMsRUFBRSxFQUFFO01BQy9GLE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFDLGVBQWMsSUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQSxhQUFTLEVBQUUsQ0FBQyxDQUFDO01BQzlGLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7S0FDdEM7R0FDRixDQUFBO0VBQ0QsbUJBQUEsWUFBWSw0QkFBRztJQUNiQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDcEIsTUFBTSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFDcEIsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO0dBQ3RCLENBQUE7RUFDRCxtQkFBQSxJQUFJLG9CQUFHO0lBQ0xBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztJQUNwQkEsSUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQzs7O0lBR3ZCLElBQUksTUFBTSxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksSUFBSSxHQUFHLENBQUMsS0FBSyxLQUFLLEtBQUssRUFBRTtNQUNwRSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDbkI7OztJQUdELElBQUksTUFBTSxDQUFDLGFBQWEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUU7TUFDbEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsOEJBQThCLENBQUMsQ0FBQztLQUNyRDs7SUFFREQsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDaENBLElBQUksV0FBVyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVFQSxJQUFJLGVBQWUsQ0FBQztJQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7TUFDNUIsSUFBSSxDQUFDLE9BQU8sRUFBRTtRQUNaLE9BQU8sR0FBRyxXQUFXLENBQUM7T0FDdkI7S0FDRixNQUFNO01BQ0wsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3hGLFdBQVcsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEUsSUFBSSxXQUFXLEtBQUssRUFBRSxFQUFFLEVBQUEsV0FBVyxHQUFHLEdBQUcsQ0FBQyxFQUFBO09BQzNDO01BQ0QsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDOUQsT0FBTyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO09BQ2xFLE1BQU07UUFDTCxPQUFPLEdBQUcsV0FBVyxDQUFDO09BQ3ZCO01BQ0QsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO01BQ3hCLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3hDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO09BQy9FLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsS0FBSyxPQUFPLEVBQUU7UUFDeEMsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO09BQzVCLE1BQU07UUFDTCxNQUFNLENBQUMsT0FBTyxHQUFHLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO09BQzNGO01BQ0QsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDN0IsZUFBZSxHQUFHLElBQUksQ0FBQztPQUN4QixNQUFNO1FBQ0wsTUFBTSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7T0FDckI7TUFDRCxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7S0FDdEI7SUFDREEsSUFBSSxZQUFZLENBQUM7SUFDakIsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7O01BRTdCLFlBQVksR0FBRyxNQUFNLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQzNELElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDakIsWUFBWSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUU7VUFDN0UsS0FBSyxFQUFFO1lBQ0wsR0FBRyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLElBQUksRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7V0FDdEM7U0FDRixDQUFDLENBQUM7T0FDSjtLQUNGLE1BQU07O01BRUwsWUFBWSxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztNQUNqRCxJQUFJLENBQUMsWUFBWSxFQUFFO1FBQ2pCLFlBQVksR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUU7VUFDbkUsS0FBSyxFQUFFO1lBQ0wsR0FBRyxFQUFFLE9BQU87WUFDWixJQUFJLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7V0FDNUI7U0FDRixDQUFDLENBQUM7T0FDSjtLQUNGOztJQUVELElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUU7TUFDNUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRTtRQUNoREMsSUFBTSxPQUFPLEdBQUdZLEdBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMxQixNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQyxJQUFJLE1BQU0sQ0FBQyxjQUFjLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1VBQ25FLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbEY7T0FDRixDQUFDLENBQUM7S0FDSjs7SUFFRCxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxPQUFPLEVBQUU7O01BRXRFLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFO1FBQ3ZCLGFBQWEsRUFBRSxJQUFJO1FBQ25CLFNBQVMsRUFBRSxLQUFLO09BQ2pCLENBQUMsQ0FBQztLQUNKLE1BQU07O01BRUwsTUFBTSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7TUFDbkMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxLQUFLLEVBQUUsTUFBTSxFQUFFO1FBQzlEWixJQUFNLE9BQU8sR0FBR1ksR0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFCYixJQUFJLGNBQWMsQ0FBQztRQUNuQixPQUFPLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2pDLElBQUksTUFBTSxDQUFDLGNBQWMsRUFBRTtVQUN6QixjQUFjLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7VUFDdkUsSUFBSSxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM3QixNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUN4QyxPQUFPLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1dBQ3RDLE1BQU07WUFDTCxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztXQUM1QztTQUNGO1FBQ0QsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO09BQzVHLENBQUMsQ0FBQztNQUNILElBQUksZUFBZSxFQUFFO1FBQ25CLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFO1VBQ3ZCLFNBQVMsRUFBRSxLQUFLO1VBQ2hCLE9BQU8sRUFBRSxLQUFLO1VBQ2QsT0FBTyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsc0JBQXNCO1VBQzdDLEVBQUUsRUFBRTtZQUNGLFdBQVcsc0JBQUEsR0FBRztjQUNaLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7ZUFDaEM7YUFDRjtXQUNGO1NBQ0YsQ0FBQyxDQUFDO09BQ0osTUFBTTtRQUNMLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztPQUN0QjtLQUNGO0lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDbkMsQ0FBQTtFQUNELG1CQUFBLE9BQU8sdUJBQUc7SUFDUkEsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDOztJQUVsQixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FBQzs7O0lBR3JDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsVUFBVSxFQUFFO01BQ3ZDLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUM7TUFDMUIsT0FBTyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDM0IsQ0FBQyxDQUFDOztJQUVILE1BQU0sR0FBRyxJQUFJLENBQUM7R0FDZixDQUFBOzs7RUF0L0JvQixlQXUvQnRCLEdBQUE7O0FBRUQsSUFBSSxNQUFNLEdBQUc7RUFDWCxJQUFJLEVBQUUsUUFBUTtFQUNkLE1BQU0sRUFBRTtJQUNOLE1BQU0sRUFBRSxRQUFRO0dBQ2pCO0VBQ0QsUUFBUSxFQUFFO0lBQ1IsS0FBSyxFQUFFO01BQ0wsR0FBRyxFQUFFLEVBQUU7TUFDUCxTQUFTLEVBQUUsRUFBRTtNQUNiLFVBQVUsRUFBRSxFQUFFO0tBQ2Y7R0FDRjtFQUNELE1BQU0saUJBQUEsR0FBRztJQUNQQyxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUM7SUFDdEIsSUFBSSxRQUFRLENBQUMsR0FBRyxFQUFFOztNQUVoQixRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDeEQsTUFBTTs7TUFFTCxRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQzFDO0dBQ0Y7Q0FDRixDQUFDOztBQUVGLElBQUksU0FBUyxHQUFHO0VBQ2QsSUFBSSxFQUFFLFNBQVM7RUFDZixFQUFFLEVBQUU7SUFDRixJQUFJLGVBQUEsR0FBRztNQUNMLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDcEI7R0FDRjtDQUNGLENBQUM7O0FBRUYsSUFBTSxJQUFJO0VBQXlCLGFBQ3RCLENBQUMsV0FBVyxFQUFFLEVBQUUsRUFBRSxVQUFlLEVBQUU7MkNBQVAsR0FBRyxFQUFFOztJQUMxQ1csZUFBSyxLQUFBLENBQUMsTUFBQSxVQUFVLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDOztJQUVqQ1gsSUFBTSxHQUFHLEdBQUcsV0FBVyxDQUFDO0lBQ3hCQSxJQUFNLEdBQUcsR0FBR1ksR0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xCWixJQUFNLElBQUksR0FBRyxJQUFJLENBQUM7O0lBRWxCQSxJQUFNLFFBQVEsR0FBRztNQUNmLElBQUksRUFBRSxTQUFTO01BQ2YsSUFBSSxFQUFFLEtBQUs7TUFDWCxNQUFNLEVBQUUsRUFBRTtNQUNWLFNBQVMsRUFBRSxFQUFFO01BQ2IsU0FBUyxFQUFFLFNBQVM7S0FDckIsQ0FBQzs7O0lBR0YsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQzs7O0lBR2xFLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtNQUNqQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO0tBQ2xDLE1BQU07TUFDTCxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQzVEOzs7SUFHREQsSUFBSSxRQUFRLENBQUM7SUFDYixJQUFJLE9BQU8sRUFBRSxLQUFLLFFBQVEsRUFBRSxFQUFBLFFBQVEsR0FBRyxFQUFFLENBQUMsRUFBQTtTQUNyQzs7TUFFSCxRQUFRLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFHLEdBQUUsSUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBLElBQUssRUFBRSxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUcsR0FBRSxJQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFBLElBQUssRUFBRSxDQUFDLENBQUM7S0FDeEo7OztJQUdEQSxJQUFJLFNBQVMsQ0FBQztJQUNkLElBQUksR0FBRyxDQUFDLEtBQUssS0FBSyxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLHdCQUF3QixFQUFFO01BQy9GLFNBQVMsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztNQUMxQyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQzFCLFNBQVMsR0FBR2EsR0FBQyxDQUFDLDRCQUE0QixDQUFDLENBQUM7UUFDNUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztPQUN4QjtLQUNGOzs7SUFHRCxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUU7TUFDeEIsS0FBQSxHQUFHO01BQ0gsS0FBQSxHQUFHO01BQ0gsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7TUFDVixJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJO01BQ3RCLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQztNQUNuRCxXQUFBLFNBQVM7TUFDVCxRQUFRLEVBQUUsU0FBUyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTO01BQzlDLFVBQUEsUUFBUTtNQUNSLE9BQU8sRUFBRSxFQUFFO01BQ1gsYUFBYSxFQUFFLEVBQUU7S0FDbEIsQ0FBQyxDQUFDOztJQUVILEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDOzs7SUFHckIsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7OztJQUcxQixHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7TUFDYixHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7S0FDdkIsTUFBTSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7TUFDcEIsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO0tBQzdCOztJQUVELElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7OztJQUdyQyxJQUFJLEdBQUcsQ0FBQyxXQUFXLEVBQUU7TUFDbkIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0tBQ2IsTUFBTTtNQUNMLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUMzQjs7SUFFRCxPQUFPLElBQUksQ0FBQztHQUNiOzs7O29DQUFBO0VBQ0QsZUFBQSxPQUFPLHVCQUFHO0lBQ1JiLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztJQUNoQkMsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQzs7SUFFckIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDN0MsSUFBSSxDQUFDLElBQUksQ0FBQyx3Q0FBd0MsRUFBRSxJQUFJLENBQUMsQ0FBQzs7SUFFMUQsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO01BQ2IsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO01BQ3RCLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7S0FDdkIsTUFBTSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7TUFDcEIsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO01BQzVCLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDN0I7SUFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDMUIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQzs7SUFFMUIsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7OztJQUc3QyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDOztJQUV0QixJQUFJLENBQUMsSUFBSSxDQUFDLDRCQUE0QixFQUFFLElBQUksQ0FBQyxDQUFDOzs7SUFHOUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxRQUFRLEVBQUU7TUFDbkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQztNQUN0QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN2QixDQUFDLENBQUM7O0lBRUgsSUFBSSxHQUFHLElBQUksQ0FBQztHQUNiLENBQUE7RUFDRCxlQUFBLElBQUksb0JBQUc7SUFDTEEsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ2xCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7R0FDcEIsQ0FBQTs7O0VBckhnQixlQXNIbEIsR0FBQTs7O0FBR0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7QUFFakIsU0FBUyxVQUFVLENBQUMsR0FBRyxFQUFFO0VBQ3ZCLFNBQVMsWUFBWSxDQUFDLENBQUMsRUFBRTtJQUN2QkEsSUFBTSxPQUFPLEdBQUdZLEdBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUJaLElBQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDekNBLElBQU0sTUFBTSxHQUFHLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3RDQSxJQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvQ0EsSUFBTSxTQUFTLEdBQUcsTUFBTSxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEtBQUssV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7SUFHbEksSUFBSSxNQUFNLEVBQUU7TUFDVixJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7UUFDL0YsSUFBSSxHQUFHLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxTQUFTLEVBQUU7VUFDbkQsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO1VBQ25CLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQzdCO1FBQ0QsT0FBTztPQUNSO0tBQ0Y7OztJQUdELE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLFVBQVUsRUFBRTtNQUM1Q0EsSUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLENBQUM7TUFDcEQsSUFBSSxDQUFDLFlBQVksRUFBRSxFQUFBLE9BQU8sRUFBQTtNQUMxQixNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLGFBQWEsRUFBRTtRQUNoREEsSUFBTSxzQkFBc0IsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwRSxJQUFJLHNCQUFzQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7VUFDckMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsc0JBQXNCLEVBQUUsc0JBQXNCLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztTQUNqRztPQUNGLENBQUMsQ0FBQztLQUNKLENBQUMsQ0FBQzs7O0lBR0hELElBQUksZUFBZSxHQUFHLEVBQUUsQ0FBQztJQUN6QixJQUFJLE1BQU0sRUFBRTtNQUNWLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztNQUNuQixlQUFlLEdBQUcsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQ3pDO0lBQ0RDLElBQU0sUUFBUSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3BFQSxJQUFNLFFBQVEsR0FBRyxlQUFlLENBQUMsUUFBUSxDQUFDO0lBQzFDLElBQUksUUFBUSxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksUUFBUSxFQUFFO01BQ3hERCxJQUFJLElBQUksQ0FBQztNQUNULElBQUksZUFBZSxDQUFDLElBQUksRUFBRTtRQUN4QixJQUFJLEdBQUdhLEdBQUMsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO09BQzFDLE1BQU07UUFDTCxJQUFJLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUN6RSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtVQUNqQyxJQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEtBQUssUUFBUSxFQUFFLEVBQUEsSUFBSSxHQUFHQSxHQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBQTtlQUNwRixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxZQUFZLElBQUksRUFBRSxFQUFBLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFBO1NBQzlFO09BQ0Y7TUFDRCxJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ1QsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxFQUFBLElBQUksR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFBO09BQzNDO01BQ0QsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFBLE9BQU8sRUFBQTtNQUNsQixJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBQSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsZUFBZSxDQUFDLENBQUMsRUFBQTtXQUNwRSxFQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxlQUFlLENBQUMsQ0FBQyxFQUFBO0tBQ2pEO0dBQ0Y7O0VBRUQsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7OztFQUc5QixTQUFTLGdCQUFnQixDQUFDLENBQUMsRUFBRTtJQUMzQixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7R0FDcEI7RUFDRCxJQUFJLFNBQVMsQ0FBQyxLQUFLLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFO0lBQ3hDWixJQUFNLGNBQWMsR0FBRyxTQUFTLENBQUMsZUFBZSxHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQzlGWSxHQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLFlBQVksR0FBRyxXQUFXLEdBQUcsdUdBQXVHLEVBQUUsZ0JBQWdCLEVBQUUsY0FBYyxDQUFDLENBQUM7R0FDak47Q0FDRjtBQUNELElBQUksTUFBTSxHQUFHO0VBQ1gsSUFBSSxFQUFFLFFBQVE7RUFDZCxNQUFNLEVBQUU7SUFDTixNQUFNLEVBQUU7O01BRU4sYUFBYSxFQUFFLFdBQVc7S0FDM0I7R0FDRjtFQUNELEVBQUUsRUFBRTtJQUNGLElBQUksZUFBQSxHQUFHO01BQ0xaLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQztNQUNqQixVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDakI7R0FDRjtDQUNGLENBQUM7O0FBRUZBLElBQU0sU0FBUyxHQUFHO0VBQ2hCLElBQUksZUFBQSxHQUFHO0lBQ0xZLEdBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUN4QyxJQUFJLFFBQVEsQ0FBQyxPQUFPLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRTtNQUN4QyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO0tBQ3pCO0dBQ0Y7RUFDRCxJQUFJLGVBQUEsR0FBRztJQUNMQSxHQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDckMsSUFBSSxRQUFRLENBQUMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUU7TUFDeEMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUN6QjtHQUNGO0VBQ0QsT0FBTyxrQkFBQSxHQUFHO0lBQ1JaLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQztJQUNqQkQsSUFBSSxXQUFXLENBQUM7SUFDaEIsSUFBSWEsR0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs7TUFFbkMsV0FBVyxHQUFHQSxHQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQUMsd0RBQXdELENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7S0FDekgsTUFBTSxJQUFJQSxHQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFOztNQUU5QyxXQUFXLEdBQUdBLEdBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLElBQUksQ0FBQyx3REFBd0QsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztLQUM3SCxNQUFNLElBQUlBLEdBQUMsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7O01BRXBELFdBQVcsR0FBR0EsR0FBQyxDQUFDLDJCQUEyQixDQUFDLENBQUMsSUFBSSxDQUFDLHdEQUF3RCxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0tBQ25JLE1BQU0sSUFBSUEsR0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7TUFDakMsV0FBVyxHQUFHQSxHQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLHdEQUF3RCxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0tBQ2hILE1BQU07TUFDTCxXQUFXLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLHdEQUF3RCxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0tBQy9IOztJQUVELElBQUksV0FBVyxJQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFOztNQUV6QyxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDL0IsV0FBVyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLDBCQUEwQixDQUFDLENBQUM7T0FDaEY7TUFDRCxJQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLEVBQUEsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBQTtLQUMzRDtHQUNGO0VBQ0QsZUFBZSwwQkFBQSxDQUFDLEtBQUssRUFBRTtJQUNyQixJQUFJLFFBQVEsQ0FBQyxPQUFPLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRTtNQUN4QyxJQUFJLEtBQUssS0FBSyxPQUFPLEVBQUU7UUFDckIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO09BQ3RDLE1BQU07UUFDTCxNQUFNLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO09BQ2pDO0tBQ0Y7R0FDRjtFQUNELGtCQUFrQiw2QkFBQSxDQUFDLEtBQUssRUFBRTtJQUN4QixJQUFJLFFBQVEsQ0FBQyxPQUFPLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRTtNQUN4QyxJQUFJLFFBQVEsQ0FBQyxjQUFjLEVBQUUsRUFBRTs7UUFFN0JBLEdBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLENBQUM7T0FDaEQsTUFBTTs7UUFFTCxNQUFNLENBQUMsU0FBUyxDQUFDLDBCQUEwQixDQUFDLEtBQUssQ0FBQyxDQUFDO09BQ3BEO0tBQ0YsTUFBTTtNQUNMQSxHQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQ2hEO0dBQ0Y7RUFDRCxTQUFTLG9CQUFBLEdBQUc7SUFDVixJQUFJLFFBQVEsQ0FBQyxPQUFPLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRTtNQUN4QyxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO0tBQ25DO0lBQ0QsT0FBTyxTQUFTLENBQUM7R0FDbEI7RUFDRCxJQUFJLGVBQUEsR0FBRztJQUNMWixJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUM7SUFDakJBLElBQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDOztJQUVwQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLEtBQUssTUFBTSxFQUFFO01BQzdCLElBQUksUUFBUSxDQUFDLGNBQWMsRUFBRSxFQUFFO1FBQzdCWSxHQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUM7T0FDdEM7TUFDRCxJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUU7UUFDcEJBLEdBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLFlBQUc7VUFDMUIsSUFBSSxRQUFRLENBQUMsY0FBYyxFQUFFLEVBQUU7WUFDN0JBLEdBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztXQUN0QyxNQUFNO1lBQ0xBLEdBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztXQUN6QztTQUNGLEVBQUUsS0FBSyxDQUFDLENBQUM7T0FDWDtLQUNGLE1BQU0sSUFBSSxNQUFNLENBQUMsT0FBTyxLQUFLLElBQUksRUFBRTtNQUNsQ0EsR0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0tBQ3RDLE1BQU0sSUFBSSxNQUFNLENBQUMsT0FBTyxLQUFLLEtBQUssRUFBRTtNQUNuQ0EsR0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0tBQ3pDOztJQUVELElBQUksUUFBUSxDQUFDLE9BQU8sSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFO01BQ3hDLElBQUksTUFBTSxDQUFDLGdCQUFnQixFQUFFO1FBQzNCQSxHQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO09BQ3hEO01BQ0QsSUFBSSxNQUFNLENBQUMsa0JBQWtCLEVBQUU7UUFDN0IsTUFBTSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7T0FDeEMsTUFBTTtRQUNMLE1BQU0sQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO09BQ3pDOztNQUVELElBQUksTUFBTSxDQUFDLFlBQVksS0FBSyxPQUFPLEVBQUU7UUFDbkMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO09BQ3RDLE1BQU07UUFDTCxNQUFNLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO09BQ2pDO0tBQ0Y7O0lBRUQsSUFBSSxNQUFNLENBQUMsa0JBQWtCLEVBQUU7TUFDN0IsU0FBUyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxLQUFLLEtBQUssS0FBSyxHQUFHLE1BQU0sQ0FBQyxrQkFBa0IsR0FBRyxNQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQztLQUNoSDtHQUNGO0NBQ0YsQ0FBQzs7QUFFRixJQUFJLFdBQVcsR0FBRztFQUNoQixJQUFJLEVBQUUsV0FBVztFQUNqQixNQUFNLEVBQUU7SUFDTixTQUFTLEVBQUU7TUFDVCxPQUFPLEVBQUUsTUFBTTtNQUNmLGdCQUFnQixFQUFFLElBQUk7TUFDdEIsa0JBQWtCLEVBQUUsSUFBSTtNQUN4QixZQUFZLEVBQUUsT0FBTztNQUNyQixrQkFBa0IsRUFBRSxJQUFJO01BQ3hCLGtCQUFrQixFQUFFLFNBQVM7TUFDN0IsdUJBQXVCLEVBQUUsU0FBUztLQUNuQztHQUNGO0VBQ0QsTUFBTSxpQkFBQSxHQUFHO0lBQ1BaLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQztJQUNqQixLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtNQUNoQixTQUFTLEVBQUU7UUFDVCxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7UUFDcEIsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJO1FBQ3BCLGVBQWUsRUFBRSxTQUFTLENBQUMsZUFBZTtRQUMxQyxrQkFBa0IsRUFBRSxTQUFTLENBQUMsa0JBQWtCO1FBQ2hELFNBQVMsRUFBRSxTQUFTLENBQUMsU0FBUztRQUM5QixJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO09BQy9CO0tBQ0YsQ0FBQyxDQUFDO0dBQ0o7RUFDRCxFQUFFLEVBQUU7SUFDRixJQUFJLGVBQUEsR0FBRztNQUNMQSxJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUM7TUFDakIsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDMUI7R0FDRjtFQUNELE1BQU0sRUFBRTtJQUNOLFlBQVksRUFBRSxTQUFTLGdCQUFnQixHQUFHO01BQ3hDQSxJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUM7TUFDakIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLEVBQUEsT0FBTyxFQUFBO01BQ25ELFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQzdCO0dBQ0Y7Q0FDRixDQUFDOztBQUVGLFNBQVMsY0FBYyxDQUFDLEdBQUcsRUFBRTtFQUMzQkEsSUFBTSxXQUFXLEdBQUdZLEdBQUMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0VBQ2pEWixJQUFNLFNBQVMsR0FBR1ksR0FBQyxDQUFDLHVCQUF1QixDQUFDLENBQUM7RUFDN0NaLElBQU0sU0FBUyxHQUFHWSxHQUFDLENBQUMsMkJBQTJCLENBQUMsQ0FBQztFQUNqRGIsSUFBSSxRQUFRLEdBQUdhLEdBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztFQUMzQixJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLEVBQUEsUUFBUSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBQTs7RUFFL0NiLElBQUksT0FBTyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7O0VBRXpDLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7SUFDdEIsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFOztNQUUzQixPQUFPLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0tBQ2pELE1BQU07O0tBRU47R0FDRjtFQUNELElBQUksV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFBLE9BQU8sV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFBO0VBQ2xGLElBQUksU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFBLE9BQU8sU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFBO0VBQzVFLElBQUksU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFBLE9BQU8sU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFBO0VBQzVFLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7SUFDdEIsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUEsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUE7SUFDeEUsSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtNQUN0QixPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO0tBQ3ZCO0dBQ0Y7RUFDRCxPQUFPLFNBQVMsQ0FBQztDQUNsQjs7QUFFRCxJQUFJLE1BQU0sR0FBRztFQUNYLElBQUksRUFBRSxNQUFNO0VBQ1osTUFBTSxFQUFFO0lBQ04sSUFBSSxFQUFFO01BQ0osVUFBVSxFQUFFLEtBQUs7TUFDakIsUUFBUSxFQUFFLElBQUk7TUFDZCxjQUFjLEVBQUUsRUFBRTtNQUNsQiwyQkFBMkIsRUFBRSxLQUFLO01BQ2xDLGdCQUFnQixFQUFFLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRTtNQUNoQyxtQkFBbUIsRUFBRSxJQUFJO01BQ3pCLGFBQWEsRUFBRSxLQUFLO01BQ3BCLGdDQUFnQyxFQUFFLEtBQUs7TUFDdkMsa0JBQWtCLEVBQUUsS0FBSztNQUN6QixXQUFXLEVBQUUsS0FBSztNQUNsQixjQUFjLEVBQUUsSUFBSTtNQUNwQix5QkFBeUIsRUFBRSxLQUFLO01BQ2hDLHFCQUFxQixFQUFFLENBQUM7TUFDeEIsc0JBQXNCLEVBQUUsSUFBSTs7TUFFNUIsWUFBWSxFQUFFLElBQUk7TUFDbEIseUJBQXlCLEVBQUUsSUFBSTtNQUMvQiwwQkFBMEIsRUFBRSxJQUFJO01BQ2hDLHNCQUFzQixFQUFFLEVBQUU7TUFDMUIscUJBQXFCLEVBQUUsQ0FBQzs7TUFFeEIsU0FBUyxFQUFFLEtBQUs7TUFDaEIsYUFBYSxFQUFFLFNBQVM7TUFDeEIsZ0JBQWdCLEVBQUUsSUFBSTtNQUN0QixzQkFBc0IsRUFBRSxLQUFLO01BQzdCLGtCQUFrQixFQUFFLElBQUk7TUFDeEIsZUFBZSxFQUFFLElBQUk7O01BRXJCLE9BQU8sRUFBRSxJQUFJO01BQ2IsYUFBYSxFQUFFLElBQUk7O01BRW5CLGdCQUFnQixFQUFFLElBQUk7TUFDdEIsd0JBQXdCLEVBQUUsSUFBSTs7TUFFOUIsd0JBQXdCLEVBQUUsSUFBSTs7TUFFOUIscUJBQXFCLEVBQUUsQ0FBQztLQUN6QjtHQUNGO0VBQ0QsTUFBTSxFQUFFO0lBQ04sTUFBQSxJQUFJO0dBQ0w7RUFDRCxNQUFNLGlCQUFBLEdBQUc7SUFDUEMsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDO0lBQ2pCLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFO01BQ2hCLEtBQUssRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRTtRQUN0QixNQUFNLGlCQUFBLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRTtVQUNqQixPQUFPLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDbEM7UUFDRCxHQUFHLGNBQUEsQ0FBQyxNQUFNLEVBQUU7VUFDVkEsSUFBTSxPQUFPLEdBQUdZLEdBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztVQUMxQixJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFBLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFBO1VBQ2xFLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO09BQ0YsQ0FBQztLQUNILENBQUMsQ0FBQztJQUNILE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7TUFDMUMsVUFBVSxFQUFFLElBQUk7TUFDaEIsWUFBWSxFQUFFLElBQUk7TUFDbEIsR0FBRyxjQUFBLEdBQUc7UUFDSixPQUFPLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztPQUM1QjtLQUNGLENBQUMsQ0FBQztHQUNKO0VBQ0QsRUFBRSxFQUFFO0lBQ0YsSUFBSSxlQUFBLEdBQUc7TUFDTFosSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDO01BQ2pCWSxHQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRTtRQUNuQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBQSxPQUFPLEVBQUE7UUFDMUJaLElBQU0sVUFBVSxHQUFHWSxHQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDdkMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO09BQ3RDLENBQUMsQ0FBQztLQUNKO0lBQ0QsU0FBUyxvQkFBQSxDQUFDLEtBQUssRUFBRTtNQUNmWixJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUM7TUFDakIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRTtRQUNoRCxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBQSxPQUFPLEVBQUE7UUFDMUJBLElBQU0sVUFBVSxHQUFHWSxHQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDdkMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO09BQ3RDLENBQUMsQ0FBQztLQUNKO0lBQ0Qsa0JBQWtCLDZCQUFBLENBQUMsS0FBSyxFQUFFO01BQ3hCLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEVBQUEsT0FBTyxFQUFBO01BQ2pDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLEtBQUssRUFBRSxNQUFNLEVBQUU7UUFDaERaLElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFBLE9BQU8sRUFBQTtRQUNsQixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7T0FDaEIsQ0FBQyxDQUFDO0tBQ0o7R0FDRjtDQUNGLENBQUM7O0FBRUZBLElBQU0sTUFBTSxHQUFHO0VBQ2IsSUFBSSxlQUFBLENBQUMsRUFBRSxFQUFFO0lBQ1BBLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQztJQUNqQixJQUFJLEdBQUcsQ0FBQyxLQUFLLEtBQUssS0FBSyxFQUFFLEVBQUEsT0FBTyxFQUFBO0lBQ2hDRCxJQUFJLEdBQUcsR0FBR2EsR0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2hCLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRTtNQUMxQixHQUFHLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxLQUFLLEVBQUUsUUFBUSxFQUFFO1FBQ3pELEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO09BQzNCLENBQUMsQ0FBQztNQUNILE9BQU87S0FDUjtJQUNEO01BQ0UsR0FBRyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7TUFDdkIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQztNQUNsQyxHQUFHLENBQUMsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUMsTUFBTSxHQUFHLENBQUM7TUFDL0MsR0FBRyxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDO01BQy9DO01BQ0EsT0FBTztLQUNSO0lBQ0RaLElBQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNDQSxJQUFNLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0RUEsSUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdkVBLElBQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckNBLElBQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDN0NBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO0lBQ2pDQSxJQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztJQUNuQ0EsSUFBTSxTQUFTLEdBQUcsTUFBTSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JEQSxJQUFNLFVBQVUsR0FBRyxPQUFPLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeERBLElBQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUNBLElBQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNsQ0EsSUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztJQUN2Q0EsSUFBTSxnQkFBZ0IsR0FBRyxXQUFXLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDeEhBLElBQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNuREEsSUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQzs7SUFFeENELElBQUksTUFBTSxDQUFDO0lBQ1hBLElBQUksYUFBYSxDQUFDO0lBQ2xCQSxJQUFJLGNBQWMsQ0FBQztJQUNuQkEsSUFBSSx5QkFBeUIsR0FBRyxDQUFDLENBQUM7SUFDbENBLElBQUksd0JBQXdCLEdBQUcsQ0FBQyxDQUFDOztJQUVqQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUU7TUFDM0MsTUFBTSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO01BQ2xDLGFBQWEsR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQztNQUMvQyxjQUFjLEdBQUcsTUFBTSxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUM7TUFDakQsSUFBSSxDQUFDLGNBQWMsRUFBRTtRQUNuQix5QkFBeUIsR0FBRyxXQUFXLENBQUM7UUFDeEMsd0JBQXdCLEdBQUcsV0FBVyxHQUFHLENBQUMsQ0FBQztPQUM1QztLQUNGOztJQUVEQSxJQUFJLFFBQVEsQ0FBQztJQUNiQSxJQUFJLElBQUksQ0FBQztJQUNULElBQUksT0FBTyxFQUFFO01BQ1gsUUFBUSxHQUFHLGdCQUFnQixHQUFHLFVBQVUsQ0FBQztLQUMxQztJQUNELElBQUksTUFBTSxFQUFFO01BQ1YsUUFBUSxHQUFHLENBQUMsQ0FBQztLQUNkO0lBQ0QsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLE9BQU8sRUFBRTtNQUN2QixRQUFRLEdBQUcsQ0FBQyxDQUFDLGdCQUFnQixHQUFHLFVBQVUsR0FBRyxVQUFVLElBQUksU0FBUyxJQUFJLENBQUMsQ0FBQztLQUMzRTtJQUNEQSxJQUFJLFlBQVksR0FBRyxDQUFDLGdCQUFnQixHQUFHLFVBQVUsSUFBSSxDQUFDLENBQUM7SUFDdkQsSUFBSSxnQkFBZ0IsR0FBRyxTQUFTLEdBQUcsVUFBVSxHQUFHLFVBQVUsRUFBRTtNQUMxRCxJQUFJLFlBQVksR0FBRyxTQUFTLEVBQUU7UUFDNUIsWUFBWSxHQUFHLFNBQVMsQ0FBQztPQUMxQjtNQUNELElBQUksWUFBWSxHQUFHLFVBQVUsR0FBRyxnQkFBZ0IsR0FBRyxVQUFVLEVBQUU7UUFDN0QsWUFBWSxHQUFHLGdCQUFnQixHQUFHLFVBQVUsR0FBRyxVQUFVLENBQUM7T0FDM0Q7TUFDRCxJQUFJLEdBQUcsWUFBWSxHQUFHLFFBQVEsQ0FBQztLQUNoQyxNQUFNO01BQ0wsSUFBSSxHQUFHLENBQUMsQ0FBQztLQUNWOzs7SUFHREMsSUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7O0lBRWxDLElBQUksYUFBYSxFQUFFO01BQ2pCLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLENBQUMsRUFBRTtRQUM5REQsSUFBSSxlQUFlLEdBQUcsQ0FBQyxFQUFFLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxRQUFRLElBQUksd0JBQXdCLENBQUM7UUFDakZBLElBQUksZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDLGdCQUFnQixHQUFHLFFBQVEsR0FBRyxJQUFJLEdBQUcsVUFBVSxJQUFJLFFBQVEsSUFBSSx5QkFBeUIsQ0FBQzs7UUFFbEgsSUFBSSxVQUFVLEVBQUU7VUFDZCxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLHdCQUF3QixFQUFFO1lBQ3BEQyxJQUFNLG9CQUFvQixHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFDdkgsSUFBSSxvQkFBb0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2NBQ25DLGVBQWUsSUFBSSxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUM7YUFDdkQ7V0FDRjtTQUNGO1FBQ0QsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixHQUFHLGVBQWUsQ0FBQztRQUM5QyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLEdBQUcsZ0JBQWdCLENBQUM7T0FDakQ7TUFDRCxJQUFJLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksT0FBTyxDQUFDLEVBQUU7UUFDcEQsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFO1VBQ1gsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixHQUFHLENBQUMsRUFBRSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLFFBQVEsQ0FBQztVQUN4RixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLEdBQUcsU0FBUyxHQUFHLFFBQVEsQ0FBQztTQUNwRCxNQUFNO1VBQ0wsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixHQUFHLENBQUMsU0FBUyxHQUFHLHdCQUF3QixDQUFDO1VBQ25FLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsR0FBRyxDQUFDLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsSUFBSSxDQUFDLElBQUkseUJBQXlCLENBQUM7VUFDekcsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyx3QkFBd0IsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDM0YsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO1dBQ3hFO1NBQ0Y7T0FDRjtNQUNELElBQUksQ0FBQyxPQUFPLEtBQUssS0FBSyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxPQUFPLENBQUMsRUFBRTtRQUN0RCxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUU7VUFDWCxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLEdBQUcsQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDO1VBQ3JELEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsR0FBRyxDQUFDLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsSUFBSSxDQUFDLElBQUksUUFBUSxDQUFDO1NBQzNGLE1BQU07VUFDTCxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLEdBQUcsQ0FBQyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksd0JBQXdCLENBQUM7VUFDMUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixHQUFHLFVBQVUsR0FBRyx5QkFBeUIsQ0FBQztTQUN2RTtPQUNGO01BQ0QsSUFBSSxTQUFTLENBQUMsTUFBTSxLQUFLLFNBQVMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksT0FBTyxDQUFDLEVBQUU7UUFDbEUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUcsd0JBQXdCLENBQUMsQ0FBQztRQUM5SCxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsR0FBRyx5QkFBeUIsSUFBSSx3QkFBd0IsQ0FBQztPQUM5SDtLQUNGOzs7SUFHRCxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRTtNQUNwQ0QsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDO01BQ3JCLElBQUksR0FBRyxDQUFDLEdBQUcsSUFBSSxNQUFNLElBQUksT0FBTyxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLEVBQUEsU0FBUyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUE7TUFDN0UsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRSxTQUFZLE9BQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUN2QztHQUNGO0VBQ0QsSUFBSSxlQUFBLENBQUMsRUFBRSxFQUFFLE9BQWMsRUFBRTtxQ0FBVCxHQUFHLElBQUk7O0lBQ3JCQSxJQUFJLEdBQUcsR0FBR2EsR0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2hCLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFBLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUE7SUFDL0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBQSxPQUFPLEVBQUE7SUFDeEIsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxFQUFFLEVBQUEsT0FBTyxFQUFBO0lBQzFDWixJQUFNLFNBQVMsR0FBRyxlQUFjLElBQUUsT0FBTyxHQUFHLHVCQUF1QixHQUFHLEVBQUUsQ0FBQSxDQUFHO0lBQzNFLEdBQUcsQ0FBQyxhQUFhLENBQUMsWUFBRztNQUNuQixHQUFHLENBQUMsV0FBVyxDQUFDLHNCQUFzQixDQUFDLENBQUM7S0FDekMsQ0FBQyxDQUFDO0lBQ0gsR0FBRyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztHQUN6QjtFQUNELElBQUksZUFBQSxDQUFDLEVBQXFCLEVBQUUsT0FBYyxFQUFFOzJCQUFyQyxHQUFHLGdCQUFnQixDQUFTO3FDQUFBLEdBQUcsSUFBSTs7SUFDeENELElBQUksR0FBRyxHQUFHYSxHQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDaEIsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUEsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBQTtJQUMvRCxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFBLE9BQU8sRUFBQTtJQUN4QixJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsRUFBRSxFQUFBLE9BQU8sRUFBQTtJQUMzQyxJQUFJLE9BQU8sRUFBRTtNQUNYLEdBQUcsQ0FBQyxRQUFRLENBQUMsc0JBQXNCLENBQUMsQ0FBQztNQUNyQyxHQUFHLENBQUMsYUFBYSxDQUFDLFlBQUc7UUFDbkIsR0FBRyxDQUFDLFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO09BQ3pDLENBQUMsQ0FBQztLQUNKO0lBQ0QsR0FBRyxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQztHQUNsQztFQUNELFdBQVcsc0JBQUEsQ0FBQyxJQUFJLEVBQUU7SUFDaEJiLElBQUksT0FBTyxDQUFDO0lBQ1pBLElBQUksU0FBUyxDQUFDO0lBQ2RBLElBQUksUUFBUSxDQUFDO0lBQ2IsSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7TUFDOUIsUUFBUSxHQUFHLElBQUksQ0FBQztNQUNoQixPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztLQUNwQixNQUFNO01BQ0wsT0FBTyxHQUFHYSxHQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7TUFDbEIsSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxFQUFBLFFBQVEsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUE7S0FDdEQ7SUFDRCxJQUFJLFFBQVEsSUFBSSxRQUFRLENBQUMsU0FBUyxJQUFJLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtNQUNuRSxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQztLQUNoQyxNQUFNLElBQUksT0FBTyxFQUFFO01BQ2xCLFNBQVMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztLQUNuRTtJQUNELElBQUksQ0FBQyxTQUFTLEtBQUssU0FBUyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBQSxPQUFPLFNBQVMsQ0FBQyxFQUFBO0lBQzFFLE9BQU8sU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQ3JCO0VBQ0QsV0FBVyxzQkFBQSxDQUFDLGFBQWEsRUFBRTtJQUN6QmIsSUFBSSxjQUFjLEdBQUdhLEdBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN0QyxJQUFJLGNBQWMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7TUFDckMsY0FBYyxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7TUFDdEQsSUFBSSxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxFQUFBLE9BQU8sU0FBUyxDQUFDLEVBQUE7S0FDakQ7SUFDRCxPQUFPLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7R0FDakM7RUFDRCxzQkFBc0IsaUNBQUEsQ0FBQyxNQUFNLEVBQUUsYUFBYSxFQUFFO0lBQzVDWixJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUM7SUFDakJBLElBQU0sT0FBTyxHQUFHWSxHQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUJaLElBQU0sU0FBUyxHQUFHWSxHQUFDLENBQUMsYUFBYSxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDOztJQUV4RmIsSUFBSSxpQkFBaUIsQ0FBQztJQUN0QkEsSUFBSSxnQkFBZ0IsQ0FBQzs7SUFFckJBLElBQUksWUFBWSxDQUFDO0lBQ2pCQSxJQUFJLFlBQVksQ0FBQztJQUNqQkEsSUFBSSxRQUFRLENBQUM7SUFDYkEsSUFBSSxNQUFNLENBQUM7SUFDWEEsSUFBSSxZQUFZLENBQUM7SUFDakIsU0FBUyxZQUFZLEdBQUc7TUFDdEJDLElBQU0sYUFBYSxHQUFHLElBQUksQ0FBQztNQUMzQixJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLEVBQUUsRUFBQSxPQUFPLEVBQUE7TUFDOUMsZ0JBQWdCLEdBQUcsYUFBYSxDQUFDLFNBQVMsQ0FBQztNQUMzQyxZQUFZLEdBQUcsYUFBYSxDQUFDLFlBQVksQ0FBQztNQUMxQyxZQUFZLEdBQUcsYUFBYSxDQUFDLFlBQVksQ0FBQztNQUMxQyxRQUFRLEdBQUcsZ0JBQWdCLEdBQUcsWUFBWSxJQUFJLFlBQVksQ0FBQztNQUMzRCxZQUFZLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQzs7TUFFbkQsSUFBSSxRQUFRLEVBQUU7UUFDWixJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLG1CQUFtQixFQUFFO1VBQ3pDLE1BQU0sR0FBRyxNQUFNLENBQUM7U0FDakI7T0FDRixNQUFNLElBQUksaUJBQWlCLEdBQUcsZ0JBQWdCLEVBQUU7UUFDL0MsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsSUFBSSxnQkFBZ0IsSUFBSSxFQUFFLEVBQUU7VUFDbkUsTUFBTSxHQUFHLE1BQU0sQ0FBQztTQUNqQixNQUFNO1VBQ0wsTUFBTSxHQUFHLE1BQU0sQ0FBQztTQUNqQjtPQUNGLE1BQU0sSUFBSSxnQkFBZ0IsR0FBRyxFQUFFLEVBQUU7UUFDaEMsTUFBTSxHQUFHLE1BQU0sQ0FBQztPQUNqQixNQUFNO1FBQ0wsTUFBTSxHQUFHLE1BQU0sQ0FBQztPQUNqQjs7TUFFRCxJQUFJLE1BQU0sS0FBSyxNQUFNLElBQUksWUFBWSxFQUFFO1FBQ3JDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzNCLFlBQVksR0FBRyxLQUFLLENBQUM7T0FDdEIsTUFBTSxJQUFJLE1BQU0sS0FBSyxNQUFNLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDN0MsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDM0IsWUFBWSxHQUFHLElBQUksQ0FBQztPQUNyQjs7TUFFRCxpQkFBaUIsR0FBRyxnQkFBZ0IsQ0FBQztLQUN0QztJQUNELE9BQU8sQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDMUQsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixHQUFHLFlBQVksQ0FBQztHQUNqRDtDQUNGLENBQUM7QUFDRixJQUFJLFFBQVEsR0FBRztFQUNiLElBQUksRUFBRSxRQUFRO0VBQ2QsTUFBTSxpQkFBQSxHQUFHO0lBQ1BBLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQztJQUNqQixLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtNQUNoQixNQUFNLEVBQUU7UUFDTixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQzNCLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDM0IsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUMzQixXQUFXLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQ3pDLHNCQUFzQixFQUFFLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO09BQ2hFO0tBQ0YsQ0FBQyxDQUFDO0dBQ0o7RUFDRCxNQUFNLEVBQUU7SUFDTixNQUFNLEVBQUU7TUFDTixxQkFBcUIsRUFBRSxJQUFJO01BQzNCLGNBQWMsRUFBRSxJQUFJO01BQ3BCLGdCQUFnQixFQUFFLEtBQUs7TUFDdkIsbUJBQW1CLEVBQUUsSUFBSTtNQUN6QixtQkFBbUIsRUFBRSxJQUFJO0tBQzFCO0dBQ0Y7RUFDRCxFQUFFLEVBQUU7SUFDRixNQUFNLGlCQUFBLEdBQUc7TUFDUEEsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDO01BQ2pCLElBQUksR0FBRyxDQUFDLEtBQUssS0FBSyxLQUFLLEVBQUUsRUFBQSxPQUFPLEVBQUE7TUFDaENZLEdBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxLQUFLLEVBQUUsUUFBUSxFQUFFO1FBQ2xDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO09BQzNCLENBQUMsQ0FBQztLQUNKO0lBQ0QsZ0JBQWdCLDJCQUFBLENBQUMsSUFBSSxFQUFFO01BQ3JCLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsRUFBRTtRQUNyQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsZUFBZSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMscUJBQXFCLEVBQUUsSUFBSSxDQUFDLENBQUM7T0FDbEY7S0FDRjtJQUNELFlBQVksdUJBQUEsQ0FBQyxJQUFJLEVBQUU7TUFDakJaLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQztNQUNqQixJQUFJLEdBQUcsQ0FBQyxLQUFLLEtBQUssS0FBSyxFQUFFLEVBQUEsT0FBTyxFQUFBO01BQ2hDRCxJQUFJLFNBQVMsQ0FBQztNQUNkQyxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7TUFDakRBLElBQU0sYUFBYSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO01BQ25ELElBQUksQ0FBQyxhQUFhLEVBQUU7UUFDbEIsU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztPQUMzRCxNQUFNO1FBQ0wsU0FBUyxHQUFHWSxHQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO09BQ2pEO01BQ0QsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1FBQ25GLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO09BQzVCLE1BQU07UUFDTCxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztPQUM1QjtLQUNGO0lBQ0QsVUFBVSxxQkFBQSxDQUFDLElBQUksRUFBRTtNQUNmWixJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUM7TUFDakIsSUFBSSxHQUFHLENBQUMsS0FBSyxLQUFLLEtBQUssRUFBRSxFQUFBLE9BQU8sRUFBQTtNQUNoQ0EsSUFBTSxTQUFTLEdBQUdZLEdBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO01BQ2xELElBQUksQ0FBQyxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsRUFBQSxPQUFPLEVBQUE7TUFDakQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDNUI7SUFDRCxRQUFRLG1CQUFBLENBQUMsSUFBSSxFQUFFO01BQ2JaLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQztNQUNqQkEsSUFBTSxTQUFTLEdBQUdZLEdBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO01BQ2xELElBQUksQ0FBQyxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsRUFBQSxPQUFPLEVBQUE7TUFDakQsSUFBSSxHQUFHLENBQUMsS0FBSyxLQUFLLEtBQUssRUFBRTtRQUN2QixHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztPQUM1QjtNQUNELElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLE1BQU0sRUFBRTtRQUN0TCxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUEsT0FBTyxFQUFBO1FBQzNHLEdBQUcsQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztPQUMxRDtLQUNGO0lBQ0QsU0FBUyxvQkFBQSxDQUFDLEtBQUssRUFBRTtNQUNmWixJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUM7TUFDakIsSUFBSSxHQUFHLENBQUMsS0FBSyxLQUFLLEtBQUssRUFBRSxFQUFBLE9BQU8sRUFBQTtNQUNoQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLEtBQUssRUFBRSxRQUFRLEVBQUU7UUFDbkYsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7T0FDM0IsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxTQUFTLG9CQUFBLENBQUMsS0FBSyxFQUFFO01BQ2ZBLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQztNQUNqQixJQUFJLEdBQUcsQ0FBQyxLQUFLLEtBQUssS0FBSyxFQUFFLEVBQUEsT0FBTyxFQUFBO01BQ2hDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLDZDQUE2QyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRTtRQUNuRixHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztPQUMzQixDQUFDLENBQUM7S0FDSjtJQUNELGNBQWMseUJBQUEsQ0FBQyxLQUFLLEVBQUU7TUFDcEJBLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQztNQUNqQixJQUFJLEdBQUcsQ0FBQyxLQUFLLEtBQUssS0FBSyxFQUFFLEVBQUEsT0FBTyxFQUFBO01BQ2hDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLDZDQUE2QyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRTtRQUNuRixHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztPQUMzQixDQUFDLENBQUM7S0FDSjtJQUNELE9BQU8sa0JBQUEsQ0FBQyxLQUFLLEVBQUU7TUFDYkEsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDO01BQ2pCWSxHQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLDZDQUE2QyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRTtRQUNsRixHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztPQUMzQixDQUFDLENBQUM7S0FDSjtHQUNGO0VBQ0QsTUFBTSxFQUFFO0lBQ04sZ0JBQWdCLEVBQUUsU0FBUyxZQUFZLENBQUMsVUFBVSxFQUFFO01BQ2xEWixJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUM7TUFDakIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLHFCQUFxQixFQUFFLEVBQUEsT0FBTyxFQUFBO01BQ3JELElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ3RDLE9BQU87T0FDUjtNQUNERCxJQUFJLFdBQVcsQ0FBQzs7TUFFaEJDLElBQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7OztNQUc3QyxXQUFXLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQzs7TUFFOUMsSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTs7UUFFNUIsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7VUFDdEMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQzdEOztRQUVELElBQUksV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7VUFDNUIsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM1RCxXQUFXLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztXQUNuRjtTQUNGO09BQ0Y7TUFDRCxJQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs7UUFFekMsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO1VBQy9CLFdBQVcsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1NBQ2hGO1FBQ0QsSUFBSSxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxFQUFBLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUE7T0FDM0Q7S0FDRjtHQUNGO0NBQ0YsQ0FBQzs7QUFFRkEsSUFBTSxPQUFPLEdBQUc7RUFDZCxZQUFZLHVCQUFBLENBQUMsUUFBUSxFQUFFO0lBQ3JCQSxJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUM7SUFDakIsSUFBSSxHQUFHLENBQUMsS0FBSyxLQUFLLElBQUksRUFBRSxFQUFBLE9BQU8sRUFBQTs7SUFFL0JBLElBQU0sU0FBUyxHQUFHWSxHQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7O0lBRTlCLElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsRUFBRSxFQUFBLE9BQU8sRUFBQTs7SUFFN0csSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtNQUN0RCxTQUFTLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUMsTUFBTSxDQUFDLDBDQUEwQyxDQUFDLENBQUM7S0FDekY7O0lBRURaLElBQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUMzREEsSUFBTSxXQUFXLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3ZERCxJQUFJLGNBQWMsQ0FBQztJQUNuQkEsSUFBSSxrQkFBa0IsQ0FBQzs7SUFFdkIsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLEVBQUU7TUFDM0MsY0FBYyxHQUFHLENBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsUUFBRyxDQUFFO01BQ25ELGtCQUFrQixHQUFHLENBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsUUFBRyxDQUFFO0tBQ3ZELE1BQU07TUFDTEMsSUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO01BQ3hDQSxJQUFNLGFBQWEsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztNQUN6RCxjQUFjLEdBQUcsQ0FBRyxHQUFHLEdBQUcsYUFBYSxPQUFFLENBQUU7TUFDM0Msa0JBQWtCLEdBQUcsQ0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxXQUFXLEdBQUcsV0FBVyxJQUFJLEdBQUcsT0FBRSxDQUFFO0tBQ3pFOztJQUVELFlBQVk7T0FDVCxHQUFHLENBQUMsT0FBTyxFQUFFLGNBQWMsQ0FBQztPQUM1QixTQUFTLEVBQUMsY0FBYSxHQUFFLGtCQUFrQixVQUFNLEVBQUUsQ0FBQztHQUN4RDtFQUNELElBQUksZUFBQSxDQUFDLFFBQVEsRUFBRTtJQUNiQSxJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUM7SUFDakIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7R0FDcEM7RUFDRCxJQUFJLGVBQUEsQ0FBQyxFQUFFLEVBQUUsT0FBYyxFQUFFO3FDQUFULEdBQUcsSUFBSTs7SUFDckJBLElBQU0sR0FBRyxHQUFHWSxHQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbEIsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsRUFBQSxPQUFPLEVBQUE7SUFDM0NaLElBQU0sU0FBUyxHQUFHLGdCQUFlLElBQUUsT0FBTyxHQUFHLHdCQUF3QixHQUFHLEVBQUUsQ0FBQSxDQUFHO0lBQzdFLEdBQUcsQ0FBQyxhQUFhLENBQUMsWUFBRztNQUNuQixHQUFHLENBQUMsV0FBVyxDQUFDLHVCQUF1QixDQUFDLENBQUM7S0FDMUMsQ0FBQyxDQUFDO0lBQ0gsR0FBRyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztHQUN6QjtFQUNELElBQUksZUFBQSxDQUFDLEVBQUUsRUFBRSxPQUFjLEVBQUU7cUNBQVQsR0FBRyxJQUFJOztJQUNyQkEsSUFBTSxHQUFHLEdBQUdZLEdBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsQixJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUEsT0FBTyxFQUFBO0lBQzVDLElBQUksT0FBTyxFQUFFO01BQ1gsR0FBRyxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO01BQ3RDLEdBQUcsQ0FBQyxhQUFhLENBQUMsWUFBRztRQUNuQixHQUFHLENBQUMsV0FBVyxDQUFDLHVCQUF1QixDQUFDLENBQUM7T0FDMUMsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxHQUFHLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLENBQUM7R0FDbkM7RUFDRCx1QkFBdUIsa0NBQUEsQ0FBQyxNQUFNLEVBQUU7SUFDOUJaLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQztJQUNqQkEsSUFBTSxPQUFPLEdBQUdZLEdBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxQmIsSUFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDL0QsSUFBSSxVQUFVLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtNQUMzQixVQUFVLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUN2QztJQUNELElBQUksVUFBVSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7TUFDM0IsT0FBTztLQUNSOztJQUVEQSxJQUFJLGlCQUFpQixDQUFDO0lBQ3RCQSxJQUFJLGdCQUFnQixDQUFDOztJQUVyQkEsSUFBSSxZQUFZLENBQUM7SUFDakJBLElBQUksWUFBWSxDQUFDO0lBQ2pCQSxJQUFJLFFBQVEsQ0FBQztJQUNiQSxJQUFJLE1BQU0sQ0FBQztJQUNYQSxJQUFJLGFBQWEsQ0FBQztJQUNsQixTQUFTLFlBQVksR0FBRztNQUN0QkMsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDO01BQzNCLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsRUFBRSxFQUFBLE9BQU8sRUFBQTtNQUM5QyxnQkFBZ0IsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDO01BQzNDLFlBQVksR0FBRyxhQUFhLENBQUMsWUFBWSxDQUFDO01BQzFDLFlBQVksR0FBRyxhQUFhLENBQUMsWUFBWSxDQUFDO01BQzFDLFFBQVEsR0FBRyxnQkFBZ0IsR0FBRyxZQUFZLElBQUksWUFBWSxDQUFDO01BQzNELGFBQWEsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUM7O01BRXRELElBQUksUUFBUSxFQUFFO1FBQ1osSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsRUFBRTtVQUMxQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1NBQ2pCO09BQ0YsTUFBTSxJQUFJLGlCQUFpQixHQUFHLGdCQUFnQixFQUFFO1FBQy9DLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsbUJBQW1CLElBQUksZ0JBQWdCLElBQUksRUFBRSxFQUFFO1VBQ3BFLE1BQU0sR0FBRyxNQUFNLENBQUM7U0FDakIsTUFBTTtVQUNMLE1BQU0sR0FBRyxNQUFNLENBQUM7U0FDakI7T0FDRixNQUFNLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxFQUFFO1FBQ2hDLE1BQU0sR0FBRyxNQUFNLENBQUM7T0FDakIsTUFBTTtRQUNMLE1BQU0sR0FBRyxNQUFNLENBQUM7T0FDakI7O01BRUQsSUFBSSxNQUFNLEtBQUssTUFBTSxJQUFJLGFBQWEsRUFBRTtRQUN0QyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM3QixhQUFhLEdBQUcsS0FBSyxDQUFDO09BQ3ZCLE1BQU0sSUFBSSxNQUFNLEtBQUssTUFBTSxJQUFJLENBQUMsYUFBYSxFQUFFO1FBQzlDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzdCLGFBQWEsR0FBRyxJQUFJLENBQUM7T0FDdEI7O01BRUQsaUJBQWlCLEdBQUcsZ0JBQWdCLENBQUM7S0FDdEM7SUFDRCxPQUFPLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxlQUFlLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzFELE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsR0FBRyxZQUFZLENBQUM7R0FDbEQ7Q0FDRixDQUFDO0FBQ0YsSUFBSSxTQUFTLEdBQUc7RUFDZCxJQUFJLEVBQUUsU0FBUztFQUNmLE1BQU0saUJBQUEsR0FBRztJQUNQQSxJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUM7SUFDakIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7TUFDaEIsT0FBTyxFQUFFO1FBQ1AsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUM1QixJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQzVCLFlBQVksRUFBRSxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDNUMsdUJBQXVCLEVBQUUsT0FBTyxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDbEUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztPQUM3QjtLQUNGLENBQUMsQ0FBQztHQUNKO0VBQ0QsTUFBTSxFQUFFO0lBQ04sT0FBTyxFQUFFO01BQ1AsZ0JBQWdCLEVBQUUsS0FBSztNQUN2QixtQkFBbUIsRUFBRSxJQUFJO01BQ3pCLG1CQUFtQixFQUFFLElBQUk7S0FDMUI7R0FDRjtFQUNELEVBQUUsRUFBRTtJQUNGLGdCQUFnQiwyQkFBQSxDQUFDLElBQUksRUFBRTtNQUNyQixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLEVBQUU7UUFDdEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLGVBQWUsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixFQUFFLElBQUksQ0FBQyxDQUFDO09BQ25GO0tBQ0Y7SUFDRCxZQUFZLHVCQUFBLENBQUMsSUFBSSxFQUFFO01BQ2pCQSxJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUM7TUFDakIsSUFBSSxHQUFHLENBQUMsS0FBSyxLQUFLLEtBQUssRUFBRSxFQUFBLE9BQU8sRUFBQTtNQUNoQ0QsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO01BQ2hFLElBQUksVUFBVSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDM0IsVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO09BQ3hDO01BQ0QsSUFBSSxVQUFVLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUMzQixPQUFPO09BQ1I7TUFDRCxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFO1FBQ25DLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO09BQzlCLE1BQU07UUFDTCxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztPQUM5QjtLQUNGO0lBQ0QsUUFBUSxtQkFBQSxDQUFDLElBQUksRUFBRTtNQUNiQyxJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUM7TUFDakIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxLQUFLLEVBQUUsUUFBUSxFQUFFO1FBQzlELEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO09BQzVCLENBQUMsQ0FBQztNQUNILElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsd0JBQXdCLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLE1BQU0sRUFBRTtRQUN6TCxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUEsT0FBTyxFQUFBO1FBQzVHLEdBQUcsQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO09BQzlDO0tBQ0Y7SUFDRCxJQUFJLGVBQUEsR0FBRztNQUNMQSxJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUM7TUFDakIsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxLQUFLLEVBQUUsUUFBUSxFQUFFO1FBQzlELEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO09BQzVCLENBQUMsQ0FBQztLQUNKO0dBQ0Y7Q0FDRixDQUFDOztBQUVGLElBQUksU0FBUyxHQUFHO0VBQ2QsSUFBSSxFQUFFLFdBQVc7RUFDakIsRUFBRSxFQUFFO0lBQ0YsUUFBUSxtQkFBQSxDQUFDLElBQUksRUFBRTtNQUNiLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLEVBQUU7UUFDdkYsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUMsQ0FBQztPQUMxQztNQUNELElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsTUFBTSxFQUFFO1FBQ3RDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDLENBQUM7T0FDMUM7S0FDRjtHQUNGO0NBQ0YsQ0FBQzs7QUFFRixJQUFNLGFBQWEsR0FBQyxzQkFDUCxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0VBQ3ZCLElBQVEsTUFBTSxHQUFHLElBQUksQ0FBQztFQUN0QixJQUFNLENBQUMsR0FBRyxFQUFFLEVBQUEsT0FBTyxTQUFTLENBQUMsRUFBQTtFQUM3QixJQUFRLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMscUJBQXFCLEVBQUUsQ0FBQztFQUM3QyxJQUFRLE1BQU0sR0FBRztJQUNmLENBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUk7SUFDakIsQ0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRztHQUNmLENBQUM7RUFDSixJQUFRLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO0VBQzFCLElBQVEsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7RUFDNUIsSUFBUSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxXQUFDLENBQUMsVUFBQSxNQUFNLEVBQUksQ0FBQyxFQUFBLEtBQUssVUFBQSxLQUFLLEVBQUksQ0FBQyxFQUFBLENBQUMsR0FBSyxHQUFHLEVBQUEsR0FBRyxFQUFFLENBQUMsQ0FBQzs7RUFFekUsTUFBUSxDQUFDLGFBQWEsR0FBR1ksR0FBQyxFQUFDLDRDQUF3QyxHQUFFLFFBQVEsaUJBQWEsR0FBRSxRQUFRLHFCQUFpQixJQUFFLFFBQVEsR0FBRyxDQUFDLENBQUEsc0JBQWtCLElBQUUsUUFBUSxHQUFHLENBQUMsQ0FBQSxjQUFVLElBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQSxhQUFTLElBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQSxpQkFBWSxFQUFFLENBQUM7O0VBRXpOLEdBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDOztFQUVwQyxJQUFRLFVBQVUsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQzs7RUFFeEQsTUFBUSxDQUFDLGVBQWUsR0FBRyxjQUFhLElBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQSxTQUFLLElBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQSxvQkFBZ0IsQ0FBRTs7RUFFbEgsTUFBUSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDOztFQUV6RCxPQUFTLE1BQU0sQ0FBQztDQUNmLENBQUE7QUFDSCx3QkFBRSxRQUFRLHdCQUFHO0VBQ1gsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0VBQ3BCLE1BQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUM7RUFDaEMsTUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxHQUFHLEVBQUU7SUFDbEMsTUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUNyQixPQUFTLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUNwQixDQUFDLENBQUM7RUFDTCxNQUFRLEdBQUcsSUFBSSxDQUFDO0NBQ2YsQ0FBQTtBQUNILHdCQUFFLE1BQU0sc0JBQUc7RUFDVCxJQUFRLE1BQU0sR0FBRyxJQUFJLENBQUM7RUFDdEIsSUFBTSxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUEsT0FBTyxFQUFBO0VBQzlCLElBQVEsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7RUFDM0MsSUFBUSxlQUFlLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztFQUMvQyxJQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLFlBQUc7SUFDdEMsTUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0dBQ25CLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDVixNQUFRLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztFQUN6QixhQUFlO0tBQ1YsUUFBUSxDQUFDLGtCQUFrQixDQUFDO0tBQzVCLFNBQVMsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUMsQ0FBQztLQUM3RCxhQUFhLENBQUMsWUFBRztNQUNsQixZQUFjLENBQUMsYUFBYSxDQUFDLENBQUM7TUFDOUIsS0FBTyxDQUFDLFNBQVMsQ0FBQyxZQUFHO1FBQ25CLGFBQWU7V0FDVixRQUFRLENBQUMsaUJBQWlCLENBQUM7V0FDM0IsU0FBUyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7O1FBRW5FLGFBQWUsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLFlBQUc7VUFDbEMsTUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ25CLEVBQUUsR0FBRyxDQUFDLENBQUM7O1FBRVYsYUFBZSxDQUFDLGFBQWEsQ0FBQyxZQUFHO1VBQy9CLFlBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQztVQUM5QixNQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDbkIsQ0FBQyxDQUFDO09BQ0osQ0FBQyxDQUFDO0tBQ0osQ0FBQyxDQUFDO0NBQ04sQ0FBQTs7QUFHSCxJQUFJLFdBQVcsR0FBRztFQUNoQixJQUFJLEVBQUUsY0FBYztFQUNwQixNQUFNLEVBQUU7SUFDTixXQUFXLEVBQUUsYUFBYTtHQUMzQjtFQUNELE1BQU0saUJBQUEsR0FBRztJQUNQWixJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUM7SUFDakIsR0FBRyxDQUFDLFdBQVcsR0FBRztNQUNoQixNQUFNLGlCQUFBLEdBQVU7Ozs7UUFDZCxPQUFPLG9DQUFJLGFBQWEsbUJBQUMsSUFBTyxDQUFDLEdBQUEsQ0FBQztPQUNuQztLQUNGLENBQUM7R0FDSDtDQUNGLENBQUM7O0FBRUZBLElBQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQztBQUN4QkEsSUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDO0FBQ3hCLFNBQVMsaUJBQWlCLEdBQUc7RUFDM0IsSUFBSSxZQUFZLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxFQUFBLE9BQU8sRUFBQTtFQUN0Q0EsSUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO0VBQ3BDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztDQUNmO0FBQ0QsSUFBTSxLQUFLO0VBQXlCLGNBQ3ZCLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRTtJQUN2QlcsZUFBSyxLQUFBLENBQUMsTUFBQSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDOztJQUVyQlgsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDOztJQUVuQkEsSUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDOzs7SUFHcEIsS0FBSyxDQUFDLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxDQUFDOztJQUV6QyxLQUFLLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDOzs7SUFHOUMsS0FBSyxDQUFDLGtCQUFrQixFQUFFLENBQUM7O0lBRTNCLE9BQU8sSUFBSSxDQUFDO0dBQ2I7Ozs7c0NBQUE7RUFDRCxnQkFBQSxNQUFNLHNCQUFHO0lBQ1BBLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQztJQUNuQixZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pCWSxHQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFDLGFBQVksSUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFBLEVBQUcsQ0FBQztJQUM3RCxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBQyxhQUFZLElBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQSxVQUFNLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDeEUsS0FBSyxDQUFDLElBQUksRUFBQyx3QkFBdUIsSUFBRSxLQUFLLENBQUMsSUFBSSxDQUFBLFNBQUssR0FBRyxLQUFLLENBQUMsQ0FBQztHQUM5RCxDQUFBO0VBQ0QsZ0JBQUEsUUFBUSx3QkFBRztJQUNUWixJQUFNLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDbkIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUMsZUFBYyxJQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUEsWUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQzVFLEtBQUssQ0FBQyxJQUFJLEVBQUMsNEJBQTJCLElBQUUsS0FBSyxDQUFDLElBQUksQ0FBQSxXQUFPLEdBQUcsS0FBSyxDQUFDLENBQUM7R0FDcEUsQ0FBQTtFQUNELGdCQUFBLE9BQU8sdUJBQUc7SUFDUkEsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQ25CLFlBQVksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNwRFksR0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBQyxhQUFZLElBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQSxFQUFHLENBQUM7SUFDaEUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUMsY0FBYSxJQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUEsV0FBTyxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQzFFLEtBQUssQ0FBQyxJQUFJLEVBQUMsMEJBQXlCLElBQUUsS0FBSyxDQUFDLElBQUksQ0FBQSxVQUFNLEdBQUcsS0FBSyxDQUFDLENBQUM7R0FDakUsQ0FBQTtFQUNELGdCQUFBLFFBQVEsd0JBQUc7SUFDVFosSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQ25CLEtBQUssQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ25DLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDakIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUMsZUFBYyxJQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUEsWUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQzVFLEtBQUssQ0FBQyxJQUFJLEVBQUMsNEJBQTJCLElBQUUsS0FBSyxDQUFDLElBQUksQ0FBQSxXQUFPLEdBQUcsS0FBSyxDQUFDLENBQUM7R0FDcEUsQ0FBQTtFQUNELGdCQUFBLElBQUksa0JBQUMsWUFBWSxFQUFFO0lBQ2pCQSxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDbkJBLElBQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDdEJBLElBQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDdEJBLElBQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7SUFDdENBLElBQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7SUFDeEJELElBQUksT0FBTyxHQUFHLElBQUksQ0FBQztJQUNuQixJQUFJLE9BQU8sWUFBWSxLQUFLLFdBQVcsRUFBRSxFQUFBLE9BQU8sR0FBRyxZQUFZLENBQUMsRUFBQTtTQUMzRCxJQUFJLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEtBQUssV0FBVyxFQUFFO01BQ3BELE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztLQUNoQzs7SUFFRCxJQUFJLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUU7TUFDcEMsT0FBTyxLQUFLLENBQUM7S0FDZDs7SUFFRCxJQUFJLElBQUksS0FBSyxRQUFRLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFO01BQ3ZEQSxJQUFJLFdBQVcsQ0FBQztNQUNoQixJQUFJYSxHQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ3BDLFdBQVcsR0FBRyxJQUFJLENBQUM7T0FDcEIsTUFBTSxJQUFJLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ2xDLFlBQVksQ0FBQyxPQUFPLENBQUMsVUFBQyxXQUFXLEVBQUU7VUFDakMsSUFBSSxXQUFXLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRSxFQUFBLFdBQVcsR0FBRyxJQUFJLENBQUMsRUFBQTtTQUN2RCxDQUFDLENBQUM7T0FDSjtNQUNELElBQUksV0FBVyxFQUFFO1FBQ2YsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6QixPQUFPLEtBQUssQ0FBQztPQUNkO0tBQ0Y7O0lBRURaLElBQU0sY0FBYyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNwQ0EsSUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ2xELElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7TUFDaEUsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7TUFDckIsS0FBSyxDQUFDLElBQUksRUFBQyxJQUFPLFdBQU8sR0FBRyxZQUFHO1FBQzdCLElBQUksUUFBUSxFQUFFO1VBQ1osY0FBYyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUM1QixNQUFNO1VBQ0wsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ2Q7T0FDRixDQUFDLENBQUM7S0FDSjs7SUFFRCxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7OztJQUdYLElBQUksSUFBSSxLQUFLLFFBQVEsRUFBRTtNQUNyQixHQUFHLENBQUMsR0FBRyxDQUFDO1FBQ04sU0FBUyxHQUFFLENBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUMsUUFBRyxDQUFDO09BQ3JELENBQUMsQ0FBQztLQUNKOzs7O0lBSUQsS0FBSyxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDOzs7SUFHdEMsSUFBSSxXQUFXLEVBQUU7TUFDZixXQUFXLENBQUMsT0FBTyxHQUFHLGFBQWEsR0FBRyxVQUFVLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQztNQUNsRSxXQUFXLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQ3JDOztJQUVELFNBQVMsYUFBYSxHQUFHO01BQ3ZCLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsRUFBRTtRQUM3QixLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7T0FDbEIsTUFBTTtRQUNMLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztPQUNsQjtLQUNGO0lBQ0QsSUFBSSxPQUFPLEVBQUU7TUFDWCxHQUFHO1NBQ0EsWUFBWSxDQUFDLFlBQUc7VUFDZixhQUFhLEVBQUUsQ0FBQztTQUNqQixDQUFDLENBQUM7TUFDTCxHQUFHO1NBQ0EsYUFBYSxDQUFDLFlBQUc7VUFDaEIsYUFBYSxFQUFFLENBQUM7U0FDakIsQ0FBQyxDQUFDO01BQ0wsR0FBRztTQUNBLFdBQVcsQ0FBQyx3QkFBd0IsQ0FBQztTQUNyQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7TUFDeEIsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO0tBQ2hCLE1BQU07TUFDTCxHQUFHLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO01BQy9ELEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztNQUNmLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztLQUNsQjs7SUFFRCxPQUFPLEtBQUssQ0FBQztHQUNkLENBQUE7RUFDRCxnQkFBQSxLQUFLLG1CQUFDLFlBQVksRUFBRTtJQUNsQkEsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQ25CQSxJQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQ3RCQSxJQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDOztJQUV0Q0QsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ25CLElBQUksT0FBTyxZQUFZLEtBQUssV0FBVyxFQUFFLEVBQUEsT0FBTyxHQUFHLFlBQVksQ0FBQyxFQUFBO1NBQzNELElBQUksT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sS0FBSyxXQUFXLEVBQUU7TUFDcEQsT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO0tBQ2hDOztJQUVELElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFO01BQ3JDLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7OztJQUdELElBQUksV0FBVyxFQUFFO01BQ2YsV0FBVyxDQUFDLE9BQU8sR0FBRyxhQUFhLEdBQUcsVUFBVSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUM7TUFDbEUsV0FBVyxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQztLQUN4Qzs7O0lBR0QsR0FBRyxDQUFDLE9BQU8sR0FBRyxhQUFhLEdBQUcsVUFBVSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDMUQsU0FBUyxhQUFhLEdBQUc7TUFDdkIsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1FBQzdCLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztPQUNsQixNQUFNO1FBQ0wsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO09BQ2xCO0tBQ0Y7SUFDRCxJQUFJLE9BQU8sRUFBRTtNQUNYLEdBQUc7U0FDQSxZQUFZLENBQUMsWUFBRztVQUNmLGFBQWEsRUFBRSxDQUFDO1NBQ2pCLENBQUMsQ0FBQztNQUNMLEdBQUc7U0FDQSxhQUFhLENBQUMsWUFBRztVQUNoQixhQUFhLEVBQUUsQ0FBQztTQUNqQixDQUFDLENBQUM7TUFDTCxHQUFHO1NBQ0EsV0FBVyxDQUFDLFVBQVUsQ0FBQztTQUN2QixRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7O01BRXpCLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUNqQixNQUFNO01BQ0wsR0FBRztTQUNBLFFBQVEsQ0FBQyxjQUFjLENBQUM7U0FDeEIsV0FBVyxDQUFDLFVBQVUsQ0FBQztTQUN2QixRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7O01BRXpCLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztNQUNoQixLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDbEI7O0lBRUQsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtNQUMzQixpQkFBaUIsRUFBRSxDQUFDO0tBQ3JCOztJQUVELE9BQU8sS0FBSyxDQUFDO0dBQ2QsQ0FBQTtFQUNELGdCQUFBLE9BQU8sdUJBQUc7SUFDUkEsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQ2pCLEtBQUssQ0FBQyxJQUFJLEVBQUMsMENBQXlDLElBQUUsS0FBSyxDQUFDLElBQUksQ0FBQSxrQkFBYyxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQ3hGLElBQUksS0FBSyxDQUFDLEdBQUcsRUFBRTtNQUNiLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFDLHNCQUFxQixJQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUEsbUJBQWUsR0FBRyxLQUFLLENBQUMsQ0FBQztNQUMxRixJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFO1FBQzVDLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7T0FDN0I7S0FDRjtJQUNELEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekIsS0FBSyxHQUFHLElBQUksQ0FBQztHQUNkLENBQUE7OztFQTlNaUIsZUErTW5CLEdBQUE7O0FBRUQsQUF1Q0EsSUFBTSxNQUFNO0VBQWUsZUFDZCxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUU7SUFDdkJDLElBQU0sY0FBYyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7TUFDbEMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVc7TUFDcEMsSUFBSSxFQUFFLFNBQVM7TUFDZixPQUFPLEVBQUUsRUFBRTtNQUNYLE9BQU8sRUFBRSxFQUFFO01BQ1gsZUFBZSxFQUFFLEtBQUs7TUFDdEIsT0FBTyxFQUFFLFNBQVM7TUFDbEIsUUFBUSxFQUFFLFNBQVM7TUFDbkIsRUFBRSxFQUFFLEVBQUU7S0FDUCxFQUFFLE1BQU0sQ0FBQyxDQUFDOzs7SUFHWFcsS0FBSyxLQUFBLENBQUMsTUFBQSxHQUFHLEVBQUUsY0FBYyxDQUFDLENBQUM7O0lBRTNCWCxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7O0lBRXBCLElBQVEsS0FBSztJQUFFLElBQUEsSUFBSTtJQUFFLElBQUEsT0FBTztJQUFFLElBQUEsT0FBTztJQUFFLElBQUEsZUFBZTtJQUFFLElBQUEsUUFBUSwyQkFBMUQ7O0lBRU4sTUFBTSxDQUFDLE1BQU0sR0FBRyxjQUFjLENBQUM7OztJQUcvQkQsSUFBSSxHQUFHLENBQUM7SUFDUixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUU7TUFDckJDLElBQU0sYUFBYSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7TUFDakMsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxFQUFBLGFBQWEsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxFQUFBO01BQ2xFLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsRUFBQSxhQUFhLENBQUMsSUFBSSxFQUFDLGlCQUFnQixJQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUEsRUFBRyxDQUFDLEVBQUE7TUFDL0UsSUFBSSxlQUFlLEVBQUUsRUFBQSxhQUFhLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLENBQUMsRUFBQTtNQUNuRSxJQUFJLFFBQVEsRUFBRSxFQUFBLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBQTs7TUFFM0NELElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQztNQUNyQixJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ3RCLFdBQVcsR0FBRywwREFFVixJQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBQSxNQUFNLEVBQUMsVUFBRyw2Q0FDSSxJQUFFLE1BQU0sQ0FBQyxJQUFJLEdBQUcscUJBQXFCLEdBQUcsRUFBRSxDQUFBLElBQUcsTUFBTSxDQUFDLEtBQUssSUFBRyxTQUFRLElBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQSxJQUFLLEVBQUUsQ0FBQSxRQUFHLElBQUUsTUFBTSxDQUFDLElBQUksQ0FBQSwwQkFDckksSUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBLGlDQUVmLENBQUU7T0FDSDs7TUFFREMsSUFBTSxVQUFVLEdBQUcseUJBQ0wsSUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBLDhEQUVqQyxJQUFFLEtBQUssSUFBRyw4QkFBMkIsR0FBRSxLQUFLLFdBQU8sSUFBSSxFQUFFLENBQUEsbUJBQ3pELElBQUUsSUFBSSxJQUFHLDZCQUEwQixHQUFFLElBQUksV0FBTyxJQUFJLEVBQUUsQ0FBQSxtQkFDdEQsR0FBRSxPQUFPLG1DQUVYLEdBQUUsV0FBVyw2QkFFakIsQ0FBRTtNQUNGLEdBQUcsR0FBR1ksR0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ3JCLE1BQU07TUFDTCxHQUFHLEdBQUdBLEdBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQzNCOztJQUVELElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUU7TUFDM0MsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO0tBQ3ZCOztJQUVELElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7TUFDcEIsT0FBTyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDekI7O0lBRURiLElBQUksV0FBVyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDeEQsSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtNQUM1QixXQUFXLEdBQUdhLEdBQUMsQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO01BQ3ZELEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0tBQzlCOzs7SUFHRCxTQUFTLGFBQWEsQ0FBQyxDQUFDLEVBQUU7TUFDeEJaLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQztNQUN0QkEsSUFBTSxLQUFLLEdBQUdZLEdBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztNQUNsQ1osSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO01BQzlCLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFBLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUE7TUFDOUMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFBO01BQ2hFLElBQUksTUFBTSxDQUFDLEtBQUssS0FBSyxLQUFLLEVBQUUsRUFBQSxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBQTtLQUM1QztJQUNELElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO01BQ2pDLEdBQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxLQUFLLEVBQUUsUUFBUSxFQUFFO1FBQ2hEWSxHQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQztPQUN4QyxDQUFDLENBQUM7TUFDSCxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxZQUFHO1FBQ3BCLEdBQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxLQUFLLEVBQUUsUUFBUSxFQUFFO1VBQ2hEQSxHQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQztTQUN6QyxDQUFDLENBQUM7T0FDSixDQUFDLENBQUM7S0FDSjtJQUNELEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO01BQ25CLEtBQUEsR0FBRztNQUNILEtBQUEsR0FBRztNQUNILEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO01BQ1YsYUFBQSxXQUFXO01BQ1gsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7TUFDMUIsSUFBSSxFQUFFLFFBQVE7TUFDZCxXQUFXLHNCQUFBLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRTtRQUM5QixHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNsRSxPQUFPLE1BQU0sQ0FBQztPQUNmO01BQ0QsT0FBTyxrQkFBQSxDQUFDLE9BQU8sRUFBRTtRQUNmYixJQUFJLE9BQU8sR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7VUFDeEIsT0FBTyxHQUFHYSxHQUFDLENBQUMsaUNBQWlDLENBQUMsQ0FBQztVQUMvQyxJQUFJLE9BQU8sS0FBSyxLQUFLLFdBQVcsRUFBRTtZQUNoQyxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztXQUNoRCxNQUFNO1lBQ0wsR0FBRyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7V0FDNUM7U0FDRjtRQUNELE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDO1FBQzdCLE9BQU8sTUFBTSxDQUFDO09BQ2Y7TUFDRCxRQUFRLG1CQUFBLENBQUMsUUFBUSxFQUFFO1FBQ2pCYixJQUFJLFFBQVEsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3pDLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7VUFDekIsUUFBUSxHQUFHYSxHQUFDLENBQUMsa0NBQWtDLENBQUMsQ0FBQztVQUNqRCxHQUFHLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUM3QztRQUNELFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDeEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDO1FBQy9CLE9BQU8sTUFBTSxDQUFDO09BQ2Y7S0FDRixDQUFDLENBQUM7O0lBRUgsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7O0lBRXhCLE9BQU8sTUFBTSxDQUFDO0dBQ2Y7Ozs7d0NBQUE7OztFQWxJa0IsS0FtSXBCLEdBQUE7O0FBRUQsQUE2akRBWixJQUFNLFFBQVEsR0FBRztFQUNmLElBQUksZUFBQSxHQUFHO0lBQ0xBLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQztJQUNqQkEsSUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDO0lBQ3hCRCxJQUFJLFNBQVMsQ0FBQztJQUNkQSxJQUFJLE9BQU8sQ0FBQztJQUNaQSxJQUFJLFdBQVcsQ0FBQztJQUNoQkEsSUFBSSxjQUFjLENBQUM7SUFDbkJBLElBQUksV0FBVyxDQUFDO0lBQ2hCQSxJQUFJLFdBQVcsQ0FBQztJQUNoQkEsSUFBSSxnQkFBZ0IsQ0FBQztJQUNyQkEsSUFBSSxhQUFhLENBQUM7SUFDbEJBLElBQUksWUFBWSxDQUFDO0lBQ2pCQSxJQUFJLGdCQUFnQixDQUFDO0lBQ3JCQSxJQUFJLGlCQUFpQixDQUFDO0lBQ3RCQSxJQUFJLFNBQVMsQ0FBQztJQUNkQSxJQUFJLE1BQU0sQ0FBQztJQUNYQSxJQUFJLGlCQUFpQixDQUFDO0lBQ3RCQSxJQUFJLFlBQVksQ0FBQztJQUNqQkEsSUFBSSxhQUFhLENBQUM7SUFDbEJBLElBQUksU0FBUyxDQUFDO0lBQ2RBLElBQUksb0JBQW9CLENBQUM7SUFDekJBLElBQUkscUJBQXFCLENBQUM7SUFDMUJBLElBQUksYUFBYSxDQUFDO0lBQ2xCQSxJQUFJLGNBQWMsQ0FBQzs7SUFFbkIsU0FBUyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUU7TUFDM0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBQSxPQUFPLEVBQUE7TUFDNUIsT0FBTyxHQUFHLEtBQUssQ0FBQztNQUNoQixTQUFTLEdBQUcsSUFBSSxDQUFDO01BQ2pCLFdBQVcsR0FBRyxTQUFTLENBQUM7TUFDeEIsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxLQUFLLFlBQVksR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO01BQzlFLFlBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksS0FBSyxZQUFZLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQztNQUM5RSxjQUFjLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDO0tBQ3pDO0lBQ0QsU0FBUyxlQUFlLENBQUMsQ0FBQyxFQUFFO01BQzFCLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBQSxPQUFPLEVBQUE7TUFDdkJDLElBQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxJQUFJLEtBQUssV0FBVyxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7TUFDMUVBLElBQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxJQUFJLEtBQUssV0FBVyxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7TUFDMUUsSUFBSSxPQUFPLFdBQVcsS0FBSyxXQUFXLEVBQUU7UUFDdEMsV0FBVyxHQUFHLENBQUMsRUFBRSxXQUFXLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO09BQ3RHO01BQ0QsSUFBSSxXQUFXLEVBQUU7UUFDZixTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLE9BQU87T0FDUjs7TUFFRCxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ1osSUFBSVksR0FBQyxDQUFDLHVCQUF1QixDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxFQUFBLE9BQU8sRUFBQTtRQUNsRCxXQUFXLEdBQUdBLEdBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0QixnQkFBZ0IsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDekQsYUFBYSxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUM1RCxZQUFZLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBQzFELGdCQUFnQixHQUFHLElBQUksQ0FBQztRQUN4QixpQkFBaUIsR0FBRyxJQUFJLENBQUM7UUFDekIsWUFBWSxHQUFHLElBQUksQ0FBQztRQUNwQixhQUFhLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLHFCQUFxQixHQUFHLElBQUksQ0FBQztRQUM3QixvQkFBb0IsR0FBRyxJQUFJLENBQUM7UUFDNUIsSUFBSSxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtVQUMzQixnQkFBZ0IsR0FBRyxZQUFZLENBQUMsVUFBVSxFQUFFLENBQUM7VUFDN0MsWUFBWSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7VUFDMUMsb0JBQW9CLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1NBQ2pFO1FBQ0QsSUFBSSxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtVQUM1QixpQkFBaUIsR0FBRyxhQUFhLENBQUMsVUFBVSxFQUFFLENBQUM7VUFDL0MsYUFBYSxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7VUFDNUMscUJBQXFCLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1NBQ25FO1FBQ0QsTUFBTSxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNqRCxJQUFJLE1BQU0sRUFBRTtVQUNWLGlCQUFpQixHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsZ0RBQWdELENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLE1BQU0sR0FBRyxPQUFPLENBQUM7U0FDdEg7UUFDRCxXQUFXLENBQUMsV0FBVyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEVBQUU7VUFDaEMsV0FBVyxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLFdBQVcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1VBQ3BGLFdBQVcsQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUM1QztPQUNGO01BQ0QsT0FBTyxHQUFHLElBQUksQ0FBQztNQUNmLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQzs7TUFFbkIsV0FBVyxHQUFHLEtBQUssR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDO01BQ3JDLFNBQVMsR0FBRyxXQUFXLENBQUM7O01BRXhCLElBQUksTUFBTSxFQUFFO1FBQ1YsSUFBSSxpQkFBaUIsS0FBSyxPQUFPLEVBQUUsRUFBQSxTQUFTLElBQUksaUJBQWlCLENBQUMsRUFBQTthQUM3RCxFQUFBLFNBQVMsSUFBSSxnQkFBZ0IsQ0FBQyxFQUFBO09BQ3BDOztNQUVEO1VBQ0ksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxJQUFJLFlBQVksQ0FBQyxNQUFNLEtBQUssQ0FBQzs7V0FFMUMsU0FBUyxHQUFHLENBQUMsSUFBSSxhQUFhLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztRQUMvQztRQUNBLElBQUksQ0FBQyxNQUFNLEVBQUU7VUFDWCxTQUFTLEdBQUcsS0FBSyxDQUFDO1VBQ2xCLE9BQU8sR0FBRyxLQUFLLENBQUM7VUFDaEIsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1VBQy9CLElBQUksYUFBYSxJQUFJLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzdDLGFBQWEsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7V0FDN0I7VUFDRCxJQUFJLFlBQVksSUFBSSxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMzQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1dBQzVCO1VBQ0QsT0FBTztTQUNSO1FBQ0QsU0FBUyxHQUFHLENBQUMsQ0FBQztPQUNmOztNQUVELElBQUksU0FBUyxHQUFHLENBQUMsRUFBRSxFQUFBLFNBQVMsR0FBRyxTQUFTLENBQUMsRUFBQTtXQUNwQyxJQUFJLFNBQVMsR0FBRyxDQUFDLEVBQUUsRUFBQSxTQUFTLEdBQUcsVUFBVSxDQUFDLEVBQUE7V0FDMUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFBLFNBQVMsR0FBRyxTQUFTLENBQUMsRUFBQTs7TUFFM0NiLElBQUksWUFBWSxDQUFDO01BQ2pCQSxJQUFJLFFBQVEsQ0FBQzs7TUFFYixDQUFDLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDO01BQzdCLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRTtRQUMvQixJQUFJLE1BQU0sRUFBRTtVQUNWLElBQUksaUJBQWlCLEtBQUssT0FBTyxJQUFJLFdBQVcsR0FBRyxDQUFDLEVBQUU7WUFDcEQsR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7V0FDakM7VUFDRCxJQUFJLGlCQUFpQixLQUFLLE1BQU0sSUFBSSxXQUFXLEdBQUcsQ0FBQyxFQUFFO1lBQ25ELEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1dBQ2pDO1NBQ0YsTUFBTTtVQUNMLElBQUksV0FBVyxHQUFHLENBQUMsSUFBSSxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMvQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7V0FDekM7VUFDRCxJQUFJLFdBQVcsR0FBRyxDQUFDLElBQUksWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDOUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1dBQ3hDO1NBQ0Y7UUFDRCxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDaEIsT0FBTztPQUNSO01BQ0QsYUFBYSxHQUFHLEtBQUssQ0FBQztNQUN0QixjQUFjLEdBQUcsS0FBSyxDQUFDO01BQ3ZCLElBQUksYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7O1FBRTVCQSxJQUFJLGVBQWUsR0FBRyxTQUFTLENBQUM7UUFDaEMsUUFBUSxHQUFHLGVBQWUsR0FBRyxpQkFBaUIsQ0FBQztRQUMvQyxJQUFJLGVBQWUsR0FBRyxDQUFDLGlCQUFpQixFQUFFO1VBQ3hDLGVBQWUsR0FBRyxDQUFDLGlCQUFpQixJQUFJLFdBQUMsQ0FBQyxlQUFlLEdBQUcsaUJBQWlCLEdBQUssR0FBRyxFQUFBLENBQUMsQ0FBQztVQUN2RixTQUFTLEdBQUcsZUFBZSxDQUFDO1VBQzVCLElBQUkscUJBQXFCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNwQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1dBQ3ZCO1NBQ0Y7UUFDRCxJQUFJLFNBQVMsS0FBSyxTQUFTLEVBQUU7VUFDM0IsUUFBUSxHQUFHLENBQUMsQ0FBQztVQUNiLGVBQWUsR0FBRyxDQUFDLENBQUM7U0FDckI7UUFDRCxhQUFhLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRTtVQUNuQ0MsSUFBTSxTQUFTLEdBQUdZLEdBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztVQUM5QixJQUFJLE9BQU8sUUFBUSxDQUFDLHNCQUFzQixLQUFLLFdBQVcsRUFBRTtZQUMxRCxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQztXQUMzRDtVQUNELFlBQVksR0FBRyxRQUFRLENBQUMsc0JBQXNCLENBQUM7VUFDL0MsSUFBSSxxQkFBcUIsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUMsSUFBSSxTQUFTLEtBQUssU0FBUyxFQUFFO1lBQzNHLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUUsQ0FBRyxjQUFjLEdBQUcsQ0FBQyxZQUFZLEdBQUcsQ0FBQyxRQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDbkUsSUFBSSxjQUFjLEVBQUU7Y0FDbEIsU0FBUyxDQUFDLFFBQVEsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO2FBQ2pELE1BQU07Y0FDTCxTQUFTLENBQUMsV0FBVyxDQUFDLDJCQUEyQixDQUFDLENBQUM7YUFDcEQ7V0FDRjtVQUNELFNBQVMsQ0FBQyxTQUFTLEVBQUMsY0FBYSxJQUFFLGVBQWUsSUFBSSxZQUFZLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLFlBQVEsRUFBRSxDQUFDO1NBQzlHLENBQUMsQ0FBQztPQUNKO01BQ0QsSUFBSSxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs7UUFFM0JiLElBQUllLGlCQUFlLEdBQUcsU0FBUyxDQUFDO1FBQ2hDLFFBQVEsR0FBR0EsaUJBQWUsR0FBRyxnQkFBZ0IsQ0FBQztRQUM5QyxJQUFJQSxpQkFBZSxHQUFHLGdCQUFnQixFQUFFO1VBQ3RDQSxpQkFBZSxHQUFHLGdCQUFnQixJQUFJLFdBQUNBLGlCQUFlLEdBQUcsZ0JBQWdCLEdBQUssR0FBRyxFQUFBLENBQUMsQ0FBQztVQUNuRixTQUFTLEdBQUdBLGlCQUFlLENBQUM7VUFDNUIsSUFBSSxvQkFBb0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ25DLGFBQWEsR0FBRyxJQUFJLENBQUM7V0FDdEI7U0FDRjtRQUNELElBQUksU0FBUyxLQUFLLFVBQVUsRUFBRTtVQUM1QkEsaUJBQWUsR0FBRyxDQUFDLENBQUM7VUFDcEIsUUFBUSxHQUFHLENBQUMsQ0FBQztTQUNkO1FBQ0QsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFDLEtBQUssRUFBRSxRQUFRLEVBQUU7VUFDbENkLElBQU0sU0FBUyxHQUFHWSxHQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7VUFDOUIsSUFBSSxPQUFPLFFBQVEsQ0FBQyxzQkFBc0IsS0FBSyxXQUFXLEVBQUU7WUFDMUQsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixHQUFHLGdCQUFnQixHQUFHLFFBQVEsQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQztXQUNyRztVQUNELFlBQVksR0FBRyxRQUFRLENBQUMsc0JBQXNCLENBQUM7VUFDL0MsSUFBSSxvQkFBb0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUMsSUFBSSxTQUFTLEtBQUssVUFBVSxFQUFFO1lBQzNHLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUUsQ0FBRyxhQUFhLEdBQUcsWUFBWSxHQUFHLENBQUMsUUFBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2pFLElBQUksYUFBYSxFQUFFO2NBQ2pCLFNBQVMsQ0FBQyxRQUFRLENBQUMsMkJBQTJCLENBQUMsQ0FBQzthQUNqRCxNQUFNO2NBQ0wsU0FBUyxDQUFDLFdBQVcsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO2FBQ3BEO1dBQ0Y7VUFDRCxJQUFJLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzNCLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUM7V0FDdkQ7VUFDRCxTQUFTLENBQUMsU0FBUyxFQUFDLGNBQWEsSUFBRUUsaUJBQWUsSUFBSSxZQUFZLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxZQUFRLEVBQUUsQ0FBQztTQUM3RyxDQUFDLENBQUM7T0FDSjtNQUNELFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO01BQzFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztNQUMvQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUMsY0FBYSxHQUFFLFNBQVMsWUFBUSxFQUFFLENBQUM7S0FDL0Q7SUFDRCxTQUFTLGNBQWMsR0FBRztNQUN4QixJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQzFCLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDbEIsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNoQixPQUFPO09BQ1I7O01BRUQsU0FBUyxHQUFHLEtBQUssQ0FBQztNQUNsQixPQUFPLEdBQUcsS0FBSyxDQUFDO01BQ2hCZCxJQUFNLFFBQVEsR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLEdBQUcsY0FBYyxDQUFDO01BQ3pEQSxJQUFNLFFBQVEsR0FBRyxTQUFTLEtBQUssU0FBUyxHQUFHLGFBQWEsR0FBRyxZQUFZLENBQUM7TUFDeEVBLElBQU0sWUFBWSxHQUFHLFNBQVMsS0FBSyxTQUFTLEdBQUcsaUJBQWlCLEdBQUcsZ0JBQWdCLENBQUM7TUFDcEZELElBQUksTUFBTSxDQUFDO01BQ1hBLElBQUksUUFBUSxDQUFDO01BQ2JBLElBQUksQ0FBQyxDQUFDOztNQUVOO1FBQ0U7VUFDRSxRQUFRLEdBQUcsR0FBRzs7O1lBR1osQ0FBQyxXQUFXLEdBQUcsQ0FBQyxFQUFFLElBQUksU0FBUyxLQUFLLFNBQVM7O2FBRTVDLFdBQVcsR0FBRyxFQUFFLElBQUksU0FBUyxLQUFLLFVBQVUsQ0FBQztXQUMvQzs7OztVQUlELFFBQVEsSUFBSSxHQUFHOztXQUVkLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsWUFBWSxHQUFHLENBQUMsQ0FBQztTQUN6QztRQUNEO1FBQ0EsTUFBTSxHQUFHLE1BQU0sQ0FBQztPQUNqQixNQUFNO1FBQ0wsTUFBTSxHQUFHLE9BQU8sQ0FBQztPQUNsQjtNQUNELElBQUksUUFBUSxHQUFHLEdBQUcsRUFBRTtRQUNsQixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUEsTUFBTSxHQUFHLE9BQU8sQ0FBQyxFQUFBO1FBQ2hELElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxZQUFZLEVBQUUsRUFBQSxNQUFNLEdBQUcsTUFBTSxDQUFDLEVBQUE7T0FDM0Q7O01BRUQsSUFBSSxNQUFNLEtBQUssTUFBTSxFQUFFO1FBQ3JCLFFBQVEsQ0FBQyxFQUFFLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdCLFdBQVcsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDckMsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekMsV0FBVyxDQUFDLFFBQVEsQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO1FBQy9EQyxJQUFNLFlBQVksR0FBRyxTQUFTLEtBQUssU0FBUyxHQUFHLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUM1RSxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUMsY0FBYSxHQUFFLFlBQVksWUFBUSxFQUFFLENBQUM7UUFDakUsUUFBUSxDQUFDLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQzdDLFFBQVEsR0FBRyxTQUFTLEtBQUssU0FBUyxHQUFHLGFBQWEsR0FBRyxZQUFZLENBQUM7UUFDbEUsSUFBSSxRQUFRLEVBQUU7VUFDWixLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN2Q1ksR0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBQyxjQUFhLEdBQUUsWUFBWSxZQUFRLEVBQUUsQ0FBQztXQUNoRTtTQUNGO1FBQ0QsSUFBSSxjQUFjLEVBQUU7VUFDbEIsYUFBYSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ3REO1FBQ0QsSUFBSSxhQUFhLEVBQUU7VUFDakIsWUFBWSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ3JEO09BQ0YsTUFBTTtRQUNMLFdBQVcsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUN0QyxHQUFHLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQyxRQUFRLENBQUMsRUFBRSxHQUFHLFNBQVMsQ0FBQztRQUN4QixXQUFXLENBQUMsUUFBUSxDQUFDLHdCQUF3QixDQUFDLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDOUUsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQy9CLFFBQVEsQ0FBQyxXQUFXLENBQUMseUJBQXlCLENBQUMsQ0FBQztPQUNqRDs7TUFFRGIsSUFBSSxZQUFZLENBQUM7TUFDakIsSUFBSSxZQUFZLElBQUksWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksWUFBWSxLQUFLLFFBQVEsRUFBRTtRQUN4RSxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRTtVQUNsQ0MsSUFBTSxTQUFTLEdBQUdZLEdBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztVQUM5QixZQUFZLEdBQUcsUUFBUSxDQUFDLHNCQUFzQixDQUFDO1VBQy9DLElBQUksT0FBTyxZQUFZLEtBQUssV0FBVyxFQUFFO1lBQ3ZDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsR0FBRyxnQkFBZ0IsR0FBRyxRQUFRLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUM7V0FDckc7VUFDRCxTQUFTLENBQUMsU0FBUyxFQUFDLGNBQWEsR0FBRSxZQUFZLFlBQVEsRUFBRSxDQUFDO1NBQzNELENBQUMsQ0FBQztPQUNKO01BQ0QsSUFBSSxhQUFhLElBQUksYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksYUFBYSxLQUFLLFFBQVEsRUFBRTtRQUMzRSxhQUFhLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRTtVQUNuQ1osSUFBTSxTQUFTLEdBQUdZLEdBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztVQUM5QixZQUFZLEdBQUcsUUFBUSxDQUFDLHNCQUFzQixDQUFDO1VBQy9DLElBQUksT0FBTyxZQUFZLEtBQUssV0FBVyxFQUFFO1lBQ3ZDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDO1dBQzNEO1VBQ0QsU0FBUyxDQUFDLFNBQVMsRUFBQyxjQUFhLElBQUUsQ0FBQyxZQUFZLENBQUEsWUFBUSxFQUFFLENBQUM7U0FDNUQsQ0FBQyxDQUFDO09BQ0o7TUFDRCxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsWUFBRztRQUNoQyxJQUFJLENBQUMsTUFBTSxJQUFJLE1BQU0sS0FBSyxNQUFNLE1BQU0sQ0FBQyxNQUFNLElBQUksTUFBTSxLQUFLLE9BQU8sQ0FBQyxFQUFFLEVBQUEsT0FBTyxFQUFBO1FBQzdFLFdBQVcsQ0FBQyxPQUFPLENBQUMsTUFBTSxLQUFLLE1BQU0sR0FBRyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQyxDQUFDO1FBQy9FLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLE1BQU0sR0FBRyxnQkFBZ0IsR0FBRyxnQkFBZ0IsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRixXQUFXLENBQUMsV0FBVyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFDbEQsSUFBSSxNQUFNLElBQUksTUFBTSxLQUFLLE9BQU8sRUFBRTtVQUNoQyxJQUFJLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzVCLGFBQWEsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7V0FDN0I7VUFDRCxJQUFJLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzNCLFlBQVksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7V0FDNUI7U0FDRjtPQUNGLENBQUMsQ0FBQztLQUNKOztJQUVEWixJQUFNLGNBQWMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLGVBQWUsR0FBRyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsR0FBRyxLQUFLLENBQUM7SUFDaEZBLElBQU0sZUFBZSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsZUFBZSxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQzs7SUFFaEYsR0FBRyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsVUFBQyxDQUFDLEVBQUU7TUFDdkIsSUFBSSxRQUFRLENBQUMsRUFBRSxFQUFFO1FBQ2ZBLElBQU0sU0FBUyxHQUFHWSxHQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlCLElBQUk7VUFDRkEsR0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1VBQy9CLFNBQVMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7VUFDOUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUM7VUFDOUIsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQztVQUMvQyxTQUFTLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQztVQUNuQyxTQUFTLENBQUMsT0FBTyxDQUFDLDJDQUEyQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUM7V0FDeEUsRUFBRTtVQUNILEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNqQztPQUNGO0tBQ0YsQ0FBQyxDQUFDO0lBQ0hBLEdBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ3hGQSxHQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRSxlQUFlLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDckZBLEdBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxlQUFlLENBQUMsQ0FBQztHQUNyRjtFQUNELEtBQUssRUFBRSxJQUFJO0VBQ1gsRUFBRSxFQUFFLFNBQVM7RUFDYixJQUFJLGVBQUEsR0FBVTs7OztJQUNaWixJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUM7SUFDakIsSUFBSyxFQUFFO0lBQUUsSUFBQSxJQUFJO0lBQUUsSUFBQSxRQUFRLFdBQW5CO0lBQ0osSUFBSSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxVQUFVLEVBQUU7TUFDakM7TUFBdUIsVUFBQSxJQUF0QixFQUFBLEVBQUksY0FBQSxRQUFVLGNBQUEsSUFBZixjQUE0QjtLQUM3QjtJQUNEQSxJQUFNLEdBQUcsR0FBR1ksR0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7SUFFeEIsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxFQUFBLE9BQU8sRUFBQTtJQUM3QixJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsRUFBQSxPQUFPLEVBQUE7SUFDekUsSUFBSSxDQUFDLElBQUksRUFBRTtNQUNULElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsRUFBQSxJQUFJLEdBQUcsT0FBTyxDQUFDLEVBQUE7V0FDOUQsRUFBQSxJQUFJLEdBQUcsTUFBTSxDQUFDLEVBQUE7S0FDcEI7SUFDRFosSUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUMsSUFBSSxFQUFDLG9CQUFtQixHQUFFLElBQUksRUFBRyxDQUFDO0lBQy9EQSxJQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUN2RCxJQUFJLGdCQUFnQixDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsRUFBQSxPQUFPLEVBQUE7SUFDMUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxXQUFXLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUMvRixHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUNyREEsSUFBTSxRQUFRLEdBQUcsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hEQSxJQUFNLG9CQUFvQixHQUFHLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzNEQSxJQUFNLFNBQVMsR0FBRyxJQUFJLEtBQUssT0FBTyxHQUFHLENBQUMsb0JBQW9CLEdBQUcsb0JBQW9CLENBQUM7SUFDbEYsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtNQUN2QixRQUFRLENBQUMsSUFBSSxDQUFDLFVBQUMsV0FBVyxFQUFFLFFBQVEsRUFBRTtRQUNwQ0EsSUFBTSxTQUFTLEdBQUdZLEdBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM5QixJQUFJLElBQUksS0FBSyxPQUFPLEVBQUU7VUFDcEIsU0FBUyxDQUFDLFNBQVMsRUFBQyxjQUFhLElBQUUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFBLFlBQVEsRUFBRSxDQUFDO1NBQ25FLE1BQU07VUFDTCxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsTUFBTSxHQUFHLFdBQVcsQ0FBQyxDQUFDLFNBQVMsRUFBQyxjQUFhLElBQUUsb0JBQW9CLEdBQUcsUUFBUSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFBLFlBQVEsRUFBRSxDQUFDO1NBQzlKO09BQ0YsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxHQUFHLENBQUMsUUFBUSxDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFDdkMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLFlBQUc7TUFDaEMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO01BQy9CLEdBQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDbkMsSUFBSSxRQUFRLEVBQUUsRUFBQSxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUE7S0FDckMsQ0FBQyxDQUFDO0lBQ0gsS0FBSyxDQUFDLFNBQVMsQ0FBQyxZQUFHO01BQ2pCLFFBQVEsQ0FBQyxTQUFTLEVBQUMsY0FBYSxHQUFFLFNBQVMsWUFBUSxFQUFFLENBQUM7TUFDdEQsZ0JBQWdCLENBQUMsU0FBUyxFQUFDLGNBQWEsR0FBRSxTQUFTLFlBQVEsRUFBRSxDQUFDO0tBQy9ELENBQUMsQ0FBQztJQUNILFFBQVEsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQ3RCO0VBQ0QsS0FBSyxnQkFBQSxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUU7SUFDbEJaLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQztJQUNqQkEsSUFBTSxHQUFHLEdBQUdZLEdBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEIsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxFQUFBLE9BQU8sRUFBQTtJQUM3QixJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLEVBQUEsT0FBTyxFQUFBO0lBQzdDWixJQUFNLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLENBQUMsUUFBUSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsT0FBTyxHQUFHLE1BQU0sQ0FBQztJQUN4R0EsSUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLENBQUMsV0FBVyxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDckdBLElBQU0sUUFBUSxHQUFHLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoREEsSUFBTSxvQkFBb0IsR0FBRyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUMzRCxRQUFRLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUN2QixHQUFHLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDOUIsR0FBRyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDOztJQUV0RUQsSUFBSSxZQUFZLENBQUM7SUFDakIsU0FBUyxlQUFlLEdBQUc7TUFDekIsUUFBUSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7TUFDdEIsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsRUFBQSxPQUFPLEVBQUE7TUFDNUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO01BQzFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7TUFDdkIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO01BQy9CLEdBQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDbkMsSUFBSSxRQUFRLEVBQUUsRUFBQSxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUE7TUFDcEMsSUFBSSxZQUFZLEVBQUUsRUFBQSxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBQTtLQUM5QztJQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzNFLFlBQVksR0FBRyxVQUFVLENBQUMsZUFBZSxFQUFFLEdBQUcsQ0FBQyxDQUFDOztJQUVoRCxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRTtNQUM5QkMsSUFBTSxTQUFTLEdBQUdZLEdBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztNQUM5QixJQUFJLElBQUksS0FBSyxPQUFPLEVBQUU7UUFDcEIsU0FBUyxDQUFDLFNBQVMsRUFBQyxjQUFhLElBQUUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFBLFlBQVEsRUFBRSxDQUFDO09BQ25FLE1BQU07UUFDTCxTQUFTLENBQUMsU0FBUyxFQUFDLGNBQWEsSUFBRSxvQkFBb0IsR0FBRyxRQUFRLENBQUMsV0FBVyxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUEsWUFBUSxFQUFFLENBQUM7T0FDaEg7TUFDRCxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLDJCQUEyQixDQUFDLENBQUM7S0FDekUsQ0FBQyxDQUFDO0lBQ0gsSUFBSSxRQUFRLENBQUMsRUFBRSxJQUFJLFFBQVEsQ0FBQyxFQUFFLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUEsUUFBUSxDQUFDLEVBQUUsR0FBRyxTQUFTLENBQUMsRUFBQTtHQUNwRTtFQUNELE1BQU0sbUJBQUEsQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFO0lBQ25CWixJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUM7SUFDakJBLElBQU0sR0FBRyxHQUFHWSxHQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hCLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsRUFBQSxPQUFPLEVBQUE7SUFDN0IsUUFBUSxDQUFDLEVBQUUsR0FBRyxTQUFTLENBQUM7SUFDeEIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQy9CLEdBQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sR0FBRSxDQUFHLEdBQUcsQ0FBQyxXQUFXLEVBQUUsUUFBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzlDLEdBQUcsQ0FBQyxhQUFhLENBQUMsWUFBRztNQUNuQixHQUFHLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7TUFDaEMsR0FBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztNQUNwQyxJQUFJLFFBQVEsRUFBRSxFQUFBLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQTtNQUNwQyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUMzQ1osSUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFDbEVBLElBQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQztRQUMvQyxJQUFJLFdBQVcsSUFBSSxPQUFPLFlBQVksS0FBSyxXQUFXLEVBQUUsRUFBQSxXQUFXLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUE7T0FDOUYsTUFBTSxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRTtRQUM3QyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLHlCQUF5QixFQUFFO1VBQ2pELFVBQVUsQ0FBQyxZQUFHO1lBQ1osR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO1dBQ2QsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1NBQy9DLE1BQU07VUFDTCxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDZDtPQUNGLE1BQU07UUFDTCxHQUFHLENBQUMsV0FBVyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7T0FDN0Q7S0FDRixDQUFDLENBQUM7SUFDSCxLQUFLLENBQUMsU0FBUyxDQUFDLFlBQUc7TUFDakIsR0FBRztTQUNBLFFBQVEsQ0FBQywwQ0FBMEMsQ0FBQztTQUNwRCxHQUFHLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUM7U0FDdEIsSUFBSSxDQUFDLG1CQUFtQixDQUFDO1NBQ3pCLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0tBQ3hDLENBQUMsQ0FBQztHQUNKO0NBQ0YsQ0FBQztBQUNGLEFBdXVMQSxTQUFTLFNBQVMsR0FBRztFQUNuQixPQUFPO0lBQ0wsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssS0FBSyxJQUFJLE1BQU0sU0FBUyxVQUFVLEdBQUc7TUFDckYsT0FBTyxDQUFDLEVBQUUsQ0FBQyxjQUFjLElBQUksTUFBTSxNQUFNLE1BQU0sQ0FBQyxhQUFhLElBQUksUUFBUSxZQUFZLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0tBQzdHLEVBQUUsQ0FBQzs7SUFFSixZQUFZLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsZUFBZSxLQUFLLElBQUksTUFBTSxTQUFTLGlCQUFpQixHQUFHO01BQzdHQSxJQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQztNQUNoRCxRQUFRLG1CQUFtQixJQUFJLEdBQUcsSUFBSSxnQkFBZ0IsSUFBSSxHQUFHLElBQUksY0FBYyxJQUFJLEdBQUcsSUFBSSxlQUFlLElBQUksR0FBRyxJQUFJLGFBQWEsSUFBSSxHQUFHLEVBQUU7S0FDM0ksRUFBRSxDQUFDOztJQUVKLE9BQU8sR0FBRyxTQUFTLFlBQVksR0FBRztNQUNoQ0EsSUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUM7TUFDaERBLElBQU0sTUFBTSxHQUFHLENBQUMsd0tBQXdLLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO01BQ3JNLEtBQUtELElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3pDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsRUFBRSxFQUFBLE9BQU8sSUFBSSxDQUFDLEVBQUE7T0FDbkM7TUFDRCxPQUFPLEtBQUssQ0FBQztLQUNkLEVBQUUsQ0FBQzs7SUFFSixRQUFRLEdBQUcsU0FBUyxhQUFhLEdBQUc7TUFDbEMsUUFBUSxrQkFBa0IsSUFBSSxNQUFNLElBQUksd0JBQXdCLElBQUksTUFBTSxFQUFFO0tBQzdFLEVBQUUsQ0FBQzs7SUFFSixlQUFlLEdBQUcsU0FBUyxvQkFBb0IsR0FBRztNQUNoREEsSUFBSSxlQUFlLEdBQUcsS0FBSyxDQUFDO01BQzVCLElBQUk7UUFDRkMsSUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsU0FBUyxFQUFFO1VBQ2hELEdBQUcsY0FBQSxHQUFHO1lBQ0osZUFBZSxHQUFHLElBQUksQ0FBQztXQUN4QjtTQUNGLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7T0FDNUQsQ0FBQyxPQUFPLENBQUMsRUFBRTs7T0FFWDtNQUNELE9BQU8sZUFBZSxDQUFDO0tBQ3hCLEVBQUUsQ0FBQzs7SUFFSixRQUFRLEdBQUcsU0FBUyxhQUFhLEdBQUc7TUFDbEMsT0FBTyxnQkFBZ0IsSUFBSSxNQUFNLENBQUM7S0FDbkMsRUFBRSxDQUFDO0dBQ0wsQ0FBQztDQUNIO0FBQ0QsSUFBSSxTQUFTLEdBQUcsU0FBUyxFQUFFLENBQUM7O0FBRTVCLElBQU0sV0FBVyxHQUFDLG9CQUNMLENBQUMsTUFBVyxFQUFFO2lDQUFQLEdBQUcsRUFBRTs7RUFDdkIsSUFBUSxJQUFJLEdBQUcsSUFBSSxDQUFDO0VBQ3BCLElBQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDOzs7RUFHdkIsSUFBTSxDQUFDLGVBQWUsR0FBRyxFQUFFLENBQUM7O0VBRTVCLElBQU0sSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRTtJQUNuQyxNQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsU0FBUyxFQUFFO01BQ2hELElBQU0sQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7S0FDL0MsQ0FBQyxDQUFDO0dBQ0o7Q0FDRixDQUFBO0FBQ0gsc0JBQUUsRUFBRSxnQkFBQyxNQUFNLEVBQUUsT0FBTyxFQUFFO0VBQ3BCLElBQVEsSUFBSSxHQUFHLElBQUksQ0FBQztFQUNwQixJQUFNLE9BQU8sT0FBTyxLQUFLLFVBQVUsRUFBRSxFQUFBLE9BQU8sSUFBSSxDQUFDLEVBQUE7RUFDakQsTUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxLQUFLLEVBQUU7SUFDbEMsSUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBQSxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFBO0lBQ3JFLElBQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0dBQzNDLENBQUMsQ0FBQztFQUNMLE9BQVMsSUFBSSxDQUFDO0NBQ2IsQ0FBQTtBQUNILHNCQUFFLElBQUksa0JBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRTtFQUN0QixJQUFRLElBQUksR0FBRyxJQUFJLENBQUM7RUFDcEIsSUFBTSxPQUFPLE9BQU8sS0FBSyxVQUFVLEVBQUUsRUFBQSxPQUFPLElBQUksQ0FBQyxFQUFBO0VBQ2pELFNBQVcsV0FBVyxHQUFVOzs7O0lBQzlCLE9BQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVCLElBQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0dBQy9CO0VBQ0gsT0FBUyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQztDQUNyQyxDQUFBO0FBQ0gsc0JBQUUsR0FBRyxpQkFBQyxNQUFNLEVBQUUsT0FBTyxFQUFFO0VBQ3JCLElBQVEsSUFBSSxHQUFHLElBQUksQ0FBQztFQUNwQixNQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLEtBQUssRUFBRTtJQUNsQyxJQUFNLE9BQU8sT0FBTyxLQUFLLFdBQVcsRUFBRTtNQUNwQyxJQUFNLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUNsQyxNQUFNO01BQ1AsSUFBTSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxZQUFZLEVBQUUsS0FBSyxFQUFFO1FBQzFELElBQU0sWUFBWSxLQUFLLE9BQU8sRUFBRTtVQUM5QixJQUFNLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDOUM7T0FDRixDQUFDLENBQUM7S0FDSjtHQUNGLENBQUMsQ0FBQztFQUNMLE9BQVMsSUFBSSxDQUFDO0NBQ2IsQ0FBQTtBQUNILHNCQUFFLElBQUksb0JBQVU7Ozs7RUFDZCxJQUFRLElBQUksR0FBRyxJQUFJLENBQUM7RUFDcEIsSUFBTSxNQUFNLENBQUM7RUFDYixJQUFNLElBQUksQ0FBQztFQUNYLElBQU0sT0FBTyxDQUFDO0VBQ2QsSUFBTSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUMzRCxNQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25CLElBQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEMsT0FBUyxHQUFHLElBQUksQ0FBQztHQUNoQixNQUFNO0lBQ1AsTUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDMUIsSUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDdEIsT0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDO0dBQ25DO0VBQ0gsSUFBUSxXQUFXLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUN6RSxXQUFhLENBQUMsT0FBTyxDQUFDLFVBQUMsS0FBSyxFQUFFO0lBQzVCLElBQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsRUFBRTtNQUNqQyxJQUFNLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLFlBQVksRUFBRTtRQUNuRCxZQUFjLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztPQUNuQyxDQUFDLENBQUM7S0FDSjtHQUNGLENBQUMsQ0FBQztFQUNMLE9BQVMsSUFBSSxDQUFDO0NBQ2IsQ0FBQTtBQUNILHNCQUFFLGdCQUFnQiw4QkFBQyxjQUFjLEVBQUU7RUFDakMsSUFBUSxRQUFRLEdBQUcsSUFBSSxDQUFDO0VBQ3hCLElBQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLEVBQUEsT0FBTyxFQUFBO0VBQ2hDLE1BQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLFVBQVUsRUFBRTtJQUNuRCxJQUFRLE1BQU0sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDOztJQUU5QyxJQUFNLE1BQU0sQ0FBQyxNQUFNLEVBQUU7TUFDbkIsS0FBTyxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQzdDO0dBQ0YsQ0FBQyxDQUFDO0NBQ0osQ0FBQTtBQUNILHNCQUFFLFVBQVUsd0JBQUMsYUFBa0IsRUFBRTtpREFBUCxHQUFHLEVBQUU7O0VBQzdCLElBQVEsUUFBUSxHQUFHLElBQUksQ0FBQztFQUN4QixJQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxFQUFBLE9BQU8sRUFBQTtFQUNoQyxNQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxVQUFVLEVBQUU7SUFDbkQsSUFBUSxNQUFNLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM5QyxJQUFRLFlBQVksR0FBRyxhQUFhLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDOztJQUV2RCxJQUFNLE1BQU0sQ0FBQyxRQUFRLEVBQUU7TUFDckIsTUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsY0FBYyxFQUFFO1FBQ3RELElBQVEsVUFBVSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDckQsSUFBTSxPQUFPLFVBQVUsS0FBSyxVQUFVLEVBQUU7VUFDdEMsUUFBVSxDQUFDLGNBQWMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDdEQsTUFBTTtVQUNQLFFBQVUsQ0FBQyxjQUFjLENBQUMsR0FBRyxVQUFVLENBQUM7U0FDdkM7T0FDRixDQUFDLENBQUM7S0FDSjs7SUFFSCxJQUFNLE1BQU0sQ0FBQyxFQUFFLElBQUksUUFBUSxDQUFDLEVBQUUsRUFBRTtNQUM5QixNQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxlQUFlLEVBQUU7UUFDakQsUUFBVSxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO09BQzFELENBQUMsQ0FBQztLQUNKOzs7SUFHSCxJQUFNLE1BQU0sQ0FBQyxNQUFNLEVBQUU7TUFDbkIsTUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7S0FDNUM7R0FDRixDQUFDLENBQUM7Q0FDSixDQUFBO0FBQ0gsWUFBRSxhQUFvQiwyQkFBQyxNQUFNLEVBQWE7Ozs7RUFDeEMsSUFBUSxLQUFLLEdBQUcsSUFBSSxDQUFDO0VBQ3JCLElBQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxFQUFBLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxFQUFBO0VBQzdELElBQVEsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLE1BQUssQ0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxPQUFFLElBQUUsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFBLEVBQUcsQ0FBQztFQUNoRyxLQUFPLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUM7O0VBRXpDLElBQU0sTUFBTSxDQUFDLEtBQUssRUFBRTtJQUNsQixNQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxHQUFHLEVBQUU7TUFDeEMsS0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQzFDLENBQUMsQ0FBQztHQUNKOztFQUVILElBQU0sTUFBTSxDQUFDLE1BQU0sRUFBRTtJQUNuQixNQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxHQUFHLEVBQUU7TUFDekMsS0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDakMsQ0FBQyxDQUFDO0dBQ0o7O0VBRUgsSUFBTSxNQUFNLENBQUMsT0FBTyxFQUFFO0lBQ3BCLE1BQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztHQUNyQztFQUNILE9BQVMsS0FBSyxDQUFDO0NBQ2QsQ0FBQTtBQUNILFlBQUUsR0FBVSxpQkFBQyxNQUFNLEVBQWE7Ozs7RUFDOUIsSUFBUSxLQUFLLEdBQUcsSUFBSSxDQUFDO0VBQ3JCLElBQU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtJQUMzQixNQUFRLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQyxFQUFDLFNBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsR0FBQSxDQUFDLENBQUM7R0FDN0M7RUFDSCxPQUFTLEtBQUssQ0FBQyxhQUFhLE1BQUEsQ0FBQyxTQUFBLE1BQU0sV0FBRSxNQUFTLEVBQUEsQ0FBQyxDQUFDO0NBQy9DLENBQUE7O0FBR0gsSUFBSSxlQUFlLEdBQUc7RUFDcEIsU0FBUyxFQUFFLFNBQVM7RUFDcEIsT0FBTyxFQUFFLFNBQVM7RUFDbEIsbUJBQW1CLEVBQUUsU0FBUztFQUM5QixjQUFjLEVBQUUsU0FBUztFQUN6QixXQUFXLEVBQUUsU0FBUztFQUN0QixnQkFBZ0IsRUFBRSxTQUFTO0VBQzNCLGNBQWMsRUFBRSxTQUFTO0VBQ3pCLGtCQUFrQixFQUFFLFNBQVM7O0VBRTdCLFlBQVksRUFBRSx3Q0FBd0M7O0VBRXRELGFBQWEsRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFO0VBQzFCLFlBQVksRUFBRSxTQUFTOztFQUV2QixVQUFVLEVBQUUsRUFBRTtFQUNkLG1CQUFtQixFQUFFLFNBQVM7RUFDOUIsWUFBWSxFQUFFLFNBQVM7RUFDdkIsV0FBVyxFQUFFLFNBQVM7Q0FDdkIsQ0FBQzs7QUFFRixJQUFJLFVBQVUsR0FBRyxZQUFZO0VBQzNCQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7RUFDcEJELElBQUksS0FBSyxDQUFDO0VBQ1ZBLElBQUksTUFBTSxDQUFDO0VBQ1hDLElBQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUM7RUFDdkIsSUFBSSxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxLQUFLLFdBQVcsRUFBRTtJQUM5QyxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7R0FDN0IsTUFBTTtJQUNMLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO0dBQzVCO0VBQ0QsSUFBSSxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxLQUFLLFdBQVcsRUFBRTtJQUMvQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7R0FDL0IsTUFBTTtJQUNMLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO0dBQzlCO0VBQ0QsSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLFlBQVksRUFBRSxNQUFNLE1BQU0sS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUU7SUFDbkYsT0FBTztHQUNSOzs7RUFHRCxLQUFLLEdBQUcsS0FBSyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0VBQy9GLE1BQU0sR0FBRyxNQUFNLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQzs7RUFFakcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7SUFDbkIsT0FBQSxLQUFLO0lBQ0wsUUFBQSxNQUFNO0lBQ04sSUFBSSxFQUFFLE1BQU0sQ0FBQyxZQUFZLEVBQUUsR0FBRyxLQUFLLEdBQUcsTUFBTTtHQUM3QyxDQUFDLENBQUM7Q0FDSixDQUFDOztBQUVGLElBQUksWUFBWSxHQUFHLFlBQVk7RUFDN0JBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztFQUNwQkEsSUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQzs7RUFFN0IsSUFBUSxVQUFVO0VBQVEsSUFBQSxVQUFVO0VBQUUsSUFBQSxHQUFHO0VBQUUsSUFBQSxRQUFRLG1CQUE3QztFQUNOQSxJQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsUUFBUSxFQUFDLEdBQUUsSUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQSxFQUFHLENBQUM7RUFDbkVELElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQztFQUNsQkMsSUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDO0VBQ3RCQSxJQUFNLGVBQWUsR0FBRyxFQUFFLENBQUM7O0VBRTNCRCxJQUFJLFlBQVksR0FBRyxNQUFNLENBQUMsa0JBQWtCLENBQUM7RUFDN0MsSUFBSSxPQUFPLFlBQVksS0FBSyxVQUFVLEVBQUU7SUFDdEMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7R0FDdkQ7O0VBRURBLElBQUksV0FBVyxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQztFQUMzQyxJQUFJLE9BQU8sV0FBVyxLQUFLLFVBQVUsRUFBRTtJQUNyQyxXQUFXLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUNyRDs7RUFFREMsSUFBTSxvQkFBb0IsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztFQUNsREEsSUFBTSxzQkFBc0IsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztFQUN0REEsSUFBTSx3QkFBd0IsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQzs7RUFFeERELElBQUksWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUM7RUFDdkNBLElBQUksYUFBYSxHQUFHLENBQUMsWUFBWSxDQUFDO0VBQ2xDQSxJQUFJLGFBQWEsR0FBRyxDQUFDLENBQUM7RUFDdEJBLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztFQUNkLElBQUksT0FBTyxVQUFVLEtBQUssV0FBVyxFQUFFO0lBQ3JDLE9BQU87R0FDUjtFQUNELElBQUksT0FBTyxZQUFZLEtBQUssUUFBUSxJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO0lBQ3RFLFlBQVksR0FBRyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUM7R0FDL0U7O0VBRUQsTUFBTSxDQUFDLFdBQVcsR0FBRyxDQUFDLFlBQVksQ0FBQzs7O0VBR25DLElBQUksR0FBRyxFQUFFLEVBQUEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBQTtPQUNsRCxFQUFBLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUE7O0VBRXZEQSxJQUFJLHNCQUFzQixDQUFDO0VBQzNCLElBQUksTUFBTSxDQUFDLGVBQWUsR0FBRyxDQUFDLEVBQUU7SUFDOUIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUU7TUFDeEcsc0JBQXNCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztLQUN4QyxNQUFNO01BQ0wsc0JBQXNCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDO0tBQ3JHO0lBQ0QsSUFBSSxNQUFNLENBQUMsYUFBYSxLQUFLLE1BQU0sSUFBSSxNQUFNLENBQUMsbUJBQW1CLEtBQUssS0FBSyxFQUFFO01BQzNFLHNCQUFzQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsc0JBQXNCLEVBQUUsTUFBTSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7S0FDMUc7R0FDRjs7O0VBR0RBLElBQUksU0FBUyxDQUFDO0VBQ2RDLElBQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUM7RUFDL0NBLElBQU0sWUFBWSxHQUFHLHNCQUFzQixHQUFHLGVBQWUsQ0FBQztFQUM5REEsSUFBTSxjQUFjLEdBQUcsWUFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsR0FBRyxZQUFZLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0VBQ2hHLEtBQUtELElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO0lBQ3pDLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDZEMsSUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQixJQUFJLE1BQU0sQ0FBQyxlQUFlLEdBQUcsQ0FBQyxFQUFFOztNQUU5QkQsSUFBSSxrQkFBa0IsV0FBQSxDQUFDO01BQ3ZCQSxJQUFJLE1BQU0sV0FBQSxDQUFDO01BQ1hBLElBQUksR0FBRyxXQUFBLENBQUM7TUFDUixJQUFJLE1BQU0sQ0FBQyxtQkFBbUIsS0FBSyxRQUFRLEVBQUU7UUFDM0MsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLGVBQWUsQ0FBQyxDQUFDO1FBQ3pDLEdBQUcsR0FBRyxDQUFDLElBQUksTUFBTSxHQUFHLGVBQWUsQ0FBQyxDQUFDO1FBQ3JDLElBQUksTUFBTSxHQUFHLGNBQWMsS0FBSyxNQUFNLEtBQUssY0FBYyxJQUFJLEdBQUcsS0FBSyxlQUFlLEdBQUcsQ0FBQyxDQUFDLEVBQUU7VUFDekYsR0FBRyxJQUFJLENBQUMsQ0FBQztVQUNULElBQUksR0FBRyxJQUFJLGVBQWUsRUFBRTtZQUMxQixHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQ1IsTUFBTSxJQUFJLENBQUMsQ0FBQztXQUNiO1NBQ0Y7UUFDRCxrQkFBa0IsR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLEdBQUcsc0JBQXNCLElBQUksZUFBZSxDQUFDLENBQUM7UUFDakYsS0FBSztXQUNGLEdBQUcsQ0FBQztZQUNILDJCQUEyQixFQUFFLGtCQUFrQjtZQUMvQyx3QkFBd0IsRUFBRSxrQkFBa0I7WUFDNUMsZ0JBQWdCLEVBQUUsa0JBQWtCO1lBQ3BDLGVBQWUsRUFBRSxrQkFBa0I7WUFDbkMsS0FBSyxFQUFFLGtCQUFrQjtXQUMxQixDQUFDLENBQUM7T0FDTixNQUFNO1FBQ0wsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLFlBQVksQ0FBQyxDQUFDO1FBQ25DLE1BQU0sR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLFlBQVksQ0FBQyxDQUFDO09BQ25DO01BQ0QsS0FBSztTQUNGLEdBQUc7V0FDRixTQUFRLElBQUUsTUFBTSxDQUFDLFlBQVksRUFBRSxHQUFHLEtBQUssR0FBRyxNQUFNLENBQUE7VUFDaEQsQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxZQUFZLE9BQU0sQ0FBRyxNQUFNLENBQUMsWUFBWSxRQUFHLEVBQUU7U0FDbkU7U0FDQSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsTUFBTSxDQUFDO1NBQ2xDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLENBQUMsQ0FBQztLQUNqQztJQUNELElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxNQUFNLEVBQUUsRUFBQSxTQUFTLEVBQUE7SUFDOUMsSUFBSSxNQUFNLENBQUMsYUFBYSxLQUFLLE1BQU0sRUFBRTtNQUNuQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztNQUNyRixJQUFJLE1BQU0sQ0FBQyxZQUFZLEVBQUUsRUFBQSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFBO0tBQzVELE1BQU07TUFDTCxTQUFTLEdBQUcsQ0FBQyxVQUFVLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxHQUFHLENBQUMsSUFBSSxZQUFZLENBQUMsSUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDO01BQzlGLElBQUksTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFBLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUE7O01BRTNELElBQUksTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFFO1FBQ3pCLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLFNBQVksT0FBRyxDQUFFO09BQzFDLE1BQU07UUFDTCxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxTQUFZLE9BQUcsQ0FBRTtPQUMzQztLQUNGO0lBQ0QsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsR0FBRyxTQUFTLENBQUM7SUFDdEMsZUFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzs7O0lBR2hDLElBQUksTUFBTSxDQUFDLGNBQWMsRUFBRTtNQUN6QixhQUFhLEdBQUcsYUFBYSxJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUMsSUFBSSxhQUFhLEdBQUcsQ0FBQyxDQUFDLEdBQUcsWUFBWSxDQUFDO01BQ3JGLElBQUksYUFBYSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUEsYUFBYSxHQUFHLGFBQWEsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDLEdBQUcsWUFBWSxDQUFDLEVBQUE7TUFDcEcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUEsYUFBYSxHQUFHLGFBQWEsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDLEdBQUcsWUFBWSxDQUFDLEVBQUE7TUFDN0UsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBQSxhQUFhLEdBQUcsQ0FBQyxDQUFDLEVBQUE7TUFDMUQsSUFBSSxDQUFDLEtBQUssSUFBSSxNQUFNLENBQUMsY0FBYyxLQUFLLENBQUMsRUFBRSxFQUFBLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBQTtNQUN4RSxVQUFVLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQ2hDLE1BQU07TUFDTCxJQUFJLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxjQUFjLEtBQUssQ0FBQyxFQUFFLEVBQUEsUUFBUSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFBO01BQ3hFLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7TUFDL0IsYUFBYSxHQUFHLGFBQWEsR0FBRyxTQUFTLEdBQUcsWUFBWSxDQUFDO0tBQzFEOztJQUVELE1BQU0sQ0FBQyxXQUFXLElBQUksU0FBUyxHQUFHLFlBQVksQ0FBQzs7SUFFL0MsYUFBYSxHQUFHLFNBQVMsQ0FBQzs7SUFFMUIsS0FBSyxJQUFJLENBQUMsQ0FBQztHQUNaO0VBQ0QsTUFBTSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsV0FBVyxDQUFDO0VBQzVFQSxJQUFJLGFBQWEsQ0FBQzs7RUFFbEI7SUFDRSxHQUFHLElBQUksUUFBUSxLQUFLLE1BQU0sQ0FBQyxNQUFNLEtBQUssT0FBTyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssV0FBVyxDQUFDLEVBQUU7SUFDakYsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRSxDQUFHLE1BQU0sQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFlBQVksUUFBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQzVFO0VBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxjQUFjLEVBQUU7SUFDcEQsSUFBSSxNQUFNLENBQUMsWUFBWSxFQUFFLEVBQUUsRUFBQSxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFFLENBQUcsTUFBTSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsWUFBWSxRQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQTtTQUNqRyxFQUFBLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxNQUFNLEdBQUUsQ0FBRyxNQUFNLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxZQUFZLFFBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFBO0dBQ2xGOztFQUVELElBQUksTUFBTSxDQUFDLGVBQWUsR0FBRyxDQUFDLEVBQUU7SUFDOUIsTUFBTSxDQUFDLFdBQVcsR0FBRyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsWUFBWSxJQUFJLHNCQUFzQixDQUFDO0lBQ2hGLE1BQU0sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDO0lBQ2xHLElBQUksTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFFLEVBQUEsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRSxDQUFHLE1BQU0sQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFlBQVksUUFBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUE7U0FDakcsRUFBQSxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxHQUFFLENBQUcsTUFBTSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsWUFBWSxRQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQTtJQUNqRixJQUFJLE1BQU0sQ0FBQyxjQUFjLEVBQUU7TUFDekIsYUFBYSxHQUFHLEVBQUUsQ0FBQztNQUNuQixLQUFLQSxJQUFJTyxHQUFDLEdBQUcsQ0FBQyxFQUFFQSxHQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRUEsR0FBQyxJQUFJLENBQUMsRUFBRTtRQUMzQyxJQUFJLFFBQVEsQ0FBQ0EsR0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQSxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQ0EsR0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFBO09BQ3JGO01BQ0QsUUFBUSxHQUFHLGFBQWEsQ0FBQztLQUMxQjtHQUNGOzs7RUFHRCxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRTtJQUMxQixhQUFhLEdBQUcsRUFBRSxDQUFDO0lBQ25CLEtBQUtQLElBQUlPLEdBQUMsR0FBRyxDQUFDLEVBQUVBLEdBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFQSxHQUFDLElBQUksQ0FBQyxFQUFFO01BQzNDLElBQUksUUFBUSxDQUFDQSxHQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsV0FBVyxHQUFHLFVBQVUsRUFBRTtRQUNsRCxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQ0EsR0FBQyxDQUFDLENBQUMsQ0FBQztPQUNqQztLQUNGO0lBQ0QsUUFBUSxHQUFHLGFBQWEsQ0FBQztJQUN6QixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFO01BQy9GLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUMsQ0FBQztLQUNoRDtHQUNGO0VBQ0QsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxFQUFBLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUE7O0VBRTFDLElBQUksTUFBTSxDQUFDLFlBQVksS0FBSyxDQUFDLEVBQUU7SUFDN0IsSUFBSSxNQUFNLENBQUMsWUFBWSxFQUFFLEVBQUU7TUFDekIsSUFBSSxHQUFHLEVBQUUsRUFBQSxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsVUFBVSxHQUFFLFlBQWUsT0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUE7V0FDcEQsRUFBQSxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsV0FBVyxHQUFFLFlBQWUsT0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUE7S0FDdkQsTUFBTSxFQUFBLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxZQUFZLEdBQUUsWUFBZSxPQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQTtHQUMxRDs7RUFFRCxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtJQUNuQixRQUFBLE1BQU07SUFDTixVQUFBLFFBQVE7SUFDUixZQUFBLFVBQVU7SUFDVixpQkFBQSxlQUFlO0dBQ2hCLENBQUMsQ0FBQzs7RUFFSCxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssb0JBQW9CLEVBQUU7SUFDMUMsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0dBQ25DO0VBQ0QsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLHNCQUFzQixFQUFFO0lBQzlDLE1BQU0sQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQztHQUNyQztFQUNELElBQUksVUFBVSxDQUFDLE1BQU0sS0FBSyx3QkFBd0IsRUFBRTtJQUNsRCxNQUFNLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7R0FDdkM7O0VBRUQsSUFBSSxNQUFNLENBQUMsbUJBQW1CLElBQUksTUFBTSxDQUFDLHFCQUFxQixFQUFFO0lBQzlELE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0dBQzdCO0NBQ0YsQ0FBQzs7QUFFRixJQUFJLGdCQUFnQixHQUFHLFlBQVk7RUFDakNOLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztFQUNwQkEsSUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDO0VBQ3hCRCxJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUM7RUFDbEJBLElBQUksQ0FBQyxDQUFDOzs7RUFHTixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxLQUFLLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsR0FBRyxDQUFDLEVBQUU7SUFDN0UsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtNQUM5REMsSUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7TUFDckMsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBQSxNQUFNLEVBQUE7TUFDeEMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQy9DO0dBQ0YsTUFBTTtJQUNMLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDNUQ7OztFQUdELEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO0lBQzNDLElBQUksT0FBTyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssV0FBVyxFQUFFO01BQzFDQSxJQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO01BQzVDLFNBQVMsR0FBRyxNQUFNLEdBQUcsU0FBUyxHQUFHLE1BQU0sR0FBRyxTQUFTLENBQUM7S0FDckQ7R0FDRjs7O0VBR0QsSUFBSSxTQUFTLEVBQUUsRUFBQSxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUUsU0FBWSxPQUFHLEVBQUUsQ0FBQyxFQUFBO0NBQ2xFLENBQUM7O0FBRUYsSUFBSSxrQkFBa0IsR0FBRyxZQUFZO0VBQ25DQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7RUFDcEJBLElBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7RUFDN0IsS0FBS0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7SUFDekMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7R0FDbEc7Q0FDRixDQUFDOztBQUVGLElBQUksb0JBQW9CLEdBQUcsVUFBVSxTQUErQixFQUFFO3VDQUF4QixHQUFHLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQzs7RUFDbEVDLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztFQUNwQkEsSUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQzs7RUFFN0IsSUFBUSxNQUFNO0VBQUUsSUFBQSxHQUFHLGNBQWI7O0VBRU4sSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxFQUFBLE9BQU8sRUFBQTtFQUNoQyxJQUFJLE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixLQUFLLFdBQVcsRUFBRSxFQUFBLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLEVBQUE7O0VBRXBGRCxJQUFJLFlBQVksR0FBRyxDQUFDLFNBQVMsQ0FBQztFQUM5QixJQUFJLEdBQUcsRUFBRSxFQUFBLFlBQVksR0FBRyxTQUFTLENBQUMsRUFBQTs7O0VBR2xDLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7O0VBRTdDLEtBQUtBLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO0lBQ3pDQyxJQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEJBLElBQU0sYUFBYTtNQUNqQjtRQUNFLENBQUMsWUFBWSxJQUFJLE1BQU0sQ0FBQyxjQUFjLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxpQkFBaUI7V0FDM0YsS0FBSyxDQUFDLGVBQWUsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDcEQsSUFBSSxNQUFNLENBQUMscUJBQXFCLEVBQUU7TUFDaENBLElBQU0sV0FBVyxHQUFHLEVBQUUsWUFBWSxHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO01BQzlEQSxJQUFNLFVBQVUsR0FBRyxXQUFXLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztNQUMzREEsSUFBTSxTQUFTO2dCQUNMLENBQUMsV0FBVyxJQUFJLENBQUMsSUFBSSxXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUk7aUJBQzdDLFVBQVUsR0FBRyxDQUFDLElBQUksVUFBVSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUM7aUJBQzVDLFdBQVcsSUFBSSxDQUFDLElBQUksVUFBVSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztNQUMxRCxJQUFJLFNBQVMsRUFBRTtRQUNiLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO09BQ2pEO0tBQ0Y7SUFDRCxLQUFLLENBQUMsUUFBUSxHQUFHLEdBQUcsR0FBRyxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7R0FDdkQ7Q0FDRixDQUFDOztBQUVGLElBQUksY0FBYyxHQUFHLFVBQVUsU0FBK0IsRUFBRTt1Q0FBeEIsR0FBRyxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUM7O0VBQzVEQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7RUFDcEJBLElBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7O0VBRTdCQSxJQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO0VBQ3JFLElBQU0sUUFBUTtFQUFFLElBQUEsV0FBVztFQUFFLElBQUEsS0FBSyxnQkFBOUI7RUFDSkEsSUFBTSxZQUFZLEdBQUcsV0FBVyxDQUFDO0VBQ2pDQSxJQUFNLE1BQU0sR0FBRyxLQUFLLENBQUM7RUFDckIsSUFBSSxjQUFjLEtBQUssQ0FBQyxFQUFFO0lBQ3hCLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDYixXQUFXLEdBQUcsSUFBSSxDQUFDO0lBQ25CLEtBQUssR0FBRyxJQUFJLENBQUM7R0FDZCxNQUFNO0lBQ0wsUUFBUSxHQUFHLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUUsS0FBSyxjQUFjLENBQUMsQ0FBQztJQUNsRSxXQUFXLEdBQUcsUUFBUSxJQUFJLENBQUMsQ0FBQztJQUM1QixLQUFLLEdBQUcsUUFBUSxJQUFJLENBQUMsQ0FBQztHQUN2QjtFQUNELEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO0lBQ25CLFVBQUEsUUFBUTtJQUNSLGFBQUEsV0FBVztJQUNYLE9BQUEsS0FBSztHQUNOLENBQUMsQ0FBQzs7RUFFSCxJQUFJLE1BQU0sQ0FBQyxtQkFBbUIsSUFBSSxNQUFNLENBQUMscUJBQXFCLEVBQUUsRUFBQSxNQUFNLENBQUMsb0JBQW9CLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBQTs7RUFFdkcsSUFBSSxXQUFXLElBQUksQ0FBQyxZQUFZLEVBQUU7SUFDaEMsTUFBTSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0dBQ3RDO0VBQ0QsSUFBSSxLQUFLLElBQUksQ0FBQyxNQUFNLEVBQUU7SUFDcEIsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0dBQ2hDO0VBQ0QsSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLFdBQVcsTUFBTSxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtJQUN4RCxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0dBQ3pCOztFQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0NBQ25DLENBQUM7O0FBRUYsSUFBSSxlQUFlLEdBQUcsWUFBWTtFQUNoQ0EsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0VBQ3BCQSxJQUFNLGlCQUFpQixHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7RUFDM0MsTUFBTSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7RUFDNUgsSUFBSSxpQkFBaUIsS0FBSyxNQUFNLENBQUMsU0FBUyxFQUFFO0lBQzFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztHQUNoQztDQUNGLENBQUM7O0FBRUYsSUFBSSxtQkFBbUIsR0FBRyxZQUFZO0VBQ3BDQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7O0VBRXBCLElBQVEsTUFBTTtFQUFFLElBQUEsTUFBTTtFQUFFLElBQUEsVUFBVTtFQUFFLElBQUEsV0FBVztFQUFFLElBQUEsU0FBUyxvQkFBcEQ7O0VBRU4sTUFBTSxDQUFDLFdBQVcsRUFBQyxDQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsT0FBRSxJQUFFLE1BQU0sQ0FBQyxjQUFjLENBQUEsTUFBRSxJQUFFLE1BQU0sQ0FBQyxjQUFjLENBQUEsTUFBRSxJQUFFLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQSxNQUFFLElBQUUsTUFBTSxDQUFDLHVCQUF1QixDQUFBLE1BQUUsSUFBRSxNQUFNLENBQUMsdUJBQXVCLENBQUEsRUFBRyxDQUFDOztFQUUzTUEsSUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQzs7O0VBRzNDLFdBQVcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7O0VBRTlDLElBQUksTUFBTSxDQUFDLElBQUksRUFBRTs7SUFFZixJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLEVBQUU7TUFDcEQsVUFBVTtTQUNQLFFBQVEsRUFBQyxHQUFFLElBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQSxXQUFPLElBQUUsTUFBTSxDQUFDLG1CQUFtQixDQUFBLGlDQUE0QixHQUFFLFNBQVMsUUFBRyxFQUFFO1NBQzdHLFFBQVEsQ0FBQyxNQUFNLENBQUMseUJBQXlCLENBQUMsQ0FBQztLQUMvQyxNQUFNO01BQ0wsVUFBVTtTQUNQLFFBQVEsRUFBQyxHQUFFLElBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQSxNQUFFLElBQUUsTUFBTSxDQUFDLG1CQUFtQixDQUFBLGdDQUEyQixHQUFFLFNBQVMsUUFBRyxFQUFFO1NBQ3ZHLFFBQVEsQ0FBQyxNQUFNLENBQUMseUJBQXlCLENBQUMsQ0FBQztLQUMvQztHQUNGOztFQUVERCxJQUFJLFNBQVMsR0FBRyxXQUFXLENBQUMsSUFBSSxFQUFDLEdBQUUsSUFBRSxNQUFNLENBQUMsVUFBVSxDQUFBLEVBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0VBQzFGLElBQUksTUFBTSxDQUFDLElBQUksSUFBSSxTQUFTLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtJQUN6QyxTQUFTLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QixTQUFTLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztHQUMzQzs7RUFFREEsSUFBSSxTQUFTLEdBQUcsV0FBVyxDQUFDLElBQUksRUFBQyxHQUFFLElBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQSxFQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztFQUMxRixJQUFJLE1BQU0sQ0FBQyxJQUFJLElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7SUFDekMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQixTQUFTLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztHQUMzQztFQUNELElBQUksTUFBTSxDQUFDLElBQUksRUFBRTs7SUFFZixJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLEVBQUU7TUFDbEQsVUFBVTtTQUNQLFFBQVEsRUFBQyxHQUFFLElBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQSxXQUFPLElBQUUsTUFBTSxDQUFDLG1CQUFtQixDQUFBLGlDQUE0QixJQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQSxRQUFHLEVBQUU7U0FDN0ksUUFBUSxDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0tBQzdDLE1BQU07TUFDTCxVQUFVO1NBQ1AsUUFBUSxFQUFDLEdBQUUsSUFBRSxNQUFNLENBQUMsVUFBVSxDQUFBLE1BQUUsSUFBRSxNQUFNLENBQUMsbUJBQW1CLENBQUEsZ0NBQTJCLElBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFBLFFBQUcsRUFBRTtTQUN2SSxRQUFRLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQUM7S0FDN0M7SUFDRCxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLEVBQUU7TUFDbEQsVUFBVTtTQUNQLFFBQVEsRUFBQyxHQUFFLElBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQSxXQUFPLElBQUUsTUFBTSxDQUFDLG1CQUFtQixDQUFBLGlDQUE0QixJQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQSxRQUFHLEVBQUU7U0FDN0ksUUFBUSxDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0tBQzdDLE1BQU07TUFDTCxVQUFVO1NBQ1AsUUFBUSxFQUFDLEdBQUUsSUFBRSxNQUFNLENBQUMsVUFBVSxDQUFBLE1BQUUsSUFBRSxNQUFNLENBQUMsbUJBQW1CLENBQUEsZ0NBQTJCLElBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFBLFFBQUcsRUFBRTtTQUN2SSxRQUFRLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQUM7S0FDN0M7R0FDRjtDQUNGLENBQUM7O0FBRUYsSUFBSSxpQkFBaUIsR0FBRyxZQUFZO0VBQ2xDQyxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7RUFDcEJBLElBQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLFNBQVMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7RUFDcEUsSUFBUSxVQUFVO0VBQUUsSUFBQSxRQUFRO0VBQUUsSUFBQSxNQUFNO0VBQUUsSUFBQSxXQUFXLHNCQUEzQztFQUNORCxJQUFJLGNBQWMsQ0FBQztFQUNuQkEsSUFBSSxTQUFTLENBQUM7RUFDZCxLQUFLQSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUM3QyxJQUFJLE9BQU8sVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxXQUFXLEVBQUU7TUFDNUMsSUFBSSxTQUFTLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsR0FBRyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7UUFDM0csY0FBYyxHQUFHLENBQUMsQ0FBQztPQUNwQixNQUFNLElBQUksU0FBUyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxTQUFTLEdBQUcsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtRQUN0RSxjQUFjLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztPQUN4QjtLQUNGLE1BQU0sSUFBSSxTQUFTLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFO01BQ3JDLGNBQWMsR0FBRyxDQUFDLENBQUM7S0FDcEI7R0FDRjs7RUFFRCxJQUFJLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRTtJQUM5QixJQUFJLGNBQWMsR0FBRyxDQUFDLElBQUksT0FBTyxjQUFjLEtBQUssV0FBVyxFQUFFLEVBQUEsY0FBYyxHQUFHLENBQUMsQ0FBQyxFQUFBO0dBQ3JGO0VBQ0QsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztFQUMvRCxJQUFJLFNBQVMsSUFBSSxRQUFRLENBQUMsTUFBTSxFQUFFLEVBQUEsU0FBUyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUE7O0VBRWxFLElBQUksY0FBYyxLQUFLLFdBQVcsRUFBRTtJQUNsQyxPQUFPO0dBQ1I7RUFDRCxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtJQUNuQixXQUFBLFNBQVM7SUFDVCxhQUFhLEVBQUUsV0FBVztJQUMxQixXQUFXLEVBQUUsY0FBYztHQUM1QixDQUFDLENBQUM7RUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7RUFDaEMsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0NBQ2hDLENBQUM7O0FBRUYsSUFBSSxrQkFBa0IsR0FBRyxVQUFVLENBQUMsRUFBRTtFQUNwQ0MsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0VBQ3BCQSxJQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0VBQzdCQSxJQUFNLEtBQUssR0FBR1ksR0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUMsR0FBRSxJQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUEsRUFBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzlEYixJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUM7RUFDdkIsSUFBSSxLQUFLLEVBQUU7SUFDVCxLQUFLQSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7TUFDaEQsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssRUFBRSxFQUFBLFVBQVUsR0FBRyxJQUFJLENBQUMsRUFBQTtLQUNuRDtHQUNGOztFQUVELElBQUksS0FBSyxJQUFJLFVBQVUsRUFBRTtJQUN2QixNQUFNLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztJQUM1QixNQUFNLENBQUMsWUFBWSxHQUFHYSxHQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7R0FDeEMsTUFBTTtJQUNMLE1BQU0sQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO0lBQ2hDLE1BQU0sQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO0lBQ2hDLE9BQU87R0FDUjtFQUNELElBQUksTUFBTSxDQUFDLG1CQUFtQixJQUFJLE1BQU0sQ0FBQyxZQUFZLEtBQUssU0FBUyxJQUFJLE1BQU0sQ0FBQyxZQUFZLEtBQUssTUFBTSxDQUFDLFdBQVcsRUFBRTtJQUNqSCxNQUFNLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztHQUM5QjtDQUNGLENBQUM7O0FBRUYsSUFBSSxNQUFNLEdBQUc7RUFDWCxZQUFBLFVBQVU7RUFDVixjQUFBLFlBQVk7RUFDWixrQkFBQSxnQkFBZ0I7RUFDaEIsb0JBQUEsa0JBQWtCO0VBQ2xCLHNCQUFBLG9CQUFvQjtFQUNwQixnQkFBQSxjQUFjO0VBQ2QsaUJBQUEsZUFBZTtFQUNmLHFCQUFBLG1CQUFtQjtFQUNuQixtQkFBQSxpQkFBaUI7RUFDakIsb0JBQUEsa0JBQWtCO0NBQ25CLENBQUM7O0FBRUYsSUFBSSxZQUFZLEdBQUcsVUFBVSxJQUFzQyxFQUFFOzZCQUFwQyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRzs7RUFDakVaLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQzs7RUFFcEIsSUFBUSxNQUFNO0VBQUUsSUFBQSxHQUFHO0VBQUUsSUFBQSxTQUFTO0VBQUUsSUFBQSxVQUFVLHFCQUFwQzs7RUFFTixJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRTtJQUMzQixPQUFPLEdBQUcsR0FBRyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7R0FDckM7O0VBRURELElBQUksZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7RUFDL0QsSUFBSSxHQUFHLEVBQUUsRUFBQSxnQkFBZ0IsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEVBQUE7O0VBRTlDLE9BQU8sZ0JBQWdCLElBQUksQ0FBQyxDQUFDO0NBQzlCLENBQUM7O0FBRUYsSUFBSSxZQUFZLEdBQUcsVUFBVSxTQUFTLEVBQUUsWUFBWSxFQUFFO0VBQ3BEQyxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7RUFDcEIsSUFBUSxHQUFHO0VBQUUsSUFBQSxNQUFNO0VBQUUsSUFBQSxVQUFVO0VBQUUsSUFBQSxRQUFRLG1CQUFuQztFQUNORCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDVkEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ1ZDLElBQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzs7RUFFWixJQUFJLE1BQU0sQ0FBQyxZQUFZLEVBQUUsRUFBRTtJQUN6QixDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztHQUNsQyxNQUFNO0lBQ0wsQ0FBQyxHQUFHLFNBQVMsQ0FBQztHQUNmOztFQUVELElBQUksTUFBTSxDQUFDLFlBQVksRUFBRTtJQUN2QixDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsQixDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUNuQjs7RUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixFQUFFO0lBQzVCLElBQUksU0FBUyxDQUFDLFlBQVksRUFBRSxFQUFBLFVBQVUsQ0FBQyxTQUFTLEVBQUMsY0FBYSxHQUFFLENBQUMsU0FBSyxHQUFFLENBQUMsU0FBSyxHQUFFLENBQUMsUUFBSSxFQUFFLENBQUMsRUFBQTtTQUNuRixFQUFBLFVBQVUsQ0FBQyxTQUFTLEVBQUMsWUFBVyxHQUFFLENBQUMsU0FBSyxHQUFFLENBQUMsUUFBSSxFQUFFLENBQUMsRUFBQTtHQUN4RDs7RUFFRCxNQUFNLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDOzs7RUFHakRELElBQUksV0FBVyxDQUFDO0VBQ2hCQyxJQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO0VBQ3JFLElBQUksY0FBYyxLQUFLLENBQUMsRUFBRTtJQUN4QixXQUFXLEdBQUcsQ0FBQyxDQUFDO0dBQ2pCLE1BQU07SUFDTCxXQUFXLEdBQUcsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxLQUFLLGNBQWMsQ0FBQyxDQUFDO0dBQ3RFO0VBQ0QsSUFBSSxXQUFXLEtBQUssUUFBUSxFQUFFO0lBQzVCLE1BQU0sQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7R0FDbEM7O0VBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQztDQUM3RCxDQUFDOztBQUVGLElBQUksWUFBWSxHQUFHLFlBQVk7RUFDN0IsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUU7Q0FDNUIsQ0FBQzs7QUFFRixJQUFJLFlBQVksR0FBRyxZQUFZO0VBQzdCLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFO0NBQ25ELENBQUM7O0FBRUYsSUFBSSxTQUFTLEdBQUc7RUFDZCxjQUFBLFlBQVk7RUFDWixjQUFBLFlBQVk7RUFDWixjQUFBLFlBQVk7RUFDWixjQUFBLFlBQVk7Q0FDYixDQUFDOztBQUVGLElBQUksYUFBYSxHQUFHLFVBQVUsUUFBUSxFQUFFLFlBQVksRUFBRTtFQUNwREEsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDOztFQUVwQixNQUFNLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7RUFFdkMsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDO0NBQ3RELENBQUM7O0FBRUYsSUFBSSxlQUFlLEdBQUcsVUFBVSxZQUFtQixFQUFFOzZDQUFULEdBQUcsSUFBSTs7RUFDakRBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztFQUNwQixJQUFRLFdBQVc7RUFBRSxJQUFBLE1BQU07RUFBRSxJQUFBLGFBQWEsd0JBQXBDO0VBQ04sSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO0lBQ3JCLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0dBQzNCO0VBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDOztFQUUvQixJQUFJLENBQUMsWUFBWSxFQUFFLEVBQUEsT0FBTyxFQUFBO0VBQzFCLElBQUksV0FBVyxLQUFLLGFBQWEsRUFBRTtJQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDaEMsSUFBSSxXQUFXLEdBQUcsYUFBYSxFQUFFO01BQy9CLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztLQUMvQixNQUFNO01BQ0wsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0tBQy9CO0dBQ0Y7Q0FDRixDQUFDOztBQUVGLElBQUksYUFBYSxHQUFHLFVBQVUsWUFBbUIsRUFBRTs2Q0FBVCxHQUFHLElBQUk7O0VBQy9DQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7RUFDcEIsSUFBUSxXQUFXO0VBQUUsSUFBQSxhQUFhLHdCQUE1QjtFQUNOLE1BQU0sQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0VBQ3pCLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7O0VBRXhCLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7RUFDN0IsSUFBSSxZQUFZLEVBQUU7SUFDaEIsSUFBSSxXQUFXLEtBQUssYUFBYSxFQUFFO01BQ2pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztNQUM5QixJQUFJLFdBQVcsR0FBRyxhQUFhLEVBQUU7UUFDL0IsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztPQUM3QixNQUFNO1FBQ0wsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztPQUM3QjtLQUNGO0dBQ0Y7Q0FDRixDQUFDOztBQUVGLElBQUllLFlBQVUsR0FBRztFQUNmLGVBQUEsYUFBYTtFQUNiLGlCQUFBLGVBQWU7RUFDZixlQUFBLGFBQWE7Q0FDZCxDQUFDOztBQUVGLFNBQVMsT0FBTyxHQUFHO0VBQ2pCLFNBQVMsS0FBSyxHQUFHOztJQUVmZixJQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDOztJQUUxQyxHQUFHLENBQUMsU0FBUyxHQUFHLHVDQUF1QyxDQUFDOztJQUV4RCxPQUFPLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO0dBQ25EO0VBQ0QsU0FBUyxRQUFRLEdBQUc7SUFDbEJBLElBQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3BELFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUU7R0FDN0Y7RUFDRCxPQUFPO0lBQ0wsUUFBUSxFQUFFLFFBQVEsRUFBRTtJQUNwQixXQUFXLEVBQUUsOENBQThDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO0lBQzVGLEVBQUUsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGdCQUFnQjtJQUN4RSxPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGdCQUFnQixJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQztjQUMxRSxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUM7SUFDakYsTUFBTSxFQUFFLEtBQUssRUFBRTtHQUNoQixDQUFDO0NBQ0g7O0FBRUQsSUFBSSxTQUFTLEdBQUcsT0FBTyxFQUFFLENBQUM7O0FBRTFCLElBQUksT0FBTyxHQUFHLFVBQVUsS0FBUyxFQUFFLEtBQXlCLEVBQUUsWUFBbUIsRUFBRSxRQUFRLEVBQUU7K0JBQWhFLEdBQUcsQ0FBQyxDQUFPOytCQUFBLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQWM7NkNBQUEsR0FBRyxJQUFJOztFQUMvRUEsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0VBQ3BCRCxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUM7RUFDdkIsSUFBSSxVQUFVLEdBQUcsQ0FBQyxFQUFFLEVBQUEsVUFBVSxHQUFHLENBQUMsQ0FBQyxFQUFBOztFQUVuQyxJQUFRLE1BQU07RUFBRSxJQUFBLFFBQVE7RUFBRSxJQUFBLFVBQVU7RUFBRSxJQUFBLGFBQWE7RUFBRSxJQUFBLFdBQVc7RUFBYSxJQUFBLGlCQUFpQjtFQUFFLElBQUEsR0FBRztFQUFFLElBQUEsVUFBVSxxQkFBekc7O0VBRU4sTUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7RUFDbEUsSUFBSSxNQUFNLENBQUMsU0FBUyxJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUUsRUFBQSxNQUFNLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUE7O0VBRWhGLElBQUksQ0FBQyxXQUFXLElBQUksTUFBTSxDQUFDLFlBQVksSUFBSSxDQUFDLE9BQU8sYUFBYSxJQUFJLENBQUMsQ0FBQyxJQUFJLFlBQVksRUFBRTtJQUN0RixNQUFNLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7R0FDdkM7O0VBRURDLElBQU0sU0FBUyxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQzs7O0VBRzlDLE1BQU0sQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7OztFQUdqQyxJQUFJLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRTtJQUM5QixLQUFLRCxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtNQUM3QyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUU7UUFDbkUsVUFBVSxHQUFHLENBQUMsQ0FBQztPQUNoQjtLQUNGO0dBQ0Y7OztFQUdELElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxJQUFJLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxJQUFJLFNBQVMsR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFLEVBQUU7SUFDL0YsT0FBTyxLQUFLLENBQUM7R0FDZDtFQUNELElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxJQUFJLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxJQUFJLFNBQVMsR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFLEVBQUU7SUFDL0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLFVBQVUsRUFBRSxFQUFBLE9BQU8sS0FBSyxDQUFDLEVBQUE7R0FDNUQ7OztFQUdELE1BQU0sQ0FBQyxhQUFhLEdBQUcsV0FBVyxJQUFJLENBQUMsQ0FBQztFQUN4QyxNQUFNLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztFQUNoQyxJQUFJLGFBQWEsS0FBSyxVQUFVLElBQUksV0FBVyxLQUFLLFVBQVUsRUFBRTtJQUM5RCxNQUFNLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7R0FDbEM7RUFDRCxJQUFJLGlCQUFpQixLQUFLLE1BQU0sQ0FBQyxTQUFTLEVBQUU7SUFDMUMsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0dBQ2hDO0VBQ0QsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO0VBQ3pCLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLEtBQUssTUFBTSxDQUFDLFNBQVMsTUFBTSxDQUFDLEdBQUcsSUFBSSxTQUFTLEtBQUssTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFOztJQUV4RixJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUU7TUFDckIsTUFBTSxDQUFDLGdCQUFnQixFQUFFLENBQUM7S0FDM0I7SUFDRCxNQUFNLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUM3QixJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssT0FBTyxFQUFFO01BQzdCLE1BQU0sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDaEM7SUFDRCxPQUFPLEtBQUssQ0FBQztHQUNkO0VBQ0QsTUFBTSxDQUFDLG1CQUFtQixFQUFFLENBQUM7O0VBRTdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0VBQ3RELE1BQU0sQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUM7O0VBRXJDLElBQUksS0FBSyxLQUFLLENBQUMsSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFO0lBQ25DLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEIsTUFBTSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMvQixNQUFNLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDO0dBQ3BDLE1BQU07SUFDTCxNQUFNLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVCLE1BQU0sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDL0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7TUFDckIsTUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7TUFDeEIsVUFBVSxDQUFDLGFBQWEsQ0FBQyxZQUFHO1FBQzFCLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBQSxPQUFPLEVBQUE7UUFDcEIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztPQUNwQyxDQUFDLENBQUM7S0FDSjtHQUNGOztFQUVELE9BQU8sSUFBSSxDQUFDO0NBQ2IsQ0FBQzs7O0FBR0YsSUFBSSxTQUFTLEdBQUcsVUFBVSxLQUF5QixFQUFFLFlBQW1CLEVBQUUsUUFBUSxFQUFFOytCQUFyRCxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFjOzZDQUFBLEdBQUcsSUFBSTs7RUFDdEVDLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztFQUNwQixJQUFRLE1BQU07RUFBRSxJQUFBLFNBQVMsb0JBQW5CO0VBQ04sSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFO0lBQ2YsSUFBSSxTQUFTLEVBQUUsRUFBQSxPQUFPLEtBQUssQ0FBQyxFQUFBO0lBQzVCLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQkEsSUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUM7SUFDbkQsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLGNBQWMsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0dBQ2xHO0VBQ0QsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLGNBQWMsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0NBQ2xHLENBQUM7OztBQUdGLElBQUksU0FBUyxHQUFHLFVBQVUsS0FBeUIsRUFBRSxZQUFtQixFQUFFLFFBQVEsRUFBRTsrQkFBckQsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBYzs2Q0FBQSxHQUFHLElBQUk7O0VBQ3RFQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7RUFDcEIsSUFBUSxNQUFNO0VBQUUsSUFBQSxTQUFTLG9CQUFuQjs7RUFFTixJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUU7SUFDZixJQUFJLFNBQVMsRUFBRSxFQUFBLE9BQU8sS0FBSyxDQUFDLEVBQUE7SUFDNUIsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pCQSxJQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztJQUNuRCxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsR0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztHQUM5RTtFQUNELE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0NBQzlFLENBQUM7OztBQUdGLElBQUksVUFBVSxHQUFHLFVBQVUsS0FBeUIsRUFBRSxZQUFtQixFQUFFLFFBQVEsRUFBRTsrQkFBckQsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBYzs2Q0FBQSxHQUFHLElBQUk7O0VBQ3ZFQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7RUFDcEIsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztDQUMxRSxDQUFDOztBQUVGLElBQUksbUJBQW1CLEdBQUcsWUFBWTtFQUNwQ0EsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0VBQ3BCLElBQVEsTUFBTTtFQUFFLElBQUEsVUFBVSxxQkFBcEI7O0VBRU5BLElBQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxhQUFhLEtBQUssTUFBTSxHQUFHLE1BQU0sQ0FBQyxhQUFhLEVBQUUsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDO0VBQ3RHRCxJQUFJLFlBQVksR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDO0VBQ3ZDQSxJQUFJLFNBQVMsQ0FBQztFQUNkLElBQUksTUFBTSxDQUFDLElBQUksRUFBRTtJQUNmLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFBLE9BQU8sRUFBQTtJQUM3QixTQUFTLEdBQUcsUUFBUSxDQUFDYSxHQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2pGLElBQUksTUFBTSxDQUFDLGNBQWMsRUFBRTtNQUN6QjtRQUNFLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLElBQUksYUFBYSxHQUFHLENBQUMsQ0FBQztTQUN4RCxZQUFZLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsWUFBWSxLQUFLLGFBQWEsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNuRjtRQUNBLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNqQixZQUFZLEdBQUcsVUFBVTtXQUN0QixRQUFRLEVBQUMsR0FBRSxJQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUEsZ0NBQTJCLEdBQUUsU0FBUyxjQUFTLElBQUUsTUFBTSxDQUFDLG1CQUFtQixDQUFBLE1BQUUsRUFBRTtXQUM3RyxFQUFFLENBQUMsQ0FBQyxDQUFDO1dBQ0wsS0FBSyxFQUFFLENBQUM7O1FBRVgsS0FBSyxDQUFDLFFBQVEsQ0FBQyxZQUFHO1VBQ2hCLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDOUIsQ0FBQyxDQUFDO09BQ0osTUFBTTtRQUNMLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7T0FDOUI7S0FDRixNQUFNLElBQUksWUFBWSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLGFBQWEsRUFBRTtNQUM5RCxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7TUFDakIsWUFBWSxHQUFHLFVBQVU7U0FDdEIsUUFBUSxFQUFDLEdBQUUsSUFBRSxNQUFNLENBQUMsVUFBVSxDQUFBLGdDQUEyQixHQUFFLFNBQVMsY0FBUyxJQUFFLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQSxNQUFFLEVBQUU7U0FDN0csRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNMLEtBQUssRUFBRSxDQUFDOztNQUVYLEtBQUssQ0FBQyxRQUFRLENBQUMsWUFBRztRQUNoQixNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO09BQzlCLENBQUMsQ0FBQztLQUNKLE1BQU07TUFDTCxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0tBQzlCO0dBQ0YsTUFBTTtJQUNMLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7R0FDOUI7Q0FDRixDQUFDOztBQUVGLElBQUksS0FBSyxHQUFHO0VBQ1YsU0FBQSxPQUFPO0VBQ1AsV0FBQSxTQUFTO0VBQ1QsV0FBQSxTQUFTO0VBQ1QsWUFBQSxVQUFVO0VBQ1YscUJBQUEsbUJBQW1CO0NBQ3BCLENBQUM7O0FBRUYsSUFBSSxVQUFVLEdBQUcsWUFBWTtFQUMzQlosSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0VBQ3BCLElBQVEsTUFBTTtFQUFFLElBQUEsVUFBVSxxQkFBcEI7O0VBRU4sVUFBVSxDQUFDLFFBQVEsRUFBQyxHQUFFLElBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQSxNQUFFLElBQUUsTUFBTSxDQUFDLG1CQUFtQixDQUFBLEVBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQzs7RUFFcEZELElBQUksTUFBTSxHQUFHLFVBQVUsQ0FBQyxRQUFRLEVBQUMsR0FBRSxJQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUEsRUFBRyxDQUFDOztFQUUxRCxJQUFJLE1BQU0sQ0FBQyxzQkFBc0IsRUFBRTtJQUNqQ0MsSUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLGNBQWMsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN2RixJQUFJLGNBQWMsS0FBSyxNQUFNLENBQUMsY0FBYyxFQUFFO01BQzVDLEtBQUtELElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsY0FBYyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDMUNDLElBQU0sU0FBUyxHQUFHWSxHQUFDLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBQyxDQUFHLE1BQU0sQ0FBQyxVQUFVLE9BQUUsSUFBRSxNQUFNLENBQUMsZUFBZSxDQUFBLEVBQUcsQ0FBQztRQUM5RyxVQUFVLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO09BQzlCO01BQ0QsTUFBTSxHQUFHLFVBQVUsQ0FBQyxRQUFRLEVBQUMsR0FBRSxJQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUEsRUFBRyxDQUFDO0tBQ3ZEO0dBQ0Y7O0VBRUQsSUFBSSxNQUFNLENBQUMsYUFBYSxLQUFLLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsRUFBQSxNQUFNLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBQTs7RUFFakcsTUFBTSxDQUFDLFlBQVksR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLFlBQVksSUFBSSxNQUFNLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0VBQ2hGLE1BQU0sQ0FBQyxZQUFZLElBQUksTUFBTSxDQUFDLG9CQUFvQixDQUFDO0VBQ25ELElBQUksTUFBTSxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFO0lBQ3ZDLE1BQU0sQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztHQUNyQzs7RUFFRFosSUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDO0VBQ3pCQSxJQUFNLFlBQVksR0FBRyxFQUFFLENBQUM7RUFDeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFDLEtBQUssRUFBRSxFQUFFLEVBQUU7SUFDdEJBLElBQU0sS0FBSyxHQUFHWSxHQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDcEIsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFBLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQTtJQUN2RCxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLEtBQUssSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUUsRUFBQSxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUE7SUFDbEcsS0FBSyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxLQUFLLENBQUMsQ0FBQztHQUM5QyxDQUFDLENBQUM7RUFDSCxLQUFLYixJQUFJTyxHQUFDLEdBQUcsQ0FBQyxFQUFFQSxHQUFDLEdBQUcsWUFBWSxDQUFDLE1BQU0sRUFBRUEsR0FBQyxJQUFJLENBQUMsRUFBRTtJQUMvQyxVQUFVLENBQUMsTUFBTSxDQUFDTSxHQUFDLENBQUMsWUFBWSxDQUFDTixHQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQztHQUM1RjtFQUNELEtBQUtQLElBQUlPLEdBQUMsR0FBRyxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRUEsR0FBQyxJQUFJLENBQUMsRUFBRUEsR0FBQyxJQUFJLENBQUMsRUFBRTtJQUNyRCxVQUFVLENBQUMsT0FBTyxDQUFDTSxHQUFDLENBQUMsYUFBYSxDQUFDTixHQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQztHQUM5RjtDQUNGLENBQUM7O0FBRUYsSUFBSSxPQUFPLEdBQUcsWUFBWTtFQUN4Qk4sSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0VBQ3BCLElBQVEsTUFBTTtFQUFFLElBQUEsV0FBVztFQUFFLElBQUEsTUFBTTtFQUFFLElBQUEsWUFBWSx1QkFBM0M7O0VBRU5ELElBQUksUUFBUSxDQUFDOztFQUViLElBQUksV0FBVyxHQUFHLFlBQVksRUFBRTtJQUM5QixRQUFRLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLFlBQVksR0FBRyxDQUFDLENBQUMsSUFBSSxXQUFXLENBQUM7SUFDOUQsUUFBUSxJQUFJLFlBQVksQ0FBQztJQUN6QixNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0dBQzFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEtBQUssTUFBTSxJQUFJLFdBQVcsSUFBSSxZQUFZLEdBQUcsQ0FBQyxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTs7SUFFN0ksUUFBUSxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxXQUFXLEdBQUcsWUFBWSxDQUFDO0lBQ3ZELFFBQVEsSUFBSSxZQUFZLENBQUM7SUFDekIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztHQUMxQztDQUNGLENBQUM7O0FBRUYsSUFBSSxXQUFXLEdBQUcsWUFBWTtFQUM1QkMsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0VBQ3BCLElBQVEsVUFBVTtFQUFFLElBQUEsTUFBTTtFQUFFLElBQUEsTUFBTSxpQkFBNUI7RUFDTixVQUFVLENBQUMsUUFBUSxFQUFDLEdBQUUsSUFBRSxNQUFNLENBQUMsVUFBVSxDQUFBLE1BQUUsSUFBRSxNQUFNLENBQUMsbUJBQW1CLENBQUEsRUFBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO0VBQ3BGLE1BQU0sQ0FBQyxVQUFVLENBQUMseUJBQXlCLENBQUMsQ0FBQztDQUM5QyxDQUFDOztBQUVGLElBQUksSUFBSSxHQUFHO0VBQ1QsWUFBQSxVQUFVO0VBQ1YsU0FBQSxPQUFPO0VBQ1AsYUFBQSxXQUFXO0NBQ1osQ0FBQzs7QUFFRixJQUFJLGFBQWEsR0FBRyxVQUFVLE1BQU0sRUFBRTtFQUNwQ0EsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0VBQ3BCLElBQUksU0FBUyxDQUFDLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLEVBQUEsT0FBTyxFQUFBO0VBQzVEQSxJQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDO0VBQ3JCLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztFQUN6QixFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLEdBQUcsa0JBQWtCLEdBQUcsY0FBYyxDQUFDO0VBQy9ELEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sR0FBRyxjQUFjLEdBQUcsV0FBVyxDQUFDO0VBQ3hELEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sR0FBRyxVQUFVLEdBQUcsTUFBTSxDQUFDO0NBQ2hELENBQUM7O0FBRUYsSUFBSSxlQUFlLEdBQUcsWUFBWTtFQUNoQ0EsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0VBQ3BCLElBQUksU0FBUyxDQUFDLEtBQUssRUFBRSxFQUFBLE9BQU8sRUFBQTtFQUM1QixNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO0NBQzdCLENBQUM7O0FBRUYsSUFBSSxVQUFVLEdBQUc7RUFDZixlQUFBLGFBQWE7RUFDYixpQkFBQSxlQUFlO0NBQ2hCLENBQUM7O0FBRUYsSUFBSSxXQUFXLEdBQUcsVUFBVSxNQUFNLEVBQUU7RUFDbENBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztFQUNwQixJQUFRLFVBQVU7RUFBRSxJQUFBLE1BQU0saUJBQXBCO0VBQ04sSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFO0lBQ2YsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO0dBQ3RCO0VBQ0QsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRTtJQUMvQyxLQUFLRCxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtNQUN6QyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFBLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQTtLQUM3QztHQUNGLE1BQU07SUFDTCxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0dBQzNCO0VBQ0QsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFO0lBQ2YsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO0dBQ3JCO0VBQ0QsSUFBSSxFQUFFLE1BQU0sQ0FBQyxRQUFRLElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFO0lBQzVDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztHQUNqQjtDQUNGLENBQUM7O0FBRUYsSUFBSSxZQUFZLEdBQUcsVUFBVSxNQUFNLEVBQUU7RUFDbkNDLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztFQUNwQixJQUFRLE1BQU07RUFBRSxJQUFBLFVBQVU7RUFBRSxJQUFBLFdBQVcsc0JBQWpDOztFQUVOLElBQUksTUFBTSxDQUFDLElBQUksRUFBRTtJQUNmLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztHQUN0QjtFQUNERCxJQUFJLGNBQWMsR0FBRyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0VBQ3JDLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7SUFDL0MsS0FBS0EsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7TUFDekMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQSxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUE7S0FDOUM7SUFDRCxjQUFjLEdBQUcsV0FBVyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7R0FDOUMsTUFBTTtJQUNMLFVBQVUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7R0FDNUI7RUFDRCxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUU7SUFDZixNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7R0FDckI7RUFDRCxJQUFJLEVBQUUsTUFBTSxDQUFDLFFBQVEsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUU7SUFDNUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0dBQ2pCO0VBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQzFDLENBQUM7O0FBRUYsSUFBSSxXQUFXLEdBQUcsVUFBVSxhQUFhLEVBQUU7RUFDekNDLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztFQUNwQixJQUFRLE1BQU07RUFBRSxJQUFBLFVBQVU7RUFBRSxJQUFBLFdBQVcsc0JBQWpDOztFQUVOLElBQUksTUFBTSxDQUFDLElBQUksRUFBRTtJQUNmLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixNQUFNLENBQUMsTUFBTSxHQUFHLFVBQVUsQ0FBQyxRQUFRLEVBQUMsR0FBRSxJQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUEsRUFBRyxDQUFDO0dBQzlEO0VBQ0RELElBQUksY0FBYyxHQUFHLFdBQVcsQ0FBQztFQUNqQ0EsSUFBSSxhQUFhLENBQUM7O0VBRWxCLElBQUksT0FBTyxhQUFhLEtBQUssUUFBUSxJQUFJLGFBQWEsQ0FBQyxNQUFNLEVBQUU7SUFDN0QsS0FBS0EsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7TUFDaEQsYUFBYSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztNQUNqQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFBO01BQzNFLElBQUksYUFBYSxHQUFHLGNBQWMsRUFBRSxFQUFBLGNBQWMsSUFBSSxDQUFDLENBQUMsRUFBQTtLQUN6RDtJQUNELGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUM5QyxNQUFNO0lBQ0wsYUFBYSxHQUFHLGFBQWEsQ0FBQztJQUM5QixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFBO0lBQzNFLElBQUksYUFBYSxHQUFHLGNBQWMsRUFBRSxFQUFBLGNBQWMsSUFBSSxDQUFDLENBQUMsRUFBQTtJQUN4RCxjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDOUM7O0VBRUQsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFO0lBQ2YsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO0dBQ3JCOztFQUVELElBQUksRUFBRSxNQUFNLENBQUMsUUFBUSxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRTtJQUM1QyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7R0FDakI7RUFDRCxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUU7SUFDZixNQUFNLENBQUMsT0FBTyxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztHQUNoRSxNQUFNO0lBQ0wsTUFBTSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0dBQzFDO0NBQ0YsQ0FBQzs7QUFFRixJQUFJLGVBQWUsR0FBRyxZQUFZO0VBQ2hDQyxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7O0VBRXBCQSxJQUFNLGFBQWEsR0FBRyxFQUFFLENBQUM7RUFDekIsS0FBS0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO0lBQ2hELGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDdkI7RUFDRCxNQUFNLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0NBQ25DLENBQUM7O0FBRUYsSUFBSSxZQUFZLEdBQUc7RUFDakIsYUFBQSxXQUFXO0VBQ1gsY0FBQSxZQUFZO0VBQ1osYUFBQSxXQUFXO0VBQ1gsaUJBQUEsZUFBZTtDQUNoQixDQUFDOztBQUVGLElBQUksWUFBWSxHQUFHLFVBQVUsS0FBSyxFQUFFO0VBQ2xDQyxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7RUFDcEJBLElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUM7RUFDcEMsSUFBUSxNQUFNO0VBQUUsSUFBQSxPQUFPLGtCQUFqQjtFQUNORCxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7RUFDZCxJQUFJLENBQUMsQ0FBQyxhQUFhLEVBQUUsRUFBQSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxFQUFBO0VBQ3pDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDLElBQUksS0FBSyxZQUFZLENBQUM7RUFDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUMsRUFBRSxFQUFBLE9BQU8sRUFBQTtFQUNoRSxJQUFJLE1BQU0sQ0FBQyxTQUFTLElBQUlhLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUMsR0FBRSxJQUFFLE1BQU0sQ0FBQyxjQUFjLENBQUEsRUFBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO0lBQ3BFLE1BQU0sQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0lBQ3pCLE9BQU87R0FDUjtFQUNELElBQUksTUFBTSxDQUFDLFlBQVksRUFBRTtJQUN2QixJQUFJLENBQUNBLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUEsT0FBTyxFQUFBO0dBQ25EOztFQUVELE9BQU8sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLElBQUksS0FBSyxZQUFZLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQztFQUNoRixPQUFPLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxJQUFJLEtBQUssWUFBWSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7RUFDaEZaLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7RUFDaENBLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7OztFQUdoQyxJQUFJLFFBQVEsQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLHFCQUFxQixJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMscUJBQXFCLEVBQUU7SUFDMUYsT0FBTztHQUNSO0VBQ0QsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7SUFDakIsU0FBUyxFQUFFLElBQUk7SUFDZixPQUFPLEVBQUUsS0FBSztJQUNkLG1CQUFtQixFQUFFLElBQUk7SUFDekIsV0FBVyxFQUFFLFNBQVM7SUFDdEIsV0FBVyxFQUFFLFNBQVM7R0FDdkIsQ0FBQyxDQUFDOztFQUVILE9BQU8sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0VBQ3hCLE9BQU8sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0VBQ3hCLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO0VBQ2xDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0VBQ3pCLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztFQUNwQixNQUFNLENBQUMsY0FBYyxHQUFHLFNBQVMsQ0FBQztFQUNsQyxJQUFJLE1BQU0sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxFQUFFLEVBQUEsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQyxFQUFBO0VBQzFELElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxZQUFZLEVBQUU7SUFDM0JELElBQUksY0FBYyxHQUFHLElBQUksQ0FBQztJQUMxQixJQUFJYSxHQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBQSxjQUFjLEdBQUcsS0FBSyxDQUFDLEVBQUE7SUFDOUQsSUFBSSxRQUFRLENBQUMsYUFBYSxJQUFJQSxHQUFDLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUU7TUFDN0UsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUMvQjtJQUNELElBQUksY0FBYyxFQUFFO01BQ2xCLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztLQUNwQjtHQUNGO0VBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDOUIsQ0FBQzs7QUFFRixJQUFJLFdBQVcsR0FBRyxVQUFVLEtBQUssRUFBRTtFQUNqQ1osSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0VBQ3BCQSxJQUFNLElBQUksR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDO0VBQ3BDLElBQVEsTUFBTTtFQUFFLElBQUEsT0FBTztFQUFFLElBQUEsR0FBRyxjQUF0QjtFQUNORCxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7RUFDZCxJQUFJLENBQUMsQ0FBQyxhQUFhLEVBQUUsRUFBQSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxFQUFBO0VBQ3pDLElBQUksSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLFdBQVcsRUFBRSxFQUFBLE9BQU8sRUFBQTtFQUN4REMsSUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLElBQUksS0FBSyxXQUFXLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQztFQUMxRUEsSUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLElBQUksS0FBSyxXQUFXLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQztFQUMxRSxJQUFJLENBQUMsQ0FBQyx1QkFBdUIsRUFBRTtJQUM3QixPQUFPLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUN2QixPQUFPLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUN2QixPQUFPO0dBQ1I7RUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRTs7SUFFMUIsTUFBTSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7SUFDMUIsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO01BQ2xCLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFO1FBQ3BCLE1BQU0sRUFBRSxLQUFLO1FBQ2IsTUFBTSxFQUFFLEtBQUs7UUFDYixRQUFRLEVBQUUsS0FBSztRQUNmLFFBQVEsRUFBRSxLQUFLO09BQ2hCLENBQUMsQ0FBQztNQUNILElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQ25DO0lBQ0QsT0FBTztHQUNSO0VBQ0QsSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLE1BQU0sQ0FBQyxtQkFBbUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7SUFDbkUsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUU7O01BRXZCO1FBQ0UsQ0FBQyxPQUFPLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLFNBQVMsSUFBSSxNQUFNLENBQUMsWUFBWSxFQUFFO1NBQzlFLE9BQU8sQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNoRjtRQUNBLE9BQU87T0FDUjtLQUNGLE1BQU07TUFDTCxDQUFDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQyxZQUFZLEVBQUU7T0FDOUUsT0FBTyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxTQUFTLElBQUksTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO01BQ2hGO01BQ0EsT0FBTztLQUNSO0dBQ0Y7RUFDRCxJQUFJLElBQUksQ0FBQyxZQUFZLElBQUksUUFBUSxDQUFDLGFBQWEsRUFBRTtJQUMvQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEtBQUssUUFBUSxDQUFDLGFBQWEsSUFBSVksR0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFO01BQzVFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO01BQ3BCLE1BQU0sQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO01BQzFCLE9BQU87S0FDUjtHQUNGO0VBQ0QsSUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7SUFDNUIsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDN0I7RUFDRCxJQUFJLENBQUMsQ0FBQyxhQUFhLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLEVBQUEsT0FBTyxFQUFBOztFQUUxRCxPQUFPLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxJQUFJLEtBQUssV0FBVyxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7RUFDL0UsT0FBTyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsSUFBSSxLQUFLLFdBQVcsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDOztFQUUvRSxJQUFJLE9BQU8sSUFBSSxDQUFDLFdBQVcsS0FBSyxXQUFXLEVBQUU7SUFDM0NiLElBQUksVUFBVSxDQUFDO0lBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsSUFBSSxPQUFPLENBQUMsUUFBUSxLQUFLLE9BQU8sQ0FBQyxNQUFNLE1BQU0sTUFBTSxDQUFDLFVBQVUsRUFBRSxJQUFJLE9BQU8sQ0FBQyxRQUFRLEtBQUssT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO01BQ2xJLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO0tBQzFCLE1BQU07TUFDTCxVQUFVLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDO01BQ3BJLElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxHQUFHLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxJQUFJLEVBQUUsR0FBRyxVQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ25IO0dBQ0Y7RUFDRCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7SUFDcEIsTUFBTSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNyQztFQUNELElBQUksT0FBTyxXQUFXLEtBQUssV0FBVyxFQUFFO0lBQ3RDLElBQUksT0FBTyxDQUFDLFFBQVEsS0FBSyxPQUFPLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxRQUFRLEtBQUssT0FBTyxDQUFDLE1BQU0sRUFBRTtNQUM5RSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztLQUN6QjtHQUNGO0VBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBQSxPQUFPLEVBQUE7RUFDNUIsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO0lBQ3BCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLE9BQU87R0FDUjtFQUNELElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO0lBQ3JCLE9BQU87R0FDUjtFQUNELE1BQU0sQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO0VBQzFCLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztFQUNuQixJQUFJLE1BQU0sQ0FBQyx3QkFBd0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7SUFDckQsQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDO0dBQ3JCOztFQUVELElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO0lBQ2pCLElBQUksTUFBTSxDQUFDLElBQUksRUFBRTtNQUNmLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUNsQjtJQUNELElBQUksQ0FBQyxjQUFjLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzVDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEIsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFO01BQ3BCLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLGtGQUFrRixDQUFDLENBQUM7S0FDL0c7SUFDRCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsS0FBSyxDQUFDOztJQUVqQyxJQUFJLE1BQU0sQ0FBQyxVQUFVLEtBQUssTUFBTSxDQUFDLGNBQWMsS0FBSyxJQUFJLElBQUksTUFBTSxDQUFDLGNBQWMsS0FBSyxJQUFJLENBQUMsRUFBRTtNQUMzRixNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzVCO0lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNuQztFQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQzdCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDOztFQUVwQkEsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxHQUFHLE9BQU8sQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7RUFDekcsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7O0VBRXBCLElBQUksSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDO0VBQzFCLElBQUksR0FBRyxFQUFFLEVBQUEsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUE7O0VBRXRCLE1BQU0sQ0FBQyxjQUFjLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxNQUFNLEdBQUcsTUFBTSxDQUFDO0VBQ25ELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQzs7RUFFbkRBLElBQUksbUJBQW1CLEdBQUcsSUFBSSxDQUFDO0VBQy9CQSxJQUFJLGVBQWUsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDO0VBQzdDLElBQUksTUFBTSxDQUFDLG1CQUFtQixFQUFFO0lBQzlCLGVBQWUsR0FBRyxDQUFDLENBQUM7R0FDckI7RUFDRCxLQUFLLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUUsR0FBRztJQUMvRCxtQkFBbUIsR0FBRyxLQUFLLENBQUM7SUFDNUIsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUEsSUFBSSxDQUFDLGdCQUFnQixHQUFHLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxHQUFHLENBQUMsS0FBSyxXQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxHQUFLLGVBQWUsRUFBQSxDQUFDLENBQUMsRUFBQTtHQUN6SixNQUFNLElBQUksSUFBSSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFFO0lBQ3BFLG1CQUFtQixHQUFHLEtBQUssQ0FBQztJQUM1QixJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFBQSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLEdBQUcsQ0FBQyxLQUFLLFdBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxHQUFLLGVBQWUsRUFBQSxDQUFDLENBQUMsRUFBQTtHQUN4Sjs7RUFFRCxJQUFJLG1CQUFtQixFQUFFO0lBQ3ZCLENBQUMsQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUM7R0FDbEM7OztFQUdELElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxJQUFJLE1BQU0sQ0FBQyxjQUFjLEtBQUssTUFBTSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsY0FBYyxFQUFFO0lBQzdHLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO0dBQzdDO0VBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLElBQUksTUFBTSxDQUFDLGNBQWMsS0FBSyxNQUFNLElBQUksSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUU7SUFDN0csSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7R0FDN0M7Ozs7RUFJRCxJQUFJLE1BQU0sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxFQUFFO0lBQ3hCLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtNQUNoRSxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFO1FBQzVCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUM7UUFDL0IsT0FBTyxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO1FBQ2xDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUNsQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztRQUM1QyxPQUFPLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUUsR0FBRyxPQUFPLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQzdHLE9BQU87T0FDUjtLQUNGLE1BQU07TUFDTCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztNQUM1QyxPQUFPO0tBQ1I7R0FDRjs7RUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFBLE9BQU8sRUFBQTs7O0VBR2pDLElBQUksTUFBTSxDQUFDLFFBQVEsSUFBSSxNQUFNLENBQUMsbUJBQW1CLElBQUksTUFBTSxDQUFDLHFCQUFxQixFQUFFO0lBQ2pGLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzdCLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztHQUMxQjtFQUNELElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRTs7SUFFbkIsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7TUFDaEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7UUFDbkIsUUFBUSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLEdBQUcsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUM5RCxJQUFJLEVBQUUsSUFBSSxDQUFDLGNBQWM7T0FDMUIsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztNQUNuQixRQUFRLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsR0FBRyxVQUFVLEdBQUcsVUFBVSxDQUFDO01BQ2xFLElBQUksRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFO0tBQ2xCLENBQUMsQ0FBQztHQUNKOztFQUVELE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7O0VBRTdDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7Q0FDNUMsQ0FBQzs7QUFFRixJQUFJLFVBQVUsR0FBRyxVQUFVLEtBQUssRUFBRTtFQUNoQ0MsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0VBQ3BCQSxJQUFNLElBQUksR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDOztFQUVwQyxJQUFRLE1BQU07RUFBRSxJQUFBLE9BQU87RUFBRSxJQUFBLEdBQUc7RUFBRSxJQUFBLFVBQVU7RUFBRSxJQUFBLFVBQVU7RUFBRSxJQUFBLFFBQVEsbUJBQXhEO0VBQ05ELElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztFQUNkLElBQUksQ0FBQyxDQUFDLGFBQWEsRUFBRSxFQUFBLENBQUMsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDLEVBQUE7RUFDekMsSUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7SUFDNUIsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDNUI7RUFDRCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsS0FBSyxDQUFDO0VBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUEsT0FBTyxFQUFBOztFQUU1QixJQUFJLE1BQU0sQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLE1BQU0sQ0FBQyxjQUFjLEtBQUssSUFBSSxJQUFJLE1BQU0sQ0FBQyxjQUFjLEtBQUssSUFBSSxDQUFDLEVBQUU7SUFDN0gsTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUM3Qjs7O0VBR0RDLElBQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztFQUNqQ0EsSUFBTSxRQUFRLEdBQUcsWUFBWSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7OztFQUdwRCxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUU7SUFDckIsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RCLElBQUksUUFBUSxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsYUFBYSxJQUFJLEdBQUcsRUFBRTtNQUMvRCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsRUFBQSxZQUFZLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUE7TUFDdkQsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLFlBQUc7UUFDcEMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFBLE9BQU8sRUFBQTtRQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztPQUN6QixFQUFFLEdBQUcsQ0FBQyxDQUFDO0tBQ1Q7SUFDRCxJQUFJLFFBQVEsR0FBRyxHQUFHLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsSUFBSSxHQUFHLEVBQUU7TUFDL0QsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLEVBQUEsWUFBWSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFBO01BQ3ZELE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzdCO0dBQ0Y7O0VBRUQsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7RUFDakMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxZQUFHO0lBQ2hCLElBQUksTUFBTSxFQUFFLEVBQUEsTUFBTSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsRUFBQTtHQUN0QyxDQUFDLENBQUM7O0VBRUgsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEtBQUssSUFBSSxDQUFDLGNBQWMsRUFBRTtJQUNySSxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztJQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztJQUNyQixPQUFPO0dBQ1I7RUFDRCxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztFQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQzs7RUFFckJELElBQUksVUFBVSxDQUFDO0VBQ2YsSUFBSSxNQUFNLENBQUMsWUFBWSxFQUFFO0lBQ3ZCLFVBQVUsR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDLFNBQVMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7R0FDekQsTUFBTTtJQUNMLFVBQVUsR0FBRyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztHQUNyQztFQUNELElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRTtJQUNuQixJQUFJLFVBQVUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsRUFBRTtNQUN2QyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztNQUNuQyxPQUFPO0tBQ1IsTUFBTSxJQUFJLFVBQVUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsRUFBRTtNQUM5QyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUU7UUFDMUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO09BQ3JDLE1BQU07UUFDTCxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO09BQzFDO01BQ0QsT0FBTztLQUNSOztJQUVELElBQUksTUFBTSxDQUFDLGdCQUFnQixFQUFFO01BQzNCLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzlCQyxJQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzVDQSxJQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDOztRQUU1Q0EsSUFBTSxRQUFRLEdBQUcsYUFBYSxDQUFDLFFBQVEsR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDO1FBQ2pFQSxJQUFNLElBQUksR0FBRyxhQUFhLENBQUMsSUFBSSxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUM7UUFDckQsTUFBTSxDQUFDLFFBQVEsR0FBRyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDO1FBQ3JCLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsTUFBTSxDQUFDLHVCQUF1QixFQUFFO1VBQzlELE1BQU0sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO1NBQ3JCOzs7UUFHRCxJQUFJLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsYUFBYSxDQUFDLElBQUksSUFBSSxHQUFHLEVBQUU7VUFDMUQsTUFBTSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7U0FDckI7T0FDRixNQUFNO1FBQ0wsTUFBTSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7T0FDckI7TUFDRCxNQUFNLENBQUMsUUFBUSxJQUFJLE1BQU0sQ0FBQyw2QkFBNkIsQ0FBQzs7TUFFeEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO01BQzNCRCxJQUFJLGdCQUFnQixHQUFHLElBQUksR0FBRyxNQUFNLENBQUMscUJBQXFCLENBQUM7TUFDM0RDLElBQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQzs7TUFFNURELElBQUksV0FBVyxHQUFHLE1BQU0sQ0FBQyxTQUFTLEdBQUcsZ0JBQWdCLENBQUM7TUFDdEQsSUFBSSxHQUFHLEVBQUUsRUFBQSxXQUFXLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBQTtNQUNwQ0EsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDO01BQ3JCQSxJQUFJLG1CQUFtQixDQUFDO01BQ3hCQyxJQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLDJCQUEyQixDQUFDO01BQ3pGLElBQUksV0FBVyxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUUsRUFBRTtRQUN2QyxJQUFJLE1BQU0sQ0FBQyxzQkFBc0IsRUFBRTtVQUNqQyxJQUFJLFdBQVcsR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFLEdBQUcsQ0FBQyxZQUFZLEVBQUU7WUFDdkQsV0FBVyxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUUsR0FBRyxZQUFZLENBQUM7V0FDcEQ7VUFDRCxtQkFBbUIsR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7VUFDNUMsUUFBUSxHQUFHLElBQUksQ0FBQztVQUNoQixJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDO1NBQ2pDLE1BQU07VUFDTCxXQUFXLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ3JDO09BQ0YsTUFBTSxJQUFJLFdBQVcsR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFLEVBQUU7UUFDOUMsSUFBSSxNQUFNLENBQUMsc0JBQXNCLEVBQUU7VUFDakMsSUFBSSxXQUFXLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxHQUFHLFlBQVksRUFBRTtZQUN0RCxXQUFXLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxHQUFHLFlBQVksQ0FBQztXQUNwRDtVQUNELG1CQUFtQixHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztVQUM1QyxRQUFRLEdBQUcsSUFBSSxDQUFDO1VBQ2hCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUM7U0FDakMsTUFBTTtVQUNMLFdBQVcsR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDckM7T0FDRixNQUFNLElBQUksTUFBTSxDQUFDLGNBQWMsRUFBRTtRQUNoQ0QsSUFBSSxTQUFTLENBQUM7UUFDZCxLQUFLQSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtVQUMzQyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRTtZQUM5QixTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2QsTUFBTTtXQUNQO1NBQ0Y7UUFDRCxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsSUFBSSxNQUFNLENBQUMsY0FBYyxLQUFLLE1BQU0sRUFBRTtVQUNySSxXQUFXLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ25DLE1BQU07VUFDTCxXQUFXLEdBQUcsUUFBUSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUN2QztRQUNELElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBQSxXQUFXLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBQTtPQUN0Qzs7TUFFRCxJQUFJLE1BQU0sQ0FBQyxRQUFRLEtBQUssQ0FBQyxFQUFFO1FBQ3pCLElBQUksR0FBRyxFQUFFO1VBQ1AsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxTQUFTLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ2xGLE1BQU07VUFDTCxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxTQUFTLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ2pGO09BQ0YsTUFBTSxJQUFJLE1BQU0sQ0FBQyxjQUFjLEVBQUU7UUFDaEMsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3BCLE9BQU87T0FDUjs7TUFFRCxJQUFJLE1BQU0sQ0FBQyxzQkFBc0IsSUFBSSxRQUFRLEVBQUU7UUFDN0MsTUFBTSxDQUFDLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUN2QyxNQUFNLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN6QixNQUFNLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN4QixVQUFVLENBQUMsYUFBYSxDQUFDLFlBQUc7VUFDMUIsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxFQUFBLE9BQU8sRUFBQTtVQUNqRCxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7O1VBRTlCLE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1VBQ25DLE1BQU0sQ0FBQyxZQUFZLENBQUMsbUJBQW1CLENBQUMsQ0FBQztVQUN6QyxVQUFVLENBQUMsYUFBYSxDQUFDLFlBQUc7WUFDMUIsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFBLE9BQU8sRUFBQTtZQUNwQixNQUFNLENBQUMsYUFBYSxFQUFFLENBQUM7V0FDeEIsQ0FBQyxDQUFDO1NBQ0osQ0FBQyxDQUFDO09BQ0osTUFBTSxJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUU7UUFDMUIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNuQyxNQUFNLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDdkMsTUFBTSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNqQyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7VUFDckIsTUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7VUFDeEIsVUFBVSxDQUFDLGFBQWEsQ0FBQyxZQUFHO1lBQzFCLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBQSxPQUFPLEVBQUE7WUFDcEIsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO1dBQ3hCLENBQUMsQ0FBQztTQUNKO09BQ0YsTUFBTTtRQUNMLE1BQU0sQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUM7T0FDcEM7O01BRUQsTUFBTSxDQUFDLGlCQUFpQixFQUFFLENBQUM7TUFDM0IsTUFBTSxDQUFDLG1CQUFtQixFQUFFLENBQUM7TUFDN0IsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO0tBQzFCO0lBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsSUFBSSxRQUFRLElBQUksTUFBTSxDQUFDLFlBQVksRUFBRTtNQUMvRCxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7TUFDeEIsTUFBTSxDQUFDLGlCQUFpQixFQUFFLENBQUM7TUFDM0IsTUFBTSxDQUFDLG1CQUFtQixFQUFFLENBQUM7TUFDN0IsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO0tBQzFCO0lBQ0QsT0FBTztHQUNSOzs7RUFHREEsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO0VBQ2xCQSxJQUFJLFNBQVMsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzFDLEtBQUtBLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksTUFBTSxDQUFDLGNBQWMsRUFBRTtJQUNqRSxJQUFJLE9BQU8sVUFBVSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssV0FBVyxFQUFFO01BQ2hFLElBQUksVUFBVSxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxVQUFVLEdBQUcsVUFBVSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUU7UUFDckYsU0FBUyxHQUFHLENBQUMsQ0FBQztRQUNkLFNBQVMsR0FBRyxVQUFVLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7T0FDbkU7S0FDRixNQUFNLElBQUksVUFBVSxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRTtNQUN0QyxTQUFTLEdBQUcsQ0FBQyxDQUFDO01BQ2QsU0FBUyxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ25GO0dBQ0Y7OztFQUdEQyxJQUFNLEtBQUssR0FBRyxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLElBQUksU0FBUyxDQUFDOztFQUUvRCxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFOztJQUVsQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRTtNQUN0QixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztNQUNuQyxPQUFPO0tBQ1I7SUFDRCxJQUFJLE1BQU0sQ0FBQyxjQUFjLEtBQUssTUFBTSxFQUFFO01BQ3BDLElBQUksS0FBSyxJQUFJLE1BQU0sQ0FBQyxlQUFlLEVBQUUsRUFBQSxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBQTtXQUNsRixFQUFBLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBQTtLQUNoQztJQUNELElBQUksTUFBTSxDQUFDLGNBQWMsS0FBSyxNQUFNLEVBQUU7TUFDcEMsSUFBSSxLQUFLLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUMsRUFBRSxFQUFBLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFBO1dBQ3ZGLEVBQUEsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFBO0tBQ2hDO0dBQ0YsTUFBTTs7SUFFTCxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRTtNQUN2QixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztNQUNuQyxPQUFPO0tBQ1I7SUFDRCxJQUFJLE1BQU0sQ0FBQyxjQUFjLEtBQUssTUFBTSxFQUFFO01BQ3BDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztLQUNuRDtJQUNELElBQUksTUFBTSxDQUFDLGNBQWMsS0FBSyxNQUFNLEVBQUU7TUFDcEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUMzQjtHQUNGO0NBQ0YsQ0FBQzs7QUFFRixJQUFJLFFBQVEsR0FBRyxZQUFZO0VBQ3pCQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7O0VBRXBCLElBQVEsTUFBTTtFQUFFLElBQUEsRUFBRTtFQUFFLElBQUEsY0FBYztFQUFFLElBQUEsY0FBYyx5QkFBNUM7O0VBRU4sSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLFdBQVcsS0FBSyxDQUFDLEVBQUUsRUFBQSxPQUFPLEVBQUE7OztFQUd2QyxJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUU7SUFDdEIsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO0dBQ3hCOzs7RUFHRCxNQUFNLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztFQUM3QixNQUFNLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQzs7RUFFN0IsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO0VBQ3BCLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQzs7RUFFdEIsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFO0lBQ25CQSxJQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUN4RyxNQUFNLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzdCLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQzs7SUFFekIsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO01BQ3JCLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0tBQzNCO0dBQ0YsTUFBTTtJQUNMLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzdCLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxLQUFLLE1BQU0sSUFBSSxNQUFNLENBQUMsYUFBYSxHQUFHLENBQUMsS0FBSyxNQUFNLENBQUMsS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUU7TUFDbEgsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztLQUMxRCxNQUFNO01BQ0wsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDcEQ7R0FDRjs7RUFFRCxNQUFNLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztFQUN2QyxNQUFNLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztDQUN4QyxDQUFDOztBQUVGLElBQUksT0FBTyxHQUFHLFVBQVUsQ0FBQyxFQUFFO0VBQ3pCQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7RUFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUU7SUFDdEIsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxFQUFBLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxFQUFBO0lBQ3BELElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyx3QkFBd0IsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFO01BQzlELENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztNQUNwQixDQUFDLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztLQUM5QjtHQUNGO0NBQ0YsQ0FBQzs7QUFFRixTQUFTLFlBQVksR0FBRztFQUN0QkEsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDOztFQUVwQixJQUFRLE1BQU07RUFBRSxJQUFBLFdBQVc7RUFBRSxJQUFBLEVBQUU7RUFBRSxJQUFBLFNBQVMsb0JBQXBDOztFQUVOO0lBQ0UsTUFBTSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hELE1BQU0sQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5QyxNQUFNLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7R0FDN0M7O0VBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztFQUV0Q0EsSUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixLQUFLLFdBQVcsR0FBRyxFQUFFLEdBQUcsU0FBUyxDQUFDO0VBQ3pFQSxJQUFNLE9BQU8sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQzs7O0VBR2hDO0lBQ0UsSUFBSSxTQUFTLENBQUMsRUFBRSxFQUFFO01BQ2hCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUM7TUFDdkUsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxRQUFRLEVBQUUsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO01BQ3RHLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxNQUFNLEdBQUcsUUFBUSxFQUFFLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUNuRyxNQUFNO01BQ0wsSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFO1FBQ25CQSxJQUFNLGVBQWUsR0FBRyxXQUFXLENBQUMsS0FBSyxLQUFLLGNBQWMsSUFBSSxTQUFTLENBQUMsZUFBZSxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxHQUFHLEtBQUssQ0FBQztRQUNqSyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsWUFBWSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ2pGLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkUsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLFVBQVUsRUFBRSxlQUFlLENBQUMsQ0FBQztPQUM5RTtNQUNELElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLE1BQU0sTUFBTSxDQUFDLGFBQWEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQzlILE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNqRSxRQUFRLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDcEUsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO09BQ2hFO0tBQ0Y7O0lBRUQsSUFBSSxNQUFNLENBQUMsYUFBYSxJQUFJLE1BQU0sQ0FBQyx3QkFBd0IsRUFBRTtNQUMzRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDeEQ7R0FDRjs7O0VBR0QsTUFBTSxDQUFDLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxRQUFRLENBQUMsQ0FBQztDQUM5Qzs7QUFFRCxTQUFTLFlBQVksR0FBRztFQUN0QkEsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDOztFQUVwQixJQUFRLE1BQU07RUFBRSxJQUFBLFdBQVc7RUFBRSxJQUFBLEVBQUU7RUFBRSxJQUFBLFNBQVMsb0JBQXBDOztFQUVOQSxJQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsaUJBQWlCLEtBQUssV0FBVyxHQUFHLEVBQUUsR0FBRyxTQUFTLENBQUM7RUFDekVBLElBQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDOzs7RUFHaEM7SUFDRSxJQUFJLFNBQVMsQ0FBQyxFQUFFLEVBQUU7TUFDaEIsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztNQUMxRSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsTUFBTSxHQUFHLFFBQVEsRUFBRSxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7TUFDekcsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxRQUFRLEVBQUUsbUJBQW1CLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQ3RHLE1BQU07TUFDTCxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUU7UUFDbkJBLElBQU0sZUFBZSxHQUFHLFdBQVcsQ0FBQyxLQUFLLEtBQUssY0FBYyxJQUFJLFNBQVMsQ0FBQyxlQUFlLElBQUksTUFBTSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEdBQUcsS0FBSyxDQUFDO1FBQ2pLLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxZQUFZLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDcEYsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMxRSxNQUFNLENBQUMsbUJBQW1CLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsVUFBVSxFQUFFLGVBQWUsQ0FBQyxDQUFDO09BQ2pGO01BQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sTUFBTSxNQUFNLENBQUMsYUFBYSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDOUgsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3BFLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2RSxRQUFRLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7T0FDbkU7S0FDRjs7SUFFRCxJQUFJLE1BQU0sQ0FBQyxhQUFhLElBQUksTUFBTSxDQUFDLHdCQUF3QixFQUFFO01BQzNELE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztLQUMzRDtHQUNGOzs7RUFHRCxNQUFNLENBQUMsR0FBRyxDQUFDLHVCQUF1QixFQUFFLFFBQVEsQ0FBQyxDQUFDO0NBQy9DOztBQUVELElBQUlnQixRQUFNLEdBQUc7RUFDWCxjQUFBLFlBQVk7RUFDWixjQUFBLFlBQVk7Q0FDYixDQUFDOztBQUVGLFNBQVMsYUFBYSxDQUFDLFdBQVcsRUFBRTs7RUFFbEMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFBLE9BQU8sU0FBUyxDQUFDLEVBQUE7RUFDbkNqQixJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUM7RUFDdkJDLElBQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztFQUNsQixNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLEtBQUssRUFBRTtJQUN2QyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQ3BCLENBQUMsQ0FBQztFQUNILE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFNBQUcsUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFBLENBQUMsQ0FBQztFQUN6RCxLQUFLRCxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUN6Q0MsSUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hCLElBQUksS0FBSyxJQUFJLE1BQU0sQ0FBQyxVQUFVLElBQUksQ0FBQyxVQUFVLEVBQUU7TUFDN0MsVUFBVSxHQUFHLEtBQUssQ0FBQztLQUNwQjtHQUNGO0VBQ0QsT0FBTyxVQUFVLElBQUksS0FBSyxDQUFDO0NBQzVCOztBQUVELElBQUksYUFBYSxHQUFHLFlBQVk7RUFDOUJBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztFQUNwQixJQUFRLFdBQVc7RUFBRSxJQUFBLFlBQVk7RUFBRSxJQUFBLE1BQU0saUJBQW5DO0VBQ05BLElBQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUM7RUFDdkMsSUFBSSxDQUFDLFdBQVcsS0FBSyxXQUFXLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBQSxPQUFPLEVBQUE7O0VBRW5GQSxJQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7RUFDOUMsSUFBSSxVQUFVLElBQUksTUFBTSxDQUFDLGlCQUFpQixLQUFLLFVBQVUsRUFBRTtJQUN6REEsSUFBTSxpQkFBaUIsR0FBRyxVQUFVLElBQUksV0FBVyxHQUFHLFdBQVcsQ0FBQyxVQUFVLENBQUMsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDO0lBQ3RHQSxJQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsSUFBSSxLQUFLLGlCQUFpQixDQUFDLGFBQWEsS0FBSyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7O0lBRTlGLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxpQkFBaUIsQ0FBQyxDQUFDOztJQUUvQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtNQUNuQixjQUFjLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFjO01BQzVDLGNBQWMsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWM7TUFDNUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYztLQUM3QyxDQUFDLENBQUM7O0lBRUgsTUFBTSxDQUFDLGlCQUFpQixHQUFHLFVBQVUsQ0FBQzs7SUFFdEMsSUFBSSxXQUFXLEVBQUU7TUFDZkEsSUFBTSxRQUFRLEdBQUcsV0FBVyxHQUFHLFlBQVksQ0FBQztNQUM1QyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7TUFDckIsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO01BQ3BCLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztNQUN0QixNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsR0FBRyxZQUFZLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQ25EO0dBQ0Y7Q0FDRixDQUFDOztBQUVGLElBQUksV0FBVyxHQUFHLEVBQUUsZUFBQSxhQUFhLEVBQUUsQ0FBQzs7QUFFcEMsSUFBSSxVQUFVLEdBQUcsWUFBWTtFQUMzQkEsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0VBQ3BCLElBQVEsVUFBVTtFQUFFLElBQUEsTUFBTTtFQUFFLElBQUEsR0FBRztFQUFFLElBQUEsR0FBRyxjQUE5QjtFQUNOQSxJQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7O0VBRXBCLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDOztFQUVoQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUU7SUFDbkIsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztHQUM1QjtFQUNELElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFO0lBQ3RCLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7R0FDN0I7RUFDRCxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUU7SUFDckIsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztHQUM3QjtFQUNELElBQUksR0FBRyxFQUFFO0lBQ1AsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUN0QjtFQUNELElBQUksTUFBTSxDQUFDLGVBQWUsR0FBRyxDQUFDLEVBQUU7SUFDOUIsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztHQUMzQjtFQUNELElBQUksUUFBUSxDQUFDLE9BQU8sRUFBRTtJQUNwQixRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0dBQzFCO0VBQ0QsSUFBSSxRQUFRLENBQUMsR0FBRyxFQUFFO0lBQ2hCLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDdEI7O0VBRUQsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFO0lBQ3hFLFFBQVEsQ0FBQyxJQUFJLEVBQUMsTUFBSyxJQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUEsRUFBRyxDQUFDO0dBQzFDOztFQUVELFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBQyxNQUFNLEVBQUU7SUFDeEIsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsc0JBQXNCLEdBQUcsTUFBTSxDQUFDLENBQUM7R0FDekQsQ0FBQyxDQUFDOztFQUVILEdBQUcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0NBQ3BDLENBQUM7O0FBRUYsSUFBSSxhQUFhLEdBQUcsWUFBWTtFQUM5QkEsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0VBQ3BCLElBQVEsR0FBRztFQUFFLElBQUEsVUFBVSxxQkFBakI7O0VBRU4sR0FBRyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Q0FDdkMsQ0FBQzs7QUFFRixJQUFJLE9BQU8sR0FBRyxFQUFFLFlBQUEsVUFBVSxFQUFFLGVBQUEsYUFBYSxFQUFFLENBQUM7O0FBRTVDLElBQUksU0FBUyxHQUFHLFVBQVUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRTtFQUNqRkQsSUFBSSxLQUFLLENBQUM7RUFDVixTQUFTLE9BQU8sR0FBRztJQUNqQixJQUFJLFFBQVEsRUFBRSxFQUFBLFFBQVEsRUFBRSxDQUFDLEVBQUE7R0FDMUI7RUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxDQUFDLGdCQUFnQixFQUFFO0lBQzFDLElBQUksR0FBRyxFQUFFO01BQ1AsS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO01BQzNCLEtBQUssQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDO01BQ3ZCLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO01BQ3hCLElBQUksS0FBSyxFQUFFO1FBQ1QsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7T0FDckI7TUFDRCxJQUFJLE1BQU0sRUFBRTtRQUNWLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO09BQ3ZCO01BQ0QsSUFBSSxHQUFHLEVBQUU7UUFDUCxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztPQUNqQjtLQUNGLE1BQU07TUFDTCxPQUFPLEVBQUUsQ0FBQztLQUNYO0dBQ0YsTUFBTTs7SUFFTCxPQUFPLEVBQUUsQ0FBQztHQUNYO0NBQ0YsQ0FBQzs7QUFFRixJQUFJLGFBQWEsR0FBRyxZQUFZO0VBQzlCQyxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7RUFDcEIsTUFBTSxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztFQUM3QyxTQUFTLE9BQU8sR0FBRztJQUNqQixJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsSUFBSSxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUEsT0FBTyxFQUFBO0lBQ3hFLElBQUksTUFBTSxDQUFDLFlBQVksS0FBSyxTQUFTLEVBQUUsRUFBQSxNQUFNLENBQUMsWUFBWSxJQUFJLENBQUMsQ0FBQyxFQUFBO0lBQ2hFLElBQUksTUFBTSxDQUFDLFlBQVksS0FBSyxNQUFNLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRTtNQUN0RCxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsbUJBQW1CLEVBQUUsRUFBQSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBQTtNQUN2RCxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQzVCO0dBQ0Y7RUFDRCxLQUFLRCxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7SUFDdERDLElBQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkMsTUFBTSxDQUFDLFNBQVM7TUFDZCxPQUFPO01BQ1AsT0FBTyxDQUFDLFVBQVUsSUFBSSxPQUFPLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQztNQUNqRCxPQUFPLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDO01BQ2hELE9BQU8sQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUM7TUFDOUMsSUFBSTtNQUNKLE9BQU87S0FDUixDQUFDO0dBQ0g7Q0FDRixDQUFDOztBQUVGLElBQUksTUFBTSxHQUFHO0VBQ1gsV0FBQSxTQUFTO0VBQ1QsZUFBQSxhQUFhO0NBQ2QsQ0FBQzs7QUFFRixJQUFJLFFBQVEsR0FBRztFQUNiLElBQUksRUFBRSxJQUFJO0VBQ1YsU0FBUyxFQUFFLFlBQVk7RUFDdkIsaUJBQWlCLEVBQUUsV0FBVztFQUM5QixZQUFZLEVBQUUsQ0FBQztFQUNmLEtBQUssRUFBRSxHQUFHOzs7RUFHVixxQkFBcUIsRUFBRSxLQUFLO0VBQzVCLHFCQUFxQixFQUFFLEVBQUU7OztFQUd6QixRQUFRLEVBQUUsS0FBSztFQUNmLGdCQUFnQixFQUFFLElBQUk7RUFDdEIscUJBQXFCLEVBQUUsQ0FBQztFQUN4QixzQkFBc0IsRUFBRSxJQUFJO0VBQzVCLDJCQUEyQixFQUFFLENBQUM7RUFDOUIsNkJBQTZCLEVBQUUsQ0FBQztFQUNoQyxjQUFjLEVBQUUsS0FBSztFQUNyQix1QkFBdUIsRUFBRSxJQUFJOzs7RUFHN0IsVUFBVSxFQUFFLEtBQUs7OztFQUdqQixjQUFjLEVBQUUsS0FBSzs7O0VBR3JCLGdCQUFnQixFQUFFLEtBQUs7OztFQUd2QixNQUFNLEVBQUUsT0FBTzs7O0VBR2YsV0FBVyxFQUFFLFNBQVM7OztFQUd0QixZQUFZLEVBQUUsQ0FBQztFQUNmLGFBQWEsRUFBRSxDQUFDO0VBQ2hCLGVBQWUsRUFBRSxDQUFDO0VBQ2xCLG1CQUFtQixFQUFFLFFBQVE7RUFDN0IsY0FBYyxFQUFFLENBQUM7RUFDakIsY0FBYyxFQUFFLEtBQUs7RUFDckIsa0JBQWtCLEVBQUUsQ0FBQztFQUNyQixpQkFBaUIsRUFBRSxDQUFDO0VBQ3BCLG1CQUFtQixFQUFFLElBQUk7OztFQUd6QixZQUFZLEVBQUUsS0FBSzs7O0VBR25CLFVBQVUsRUFBRSxDQUFDO0VBQ2IsVUFBVSxFQUFFLEVBQUU7RUFDZCxhQUFhLEVBQUUsSUFBSTtFQUNuQixXQUFXLEVBQUUsSUFBSTtFQUNqQixVQUFVLEVBQUUsSUFBSTtFQUNoQixlQUFlLEVBQUUsR0FBRztFQUNwQixZQUFZLEVBQUUsR0FBRztFQUNqQixZQUFZLEVBQUUsSUFBSTtFQUNsQixjQUFjLEVBQUUsSUFBSTtFQUNwQixTQUFTLEVBQUUsQ0FBQztFQUNaLHdCQUF3QixFQUFFLElBQUk7RUFDOUIsbUJBQW1CLEVBQUUsS0FBSzs7O0VBRzFCLGlCQUFpQixFQUFFLElBQUk7OztFQUd2QixVQUFVLEVBQUUsSUFBSTtFQUNoQixlQUFlLEVBQUUsSUFBSTs7O0VBR3JCLG1CQUFtQixFQUFFLEtBQUs7RUFDMUIscUJBQXFCLEVBQUUsS0FBSzs7O0VBRzVCLFVBQVUsRUFBRSxLQUFLOzs7RUFHakIsYUFBYSxFQUFFLElBQUk7RUFDbkIsd0JBQXdCLEVBQUUsSUFBSTtFQUM5QixtQkFBbUIsRUFBRSxLQUFLOzs7RUFHMUIsYUFBYSxFQUFFLElBQUk7RUFDbkIsbUJBQW1CLEVBQUUsSUFBSTs7O0VBR3pCLElBQUksRUFBRSxLQUFLO0VBQ1gsb0JBQW9CLEVBQUUsQ0FBQztFQUN2QixZQUFZLEVBQUUsSUFBSTtFQUNsQixzQkFBc0IsRUFBRSxLQUFLOzs7RUFHN0IsY0FBYyxFQUFFLElBQUk7RUFDcEIsY0FBYyxFQUFFLElBQUk7RUFDcEIsWUFBWSxFQUFFLElBQUk7RUFDbEIsU0FBUyxFQUFFLElBQUk7RUFDZixjQUFjLEVBQUUsbUJBQW1COzs7RUFHbkMsZ0JBQWdCLEVBQUUsSUFBSTs7O0VBR3RCLHNCQUFzQixFQUFFLG1CQUFtQjtFQUMzQyxVQUFVLEVBQUUsY0FBYztFQUMxQixlQUFlLEVBQUUsOEJBQThCO0VBQy9DLGdCQUFnQixFQUFFLHFCQUFxQjtFQUN2Qyx5QkFBeUIsRUFBRSwrQkFBK0I7RUFDMUQsaUJBQWlCLEVBQUUsc0JBQXNCO0VBQ3pDLG1CQUFtQixFQUFFLHdCQUF3QjtFQUM3QyxjQUFjLEVBQUUsbUJBQW1CO0VBQ25DLHVCQUF1QixFQUFFLDZCQUE2QjtFQUN0RCxjQUFjLEVBQUUsbUJBQW1CO0VBQ25DLHVCQUF1QixFQUFFLDZCQUE2QjtFQUN0RCxZQUFZLEVBQUUsZ0JBQWdCOzs7RUFHOUIsa0JBQWtCLEVBQUUsSUFBSTtDQUN6QixDQUFDOztBQUVGLElBQU0sUUFBUTtFQUFxQixpQkFDdEIsR0FBVTs7OztJQUNuQkQsSUFBSSxFQUFFLENBQUM7SUFDUEEsSUFBSSxNQUFNLENBQUM7SUFDWCxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsS0FBSyxNQUFNLEVBQUU7TUFDOUUsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNsQixNQUFNO01BQ0w7TUFBZSxVQUFBLElBQWQsRUFBQSxFQUFJLGNBQUEsTUFBTCxjQUFvQjtLQUNyQjtJQUNELElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBQSxNQUFNLEdBQUcsRUFBRSxDQUFDLEVBQUE7O0lBRXpCLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNsQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBQSxNQUFNLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFBOztJQUVyQ1ksV0FBSyxLQUFBLENBQUMsTUFBQSxNQUFNLENBQUMsQ0FBQzs7O0lBR2RYLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQzs7O0lBR3BCQSxJQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNoRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLENBQUM7OztJQUd0QyxNQUFNLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN2RCxNQUFNLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4RCxNQUFNLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDOzs7SUFHL0NBLElBQU0sR0FBRyxHQUFHWSxHQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNoQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDOztJQUVaLElBQUksQ0FBQyxFQUFFLEVBQUU7TUFDUCxPQUFPLFNBQVMsQ0FBQztLQUNsQjs7SUFFRCxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO01BQ2xCWixJQUFNLE9BQU8sR0FBRyxFQUFFLENBQUM7TUFDbkIsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFDLEtBQUssRUFBRSxXQUFXLEVBQUU7UUFDNUJBLElBQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQ2hFLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztPQUN2QyxDQUFDLENBQUM7TUFDSCxPQUFPLE9BQU8sQ0FBQztLQUNoQjs7SUFFRCxFQUFFLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUNuQixHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQzs7O0lBRzNCQSxJQUFNLFVBQVUsR0FBRyxHQUFHLENBQUMsUUFBUSxFQUFDLEdBQUUsSUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQSxFQUFHLENBQUM7OztJQUdsRSxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtNQUNuQixLQUFBLEdBQUc7TUFDSCxJQUFBLEVBQUU7TUFDRixZQUFBLFVBQVU7TUFDVixTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQzs7O01BR3hCLFVBQVUsRUFBRSxFQUFFOzs7TUFHZCxNQUFNLEVBQUVZLEdBQUMsRUFBRTtNQUNYLFVBQVUsRUFBRSxFQUFFO01BQ2QsUUFBUSxFQUFFLEVBQUU7TUFDWixlQUFlLEVBQUUsRUFBRTs7O01BR25CLFlBQVksdUJBQUEsR0FBRztRQUNiLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEtBQUssWUFBWSxDQUFDO09BQ2pEO01BQ0QsVUFBVSxxQkFBQSxHQUFHO1FBQ1gsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsS0FBSyxVQUFVLENBQUM7T0FDL0M7O01BRUQsR0FBRyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxLQUFLLFlBQVksS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxLQUFLLEtBQUssSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEtBQUssQ0FBQztNQUNuSCxRQUFRLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxhQUFhOzs7TUFHckQsV0FBVyxFQUFFLENBQUM7TUFDZCxTQUFTLEVBQUUsQ0FBQzs7O01BR1osV0FBVyxFQUFFLElBQUk7TUFDakIsS0FBSyxFQUFFLEtBQUs7OztNQUdaLFNBQVMsRUFBRSxDQUFDO01BQ1osUUFBUSxFQUFFLENBQUM7TUFDWCxRQUFRLEVBQUUsQ0FBQztNQUNYLFNBQVMsRUFBRSxLQUFLOzs7TUFHaEIsY0FBYyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYztNQUM1QyxjQUFjLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFjOzs7TUFHNUMsV0FBVyxHQUFHLFNBQVMsV0FBVyxHQUFHO1FBQ25DWixJQUFNLEtBQUssR0FBRyxDQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDdERELElBQUksT0FBTyxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNwRCxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFO1VBQ25DLE9BQU8sR0FBRyxDQUFDLGFBQWEsRUFBRSxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDdkQsTUFBTSxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUU7VUFDNUMsT0FBTyxHQUFHLENBQUMsZUFBZSxFQUFFLGVBQWUsRUFBRSxhQUFhLENBQUMsQ0FBQztTQUM3RDs7UUFFRCxPQUFPO1VBQ0wsS0FBSyxFQUFFLFNBQVMsQ0FBQyxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQztVQUM5RSxJQUFJLEVBQUUsU0FBUyxDQUFDLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDO1VBQzdFLEdBQUcsRUFBRSxTQUFTLENBQUMsS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDN0UsQ0FBQztPQUNILEVBQUUsQ0FBQztNQUNKLGVBQWUsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxlQUFlLENBQUM7OztNQUdsRCxVQUFVLEVBQUUsSUFBSTs7O01BR2hCLGNBQWMsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWM7O01BRTVDLE9BQU8sRUFBRTtRQUNQLE1BQU0sRUFBRSxDQUFDO1FBQ1QsTUFBTSxFQUFFLENBQUM7UUFDVCxRQUFRLEVBQUUsQ0FBQztRQUNYLFFBQVEsRUFBRSxDQUFDO1FBQ1gsSUFBSSxFQUFFLENBQUM7T0FDUjs7O01BR0QsWUFBWSxFQUFFLEVBQUU7TUFDaEIsWUFBWSxFQUFFLENBQUM7O0tBRWhCLENBQUMsQ0FBQzs7O0lBR0gsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDOzs7SUFHcEIsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtNQUN0QixNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7S0FDZjs7O0lBR0QsT0FBTyxNQUFNLENBQUM7R0FDZjs7Ozs0Q0FBQTtFQUNELG1CQUFBLGFBQWEsNkJBQUc7SUFDZEMsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLElBQVEsTUFBTTtJQUFFLElBQUEsTUFBTTtJQUFFLElBQUEsVUFBVTtJQUFRLElBQUEsVUFBVTtJQUFFLElBQUEsV0FBVyxzQkFBM0Q7SUFDTkQsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ1osSUFBSSxNQUFNLENBQUMsY0FBYyxFQUFFO01BQ3pCQSxJQUFJLFNBQVMsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsZUFBZSxDQUFDO01BQ3BEQSxJQUFJLFNBQVMsQ0FBQztNQUNkLEtBQUtBLElBQUksQ0FBQyxHQUFHLFdBQVcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUN2RCxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtVQUMzQixTQUFTLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQztVQUN2QyxHQUFHLElBQUksQ0FBQyxDQUFDO1VBQ1QsSUFBSSxTQUFTLEdBQUcsVUFBVSxFQUFFLEVBQUEsU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFBO1NBQzlDO09BQ0Y7TUFDRCxLQUFLQSxJQUFJTyxHQUFDLEdBQUcsV0FBVyxHQUFHLENBQUMsRUFBRUEsR0FBQyxJQUFJLENBQUMsRUFBRUEsR0FBQyxJQUFJLENBQUMsRUFBRTtRQUM1QyxJQUFJLE1BQU0sQ0FBQ0EsR0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7VUFDM0IsU0FBUyxJQUFJLE1BQU0sQ0FBQ0EsR0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDO1VBQ3ZDLEdBQUcsSUFBSSxDQUFDLENBQUM7VUFDVCxJQUFJLFNBQVMsR0FBRyxVQUFVLEVBQUUsRUFBQSxTQUFTLEdBQUcsSUFBSSxDQUFDLEVBQUE7U0FDOUM7T0FDRjtLQUNGLE1BQU07TUFDTCxLQUFLUCxJQUFJTyxHQUFDLEdBQUcsV0FBVyxHQUFHLENBQUMsRUFBRUEsR0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUVBLEdBQUMsSUFBSSxDQUFDLEVBQUU7UUFDdkQsSUFBSSxVQUFVLENBQUNBLEdBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsR0FBRyxVQUFVLEVBQUU7VUFDeEQsR0FBRyxJQUFJLENBQUMsQ0FBQztTQUNWO09BQ0Y7S0FDRjtJQUNELE9BQU8sR0FBRyxDQUFDO0dBQ1osQ0FBQTtFQUNELG1CQUFBLE1BQU0sc0JBQUc7SUFDUE4sSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBQSxPQUFPLEVBQUE7SUFDcEIsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3BCLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDeEIsTUFBTSxDQUFDLG1CQUFtQixFQUFFLENBQUM7O0lBRTdCRCxJQUFJLFlBQVksQ0FBQztJQUNqQixTQUFTLFlBQVksR0FBRztNQUN0QixZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7TUFDbEcsTUFBTSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztNQUNsQyxNQUFNLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztNQUMzQixNQUFNLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztLQUM5QjtJQUNEQSxJQUFJLFVBQVUsQ0FBQztJQUNmLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUU7TUFDMUIsWUFBWSxFQUFFLENBQUM7TUFDZixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFO1FBQzVCLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO09BQzNCO0tBQ0YsTUFBTTtNQUNMLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsS0FBSyxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEdBQUcsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRTtRQUNoSSxVQUFVLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztPQUN2RSxNQUFNO1FBQ0wsVUFBVSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO09BQ2pFO01BQ0QsSUFBSSxDQUFDLFVBQVUsRUFBRTtRQUNmLFlBQVksRUFBRSxDQUFDO09BQ2hCO0tBQ0Y7SUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0dBQ3ZCLENBQUE7RUFDRCxtQkFBQSxJQUFJLG9CQUFHO0lBQ0xDLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztJQUNwQixJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUUsRUFBQSxPQUFPLEVBQUE7O0lBRS9CLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7OztJQUcxQixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFO01BQzdCLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQztLQUN4Qjs7O0lBR0QsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDOzs7SUFHcEIsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtNQUN0QixNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7S0FDckI7OztJQUdELE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQzs7O0lBR3BCLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQzs7O0lBR3RCLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUU7TUFDNUIsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO0tBQ3hCOztJQUVELElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUU7TUFDL0IsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO0tBQ3hCOzs7SUFHRCxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO01BQ3RCLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0tBQ3ZHLE1BQU07TUFDTCxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7S0FDakY7OztJQUdELE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQzs7O0lBR3RCLE1BQU0sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDOzs7SUFHMUIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUNyQixDQUFBO0VBQ0QsbUJBQUEsT0FBTyxxQkFBQyxjQUFxQixFQUFFLFdBQWtCLEVBQUU7bURBQTdCLEdBQUcsSUFBSSxDQUFhOzZDQUFBLEdBQUcsSUFBSTs7SUFDL0NELElBQUksTUFBTSxHQUFHLElBQUksQ0FBQztJQUNsQixJQUFRLE1BQU07SUFBRSxJQUFBLEdBQUc7SUFBRSxJQUFBLFVBQVU7SUFBRSxJQUFBLE1BQU0saUJBQWpDO0lBQ04sTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQzs7O0lBRzdCLE1BQU0sQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDOzs7SUFHM0IsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDOzs7SUFHdEIsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFO01BQ2YsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO0tBQ3RCOzs7SUFHRCxJQUFJLFdBQVcsRUFBRTtNQUNmLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQztNQUN2QixHQUFHLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO01BQ3hCLFVBQVUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7TUFDL0IsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRTtRQUMzQixNQUFNO1dBQ0gsV0FBVyxDQUFDO1lBQ1gsTUFBTSxDQUFDLGlCQUFpQjtZQUN4QixNQUFNLENBQUMsZ0JBQWdCO1lBQ3ZCLE1BQU0sQ0FBQyxjQUFjO1lBQ3JCLE1BQU0sQ0FBQyxjQUFjLEVBQ3RCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1dBQ1gsVUFBVSxDQUFDLE9BQU8sQ0FBQztXQUNuQixVQUFVLENBQUMseUJBQXlCLENBQUM7V0FDckMsVUFBVSxDQUFDLG9CQUFvQixDQUFDO1dBQ2hDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO09BQ2xDO0tBQ0Y7O0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzs7O0lBR3ZCLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLFNBQVMsRUFBRTtNQUN0RCxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQ3ZCLENBQUMsQ0FBQzs7SUFFSCxJQUFJLGNBQWMsS0FBSyxLQUFLLEVBQUU7TUFDNUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO01BQzVCLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztNQUNoQyxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO01BQzFCLE1BQU0sR0FBRyxJQUFJLENBQUM7S0FDZjtHQUNGLENBQUE7OztFQW5Ub0IsV0FvVHRCLEdBQUE7O0FBRURDLElBQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxNQUFNO0VBQzdCLEVBQUU7RUFDRixNQUFNO0VBQ04sU0FBUztFQUNUZSxZQUFVO0VBQ1YsS0FBSztFQUNMLElBQUk7RUFDSixVQUFVO0VBQ1YsWUFBWTtFQUNaQyxRQUFNO0VBQ04sV0FBVztFQUNYLE9BQU87RUFDUCxNQUFNO0NBQ1AsQ0FBQzs7QUFFRixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLFdBQVcsRUFBRTtFQUM1QyxRQUFRLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztDQUMzRCxDQUFDLENBQUM7O0FBRUgsUUFBUSxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUM7O0FBRTdCLElBQUksUUFBUSxHQUFHO0VBQ2IsSUFBSSxFQUFFLFFBQVE7RUFDZCxLQUFLLEVBQUU7SUFDTCxNQUFNLEVBQUUsUUFBUTtHQUNqQjtFQUNELE1BQU0sRUFBRTtJQUNOLE1BQU0sRUFBRSxRQUFRO0dBQ2pCO0NBQ0YsQ0FBQzs7QUFFRixJQUFJLFNBQVMsR0FBRztFQUNkLElBQUksRUFBRSxTQUFTO0VBQ2YsS0FBSyxFQUFFO0lBQ0wsT0FBTyxFQUFFLFNBQVM7R0FDbkI7RUFDRCxNQUFNLEVBQUU7SUFDTixPQUFPLEVBQUUsU0FBUztHQUNuQjtDQUNGLENBQUM7O0FBRUYsSUFBSSxTQUFTLEdBQUc7RUFDZCxJQUFJLEVBQUUsU0FBUztFQUNmLEtBQUssRUFBRTtJQUNMLE9BQU8sRUFBRSxTQUFTO0dBQ25CO0VBQ0QsTUFBTSxFQUFFO0lBQ04sT0FBTyxFQUFFLFNBQVM7R0FDbkI7Q0FDRixDQUFDOztBQUVGLElBQUksUUFBUSxHQUFHO0VBQ2IsSUFBSSxFQUFFLFFBQVE7RUFDZCxNQUFNLGlCQUFBLEdBQUc7SUFDUGhCLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztJQUNwQixLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtNQUNuQixNQUFNLEVBQUU7UUFDTixhQUFhLHdCQUFBLEdBQUc7VUFDZCxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxFQUFBLE9BQU8sRUFBQTtVQUMzQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3ZCO1FBQ0Qsd0JBQXdCLG1DQUFBLEdBQUc7VUFDekIsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsRUFBQSxPQUFPLEVBQUE7VUFDM0MsTUFBTSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQ2xDO09BQ0Y7S0FDRixDQUFDLENBQUM7R0FDSjtFQUNELEVBQUUsRUFBRTtJQUNGLElBQUksZUFBQSxHQUFHO01BQ0xBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQzs7TUFFcEIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDOzs7TUFHL0QsTUFBTSxDQUFDLGdCQUFnQixDQUFDLG1CQUFtQixFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsd0JBQXdCLENBQUMsQ0FBQztLQUN0RjtJQUNELE9BQU8sa0JBQUEsR0FBRztNQUNSQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7TUFDcEIsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO01BQ2xFLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxtQkFBbUIsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLHdCQUF3QixDQUFDLENBQUM7S0FDekY7R0FDRjtDQUNGLENBQUM7O0FBRUZBLElBQU1pQixVQUFRLEdBQUc7RUFDZixJQUFJLEVBQUUsTUFBTSxDQUFDLGdCQUFnQixJQUFJLE1BQU0sQ0FBQyxzQkFBc0I7RUFDOUQsTUFBTSxpQkFBQSxDQUFDLE1BQU0sRUFBRSxPQUFZLEVBQUU7cUNBQVAsR0FBRyxFQUFFOztJQUN6QmpCLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQzs7SUFFcEJBLElBQU0sWUFBWSxHQUFHaUIsVUFBUSxDQUFDLElBQUksQ0FBQztJQUNuQ2pCLElBQU0sUUFBUSxHQUFHLElBQUksWUFBWSxDQUFDLFVBQUMsU0FBUyxFQUFFO01BQzVDLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBQyxRQUFRLEVBQUU7UUFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxRQUFRLENBQUMsQ0FBQztPQUN6QyxDQUFDLENBQUM7S0FDSixDQUFDLENBQUM7O0lBRUgsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7TUFDdkIsVUFBVSxFQUFFLE9BQU8sT0FBTyxDQUFDLFVBQVUsS0FBSyxXQUFXLEdBQUcsSUFBSSxHQUFHLE9BQU8sQ0FBQyxVQUFVO01BQ2pGLFNBQVMsRUFBRSxPQUFPLE9BQU8sQ0FBQyxTQUFTLEtBQUssV0FBVyxHQUFHLElBQUksR0FBRyxPQUFPLENBQUMsU0FBUztNQUM5RSxhQUFhLEVBQUUsT0FBTyxPQUFPLENBQUMsYUFBYSxLQUFLLFdBQVcsR0FBRyxJQUFJLEdBQUcsT0FBTyxDQUFDLGFBQWE7S0FDM0YsQ0FBQyxDQUFDOztJQUVILE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztHQUMxQztFQUNELElBQUksZUFBQSxHQUFHO0lBQ0xBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztJQUNwQixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUEsT0FBTyxFQUFBO0lBQzNELElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUU7TUFDaENBLElBQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztNQUM5QyxLQUFLRCxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ25ELE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7T0FDN0M7S0FDRjs7SUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7OztJQUc1RCxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7R0FDckU7RUFDRCxPQUFPLGtCQUFBLEdBQUc7SUFDUkMsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFDLFFBQVEsRUFBRTtNQUMzQyxRQUFRLENBQUMsVUFBVSxFQUFFLENBQUM7S0FDdkIsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0dBQ2hDO0NBQ0YsQ0FBQzs7QUFFRixJQUFJa0IsWUFBVSxHQUFHO0VBQ2YsSUFBSSxFQUFFLFVBQVU7RUFDaEIsTUFBTSxFQUFFO0lBQ04sUUFBUSxFQUFFLEtBQUs7SUFDZixjQUFjLEVBQUUsS0FBSztHQUN0QjtFQUNELE1BQU0saUJBQUEsR0FBRztJQUNQbEIsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO01BQ25CLFFBQVEsRUFBRTtRQUNSLElBQUksRUFBRWlCLFVBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNoQyxNQUFNLEVBQUVBLFVBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNwQyxPQUFPLEVBQUVBLFVBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUN0QyxTQUFTLEVBQUUsRUFBRTtPQUNkO0tBQ0YsQ0FBQyxDQUFDO0dBQ0o7RUFDRCxFQUFFLEVBQUU7SUFDRixJQUFJLGVBQUEsR0FBRztNQUNMakIsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO01BQ3BCLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7S0FDeEI7SUFDRCxPQUFPLGtCQUFBLEdBQUc7TUFDUkEsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO01BQ3BCLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDM0I7R0FDRjtDQUNGLENBQUM7O0FBRUZBLElBQU0sVUFBVSxHQUFHO0VBQ2pCLE1BQU0saUJBQUEsR0FBRzs7SUFFUEEsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3BCQSxJQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQzs7SUFFeEMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFBLE9BQU8sRUFBQTtJQUMvQixPQUEwQixHQUFHLE1BQU0sQ0FBQyxVQUFVO0lBQXRDLElBQUEsT0FBTztJQUFFLElBQUEsT0FBTyxlQUFsQjs7SUFFTixJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtNQUNqQyxJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUU7UUFDdEIsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7T0FDeEMsTUFBTTtRQUNMLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO09BQzNDO0tBQ0Y7SUFDRCxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtNQUNqQyxJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUU7UUFDaEIsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7T0FDeEMsTUFBTTtRQUNMLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO09BQzNDO0tBQ0Y7R0FDRjtFQUNELElBQUksZUFBQSxHQUFHO0lBQ0xBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztJQUNwQkEsSUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7SUFDeEMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUEsT0FBTyxFQUFBOztJQUU5Q0QsSUFBSSxPQUFPLENBQUM7SUFDWkEsSUFBSSxPQUFPLENBQUM7SUFDWixJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7TUFDakIsT0FBTyxHQUFHYSxHQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO01BQzNCO1FBQ0UsTUFBTSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUI7UUFDL0IsT0FBTyxNQUFNLENBQUMsTUFBTSxLQUFLLFFBQVE7UUFDakMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDO1FBQ2xCLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQztRQUMzQztRQUNBLE9BQU8sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7T0FDMUM7S0FDRjtJQUNELElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRTtNQUNqQixPQUFPLEdBQUdBLEdBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7TUFDM0I7UUFDRSxNQUFNLENBQUMsTUFBTSxDQUFDLGlCQUFpQjtRQUMvQixPQUFPLE1BQU0sQ0FBQyxNQUFNLEtBQUssUUFBUTtRQUNqQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUM7UUFDbEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDO1FBQzNDO1FBQ0EsT0FBTyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztPQUMxQztLQUNGOztJQUVELElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO01BQ2pDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQUMsQ0FBQyxFQUFFO1FBQ3RCLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUNuQixJQUFJLE1BQU0sQ0FBQyxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFBLE9BQU8sRUFBQTtRQUNoRCxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7T0FDcEIsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtNQUNqQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFDLENBQUMsRUFBRTtRQUN0QixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDbkIsSUFBSSxNQUFNLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBQSxPQUFPLEVBQUE7UUFDdEQsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO09BQ3BCLENBQUMsQ0FBQztLQUNKOztJQUVELEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRTtNQUM5QixTQUFBLE9BQU87TUFDUCxNQUFNLEVBQUUsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUM7TUFDN0IsU0FBQSxPQUFPO01BQ1AsTUFBTSxFQUFFLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDO0tBQzlCLENBQUMsQ0FBQztHQUNKO0VBQ0QsT0FBTyxrQkFBQSxHQUFHO0lBQ1JaLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztJQUNwQixPQUEwQixHQUFHLE1BQU0sQ0FBQyxVQUFVO0lBQXRDLElBQUEsT0FBTztJQUFFLElBQUEsT0FBTyxlQUFsQjtJQUNOLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7TUFDN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztNQUNyQixPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQzdEO0lBQ0QsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtNQUM3QixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO01BQ3JCLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDN0Q7R0FDRjtDQUNGLENBQUM7O0FBRUYsSUFBSSxZQUFZLEdBQUc7RUFDakIsSUFBSSxFQUFFLFlBQVk7RUFDbEIsTUFBTSxFQUFFO0lBQ04sVUFBVSxFQUFFO01BQ1YsTUFBTSxFQUFFLElBQUk7TUFDWixNQUFNLEVBQUUsSUFBSTs7TUFFWixXQUFXLEVBQUUsS0FBSztNQUNsQixhQUFhLEVBQUUsd0JBQXdCO01BQ3ZDLFdBQVcsRUFBRSxzQkFBc0I7S0FDcEM7R0FDRjtFQUNELE1BQU0saUJBQUEsR0FBRztJQUNQQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDcEIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7TUFDbkIsVUFBVSxFQUFFO1FBQ1YsSUFBSSxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNsQyxNQUFNLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3RDLE9BQU8sRUFBRSxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7T0FDekM7S0FDRixDQUFDLENBQUM7R0FDSjtFQUNELEVBQUUsRUFBRTtJQUNGLElBQUksZUFBQSxHQUFHO01BQ0xBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztNQUNwQixNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO01BQ3pCLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUM7S0FDNUI7SUFDRCxNQUFNLGlCQUFBLEdBQUc7TUFDUEEsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO01BQ3BCLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUM7S0FDNUI7SUFDRCxRQUFRLG1CQUFBLEdBQUc7TUFDVEEsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO01BQ3BCLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUM7S0FDNUI7SUFDRCxPQUFPLGtCQUFBLEdBQUc7TUFDUkEsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO01BQ3BCLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDN0I7SUFDRCxLQUFLLGdCQUFBLENBQUMsQ0FBQyxFQUFFO01BQ1BBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztNQUNwQixPQUEwQixHQUFHLE1BQU0sQ0FBQyxVQUFVO01BQXRDLElBQUEsT0FBTztNQUFFLElBQUEsT0FBTyxlQUFsQjtNQUNOO1FBQ0UsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsV0FBVztRQUNwQyxDQUFDWSxHQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUM7UUFDeEIsQ0FBQ0EsR0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDO1FBQ3hCO1FBQ0EsSUFBSSxPQUFPLEVBQUUsRUFBQSxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUE7UUFDdkUsSUFBSSxPQUFPLEVBQUUsRUFBQSxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUE7T0FDeEU7S0FDRjtHQUNGO0NBQ0YsQ0FBQzs7QUFFRlosSUFBTSxVQUFVLEdBQUc7RUFDakIsTUFBTSxpQkFBQSxHQUFHOztJQUVQQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDcEJBLElBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDO0lBQ3hDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLEVBQUEsT0FBTyxFQUFBO0lBQ2hIQSxJQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQzs7SUFFbENELElBQUksT0FBTyxDQUFDO0lBQ1pDLElBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7SUFDekosSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtNQUN0QixPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFlBQVksSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO01BQy9GLElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxFQUFFO1FBQ2xFLE9BQU8sS0FBSyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7T0FDL0Q7TUFDRCxJQUFJLE9BQU8sR0FBRyxLQUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUEsT0FBTyxJQUFJLEtBQUssQ0FBQyxFQUFBO01BQzFDLElBQUksT0FBTyxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsS0FBSyxTQUFTLEVBQUUsRUFBQSxPQUFPLEdBQUcsS0FBSyxHQUFHLE9BQU8sQ0FBQyxFQUFBO0tBQzFGLE1BQU0sSUFBSSxPQUFPLE1BQU0sQ0FBQyxTQUFTLEtBQUssV0FBVyxFQUFFO01BQ2xELE9BQU8sR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDO0tBQzVCLE1BQU07TUFDTCxPQUFPLEdBQUcsTUFBTSxDQUFDLFdBQVcsSUFBSSxDQUFDLENBQUM7S0FDbkM7O0lBRUQsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLFNBQVMsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO01BQ2xHQSxJQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQztNQUMxQyxJQUFJLE1BQU0sQ0FBQyxjQUFjLEVBQUU7UUFDekIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLEdBQUcsWUFBWSxHQUFHLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pHLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxHQUFHLE9BQU8sR0FBRyxRQUFRLEdBQUUsQ0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLFVBQVUsR0FBRyxDQUFDLFFBQUcsRUFBRSxDQUFDO09BQzlGO01BQ0QsT0FBTyxDQUFDLFdBQVcsRUFBQyxDQUFHLE1BQU0sQ0FBQyxpQkFBaUIsT0FBRSxJQUFFLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQSxXQUFPLElBQUUsTUFBTSxDQUFDLGlCQUFpQixDQUFBLGdCQUFZLElBQUUsTUFBTSxDQUFDLGlCQUFpQixDQUFBLFdBQU8sSUFBRSxNQUFNLENBQUMsaUJBQWlCLENBQUEsZUFBVyxFQUFFLENBQUM7TUFDak0sSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUNsQixPQUFPLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRTtVQUMzQkEsSUFBTSxPQUFPLEdBQUdZLEdBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztVQUMxQixJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxPQUFPLEVBQUU7WUFDL0IsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUMzQyxJQUFJLE1BQU0sQ0FBQyxjQUFjLEVBQUU7Y0FDekIsT0FBTztpQkFDSixJQUFJLEVBQUU7aUJBQ04sUUFBUSxFQUFDLENBQUcsTUFBTSxDQUFDLGlCQUFpQixXQUFNLEVBQUU7aUJBQzVDLElBQUksRUFBRTtpQkFDTixRQUFRLEVBQUMsQ0FBRyxNQUFNLENBQUMsaUJBQWlCLGdCQUFXLEVBQUUsQ0FBQztjQUNyRCxPQUFPO2lCQUNKLElBQUksRUFBRTtpQkFDTixRQUFRLEVBQUMsQ0FBRyxNQUFNLENBQUMsaUJBQWlCLFdBQU0sRUFBRTtpQkFDNUMsSUFBSSxFQUFFO2lCQUNOLFFBQVEsRUFBQyxDQUFHLE1BQU0sQ0FBQyxpQkFBaUIsZ0JBQVcsRUFBRSxDQUFDO2FBQ3REO1dBQ0Y7U0FDRixDQUFDLENBQUM7T0FDSixNQUFNO1FBQ0xaLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUMzQyxJQUFJLE1BQU0sQ0FBQyxjQUFjLEVBQUU7VUFDekIsT0FBTzthQUNKLElBQUksRUFBRTthQUNOLFFBQVEsRUFBQyxDQUFHLE1BQU0sQ0FBQyxpQkFBaUIsV0FBTSxFQUFFO2FBQzVDLElBQUksRUFBRTthQUNOLFFBQVEsRUFBQyxDQUFHLE1BQU0sQ0FBQyxpQkFBaUIsZ0JBQVcsRUFBRSxDQUFDO1VBQ3JELE9BQU87YUFDSixJQUFJLEVBQUU7YUFDTixRQUFRLEVBQUMsQ0FBRyxNQUFNLENBQUMsaUJBQWlCLFdBQU0sRUFBRTthQUM1QyxJQUFJLEVBQUU7YUFDTixRQUFRLEVBQUMsQ0FBRyxNQUFNLENBQUMsaUJBQWlCLGdCQUFXLEVBQUUsQ0FBQztTQUN0RDtPQUNGO01BQ0QsSUFBSSxNQUFNLENBQUMsY0FBYyxFQUFFO1FBQ3pCQSxJQUFNLGFBQWEsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFVBQVUsR0FBRyxDQUFDLEtBQUssTUFBTSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssT0FBTyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDN0ksT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRSxhQUFnQixPQUFHLEVBQUUsQ0FBQztPQUMzRTtLQUNGO0lBQ0QsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLFVBQVUsRUFBRTtNQUM5QixHQUFHLENBQUMsSUFBSSxFQUFDLEdBQUUsSUFBRSxNQUFNLENBQUMsWUFBWSxDQUFBLEVBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDO01BQ3RELEdBQUcsQ0FBQyxJQUFJLEVBQUMsR0FBRSxJQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUEsRUFBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUMvQztJQUNELElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxhQUFhLEVBQUU7TUFDakNBLElBQU0sS0FBSyxHQUFHLENBQUMsT0FBTyxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUM7TUFDcENELElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQztNQUNuQkEsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO01BQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsRUFBRTtRQUMxQixNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ2YsTUFBTSxHQUFHLENBQUMsQ0FBQztPQUNaO01BQ0QsR0FBRyxDQUFDLElBQUksRUFBQyxHQUFFLElBQUUsTUFBTSxDQUFDLG9CQUFvQixDQUFBLEVBQUcsQ0FBQyxTQUFTLEVBQUMsNEJBQTJCLEdBQUUsTUFBTSxjQUFVLEdBQUUsTUFBTSxNQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNqSjtJQUNELElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxRQUFRLElBQUksTUFBTSxDQUFDLFlBQVksRUFBRTtNQUNuRCxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLE9BQU8sR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztNQUMxRCxNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNqRCxNQUFNO01BQ0wsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDakQ7R0FDRjtFQUNELE1BQU0saUJBQUEsR0FBRzs7SUFFUEMsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3BCQSxJQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQztJQUN4QyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxFQUFBLE9BQU8sRUFBQTs7SUFFaEhBLElBQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDO0lBQ2xDRCxJQUFJLGNBQWMsR0FBRyxFQUFFLENBQUM7SUFDeEIsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBRTtNQUM3QkMsSUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztNQUNuSyxLQUFLRCxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQzNDLElBQUksTUFBTSxDQUFDLFlBQVksRUFBRTtVQUN2QixjQUFjLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDM0UsTUFBTTtVQUNMLGNBQWMsSUFBSSxHQUFFLElBQUUsTUFBTSxDQUFDLGFBQWEsQ0FBQSxjQUFTLElBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQSxVQUFLLElBQUUsTUFBTSxDQUFDLGFBQWEsQ0FBQSxNQUFFLENBQUU7U0FDdkc7T0FDRjtNQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7TUFDekIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLElBQUksRUFBQyxHQUFFLElBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQSxFQUFHLENBQUM7S0FDaEU7SUFDRCxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssVUFBVSxFQUFFO01BQzlCLElBQUksTUFBTSxDQUFDLGNBQWMsRUFBRTtRQUN6QixjQUFjLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO09BQzdGLE1BQU07UUFDTCxjQUFjO1FBQ2QsZ0JBQWMsSUFBRSxNQUFNLENBQUMsWUFBWSxDQUFBLGVBQVU7UUFDN0MsS0FBSztRQUNMLGdCQUFjLElBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQSxlQUFVLENBQUU7T0FDOUM7TUFDRCxHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0tBQzFCO0lBQ0QsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLGFBQWEsRUFBRTtNQUNqQyxJQUFJLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRTtRQUM1QixjQUFjLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUM7T0FDckYsTUFBTTtRQUNMLGNBQWMsR0FBRyxnQkFBYyxJQUFFLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQSxlQUFVLENBQUU7T0FDekU7TUFDRCxHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0tBQzFCO0lBQ0QsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtNQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDM0Q7R0FDRjtFQUNELElBQUksZUFBQSxHQUFHO0lBQ0xDLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztJQUNwQkEsSUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7SUFDeEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBQSxPQUFPLEVBQUE7O0lBRXZCRCxJQUFJLEdBQUcsR0FBR2EsR0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2QixJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLEVBQUEsT0FBTyxFQUFBOztJQUU3QjtNQUNFLE1BQU0sQ0FBQyxNQUFNLENBQUMsaUJBQWlCO01BQy9CLE9BQU8sTUFBTSxDQUFDLEVBQUUsS0FBSyxRQUFRO01BQzdCLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQztNQUNkLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQztNQUN2QztNQUNBLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDbEM7O0lBRUQsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLFNBQVMsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFO01BQ2pELEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0tBQ3JDOztJQUVELEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7O0lBRWpELElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxTQUFTLElBQUksTUFBTSxDQUFDLGNBQWMsRUFBRTtNQUN0RCxHQUFHLENBQUMsUUFBUSxFQUFDLEVBQUMsSUFBRSxNQUFNLENBQUMsYUFBYSxDQUFBLElBQUcsTUFBTSxDQUFDLElBQUksQ0FBQSxhQUFTLEVBQUUsQ0FBQztLQUMvRDs7SUFFRCxJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUU7TUFDcEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEdBQUUsR0FBRSxJQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUEsR0FBSSxTQUFTLE9BQU8sQ0FBQyxDQUFDLEVBQUU7UUFDNUQsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ25CYixJQUFJLEtBQUssR0FBR2EsR0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDO1FBQzNELElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBQSxLQUFLLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFBO1FBQ3JELE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7T0FDdkIsQ0FBQyxDQUFDO0tBQ0o7O0lBRUQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFO01BQzlCLEtBQUEsR0FBRztNQUNILEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ1gsQ0FBQyxDQUFDO0dBQ0o7RUFDRCxPQUFPLGtCQUFBLEdBQUc7SUFDUlosSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3BCQSxJQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQztJQUN4QyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxFQUFBLE9BQU8sRUFBQTtJQUNoSEEsSUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUM7O0lBRWxDLEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3BDLEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEQsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxFQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxFQUFBO0lBQy9GLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRTtNQUNwQixHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sR0FBRSxHQUFFLElBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQSxFQUFHLENBQUM7S0FDNUM7R0FDRjtDQUNGLENBQUM7O0FBRUYsSUFBSSxZQUFZLEdBQUc7RUFDakIsSUFBSSxFQUFFLFlBQVk7RUFDbEIsTUFBTSxFQUFFO0lBQ04sVUFBVSxFQUFFO01BQ1YsRUFBRSxFQUFFLElBQUk7TUFDUixhQUFhLEVBQUUsTUFBTTtNQUNyQixTQUFTLEVBQUUsS0FBSztNQUNoQixXQUFXLEVBQUUsS0FBSztNQUNsQixZQUFZLEVBQUUsSUFBSTtNQUNsQixpQkFBaUIsRUFBRSxJQUFJO01BQ3ZCLGNBQWMsRUFBRSxJQUFJO01BQ3BCLFlBQVksRUFBRSxJQUFJO01BQ2xCLElBQUksRUFBRSxTQUFTO01BQ2YsY0FBYyxFQUFFLEtBQUs7O01BRXJCLFdBQVcsRUFBRSwwQkFBMEI7TUFDdkMsaUJBQWlCLEVBQUUsaUNBQWlDO01BQ3BELGFBQWEsRUFBRSxvQkFBb0I7TUFDbkMsWUFBWSxFQUFFLDJCQUEyQjtNQUN6QyxVQUFVLEVBQUUseUJBQXlCO01BQ3JDLFdBQVcsRUFBRSwwQkFBMEI7TUFDdkMsb0JBQW9CLEVBQUUsb0NBQW9DO01BQzFELGNBQWMsRUFBRSw2QkFBNkI7S0FDOUM7R0FDRjtFQUNELE1BQU0saUJBQUEsR0FBRztJQUNQQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDcEIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7TUFDbkIsVUFBVSxFQUFFO1FBQ1YsSUFBSSxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNsQyxNQUFNLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3RDLE1BQU0sRUFBRSxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDdEMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztPQUN6QztLQUNGLENBQUMsQ0FBQztHQUNKO0VBQ0QsRUFBRSxFQUFFO0lBQ0YsSUFBSSxlQUFBLEdBQUc7TUFDTEEsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO01BQ3BCLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7TUFDekIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztNQUMzQixNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDO0tBQzVCO0lBQ0QsaUJBQWlCLDRCQUFBLEdBQUc7TUFDbEJBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztNQUNwQixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO1FBQ3RCLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUM7T0FDNUIsTUFBTSxJQUFJLE9BQU8sTUFBTSxDQUFDLFNBQVMsS0FBSyxXQUFXLEVBQUU7UUFDbEQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztPQUM1QjtLQUNGO0lBQ0QsZUFBZSwwQkFBQSxHQUFHO01BQ2hCQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7TUFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO1FBQ3ZCLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUM7T0FDNUI7S0FDRjtJQUNELGtCQUFrQiw2QkFBQSxHQUFHO01BQ25CQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7TUFDcEIsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtRQUN0QixNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzNCLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUM7T0FDNUI7S0FDRjtJQUNELG9CQUFvQiwrQkFBQSxHQUFHO01BQ3JCQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7TUFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO1FBQ3ZCLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDM0IsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztPQUM1QjtLQUNGO0lBQ0QsT0FBTyxrQkFBQSxHQUFHO01BQ1JBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztNQUNwQixNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQzdCO0lBQ0QsS0FBSyxnQkFBQSxDQUFDLENBQUMsRUFBRTtNQUNQQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7TUFDcEI7UUFDRSxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQzNCLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFdBQVc7UUFDcEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUM7UUFDaEMsQ0FBQ1ksR0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDO1FBQzNEO1FBQ0EsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO09BQ3pFO0tBQ0Y7R0FDRjtDQUNGLENBQUM7O0FBRUZaLElBQU0sU0FBUyxHQUFHO0VBQ2hCLFlBQVksdUJBQUEsR0FBRztJQUNiQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLEVBQUEsT0FBTyxFQUFBO0lBQ2hFLElBQVEsU0FBUztJQUFFLElBQUEsR0FBRztJQUFFLElBQUEsUUFBUSxtQkFBMUI7SUFDTixJQUFRLFFBQVE7SUFBRSxJQUFBLFNBQVM7SUFBRSxJQUFBLE9BQU87SUFBRSxJQUFBLEdBQUcsaUJBQW5DO0lBQ05BLElBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDOztJQUV2Q0QsSUFBSSxPQUFPLEdBQUcsUUFBUSxDQUFDO0lBQ3ZCQSxJQUFJLE1BQU0sR0FBRyxDQUFDLFNBQVMsR0FBRyxRQUFRLElBQUksUUFBUSxDQUFDO0lBQy9DLElBQUksR0FBRyxJQUFJLE1BQU0sQ0FBQyxZQUFZLEVBQUUsRUFBRTtNQUNoQyxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUM7TUFDakIsSUFBSSxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ2QsT0FBTyxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUM7UUFDNUIsTUFBTSxHQUFHLENBQUMsQ0FBQztPQUNaLE1BQU0sSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLEdBQUcsU0FBUyxFQUFFO1FBQ3pDLE9BQU8sR0FBRyxTQUFTLEdBQUcsTUFBTSxDQUFDO09BQzlCO0tBQ0YsTUFBTSxJQUFJLE1BQU0sR0FBRyxDQUFDLEVBQUU7TUFDckIsT0FBTyxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUM7TUFDNUIsTUFBTSxHQUFHLENBQUMsQ0FBQztLQUNaLE1BQU0sSUFBSSxNQUFNLEdBQUcsUUFBUSxHQUFHLFNBQVMsRUFBRTtNQUN4QyxPQUFPLEdBQUcsU0FBUyxHQUFHLE1BQU0sQ0FBQztLQUM5QjtJQUNELElBQUksTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFFO01BQ3pCLElBQUksU0FBUyxDQUFDLFlBQVksRUFBRTtRQUMxQixPQUFPLENBQUMsU0FBUyxFQUFDLGNBQWEsR0FBRSxNQUFNLGNBQVUsRUFBRSxDQUFDO09BQ3JELE1BQU07UUFDTCxPQUFPLENBQUMsU0FBUyxFQUFDLGFBQVksR0FBRSxNQUFNLFFBQUksRUFBRSxDQUFDO09BQzlDO01BQ0QsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsT0FBVSxPQUFHLENBQUU7S0FDekMsTUFBTTtNQUNMLElBQUksU0FBUyxDQUFDLFlBQVksRUFBRTtRQUMxQixPQUFPLENBQUMsU0FBUyxFQUFDLG1CQUFrQixHQUFFLE1BQU0sV0FBTyxFQUFFLENBQUM7T0FDdkQsTUFBTTtRQUNMLE9BQU8sQ0FBQyxTQUFTLEVBQUMsYUFBWSxHQUFFLE1BQU0sUUFBSSxFQUFFLENBQUM7T0FDOUM7TUFDRCxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxPQUFVLE9BQUcsQ0FBRTtLQUMxQztJQUNELElBQUksTUFBTSxDQUFDLElBQUksRUFBRTtNQUNmLFlBQVksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO01BQ3ZDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztNQUN6QixNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsWUFBRztRQUN2QyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFDekIsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztPQUNyQixFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ1Y7R0FDRjtFQUNELGFBQWEsd0JBQUEsQ0FBQyxRQUFRLEVBQUU7SUFDdEJDLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztJQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsRUFBQSxPQUFPLEVBQUE7SUFDaEUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0dBQy9DO0VBQ0QsVUFBVSxxQkFBQSxHQUFHO0lBQ1hBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztJQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsRUFBQSxPQUFPLEVBQUE7O0lBRWhFLElBQVEsU0FBUyxvQkFBWDtJQUNOLElBQVEsT0FBTztJQUFFLElBQUEsR0FBRyxpQkFBZDs7SUFFTixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDNUIsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBQzdCQSxJQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDOztJQUVuRkEsSUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDO0lBQ2pEQSxJQUFNLFdBQVcsR0FBRyxPQUFPLElBQUksU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4REQsSUFBSSxRQUFRLENBQUM7SUFDYixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsS0FBSyxNQUFNLEVBQUU7TUFDL0MsUUFBUSxHQUFHLFNBQVMsR0FBRyxPQUFPLENBQUM7S0FDaEMsTUFBTTtNQUNMLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0tBQzNEOztJQUVELElBQUksTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFFO01BQ3pCLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLFFBQVcsT0FBRyxDQUFFO0tBQzFDLE1BQU07TUFDTCxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxRQUFXLE9BQUcsQ0FBRTtLQUMzQzs7SUFFRCxJQUFJLE9BQU8sSUFBSSxDQUFDLEVBQUU7TUFDaEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0tBQy9CLE1BQU07TUFDTCxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7S0FDM0I7SUFDRCxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFO01BQy9CLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztLQUMxQjtJQUNELEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFO01BQ3RCLFdBQUEsU0FBUztNQUNULFNBQUEsT0FBTztNQUNQLGFBQUEsV0FBVztNQUNYLFVBQUEsUUFBUTtLQUNULENBQUMsQ0FBQztHQUNKO0VBQ0QsZUFBZSwwQkFBQSxDQUFDLENBQUMsRUFBRTtJQUNqQkMsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLElBQVEsU0FBUyxvQkFBWDtJQUNOLElBQVEsR0FBRztJQUFFLElBQUEsUUFBUTtJQUFFLElBQUEsV0FBVyx5QkFBNUI7O0lBRU5ELElBQUksZUFBZSxDQUFDO0lBQ3BCLElBQUksTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFFO01BQ3pCLGVBQWUsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssWUFBWSxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssV0FBVyxJQUFJLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzNILE1BQU07TUFDTCxlQUFlLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLFlBQVksSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLFdBQVcsSUFBSSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUMzSDtJQUNEQSxJQUFJLFFBQVEsR0FBRyxDQUFDLGVBQWUsSUFBSSxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxHQUFHLE1BQU0sR0FBRyxLQUFLLENBQUMsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDekdDLElBQU0sV0FBVyxHQUFHLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxHQUFHLFdBQVcsQ0FBQztJQUN6REEsSUFBTSxXQUFXLEdBQUcsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLEdBQUcsV0FBVyxDQUFDO0lBQ3pELElBQUksUUFBUSxHQUFHLFdBQVcsRUFBRTtNQUMxQixRQUFRLEdBQUcsV0FBVyxDQUFDO0tBQ3hCLE1BQU0sSUFBSSxRQUFRLEdBQUcsV0FBVyxFQUFFO01BQ2pDLFFBQVEsR0FBRyxXQUFXLENBQUM7S0FDeEI7SUFDRCxRQUFRLEdBQUcsQ0FBQyxRQUFRLEdBQUcsV0FBVyxDQUFDO0lBQ25DLE1BQU0sQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEMsTUFBTSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM5QixNQUFNLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMzQixNQUFNLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUM3QixNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7R0FDMUI7RUFDRCxXQUFXLHNCQUFBLENBQUMsQ0FBQyxFQUFFO0lBQ2JBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztJQUNwQkEsSUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFDdkMsSUFBUSxTQUFTO0lBQUUsSUFBQSxVQUFVLHFCQUF2QjtJQUNOLElBQVEsR0FBRztJQUFFLElBQUEsT0FBTyxxQkFBZDtJQUNOLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUNsQyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDbkIsQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDOztJQUVwQixVQUFVLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDeEIsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7SUFFN0IsWUFBWSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7O0lBRTNDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEIsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFO01BQ2YsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDdkI7SUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQ3RDO0VBQ0QsVUFBVSxxQkFBQSxDQUFDLENBQUMsRUFBRTtJQUNaQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDcEIsSUFBUSxTQUFTO0lBQUUsSUFBQSxVQUFVLHFCQUF2QjtJQUNOLElBQVEsR0FBRztJQUFFLElBQUEsT0FBTyxxQkFBZDs7SUFFTixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsRUFBQSxPQUFPLEVBQUE7SUFDeEMsSUFBSSxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUEsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDLEVBQUE7U0FDcEMsRUFBQSxDQUFDLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxFQUFBO0lBQzNCLFNBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0IsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QixHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xCLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNyQztFQUNELFNBQVMsb0JBQUEsQ0FBQyxDQUFDLEVBQUU7SUFDWEEsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDOztJQUVwQkEsSUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFDdkMsSUFBUSxTQUFTLG9CQUFYO0lBQ04sSUFBUSxHQUFHLGlCQUFMOztJQUVOLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxFQUFBLE9BQU8sRUFBQTtJQUN4QyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7SUFDbkMsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFO01BQ2YsWUFBWSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7TUFDM0MsTUFBTSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxZQUFHO1FBQy9DLEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7T0FDckIsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUNWO0lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuQyxJQUFJLE1BQU0sQ0FBQyxhQUFhLEVBQUU7TUFDeEIsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO0tBQ3JCO0dBQ0Y7RUFDRCxlQUFlLDBCQUFBLEdBQUc7SUFDaEJBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztJQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLEVBQUEsT0FBTyxFQUFBO0lBQ3hDLElBQVEsU0FBUyxvQkFBWDtJQUNOQSxJQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDO0lBQzFCQSxJQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUM7SUFDbkQsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN4RVksR0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM1RUEsR0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztHQUMzRTtFQUNELGdCQUFnQiwyQkFBQSxHQUFHO0lBQ2pCWixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxFQUFBLE9BQU8sRUFBQTtJQUN4QyxJQUFRLFNBQVMsb0JBQVg7SUFDTkEsSUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQztJQUMxQkEsSUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDO0lBQ25ELEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0NZLEdBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaERBLEdBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDaEQ7RUFDRCxJQUFJLGVBQUEsR0FBRztJQUNMWixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxFQUFBLE9BQU8sRUFBQTtJQUN4QyxJQUFRLFNBQVM7SUFBTyxJQUFBLFNBQVM7SUFBRSxJQUFBLFdBQVcsc0JBQXhDO0lBQ05BLElBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDOztJQUV2Q0QsSUFBSSxHQUFHLEdBQUdhLEdBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdkIsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLGlCQUFpQixJQUFJLE9BQU8sTUFBTSxDQUFDLEVBQUUsS0FBSyxRQUFRLElBQUksR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtNQUNoSSxHQUFHLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDakM7O0lBRURiLElBQUksT0FBTyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUNqRCxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO01BQ3hCLE9BQU8sR0FBR2EsR0FBQyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7TUFDekQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNyQjs7SUFFRCxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsSUFBSSxTQUFTLFVBQVUsR0FBRztNQUNuRCxLQUFLLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxLQUFLLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUc7UUFDL0QsT0FBTztVQUNMLEtBQUssRUFBRSxXQUFXO1VBQ2xCLElBQUksRUFBRSxXQUFXO1VBQ2pCLEdBQUcsRUFBRSxTQUFTO1NBQ2YsQ0FBQztPQUNIO01BQ0QsT0FBTyxXQUFXLENBQUM7S0FDcEIsRUFBRSxDQUFDLENBQUM7O0lBRUwsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7TUFDdEIsS0FBQSxHQUFHO01BQ0gsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7TUFDVixTQUFBLE9BQU87TUFDUCxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztLQUNuQixDQUFDLENBQUM7O0lBRUgsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFO01BQ3BCLFNBQVMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztLQUM3QjtHQUNGO0VBQ0QsT0FBTyxrQkFBQSxHQUFHO0lBQ1JaLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztJQUNwQixNQUFNLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUM7R0FDckM7Q0FDRixDQUFDOztBQUVGLElBQUksV0FBVyxHQUFHO0VBQ2hCLElBQUksRUFBRSxXQUFXO0VBQ2pCLE1BQU0sRUFBRTtJQUNOLFNBQVMsRUFBRTtNQUNULEVBQUUsRUFBRSxJQUFJO01BQ1IsUUFBUSxFQUFFLE1BQU07TUFDaEIsSUFBSSxFQUFFLEtBQUs7TUFDWCxTQUFTLEVBQUUsS0FBSztNQUNoQixhQUFhLEVBQUUsS0FBSztLQUNyQjtHQUNGO0VBQ0QsTUFBTSxpQkFBQSxHQUFHO0lBQ1BBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztJQUNwQixLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtNQUNuQixTQUFTLEVBQUU7UUFDVCxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ2pDLE9BQU8sRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDdkMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUM3QyxZQUFZLEVBQUUsU0FBUyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ2pELGFBQWEsRUFBRSxTQUFTLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDbkQsZUFBZSxFQUFFLFNBQVMsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUN2RCxnQkFBZ0IsRUFBRSxTQUFTLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUN6RCxlQUFlLEVBQUUsU0FBUyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3ZELFdBQVcsRUFBRSxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDL0MsVUFBVSxFQUFFLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUM3QyxTQUFTLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzNDLFNBQVMsRUFBRSxLQUFLO1FBQ2hCLE9BQU8sRUFBRSxJQUFJO1FBQ2IsV0FBVyxFQUFFLElBQUk7T0FDbEI7S0FDRixDQUFDLENBQUM7R0FDSjtFQUNELEVBQUUsRUFBRTtJQUNGLElBQUksZUFBQSxHQUFHO01BQ0xBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztNQUNwQixNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO01BQ3hCLE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLENBQUM7TUFDOUIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztLQUNqQztJQUNELE1BQU0saUJBQUEsR0FBRztNQUNQQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7TUFDcEIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztLQUMvQjtJQUNELE1BQU0saUJBQUEsR0FBRztNQUNQQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7TUFDcEIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztLQUMvQjtJQUNELGNBQWMseUJBQUEsR0FBRztNQUNmQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7TUFDcEIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztLQUMvQjtJQUNELFlBQVksdUJBQUEsR0FBRztNQUNiQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7TUFDcEIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztLQUNqQztJQUNELGFBQWEsd0JBQUEsQ0FBQyxRQUFRLEVBQUU7TUFDdEJBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztNQUNwQixNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUMxQztJQUNELE9BQU8sa0JBQUEsR0FBRztNQUNSQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7TUFDcEIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUM1QjtHQUNGO0NBQ0YsQ0FBQzs7QUFFRkEsSUFBTSxRQUFRLEdBQUc7RUFDZixZQUFZLHVCQUFBLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRTtJQUN6QkEsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLElBQVEsR0FBRyxjQUFMOztJQUVOQSxJQUFNLEdBQUcsR0FBR1ksR0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xCWixJQUFNLFNBQVMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDOztJQUUvQkEsSUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLEdBQUcsQ0FBQztJQUNsREQsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQzNDQSxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFDM0NDLElBQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsNEJBQTRCLENBQUMsQ0FBQztJQUNyREEsSUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDOztJQUV6RCxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7TUFDVixDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQztNQUNiLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDO0tBQ2QsTUFBTSxJQUFJLE1BQU0sQ0FBQyxZQUFZLEVBQUUsRUFBRTtNQUNoQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO01BQ04sQ0FBQyxHQUFHLEdBQUcsQ0FBQztLQUNULE1BQU07TUFDTCxDQUFDLEdBQUcsQ0FBQyxDQUFDO01BQ04sQ0FBQyxHQUFHLEdBQUcsQ0FBQztLQUNUOztJQUVELElBQUksQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtNQUN6QixDQUFDLEdBQUcsQ0FBRyxRQUFRLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLFFBQVEsR0FBRyxTQUFTLE9BQUUsQ0FBRTtLQUNsRCxNQUFNO01BQ0wsQ0FBQyxHQUFHLENBQUcsQ0FBQyxHQUFHLFFBQVEsR0FBRyxTQUFTLFFBQUcsQ0FBRTtLQUNyQztJQUNELElBQUksQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtNQUN6QixDQUFDLEdBQUcsQ0FBRyxRQUFRLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLFFBQVEsT0FBRSxDQUFFO0tBQ3RDLE1BQU07TUFDTCxDQUFDLEdBQUcsQ0FBRyxDQUFDLEdBQUcsUUFBUSxRQUFHLENBQUU7S0FDekI7O0lBRUQsSUFBSSxPQUFPLFFBQVEsS0FBSyxXQUFXLElBQUksT0FBTyxLQUFLLElBQUksRUFBRTtNQUN2REEsSUFBTSxjQUFjLEdBQUcsT0FBTyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDNUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsY0FBYyxDQUFDO0tBQ3ZDO0lBQ0QsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLElBQUksS0FBSyxLQUFLLElBQUksRUFBRTtNQUNuRCxHQUFHLENBQUMsU0FBUyxFQUFDLGNBQWEsR0FBRSxDQUFDLE9BQUcsR0FBRSxDQUFDLFdBQU8sRUFBRSxDQUFDO0tBQy9DLE1BQU07TUFDTEEsSUFBTSxZQUFZLEdBQUcsS0FBSyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDdEUsR0FBRyxDQUFDLFNBQVMsRUFBQyxjQUFhLEdBQUUsQ0FBQyxPQUFHLEdBQUUsQ0FBQyxrQkFBYyxHQUFFLFlBQVksTUFBRSxFQUFFLENBQUM7S0FDdEU7R0FDRjtFQUNELFlBQVksdUJBQUEsR0FBRztJQUNiQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDcEIsSUFBUSxHQUFHO0lBQUUsSUFBQSxNQUFNO0lBQUUsSUFBQSxRQUFRLG1CQUF2QjtJQUNOLEdBQUcsQ0FBQyxRQUFRLENBQUMsNEVBQTRFLENBQUM7T0FDdkYsSUFBSSxDQUFDLFVBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRTtRQUNoQixNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7T0FDNUMsQ0FBQyxDQUFDO0lBQ0wsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUU7TUFDaENZLEdBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsNEVBQTRFLENBQUM7U0FDMUYsSUFBSSxDQUFDLFVBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRTtVQUNoQlosSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztVQUNsRSxNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsYUFBYSxDQUFDLENBQUM7U0FDakQsQ0FBQyxDQUFDO0tBQ04sQ0FBQyxDQUFDO0dBQ0o7RUFDRCxhQUFhLHdCQUFBLENBQUMsUUFBNEIsRUFBRTt1Q0FBdEIsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUs7O0lBQ3hDQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDcEIsSUFBUSxHQUFHLGNBQUw7SUFDTixHQUFHLENBQUMsSUFBSSxDQUFDLDRFQUE0RSxDQUFDO09BQ25GLElBQUksQ0FBQyxVQUFDLEtBQUssRUFBRSxVQUFVLEVBQUU7UUFDeEJBLElBQU0sV0FBVyxHQUFHWSxHQUFDLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbENiLElBQUksZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsK0JBQStCLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxRQUFRLENBQUM7UUFDbkcsSUFBSSxRQUFRLEtBQUssQ0FBQyxFQUFFLEVBQUEsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDLEVBQUE7UUFDekMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO09BQzFDLENBQUMsQ0FBQztHQUNOO0NBQ0YsQ0FBQzs7QUFFRixJQUFJLFVBQVUsR0FBRztFQUNmLElBQUksRUFBRSxVQUFVO0VBQ2hCLE1BQU0sRUFBRTtJQUNOLFFBQVEsRUFBRTtNQUNSLE9BQU8sRUFBRSxLQUFLO0tBQ2Y7R0FDRjtFQUNELE1BQU0saUJBQUEsR0FBRztJQUNQQyxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDcEIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7TUFDbkIsUUFBUSxFQUFFO1FBQ1IsWUFBWSxFQUFFLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNoRCxZQUFZLEVBQUUsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ2hELGFBQWEsRUFBRSxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7T0FDbkQ7S0FDRixDQUFDLENBQUM7R0FDSjtFQUNELEVBQUUsRUFBRTtJQUNGLFVBQVUscUJBQUEsR0FBRztNQUNYQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7TUFDcEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUM7S0FDMUM7SUFDRCxJQUFJLGVBQUEsR0FBRztNQUNMQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7TUFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUEsT0FBTyxFQUFBO01BQ3BDLE1BQU0sQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUM7S0FDaEM7SUFDRCxZQUFZLHVCQUFBLEdBQUc7TUFDYkEsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO01BQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFBLE9BQU8sRUFBQTtNQUNwQyxNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDO0tBQ2hDO0lBQ0QsYUFBYSx3QkFBQSxDQUFDLFFBQVEsRUFBRTtNQUN0QkEsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO01BQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFBLE9BQU8sRUFBQTtNQUNwQyxNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN6QztHQUNGO0NBQ0YsQ0FBQzs7QUFFRkEsSUFBTSxJQUFJLEdBQUc7O0VBRVgseUJBQXlCLG9DQUFBLENBQUMsQ0FBQyxFQUFFO0lBQzNCLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLEVBQUEsT0FBTyxDQUFDLENBQUMsRUFBQTtJQUN6Q0EsSUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDcENBLElBQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ3BDQSxJQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNwQ0EsSUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDcENBLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUssQ0FBQyxFQUFBLEtBQUssV0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFLLENBQUMsRUFBQSxDQUFDLENBQUMsQ0FBQztJQUNoRSxPQUFPLFFBQVEsQ0FBQztHQUNqQjs7RUFFRCxjQUFjLHlCQUFBLENBQUMsQ0FBQyxFQUFFO0lBQ2hCQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDcEJBLElBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2xDQSxJQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ3pCLElBQVEsT0FBTyxnQkFBVDtJQUNOLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFO01BQ3ZCLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLElBQUksS0FBSyxZQUFZLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUU7UUFDdEYsT0FBTztPQUNSO01BQ0QsT0FBTyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDeEQ7SUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO01BQ2pELE9BQU8sQ0FBQyxRQUFRLEdBQUdZLEdBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztNQUMzQixJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxFQUFBLE9BQU8sQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUE7TUFDM0YsT0FBTyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO01BQzdELE9BQU8sQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUMsR0FBRSxJQUFFLE1BQU0sQ0FBQyxjQUFjLENBQUEsRUFBRyxDQUFDO01BQzVFLE9BQU8sQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDO01BQ3BGLElBQUksT0FBTyxDQUFDLFlBQVksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3JDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO1FBQzdCLE9BQU87T0FDUjtLQUNGO0lBQ0QsT0FBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0IsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0dBQzlCO0VBQ0QsZUFBZSwwQkFBQSxDQUFDLENBQUMsRUFBRTtJQUNqQlosSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3BCQSxJQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNsQ0EsSUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztJQUN6QixJQUFRLE9BQU8sZ0JBQVQ7SUFDTixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRTtNQUN2QixJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssV0FBVyxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssV0FBVyxJQUFJLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFO1FBQ3BGLE9BQU87T0FDUjtNQUNELE9BQU8sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3ZEO0lBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLEVBQUEsT0FBTyxFQUFBO0lBQy9ELElBQUksU0FBUyxDQUFDLFFBQVEsRUFBRTtNQUN0QixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7S0FDakQsTUFBTTtNQUNMLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQztLQUMzRTtJQUNELElBQUksSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsUUFBUSxFQUFFO01BQ2pDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxHQUFHLENBQUMsS0FBSyxXQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsUUFBUSxJQUFJLENBQUMsR0FBSyxHQUFHLEVBQUEsQ0FBQyxDQUFDO0tBQ3RGO0lBQ0QsSUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUU7TUFDaEMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxLQUFLLFdBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxHQUFLLEdBQUcsRUFBQSxDQUFDLENBQUM7S0FDcEY7SUFDRCxPQUFPLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBQywyQkFBMEIsSUFBRSxJQUFJLENBQUMsS0FBSyxDQUFBLE1BQUUsRUFBRSxDQUFDO0dBQ3ZFO0VBQ0QsWUFBWSx1QkFBQSxDQUFDLENBQUMsRUFBRTtJQUNkQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDcEJBLElBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2xDQSxJQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ3pCLElBQVEsT0FBTyxnQkFBVDtJQUNOLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFO01BQ3ZCLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxVQUFVLEtBQUssQ0FBQyxDQUFDLElBQUksS0FBSyxVQUFVLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUU7UUFDbkYsT0FBTztPQUNSO0tBQ0Y7SUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsRUFBQSxPQUFPLEVBQUE7SUFDL0QsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQy9FLE9BQU8sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxFQUFDLDJCQUEwQixJQUFFLElBQUksQ0FBQyxLQUFLLENBQUEsTUFBRSxFQUFFLENBQUM7SUFDdEcsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQy9CLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFDLEVBQUUsRUFBQSxPQUFPLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxFQUFBO0dBQ3BEO0VBQ0QsWUFBWSx1QkFBQSxDQUFDLENBQUMsRUFBRTtJQUNkQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDcEJBLElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDekIsSUFBUSxPQUFPO0lBQUUsSUFBQSxLQUFLLGNBQWhCO0lBQ04sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLEVBQUEsT0FBTyxFQUFBO0lBQy9ELElBQUksS0FBSyxDQUFDLFNBQVMsRUFBRSxFQUFBLE9BQU8sRUFBQTtJQUM1QixJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUUsRUFBQSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsRUFBQTtJQUN6QyxLQUFLLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUN2QixLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxLQUFLLFlBQVksR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ3BGLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEtBQUssWUFBWSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7R0FDckY7RUFDRCxXQUFXLHNCQUFBLENBQUMsQ0FBQyxFQUFFO0lBQ2JBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztJQUNwQkEsSUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztJQUN6QixJQUFRLE9BQU87SUFBRSxJQUFBLEtBQUs7SUFBRSxJQUFBLFFBQVEsaUJBQTFCO0lBQ04sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLEVBQUEsT0FBTyxFQUFBO0lBQy9ELE1BQU0sQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO0lBQzFCLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFBLE9BQU8sRUFBQTs7SUFFbEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUU7TUFDbEIsS0FBSyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztNQUM5QyxLQUFLLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO01BQ2hELEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztNQUNyRSxLQUFLLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7TUFDckUsT0FBTyxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztNQUNyRCxPQUFPLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO01BQ3ZELE9BQU8sQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQ25DLElBQUksTUFBTSxDQUFDLEdBQUcsRUFBRSxFQUFBLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUE7TUFDN0MsSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFLEVBQUEsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBQTtLQUM5Qzs7SUFFREEsSUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQzdDQSxJQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7O0lBRS9DLElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxVQUFVLElBQUksWUFBWSxHQUFHLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBQSxPQUFPLEVBQUE7O0lBRW5GLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUcsQ0FBQyxLQUFLLFdBQVcsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN6RSxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztJQUN6QixLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxHQUFHLENBQUMsS0FBSyxZQUFZLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDM0UsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7O0lBRXpCLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEtBQUssV0FBVyxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDckYsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksS0FBSyxXQUFXLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7SUFFckYsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO01BQ3JDO1FBQ0UsTUFBTSxDQUFDLFlBQVksRUFBRTs7VUFFbkIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7V0FDcEcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7U0FDdkc7UUFDRDtRQUNBLEtBQUssQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLE9BQU87T0FDUixNQUFNO1FBQ0wsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFOztVQUVwQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztXQUNwRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztTQUN2RztRQUNEO1FBQ0EsS0FBSyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDeEIsT0FBTztPQUNSO0tBQ0Y7SUFDRCxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDbkIsQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDOztJQUVwQixLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztJQUNyQixLQUFLLENBQUMsUUFBUSxHQUFHLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUNoRixLQUFLLENBQUMsUUFBUSxHQUFHLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQzs7SUFFaEYsSUFBSSxLQUFLLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUU7TUFDL0IsS0FBSyxDQUFDLFFBQVEsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLFdBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxRQUFRLElBQUksQ0FBQyxHQUFLLEdBQUcsRUFBQSxDQUFDLENBQUM7S0FDbEY7SUFDRCxJQUFJLEtBQUssQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRTtNQUMvQixLQUFLLENBQUMsUUFBUSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssV0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUssR0FBRyxFQUFBLENBQUMsQ0FBQztLQUNsRjs7SUFFRCxJQUFJLEtBQUssQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRTtNQUMvQixLQUFLLENBQUMsUUFBUSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssV0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLFFBQVEsSUFBSSxDQUFDLEdBQUssR0FBRyxFQUFBLENBQUMsQ0FBQztLQUNsRjtJQUNELElBQUksS0FBSyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFO01BQy9CLEtBQUssQ0FBQyxRQUFRLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxXQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBSyxHQUFHLEVBQUEsQ0FBQyxDQUFDO0tBQ2xGOzs7SUFHRCxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxFQUFBLFFBQVEsQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBQTtJQUM3RSxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxFQUFBLFFBQVEsQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBQTtJQUM3RSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxFQUFBLFFBQVEsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUE7SUFDdkQsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxhQUFhLEtBQUssSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdEcsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxhQUFhLEtBQUssSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdEcsSUFBSSxJQUFJLENBQUMsR0FBRyxD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